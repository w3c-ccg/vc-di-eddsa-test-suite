{
  "matrices": [
    {
      "title": "Data Integrity (eddsa-rdfc-2022 issuers)",
      "ctx": null,
      "suites": [
        {
          "title": "apicatalog.com",
          "ctx": null,
          "suites": [
            {
              "title": "Algorithms",
              "ctx": null,
              "suites": [
                {
                  "title": "Add Proof",
                  "ctx": null,
                  "suites": [],
                  "tests": [
                    {
                      "type": "test",
                      "title": "Whenever this algorithm encodes strings, it MUST use UTF-8 encoding.",
                      "body": "function() {\n            this.test.link = 'https://www.w3.org/TR/vc-data-integrity/#:~:text=or%20an%20error.-,Whenever%20this%20algorithm%20encodes%20strings%2C%20it%20MUST%20use%20UTF%2D8%20encoding.,-Let%20proof%20be';\n            for(const proof of proofs) {\n              expect(proof.proofValue.isWellFormed()).to.be.true;\n            }\n          }",
                      "async": 0,
                      "sync": true,
                      "_timeout": 15000,
                      "_slow": 75,
                      "_retries": -1,
                      "timedOut": false,
                      "_currentRetry": 0,
                      "pending": false,
                      "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
                      "parent": "PlyHk4HHd3S91GDJvucFm",
                      "ctx": null,
                      "_testId": "urn:uuid:8ab40d5f-bd08-4ac4-9d2c-be26a9b80be3",
                      "cell": {
                        "columnId": "apicatalog.com",
                        "rowId": "Whenever this algorithm encodes strings, it MUST use UTF-8 encoding."
                      },
                      "_events": {},
                      "_eventsCount": 1,
                      "link": "https://www.w3.org/TR/vc-data-integrity/#:~:text=or%20an%20error.-,Whenever%20this%20algorithm%20encodes%20strings%2C%20it%20MUST%20use%20UTF%2D8%20encoding.,-Let%20proof%20be",
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast"
                    },
                    {
                      "type": "test",
                      "title": "If the algorithm produces an error, the error MUST be propagated and SHOULD convey the error type.",
                      "body": "function() {\n            this.test.link = 'https://www.w3.org/TR/vc-data-integrity/#:~:text=If%20the%20algorithm%20produces%20an%20error%2C%20the%20error%20MUST%20be%20propagated%20and%20SHOULD%20convey%20the%20error%20type.';\n            this.test.cell.skipMessage = 'Pending test.';\n            this.skip();\n          }",
                      "async": 0,
                      "sync": true,
                      "_timeout": 15000,
                      "_slow": 75,
                      "_retries": -1,
                      "timedOut": false,
                      "_currentRetry": 0,
                      "pending": true,
                      "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
                      "parent": "PlyHk4HHd3S91GDJvucFm",
                      "ctx": null,
                      "_testId": "urn:uuid:874499e5-54f2-4891-98bf-e78e15807634",
                      "cell": {
                        "columnId": "apicatalog.com",
                        "rowId": "If the algorithm produces an error, the error MUST be propagated and SHOULD convey the error type.",
                        "skipMessage": "Pending test."
                      },
                      "_events": {},
                      "_eventsCount": 1,
                      "link": "https://www.w3.org/TR/vc-data-integrity/#:~:text=If%20the%20algorithm%20produces%20an%20error%2C%20the%20error%20MUST%20be%20propagated%20and%20SHOULD%20convey%20the%20error%20type.",
                      "duration": 0,
                      "state": "pending"
                    },
                    {
                      "type": "test",
                      "title": "If one or more of the proof.type, proof.verificationMethod, and proof.proofPurpose values is not set, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
                      "body": "function() {\n            this.test.link = 'https://www.w3.org/TR/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20the%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20values%20is%20not%20set%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n            for(const proof of proofs) {\n              expect(proof).to.contain.keys(\n                'type', 'proofPurpose', 'verificationMethod');\n            }\n          }",
                      "async": 0,
                      "sync": true,
                      "_timeout": 15000,
                      "_slow": 75,
                      "_retries": -1,
                      "timedOut": false,
                      "_currentRetry": 0,
                      "pending": false,
                      "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
                      "parent": "PlyHk4HHd3S91GDJvucFm",
                      "ctx": null,
                      "_testId": "urn:uuid:f147afa2-dbbc-4f22-b8ce-bc6f295fb1e5",
                      "cell": {
                        "columnId": "apicatalog.com",
                        "rowId": "If one or more of the proof.type, proof.verificationMethod, and proof.proofPurpose values is not set, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
                      },
                      "_events": {},
                      "_eventsCount": 1,
                      "link": "https://www.w3.org/TR/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20the%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20values%20is%20not%20set%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast"
                    },
                    {
                      "type": "test",
                      "title": "If options has a non-null domain item, it MUST be equal to proof.domain or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
                      "body": "function() {\n            this.test.link = 'https://www.w3.org/TR/vc-data-integrity/#:~:text=If%20options%20has%20a%20non%2Dnull%20domain%20item%2C%20it%20MUST%20be%20equal%20to%20proof.domain%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n            this.test.cell.skipMessage = 'Pending test.';\n            this.skip();\n          }",
                      "async": 0,
                      "sync": true,
                      "_timeout": 15000,
                      "_slow": 75,
                      "_retries": -1,
                      "timedOut": false,
                      "_currentRetry": 0,
                      "pending": true,
                      "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
                      "parent": "PlyHk4HHd3S91GDJvucFm",
                      "ctx": null,
                      "_testId": "urn:uuid:c866e5f0-c6b1-442d-a5d7-28f097c4b6cf",
                      "cell": {
                        "columnId": "apicatalog.com",
                        "rowId": "If options has a non-null domain item, it MUST be equal to proof.domain or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
                        "skipMessage": "Pending test."
                      },
                      "_events": {},
                      "_eventsCount": 1,
                      "link": "https://www.w3.org/TR/vc-data-integrity/#:~:text=If%20options%20has%20a%20non%2Dnull%20domain%20item%2C%20it%20MUST%20be%20equal%20to%20proof.domain%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
                      "duration": 0,
                      "state": "pending"
                    },
                    {
                      "type": "test",
                      "title": "If options has a non-null challenge item, it MUST be equal to proof.challenge or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
                      "body": "function() {\n            this.test.link = 'https://www.w3.org/TR/vc-data-integrity/#:~:text=If%20options%20has%20a%20non%2Dnull%20challenge%20item%2C%20it%20MUST%20be%20equal%20to%20proof.challenge%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n            this.test.cell.skipMessage = 'Pending test.';\n            this.skip();\n          }",
                      "async": 0,
                      "sync": true,
                      "_timeout": 15000,
                      "_slow": 75,
                      "_retries": -1,
                      "timedOut": false,
                      "_currentRetry": 0,
                      "pending": true,
                      "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
                      "parent": "PlyHk4HHd3S91GDJvucFm",
                      "ctx": null,
                      "_testId": "urn:uuid:60874e38-9fff-4aa0-b7f8-b92ccff03764",
                      "cell": {
                        "columnId": "apicatalog.com",
                        "rowId": "If options has a non-null challenge item, it MUST be equal to proof.challenge or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
                        "skipMessage": "Pending test."
                      },
                      "_events": {},
                      "_eventsCount": 1,
                      "link": "https://www.w3.org/TR/vc-data-integrity/#:~:text=If%20options%20has%20a%20non%2Dnull%20challenge%20item%2C%20it%20MUST%20be%20equal%20to%20proof.challenge%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
                      "duration": 0,
                      "state": "pending"
                    }
                  ],
                  "root": false,
                  "pending": false,
                  "_retries": -1,
                  "_beforeEach": [],
                  "_beforeAll": [],
                  "_afterEach": [],
                  "_afterAll": [],
                  "_timeout": 15000,
                  "_slow": 75,
                  "_bail": false,
                  "_onlyTests": [],
                  "_onlySuites": [],
                  "delayed": false,
                  "parent": "YEd1T09feaLSRBhUviewm",
                  "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
                  "_testId": "urn:uuid:22244981-72a8-46a9-8b7d-bd31cc733b2f"
                },
                {
                  "title": "Add Proof Set/Chain",
                  "ctx": null,
                  "suites": [],
                  "tests": [
                    {
                      "type": "test",
                      "title": "Whenever this algorithm encodes strings, it MUST use UTF-8 encoding.",
                      "body": "function() {\n            this.test.link = 'https://www.w3.org/TR/vc-data-integrity/#:~:text=(map).-,Whenever%20this%20algorithm%20encodes%20strings%2C%20it%20MUST%20use%20UTF%2D8%20encoding.,-Let%20proof%20be';\n            for(const proof of proofs) {\n              expect(proof.proofValue.isWellFormed()).to.be.true;\n            }\n          }",
                      "async": 0,
                      "sync": true,
                      "_timeout": 15000,
                      "_slow": 75,
                      "_retries": -1,
                      "timedOut": false,
                      "_currentRetry": 0,
                      "pending": false,
                      "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
                      "parent": "iOjsZrsrjJQh_kt3jDZwJ",
                      "ctx": null,
                      "_testId": "urn:uuid:cac29a51-456d-4bdc-8990-3733d1ba3468",
                      "cell": {
                        "columnId": "apicatalog.com",
                        "rowId": "Whenever this algorithm encodes strings, it MUST use UTF-8 encoding."
                      },
                      "_events": {},
                      "_eventsCount": 1,
                      "link": "https://www.w3.org/TR/vc-data-integrity/#:~:text=(map).-,Whenever%20this%20algorithm%20encodes%20strings%2C%20it%20MUST%20use%20UTF%2D8%20encoding.,-Let%20proof%20be",
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast"
                    },
                    {
                      "type": "test",
                      "title": "If a proof with id equal to previousProof does not exist in allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
                      "body": "function() {\n            this.test.link = 'https://www.w3.org/TR/vc-data-integrity/#:~:text=If%20a%20proof%20with%20id%20equal%20to%20previousProofdoes%20not%20exist%20in%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n            for(const proof of proofs) {\n              if('previousProof' in proof) {\n                if(typeof proof.previousProof === 'string') {\n                  proofs.some(\n                    otherProof => otherProof.id == proof.previousProof).\n                    should.equal(true,\n                      'Expected previousProof ' +\n                      `${proof.previousProof} ` +\n                      'to be the id of another included proof.'\n                    );\n                } if(Array.isArray(proof.previousProof)) {\n                  for(const previousProof in proof.previousProof) {\n                    proofs.some(\n                      otherProof => otherProof.id == previousProof).\n                      should.equal(true,\n                        'Expected previousProof ' +\n                        `${proof.previousProof} ` +\n                        'to be the id of another included proof.'\n                      );\n                  }\n                }\n              }\n            }\n          }",
                      "async": 0,
                      "sync": true,
                      "_timeout": 15000,
                      "_slow": 75,
                      "_retries": -1,
                      "timedOut": false,
                      "_currentRetry": 0,
                      "pending": false,
                      "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
                      "parent": "iOjsZrsrjJQh_kt3jDZwJ",
                      "ctx": null,
                      "_testId": "urn:uuid:1d3cf74b-7315-4019-bccd-ecaa169a999b",
                      "cell": {
                        "columnId": "apicatalog.com",
                        "rowId": "If a proof with id equal to previousProof does not exist in allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
                      },
                      "_events": {},
                      "_eventsCount": 1,
                      "link": "https://www.w3.org/TR/vc-data-integrity/#:~:text=If%20a%20proof%20with%20id%20equal%20to%20previousProofdoes%20not%20exist%20in%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast"
                    },
                    {
                      "type": "test",
                      "title": "If any element of previousProof array has an id attribute that does not match the id attribute of any element of allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
                      "body": "function() {\n            this.test.link = 'https://www.w3.org/TR/vc-data-integrity/#:~:text=If%20any%20element%20of%20previousProof%20array%20has%20an%20id%20attribute%20that%20does%20not%20match%20the%20id%20attribute%20of%20any%20element%20of%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n            const previousProofs = [];\n            for(const proof of proofs) {\n              if('previousProof' in proof) {\n                if(typeof proof.previousProof === 'string') {\n                  previousProofs.push(proof.previousProof);\n                } if(Array.isArray(proof.previousProof)) {\n                  previousProofs.concat(proof.previousProof);\n                }\n              }\n            }\n            for(const previousProof of previousProofs) {\n              proofs.some(\n                otherProof => otherProof.id == previousProof).should.equal(\n                true,\n                'Expected all previousProof values to be the id of ' +\n                'another included proof.'\n              );\n            }\n          }",
                      "async": 0,
                      "sync": true,
                      "_timeout": 15000,
                      "_slow": 75,
                      "_retries": -1,
                      "timedOut": false,
                      "_currentRetry": 0,
                      "pending": false,
                      "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
                      "parent": "iOjsZrsrjJQh_kt3jDZwJ",
                      "ctx": null,
                      "_testId": "urn:uuid:3b98a54d-2370-41ae-bec2-4437b05d89db",
                      "cell": {
                        "columnId": "apicatalog.com",
                        "rowId": "If any element of previousProof array has an id attribute that does not match the id attribute of any element of allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
                      },
                      "_events": {},
                      "_eventsCount": 1,
                      "link": "https://www.w3.org/TR/vc-data-integrity/#:~:text=If%20any%20element%20of%20previousProof%20array%20has%20an%20id%20attribute%20that%20does%20not%20match%20the%20id%20attribute%20of%20any%20element%20of%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast"
                    }
                  ],
                  "root": false,
                  "pending": false,
                  "_retries": -1,
                  "_beforeEach": [],
                  "_beforeAll": [],
                  "_afterEach": [],
                  "_afterAll": [],
                  "_timeout": 15000,
                  "_slow": 75,
                  "_bail": false,
                  "_onlyTests": [],
                  "_onlySuites": [],
                  "delayed": false,
                  "parent": "YEd1T09feaLSRBhUviewm",
                  "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
                  "_testId": "urn:uuid:0ff3a1a6-b4aa-48e2-a358-b5da196aff43"
                }
              ],
              "tests": [],
              "root": false,
              "pending": false,
              "_retries": -1,
              "_beforeEach": [],
              "_beforeAll": [],
              "_afterEach": [],
              "_afterAll": [],
              "_timeout": 15000,
              "_slow": 75,
              "_bail": false,
              "_onlyTests": [],
              "_onlySuites": [],
              "delayed": false,
              "parent": "p0z5X_a8SbyICvvAEIUUP",
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "_testId": "urn:uuid:7d5efa46-62d6-4ad9-a71f-3c98cd9417c0"
            }
          ],
          "tests": [
            {
              "type": "test",
              "title": "When expressing a data integrity proof on an object, a proof property MUST be used.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=When%20expressing%20a%20data%20integrity%20proof%20on%20an%20object%2C%20a%20proof%20property%20MUST%20be%20used';\n      shouldHaveProof({vc: data});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "p0z5X_a8SbyICvvAEIUUP",
              "ctx": null,
              "_testId": "urn:uuid:d77b8b8b-7f0a-4f5a-ba36-bf147300dca4",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "When expressing a data integrity proof on an object, a proof property MUST be used."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=When%20expressing%20a%20data%20integrity%20proof%20on%20an%20object%2C%20a%20proof%20property%20MUST%20be%20used",
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If present (proof), its value MUST be either a single object, or an unordered set of objects",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=If%20present%2C%20its%20value%20MUST%20be%20either%20a%20single%20object%2C%20or%20an%20unordered%20set%20of%20objects';\n      shouldHaveProof({vc: data});\n      const {proof} = data;\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "p0z5X_a8SbyICvvAEIUUP",
              "ctx": null,
              "_testId": "urn:uuid:4ec4f7e8-a43f-4a1f-b417-b43f496b7844",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If present (proof), its value MUST be either a single object, or an unordered set of objects"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=If%20present%2C%20its%20value%20MUST%20be%20either%20a%20single%20object%2C%20or%20an%20unordered%20set%20of%20objects",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.id\") An optional identifier for the proof, which MUST be a URL.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=An%20optional%20identifier%20for%20the%20proof%2C%20which%20MUST%20be%20a%20URL';\n      for(const proof of proofs) {\n        if(proof.id) {\n          shouldBeUrl({url: proof.id, prop: 'proof.id'});\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "p0z5X_a8SbyICvvAEIUUP",
              "ctx": null,
              "_testId": "urn:uuid:a15e1dc3-e913-4fe5-b449-d07f44ca6466",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "(\"proof.id\") An optional identifier for the proof, which MUST be a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=An%20optional%20identifier%20for%20the%20proof%2C%20which%20MUST%20be%20a%20URL",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The specific proof type used for the cryptographic proof MUST be specified as a string that maps to a URL.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20specific%20proof%20type%20used%20for%20the%20cryptographic%20proof%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL';\n      const prop = '@type';\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n        const expanded = await jsonld.expand({\n          '@context': data['@context'],\n          type: proof.type\n        }, {documentLoader});\n        for(const term of expanded) {\n          const types = term[prop];\n          should.exist(types, 'Expected @type to exist.');\n          types.every(url => shouldBeUrl({url, prop}));\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "p0z5X_a8SbyICvvAEIUUP",
              "ctx": null,
              "_testId": "urn:uuid:4b9d9f3c-6ec8-47eb-8fc9-5226ba349b25",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "The specific proof type used for the cryptographic proof MUST be specified as a string that maps to a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20specific%20proof%20type%20used%20for%20the%20cryptographic%20proof%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1089,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 15,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The type property MUST contain the string DataIntegrityProof.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-data-integrity/#contexts-and-vocabularies:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.';\n          for(const proof of proofs) {\n            proof.should.have.property('type');\n            proof.type.should.be.a(\n              'string',\n              'Expected \"proof.type\" to be a string.'\n            );\n            const hasExpectedType = expectedProofTypes.includes(proof.type);\n            hasExpectedType.should.equal(\n              true,\n              `Expected \"proof.type\" to be one of ` +\n              `${expectedProofTypes} Received: ${proof.type}`);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "p0z5X_a8SbyICvvAEIUUP",
              "ctx": null,
              "_testId": "urn:uuid:36fbf3a7-0afe-4661-adcc-36dbc1944614",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "The type property MUST contain the string DataIntegrityProof."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#contexts-and-vocabularies:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1101,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
              "body": "function() {\n          this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.';\n          for(const proof of proofs) {\n            should.exist(proof, 'Expected proof to exist.');\n            if(proof.type === 'DataIntegrityProof') {\n              should.exist(proof.cryptosuite,\n                'Expected proof to have property \"cryptosuite\".');\n            }\n            const {\n              prefix: expectedPrefix,\n              name: encodingName\n            } = expectedMultibasePrefix(proof.cryptosuite);\n            shouldHaveProofValue({proof, expectedPrefix, encodingName});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "p0z5X_a8SbyICvvAEIUUP",
              "ctx": null,
              "_testId": "urn:uuid:7c738a7c-ef90-4878-89f1-7078ad378e44",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "The proofValue property MUST be used, as specified in 2.1 Proofs."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified. If specified, its value MUST be a string.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.';\n      for(const proof of proofs) {\n        if(proof.type && proof.type === 'DataIntegrityProof') {\n          should.exist(\n            proof.cryptosuite,\n            'If the proof type is DataIntegrityProof, cryptosuite MUST ' +\n            'be specified');\n          proof.cryptosuite.should.be.a(\n            'string',\n            'cryptosuite value MUST be a string.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "p0z5X_a8SbyICvvAEIUUP",
              "ctx": null,
              "_testId": "urn:uuid:97d07dbc-ee0b-45d6-8422-6e610b8ab2e0",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified. If specified, its value MUST be a string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "A verification method is the means and information needed to verify the proof. If included, the value MUST be a string that maps to a [URL]",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=A%20verification%20method%20is%20the%20means%20and%20information%20needed%20to%20verify%20the%20proof.%20If%20included%2C%20the%20value%20MUST%20be%20a%20string%20that%20maps%20to%20a%20%5BURL%5D.';\n      for(const proof of proofs) {\n        await shouldMapToUrl({\n          doc: {\n            '@context': data['@context'],\n            ...proof\n          },\n          term: 'https://w3id.org/security#verificationMethod',\n          prop: '@id',\n          documentLoader\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "p0z5X_a8SbyICvvAEIUUP",
              "ctx": null,
              "_testId": "urn:uuid:f7d094b3-b0b4-4bf4-bbb3-fa37808976eb",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "A verification method is the means and information needed to verify the proof. If included, the value MUST be a string that maps to a [URL]"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=A%20verification%20method%20is%20the%20means%20and%20information%20needed%20to%20verify%20the%20proof.%20If%20included%2C%20the%20value%20MUST%20be%20a%20string%20that%20maps%20to%20a%20%5BURL%5D.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1104,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 2,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The reason the proof was created (\"proof.proofPurpose\") MUST be specified as a string that maps to a URL",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20reason%20the%20proof%20was%20created%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL';\n      for(const proof of proofs) {\n        proof.should.have.property('proofPurpose');\n        proof.proofPurpose.should.be.a('string');\n        await shouldMapToUrl({\n          doc: {\n            '@context': data['@context'],\n            ...proof\n          },\n          term: 'https://w3id.org/security#proofPurpose',\n          prop: '@id',\n          documentLoader\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "p0z5X_a8SbyICvvAEIUUP",
              "ctx": null,
              "_testId": "urn:uuid:12f28223-fb11-4813-870f-333074d09f5e",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "The reason the proof was created (\"proof.proofPurpose\") MUST be specified as a string that maps to a URL"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20reason%20the%20proof%20was%20created%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1106,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof';\n      for(const proof of proofs) {\n        should.exist(proof, 'Expected proof to exist.');\n        const {\n          prefix: expectedPrefix,\n          name: encodingName\n        } = expectedMultibasePrefix(proof.cryptosuite);\n        shouldHaveProofValue({proof, expectedPrefix, encodingName});\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "p0z5X_a8SbyICvvAEIUUP",
              "ctx": null,
              "_testId": "urn:uuid:6f06354f-046b-45dc-b52e-f6f3fc173d8f",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.previousProof\" field exists, it MUST be a string.",
              "body": "function() {\n        for(const proof of proofs) {\n          if(proof.previousProof) {\n            proof.previousProof.should.be.a('string', 'Expected ' +\n              '\"proof.previousProof\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "p0z5X_a8SbyICvvAEIUUP",
              "ctx": null,
              "_testId": "urn:uuid:daadff68-7a0d-4f4b-83a3-799457e34988",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "if \"proof.previousProof\" field exists, it MUST be a string."
              },
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.nonce\" field exists, it MUST be a string.",
              "body": "function() {\n        for(const proof of proofs) {\n          if(proof.nonce) {\n            proof.nonce.should.be.a('string', 'Expected \"proof.nonce\" ' +\n              'to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "p0z5X_a8SbyICvvAEIUUP",
              "ctx": null,
              "_testId": "urn:uuid:472f4852-3b7b-4d8e-9e0a-5c28d1bbbac2",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "if \"proof.nonce\" field exists, it MUST be a string."
              },
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Cryptographic suite designers MUST use mandatory proof value properties defined in Section 2.1 Proofs, and MAY define other properties specific to their cryptographic suite.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#add-proof:~:text=MUST%20use%20mandatory%20proof%20value%20properties%20defined';\n      for(const proof of proofs) {\n        shouldBeProof({proof});\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "p0z5X_a8SbyICvvAEIUUP",
              "ctx": null,
              "_testId": "urn:uuid:f22eb48b-c017-490a-9169-392bab68b643",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "Cryptographic suite designers MUST use mandatory proof value properties defined in Section 2.1 Proofs, and MAY define other properties specific to their cryptographic suite."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#add-proof:~:text=MUST%20use%20mandatory%20proof%20value%20properties%20defined",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1109,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      const undefinedType = structuredClone(credential);\n      undefinedType.type.push('InvalidType');\n      await shouldFailIssuance({\n        credential: undefinedType,\n        issuer,\n        reason: 'Expected issuer to error when VC has an undefined type.'\n      });\n      const undefinedTerm = structuredClone(credential);\n      undefinedTerm.credentialSubject.invalidTerm = 'invalidTerm';\n      await shouldFailIssuance({\n        credential: undefinedTerm,\n        issuer,\n        reason: 'Expected issuer to error when VC has an undefined term.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "p0z5X_a8SbyICvvAEIUUP",
              "ctx": null,
              "_testId": "urn:uuid:326de654-4ede-4544-8d73-4bd86d978d7a",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1110,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 69,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected issuer to error when VC has an undefined type.: expected Response { status: 201, statusText: 'Created', headers: Headers { 'content-type': 'application/ld+json', 'x-cloud-trace-context': 'dcdd853ffe8acce91ab9a368e8a9238d', date: 'Sun, 25 Aug 2024 05:05:23 GMT', server: 'Google Frontend', 'content-length': '805', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected issuer to error when VC has an undefined type.: expected Response { status: 201, statusText: 'Created', headers: Headers { 'content-type': 'application/ld+json', 'x-cloud-trace-context': 'dcdd853ffe8acce91ab9a368e8a9238d', date: 'Sun, 25 Aug 2024 05:05:23 GMT', server: 'Google Frontend', 'content-length': '805', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at shouldFailIssuance (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:71:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/suites/create.js:246:7)"
              }
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n        const hasCryptosuiteName = proofs.some(\n          p => p?.cryptosuite === cryptosuiteName);\n        hasCryptosuiteName.should.equal(\n          true,\n          `Expected at least one proof with cryptosuite ${cryptosuiteName}`);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "p0z5X_a8SbyICvvAEIUUP",
              "ctx": null,
              "_testId": "urn:uuid:890aadba-b016-4055-8782-62efc07cbecc",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1181,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n        const cryptoProp = 'https://w3id.org/security#cryptosuite';\n        const cryptoType = 'https://w3id.org/security#cryptosuiteString';\n        for(const {cryptosuite, type} of proofs) {\n          should.exist(cryptosuite,\n            'Expected property \"proof.cryptosuite\" to exist.');\n          should.exist(type,\n            'Expected property \"proof.type\" to exist.');\n          should.exist(data['@context'],\n            'Expected VC to have property \"@context\".');\n          const expanded = await jsonld.expand({\n            '@context': data['@context'],\n            cryptosuite,\n            type\n          }, {documentLoader});\n          for(const terms of expanded) {\n            const cryptoProperties = terms[cryptoProp];\n            should.exist(cryptoProperties,\n              `Expected property ${cryptoProp} to exist.`);\n            const hasTypeName = cryptoProperties.some(suite =>\n              suite['@type'] === cryptoType &&\n              suite['@value'] == cryptosuiteName);\n            hasTypeName.should.equal(true,\n              `Expected ${cryptoProp} with @value ${cryptosuiteName} & ` +\n              `@type ${cryptoType}`);\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "p0z5X_a8SbyICvvAEIUUP",
              "ctx": null,
              "_testId": "urn:uuid:8996c696-d2a4-48bd-b1bb-9e58b06fcf54",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1182,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "When an application is securing a document, if an @context property is not provided in the document or the Data Integrity terms used in the document are not mapped by existing values in the @context property, implementations SHOULD inject or append an @context property with a value of https://w3id.org/security/data-integrity/v2 or one or more contexts with at least the same declarations, such as the Verifiable Credential Data Model v2.0 context (https://www.w3.org/ns/credentials/v2).",
              "body": "async function() {\n      if(!issuer) {\n        throw new Error(`Expected ${vendorName} to have an issuer.`);\n      }\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#context-injection:~:text=if%20an%20%40context%20property%20is%20not%20provided%20in%20the%20document%20or%20the%20Data%20Integrity%20terms%20used%20in%20the%20document%20are%20not%20mapped%20by%20existing%20values%20in%20the%20%40context%20property%2C%20implementations%20SHOULD%20inject%20or%20append';\n      if(optionalTests.contextInjection === false) {\n        this.test.cell.skipMessage = 'Optional Test Skipped';\n        this.skip();\n      }\n      const _credential = structuredClone(credential);\n      const expectedContexts = [\n        'https://w3id.org/security/data-integrity/v2',\n        'https://www.w3.org/ns/credentials/v2'\n      ];\n      // remove the vc's context and expect context injection to occur\n      delete _credential['@context'];\n      let err;\n      let data;\n      try {\n        data = await createInitialVc({issuer, credential: _credential});\n      } catch(e) {\n        err = e;\n      }\n      should.not.exist(\n        err,\n        `Expected issuer ${vendorName} to perform context injection on a ` +\n        `VC with out an \"@context\" property`);\n      should.exist(data, `Expected issuer ${vendorName} to return data.`);\n      data.should.be.an('object', 'Expected response data to be an object.');\n      should.exist(data['@context'],\n        'Expected data to have an injected \"@context\" property.');\n      if(Array.isArray(data['@context'])) {\n        const hasExpectedContext = expectedContexts.some(\n          ctx => data['@context'].includes(ctx));\n        return hasExpectedContext.should.equal(true,\n          `Expected injected context to contain one of ${expectedContexts}`);\n      }\n      data['@context'].should.be.oneOf(expectedContexts);\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "p0z5X_a8SbyICvvAEIUUP",
              "ctx": null,
              "_testId": "urn:uuid:58a208ec-d358-4184-bac6-b8f5814d9fe4",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "When an application is securing a document, if an @context property is not provided in the document or the Data Integrity terms used in the document are not mapped by existing values in the @context property, implementations SHOULD inject or append an @context property with a value of https://w3id.org/security/data-integrity/v2 or one or more contexts with at least the same declarations, such as the Verifiable Credential Data Model v2.0 context (https://www.w3.org/ns/credentials/v2)."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#context-injection:~:text=if%20an%20%40context%20property%20is%20not%20provided%20in%20the%20document%20or%20the%20Data%20Integrity%20terms%20used%20in%20the%20document%20are%20not%20mapped%20by%20existing%20values%20in%20the%20%40context%20property%2C%20implementations%20SHOULD%20inject%20or%20append",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1183,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 101,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected issuer apicatalog.com to perform context injection on a VC with out an \"@context\" property: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"credential\":{\"id\":\"urn:uuid:b7044db4-8bce-4ccd-9a98-9dd833c92a62\",\"type\":[\"VerifiableCredential\"],\"issuer\":\"https://vc.apicatalog.com/issuer/?suite=eddsa-rdfc-2022\",\"issuanceDate\":\"2020-03-16T22:37:26.544Z\",\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\"}},\"options\":{}}",
                    "method": "POST",
                    "json": {
                      "credential": {
                        "id": "urn:uuid:b7044db4-8bce-4ccd-9a98-9dd833c92a62",
                        "type": [
                          "VerifiableCredential"
                        ],
                        "issuer": "https://vc.apicatalog.com/issuer/?suite=eddsa-rdfc-2022",
                        "issuanceDate": "2020-03-16T22:37:26.544Z",
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                        }
                      },
                      "options": {}
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc.apicatalog.com/credentials/issue?suite=eddsa-rdfc-2022",
                  "status": 400,
                  "data": {
                    "id": "MALFORMED",
                    "code": "INVALID_DOCUMENT",
                    "message": null
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected issuer apicatalog.com to perform context injection on a VC with out an \"@context\" property: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/suites/create.js:442:18)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "The date and time the proof was created is OPTIONAL and, if included, MUST be specified as an [XMLSCHEMA11-2] dateTimeStamp string, either in Universal Coordinated Time (UTC), denoted by a Z at the end of the value, or with a time zone offset relative to UTC.",
              "body": "function() {\n      this.test.link = 'https://www.w3.org/TR/vc-data-integrity/#:~:text=The%20date%20and%20time%20the%20proof%20was%20created%20is%20OPTIONAL%20and%2C%20if%20included%2C%20MUST%20be%20specified%20as%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%2C%20either%20in%20Universal%20Coordinated%20Time%20(UTC)%2C%20denoted%20by%20a%20Z%20at%20the%20end%20of%20the%20value%2C%20or%20with%20a%20time%20zone%20offset%20relative%20to%20UTC.';\n      if(optionalTests.dates === false) {\n        this.test.cell.skipMessage = 'Optional Test Skipped';\n        this.skip();\n      }\n      for(const proof of proofs) {\n        if(proof.created) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.created.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "p0z5X_a8SbyICvvAEIUUP",
              "ctx": null,
              "_testId": "urn:uuid:63aaa15a-8685-4878-ae19-9e7c2a711e60",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "The date and time the proof was created is OPTIONAL and, if included, MUST be specified as an [XMLSCHEMA11-2] dateTimeStamp string, either in Universal Coordinated Time (UTC), denoted by a Z at the end of the value, or with a time zone offset relative to UTC."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://www.w3.org/TR/vc-data-integrity/#:~:text=The%20date%20and%20time%20the%20proof%20was%20created%20is%20OPTIONAL%20and%2C%20if%20included%2C%20MUST%20be%20specified%20as%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%2C%20either%20in%20Universal%20Coordinated%20Time%20(UTC)%2C%20denoted%20by%20a%20Z%20at%20the%20end%20of%20the%20value%2C%20or%20with%20a%20time%20zone%20offset%20relative%20to%20UTC.",
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The expires property is OPTIONAL and, if present, specifies when the proof expires. If present, it MUST be an [XMLSCHEMA11-2] dateTimeStamp string, either in Universal Coordinated Time (UTC), denoted by a Z at the end of the value, or with a time zone offset relative to UTC.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=MUST%20be%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%2C%20either%20in%20Universal%20Coordinated%20Time';\n      if(optionalTests.dates === false) {\n        this.test.cell.skipMessage = 'Optional Test Skipped';\n        this.skip();\n      }\n      for(const proof of proofs) {\n        if(proof.expires) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.expires.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "p0z5X_a8SbyICvvAEIUUP",
              "ctx": null,
              "_testId": "urn:uuid:2ed7558b-34a4-4ad6-89eb-c3302a7df54d",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "The expires property is OPTIONAL and, if present, specifies when the proof expires. If present, it MUST be an [XMLSCHEMA11-2] dateTimeStamp string, either in Universal Coordinated Time (UTC), denoted by a Z at the end of the value, or with a time zone offset relative to UTC."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=MUST%20be%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%2C%20either%20in%20Universal%20Coordinated%20Time",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The domain property is OPTIONAL. It conveys one or more security domains in which the proof is meant to be used. If specified, the associated value MUST be either a string, or an unordered set of strings. A verifier SHOULD use the value to ensure that the proof was intended to be used in the security domain in which the verifier is operating.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#verify-proof:~:text=The%20domain%20property%20is%20OPTIONAL.%20It%20conveys%20one%20or%20more%20security%20domains%20in%20which%20the%20proof%20is%20meant%20to%20be%20used.%20If%20specified%2C%20the%20associated%20value%20MUST';\n      if(optionalTests.domain === false) {\n        this.test.cell.skipMessage = 'Optional Test Skipped';\n        this.skip();\n      }\n      for(const proof of proofs) {\n        if(proof.domain) {\n          const validType = isStringOrArrayOfStrings(proof.domain);\n          validType.should.equal(true, 'Expected ' +\n            '\"proof.domain\" to be either a string or an unordered ' +\n            'set of strings.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "p0z5X_a8SbyICvvAEIUUP",
              "ctx": null,
              "_testId": "urn:uuid:e983c6d2-748b-448a-acc7-7c384af59d64",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "The domain property is OPTIONAL. It conveys one or more security domains in which the proof is meant to be used. If specified, the associated value MUST be either a string, or an unordered set of strings. A verifier SHOULD use the value to ensure that the proof was intended to be used in the security domain in which the verifier is operating."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#verify-proof:~:text=The%20domain%20property%20is%20OPTIONAL.%20It%20conveys%20one%20or%20more%20security%20domains%20in%20which%20the%20proof%20is%20meant%20to%20be%20used.%20If%20specified%2C%20the%20associated%20value%20MUST",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(challenge) A string value that SHOULD be included in a proof if a domain is specified.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#verify-proof:~:text=A%20string%20value%20that%20SHOULD%20be%20included%20in%20a%20proof%20if%20a%20domain%20is%20specified.';\n      if(optionalTests.domain === false) {\n        this.test.cell.skipMessage = 'Optional Test Skipped';\n        this.skip();\n      }\n      for(const proof of proofs) {\n        if(proof.challenge) {\n          // domain must be specified\n          should.exist(proof.domain, 'Expected \"proof.domain\" ' +\n            'to be specified.');\n          proof.challenge.should.be.a('string', 'Expected ' +\n            '\"proof.challenge\" to be a string.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "p0z5X_a8SbyICvvAEIUUP",
              "ctx": null,
              "_testId": "urn:uuid:e611e4fb-f091-43d6-b251-b70fc16b3e19",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "(challenge) A string value that SHOULD be included in a proof if a domain is specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#verify-proof:~:text=A%20string%20value%20that%20SHOULD%20be%20included%20in%20a%20proof%20if%20a%20domain%20is%20specified.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"apicatalog.com\"",
              "body": "function() {\n      this.currentTest.cell = {\n        columnId,\n        rowId: this.currentTest.title\n      };\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "p0z5X_a8SbyICvvAEIUUP",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"apicatalog.com\"",
              "body": "async function() {\n      if(!issuer) {\n        throw new Error(`Expected ${vendorName} to have an issuer.`);\n      }\n      if(!credential) {\n        throw new Error(`Expected a credential to be passed in ` +\n          `received ${credential}`);\n      }\n      data = await createInitialVc({issuer, credential});\n      proofs = Array.isArray(data.proof) ? data.proof : [data.proof];\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "p0z5X_a8SbyICvvAEIUUP",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 571,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 512,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "4R3sZ40Ry4GvBz6dLxy7S",
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
          "_testId": "urn:uuid:6b58da34-15fa-4f2d-96d4-9f57cd31c161"
        },
        {
          "title": "Digital Bazaar",
          "ctx": null,
          "suites": [
            {
              "title": "Algorithms",
              "ctx": null,
              "suites": [
                {
                  "title": "Add Proof",
                  "ctx": null,
                  "suites": [],
                  "tests": [
                    {
                      "type": "test",
                      "title": "Whenever this algorithm encodes strings, it MUST use UTF-8 encoding.",
                      "body": "function() {\n            this.test.link = 'https://www.w3.org/TR/vc-data-integrity/#:~:text=or%20an%20error.-,Whenever%20this%20algorithm%20encodes%20strings%2C%20it%20MUST%20use%20UTF%2D8%20encoding.,-Let%20proof%20be';\n            for(const proof of proofs) {\n              expect(proof.proofValue.isWellFormed()).to.be.true;\n            }\n          }",
                      "async": 0,
                      "sync": true,
                      "_timeout": 15000,
                      "_slow": 75,
                      "_retries": -1,
                      "timedOut": false,
                      "_currentRetry": 0,
                      "pending": false,
                      "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
                      "parent": "M-Pd4gR9dDYJ7he2waf6j",
                      "ctx": null,
                      "_testId": "urn:uuid:785bf300-cdb3-4ab1-b939-dc7c4e5b0961",
                      "cell": {
                        "columnId": "Digital Bazaar",
                        "rowId": "Whenever this algorithm encodes strings, it MUST use UTF-8 encoding."
                      },
                      "_events": {},
                      "_eventsCount": 1,
                      "link": "https://www.w3.org/TR/vc-data-integrity/#:~:text=or%20an%20error.-,Whenever%20this%20algorithm%20encodes%20strings%2C%20it%20MUST%20use%20UTF%2D8%20encoding.,-Let%20proof%20be",
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast"
                    },
                    {
                      "type": "test",
                      "title": "If the algorithm produces an error, the error MUST be propagated and SHOULD convey the error type.",
                      "body": "function() {\n            this.test.link = 'https://www.w3.org/TR/vc-data-integrity/#:~:text=If%20the%20algorithm%20produces%20an%20error%2C%20the%20error%20MUST%20be%20propagated%20and%20SHOULD%20convey%20the%20error%20type.';\n            this.test.cell.skipMessage = 'Pending test.';\n            this.skip();\n          }",
                      "async": 0,
                      "sync": true,
                      "_timeout": 15000,
                      "_slow": 75,
                      "_retries": -1,
                      "timedOut": false,
                      "_currentRetry": 0,
                      "pending": true,
                      "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
                      "parent": "M-Pd4gR9dDYJ7he2waf6j",
                      "ctx": null,
                      "_testId": "urn:uuid:a399daba-108c-4a2b-8a4f-4a9da80ef113",
                      "cell": {
                        "columnId": "Digital Bazaar",
                        "rowId": "If the algorithm produces an error, the error MUST be propagated and SHOULD convey the error type.",
                        "skipMessage": "Pending test."
                      },
                      "_events": {},
                      "_eventsCount": 1,
                      "link": "https://www.w3.org/TR/vc-data-integrity/#:~:text=If%20the%20algorithm%20produces%20an%20error%2C%20the%20error%20MUST%20be%20propagated%20and%20SHOULD%20convey%20the%20error%20type.",
                      "duration": 0,
                      "state": "pending"
                    },
                    {
                      "type": "test",
                      "title": "If one or more of the proof.type, proof.verificationMethod, and proof.proofPurpose values is not set, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
                      "body": "function() {\n            this.test.link = 'https://www.w3.org/TR/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20the%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20values%20is%20not%20set%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n            for(const proof of proofs) {\n              expect(proof).to.contain.keys(\n                'type', 'proofPurpose', 'verificationMethod');\n            }\n          }",
                      "async": 0,
                      "sync": true,
                      "_timeout": 15000,
                      "_slow": 75,
                      "_retries": -1,
                      "timedOut": false,
                      "_currentRetry": 0,
                      "pending": false,
                      "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
                      "parent": "M-Pd4gR9dDYJ7he2waf6j",
                      "ctx": null,
                      "_testId": "urn:uuid:27f48f74-817d-4f7d-924b-2558b11ce9ca",
                      "cell": {
                        "columnId": "Digital Bazaar",
                        "rowId": "If one or more of the proof.type, proof.verificationMethod, and proof.proofPurpose values is not set, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
                      },
                      "_events": {},
                      "_eventsCount": 1,
                      "link": "https://www.w3.org/TR/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20the%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20values%20is%20not%20set%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast"
                    },
                    {
                      "type": "test",
                      "title": "If options has a non-null domain item, it MUST be equal to proof.domain or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
                      "body": "function() {\n            this.test.link = 'https://www.w3.org/TR/vc-data-integrity/#:~:text=If%20options%20has%20a%20non%2Dnull%20domain%20item%2C%20it%20MUST%20be%20equal%20to%20proof.domain%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n            this.test.cell.skipMessage = 'Pending test.';\n            this.skip();\n          }",
                      "async": 0,
                      "sync": true,
                      "_timeout": 15000,
                      "_slow": 75,
                      "_retries": -1,
                      "timedOut": false,
                      "_currentRetry": 0,
                      "pending": true,
                      "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
                      "parent": "M-Pd4gR9dDYJ7he2waf6j",
                      "ctx": null,
                      "_testId": "urn:uuid:4924c304-2204-455e-bc2a-fcaede35088d",
                      "cell": {
                        "columnId": "Digital Bazaar",
                        "rowId": "If options has a non-null domain item, it MUST be equal to proof.domain or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
                        "skipMessage": "Pending test."
                      },
                      "_events": {},
                      "_eventsCount": 1,
                      "link": "https://www.w3.org/TR/vc-data-integrity/#:~:text=If%20options%20has%20a%20non%2Dnull%20domain%20item%2C%20it%20MUST%20be%20equal%20to%20proof.domain%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
                      "duration": 0,
                      "state": "pending"
                    },
                    {
                      "type": "test",
                      "title": "If options has a non-null challenge item, it MUST be equal to proof.challenge or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
                      "body": "function() {\n            this.test.link = 'https://www.w3.org/TR/vc-data-integrity/#:~:text=If%20options%20has%20a%20non%2Dnull%20challenge%20item%2C%20it%20MUST%20be%20equal%20to%20proof.challenge%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n            this.test.cell.skipMessage = 'Pending test.';\n            this.skip();\n          }",
                      "async": 0,
                      "sync": true,
                      "_timeout": 15000,
                      "_slow": 75,
                      "_retries": -1,
                      "timedOut": false,
                      "_currentRetry": 0,
                      "pending": true,
                      "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
                      "parent": "M-Pd4gR9dDYJ7he2waf6j",
                      "ctx": null,
                      "_testId": "urn:uuid:941e118c-874e-4557-b3ed-512a36b1744f",
                      "cell": {
                        "columnId": "Digital Bazaar",
                        "rowId": "If options has a non-null challenge item, it MUST be equal to proof.challenge or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
                        "skipMessage": "Pending test."
                      },
                      "_events": {},
                      "_eventsCount": 1,
                      "link": "https://www.w3.org/TR/vc-data-integrity/#:~:text=If%20options%20has%20a%20non%2Dnull%20challenge%20item%2C%20it%20MUST%20be%20equal%20to%20proof.challenge%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
                      "duration": 0,
                      "state": "pending"
                    }
                  ],
                  "root": false,
                  "pending": false,
                  "_retries": -1,
                  "_beforeEach": [],
                  "_beforeAll": [],
                  "_afterEach": [],
                  "_afterAll": [],
                  "_timeout": 15000,
                  "_slow": 75,
                  "_bail": false,
                  "_onlyTests": [],
                  "_onlySuites": [],
                  "delayed": false,
                  "parent": "QQK5Tb3vN7zKw5h7SPswl",
                  "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
                  "_testId": "urn:uuid:81af5300-5564-4fb5-b6d7-963b5f1c6591"
                },
                {
                  "title": "Add Proof Set/Chain",
                  "ctx": null,
                  "suites": [],
                  "tests": [
                    {
                      "type": "test",
                      "title": "Whenever this algorithm encodes strings, it MUST use UTF-8 encoding.",
                      "body": "function() {\n            this.test.link = 'https://www.w3.org/TR/vc-data-integrity/#:~:text=(map).-,Whenever%20this%20algorithm%20encodes%20strings%2C%20it%20MUST%20use%20UTF%2D8%20encoding.,-Let%20proof%20be';\n            for(const proof of proofs) {\n              expect(proof.proofValue.isWellFormed()).to.be.true;\n            }\n          }",
                      "async": 0,
                      "sync": true,
                      "_timeout": 15000,
                      "_slow": 75,
                      "_retries": -1,
                      "timedOut": false,
                      "_currentRetry": 0,
                      "pending": false,
                      "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
                      "parent": "6u9Ria8RljZdZf8jxEOR7",
                      "ctx": null,
                      "_testId": "urn:uuid:ea36173a-e67c-4376-b7e4-cc6aab9561cc",
                      "cell": {
                        "columnId": "Digital Bazaar",
                        "rowId": "Whenever this algorithm encodes strings, it MUST use UTF-8 encoding."
                      },
                      "_events": {},
                      "_eventsCount": 1,
                      "link": "https://www.w3.org/TR/vc-data-integrity/#:~:text=(map).-,Whenever%20this%20algorithm%20encodes%20strings%2C%20it%20MUST%20use%20UTF%2D8%20encoding.,-Let%20proof%20be",
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast"
                    },
                    {
                      "type": "test",
                      "title": "If a proof with id equal to previousProof does not exist in allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
                      "body": "function() {\n            this.test.link = 'https://www.w3.org/TR/vc-data-integrity/#:~:text=If%20a%20proof%20with%20id%20equal%20to%20previousProofdoes%20not%20exist%20in%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n            for(const proof of proofs) {\n              if('previousProof' in proof) {\n                if(typeof proof.previousProof === 'string') {\n                  proofs.some(\n                    otherProof => otherProof.id == proof.previousProof).\n                    should.equal(true,\n                      'Expected previousProof ' +\n                      `${proof.previousProof} ` +\n                      'to be the id of another included proof.'\n                    );\n                } if(Array.isArray(proof.previousProof)) {\n                  for(const previousProof in proof.previousProof) {\n                    proofs.some(\n                      otherProof => otherProof.id == previousProof).\n                      should.equal(true,\n                        'Expected previousProof ' +\n                        `${proof.previousProof} ` +\n                        'to be the id of another included proof.'\n                      );\n                  }\n                }\n              }\n            }\n          }",
                      "async": 0,
                      "sync": true,
                      "_timeout": 15000,
                      "_slow": 75,
                      "_retries": -1,
                      "timedOut": false,
                      "_currentRetry": 0,
                      "pending": false,
                      "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
                      "parent": "6u9Ria8RljZdZf8jxEOR7",
                      "ctx": null,
                      "_testId": "urn:uuid:1302bfd5-36b3-4a83-b362-f4ca8b737ea7",
                      "cell": {
                        "columnId": "Digital Bazaar",
                        "rowId": "If a proof with id equal to previousProof does not exist in allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
                      },
                      "_events": {},
                      "_eventsCount": 1,
                      "link": "https://www.w3.org/TR/vc-data-integrity/#:~:text=If%20a%20proof%20with%20id%20equal%20to%20previousProofdoes%20not%20exist%20in%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast"
                    },
                    {
                      "type": "test",
                      "title": "If any element of previousProof array has an id attribute that does not match the id attribute of any element of allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
                      "body": "function() {\n            this.test.link = 'https://www.w3.org/TR/vc-data-integrity/#:~:text=If%20any%20element%20of%20previousProof%20array%20has%20an%20id%20attribute%20that%20does%20not%20match%20the%20id%20attribute%20of%20any%20element%20of%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n            const previousProofs = [];\n            for(const proof of proofs) {\n              if('previousProof' in proof) {\n                if(typeof proof.previousProof === 'string') {\n                  previousProofs.push(proof.previousProof);\n                } if(Array.isArray(proof.previousProof)) {\n                  previousProofs.concat(proof.previousProof);\n                }\n              }\n            }\n            for(const previousProof of previousProofs) {\n              proofs.some(\n                otherProof => otherProof.id == previousProof).should.equal(\n                true,\n                'Expected all previousProof values to be the id of ' +\n                'another included proof.'\n              );\n            }\n          }",
                      "async": 0,
                      "sync": true,
                      "_timeout": 15000,
                      "_slow": 75,
                      "_retries": -1,
                      "timedOut": false,
                      "_currentRetry": 0,
                      "pending": false,
                      "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
                      "parent": "6u9Ria8RljZdZf8jxEOR7",
                      "ctx": null,
                      "_testId": "urn:uuid:3e02528f-2595-4e16-86b2-7d0f466b17d0",
                      "cell": {
                        "columnId": "Digital Bazaar",
                        "rowId": "If any element of previousProof array has an id attribute that does not match the id attribute of any element of allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
                      },
                      "_events": {},
                      "_eventsCount": 1,
                      "link": "https://www.w3.org/TR/vc-data-integrity/#:~:text=If%20any%20element%20of%20previousProof%20array%20has%20an%20id%20attribute%20that%20does%20not%20match%20the%20id%20attribute%20of%20any%20element%20of%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast"
                    }
                  ],
                  "root": false,
                  "pending": false,
                  "_retries": -1,
                  "_beforeEach": [],
                  "_beforeAll": [],
                  "_afterEach": [],
                  "_afterAll": [],
                  "_timeout": 15000,
                  "_slow": 75,
                  "_bail": false,
                  "_onlyTests": [],
                  "_onlySuites": [],
                  "delayed": false,
                  "parent": "QQK5Tb3vN7zKw5h7SPswl",
                  "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
                  "_testId": "urn:uuid:86a35230-d123-4975-8423-5688b853653c"
                }
              ],
              "tests": [],
              "root": false,
              "pending": false,
              "_retries": -1,
              "_beforeEach": [],
              "_beforeAll": [],
              "_afterEach": [],
              "_afterAll": [],
              "_timeout": 15000,
              "_slow": 75,
              "_bail": false,
              "_onlyTests": [],
              "_onlySuites": [],
              "delayed": false,
              "parent": "P6-Fcl6bFqa3F88kTD5Wy",
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "_testId": "urn:uuid:aa5af042-0256-42a3-89e7-2dfd14a13c1f"
            }
          ],
          "tests": [
            {
              "type": "test",
              "title": "When expressing a data integrity proof on an object, a proof property MUST be used.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=When%20expressing%20a%20data%20integrity%20proof%20on%20an%20object%2C%20a%20proof%20property%20MUST%20be%20used';\n      shouldHaveProof({vc: data});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "P6-Fcl6bFqa3F88kTD5Wy",
              "ctx": null,
              "_testId": "urn:uuid:e99edb42-9918-4b0f-a649-7ecfd4e182dc",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "When expressing a data integrity proof on an object, a proof property MUST be used."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=When%20expressing%20a%20data%20integrity%20proof%20on%20an%20object%2C%20a%20proof%20property%20MUST%20be%20used",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If present (proof), its value MUST be either a single object, or an unordered set of objects",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=If%20present%2C%20its%20value%20MUST%20be%20either%20a%20single%20object%2C%20or%20an%20unordered%20set%20of%20objects';\n      shouldHaveProof({vc: data});\n      const {proof} = data;\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "P6-Fcl6bFqa3F88kTD5Wy",
              "ctx": null,
              "_testId": "urn:uuid:fdbc2df2-aeeb-442a-88d7-1c1160912b2e",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If present (proof), its value MUST be either a single object, or an unordered set of objects"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=If%20present%2C%20its%20value%20MUST%20be%20either%20a%20single%20object%2C%20or%20an%20unordered%20set%20of%20objects",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.id\") An optional identifier for the proof, which MUST be a URL.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=An%20optional%20identifier%20for%20the%20proof%2C%20which%20MUST%20be%20a%20URL';\n      for(const proof of proofs) {\n        if(proof.id) {\n          shouldBeUrl({url: proof.id, prop: 'proof.id'});\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "P6-Fcl6bFqa3F88kTD5Wy",
              "ctx": null,
              "_testId": "urn:uuid:a59c8f96-c762-48a5-917e-e1f29962be4e",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "(\"proof.id\") An optional identifier for the proof, which MUST be a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=An%20optional%20identifier%20for%20the%20proof%2C%20which%20MUST%20be%20a%20URL",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The specific proof type used for the cryptographic proof MUST be specified as a string that maps to a URL.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20specific%20proof%20type%20used%20for%20the%20cryptographic%20proof%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL';\n      const prop = '@type';\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n        const expanded = await jsonld.expand({\n          '@context': data['@context'],\n          type: proof.type\n        }, {documentLoader});\n        for(const term of expanded) {\n          const types = term[prop];\n          should.exist(types, 'Expected @type to exist.');\n          types.every(url => shouldBeUrl({url, prop}));\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "P6-Fcl6bFqa3F88kTD5Wy",
              "ctx": null,
              "_testId": "urn:uuid:d69978a9-91a3-4029-af97-eaf2c7121279",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The specific proof type used for the cryptographic proof MUST be specified as a string that maps to a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20specific%20proof%20type%20used%20for%20the%20cryptographic%20proof%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1709,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The type property MUST contain the string DataIntegrityProof.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-data-integrity/#contexts-and-vocabularies:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.';\n          for(const proof of proofs) {\n            proof.should.have.property('type');\n            proof.type.should.be.a(\n              'string',\n              'Expected \"proof.type\" to be a string.'\n            );\n            const hasExpectedType = expectedProofTypes.includes(proof.type);\n            hasExpectedType.should.equal(\n              true,\n              `Expected \"proof.type\" to be one of ` +\n              `${expectedProofTypes} Received: ${proof.type}`);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "P6-Fcl6bFqa3F88kTD5Wy",
              "ctx": null,
              "_testId": "urn:uuid:7173a7ab-1147-4485-b0c6-f3732213ebc8",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The type property MUST contain the string DataIntegrityProof."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#contexts-and-vocabularies:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1710,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
              "body": "function() {\n          this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.';\n          for(const proof of proofs) {\n            should.exist(proof, 'Expected proof to exist.');\n            if(proof.type === 'DataIntegrityProof') {\n              should.exist(proof.cryptosuite,\n                'Expected proof to have property \"cryptosuite\".');\n            }\n            const {\n              prefix: expectedPrefix,\n              name: encodingName\n            } = expectedMultibasePrefix(proof.cryptosuite);\n            shouldHaveProofValue({proof, expectedPrefix, encodingName});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "P6-Fcl6bFqa3F88kTD5Wy",
              "ctx": null,
              "_testId": "urn:uuid:49f0e93c-6d44-4f02-8b94-d22e17dbc67a",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The proofValue property MUST be used, as specified in 2.1 Proofs."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified. If specified, its value MUST be a string.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.';\n      for(const proof of proofs) {\n        if(proof.type && proof.type === 'DataIntegrityProof') {\n          should.exist(\n            proof.cryptosuite,\n            'If the proof type is DataIntegrityProof, cryptosuite MUST ' +\n            'be specified');\n          proof.cryptosuite.should.be.a(\n            'string',\n            'cryptosuite value MUST be a string.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "P6-Fcl6bFqa3F88kTD5Wy",
              "ctx": null,
              "_testId": "urn:uuid:c6b90616-ec6b-40f7-b63b-b3338180dc34",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified. If specified, its value MUST be a string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "A verification method is the means and information needed to verify the proof. If included, the value MUST be a string that maps to a [URL]",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=A%20verification%20method%20is%20the%20means%20and%20information%20needed%20to%20verify%20the%20proof.%20If%20included%2C%20the%20value%20MUST%20be%20a%20string%20that%20maps%20to%20a%20%5BURL%5D.';\n      for(const proof of proofs) {\n        await shouldMapToUrl({\n          doc: {\n            '@context': data['@context'],\n            ...proof\n          },\n          term: 'https://w3id.org/security#verificationMethod',\n          prop: '@id',\n          documentLoader\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "P6-Fcl6bFqa3F88kTD5Wy",
              "ctx": null,
              "_testId": "urn:uuid:b7ecf615-81e5-4822-a20c-09a09ee9ef6a",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "A verification method is the means and information needed to verify the proof. If included, the value MUST be a string that maps to a [URL]"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=A%20verification%20method%20is%20the%20means%20and%20information%20needed%20to%20verify%20the%20proof.%20If%20included%2C%20the%20value%20MUST%20be%20a%20string%20that%20maps%20to%20a%20%5BURL%5D.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1710,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The reason the proof was created (\"proof.proofPurpose\") MUST be specified as a string that maps to a URL",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20reason%20the%20proof%20was%20created%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL';\n      for(const proof of proofs) {\n        proof.should.have.property('proofPurpose');\n        proof.proofPurpose.should.be.a('string');\n        await shouldMapToUrl({\n          doc: {\n            '@context': data['@context'],\n            ...proof\n          },\n          term: 'https://w3id.org/security#proofPurpose',\n          prop: '@id',\n          documentLoader\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "P6-Fcl6bFqa3F88kTD5Wy",
              "ctx": null,
              "_testId": "urn:uuid:72b1923c-fe79-45ba-9691-705e5213d5a2",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The reason the proof was created (\"proof.proofPurpose\") MUST be specified as a string that maps to a URL"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20reason%20the%20proof%20was%20created%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1712,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof';\n      for(const proof of proofs) {\n        should.exist(proof, 'Expected proof to exist.');\n        const {\n          prefix: expectedPrefix,\n          name: encodingName\n        } = expectedMultibasePrefix(proof.cryptosuite);\n        shouldHaveProofValue({proof, expectedPrefix, encodingName});\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "P6-Fcl6bFqa3F88kTD5Wy",
              "ctx": null,
              "_testId": "urn:uuid:1e6166e9-b824-4638-9a6d-8ac19699636d",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.previousProof\" field exists, it MUST be a string.",
              "body": "function() {\n        for(const proof of proofs) {\n          if(proof.previousProof) {\n            proof.previousProof.should.be.a('string', 'Expected ' +\n              '\"proof.previousProof\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "P6-Fcl6bFqa3F88kTD5Wy",
              "ctx": null,
              "_testId": "urn:uuid:577149c4-70ab-4c4d-8954-0dba46e23a1f",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "if \"proof.previousProof\" field exists, it MUST be a string."
              },
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.nonce\" field exists, it MUST be a string.",
              "body": "function() {\n        for(const proof of proofs) {\n          if(proof.nonce) {\n            proof.nonce.should.be.a('string', 'Expected \"proof.nonce\" ' +\n              'to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "P6-Fcl6bFqa3F88kTD5Wy",
              "ctx": null,
              "_testId": "urn:uuid:51e00cdd-481d-45f6-867f-c89ab0e6df1a",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "if \"proof.nonce\" field exists, it MUST be a string."
              },
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Cryptographic suite designers MUST use mandatory proof value properties defined in Section 2.1 Proofs, and MAY define other properties specific to their cryptographic suite.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#add-proof:~:text=MUST%20use%20mandatory%20proof%20value%20properties%20defined';\n      for(const proof of proofs) {\n        shouldBeProof({proof});\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "P6-Fcl6bFqa3F88kTD5Wy",
              "ctx": null,
              "_testId": "urn:uuid:3ba381e8-7010-4abf-98be-c4e6636005ca",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "Cryptographic suite designers MUST use mandatory proof value properties defined in Section 2.1 Proofs, and MAY define other properties specific to their cryptographic suite."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#add-proof:~:text=MUST%20use%20mandatory%20proof%20value%20properties%20defined",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1713,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      const undefinedType = structuredClone(credential);\n      undefinedType.type.push('InvalidType');\n      await shouldFailIssuance({\n        credential: undefinedType,\n        issuer,\n        reason: 'Expected issuer to error when VC has an undefined type.'\n      });\n      const undefinedTerm = structuredClone(credential);\n      undefinedTerm.credentialSubject.invalidTerm = 'invalidTerm';\n      await shouldFailIssuance({\n        credential: undefinedTerm,\n        issuer,\n        reason: 'Expected issuer to error when VC has an undefined term.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "P6-Fcl6bFqa3F88kTD5Wy",
              "ctx": null,
              "_testId": "urn:uuid:4327a10c-4572-4929-a062-f698f881cbc1",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1714,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 245,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n        const hasCryptosuiteName = proofs.some(\n          p => p?.cryptosuite === cryptosuiteName);\n        hasCryptosuiteName.should.equal(\n          true,\n          `Expected at least one proof with cryptosuite ${cryptosuiteName}`);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "P6-Fcl6bFqa3F88kTD5Wy",
              "ctx": null,
              "_testId": "urn:uuid:a6cf75b7-9dbc-4548-b08f-fa0298be0a22",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1958,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n        const cryptoProp = 'https://w3id.org/security#cryptosuite';\n        const cryptoType = 'https://w3id.org/security#cryptosuiteString';\n        for(const {cryptosuite, type} of proofs) {\n          should.exist(cryptosuite,\n            'Expected property \"proof.cryptosuite\" to exist.');\n          should.exist(type,\n            'Expected property \"proof.type\" to exist.');\n          should.exist(data['@context'],\n            'Expected VC to have property \"@context\".');\n          const expanded = await jsonld.expand({\n            '@context': data['@context'],\n            cryptosuite,\n            type\n          }, {documentLoader});\n          for(const terms of expanded) {\n            const cryptoProperties = terms[cryptoProp];\n            should.exist(cryptoProperties,\n              `Expected property ${cryptoProp} to exist.`);\n            const hasTypeName = cryptoProperties.some(suite =>\n              suite['@type'] === cryptoType &&\n              suite['@value'] == cryptosuiteName);\n            hasTypeName.should.equal(true,\n              `Expected ${cryptoProp} with @value ${cryptosuiteName} & ` +\n              `@type ${cryptoType}`);\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "P6-Fcl6bFqa3F88kTD5Wy",
              "ctx": null,
              "_testId": "urn:uuid:128bf8ea-efba-45db-9b99-8b5ff53839d7",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1959,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "When an application is securing a document, if an @context property is not provided in the document or the Data Integrity terms used in the document are not mapped by existing values in the @context property, implementations SHOULD inject or append an @context property with a value of https://w3id.org/security/data-integrity/v2 or one or more contexts with at least the same declarations, such as the Verifiable Credential Data Model v2.0 context (https://www.w3.org/ns/credentials/v2).",
              "body": "async function() {\n      if(!issuer) {\n        throw new Error(`Expected ${vendorName} to have an issuer.`);\n      }\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#context-injection:~:text=if%20an%20%40context%20property%20is%20not%20provided%20in%20the%20document%20or%20the%20Data%20Integrity%20terms%20used%20in%20the%20document%20are%20not%20mapped%20by%20existing%20values%20in%20the%20%40context%20property%2C%20implementations%20SHOULD%20inject%20or%20append';\n      if(optionalTests.contextInjection === false) {\n        this.test.cell.skipMessage = 'Optional Test Skipped';\n        this.skip();\n      }\n      const _credential = structuredClone(credential);\n      const expectedContexts = [\n        'https://w3id.org/security/data-integrity/v2',\n        'https://www.w3.org/ns/credentials/v2'\n      ];\n      // remove the vc's context and expect context injection to occur\n      delete _credential['@context'];\n      let err;\n      let data;\n      try {\n        data = await createInitialVc({issuer, credential: _credential});\n      } catch(e) {\n        err = e;\n      }\n      should.not.exist(\n        err,\n        `Expected issuer ${vendorName} to perform context injection on a ` +\n        `VC with out an \"@context\" property`);\n      should.exist(data, `Expected issuer ${vendorName} to return data.`);\n      data.should.be.an('object', 'Expected response data to be an object.');\n      should.exist(data['@context'],\n        'Expected data to have an injected \"@context\" property.');\n      if(Array.isArray(data['@context'])) {\n        const hasExpectedContext = expectedContexts.some(\n          ctx => data['@context'].includes(ctx));\n        return hasExpectedContext.should.equal(true,\n          `Expected injected context to contain one of ${expectedContexts}`);\n      }\n      data['@context'].should.be.oneOf(expectedContexts);\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "P6-Fcl6bFqa3F88kTD5Wy",
              "ctx": null,
              "_testId": "urn:uuid:bb4c4475-d074-4ce1-9a53-5a0cfd6048c1",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "When an application is securing a document, if an @context property is not provided in the document or the Data Integrity terms used in the document are not mapped by existing values in the @context property, implementations SHOULD inject or append an @context property with a value of https://w3id.org/security/data-integrity/v2 or one or more contexts with at least the same declarations, such as the Verifiable Credential Data Model v2.0 context (https://www.w3.org/ns/credentials/v2)."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#context-injection:~:text=if%20an%20%40context%20property%20is%20not%20provided%20in%20the%20document%20or%20the%20Data%20Integrity%20terms%20used%20in%20the%20document%20are%20not%20mapped%20by%20existing%20values%20in%20the%20%40context%20property%2C%20implementations%20SHOULD%20inject%20or%20append",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1959,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 37,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected issuer Digital Bazaar to perform context injection on a VC with out an \"@context\" property: expected HTTPError: A validation error occured in … { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "method": "POST",
                    "json": {
                      "credential": {
                        "id": "urn:uuid:5abc984f-a441-44d8-acd2-e6bc026227f0",
                        "type": [
                          "VerifiableCredential"
                        ],
                        "issuer": "did:key:z6MkkwVJXDkKXhu2y3E1iF2cbzCUL42veRdzC7FFvNAeJ3Ja",
                        "issuanceDate": "2020-03-16T22:37:26.544Z",
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                        }
                      },
                      "options": {}
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half",
                    "body": "{\"credential\":{\"id\":\"urn:uuid:5abc984f-a441-44d8-acd2-e6bc026227f0\",\"type\":[\"VerifiableCredential\"],\"issuer\":\"did:key:z6MkkwVJXDkKXhu2y3E1iF2cbzCUL42veRdzC7FFvNAeJ3Ja\",\"issuanceDate\":\"2020-03-16T22:37:26.544Z\",\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\"}},\"options\":{}}"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc2.veresissuer.dev/issuers/z1AG4jtcG7E9KZCBXyyekq2nw/credentials/issue",
                  "status": 400,
                  "data": {
                    "name": "ValidationError",
                    "message": "A validation error occured in the 'Issue Credential' validator.",
                    "details": {
                      "errors": [
                        {
                          "stack": "ValidationError: should have required property '@context'\n    at _createError (file:///home/node/app/node_modules/@bedrock/validation/lib/index.js:240:17)\n    at validate (file:///home/node/app/node_modules/@bedrock/validation/lib/index.js:88:14)\n    at validate (file:///home/node/app/node_modules/@bedrock/validation/lib/index.js:181:22)\n    at Layer.handle [as handle_request] (/home/node/app/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/node/app/node_modules/express/lib/router/route.js:149:13)\n    at cors (/home/node/app/node_modules/cors/lib/index.js:188:7)\n    at /home/node/app/node_modules/cors/lib/index.js:224:17\n    at originCallback (/home/node/app/node_modules/cors/lib/index.js:214:15)\n    at /home/node/app/node_modules/cors/lib/index.js:219:13\n    at optionsCallback (/home/node/app/node_modules/cors/lib/index.js:199:9)",
                          "name": "ValidationError",
                          "message": "should have required property '@context'",
                          "details": {
                            "instance": {
                              "credential": {
                                "id": "urn:uuid:5abc984f-a441-44d8-acd2-e6bc026227f0",
                                "type": [
                                  "VerifiableCredential"
                                ],
                                "issuer": "did:key:z6MkkwVJXDkKXhu2y3E1iF2cbzCUL42veRdzC7FFvNAeJ3Ja",
                                "issuanceDate": "2020-03-16T22:37:26.544Z",
                                "credentialSubject": {
                                  "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                                }
                              },
                              "options": {}
                            },
                            "params": {
                              "missingProperty": "@context"
                            },
                            "path": ".credential",
                            "public": true,
                            "schemaPath": "#/properties/credential/required",
                            "schema": {
                              "description": "",
                              "title": ""
                            },
                            "value": {
                              "id": "urn:uuid:5abc984f-a441-44d8-acd2-e6bc026227f0",
                              "type": [
                                "VerifiableCredential"
                              ],
                              "issuer": "did:key:z6MkkwVJXDkKXhu2y3E1iF2cbzCUL42veRdzC7FFvNAeJ3Ja",
                              "issuanceDate": "2020-03-16T22:37:26.544Z",
                              "credentialSubject": {
                                "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                              }
                            }
                          },
                          "cause": null
                        }
                      ],
                      "httpStatusCode": 400
                    },
                    "cause": null,
                    "stack": "ValidationError: A validation error occured in the 'Issue Credential' validator.\n    at _createError (file:///home/node/app/node_modules/@bedrock/validation/lib/index.js:246:17)\n    at validate (file:///home/node/app/node_modules/@bedrock/validation/lib/index.js:88:14)\n    at validate (file:///home/node/app/node_modules/@bedrock/validation/lib/index.js:181:22)\n    at Layer.handle [as handle_request] (/home/node/app/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/node/app/node_modules/express/lib/router/route.js:149:13)\n    at cors (/home/node/app/node_modules/cors/lib/index.js:188:7)\n    at /home/node/app/node_modules/cors/lib/index.js:224:17\n    at originCallback (/home/node/app/node_modules/cors/lib/index.js:214:15)\n    at /home/node/app/node_modules/cors/lib/index.js:219:13\n    at optionsCallback (/home/node/app/node_modules/cors/lib/index.js:199:9)",
                    "type": "ValidationError"
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected issuer Digital Bazaar to perform context injection on a VC with out an \"@context\" property: expected HTTPError: A validation error occured in … { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/suites/create.js:442:18)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "The date and time the proof was created is OPTIONAL and, if included, MUST be specified as an [XMLSCHEMA11-2] dateTimeStamp string, either in Universal Coordinated Time (UTC), denoted by a Z at the end of the value, or with a time zone offset relative to UTC.",
              "body": "function() {\n      this.test.link = 'https://www.w3.org/TR/vc-data-integrity/#:~:text=The%20date%20and%20time%20the%20proof%20was%20created%20is%20OPTIONAL%20and%2C%20if%20included%2C%20MUST%20be%20specified%20as%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%2C%20either%20in%20Universal%20Coordinated%20Time%20(UTC)%2C%20denoted%20by%20a%20Z%20at%20the%20end%20of%20the%20value%2C%20or%20with%20a%20time%20zone%20offset%20relative%20to%20UTC.';\n      if(optionalTests.dates === false) {\n        this.test.cell.skipMessage = 'Optional Test Skipped';\n        this.skip();\n      }\n      for(const proof of proofs) {\n        if(proof.created) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.created.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "P6-Fcl6bFqa3F88kTD5Wy",
              "ctx": null,
              "_testId": "urn:uuid:c5290208-2246-4564-bdda-7acda692deab",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The date and time the proof was created is OPTIONAL and, if included, MUST be specified as an [XMLSCHEMA11-2] dateTimeStamp string, either in Universal Coordinated Time (UTC), denoted by a Z at the end of the value, or with a time zone offset relative to UTC."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://www.w3.org/TR/vc-data-integrity/#:~:text=The%20date%20and%20time%20the%20proof%20was%20created%20is%20OPTIONAL%20and%2C%20if%20included%2C%20MUST%20be%20specified%20as%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%2C%20either%20in%20Universal%20Coordinated%20Time%20(UTC)%2C%20denoted%20by%20a%20Z%20at%20the%20end%20of%20the%20value%2C%20or%20with%20a%20time%20zone%20offset%20relative%20to%20UTC.",
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The expires property is OPTIONAL and, if present, specifies when the proof expires. If present, it MUST be an [XMLSCHEMA11-2] dateTimeStamp string, either in Universal Coordinated Time (UTC), denoted by a Z at the end of the value, or with a time zone offset relative to UTC.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=MUST%20be%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%2C%20either%20in%20Universal%20Coordinated%20Time';\n      if(optionalTests.dates === false) {\n        this.test.cell.skipMessage = 'Optional Test Skipped';\n        this.skip();\n      }\n      for(const proof of proofs) {\n        if(proof.expires) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.expires.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "P6-Fcl6bFqa3F88kTD5Wy",
              "ctx": null,
              "_testId": "urn:uuid:fdac0131-4f8a-4378-917f-8991c17e35bc",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The expires property is OPTIONAL and, if present, specifies when the proof expires. If present, it MUST be an [XMLSCHEMA11-2] dateTimeStamp string, either in Universal Coordinated Time (UTC), denoted by a Z at the end of the value, or with a time zone offset relative to UTC."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=MUST%20be%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%2C%20either%20in%20Universal%20Coordinated%20Time",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The domain property is OPTIONAL. It conveys one or more security domains in which the proof is meant to be used. If specified, the associated value MUST be either a string, or an unordered set of strings. A verifier SHOULD use the value to ensure that the proof was intended to be used in the security domain in which the verifier is operating.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#verify-proof:~:text=The%20domain%20property%20is%20OPTIONAL.%20It%20conveys%20one%20or%20more%20security%20domains%20in%20which%20the%20proof%20is%20meant%20to%20be%20used.%20If%20specified%2C%20the%20associated%20value%20MUST';\n      if(optionalTests.domain === false) {\n        this.test.cell.skipMessage = 'Optional Test Skipped';\n        this.skip();\n      }\n      for(const proof of proofs) {\n        if(proof.domain) {\n          const validType = isStringOrArrayOfStrings(proof.domain);\n          validType.should.equal(true, 'Expected ' +\n            '\"proof.domain\" to be either a string or an unordered ' +\n            'set of strings.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "P6-Fcl6bFqa3F88kTD5Wy",
              "ctx": null,
              "_testId": "urn:uuid:b064a2df-5dbe-4b7f-a8ad-735dfb449867",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The domain property is OPTIONAL. It conveys one or more security domains in which the proof is meant to be used. If specified, the associated value MUST be either a string, or an unordered set of strings. A verifier SHOULD use the value to ensure that the proof was intended to be used in the security domain in which the verifier is operating."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#verify-proof:~:text=The%20domain%20property%20is%20OPTIONAL.%20It%20conveys%20one%20or%20more%20security%20domains%20in%20which%20the%20proof%20is%20meant%20to%20be%20used.%20If%20specified%2C%20the%20associated%20value%20MUST",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(challenge) A string value that SHOULD be included in a proof if a domain is specified.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#verify-proof:~:text=A%20string%20value%20that%20SHOULD%20be%20included%20in%20a%20proof%20if%20a%20domain%20is%20specified.';\n      if(optionalTests.domain === false) {\n        this.test.cell.skipMessage = 'Optional Test Skipped';\n        this.skip();\n      }\n      for(const proof of proofs) {\n        if(proof.challenge) {\n          // domain must be specified\n          should.exist(proof.domain, 'Expected \"proof.domain\" ' +\n            'to be specified.');\n          proof.challenge.should.be.a('string', 'Expected ' +\n            '\"proof.challenge\" to be a string.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "P6-Fcl6bFqa3F88kTD5Wy",
              "ctx": null,
              "_testId": "urn:uuid:a3ae7343-56a2-4e86-91b9-c6bb87349fee",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "(challenge) A string value that SHOULD be included in a proof if a domain is specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#verify-proof:~:text=A%20string%20value%20that%20SHOULD%20be%20included%20in%20a%20proof%20if%20a%20domain%20is%20specified.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"Digital Bazaar\"",
              "body": "function() {\n      this.currentTest.cell = {\n        columnId,\n        rowId: this.currentTest.title\n      };\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "P6-Fcl6bFqa3F88kTD5Wy",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 1,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Digital Bazaar\"",
              "body": "async function() {\n      if(!issuer) {\n        throw new Error(`Expected ${vendorName} to have an issuer.`);\n      }\n      if(!credential) {\n        throw new Error(`Expected a credential to be passed in ` +\n          `received ${credential}`);\n      }\n      data = await createInitialVc({issuer, credential});\n      proofs = Array.isArray(data.proof) ? data.proof : [data.proof];\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "P6-Fcl6bFqa3F88kTD5Wy",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1292,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 416,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "4R3sZ40Ry4GvBz6dLxy7S",
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
          "_testId": "urn:uuid:62b2b673-800b-4590-91de-f3a5ade59b24"
        },
        {
          "title": "Grotto Networking",
          "ctx": null,
          "suites": [
            {
              "title": "Algorithms",
              "ctx": null,
              "suites": [
                {
                  "title": "Add Proof",
                  "ctx": null,
                  "suites": [],
                  "tests": [
                    {
                      "type": "test",
                      "title": "Whenever this algorithm encodes strings, it MUST use UTF-8 encoding.",
                      "body": "function() {\n            this.test.link = 'https://www.w3.org/TR/vc-data-integrity/#:~:text=or%20an%20error.-,Whenever%20this%20algorithm%20encodes%20strings%2C%20it%20MUST%20use%20UTF%2D8%20encoding.,-Let%20proof%20be';\n            for(const proof of proofs) {\n              expect(proof.proofValue.isWellFormed()).to.be.true;\n            }\n          }",
                      "async": 0,
                      "sync": true,
                      "_timeout": 15000,
                      "_slow": 75,
                      "_retries": -1,
                      "timedOut": false,
                      "_currentRetry": 0,
                      "pending": false,
                      "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
                      "parent": "FIwnfxvcK_84g4VESM3DN",
                      "ctx": null,
                      "_testId": "urn:uuid:98ca5e0d-2432-4932-8289-a39cd9d299c6",
                      "cell": {
                        "columnId": "Grotto Networking",
                        "rowId": "Whenever this algorithm encodes strings, it MUST use UTF-8 encoding."
                      },
                      "_events": {},
                      "_eventsCount": 1,
                      "link": "https://www.w3.org/TR/vc-data-integrity/#:~:text=or%20an%20error.-,Whenever%20this%20algorithm%20encodes%20strings%2C%20it%20MUST%20use%20UTF%2D8%20encoding.,-Let%20proof%20be",
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast"
                    },
                    {
                      "type": "test",
                      "title": "If the algorithm produces an error, the error MUST be propagated and SHOULD convey the error type.",
                      "body": "function() {\n            this.test.link = 'https://www.w3.org/TR/vc-data-integrity/#:~:text=If%20the%20algorithm%20produces%20an%20error%2C%20the%20error%20MUST%20be%20propagated%20and%20SHOULD%20convey%20the%20error%20type.';\n            this.test.cell.skipMessage = 'Pending test.';\n            this.skip();\n          }",
                      "async": 0,
                      "sync": true,
                      "_timeout": 15000,
                      "_slow": 75,
                      "_retries": -1,
                      "timedOut": false,
                      "_currentRetry": 0,
                      "pending": true,
                      "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
                      "parent": "FIwnfxvcK_84g4VESM3DN",
                      "ctx": null,
                      "_testId": "urn:uuid:cf2d2438-266e-41cd-9772-9e61cb1c5f19",
                      "cell": {
                        "columnId": "Grotto Networking",
                        "rowId": "If the algorithm produces an error, the error MUST be propagated and SHOULD convey the error type.",
                        "skipMessage": "Pending test."
                      },
                      "_events": {},
                      "_eventsCount": 1,
                      "link": "https://www.w3.org/TR/vc-data-integrity/#:~:text=If%20the%20algorithm%20produces%20an%20error%2C%20the%20error%20MUST%20be%20propagated%20and%20SHOULD%20convey%20the%20error%20type.",
                      "duration": 0,
                      "state": "pending"
                    },
                    {
                      "type": "test",
                      "title": "If one or more of the proof.type, proof.verificationMethod, and proof.proofPurpose values is not set, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
                      "body": "function() {\n            this.test.link = 'https://www.w3.org/TR/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20the%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20values%20is%20not%20set%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n            for(const proof of proofs) {\n              expect(proof).to.contain.keys(\n                'type', 'proofPurpose', 'verificationMethod');\n            }\n          }",
                      "async": 0,
                      "sync": true,
                      "_timeout": 15000,
                      "_slow": 75,
                      "_retries": -1,
                      "timedOut": false,
                      "_currentRetry": 0,
                      "pending": false,
                      "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
                      "parent": "FIwnfxvcK_84g4VESM3DN",
                      "ctx": null,
                      "_testId": "urn:uuid:3f248345-2de1-4a99-915a-064c7fef27d4",
                      "cell": {
                        "columnId": "Grotto Networking",
                        "rowId": "If one or more of the proof.type, proof.verificationMethod, and proof.proofPurpose values is not set, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
                      },
                      "_events": {},
                      "_eventsCount": 1,
                      "link": "https://www.w3.org/TR/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20the%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20values%20is%20not%20set%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast"
                    },
                    {
                      "type": "test",
                      "title": "If options has a non-null domain item, it MUST be equal to proof.domain or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
                      "body": "function() {\n            this.test.link = 'https://www.w3.org/TR/vc-data-integrity/#:~:text=If%20options%20has%20a%20non%2Dnull%20domain%20item%2C%20it%20MUST%20be%20equal%20to%20proof.domain%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n            this.test.cell.skipMessage = 'Pending test.';\n            this.skip();\n          }",
                      "async": 0,
                      "sync": true,
                      "_timeout": 15000,
                      "_slow": 75,
                      "_retries": -1,
                      "timedOut": false,
                      "_currentRetry": 0,
                      "pending": true,
                      "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
                      "parent": "FIwnfxvcK_84g4VESM3DN",
                      "ctx": null,
                      "_testId": "urn:uuid:dd92b125-7c56-4e38-901d-b1bc09765c14",
                      "cell": {
                        "columnId": "Grotto Networking",
                        "rowId": "If options has a non-null domain item, it MUST be equal to proof.domain or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
                        "skipMessage": "Pending test."
                      },
                      "_events": {},
                      "_eventsCount": 1,
                      "link": "https://www.w3.org/TR/vc-data-integrity/#:~:text=If%20options%20has%20a%20non%2Dnull%20domain%20item%2C%20it%20MUST%20be%20equal%20to%20proof.domain%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
                      "duration": 0,
                      "state": "pending"
                    },
                    {
                      "type": "test",
                      "title": "If options has a non-null challenge item, it MUST be equal to proof.challenge or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
                      "body": "function() {\n            this.test.link = 'https://www.w3.org/TR/vc-data-integrity/#:~:text=If%20options%20has%20a%20non%2Dnull%20challenge%20item%2C%20it%20MUST%20be%20equal%20to%20proof.challenge%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n            this.test.cell.skipMessage = 'Pending test.';\n            this.skip();\n          }",
                      "async": 0,
                      "sync": true,
                      "_timeout": 15000,
                      "_slow": 75,
                      "_retries": -1,
                      "timedOut": false,
                      "_currentRetry": 0,
                      "pending": true,
                      "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
                      "parent": "FIwnfxvcK_84g4VESM3DN",
                      "ctx": null,
                      "_testId": "urn:uuid:f5d11c32-b60e-4b71-91f6-37f5100ab8d4",
                      "cell": {
                        "columnId": "Grotto Networking",
                        "rowId": "If options has a non-null challenge item, it MUST be equal to proof.challenge or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
                        "skipMessage": "Pending test."
                      },
                      "_events": {},
                      "_eventsCount": 1,
                      "link": "https://www.w3.org/TR/vc-data-integrity/#:~:text=If%20options%20has%20a%20non%2Dnull%20challenge%20item%2C%20it%20MUST%20be%20equal%20to%20proof.challenge%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
                      "duration": 0,
                      "state": "pending"
                    }
                  ],
                  "root": false,
                  "pending": false,
                  "_retries": -1,
                  "_beforeEach": [],
                  "_beforeAll": [],
                  "_afterEach": [],
                  "_afterAll": [],
                  "_timeout": 15000,
                  "_slow": 75,
                  "_bail": false,
                  "_onlyTests": [],
                  "_onlySuites": [],
                  "delayed": false,
                  "parent": "3LGwUjA6VDtteH8pDSm-W",
                  "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
                  "_testId": "urn:uuid:f2f25eb9-eeb6-4aa6-afaf-751e91ad48f6"
                },
                {
                  "title": "Add Proof Set/Chain",
                  "ctx": null,
                  "suites": [],
                  "tests": [
                    {
                      "type": "test",
                      "title": "Whenever this algorithm encodes strings, it MUST use UTF-8 encoding.",
                      "body": "function() {\n            this.test.link = 'https://www.w3.org/TR/vc-data-integrity/#:~:text=(map).-,Whenever%20this%20algorithm%20encodes%20strings%2C%20it%20MUST%20use%20UTF%2D8%20encoding.,-Let%20proof%20be';\n            for(const proof of proofs) {\n              expect(proof.proofValue.isWellFormed()).to.be.true;\n            }\n          }",
                      "async": 0,
                      "sync": true,
                      "_timeout": 15000,
                      "_slow": 75,
                      "_retries": -1,
                      "timedOut": false,
                      "_currentRetry": 0,
                      "pending": false,
                      "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
                      "parent": "nGHb4x_T2Qf61LrT8jf4N",
                      "ctx": null,
                      "_testId": "urn:uuid:5404cb33-54e6-4247-920c-e7e424635e10",
                      "cell": {
                        "columnId": "Grotto Networking",
                        "rowId": "Whenever this algorithm encodes strings, it MUST use UTF-8 encoding."
                      },
                      "_events": {},
                      "_eventsCount": 1,
                      "link": "https://www.w3.org/TR/vc-data-integrity/#:~:text=(map).-,Whenever%20this%20algorithm%20encodes%20strings%2C%20it%20MUST%20use%20UTF%2D8%20encoding.,-Let%20proof%20be",
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast"
                    },
                    {
                      "type": "test",
                      "title": "If a proof with id equal to previousProof does not exist in allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
                      "body": "function() {\n            this.test.link = 'https://www.w3.org/TR/vc-data-integrity/#:~:text=If%20a%20proof%20with%20id%20equal%20to%20previousProofdoes%20not%20exist%20in%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n            for(const proof of proofs) {\n              if('previousProof' in proof) {\n                if(typeof proof.previousProof === 'string') {\n                  proofs.some(\n                    otherProof => otherProof.id == proof.previousProof).\n                    should.equal(true,\n                      'Expected previousProof ' +\n                      `${proof.previousProof} ` +\n                      'to be the id of another included proof.'\n                    );\n                } if(Array.isArray(proof.previousProof)) {\n                  for(const previousProof in proof.previousProof) {\n                    proofs.some(\n                      otherProof => otherProof.id == previousProof).\n                      should.equal(true,\n                        'Expected previousProof ' +\n                        `${proof.previousProof} ` +\n                        'to be the id of another included proof.'\n                      );\n                  }\n                }\n              }\n            }\n          }",
                      "async": 0,
                      "sync": true,
                      "_timeout": 15000,
                      "_slow": 75,
                      "_retries": -1,
                      "timedOut": false,
                      "_currentRetry": 0,
                      "pending": false,
                      "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
                      "parent": "nGHb4x_T2Qf61LrT8jf4N",
                      "ctx": null,
                      "_testId": "urn:uuid:84183fc5-6a9b-4650-9987-b6ef4f4a5313",
                      "cell": {
                        "columnId": "Grotto Networking",
                        "rowId": "If a proof with id equal to previousProof does not exist in allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
                      },
                      "_events": {},
                      "_eventsCount": 1,
                      "link": "https://www.w3.org/TR/vc-data-integrity/#:~:text=If%20a%20proof%20with%20id%20equal%20to%20previousProofdoes%20not%20exist%20in%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast"
                    },
                    {
                      "type": "test",
                      "title": "If any element of previousProof array has an id attribute that does not match the id attribute of any element of allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
                      "body": "function() {\n            this.test.link = 'https://www.w3.org/TR/vc-data-integrity/#:~:text=If%20any%20element%20of%20previousProof%20array%20has%20an%20id%20attribute%20that%20does%20not%20match%20the%20id%20attribute%20of%20any%20element%20of%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n            const previousProofs = [];\n            for(const proof of proofs) {\n              if('previousProof' in proof) {\n                if(typeof proof.previousProof === 'string') {\n                  previousProofs.push(proof.previousProof);\n                } if(Array.isArray(proof.previousProof)) {\n                  previousProofs.concat(proof.previousProof);\n                }\n              }\n            }\n            for(const previousProof of previousProofs) {\n              proofs.some(\n                otherProof => otherProof.id == previousProof).should.equal(\n                true,\n                'Expected all previousProof values to be the id of ' +\n                'another included proof.'\n              );\n            }\n          }",
                      "async": 0,
                      "sync": true,
                      "_timeout": 15000,
                      "_slow": 75,
                      "_retries": -1,
                      "timedOut": false,
                      "_currentRetry": 0,
                      "pending": false,
                      "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
                      "parent": "nGHb4x_T2Qf61LrT8jf4N",
                      "ctx": null,
                      "_testId": "urn:uuid:3bc5d7fb-5afe-436e-bd54-e9f9fb2beb99",
                      "cell": {
                        "columnId": "Grotto Networking",
                        "rowId": "If any element of previousProof array has an id attribute that does not match the id attribute of any element of allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
                      },
                      "_events": {},
                      "_eventsCount": 1,
                      "link": "https://www.w3.org/TR/vc-data-integrity/#:~:text=If%20any%20element%20of%20previousProof%20array%20has%20an%20id%20attribute%20that%20does%20not%20match%20the%20id%20attribute%20of%20any%20element%20of%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast"
                    }
                  ],
                  "root": false,
                  "pending": false,
                  "_retries": -1,
                  "_beforeEach": [],
                  "_beforeAll": [],
                  "_afterEach": [],
                  "_afterAll": [],
                  "_timeout": 15000,
                  "_slow": 75,
                  "_bail": false,
                  "_onlyTests": [],
                  "_onlySuites": [],
                  "delayed": false,
                  "parent": "3LGwUjA6VDtteH8pDSm-W",
                  "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
                  "_testId": "urn:uuid:89c636c6-4677-425e-ad97-f40e39b95a2d"
                }
              ],
              "tests": [],
              "root": false,
              "pending": false,
              "_retries": -1,
              "_beforeEach": [],
              "_beforeAll": [],
              "_afterEach": [],
              "_afterAll": [],
              "_timeout": 15000,
              "_slow": 75,
              "_bail": false,
              "_onlyTests": [],
              "_onlySuites": [],
              "delayed": false,
              "parent": "A-KW4fZO9QGbsyZkZ2ZWI",
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "_testId": "urn:uuid:41ab14f9-6138-4a8d-933f-4f4f32f17649"
            }
          ],
          "tests": [
            {
              "type": "test",
              "title": "When expressing a data integrity proof on an object, a proof property MUST be used.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=When%20expressing%20a%20data%20integrity%20proof%20on%20an%20object%2C%20a%20proof%20property%20MUST%20be%20used';\n      shouldHaveProof({vc: data});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "A-KW4fZO9QGbsyZkZ2ZWI",
              "ctx": null,
              "_testId": "urn:uuid:362a120a-e4f4-46a7-8efc-7b452e4f464f",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "When expressing a data integrity proof on an object, a proof property MUST be used."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=When%20expressing%20a%20data%20integrity%20proof%20on%20an%20object%2C%20a%20proof%20property%20MUST%20be%20used",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If present (proof), its value MUST be either a single object, or an unordered set of objects",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=If%20present%2C%20its%20value%20MUST%20be%20either%20a%20single%20object%2C%20or%20an%20unordered%20set%20of%20objects';\n      shouldHaveProof({vc: data});\n      const {proof} = data;\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "A-KW4fZO9QGbsyZkZ2ZWI",
              "ctx": null,
              "_testId": "urn:uuid:9107b558-2399-4761-b231-78a0705b4389",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If present (proof), its value MUST be either a single object, or an unordered set of objects"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=If%20present%2C%20its%20value%20MUST%20be%20either%20a%20single%20object%2C%20or%20an%20unordered%20set%20of%20objects",
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.id\") An optional identifier for the proof, which MUST be a URL.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=An%20optional%20identifier%20for%20the%20proof%2C%20which%20MUST%20be%20a%20URL';\n      for(const proof of proofs) {\n        if(proof.id) {\n          shouldBeUrl({url: proof.id, prop: 'proof.id'});\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "A-KW4fZO9QGbsyZkZ2ZWI",
              "ctx": null,
              "_testId": "urn:uuid:bc8878c6-462f-4315-bf68-0486e2c55286",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "(\"proof.id\") An optional identifier for the proof, which MUST be a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=An%20optional%20identifier%20for%20the%20proof%2C%20which%20MUST%20be%20a%20URL",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The specific proof type used for the cryptographic proof MUST be specified as a string that maps to a URL.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20specific%20proof%20type%20used%20for%20the%20cryptographic%20proof%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL';\n      const prop = '@type';\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n        const expanded = await jsonld.expand({\n          '@context': data['@context'],\n          type: proof.type\n        }, {documentLoader});\n        for(const term of expanded) {\n          const types = term[prop];\n          should.exist(types, 'Expected @type to exist.');\n          types.every(url => shouldBeUrl({url, prop}));\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "A-KW4fZO9QGbsyZkZ2ZWI",
              "ctx": null,
              "_testId": "urn:uuid:c1101aa4-5853-488d-839a-83981b0c0842",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The specific proof type used for the cryptographic proof MUST be specified as a string that maps to a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20specific%20proof%20type%20used%20for%20the%20cryptographic%20proof%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2453,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The type property MUST contain the string DataIntegrityProof.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-data-integrity/#contexts-and-vocabularies:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.';\n          for(const proof of proofs) {\n            proof.should.have.property('type');\n            proof.type.should.be.a(\n              'string',\n              'Expected \"proof.type\" to be a string.'\n            );\n            const hasExpectedType = expectedProofTypes.includes(proof.type);\n            hasExpectedType.should.equal(\n              true,\n              `Expected \"proof.type\" to be one of ` +\n              `${expectedProofTypes} Received: ${proof.type}`);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "A-KW4fZO9QGbsyZkZ2ZWI",
              "ctx": null,
              "_testId": "urn:uuid:c6c2ba47-ac37-4523-9ca8-369c64e50f17",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The type property MUST contain the string DataIntegrityProof."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#contexts-and-vocabularies:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2454,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
              "body": "function() {\n          this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.';\n          for(const proof of proofs) {\n            should.exist(proof, 'Expected proof to exist.');\n            if(proof.type === 'DataIntegrityProof') {\n              should.exist(proof.cryptosuite,\n                'Expected proof to have property \"cryptosuite\".');\n            }\n            const {\n              prefix: expectedPrefix,\n              name: encodingName\n            } = expectedMultibasePrefix(proof.cryptosuite);\n            shouldHaveProofValue({proof, expectedPrefix, encodingName});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "A-KW4fZO9QGbsyZkZ2ZWI",
              "ctx": null,
              "_testId": "urn:uuid:c5efa94f-991c-436e-9c66-8719a60fe95c",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The proofValue property MUST be used, as specified in 2.1 Proofs."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified. If specified, its value MUST be a string.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.';\n      for(const proof of proofs) {\n        if(proof.type && proof.type === 'DataIntegrityProof') {\n          should.exist(\n            proof.cryptosuite,\n            'If the proof type is DataIntegrityProof, cryptosuite MUST ' +\n            'be specified');\n          proof.cryptosuite.should.be.a(\n            'string',\n            'cryptosuite value MUST be a string.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "A-KW4fZO9QGbsyZkZ2ZWI",
              "ctx": null,
              "_testId": "urn:uuid:eb5343c3-0bb7-4413-961a-d054b0837176",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified. If specified, its value MUST be a string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "A verification method is the means and information needed to verify the proof. If included, the value MUST be a string that maps to a [URL]",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=A%20verification%20method%20is%20the%20means%20and%20information%20needed%20to%20verify%20the%20proof.%20If%20included%2C%20the%20value%20MUST%20be%20a%20string%20that%20maps%20to%20a%20%5BURL%5D.';\n      for(const proof of proofs) {\n        await shouldMapToUrl({\n          doc: {\n            '@context': data['@context'],\n            ...proof\n          },\n          term: 'https://w3id.org/security#verificationMethod',\n          prop: '@id',\n          documentLoader\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "A-KW4fZO9QGbsyZkZ2ZWI",
              "ctx": null,
              "_testId": "urn:uuid:114669fd-9243-4947-aa74-c80285eeeeba",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "A verification method is the means and information needed to verify the proof. If included, the value MUST be a string that maps to a [URL]"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=A%20verification%20method%20is%20the%20means%20and%20information%20needed%20to%20verify%20the%20proof.%20If%20included%2C%20the%20value%20MUST%20be%20a%20string%20that%20maps%20to%20a%20%5BURL%5D.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2455,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The reason the proof was created (\"proof.proofPurpose\") MUST be specified as a string that maps to a URL",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20reason%20the%20proof%20was%20created%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL';\n      for(const proof of proofs) {\n        proof.should.have.property('proofPurpose');\n        proof.proofPurpose.should.be.a('string');\n        await shouldMapToUrl({\n          doc: {\n            '@context': data['@context'],\n            ...proof\n          },\n          term: 'https://w3id.org/security#proofPurpose',\n          prop: '@id',\n          documentLoader\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "A-KW4fZO9QGbsyZkZ2ZWI",
              "ctx": null,
              "_testId": "urn:uuid:b2d71695-1cd8-49da-8611-d81606c28527",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The reason the proof was created (\"proof.proofPurpose\") MUST be specified as a string that maps to a URL"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20reason%20the%20proof%20was%20created%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2458,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof';\n      for(const proof of proofs) {\n        should.exist(proof, 'Expected proof to exist.');\n        const {\n          prefix: expectedPrefix,\n          name: encodingName\n        } = expectedMultibasePrefix(proof.cryptosuite);\n        shouldHaveProofValue({proof, expectedPrefix, encodingName});\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "A-KW4fZO9QGbsyZkZ2ZWI",
              "ctx": null,
              "_testId": "urn:uuid:982de1eb-d59a-442b-83f1-774e39a234a4",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.previousProof\" field exists, it MUST be a string.",
              "body": "function() {\n        for(const proof of proofs) {\n          if(proof.previousProof) {\n            proof.previousProof.should.be.a('string', 'Expected ' +\n              '\"proof.previousProof\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "A-KW4fZO9QGbsyZkZ2ZWI",
              "ctx": null,
              "_testId": "urn:uuid:569b82be-1324-4eb7-945b-d36a280d186b",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "if \"proof.previousProof\" field exists, it MUST be a string."
              },
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.nonce\" field exists, it MUST be a string.",
              "body": "function() {\n        for(const proof of proofs) {\n          if(proof.nonce) {\n            proof.nonce.should.be.a('string', 'Expected \"proof.nonce\" ' +\n              'to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "A-KW4fZO9QGbsyZkZ2ZWI",
              "ctx": null,
              "_testId": "urn:uuid:754a0dd2-96af-4e75-a6ed-346fd25a3886",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "if \"proof.nonce\" field exists, it MUST be a string."
              },
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Cryptographic suite designers MUST use mandatory proof value properties defined in Section 2.1 Proofs, and MAY define other properties specific to their cryptographic suite.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#add-proof:~:text=MUST%20use%20mandatory%20proof%20value%20properties%20defined';\n      for(const proof of proofs) {\n        shouldBeProof({proof});\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "A-KW4fZO9QGbsyZkZ2ZWI",
              "ctx": null,
              "_testId": "urn:uuid:1abeb969-e4d1-4dfd-bcd5-2104ea27f1b6",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "Cryptographic suite designers MUST use mandatory proof value properties defined in Section 2.1 Proofs, and MAY define other properties specific to their cryptographic suite."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#add-proof:~:text=MUST%20use%20mandatory%20proof%20value%20properties%20defined",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2460,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      const undefinedType = structuredClone(credential);\n      undefinedType.type.push('InvalidType');\n      await shouldFailIssuance({\n        credential: undefinedType,\n        issuer,\n        reason: 'Expected issuer to error when VC has an undefined type.'\n      });\n      const undefinedTerm = structuredClone(credential);\n      undefinedTerm.credentialSubject.invalidTerm = 'invalidTerm';\n      await shouldFailIssuance({\n        credential: undefinedTerm,\n        issuer,\n        reason: 'Expected issuer to error when VC has an undefined term.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "A-KW4fZO9QGbsyZkZ2ZWI",
              "ctx": null,
              "_testId": "urn:uuid:4dae9fc7-84ce-4fef-9e78-e9d418c2e1fc",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2460,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 395,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n        const hasCryptosuiteName = proofs.some(\n          p => p?.cryptosuite === cryptosuiteName);\n        hasCryptosuiteName.should.equal(\n          true,\n          `Expected at least one proof with cryptosuite ${cryptosuiteName}`);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "A-KW4fZO9QGbsyZkZ2ZWI",
              "ctx": null,
              "_testId": "urn:uuid:a293edce-1d62-48b3-bd3a-6e9d93adc1db",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2856,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n        const cryptoProp = 'https://w3id.org/security#cryptosuite';\n        const cryptoType = 'https://w3id.org/security#cryptosuiteString';\n        for(const {cryptosuite, type} of proofs) {\n          should.exist(cryptosuite,\n            'Expected property \"proof.cryptosuite\" to exist.');\n          should.exist(type,\n            'Expected property \"proof.type\" to exist.');\n          should.exist(data['@context'],\n            'Expected VC to have property \"@context\".');\n          const expanded = await jsonld.expand({\n            '@context': data['@context'],\n            cryptosuite,\n            type\n          }, {documentLoader});\n          for(const terms of expanded) {\n            const cryptoProperties = terms[cryptoProp];\n            should.exist(cryptoProperties,\n              `Expected property ${cryptoProp} to exist.`);\n            const hasTypeName = cryptoProperties.some(suite =>\n              suite['@type'] === cryptoType &&\n              suite['@value'] == cryptosuiteName);\n            hasTypeName.should.equal(true,\n              `Expected ${cryptoProp} with @value ${cryptosuiteName} & ` +\n              `@type ${cryptoType}`);\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "A-KW4fZO9QGbsyZkZ2ZWI",
              "ctx": null,
              "_testId": "urn:uuid:7e0019bb-c552-4ba9-981e-cc31869d5059",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2856,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "When an application is securing a document, if an @context property is not provided in the document or the Data Integrity terms used in the document are not mapped by existing values in the @context property, implementations SHOULD inject or append an @context property with a value of https://w3id.org/security/data-integrity/v2 or one or more contexts with at least the same declarations, such as the Verifiable Credential Data Model v2.0 context (https://www.w3.org/ns/credentials/v2).",
              "body": "async function() {\n      if(!issuer) {\n        throw new Error(`Expected ${vendorName} to have an issuer.`);\n      }\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#context-injection:~:text=if%20an%20%40context%20property%20is%20not%20provided%20in%20the%20document%20or%20the%20Data%20Integrity%20terms%20used%20in%20the%20document%20are%20not%20mapped%20by%20existing%20values%20in%20the%20%40context%20property%2C%20implementations%20SHOULD%20inject%20or%20append';\n      if(optionalTests.contextInjection === false) {\n        this.test.cell.skipMessage = 'Optional Test Skipped';\n        this.skip();\n      }\n      const _credential = structuredClone(credential);\n      const expectedContexts = [\n        'https://w3id.org/security/data-integrity/v2',\n        'https://www.w3.org/ns/credentials/v2'\n      ];\n      // remove the vc's context and expect context injection to occur\n      delete _credential['@context'];\n      let err;\n      let data;\n      try {\n        data = await createInitialVc({issuer, credential: _credential});\n      } catch(e) {\n        err = e;\n      }\n      should.not.exist(\n        err,\n        `Expected issuer ${vendorName} to perform context injection on a ` +\n        `VC with out an \"@context\" property`);\n      should.exist(data, `Expected issuer ${vendorName} to return data.`);\n      data.should.be.an('object', 'Expected response data to be an object.');\n      should.exist(data['@context'],\n        'Expected data to have an injected \"@context\" property.');\n      if(Array.isArray(data['@context'])) {\n        const hasExpectedContext = expectedContexts.some(\n          ctx => data['@context'].includes(ctx));\n        return hasExpectedContext.should.equal(true,\n          `Expected injected context to contain one of ${expectedContexts}`);\n      }\n      data['@context'].should.be.oneOf(expectedContexts);\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "A-KW4fZO9QGbsyZkZ2ZWI",
              "ctx": null,
              "_testId": "urn:uuid:af6319cd-6340-4fff-b51a-57cd151a526c",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "When an application is securing a document, if an @context property is not provided in the document or the Data Integrity terms used in the document are not mapped by existing values in the @context property, implementations SHOULD inject or append an @context property with a value of https://w3id.org/security/data-integrity/v2 or one or more contexts with at least the same declarations, such as the Verifiable Credential Data Model v2.0 context (https://www.w3.org/ns/credentials/v2)."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#context-injection:~:text=if%20an%20%40context%20property%20is%20not%20provided%20in%20the%20document%20or%20the%20Data%20Integrity%20terms%20used%20in%20the%20document%20are%20not%20mapped%20by%20existing%20values%20in%20the%20%40context%20property%2C%20implementations%20SHOULD%20inject%20or%20append",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2857,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 72,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected issuer Grotto Networking to perform context injection on a VC with out an \"@context\" property: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"credential\":{\"id\":\"urn:uuid:bc6db2d1-e5aa-47a9-ac72-aafb221522e8\",\"type\":[\"VerifiableCredential\"],\"issuer\":\"did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7\",\"issuanceDate\":\"2020-03-16T22:37:26.544Z\",\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\"}},\"options\":{}}",
                    "method": "POST",
                    "json": {
                      "credential": {
                        "id": "urn:uuid:bc6db2d1-e5aa-47a9-ac72-aafb221522e8",
                        "type": [
                          "VerifiableCredential"
                        ],
                        "issuer": "did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7",
                        "issuanceDate": "2020-03-16T22:37:26.544Z",
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                        }
                      },
                      "options": {}
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://ecdsa-sd.grotto-networking.com/EdDSA-RDFC/credentials/issue",
                  "status": 400,
                  "data": {
                    "errors": [
                      "must have required property '@context'"
                    ]
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected issuer Grotto Networking to perform context injection on a VC with out an \"@context\" property: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/suites/create.js:442:18)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "The date and time the proof was created is OPTIONAL and, if included, MUST be specified as an [XMLSCHEMA11-2] dateTimeStamp string, either in Universal Coordinated Time (UTC), denoted by a Z at the end of the value, or with a time zone offset relative to UTC.",
              "body": "function() {\n      this.test.link = 'https://www.w3.org/TR/vc-data-integrity/#:~:text=The%20date%20and%20time%20the%20proof%20was%20created%20is%20OPTIONAL%20and%2C%20if%20included%2C%20MUST%20be%20specified%20as%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%2C%20either%20in%20Universal%20Coordinated%20Time%20(UTC)%2C%20denoted%20by%20a%20Z%20at%20the%20end%20of%20the%20value%2C%20or%20with%20a%20time%20zone%20offset%20relative%20to%20UTC.';\n      if(optionalTests.dates === false) {\n        this.test.cell.skipMessage = 'Optional Test Skipped';\n        this.skip();\n      }\n      for(const proof of proofs) {\n        if(proof.created) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.created.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "A-KW4fZO9QGbsyZkZ2ZWI",
              "ctx": null,
              "_testId": "urn:uuid:d1ab0e68-6f73-4cc9-9712-6acf94d9b9a8",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The date and time the proof was created is OPTIONAL and, if included, MUST be specified as an [XMLSCHEMA11-2] dateTimeStamp string, either in Universal Coordinated Time (UTC), denoted by a Z at the end of the value, or with a time zone offset relative to UTC."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://www.w3.org/TR/vc-data-integrity/#:~:text=The%20date%20and%20time%20the%20proof%20was%20created%20is%20OPTIONAL%20and%2C%20if%20included%2C%20MUST%20be%20specified%20as%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%2C%20either%20in%20Universal%20Coordinated%20Time%20(UTC)%2C%20denoted%20by%20a%20Z%20at%20the%20end%20of%20the%20value%2C%20or%20with%20a%20time%20zone%20offset%20relative%20to%20UTC.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The expires property is OPTIONAL and, if present, specifies when the proof expires. If present, it MUST be an [XMLSCHEMA11-2] dateTimeStamp string, either in Universal Coordinated Time (UTC), denoted by a Z at the end of the value, or with a time zone offset relative to UTC.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=MUST%20be%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%2C%20either%20in%20Universal%20Coordinated%20Time';\n      if(optionalTests.dates === false) {\n        this.test.cell.skipMessage = 'Optional Test Skipped';\n        this.skip();\n      }\n      for(const proof of proofs) {\n        if(proof.expires) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.expires.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "A-KW4fZO9QGbsyZkZ2ZWI",
              "ctx": null,
              "_testId": "urn:uuid:a2ab6363-71f8-4628-96b1-6b3abbaf44c9",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The expires property is OPTIONAL and, if present, specifies when the proof expires. If present, it MUST be an [XMLSCHEMA11-2] dateTimeStamp string, either in Universal Coordinated Time (UTC), denoted by a Z at the end of the value, or with a time zone offset relative to UTC."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=MUST%20be%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%2C%20either%20in%20Universal%20Coordinated%20Time",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The domain property is OPTIONAL. It conveys one or more security domains in which the proof is meant to be used. If specified, the associated value MUST be either a string, or an unordered set of strings. A verifier SHOULD use the value to ensure that the proof was intended to be used in the security domain in which the verifier is operating.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#verify-proof:~:text=The%20domain%20property%20is%20OPTIONAL.%20It%20conveys%20one%20or%20more%20security%20domains%20in%20which%20the%20proof%20is%20meant%20to%20be%20used.%20If%20specified%2C%20the%20associated%20value%20MUST';\n      if(optionalTests.domain === false) {\n        this.test.cell.skipMessage = 'Optional Test Skipped';\n        this.skip();\n      }\n      for(const proof of proofs) {\n        if(proof.domain) {\n          const validType = isStringOrArrayOfStrings(proof.domain);\n          validType.should.equal(true, 'Expected ' +\n            '\"proof.domain\" to be either a string or an unordered ' +\n            'set of strings.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "A-KW4fZO9QGbsyZkZ2ZWI",
              "ctx": null,
              "_testId": "urn:uuid:4b634acc-201f-4b74-98c1-bbe91f82934b",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The domain property is OPTIONAL. It conveys one or more security domains in which the proof is meant to be used. If specified, the associated value MUST be either a string, or an unordered set of strings. A verifier SHOULD use the value to ensure that the proof was intended to be used in the security domain in which the verifier is operating."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#verify-proof:~:text=The%20domain%20property%20is%20OPTIONAL.%20It%20conveys%20one%20or%20more%20security%20domains%20in%20which%20the%20proof%20is%20meant%20to%20be%20used.%20If%20specified%2C%20the%20associated%20value%20MUST",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(challenge) A string value that SHOULD be included in a proof if a domain is specified.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#verify-proof:~:text=A%20string%20value%20that%20SHOULD%20be%20included%20in%20a%20proof%20if%20a%20domain%20is%20specified.';\n      if(optionalTests.domain === false) {\n        this.test.cell.skipMessage = 'Optional Test Skipped';\n        this.skip();\n      }\n      for(const proof of proofs) {\n        if(proof.challenge) {\n          // domain must be specified\n          should.exist(proof.domain, 'Expected \"proof.domain\" ' +\n            'to be specified.');\n          proof.challenge.should.be.a('string', 'Expected ' +\n            '\"proof.challenge\" to be a string.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "A-KW4fZO9QGbsyZkZ2ZWI",
              "ctx": null,
              "_testId": "urn:uuid:6b58a5ad-be17-41be-b8d2-b2eeddcc37e6",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "(challenge) A string value that SHOULD be included in a proof if a domain is specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#verify-proof:~:text=A%20string%20value%20that%20SHOULD%20be%20included%20in%20a%20proof%20if%20a%20domain%20is%20specified.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"Grotto Networking\"",
              "body": "function() {\n      this.currentTest.cell = {\n        columnId,\n        rowId: this.currentTest.title\n      };\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "A-KW4fZO9QGbsyZkZ2ZWI",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Grotto Networking\"",
              "body": "async function() {\n      if(!issuer) {\n        throw new Error(`Expected ${vendorName} to have an issuer.`);\n      }\n      if(!credential) {\n        throw new Error(`Expected a credential to be passed in ` +\n          `received ${credential}`);\n      }\n      data = await createInitialVc({issuer, credential});\n      proofs = Array.isArray(data.proof) ? data.proof : [data.proof];\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "A-KW4fZO9QGbsyZkZ2ZWI",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2000,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 452,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "4R3sZ40Ry4GvBz6dLxy7S",
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
          "_testId": "urn:uuid:633523ff-35bc-42a1-8c56-06033bcc098c"
        },
        {
          "title": "OpSecId",
          "ctx": null,
          "suites": [
            {
              "title": "Algorithms",
              "ctx": null,
              "suites": [
                {
                  "title": "Add Proof",
                  "ctx": null,
                  "suites": [],
                  "tests": [
                    {
                      "type": "test",
                      "title": "Whenever this algorithm encodes strings, it MUST use UTF-8 encoding.",
                      "body": "function() {\n            this.test.link = 'https://www.w3.org/TR/vc-data-integrity/#:~:text=or%20an%20error.-,Whenever%20this%20algorithm%20encodes%20strings%2C%20it%20MUST%20use%20UTF%2D8%20encoding.,-Let%20proof%20be';\n            for(const proof of proofs) {\n              expect(proof.proofValue.isWellFormed()).to.be.true;\n            }\n          }",
                      "async": 0,
                      "sync": true,
                      "_timeout": 15000,
                      "_slow": 75,
                      "_retries": -1,
                      "timedOut": false,
                      "_currentRetry": 0,
                      "pending": false,
                      "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
                      "parent": "yaRxDiu0oQ5o8M0hIb51y",
                      "ctx": null
                    },
                    {
                      "type": "test",
                      "title": "If the algorithm produces an error, the error MUST be propagated and SHOULD convey the error type.",
                      "body": "function() {\n            this.test.link = 'https://www.w3.org/TR/vc-data-integrity/#:~:text=If%20the%20algorithm%20produces%20an%20error%2C%20the%20error%20MUST%20be%20propagated%20and%20SHOULD%20convey%20the%20error%20type.';\n            this.test.cell.skipMessage = 'Pending test.';\n            this.skip();\n          }",
                      "async": 0,
                      "sync": true,
                      "_timeout": 15000,
                      "_slow": 75,
                      "_retries": -1,
                      "timedOut": false,
                      "_currentRetry": 0,
                      "pending": false,
                      "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
                      "parent": "yaRxDiu0oQ5o8M0hIb51y",
                      "ctx": null
                    },
                    {
                      "type": "test",
                      "title": "If one or more of the proof.type, proof.verificationMethod, and proof.proofPurpose values is not set, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
                      "body": "function() {\n            this.test.link = 'https://www.w3.org/TR/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20the%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20values%20is%20not%20set%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n            for(const proof of proofs) {\n              expect(proof).to.contain.keys(\n                'type', 'proofPurpose', 'verificationMethod');\n            }\n          }",
                      "async": 0,
                      "sync": true,
                      "_timeout": 15000,
                      "_slow": 75,
                      "_retries": -1,
                      "timedOut": false,
                      "_currentRetry": 0,
                      "pending": false,
                      "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
                      "parent": "yaRxDiu0oQ5o8M0hIb51y",
                      "ctx": null
                    },
                    {
                      "type": "test",
                      "title": "If options has a non-null domain item, it MUST be equal to proof.domain or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
                      "body": "function() {\n            this.test.link = 'https://www.w3.org/TR/vc-data-integrity/#:~:text=If%20options%20has%20a%20non%2Dnull%20domain%20item%2C%20it%20MUST%20be%20equal%20to%20proof.domain%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n            this.test.cell.skipMessage = 'Pending test.';\n            this.skip();\n          }",
                      "async": 0,
                      "sync": true,
                      "_timeout": 15000,
                      "_slow": 75,
                      "_retries": -1,
                      "timedOut": false,
                      "_currentRetry": 0,
                      "pending": false,
                      "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
                      "parent": "yaRxDiu0oQ5o8M0hIb51y",
                      "ctx": null
                    },
                    {
                      "type": "test",
                      "title": "If options has a non-null challenge item, it MUST be equal to proof.challenge or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
                      "body": "function() {\n            this.test.link = 'https://www.w3.org/TR/vc-data-integrity/#:~:text=If%20options%20has%20a%20non%2Dnull%20challenge%20item%2C%20it%20MUST%20be%20equal%20to%20proof.challenge%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n            this.test.cell.skipMessage = 'Pending test.';\n            this.skip();\n          }",
                      "async": 0,
                      "sync": true,
                      "_timeout": 15000,
                      "_slow": 75,
                      "_retries": -1,
                      "timedOut": false,
                      "_currentRetry": 0,
                      "pending": false,
                      "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
                      "parent": "yaRxDiu0oQ5o8M0hIb51y",
                      "ctx": null
                    }
                  ],
                  "root": false,
                  "pending": false,
                  "_retries": -1,
                  "_beforeEach": [],
                  "_beforeAll": [],
                  "_afterEach": [],
                  "_afterAll": [],
                  "_timeout": 15000,
                  "_slow": 75,
                  "_bail": false,
                  "_onlyTests": [],
                  "_onlySuites": [],
                  "delayed": false,
                  "parent": "_Hhh81XiKtK1rVUNqW4jW",
                  "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js"
                },
                {
                  "title": "Add Proof Set/Chain",
                  "ctx": null,
                  "suites": [],
                  "tests": [
                    {
                      "type": "test",
                      "title": "Whenever this algorithm encodes strings, it MUST use UTF-8 encoding.",
                      "body": "function() {\n            this.test.link = 'https://www.w3.org/TR/vc-data-integrity/#:~:text=(map).-,Whenever%20this%20algorithm%20encodes%20strings%2C%20it%20MUST%20use%20UTF%2D8%20encoding.,-Let%20proof%20be';\n            for(const proof of proofs) {\n              expect(proof.proofValue.isWellFormed()).to.be.true;\n            }\n          }",
                      "async": 0,
                      "sync": true,
                      "_timeout": 15000,
                      "_slow": 75,
                      "_retries": -1,
                      "timedOut": false,
                      "_currentRetry": 0,
                      "pending": false,
                      "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
                      "parent": "nJQhCRlSLc1tW15dU5Jll",
                      "ctx": null
                    },
                    {
                      "type": "test",
                      "title": "If a proof with id equal to previousProof does not exist in allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
                      "body": "function() {\n            this.test.link = 'https://www.w3.org/TR/vc-data-integrity/#:~:text=If%20a%20proof%20with%20id%20equal%20to%20previousProofdoes%20not%20exist%20in%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n            for(const proof of proofs) {\n              if('previousProof' in proof) {\n                if(typeof proof.previousProof === 'string') {\n                  proofs.some(\n                    otherProof => otherProof.id == proof.previousProof).\n                    should.equal(true,\n                      'Expected previousProof ' +\n                      `${proof.previousProof} ` +\n                      'to be the id of another included proof.'\n                    );\n                } if(Array.isArray(proof.previousProof)) {\n                  for(const previousProof in proof.previousProof) {\n                    proofs.some(\n                      otherProof => otherProof.id == previousProof).\n                      should.equal(true,\n                        'Expected previousProof ' +\n                        `${proof.previousProof} ` +\n                        'to be the id of another included proof.'\n                      );\n                  }\n                }\n              }\n            }\n          }",
                      "async": 0,
                      "sync": true,
                      "_timeout": 15000,
                      "_slow": 75,
                      "_retries": -1,
                      "timedOut": false,
                      "_currentRetry": 0,
                      "pending": false,
                      "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
                      "parent": "nJQhCRlSLc1tW15dU5Jll",
                      "ctx": null
                    },
                    {
                      "type": "test",
                      "title": "If any element of previousProof array has an id attribute that does not match the id attribute of any element of allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
                      "body": "function() {\n            this.test.link = 'https://www.w3.org/TR/vc-data-integrity/#:~:text=If%20any%20element%20of%20previousProof%20array%20has%20an%20id%20attribute%20that%20does%20not%20match%20the%20id%20attribute%20of%20any%20element%20of%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n            const previousProofs = [];\n            for(const proof of proofs) {\n              if('previousProof' in proof) {\n                if(typeof proof.previousProof === 'string') {\n                  previousProofs.push(proof.previousProof);\n                } if(Array.isArray(proof.previousProof)) {\n                  previousProofs.concat(proof.previousProof);\n                }\n              }\n            }\n            for(const previousProof of previousProofs) {\n              proofs.some(\n                otherProof => otherProof.id == previousProof).should.equal(\n                true,\n                'Expected all previousProof values to be the id of ' +\n                'another included proof.'\n              );\n            }\n          }",
                      "async": 0,
                      "sync": true,
                      "_timeout": 15000,
                      "_slow": 75,
                      "_retries": -1,
                      "timedOut": false,
                      "_currentRetry": 0,
                      "pending": false,
                      "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
                      "parent": "nJQhCRlSLc1tW15dU5Jll",
                      "ctx": null
                    }
                  ],
                  "root": false,
                  "pending": false,
                  "_retries": -1,
                  "_beforeEach": [],
                  "_beforeAll": [],
                  "_afterEach": [],
                  "_afterAll": [],
                  "_timeout": 15000,
                  "_slow": 75,
                  "_bail": false,
                  "_onlyTests": [],
                  "_onlySuites": [],
                  "delayed": false,
                  "parent": "_Hhh81XiKtK1rVUNqW4jW",
                  "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js"
                }
              ],
              "tests": [],
              "root": false,
              "pending": false,
              "_retries": -1,
              "_beforeEach": [],
              "_beforeAll": [],
              "_afterEach": [],
              "_afterAll": [],
              "_timeout": 15000,
              "_slow": 75,
              "_bail": false,
              "_onlyTests": [],
              "_onlySuites": [],
              "delayed": false,
              "parent": "baGTMFcpCvPQUzhBOOS6b",
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js"
            }
          ],
          "tests": [
            {
              "type": "test",
              "title": "When expressing a data integrity proof on an object, a proof property MUST be used.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=When%20expressing%20a%20data%20integrity%20proof%20on%20an%20object%2C%20a%20proof%20property%20MUST%20be%20used';\n      shouldHaveProof({vc: data});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "baGTMFcpCvPQUzhBOOS6b",
              "ctx": null
            },
            {
              "type": "test",
              "title": "If present (proof), its value MUST be either a single object, or an unordered set of objects",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=If%20present%2C%20its%20value%20MUST%20be%20either%20a%20single%20object%2C%20or%20an%20unordered%20set%20of%20objects';\n      shouldHaveProof({vc: data});\n      const {proof} = data;\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "baGTMFcpCvPQUzhBOOS6b",
              "ctx": null
            },
            {
              "type": "test",
              "title": "(\"proof.id\") An optional identifier for the proof, which MUST be a URL.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=An%20optional%20identifier%20for%20the%20proof%2C%20which%20MUST%20be%20a%20URL';\n      for(const proof of proofs) {\n        if(proof.id) {\n          shouldBeUrl({url: proof.id, prop: 'proof.id'});\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "baGTMFcpCvPQUzhBOOS6b",
              "ctx": null
            },
            {
              "type": "test",
              "title": "The specific proof type used for the cryptographic proof MUST be specified as a string that maps to a URL.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20specific%20proof%20type%20used%20for%20the%20cryptographic%20proof%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL';\n      const prop = '@type';\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n        const expanded = await jsonld.expand({\n          '@context': data['@context'],\n          type: proof.type\n        }, {documentLoader});\n        for(const term of expanded) {\n          const types = term[prop];\n          should.exist(types, 'Expected @type to exist.');\n          types.every(url => shouldBeUrl({url, prop}));\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "baGTMFcpCvPQUzhBOOS6b",
              "ctx": null
            },
            {
              "type": "test",
              "title": "The type property MUST contain the string DataIntegrityProof.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-data-integrity/#contexts-and-vocabularies:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.';\n          for(const proof of proofs) {\n            proof.should.have.property('type');\n            proof.type.should.be.a(\n              'string',\n              'Expected \"proof.type\" to be a string.'\n            );\n            const hasExpectedType = expectedProofTypes.includes(proof.type);\n            hasExpectedType.should.equal(\n              true,\n              `Expected \"proof.type\" to be one of ` +\n              `${expectedProofTypes} Received: ${proof.type}`);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "baGTMFcpCvPQUzhBOOS6b",
              "ctx": null
            },
            {
              "type": "test",
              "title": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
              "body": "function() {\n          this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.';\n          for(const proof of proofs) {\n            should.exist(proof, 'Expected proof to exist.');\n            if(proof.type === 'DataIntegrityProof') {\n              should.exist(proof.cryptosuite,\n                'Expected proof to have property \"cryptosuite\".');\n            }\n            const {\n              prefix: expectedPrefix,\n              name: encodingName\n            } = expectedMultibasePrefix(proof.cryptosuite);\n            shouldHaveProofValue({proof, expectedPrefix, encodingName});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "baGTMFcpCvPQUzhBOOS6b",
              "ctx": null
            },
            {
              "type": "test",
              "title": "If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified. If specified, its value MUST be a string.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.';\n      for(const proof of proofs) {\n        if(proof.type && proof.type === 'DataIntegrityProof') {\n          should.exist(\n            proof.cryptosuite,\n            'If the proof type is DataIntegrityProof, cryptosuite MUST ' +\n            'be specified');\n          proof.cryptosuite.should.be.a(\n            'string',\n            'cryptosuite value MUST be a string.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "baGTMFcpCvPQUzhBOOS6b",
              "ctx": null
            },
            {
              "type": "test",
              "title": "A verification method is the means and information needed to verify the proof. If included, the value MUST be a string that maps to a [URL]",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=A%20verification%20method%20is%20the%20means%20and%20information%20needed%20to%20verify%20the%20proof.%20If%20included%2C%20the%20value%20MUST%20be%20a%20string%20that%20maps%20to%20a%20%5BURL%5D.';\n      for(const proof of proofs) {\n        await shouldMapToUrl({\n          doc: {\n            '@context': data['@context'],\n            ...proof\n          },\n          term: 'https://w3id.org/security#verificationMethod',\n          prop: '@id',\n          documentLoader\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "baGTMFcpCvPQUzhBOOS6b",
              "ctx": null
            },
            {
              "type": "test",
              "title": "The reason the proof was created (\"proof.proofPurpose\") MUST be specified as a string that maps to a URL",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20reason%20the%20proof%20was%20created%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL';\n      for(const proof of proofs) {\n        proof.should.have.property('proofPurpose');\n        proof.proofPurpose.should.be.a('string');\n        await shouldMapToUrl({\n          doc: {\n            '@context': data['@context'],\n            ...proof\n          },\n          term: 'https://w3id.org/security#proofPurpose',\n          prop: '@id',\n          documentLoader\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "baGTMFcpCvPQUzhBOOS6b",
              "ctx": null
            },
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof';\n      for(const proof of proofs) {\n        should.exist(proof, 'Expected proof to exist.');\n        const {\n          prefix: expectedPrefix,\n          name: encodingName\n        } = expectedMultibasePrefix(proof.cryptosuite);\n        shouldHaveProofValue({proof, expectedPrefix, encodingName});\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "baGTMFcpCvPQUzhBOOS6b",
              "ctx": null
            },
            {
              "type": "test",
              "title": "if \"proof.previousProof\" field exists, it MUST be a string.",
              "body": "function() {\n        for(const proof of proofs) {\n          if(proof.previousProof) {\n            proof.previousProof.should.be.a('string', 'Expected ' +\n              '\"proof.previousProof\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "baGTMFcpCvPQUzhBOOS6b",
              "ctx": null
            },
            {
              "type": "test",
              "title": "if \"proof.nonce\" field exists, it MUST be a string.",
              "body": "function() {\n        for(const proof of proofs) {\n          if(proof.nonce) {\n            proof.nonce.should.be.a('string', 'Expected \"proof.nonce\" ' +\n              'to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "baGTMFcpCvPQUzhBOOS6b",
              "ctx": null
            },
            {
              "type": "test",
              "title": "Cryptographic suite designers MUST use mandatory proof value properties defined in Section 2.1 Proofs, and MAY define other properties specific to their cryptographic suite.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#add-proof:~:text=MUST%20use%20mandatory%20proof%20value%20properties%20defined';\n      for(const proof of proofs) {\n        shouldBeProof({proof});\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "baGTMFcpCvPQUzhBOOS6b",
              "ctx": null
            },
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      const undefinedType = structuredClone(credential);\n      undefinedType.type.push('InvalidType');\n      await shouldFailIssuance({\n        credential: undefinedType,\n        issuer,\n        reason: 'Expected issuer to error when VC has an undefined type.'\n      });\n      const undefinedTerm = structuredClone(credential);\n      undefinedTerm.credentialSubject.invalidTerm = 'invalidTerm';\n      await shouldFailIssuance({\n        credential: undefinedTerm,\n        issuer,\n        reason: 'Expected issuer to error when VC has an undefined term.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "baGTMFcpCvPQUzhBOOS6b",
              "ctx": null
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n        const hasCryptosuiteName = proofs.some(\n          p => p?.cryptosuite === cryptosuiteName);\n        hasCryptosuiteName.should.equal(\n          true,\n          `Expected at least one proof with cryptosuite ${cryptosuiteName}`);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "baGTMFcpCvPQUzhBOOS6b",
              "ctx": null
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n        const cryptoProp = 'https://w3id.org/security#cryptosuite';\n        const cryptoType = 'https://w3id.org/security#cryptosuiteString';\n        for(const {cryptosuite, type} of proofs) {\n          should.exist(cryptosuite,\n            'Expected property \"proof.cryptosuite\" to exist.');\n          should.exist(type,\n            'Expected property \"proof.type\" to exist.');\n          should.exist(data['@context'],\n            'Expected VC to have property \"@context\".');\n          const expanded = await jsonld.expand({\n            '@context': data['@context'],\n            cryptosuite,\n            type\n          }, {documentLoader});\n          for(const terms of expanded) {\n            const cryptoProperties = terms[cryptoProp];\n            should.exist(cryptoProperties,\n              `Expected property ${cryptoProp} to exist.`);\n            const hasTypeName = cryptoProperties.some(suite =>\n              suite['@type'] === cryptoType &&\n              suite['@value'] == cryptosuiteName);\n            hasTypeName.should.equal(true,\n              `Expected ${cryptoProp} with @value ${cryptosuiteName} & ` +\n              `@type ${cryptoType}`);\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "baGTMFcpCvPQUzhBOOS6b",
              "ctx": null
            },
            {
              "type": "test",
              "title": "When an application is securing a document, if an @context property is not provided in the document or the Data Integrity terms used in the document are not mapped by existing values in the @context property, implementations SHOULD inject or append an @context property with a value of https://w3id.org/security/data-integrity/v2 or one or more contexts with at least the same declarations, such as the Verifiable Credential Data Model v2.0 context (https://www.w3.org/ns/credentials/v2).",
              "body": "async function() {\n      if(!issuer) {\n        throw new Error(`Expected ${vendorName} to have an issuer.`);\n      }\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#context-injection:~:text=if%20an%20%40context%20property%20is%20not%20provided%20in%20the%20document%20or%20the%20Data%20Integrity%20terms%20used%20in%20the%20document%20are%20not%20mapped%20by%20existing%20values%20in%20the%20%40context%20property%2C%20implementations%20SHOULD%20inject%20or%20append';\n      if(optionalTests.contextInjection === false) {\n        this.test.cell.skipMessage = 'Optional Test Skipped';\n        this.skip();\n      }\n      const _credential = structuredClone(credential);\n      const expectedContexts = [\n        'https://w3id.org/security/data-integrity/v2',\n        'https://www.w3.org/ns/credentials/v2'\n      ];\n      // remove the vc's context and expect context injection to occur\n      delete _credential['@context'];\n      let err;\n      let data;\n      try {\n        data = await createInitialVc({issuer, credential: _credential});\n      } catch(e) {\n        err = e;\n      }\n      should.not.exist(\n        err,\n        `Expected issuer ${vendorName} to perform context injection on a ` +\n        `VC with out an \"@context\" property`);\n      should.exist(data, `Expected issuer ${vendorName} to return data.`);\n      data.should.be.an('object', 'Expected response data to be an object.');\n      should.exist(data['@context'],\n        'Expected data to have an injected \"@context\" property.');\n      if(Array.isArray(data['@context'])) {\n        const hasExpectedContext = expectedContexts.some(\n          ctx => data['@context'].includes(ctx));\n        return hasExpectedContext.should.equal(true,\n          `Expected injected context to contain one of ${expectedContexts}`);\n      }\n      data['@context'].should.be.oneOf(expectedContexts);\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "baGTMFcpCvPQUzhBOOS6b",
              "ctx": null
            },
            {
              "type": "test",
              "title": "The date and time the proof was created is OPTIONAL and, if included, MUST be specified as an [XMLSCHEMA11-2] dateTimeStamp string, either in Universal Coordinated Time (UTC), denoted by a Z at the end of the value, or with a time zone offset relative to UTC.",
              "body": "function() {\n      this.test.link = 'https://www.w3.org/TR/vc-data-integrity/#:~:text=The%20date%20and%20time%20the%20proof%20was%20created%20is%20OPTIONAL%20and%2C%20if%20included%2C%20MUST%20be%20specified%20as%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%2C%20either%20in%20Universal%20Coordinated%20Time%20(UTC)%2C%20denoted%20by%20a%20Z%20at%20the%20end%20of%20the%20value%2C%20or%20with%20a%20time%20zone%20offset%20relative%20to%20UTC.';\n      if(optionalTests.dates === false) {\n        this.test.cell.skipMessage = 'Optional Test Skipped';\n        this.skip();\n      }\n      for(const proof of proofs) {\n        if(proof.created) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.created.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "baGTMFcpCvPQUzhBOOS6b",
              "ctx": null
            },
            {
              "type": "test",
              "title": "The expires property is OPTIONAL and, if present, specifies when the proof expires. If present, it MUST be an [XMLSCHEMA11-2] dateTimeStamp string, either in Universal Coordinated Time (UTC), denoted by a Z at the end of the value, or with a time zone offset relative to UTC.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=MUST%20be%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%2C%20either%20in%20Universal%20Coordinated%20Time';\n      if(optionalTests.dates === false) {\n        this.test.cell.skipMessage = 'Optional Test Skipped';\n        this.skip();\n      }\n      for(const proof of proofs) {\n        if(proof.expires) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.expires.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "baGTMFcpCvPQUzhBOOS6b",
              "ctx": null
            },
            {
              "type": "test",
              "title": "The domain property is OPTIONAL. It conveys one or more security domains in which the proof is meant to be used. If specified, the associated value MUST be either a string, or an unordered set of strings. A verifier SHOULD use the value to ensure that the proof was intended to be used in the security domain in which the verifier is operating.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#verify-proof:~:text=The%20domain%20property%20is%20OPTIONAL.%20It%20conveys%20one%20or%20more%20security%20domains%20in%20which%20the%20proof%20is%20meant%20to%20be%20used.%20If%20specified%2C%20the%20associated%20value%20MUST';\n      if(optionalTests.domain === false) {\n        this.test.cell.skipMessage = 'Optional Test Skipped';\n        this.skip();\n      }\n      for(const proof of proofs) {\n        if(proof.domain) {\n          const validType = isStringOrArrayOfStrings(proof.domain);\n          validType.should.equal(true, 'Expected ' +\n            '\"proof.domain\" to be either a string or an unordered ' +\n            'set of strings.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "baGTMFcpCvPQUzhBOOS6b",
              "ctx": null
            },
            {
              "type": "test",
              "title": "(challenge) A string value that SHOULD be included in a proof if a domain is specified.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#verify-proof:~:text=A%20string%20value%20that%20SHOULD%20be%20included%20in%20a%20proof%20if%20a%20domain%20is%20specified.';\n      if(optionalTests.domain === false) {\n        this.test.cell.skipMessage = 'Optional Test Skipped';\n        this.skip();\n      }\n      for(const proof of proofs) {\n        if(proof.challenge) {\n          // domain must be specified\n          should.exist(proof.domain, 'Expected \"proof.domain\" ' +\n            'to be specified.');\n          proof.challenge.should.be.a('string', 'Expected ' +\n            '\"proof.challenge\" to be a string.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "baGTMFcpCvPQUzhBOOS6b",
              "ctx": null
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook",
              "body": "function() {\n      this.currentTest.cell = {\n        columnId,\n        rowId: this.currentTest.title\n      };\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "baGTMFcpCvPQUzhBOOS6b",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js"
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook for \"When expressing a data integrity proof on an object, a proof property MUST be used.\"",
              "body": "async function() {\n      if(!issuer) {\n        throw new Error(`Expected ${vendorName} to have an issuer.`);\n      }\n      if(!credential) {\n        throw new Error(`Expected a credential to be passed in ` +\n          `received ${credential}`);\n      }\n      data = await createInitialVc({issuer, credential});\n      proofs = Array.isArray(data.proof) ? data.proof : [data.proof];\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "baGTMFcpCvPQUzhBOOS6b",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2934,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 183,
              "_error": null,
              "state": "failed",
              "err": {
                "response": {},
                "request": {},
                "options": {
                  "headers": {},
                  "body": "{\"credential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\"],\"id\":\"urn:uuid:ddfcaefe-9813-4a8f-bb68-51f2a21c6ff9\",\"type\":[\"VerifiableCredential\"],\"issuer\":\"did:key:z6MksCeXh9Jwp4ZTEb5Kei7sJpBLpUyS3oaAib8wbtJQqsQu\",\"issuanceDate\":\"2020-03-16T22:37:26.544Z\",\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\"}},\"options\":{\"type\":\"DataIntegrityProof\",\"cryptosuite\":\"eddsa-rdfc-2022\",\"credentialStatus\":{\"type\":\"BitstringStatusListEntry\",\"statusPurpose\":\"suspension\"}}}",
                  "method": "POST",
                  "json": {
                    "credential": {
                      "@context": [
                        "https://www.w3.org/2018/credentials/v1"
                      ],
                      "id": "urn:uuid:ddfcaefe-9813-4a8f-bb68-51f2a21c6ff9",
                      "type": [
                        "VerifiableCredential"
                      ],
                      "issuer": "did:key:z6MksCeXh9Jwp4ZTEb5Kei7sJpBLpUyS3oaAib8wbtJQqsQu",
                      "issuanceDate": "2020-03-16T22:37:26.544Z",
                      "credentialSubject": {
                        "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                      }
                    },
                    "options": {
                      "type": "DataIntegrityProof",
                      "cryptosuite": "eddsa-rdfc-2022",
                      "credentialStatus": {
                        "type": "BitstringStatusListEntry",
                        "statusPurpose": "suspension"
                      }
                    }
                  },
                  "agent": {
                    "_events": {},
                    "_eventsCount": 2,
                    "defaultPort": 443,
                    "protocol": "https:",
                    "options": {
                      "rejectUnauthorized": false,
                      "noDelay": true,
                      "path": null
                    },
                    "requests": {},
                    "sockets": {},
                    "freeSockets": {},
                    "keepAliveMsecs": 1000,
                    "keepAlive": false,
                    "maxSockets": null,
                    "maxFreeSockets": 256,
                    "scheduling": "lifo",
                    "maxTotalSockets": null,
                    "totalSocketCount": 0,
                    "maxCachedSessions": 100,
                    "_sessionCache": {
                      "map": {},
                      "list": []
                    }
                  },
                  "hooks": {
                    "beforeRequest": [],
                    "beforeRetry": [],
                    "afterResponse": [],
                    "beforeError": []
                  },
                  "prefixUrl": "",
                  "retry": {
                    "limit": 2,
                    "methods": [
                      "get",
                      "put",
                      "head",
                      "delete",
                      "options",
                      "trace"
                    ],
                    "statusCodes": [
                      408,
                      413,
                      429,
                      500,
                      502,
                      503,
                      504
                    ],
                    "afterStatusCodes": [
                      413,
                      429,
                      503
                    ],
                    "maxRetryAfter": null,
                    "backoffLimit": null
                  },
                  "throwHttpErrors": true,
                  "timeout": 10000,
                  "signal": {},
                  "duplex": "half"
                },
                "name": "HTTPError",
                "requestUrl": "https://agent.opsec.id/vc/credentials/issue",
                "status": 400,
                "data": {
                  "message": "DID not found: did:key:z6MksCeXh9Jwp4ZTEb5Kei7sJpBLpUyS3oaAib8wbtJQqsQu"
                }
              }
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "4R3sZ40Ry4GvBz6dLxy7S",
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
          "_testId": "urn:uuid:4f46bf58-e35f-4c9c-97af-08efd740d1f6"
        },
        {
          "title": "SpruceID",
          "ctx": null,
          "suites": [
            {
              "title": "Algorithms",
              "ctx": null,
              "suites": [
                {
                  "title": "Add Proof",
                  "ctx": null,
                  "suites": [],
                  "tests": [
                    {
                      "type": "test",
                      "title": "Whenever this algorithm encodes strings, it MUST use UTF-8 encoding.",
                      "body": "function() {\n            this.test.link = 'https://www.w3.org/TR/vc-data-integrity/#:~:text=or%20an%20error.-,Whenever%20this%20algorithm%20encodes%20strings%2C%20it%20MUST%20use%20UTF%2D8%20encoding.,-Let%20proof%20be';\n            for(const proof of proofs) {\n              expect(proof.proofValue.isWellFormed()).to.be.true;\n            }\n          }",
                      "async": 0,
                      "sync": true,
                      "_timeout": 15000,
                      "_slow": 75,
                      "_retries": -1,
                      "timedOut": false,
                      "_currentRetry": 0,
                      "pending": false,
                      "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
                      "parent": "e5M31hAzcCfsIS5YfTJOa",
                      "ctx": null,
                      "_testId": "urn:uuid:e75f39ec-89fb-4576-aef4-2af61988a38e",
                      "cell": {
                        "columnId": "SpruceID",
                        "rowId": "Whenever this algorithm encodes strings, it MUST use UTF-8 encoding."
                      },
                      "_events": {},
                      "_eventsCount": 1,
                      "link": "https://www.w3.org/TR/vc-data-integrity/#:~:text=or%20an%20error.-,Whenever%20this%20algorithm%20encodes%20strings%2C%20it%20MUST%20use%20UTF%2D8%20encoding.,-Let%20proof%20be",
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast"
                    },
                    {
                      "type": "test",
                      "title": "If the algorithm produces an error, the error MUST be propagated and SHOULD convey the error type.",
                      "body": "function() {\n            this.test.link = 'https://www.w3.org/TR/vc-data-integrity/#:~:text=If%20the%20algorithm%20produces%20an%20error%2C%20the%20error%20MUST%20be%20propagated%20and%20SHOULD%20convey%20the%20error%20type.';\n            this.test.cell.skipMessage = 'Pending test.';\n            this.skip();\n          }",
                      "async": 0,
                      "sync": true,
                      "_timeout": 15000,
                      "_slow": 75,
                      "_retries": -1,
                      "timedOut": false,
                      "_currentRetry": 0,
                      "pending": true,
                      "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
                      "parent": "e5M31hAzcCfsIS5YfTJOa",
                      "ctx": null,
                      "_testId": "urn:uuid:3ffd84ae-afbf-44d4-a6f5-8f52af1830d1",
                      "cell": {
                        "columnId": "SpruceID",
                        "rowId": "If the algorithm produces an error, the error MUST be propagated and SHOULD convey the error type.",
                        "skipMessage": "Pending test."
                      },
                      "_events": {},
                      "_eventsCount": 1,
                      "link": "https://www.w3.org/TR/vc-data-integrity/#:~:text=If%20the%20algorithm%20produces%20an%20error%2C%20the%20error%20MUST%20be%20propagated%20and%20SHOULD%20convey%20the%20error%20type.",
                      "duration": 0,
                      "state": "pending"
                    },
                    {
                      "type": "test",
                      "title": "If one or more of the proof.type, proof.verificationMethod, and proof.proofPurpose values is not set, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
                      "body": "function() {\n            this.test.link = 'https://www.w3.org/TR/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20the%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20values%20is%20not%20set%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n            for(const proof of proofs) {\n              expect(proof).to.contain.keys(\n                'type', 'proofPurpose', 'verificationMethod');\n            }\n          }",
                      "async": 0,
                      "sync": true,
                      "_timeout": 15000,
                      "_slow": 75,
                      "_retries": -1,
                      "timedOut": false,
                      "_currentRetry": 0,
                      "pending": false,
                      "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
                      "parent": "e5M31hAzcCfsIS5YfTJOa",
                      "ctx": null,
                      "_testId": "urn:uuid:17939f99-e36d-4c1a-b373-5ba130d44bee",
                      "cell": {
                        "columnId": "SpruceID",
                        "rowId": "If one or more of the proof.type, proof.verificationMethod, and proof.proofPurpose values is not set, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
                      },
                      "_events": {},
                      "_eventsCount": 1,
                      "link": "https://www.w3.org/TR/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20the%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20values%20is%20not%20set%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast"
                    },
                    {
                      "type": "test",
                      "title": "If options has a non-null domain item, it MUST be equal to proof.domain or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
                      "body": "function() {\n            this.test.link = 'https://www.w3.org/TR/vc-data-integrity/#:~:text=If%20options%20has%20a%20non%2Dnull%20domain%20item%2C%20it%20MUST%20be%20equal%20to%20proof.domain%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n            this.test.cell.skipMessage = 'Pending test.';\n            this.skip();\n          }",
                      "async": 0,
                      "sync": true,
                      "_timeout": 15000,
                      "_slow": 75,
                      "_retries": -1,
                      "timedOut": false,
                      "_currentRetry": 0,
                      "pending": true,
                      "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
                      "parent": "e5M31hAzcCfsIS5YfTJOa",
                      "ctx": null,
                      "_testId": "urn:uuid:a17c8459-275f-455c-ac98-5f17b0c9ab68",
                      "cell": {
                        "columnId": "SpruceID",
                        "rowId": "If options has a non-null domain item, it MUST be equal to proof.domain or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
                        "skipMessage": "Pending test."
                      },
                      "_events": {},
                      "_eventsCount": 1,
                      "link": "https://www.w3.org/TR/vc-data-integrity/#:~:text=If%20options%20has%20a%20non%2Dnull%20domain%20item%2C%20it%20MUST%20be%20equal%20to%20proof.domain%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
                      "duration": 0,
                      "state": "pending"
                    },
                    {
                      "type": "test",
                      "title": "If options has a non-null challenge item, it MUST be equal to proof.challenge or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
                      "body": "function() {\n            this.test.link = 'https://www.w3.org/TR/vc-data-integrity/#:~:text=If%20options%20has%20a%20non%2Dnull%20challenge%20item%2C%20it%20MUST%20be%20equal%20to%20proof.challenge%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n            this.test.cell.skipMessage = 'Pending test.';\n            this.skip();\n          }",
                      "async": 0,
                      "sync": true,
                      "_timeout": 15000,
                      "_slow": 75,
                      "_retries": -1,
                      "timedOut": false,
                      "_currentRetry": 0,
                      "pending": true,
                      "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
                      "parent": "e5M31hAzcCfsIS5YfTJOa",
                      "ctx": null,
                      "_testId": "urn:uuid:5b54d55c-2cd9-4bbf-9148-ab1549870b29",
                      "cell": {
                        "columnId": "SpruceID",
                        "rowId": "If options has a non-null challenge item, it MUST be equal to proof.challenge or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
                        "skipMessage": "Pending test."
                      },
                      "_events": {},
                      "_eventsCount": 1,
                      "link": "https://www.w3.org/TR/vc-data-integrity/#:~:text=If%20options%20has%20a%20non%2Dnull%20challenge%20item%2C%20it%20MUST%20be%20equal%20to%20proof.challenge%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
                      "duration": 0,
                      "state": "pending"
                    }
                  ],
                  "root": false,
                  "pending": false,
                  "_retries": -1,
                  "_beforeEach": [],
                  "_beforeAll": [],
                  "_afterEach": [],
                  "_afterAll": [],
                  "_timeout": 15000,
                  "_slow": 75,
                  "_bail": false,
                  "_onlyTests": [],
                  "_onlySuites": [],
                  "delayed": false,
                  "parent": "tZvxl8Huv9SInVsMc3sm3",
                  "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
                  "_testId": "urn:uuid:90fefe31-baf1-4172-a195-164269be99d9"
                },
                {
                  "title": "Add Proof Set/Chain",
                  "ctx": null,
                  "suites": [],
                  "tests": [
                    {
                      "type": "test",
                      "title": "Whenever this algorithm encodes strings, it MUST use UTF-8 encoding.",
                      "body": "function() {\n            this.test.link = 'https://www.w3.org/TR/vc-data-integrity/#:~:text=(map).-,Whenever%20this%20algorithm%20encodes%20strings%2C%20it%20MUST%20use%20UTF%2D8%20encoding.,-Let%20proof%20be';\n            for(const proof of proofs) {\n              expect(proof.proofValue.isWellFormed()).to.be.true;\n            }\n          }",
                      "async": 0,
                      "sync": true,
                      "_timeout": 15000,
                      "_slow": 75,
                      "_retries": -1,
                      "timedOut": false,
                      "_currentRetry": 0,
                      "pending": false,
                      "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
                      "parent": "qKcpNdZC4o_9peKwcwFx5",
                      "ctx": null,
                      "_testId": "urn:uuid:bd505b25-e93e-4849-b547-f312576c88e4",
                      "cell": {
                        "columnId": "SpruceID",
                        "rowId": "Whenever this algorithm encodes strings, it MUST use UTF-8 encoding."
                      },
                      "_events": {},
                      "_eventsCount": 1,
                      "link": "https://www.w3.org/TR/vc-data-integrity/#:~:text=(map).-,Whenever%20this%20algorithm%20encodes%20strings%2C%20it%20MUST%20use%20UTF%2D8%20encoding.,-Let%20proof%20be",
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast"
                    },
                    {
                      "type": "test",
                      "title": "If a proof with id equal to previousProof does not exist in allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
                      "body": "function() {\n            this.test.link = 'https://www.w3.org/TR/vc-data-integrity/#:~:text=If%20a%20proof%20with%20id%20equal%20to%20previousProofdoes%20not%20exist%20in%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n            for(const proof of proofs) {\n              if('previousProof' in proof) {\n                if(typeof proof.previousProof === 'string') {\n                  proofs.some(\n                    otherProof => otherProof.id == proof.previousProof).\n                    should.equal(true,\n                      'Expected previousProof ' +\n                      `${proof.previousProof} ` +\n                      'to be the id of another included proof.'\n                    );\n                } if(Array.isArray(proof.previousProof)) {\n                  for(const previousProof in proof.previousProof) {\n                    proofs.some(\n                      otherProof => otherProof.id == previousProof).\n                      should.equal(true,\n                        'Expected previousProof ' +\n                        `${proof.previousProof} ` +\n                        'to be the id of another included proof.'\n                      );\n                  }\n                }\n              }\n            }\n          }",
                      "async": 0,
                      "sync": true,
                      "_timeout": 15000,
                      "_slow": 75,
                      "_retries": -1,
                      "timedOut": false,
                      "_currentRetry": 0,
                      "pending": false,
                      "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
                      "parent": "qKcpNdZC4o_9peKwcwFx5",
                      "ctx": null,
                      "_testId": "urn:uuid:69f530a0-af29-417a-97d9-6200ff071e6c",
                      "cell": {
                        "columnId": "SpruceID",
                        "rowId": "If a proof with id equal to previousProof does not exist in allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
                      },
                      "_events": {},
                      "_eventsCount": 1,
                      "link": "https://www.w3.org/TR/vc-data-integrity/#:~:text=If%20a%20proof%20with%20id%20equal%20to%20previousProofdoes%20not%20exist%20in%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast"
                    },
                    {
                      "type": "test",
                      "title": "If any element of previousProof array has an id attribute that does not match the id attribute of any element of allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
                      "body": "function() {\n            this.test.link = 'https://www.w3.org/TR/vc-data-integrity/#:~:text=If%20any%20element%20of%20previousProof%20array%20has%20an%20id%20attribute%20that%20does%20not%20match%20the%20id%20attribute%20of%20any%20element%20of%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n            const previousProofs = [];\n            for(const proof of proofs) {\n              if('previousProof' in proof) {\n                if(typeof proof.previousProof === 'string') {\n                  previousProofs.push(proof.previousProof);\n                } if(Array.isArray(proof.previousProof)) {\n                  previousProofs.concat(proof.previousProof);\n                }\n              }\n            }\n            for(const previousProof of previousProofs) {\n              proofs.some(\n                otherProof => otherProof.id == previousProof).should.equal(\n                true,\n                'Expected all previousProof values to be the id of ' +\n                'another included proof.'\n              );\n            }\n          }",
                      "async": 0,
                      "sync": true,
                      "_timeout": 15000,
                      "_slow": 75,
                      "_retries": -1,
                      "timedOut": false,
                      "_currentRetry": 0,
                      "pending": false,
                      "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
                      "parent": "qKcpNdZC4o_9peKwcwFx5",
                      "ctx": null,
                      "_testId": "urn:uuid:b4e7155a-48ca-4b17-ab75-5894180c8c77",
                      "cell": {
                        "columnId": "SpruceID",
                        "rowId": "If any element of previousProof array has an id attribute that does not match the id attribute of any element of allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
                      },
                      "_events": {},
                      "_eventsCount": 1,
                      "link": "https://www.w3.org/TR/vc-data-integrity/#:~:text=If%20any%20element%20of%20previousProof%20array%20has%20an%20id%20attribute%20that%20does%20not%20match%20the%20id%20attribute%20of%20any%20element%20of%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast"
                    }
                  ],
                  "root": false,
                  "pending": false,
                  "_retries": -1,
                  "_beforeEach": [],
                  "_beforeAll": [],
                  "_afterEach": [],
                  "_afterAll": [],
                  "_timeout": 15000,
                  "_slow": 75,
                  "_bail": false,
                  "_onlyTests": [],
                  "_onlySuites": [],
                  "delayed": false,
                  "parent": "tZvxl8Huv9SInVsMc3sm3",
                  "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
                  "_testId": "urn:uuid:6a2ad2b9-179c-4c91-b7c0-b2400dc51dd5"
                }
              ],
              "tests": [],
              "root": false,
              "pending": false,
              "_retries": -1,
              "_beforeEach": [],
              "_beforeAll": [],
              "_afterEach": [],
              "_afterAll": [],
              "_timeout": 15000,
              "_slow": 75,
              "_bail": false,
              "_onlyTests": [],
              "_onlySuites": [],
              "delayed": false,
              "parent": "iA97ETyVVLCXoJl9VcrPz",
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "_testId": "urn:uuid:13a0e786-1f09-4565-96e9-fcc092499c6a"
            }
          ],
          "tests": [
            {
              "type": "test",
              "title": "When expressing a data integrity proof on an object, a proof property MUST be used.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=When%20expressing%20a%20data%20integrity%20proof%20on%20an%20object%2C%20a%20proof%20property%20MUST%20be%20used';\n      shouldHaveProof({vc: data});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "iA97ETyVVLCXoJl9VcrPz",
              "ctx": null,
              "_testId": "urn:uuid:c5575420-5a64-4ba8-aae9-37b3527bd884",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "When expressing a data integrity proof on an object, a proof property MUST be used."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=When%20expressing%20a%20data%20integrity%20proof%20on%20an%20object%2C%20a%20proof%20property%20MUST%20be%20used",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If present (proof), its value MUST be either a single object, or an unordered set of objects",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=If%20present%2C%20its%20value%20MUST%20be%20either%20a%20single%20object%2C%20or%20an%20unordered%20set%20of%20objects';\n      shouldHaveProof({vc: data});\n      const {proof} = data;\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "iA97ETyVVLCXoJl9VcrPz",
              "ctx": null,
              "_testId": "urn:uuid:efd0ff60-fe44-4302-a4eb-6c5101fe42f4",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If present (proof), its value MUST be either a single object, or an unordered set of objects"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=If%20present%2C%20its%20value%20MUST%20be%20either%20a%20single%20object%2C%20or%20an%20unordered%20set%20of%20objects",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.id\") An optional identifier for the proof, which MUST be a URL.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=An%20optional%20identifier%20for%20the%20proof%2C%20which%20MUST%20be%20a%20URL';\n      for(const proof of proofs) {\n        if(proof.id) {\n          shouldBeUrl({url: proof.id, prop: 'proof.id'});\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "iA97ETyVVLCXoJl9VcrPz",
              "ctx": null,
              "_testId": "urn:uuid:d017eed9-bc73-4e25-96bb-daee5ff837eb",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "(\"proof.id\") An optional identifier for the proof, which MUST be a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=An%20optional%20identifier%20for%20the%20proof%2C%20which%20MUST%20be%20a%20URL",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The specific proof type used for the cryptographic proof MUST be specified as a string that maps to a URL.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20specific%20proof%20type%20used%20for%20the%20cryptographic%20proof%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL';\n      const prop = '@type';\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n        const expanded = await jsonld.expand({\n          '@context': data['@context'],\n          type: proof.type\n        }, {documentLoader});\n        for(const term of expanded) {\n          const types = term[prop];\n          should.exist(types, 'Expected @type to exist.');\n          types.every(url => shouldBeUrl({url, prop}));\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "iA97ETyVVLCXoJl9VcrPz",
              "ctx": null,
              "_testId": "urn:uuid:e3fd64b7-3afc-442f-b308-1581d8290388",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The specific proof type used for the cryptographic proof MUST be specified as a string that maps to a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20specific%20proof%20type%20used%20for%20the%20cryptographic%20proof%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3388,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The type property MUST contain the string DataIntegrityProof.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-data-integrity/#contexts-and-vocabularies:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.';\n          for(const proof of proofs) {\n            proof.should.have.property('type');\n            proof.type.should.be.a(\n              'string',\n              'Expected \"proof.type\" to be a string.'\n            );\n            const hasExpectedType = expectedProofTypes.includes(proof.type);\n            hasExpectedType.should.equal(\n              true,\n              `Expected \"proof.type\" to be one of ` +\n              `${expectedProofTypes} Received: ${proof.type}`);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "iA97ETyVVLCXoJl9VcrPz",
              "ctx": null,
              "_testId": "urn:uuid:c9470804-c09e-43dd-9126-a8b384d0b058",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The type property MUST contain the string DataIntegrityProof."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#contexts-and-vocabularies:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3389,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
              "body": "function() {\n          this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.';\n          for(const proof of proofs) {\n            should.exist(proof, 'Expected proof to exist.');\n            if(proof.type === 'DataIntegrityProof') {\n              should.exist(proof.cryptosuite,\n                'Expected proof to have property \"cryptosuite\".');\n            }\n            const {\n              prefix: expectedPrefix,\n              name: encodingName\n            } = expectedMultibasePrefix(proof.cryptosuite);\n            shouldHaveProofValue({proof, expectedPrefix, encodingName});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "iA97ETyVVLCXoJl9VcrPz",
              "ctx": null,
              "_testId": "urn:uuid:3715ac31-2bf0-4e58-b5e5-f2513761ecc0",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The proofValue property MUST be used, as specified in 2.1 Proofs."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified. If specified, its value MUST be a string.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.';\n      for(const proof of proofs) {\n        if(proof.type && proof.type === 'DataIntegrityProof') {\n          should.exist(\n            proof.cryptosuite,\n            'If the proof type is DataIntegrityProof, cryptosuite MUST ' +\n            'be specified');\n          proof.cryptosuite.should.be.a(\n            'string',\n            'cryptosuite value MUST be a string.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "iA97ETyVVLCXoJl9VcrPz",
              "ctx": null,
              "_testId": "urn:uuid:3cf54c35-b294-4c5e-985b-24574a6bd60d",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified. If specified, its value MUST be a string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "A verification method is the means and information needed to verify the proof. If included, the value MUST be a string that maps to a [URL]",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=A%20verification%20method%20is%20the%20means%20and%20information%20needed%20to%20verify%20the%20proof.%20If%20included%2C%20the%20value%20MUST%20be%20a%20string%20that%20maps%20to%20a%20%5BURL%5D.';\n      for(const proof of proofs) {\n        await shouldMapToUrl({\n          doc: {\n            '@context': data['@context'],\n            ...proof\n          },\n          term: 'https://w3id.org/security#verificationMethod',\n          prop: '@id',\n          documentLoader\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "iA97ETyVVLCXoJl9VcrPz",
              "ctx": null,
              "_testId": "urn:uuid:63763701-92ae-4379-8843-03d2e15e84fe",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "A verification method is the means and information needed to verify the proof. If included, the value MUST be a string that maps to a [URL]"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=A%20verification%20method%20is%20the%20means%20and%20information%20needed%20to%20verify%20the%20proof.%20If%20included%2C%20the%20value%20MUST%20be%20a%20string%20that%20maps%20to%20a%20%5BURL%5D.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3390,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The reason the proof was created (\"proof.proofPurpose\") MUST be specified as a string that maps to a URL",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20reason%20the%20proof%20was%20created%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL';\n      for(const proof of proofs) {\n        proof.should.have.property('proofPurpose');\n        proof.proofPurpose.should.be.a('string');\n        await shouldMapToUrl({\n          doc: {\n            '@context': data['@context'],\n            ...proof\n          },\n          term: 'https://w3id.org/security#proofPurpose',\n          prop: '@id',\n          documentLoader\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "iA97ETyVVLCXoJl9VcrPz",
              "ctx": null,
              "_testId": "urn:uuid:7e834fce-8f73-47a2-a3d1-c97c186e16d9",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The reason the proof was created (\"proof.proofPurpose\") MUST be specified as a string that maps to a URL"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20reason%20the%20proof%20was%20created%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3391,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof';\n      for(const proof of proofs) {\n        should.exist(proof, 'Expected proof to exist.');\n        const {\n          prefix: expectedPrefix,\n          name: encodingName\n        } = expectedMultibasePrefix(proof.cryptosuite);\n        shouldHaveProofValue({proof, expectedPrefix, encodingName});\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "iA97ETyVVLCXoJl9VcrPz",
              "ctx": null,
              "_testId": "urn:uuid:1d531a88-836f-463d-82a0-49327debb684",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.previousProof\" field exists, it MUST be a string.",
              "body": "function() {\n        for(const proof of proofs) {\n          if(proof.previousProof) {\n            proof.previousProof.should.be.a('string', 'Expected ' +\n              '\"proof.previousProof\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "iA97ETyVVLCXoJl9VcrPz",
              "ctx": null,
              "_testId": "urn:uuid:942833bb-cadf-4d94-a91b-8012093e195a",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "if \"proof.previousProof\" field exists, it MUST be a string."
              },
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.nonce\" field exists, it MUST be a string.",
              "body": "function() {\n        for(const proof of proofs) {\n          if(proof.nonce) {\n            proof.nonce.should.be.a('string', 'Expected \"proof.nonce\" ' +\n              'to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "iA97ETyVVLCXoJl9VcrPz",
              "ctx": null,
              "_testId": "urn:uuid:12bb812c-8266-46f4-b5ab-9959ae7e9640",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "if \"proof.nonce\" field exists, it MUST be a string."
              },
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Cryptographic suite designers MUST use mandatory proof value properties defined in Section 2.1 Proofs, and MAY define other properties specific to their cryptographic suite.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#add-proof:~:text=MUST%20use%20mandatory%20proof%20value%20properties%20defined';\n      for(const proof of proofs) {\n        shouldBeProof({proof});\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "iA97ETyVVLCXoJl9VcrPz",
              "ctx": null,
              "_testId": "urn:uuid:8ac57293-463b-4638-909d-697722c2c21c",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "Cryptographic suite designers MUST use mandatory proof value properties defined in Section 2.1 Proofs, and MAY define other properties specific to their cryptographic suite."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#add-proof:~:text=MUST%20use%20mandatory%20proof%20value%20properties%20defined",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3393,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      const undefinedType = structuredClone(credential);\n      undefinedType.type.push('InvalidType');\n      await shouldFailIssuance({\n        credential: undefinedType,\n        issuer,\n        reason: 'Expected issuer to error when VC has an undefined type.'\n      });\n      const undefinedTerm = structuredClone(credential);\n      undefinedTerm.credentialSubject.invalidTerm = 'invalidTerm';\n      await shouldFailIssuance({\n        credential: undefinedTerm,\n        issuer,\n        reason: 'Expected issuer to error when VC has an undefined term.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "iA97ETyVVLCXoJl9VcrPz",
              "ctx": null,
              "_testId": "urn:uuid:f5b01243-f371-4731-bf76-57dcd1871851",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3393,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 84,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n        const hasCryptosuiteName = proofs.some(\n          p => p?.cryptosuite === cryptosuiteName);\n        hasCryptosuiteName.should.equal(\n          true,\n          `Expected at least one proof with cryptosuite ${cryptosuiteName}`);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "iA97ETyVVLCXoJl9VcrPz",
              "ctx": null,
              "_testId": "urn:uuid:ec2e2e5e-212f-43dd-bc49-9a4bbd837bf5",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3477,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n        const cryptoProp = 'https://w3id.org/security#cryptosuite';\n        const cryptoType = 'https://w3id.org/security#cryptosuiteString';\n        for(const {cryptosuite, type} of proofs) {\n          should.exist(cryptosuite,\n            'Expected property \"proof.cryptosuite\" to exist.');\n          should.exist(type,\n            'Expected property \"proof.type\" to exist.');\n          should.exist(data['@context'],\n            'Expected VC to have property \"@context\".');\n          const expanded = await jsonld.expand({\n            '@context': data['@context'],\n            cryptosuite,\n            type\n          }, {documentLoader});\n          for(const terms of expanded) {\n            const cryptoProperties = terms[cryptoProp];\n            should.exist(cryptoProperties,\n              `Expected property ${cryptoProp} to exist.`);\n            const hasTypeName = cryptoProperties.some(suite =>\n              suite['@type'] === cryptoType &&\n              suite['@value'] == cryptosuiteName);\n            hasTypeName.should.equal(true,\n              `Expected ${cryptoProp} with @value ${cryptosuiteName} & ` +\n              `@type ${cryptoType}`);\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "iA97ETyVVLCXoJl9VcrPz",
              "ctx": null,
              "_testId": "urn:uuid:b936c445-ce47-42ff-99d2-295ae9ad0b09",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3477,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "When an application is securing a document, if an @context property is not provided in the document or the Data Integrity terms used in the document are not mapped by existing values in the @context property, implementations SHOULD inject or append an @context property with a value of https://w3id.org/security/data-integrity/v2 or one or more contexts with at least the same declarations, such as the Verifiable Credential Data Model v2.0 context (https://www.w3.org/ns/credentials/v2).",
              "body": "async function() {\n      if(!issuer) {\n        throw new Error(`Expected ${vendorName} to have an issuer.`);\n      }\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#context-injection:~:text=if%20an%20%40context%20property%20is%20not%20provided%20in%20the%20document%20or%20the%20Data%20Integrity%20terms%20used%20in%20the%20document%20are%20not%20mapped%20by%20existing%20values%20in%20the%20%40context%20property%2C%20implementations%20SHOULD%20inject%20or%20append';\n      if(optionalTests.contextInjection === false) {\n        this.test.cell.skipMessage = 'Optional Test Skipped';\n        this.skip();\n      }\n      const _credential = structuredClone(credential);\n      const expectedContexts = [\n        'https://w3id.org/security/data-integrity/v2',\n        'https://www.w3.org/ns/credentials/v2'\n      ];\n      // remove the vc's context and expect context injection to occur\n      delete _credential['@context'];\n      let err;\n      let data;\n      try {\n        data = await createInitialVc({issuer, credential: _credential});\n      } catch(e) {\n        err = e;\n      }\n      should.not.exist(\n        err,\n        `Expected issuer ${vendorName} to perform context injection on a ` +\n        `VC with out an \"@context\" property`);\n      should.exist(data, `Expected issuer ${vendorName} to return data.`);\n      data.should.be.an('object', 'Expected response data to be an object.');\n      should.exist(data['@context'],\n        'Expected data to have an injected \"@context\" property.');\n      if(Array.isArray(data['@context'])) {\n        const hasExpectedContext = expectedContexts.some(\n          ctx => data['@context'].includes(ctx));\n        return hasExpectedContext.should.equal(true,\n          `Expected injected context to contain one of ${expectedContexts}`);\n      }\n      data['@context'].should.be.oneOf(expectedContexts);\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "iA97ETyVVLCXoJl9VcrPz",
              "ctx": null,
              "_testId": "urn:uuid:d9ae6400-00a5-4ae7-9dc7-3a90f7621f75",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "When an application is securing a document, if an @context property is not provided in the document or the Data Integrity terms used in the document are not mapped by existing values in the @context property, implementations SHOULD inject or append an @context property with a value of https://w3id.org/security/data-integrity/v2 or one or more contexts with at least the same declarations, such as the Verifiable Credential Data Model v2.0 context (https://www.w3.org/ns/credentials/v2)."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#context-injection:~:text=if%20an%20%40context%20property%20is%20not%20provided%20in%20the%20document%20or%20the%20Data%20Integrity%20terms%20used%20in%20the%20document%20are%20not%20mapped%20by%20existing%20values%20in%20the%20%40context%20property%2C%20implementations%20SHOULD%20inject%20or%20append",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3478,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 20,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected issuer SpruceID to perform context injection on a VC with out an \"@context\" property: expected HTTPError: Request failed with status cod… { …(5) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"credential\":{\"id\":\"urn:uuid:11db28af-c170-4f37-8792-17fa73e581db\",\"type\":[\"VerifiableCredential\"],\"issuer\":\"did:key:z6MkgYAGxLBSXa6Ygk1PnUbK2F7zya8juE9nfsZhrvY7c9GD\",\"issuanceDate\":\"2020-03-16T22:37:26.544Z\",\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\"}},\"options\":{\"type\":\"DataIntegrityProof\",\"cryptosuite\":\"eddsa-rdfc-2022\"}}",
                    "method": "POST",
                    "json": {
                      "credential": {
                        "id": "urn:uuid:11db28af-c170-4f37-8792-17fa73e581db",
                        "type": [
                          "VerifiableCredential"
                        ],
                        "issuer": "did:key:z6MkgYAGxLBSXa6Ygk1PnUbK2F7zya8juE9nfsZhrvY7c9GD",
                        "issuanceDate": "2020-03-16T22:37:26.544Z",
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                        }
                      },
                      "options": {
                        "type": "DataIntegrityProof",
                        "cryptosuite": "eddsa-rdfc-2022"
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc.spruceid.xyz/credentials/issue",
                  "status": 400
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected issuer SpruceID to perform context injection on a VC with out an \"@context\" property: expected HTTPError: Request failed with status cod… { …(5) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/suites/create.js:442:18)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "The date and time the proof was created is OPTIONAL and, if included, MUST be specified as an [XMLSCHEMA11-2] dateTimeStamp string, either in Universal Coordinated Time (UTC), denoted by a Z at the end of the value, or with a time zone offset relative to UTC.",
              "body": "function() {\n      this.test.link = 'https://www.w3.org/TR/vc-data-integrity/#:~:text=The%20date%20and%20time%20the%20proof%20was%20created%20is%20OPTIONAL%20and%2C%20if%20included%2C%20MUST%20be%20specified%20as%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%2C%20either%20in%20Universal%20Coordinated%20Time%20(UTC)%2C%20denoted%20by%20a%20Z%20at%20the%20end%20of%20the%20value%2C%20or%20with%20a%20time%20zone%20offset%20relative%20to%20UTC.';\n      if(optionalTests.dates === false) {\n        this.test.cell.skipMessage = 'Optional Test Skipped';\n        this.skip();\n      }\n      for(const proof of proofs) {\n        if(proof.created) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.created.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "iA97ETyVVLCXoJl9VcrPz",
              "ctx": null,
              "_testId": "urn:uuid:09b9c343-6cab-4cf8-9ca9-7546a3c9496d",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The date and time the proof was created is OPTIONAL and, if included, MUST be specified as an [XMLSCHEMA11-2] dateTimeStamp string, either in Universal Coordinated Time (UTC), denoted by a Z at the end of the value, or with a time zone offset relative to UTC."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://www.w3.org/TR/vc-data-integrity/#:~:text=The%20date%20and%20time%20the%20proof%20was%20created%20is%20OPTIONAL%20and%2C%20if%20included%2C%20MUST%20be%20specified%20as%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%2C%20either%20in%20Universal%20Coordinated%20Time%20(UTC)%2C%20denoted%20by%20a%20Z%20at%20the%20end%20of%20the%20value%2C%20or%20with%20a%20time%20zone%20offset%20relative%20to%20UTC.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The expires property is OPTIONAL and, if present, specifies when the proof expires. If present, it MUST be an [XMLSCHEMA11-2] dateTimeStamp string, either in Universal Coordinated Time (UTC), denoted by a Z at the end of the value, or with a time zone offset relative to UTC.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=MUST%20be%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%2C%20either%20in%20Universal%20Coordinated%20Time';\n      if(optionalTests.dates === false) {\n        this.test.cell.skipMessage = 'Optional Test Skipped';\n        this.skip();\n      }\n      for(const proof of proofs) {\n        if(proof.expires) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.expires.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "iA97ETyVVLCXoJl9VcrPz",
              "ctx": null,
              "_testId": "urn:uuid:0001643b-9622-4e69-b6b2-937099abb267",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The expires property is OPTIONAL and, if present, specifies when the proof expires. If present, it MUST be an [XMLSCHEMA11-2] dateTimeStamp string, either in Universal Coordinated Time (UTC), denoted by a Z at the end of the value, or with a time zone offset relative to UTC."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=MUST%20be%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%2C%20either%20in%20Universal%20Coordinated%20Time",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The domain property is OPTIONAL. It conveys one or more security domains in which the proof is meant to be used. If specified, the associated value MUST be either a string, or an unordered set of strings. A verifier SHOULD use the value to ensure that the proof was intended to be used in the security domain in which the verifier is operating.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#verify-proof:~:text=The%20domain%20property%20is%20OPTIONAL.%20It%20conveys%20one%20or%20more%20security%20domains%20in%20which%20the%20proof%20is%20meant%20to%20be%20used.%20If%20specified%2C%20the%20associated%20value%20MUST';\n      if(optionalTests.domain === false) {\n        this.test.cell.skipMessage = 'Optional Test Skipped';\n        this.skip();\n      }\n      for(const proof of proofs) {\n        if(proof.domain) {\n          const validType = isStringOrArrayOfStrings(proof.domain);\n          validType.should.equal(true, 'Expected ' +\n            '\"proof.domain\" to be either a string or an unordered ' +\n            'set of strings.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "iA97ETyVVLCXoJl9VcrPz",
              "ctx": null,
              "_testId": "urn:uuid:a73a8d11-52ad-4dba-997e-7f7247496376",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The domain property is OPTIONAL. It conveys one or more security domains in which the proof is meant to be used. If specified, the associated value MUST be either a string, or an unordered set of strings. A verifier SHOULD use the value to ensure that the proof was intended to be used in the security domain in which the verifier is operating."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#verify-proof:~:text=The%20domain%20property%20is%20OPTIONAL.%20It%20conveys%20one%20or%20more%20security%20domains%20in%20which%20the%20proof%20is%20meant%20to%20be%20used.%20If%20specified%2C%20the%20associated%20value%20MUST",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(challenge) A string value that SHOULD be included in a proof if a domain is specified.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#verify-proof:~:text=A%20string%20value%20that%20SHOULD%20be%20included%20in%20a%20proof%20if%20a%20domain%20is%20specified.';\n      if(optionalTests.domain === false) {\n        this.test.cell.skipMessage = 'Optional Test Skipped';\n        this.skip();\n      }\n      for(const proof of proofs) {\n        if(proof.challenge) {\n          // domain must be specified\n          should.exist(proof.domain, 'Expected \"proof.domain\" ' +\n            'to be specified.');\n          proof.challenge.should.be.a('string', 'Expected ' +\n            '\"proof.challenge\" to be a string.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "iA97ETyVVLCXoJl9VcrPz",
              "ctx": null,
              "_testId": "urn:uuid:65e944e4-9d53-43ae-996e-42d07abc4fa9",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "(challenge) A string value that SHOULD be included in a proof if a domain is specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#verify-proof:~:text=A%20string%20value%20that%20SHOULD%20be%20included%20in%20a%20proof%20if%20a%20domain%20is%20specified.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"SpruceID\"",
              "body": "function() {\n      this.currentTest.cell = {\n        columnId,\n        rowId: this.currentTest.title\n      };\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "iA97ETyVVLCXoJl9VcrPz",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"SpruceID\"",
              "body": "async function() {\n      if(!issuer) {\n        throw new Error(`Expected ${vendorName} to have an issuer.`);\n      }\n      if(!credential) {\n        throw new Error(`Expected a credential to be passed in ` +\n          `received ${credential}`);\n      }\n      data = await createInitialVc({issuer, credential});\n      proofs = Array.isArray(data.proof) ? data.proof : [data.proof];\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "iA97ETyVVLCXoJl9VcrPz",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3118,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 269,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "4R3sZ40Ry4GvBz6dLxy7S",
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
          "_testId": "urn:uuid:2513491a-c011-4f69-9b78-f27af4ecd74d"
        },
        {
          "title": "Trinsic",
          "ctx": null,
          "suites": [
            {
              "title": "Algorithms",
              "ctx": null,
              "suites": [
                {
                  "title": "Add Proof",
                  "ctx": null,
                  "suites": [],
                  "tests": [
                    {
                      "type": "test",
                      "title": "Whenever this algorithm encodes strings, it MUST use UTF-8 encoding.",
                      "body": "function() {\n            this.test.link = 'https://www.w3.org/TR/vc-data-integrity/#:~:text=or%20an%20error.-,Whenever%20this%20algorithm%20encodes%20strings%2C%20it%20MUST%20use%20UTF%2D8%20encoding.,-Let%20proof%20be';\n            for(const proof of proofs) {\n              expect(proof.proofValue.isWellFormed()).to.be.true;\n            }\n          }",
                      "async": 0,
                      "sync": true,
                      "_timeout": 15000,
                      "_slow": 75,
                      "_retries": -1,
                      "timedOut": false,
                      "_currentRetry": 0,
                      "pending": false,
                      "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
                      "parent": "cKgXOx05nSv-dViwfzyp4",
                      "ctx": null,
                      "_testId": "urn:uuid:a6d8170f-d5da-4bdd-be84-7f9060bb723e",
                      "cell": {
                        "columnId": "Trinsic",
                        "rowId": "Whenever this algorithm encodes strings, it MUST use UTF-8 encoding."
                      },
                      "_events": {},
                      "_eventsCount": 1,
                      "link": "https://www.w3.org/TR/vc-data-integrity/#:~:text=or%20an%20error.-,Whenever%20this%20algorithm%20encodes%20strings%2C%20it%20MUST%20use%20UTF%2D8%20encoding.,-Let%20proof%20be",
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast"
                    },
                    {
                      "type": "test",
                      "title": "If the algorithm produces an error, the error MUST be propagated and SHOULD convey the error type.",
                      "body": "function() {\n            this.test.link = 'https://www.w3.org/TR/vc-data-integrity/#:~:text=If%20the%20algorithm%20produces%20an%20error%2C%20the%20error%20MUST%20be%20propagated%20and%20SHOULD%20convey%20the%20error%20type.';\n            this.test.cell.skipMessage = 'Pending test.';\n            this.skip();\n          }",
                      "async": 0,
                      "sync": true,
                      "_timeout": 15000,
                      "_slow": 75,
                      "_retries": -1,
                      "timedOut": false,
                      "_currentRetry": 0,
                      "pending": true,
                      "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
                      "parent": "cKgXOx05nSv-dViwfzyp4",
                      "ctx": null,
                      "_testId": "urn:uuid:09433ea0-95d3-48e0-af68-d64cb1fa1405",
                      "cell": {
                        "columnId": "Trinsic",
                        "rowId": "If the algorithm produces an error, the error MUST be propagated and SHOULD convey the error type.",
                        "skipMessage": "Pending test."
                      },
                      "_events": {},
                      "_eventsCount": 1,
                      "link": "https://www.w3.org/TR/vc-data-integrity/#:~:text=If%20the%20algorithm%20produces%20an%20error%2C%20the%20error%20MUST%20be%20propagated%20and%20SHOULD%20convey%20the%20error%20type.",
                      "duration": 0,
                      "state": "pending"
                    },
                    {
                      "type": "test",
                      "title": "If one or more of the proof.type, proof.verificationMethod, and proof.proofPurpose values is not set, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
                      "body": "function() {\n            this.test.link = 'https://www.w3.org/TR/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20the%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20values%20is%20not%20set%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n            for(const proof of proofs) {\n              expect(proof).to.contain.keys(\n                'type', 'proofPurpose', 'verificationMethod');\n            }\n          }",
                      "async": 0,
                      "sync": true,
                      "_timeout": 15000,
                      "_slow": 75,
                      "_retries": -1,
                      "timedOut": false,
                      "_currentRetry": 0,
                      "pending": false,
                      "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
                      "parent": "cKgXOx05nSv-dViwfzyp4",
                      "ctx": null,
                      "_testId": "urn:uuid:4ed7a908-a108-4b5b-ab02-0a04649ac256",
                      "cell": {
                        "columnId": "Trinsic",
                        "rowId": "If one or more of the proof.type, proof.verificationMethod, and proof.proofPurpose values is not set, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
                      },
                      "_events": {},
                      "_eventsCount": 1,
                      "link": "https://www.w3.org/TR/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20the%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20values%20is%20not%20set%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast"
                    },
                    {
                      "type": "test",
                      "title": "If options has a non-null domain item, it MUST be equal to proof.domain or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
                      "body": "function() {\n            this.test.link = 'https://www.w3.org/TR/vc-data-integrity/#:~:text=If%20options%20has%20a%20non%2Dnull%20domain%20item%2C%20it%20MUST%20be%20equal%20to%20proof.domain%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n            this.test.cell.skipMessage = 'Pending test.';\n            this.skip();\n          }",
                      "async": 0,
                      "sync": true,
                      "_timeout": 15000,
                      "_slow": 75,
                      "_retries": -1,
                      "timedOut": false,
                      "_currentRetry": 0,
                      "pending": true,
                      "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
                      "parent": "cKgXOx05nSv-dViwfzyp4",
                      "ctx": null,
                      "_testId": "urn:uuid:e5145717-4476-44c9-9a50-e98d05749d58",
                      "cell": {
                        "columnId": "Trinsic",
                        "rowId": "If options has a non-null domain item, it MUST be equal to proof.domain or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
                        "skipMessage": "Pending test."
                      },
                      "_events": {},
                      "_eventsCount": 1,
                      "link": "https://www.w3.org/TR/vc-data-integrity/#:~:text=If%20options%20has%20a%20non%2Dnull%20domain%20item%2C%20it%20MUST%20be%20equal%20to%20proof.domain%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
                      "duration": 0,
                      "state": "pending"
                    },
                    {
                      "type": "test",
                      "title": "If options has a non-null challenge item, it MUST be equal to proof.challenge or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
                      "body": "function() {\n            this.test.link = 'https://www.w3.org/TR/vc-data-integrity/#:~:text=If%20options%20has%20a%20non%2Dnull%20challenge%20item%2C%20it%20MUST%20be%20equal%20to%20proof.challenge%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n            this.test.cell.skipMessage = 'Pending test.';\n            this.skip();\n          }",
                      "async": 0,
                      "sync": true,
                      "_timeout": 15000,
                      "_slow": 75,
                      "_retries": -1,
                      "timedOut": false,
                      "_currentRetry": 0,
                      "pending": true,
                      "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
                      "parent": "cKgXOx05nSv-dViwfzyp4",
                      "ctx": null,
                      "_testId": "urn:uuid:1dcd7848-2060-40cf-8de0-616e38a7fef7",
                      "cell": {
                        "columnId": "Trinsic",
                        "rowId": "If options has a non-null challenge item, it MUST be equal to proof.challenge or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
                        "skipMessage": "Pending test."
                      },
                      "_events": {},
                      "_eventsCount": 1,
                      "link": "https://www.w3.org/TR/vc-data-integrity/#:~:text=If%20options%20has%20a%20non%2Dnull%20challenge%20item%2C%20it%20MUST%20be%20equal%20to%20proof.challenge%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
                      "duration": 0,
                      "state": "pending"
                    }
                  ],
                  "root": false,
                  "pending": false,
                  "_retries": -1,
                  "_beforeEach": [],
                  "_beforeAll": [],
                  "_afterEach": [],
                  "_afterAll": [],
                  "_timeout": 15000,
                  "_slow": 75,
                  "_bail": false,
                  "_onlyTests": [],
                  "_onlySuites": [],
                  "delayed": false,
                  "parent": "w2SRsEHvW0sqyIgL2FKCX",
                  "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
                  "_testId": "urn:uuid:ba53ebc8-a6e9-4188-a61f-08a9fa73879a"
                },
                {
                  "title": "Add Proof Set/Chain",
                  "ctx": null,
                  "suites": [],
                  "tests": [
                    {
                      "type": "test",
                      "title": "Whenever this algorithm encodes strings, it MUST use UTF-8 encoding.",
                      "body": "function() {\n            this.test.link = 'https://www.w3.org/TR/vc-data-integrity/#:~:text=(map).-,Whenever%20this%20algorithm%20encodes%20strings%2C%20it%20MUST%20use%20UTF%2D8%20encoding.,-Let%20proof%20be';\n            for(const proof of proofs) {\n              expect(proof.proofValue.isWellFormed()).to.be.true;\n            }\n          }",
                      "async": 0,
                      "sync": true,
                      "_timeout": 15000,
                      "_slow": 75,
                      "_retries": -1,
                      "timedOut": false,
                      "_currentRetry": 0,
                      "pending": false,
                      "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
                      "parent": "Oi6lgaImJXrZx5psdquCm",
                      "ctx": null,
                      "_testId": "urn:uuid:ae50ac42-fbd6-4998-8c52-0c0a6886e085",
                      "cell": {
                        "columnId": "Trinsic",
                        "rowId": "Whenever this algorithm encodes strings, it MUST use UTF-8 encoding."
                      },
                      "_events": {},
                      "_eventsCount": 1,
                      "link": "https://www.w3.org/TR/vc-data-integrity/#:~:text=(map).-,Whenever%20this%20algorithm%20encodes%20strings%2C%20it%20MUST%20use%20UTF%2D8%20encoding.,-Let%20proof%20be",
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast"
                    },
                    {
                      "type": "test",
                      "title": "If a proof with id equal to previousProof does not exist in allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
                      "body": "function() {\n            this.test.link = 'https://www.w3.org/TR/vc-data-integrity/#:~:text=If%20a%20proof%20with%20id%20equal%20to%20previousProofdoes%20not%20exist%20in%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n            for(const proof of proofs) {\n              if('previousProof' in proof) {\n                if(typeof proof.previousProof === 'string') {\n                  proofs.some(\n                    otherProof => otherProof.id == proof.previousProof).\n                    should.equal(true,\n                      'Expected previousProof ' +\n                      `${proof.previousProof} ` +\n                      'to be the id of another included proof.'\n                    );\n                } if(Array.isArray(proof.previousProof)) {\n                  for(const previousProof in proof.previousProof) {\n                    proofs.some(\n                      otherProof => otherProof.id == previousProof).\n                      should.equal(true,\n                        'Expected previousProof ' +\n                        `${proof.previousProof} ` +\n                        'to be the id of another included proof.'\n                      );\n                  }\n                }\n              }\n            }\n          }",
                      "async": 0,
                      "sync": true,
                      "_timeout": 15000,
                      "_slow": 75,
                      "_retries": -1,
                      "timedOut": false,
                      "_currentRetry": 0,
                      "pending": false,
                      "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
                      "parent": "Oi6lgaImJXrZx5psdquCm",
                      "ctx": null,
                      "_testId": "urn:uuid:8da6a4a4-3bca-44d9-a9c1-44e6956a64f9",
                      "cell": {
                        "columnId": "Trinsic",
                        "rowId": "If a proof with id equal to previousProof does not exist in allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
                      },
                      "_events": {},
                      "_eventsCount": 1,
                      "link": "https://www.w3.org/TR/vc-data-integrity/#:~:text=If%20a%20proof%20with%20id%20equal%20to%20previousProofdoes%20not%20exist%20in%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast"
                    },
                    {
                      "type": "test",
                      "title": "If any element of previousProof array has an id attribute that does not match the id attribute of any element of allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
                      "body": "function() {\n            this.test.link = 'https://www.w3.org/TR/vc-data-integrity/#:~:text=If%20any%20element%20of%20previousProof%20array%20has%20an%20id%20attribute%20that%20does%20not%20match%20the%20id%20attribute%20of%20any%20element%20of%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n            const previousProofs = [];\n            for(const proof of proofs) {\n              if('previousProof' in proof) {\n                if(typeof proof.previousProof === 'string') {\n                  previousProofs.push(proof.previousProof);\n                } if(Array.isArray(proof.previousProof)) {\n                  previousProofs.concat(proof.previousProof);\n                }\n              }\n            }\n            for(const previousProof of previousProofs) {\n              proofs.some(\n                otherProof => otherProof.id == previousProof).should.equal(\n                true,\n                'Expected all previousProof values to be the id of ' +\n                'another included proof.'\n              );\n            }\n          }",
                      "async": 0,
                      "sync": true,
                      "_timeout": 15000,
                      "_slow": 75,
                      "_retries": -1,
                      "timedOut": false,
                      "_currentRetry": 0,
                      "pending": false,
                      "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
                      "parent": "Oi6lgaImJXrZx5psdquCm",
                      "ctx": null,
                      "_testId": "urn:uuid:48dfe006-99b7-48bd-8aa6-978d68346244",
                      "cell": {
                        "columnId": "Trinsic",
                        "rowId": "If any element of previousProof array has an id attribute that does not match the id attribute of any element of allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
                      },
                      "_events": {},
                      "_eventsCount": 1,
                      "link": "https://www.w3.org/TR/vc-data-integrity/#:~:text=If%20any%20element%20of%20previousProof%20array%20has%20an%20id%20attribute%20that%20does%20not%20match%20the%20id%20attribute%20of%20any%20element%20of%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast"
                    }
                  ],
                  "root": false,
                  "pending": false,
                  "_retries": -1,
                  "_beforeEach": [],
                  "_beforeAll": [],
                  "_afterEach": [],
                  "_afterAll": [],
                  "_timeout": 15000,
                  "_slow": 75,
                  "_bail": false,
                  "_onlyTests": [],
                  "_onlySuites": [],
                  "delayed": false,
                  "parent": "w2SRsEHvW0sqyIgL2FKCX",
                  "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
                  "_testId": "urn:uuid:01c1d1ac-5d66-4173-a8ab-1a34a919dfe3"
                }
              ],
              "tests": [],
              "root": false,
              "pending": false,
              "_retries": -1,
              "_beforeEach": [],
              "_beforeAll": [],
              "_afterEach": [],
              "_afterAll": [],
              "_timeout": 15000,
              "_slow": 75,
              "_bail": false,
              "_onlyTests": [],
              "_onlySuites": [],
              "delayed": false,
              "parent": "2VGiV4rJyIo1DbvXHIrx2",
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "_testId": "urn:uuid:3e2eb127-6919-490e-adfe-c402588e80cd"
            }
          ],
          "tests": [
            {
              "type": "test",
              "title": "When expressing a data integrity proof on an object, a proof property MUST be used.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=When%20expressing%20a%20data%20integrity%20proof%20on%20an%20object%2C%20a%20proof%20property%20MUST%20be%20used';\n      shouldHaveProof({vc: data});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "2VGiV4rJyIo1DbvXHIrx2",
              "ctx": null,
              "_testId": "urn:uuid:050e0577-e631-47e5-8e89-6cd3451de89b",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "When expressing a data integrity proof on an object, a proof property MUST be used."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=When%20expressing%20a%20data%20integrity%20proof%20on%20an%20object%2C%20a%20proof%20property%20MUST%20be%20used",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If present (proof), its value MUST be either a single object, or an unordered set of objects",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=If%20present%2C%20its%20value%20MUST%20be%20either%20a%20single%20object%2C%20or%20an%20unordered%20set%20of%20objects';\n      shouldHaveProof({vc: data});\n      const {proof} = data;\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "2VGiV4rJyIo1DbvXHIrx2",
              "ctx": null,
              "_testId": "urn:uuid:76b2d719-c267-494e-af48-5287e2893131",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "If present (proof), its value MUST be either a single object, or an unordered set of objects"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=If%20present%2C%20its%20value%20MUST%20be%20either%20a%20single%20object%2C%20or%20an%20unordered%20set%20of%20objects",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.id\") An optional identifier for the proof, which MUST be a URL.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=An%20optional%20identifier%20for%20the%20proof%2C%20which%20MUST%20be%20a%20URL';\n      for(const proof of proofs) {\n        if(proof.id) {\n          shouldBeUrl({url: proof.id, prop: 'proof.id'});\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "2VGiV4rJyIo1DbvXHIrx2",
              "ctx": null,
              "_testId": "urn:uuid:fd109d7a-a28a-40b3-a078-3f1837534056",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "(\"proof.id\") An optional identifier for the proof, which MUST be a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=An%20optional%20identifier%20for%20the%20proof%2C%20which%20MUST%20be%20a%20URL",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The specific proof type used for the cryptographic proof MUST be specified as a string that maps to a URL.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20specific%20proof%20type%20used%20for%20the%20cryptographic%20proof%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL';\n      const prop = '@type';\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n        const expanded = await jsonld.expand({\n          '@context': data['@context'],\n          type: proof.type\n        }, {documentLoader});\n        for(const term of expanded) {\n          const types = term[prop];\n          should.exist(types, 'Expected @type to exist.');\n          types.every(url => shouldBeUrl({url, prop}));\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "2VGiV4rJyIo1DbvXHIrx2",
              "ctx": null,
              "_testId": "urn:uuid:4b74bd7d-762a-42e5-b915-6230ee2a16ab",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "The specific proof type used for the cryptographic proof MUST be specified as a string that maps to a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20specific%20proof%20type%20used%20for%20the%20cryptographic%20proof%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3750,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "jsonld.InvalidUrl",
                "details": {
                  "code": "loading remote context failed",
                  "url": "https://w3id.org/security/data-integrity/v1",
                  "cause": {}
                }
              }
            },
            {
              "type": "test",
              "title": "The type property MUST contain the string DataIntegrityProof.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-data-integrity/#contexts-and-vocabularies:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.';\n          for(const proof of proofs) {\n            proof.should.have.property('type');\n            proof.type.should.be.a(\n              'string',\n              'Expected \"proof.type\" to be a string.'\n            );\n            const hasExpectedType = expectedProofTypes.includes(proof.type);\n            hasExpectedType.should.equal(\n              true,\n              `Expected \"proof.type\" to be one of ` +\n              `${expectedProofTypes} Received: ${proof.type}`);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "2VGiV4rJyIo1DbvXHIrx2",
              "ctx": null,
              "_testId": "urn:uuid:33b25ee8-b15f-4387-bfff-a6f83432cedb",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "The type property MUST contain the string DataIntegrityProof."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#contexts-and-vocabularies:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3751,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
              "body": "function() {\n          this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.';\n          for(const proof of proofs) {\n            should.exist(proof, 'Expected proof to exist.');\n            if(proof.type === 'DataIntegrityProof') {\n              should.exist(proof.cryptosuite,\n                'Expected proof to have property \"cryptosuite\".');\n            }\n            const {\n              prefix: expectedPrefix,\n              name: encodingName\n            } = expectedMultibasePrefix(proof.cryptosuite);\n            shouldHaveProofValue({proof, expectedPrefix, encodingName});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "2VGiV4rJyIo1DbvXHIrx2",
              "ctx": null,
              "_testId": "urn:uuid:a562fcd6-acfa-4871-9376-6fe49bec3b92",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "The proofValue property MUST be used, as specified in 2.1 Proofs."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified. If specified, its value MUST be a string.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.';\n      for(const proof of proofs) {\n        if(proof.type && proof.type === 'DataIntegrityProof') {\n          should.exist(\n            proof.cryptosuite,\n            'If the proof type is DataIntegrityProof, cryptosuite MUST ' +\n            'be specified');\n          proof.cryptosuite.should.be.a(\n            'string',\n            'cryptosuite value MUST be a string.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "2VGiV4rJyIo1DbvXHIrx2",
              "ctx": null,
              "_testId": "urn:uuid:688c84e5-a3f9-46ef-b364-5885342a1fb8",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified. If specified, its value MUST be a string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "A verification method is the means and information needed to verify the proof. If included, the value MUST be a string that maps to a [URL]",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=A%20verification%20method%20is%20the%20means%20and%20information%20needed%20to%20verify%20the%20proof.%20If%20included%2C%20the%20value%20MUST%20be%20a%20string%20that%20maps%20to%20a%20%5BURL%5D.';\n      for(const proof of proofs) {\n        await shouldMapToUrl({\n          doc: {\n            '@context': data['@context'],\n            ...proof\n          },\n          term: 'https://w3id.org/security#verificationMethod',\n          prop: '@id',\n          documentLoader\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "2VGiV4rJyIo1DbvXHIrx2",
              "ctx": null,
              "_testId": "urn:uuid:3e90bca6-3e72-4648-9007-63d8c6edac2f",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "A verification method is the means and information needed to verify the proof. If included, the value MUST be a string that maps to a [URL]"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=A%20verification%20method%20is%20the%20means%20and%20information%20needed%20to%20verify%20the%20proof.%20If%20included%2C%20the%20value%20MUST%20be%20a%20string%20that%20maps%20to%20a%20%5BURL%5D.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3752,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "jsonld.InvalidUrl",
                "details": {
                  "code": "loading remote context failed",
                  "url": "https://w3id.org/security/data-integrity/v1",
                  "cause": {}
                }
              }
            },
            {
              "type": "test",
              "title": "The reason the proof was created (\"proof.proofPurpose\") MUST be specified as a string that maps to a URL",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20reason%20the%20proof%20was%20created%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL';\n      for(const proof of proofs) {\n        proof.should.have.property('proofPurpose');\n        proof.proofPurpose.should.be.a('string');\n        await shouldMapToUrl({\n          doc: {\n            '@context': data['@context'],\n            ...proof\n          },\n          term: 'https://w3id.org/security#proofPurpose',\n          prop: '@id',\n          documentLoader\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "2VGiV4rJyIo1DbvXHIrx2",
              "ctx": null,
              "_testId": "urn:uuid:fe73abfc-0c50-46c3-b4b6-b12e66c482fe",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "The reason the proof was created (\"proof.proofPurpose\") MUST be specified as a string that maps to a URL"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20reason%20the%20proof%20was%20created%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3753,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "failed",
              "err": {
                "name": "jsonld.InvalidUrl",
                "details": {
                  "code": "loading remote context failed",
                  "url": "https://w3id.org/security/data-integrity/v1",
                  "cause": {}
                }
              }
            },
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof';\n      for(const proof of proofs) {\n        should.exist(proof, 'Expected proof to exist.');\n        const {\n          prefix: expectedPrefix,\n          name: encodingName\n        } = expectedMultibasePrefix(proof.cryptosuite);\n        shouldHaveProofValue({proof, expectedPrefix, encodingName});\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "2VGiV4rJyIo1DbvXHIrx2",
              "ctx": null,
              "_testId": "urn:uuid:d83278ee-71a0-45b8-991a-8b531b156a91",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.previousProof\" field exists, it MUST be a string.",
              "body": "function() {\n        for(const proof of proofs) {\n          if(proof.previousProof) {\n            proof.previousProof.should.be.a('string', 'Expected ' +\n              '\"proof.previousProof\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "2VGiV4rJyIo1DbvXHIrx2",
              "ctx": null,
              "_testId": "urn:uuid:4fa5bf1e-5e17-4587-af66-a55d03b971f3",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "if \"proof.previousProof\" field exists, it MUST be a string."
              },
              "_events": {},
              "_eventsCount": 1,
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.nonce\" field exists, it MUST be a string.",
              "body": "function() {\n        for(const proof of proofs) {\n          if(proof.nonce) {\n            proof.nonce.should.be.a('string', 'Expected \"proof.nonce\" ' +\n              'to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "2VGiV4rJyIo1DbvXHIrx2",
              "ctx": null,
              "_testId": "urn:uuid:50837691-f061-4912-a65a-e70f9d1d2ce7",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "if \"proof.nonce\" field exists, it MUST be a string."
              },
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Cryptographic suite designers MUST use mandatory proof value properties defined in Section 2.1 Proofs, and MAY define other properties specific to their cryptographic suite.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#add-proof:~:text=MUST%20use%20mandatory%20proof%20value%20properties%20defined';\n      for(const proof of proofs) {\n        shouldBeProof({proof});\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "2VGiV4rJyIo1DbvXHIrx2",
              "ctx": null,
              "_testId": "urn:uuid:b9beebaa-8060-4b12-82ba-1142745892c4",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "Cryptographic suite designers MUST use mandatory proof value properties defined in Section 2.1 Proofs, and MAY define other properties specific to their cryptographic suite."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#add-proof:~:text=MUST%20use%20mandatory%20proof%20value%20properties%20defined",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3754,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      const undefinedType = structuredClone(credential);\n      undefinedType.type.push('InvalidType');\n      await shouldFailIssuance({\n        credential: undefinedType,\n        issuer,\n        reason: 'Expected issuer to error when VC has an undefined type.'\n      });\n      const undefinedTerm = structuredClone(credential);\n      undefinedTerm.credentialSubject.invalidTerm = 'invalidTerm';\n      await shouldFailIssuance({\n        credential: undefinedTerm,\n        issuer,\n        reason: 'Expected issuer to error when VC has an undefined term.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "2VGiV4rJyIo1DbvXHIrx2",
              "ctx": null,
              "_testId": "urn:uuid:4fb93232-8811-4c87-857c-9f792f3b7635",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3754,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 65,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected issuer to error when VC has an undefined type.: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 25 Aug 2024 05:05:25 GMT', 'content-type': 'text/html; charset=utf-8', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'cache-control': 'no-cache,no-store', expires: '-1', pragma: 'no-cache', 'x-envoy-upstream-service-time': '46', 'cf-cache-status': 'DYNAMIC', 'report-to': '{\"endpoints\":[{\"url\":\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=pEvXAwBChZceZov9okA9zgswvB4GvbPo013FNxGGbbNWSBQv0JdGzwKT1FzlCG42d9fSjSB1LtHXiOJpsGpCxPDev19VvbOLXt9hLZ7An%2FgLtxhx2YemydytYoG7w%2FtyMhKgpdzHJwwDm77uC1ry\"}],\"group\":\"cf-nel\",\"max_age\":604800}', nel: '{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}', server: 'cloudflare', 'cf-ray': '8b890c09088b57a2-IAD', 'content-encoding': 'br', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: null, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected issuer to error when VC has an undefined type.: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 25 Aug 2024 05:05:25 GMT', 'content-type': 'text/html; charset=utf-8', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'cache-control': 'no-cache,no-store', expires: '-1', pragma: 'no-cache', 'x-envoy-upstream-service-time': '46', 'cf-cache-status': 'DYNAMIC', 'report-to': '{\"endpoints\":[{\"url\":\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=pEvXAwBChZceZov9okA9zgswvB4GvbPo013FNxGGbbNWSBQv0JdGzwKT1FzlCG42d9fSjSB1LtHXiOJpsGpCxPDev19VvbOLXt9hLZ7An%2FgLtxhx2YemydytYoG7w%2FtyMhKgpdzHJwwDm77uC1ry\"}],\"group\":\"cf-nel\",\"max_age\":604800}', nel: '{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}', server: 'cloudflare', 'cf-ray': '8b890c09088b57a2-IAD', 'content-encoding': 'br', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: null, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at shouldFailIssuance (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:71:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/suites/create.js:246:7)"
              }
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n        const hasCryptosuiteName = proofs.some(\n          p => p?.cryptosuite === cryptosuiteName);\n        hasCryptosuiteName.should.equal(\n          true,\n          `Expected at least one proof with cryptosuite ${cryptosuiteName}`);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "2VGiV4rJyIo1DbvXHIrx2",
              "ctx": null,
              "_testId": "urn:uuid:c3aa35bb-fd80-4b34-9873-143664f72895",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3820,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected at least one proof with cryptosuite eddsa-rdfc-2022: expected false to equal true",
                "showDiff": true,
                "actual": "false",
                "expected": "true",
                "operator": "strictEqual",
                "stack": "AssertionError: Expected at least one proof with cryptosuite eddsa-rdfc-2022: expected false to equal true\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/suites/create.js:265:35)\n    at process.processImmediate (node:internal/timers:483:21)"
              }
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n        const cryptoProp = 'https://w3id.org/security#cryptosuite';\n        const cryptoType = 'https://w3id.org/security#cryptosuiteString';\n        for(const {cryptosuite, type} of proofs) {\n          should.exist(cryptosuite,\n            'Expected property \"proof.cryptosuite\" to exist.');\n          should.exist(type,\n            'Expected property \"proof.type\" to exist.');\n          should.exist(data['@context'],\n            'Expected VC to have property \"@context\".');\n          const expanded = await jsonld.expand({\n            '@context': data['@context'],\n            cryptosuite,\n            type\n          }, {documentLoader});\n          for(const terms of expanded) {\n            const cryptoProperties = terms[cryptoProp];\n            should.exist(cryptoProperties,\n              `Expected property ${cryptoProp} to exist.`);\n            const hasTypeName = cryptoProperties.some(suite =>\n              suite['@type'] === cryptoType &&\n              suite['@value'] == cryptosuiteName);\n            hasTypeName.should.equal(true,\n              `Expected ${cryptoProp} with @value ${cryptosuiteName} & ` +\n              `@type ${cryptoType}`);\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "2VGiV4rJyIo1DbvXHIrx2",
              "ctx": null,
              "_testId": "urn:uuid:b548604f-a766-4c48-975e-836957daad64",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3821,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "jsonld.InvalidUrl",
                "details": {
                  "code": "loading remote context failed",
                  "url": "https://w3id.org/security/data-integrity/v1",
                  "cause": {}
                }
              }
            },
            {
              "type": "test",
              "title": "When an application is securing a document, if an @context property is not provided in the document or the Data Integrity terms used in the document are not mapped by existing values in the @context property, implementations SHOULD inject or append an @context property with a value of https://w3id.org/security/data-integrity/v2 or one or more contexts with at least the same declarations, such as the Verifiable Credential Data Model v2.0 context (https://www.w3.org/ns/credentials/v2).",
              "body": "async function() {\n      if(!issuer) {\n        throw new Error(`Expected ${vendorName} to have an issuer.`);\n      }\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#context-injection:~:text=if%20an%20%40context%20property%20is%20not%20provided%20in%20the%20document%20or%20the%20Data%20Integrity%20terms%20used%20in%20the%20document%20are%20not%20mapped%20by%20existing%20values%20in%20the%20%40context%20property%2C%20implementations%20SHOULD%20inject%20or%20append';\n      if(optionalTests.contextInjection === false) {\n        this.test.cell.skipMessage = 'Optional Test Skipped';\n        this.skip();\n      }\n      const _credential = structuredClone(credential);\n      const expectedContexts = [\n        'https://w3id.org/security/data-integrity/v2',\n        'https://www.w3.org/ns/credentials/v2'\n      ];\n      // remove the vc's context and expect context injection to occur\n      delete _credential['@context'];\n      let err;\n      let data;\n      try {\n        data = await createInitialVc({issuer, credential: _credential});\n      } catch(e) {\n        err = e;\n      }\n      should.not.exist(\n        err,\n        `Expected issuer ${vendorName} to perform context injection on a ` +\n        `VC with out an \"@context\" property`);\n      should.exist(data, `Expected issuer ${vendorName} to return data.`);\n      data.should.be.an('object', 'Expected response data to be an object.');\n      should.exist(data['@context'],\n        'Expected data to have an injected \"@context\" property.');\n      if(Array.isArray(data['@context'])) {\n        const hasExpectedContext = expectedContexts.some(\n          ctx => data['@context'].includes(ctx));\n        return hasExpectedContext.should.equal(true,\n          `Expected injected context to contain one of ${expectedContexts}`);\n      }\n      data['@context'].should.be.oneOf(expectedContexts);\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "2VGiV4rJyIo1DbvXHIrx2",
              "ctx": null,
              "_testId": "urn:uuid:77b1c48a-7620-4f52-9627-432854f3b5bc",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "When an application is securing a document, if an @context property is not provided in the document or the Data Integrity terms used in the document are not mapped by existing values in the @context property, implementations SHOULD inject or append an @context property with a value of https://w3id.org/security/data-integrity/v2 or one or more contexts with at least the same declarations, such as the Verifiable Credential Data Model v2.0 context (https://www.w3.org/ns/credentials/v2)."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#context-injection:~:text=if%20an%20%40context%20property%20is%20not%20provided%20in%20the%20document%20or%20the%20Data%20Integrity%20terms%20used%20in%20the%20document%20are%20not%20mapped%20by%20existing%20values%20in%20the%20%40context%20property%2C%20implementations%20SHOULD%20inject%20or%20append",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3822,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 24,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected issuer Trinsic to perform context injection on a VC with out an \"@context\" property: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"credential\":{\"id\":\"urn:uuid:55626632-4855-4b09-a97b-3c18ce3d4b4d\",\"type\":[\"VerifiableCredential\"],\"issuer\":\"did:key:z6MkqbpLSbqnY1pxVyhBCDYcFsv4ZgGgqP32kzNrf5deWVPU\",\"issuanceDate\":\"2020-03-16T22:37:26.544Z\",\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\"}},\"options\":{\"type\":\"DataIntegrityProof\"}}",
                    "method": "POST",
                    "json": {
                      "credential": {
                        "id": "urn:uuid:55626632-4855-4b09-a97b-3c18ce3d4b4d",
                        "type": [
                          "VerifiableCredential"
                        ],
                        "issuer": "did:key:z6MkqbpLSbqnY1pxVyhBCDYcFsv4ZgGgqP32kzNrf5deWVPU",
                        "issuanceDate": "2020-03-16T22:37:26.544Z",
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                        }
                      },
                      "options": {
                        "type": "DataIntegrityProof"
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://interop.connect.trinsic.cloud/vc-api/credentials/issue",
                  "status": 400,
                  "data": "Invalid credential"
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected issuer Trinsic to perform context injection on a VC with out an \"@context\" property: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/suites/create.js:442:18)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "The date and time the proof was created is OPTIONAL and, if included, MUST be specified as an [XMLSCHEMA11-2] dateTimeStamp string, either in Universal Coordinated Time (UTC), denoted by a Z at the end of the value, or with a time zone offset relative to UTC.",
              "body": "function() {\n      this.test.link = 'https://www.w3.org/TR/vc-data-integrity/#:~:text=The%20date%20and%20time%20the%20proof%20was%20created%20is%20OPTIONAL%20and%2C%20if%20included%2C%20MUST%20be%20specified%20as%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%2C%20either%20in%20Universal%20Coordinated%20Time%20(UTC)%2C%20denoted%20by%20a%20Z%20at%20the%20end%20of%20the%20value%2C%20or%20with%20a%20time%20zone%20offset%20relative%20to%20UTC.';\n      if(optionalTests.dates === false) {\n        this.test.cell.skipMessage = 'Optional Test Skipped';\n        this.skip();\n      }\n      for(const proof of proofs) {\n        if(proof.created) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.created.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "2VGiV4rJyIo1DbvXHIrx2",
              "ctx": null,
              "_testId": "urn:uuid:3a109e86-ce69-4caf-a43a-9d171274bc46",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "The date and time the proof was created is OPTIONAL and, if included, MUST be specified as an [XMLSCHEMA11-2] dateTimeStamp string, either in Universal Coordinated Time (UTC), denoted by a Z at the end of the value, or with a time zone offset relative to UTC."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://www.w3.org/TR/vc-data-integrity/#:~:text=The%20date%20and%20time%20the%20proof%20was%20created%20is%20OPTIONAL%20and%2C%20if%20included%2C%20MUST%20be%20specified%20as%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%2C%20either%20in%20Universal%20Coordinated%20Time%20(UTC)%2C%20denoted%20by%20a%20Z%20at%20the%20end%20of%20the%20value%2C%20or%20with%20a%20time%20zone%20offset%20relative%20to%20UTC.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The expires property is OPTIONAL and, if present, specifies when the proof expires. If present, it MUST be an [XMLSCHEMA11-2] dateTimeStamp string, either in Universal Coordinated Time (UTC), denoted by a Z at the end of the value, or with a time zone offset relative to UTC.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=MUST%20be%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%2C%20either%20in%20Universal%20Coordinated%20Time';\n      if(optionalTests.dates === false) {\n        this.test.cell.skipMessage = 'Optional Test Skipped';\n        this.skip();\n      }\n      for(const proof of proofs) {\n        if(proof.expires) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.expires.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "2VGiV4rJyIo1DbvXHIrx2",
              "ctx": null,
              "_testId": "urn:uuid:8b8fb126-9b0c-4395-8c3f-9b1cd98c7db2",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "The expires property is OPTIONAL and, if present, specifies when the proof expires. If present, it MUST be an [XMLSCHEMA11-2] dateTimeStamp string, either in Universal Coordinated Time (UTC), denoted by a Z at the end of the value, or with a time zone offset relative to UTC."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=MUST%20be%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%2C%20either%20in%20Universal%20Coordinated%20Time",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The domain property is OPTIONAL. It conveys one or more security domains in which the proof is meant to be used. If specified, the associated value MUST be either a string, or an unordered set of strings. A verifier SHOULD use the value to ensure that the proof was intended to be used in the security domain in which the verifier is operating.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#verify-proof:~:text=The%20domain%20property%20is%20OPTIONAL.%20It%20conveys%20one%20or%20more%20security%20domains%20in%20which%20the%20proof%20is%20meant%20to%20be%20used.%20If%20specified%2C%20the%20associated%20value%20MUST';\n      if(optionalTests.domain === false) {\n        this.test.cell.skipMessage = 'Optional Test Skipped';\n        this.skip();\n      }\n      for(const proof of proofs) {\n        if(proof.domain) {\n          const validType = isStringOrArrayOfStrings(proof.domain);\n          validType.should.equal(true, 'Expected ' +\n            '\"proof.domain\" to be either a string or an unordered ' +\n            'set of strings.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "2VGiV4rJyIo1DbvXHIrx2",
              "ctx": null,
              "_testId": "urn:uuid:c5939a85-32a5-408e-b891-d8817fa11cf9",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "The domain property is OPTIONAL. It conveys one or more security domains in which the proof is meant to be used. If specified, the associated value MUST be either a string, or an unordered set of strings. A verifier SHOULD use the value to ensure that the proof was intended to be used in the security domain in which the verifier is operating."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#verify-proof:~:text=The%20domain%20property%20is%20OPTIONAL.%20It%20conveys%20one%20or%20more%20security%20domains%20in%20which%20the%20proof%20is%20meant%20to%20be%20used.%20If%20specified%2C%20the%20associated%20value%20MUST",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(challenge) A string value that SHOULD be included in a proof if a domain is specified.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#verify-proof:~:text=A%20string%20value%20that%20SHOULD%20be%20included%20in%20a%20proof%20if%20a%20domain%20is%20specified.';\n      if(optionalTests.domain === false) {\n        this.test.cell.skipMessage = 'Optional Test Skipped';\n        this.skip();\n      }\n      for(const proof of proofs) {\n        if(proof.challenge) {\n          // domain must be specified\n          should.exist(proof.domain, 'Expected \"proof.domain\" ' +\n            'to be specified.');\n          proof.challenge.should.be.a('string', 'Expected ' +\n            '\"proof.challenge\" to be a string.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "2VGiV4rJyIo1DbvXHIrx2",
              "ctx": null,
              "_testId": "urn:uuid:ece45d31-1cb7-4f5d-a5cf-04d00d7ba6e9",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "(challenge) A string value that SHOULD be included in a proof if a domain is specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#verify-proof:~:text=A%20string%20value%20that%20SHOULD%20be%20included%20in%20a%20proof%20if%20a%20domain%20is%20specified.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"Trinsic\"",
              "body": "function() {\n      this.currentTest.cell = {\n        columnId,\n        rowId: this.currentTest.title\n      };\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "2VGiV4rJyIo1DbvXHIrx2",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Trinsic\"",
              "body": "async function() {\n      if(!issuer) {\n        throw new Error(`Expected ${vendorName} to have an issuer.`);\n      }\n      if(!credential) {\n        throw new Error(`Expected a credential to be passed in ` +\n          `received ${credential}`);\n      }\n      data = await createInitialVc({issuer, credential});\n      proofs = Array.isArray(data.proof) ? data.proof : [data.proof];\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "2VGiV4rJyIo1DbvXHIrx2",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3502,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 247,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "4R3sZ40Ry4GvBz6dLxy7S",
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
          "_testId": "urn:uuid:3c071c5e-0267-4af5-bc8d-220d81e016e6"
        },
        {
          "title": "bovine",
          "ctx": null,
          "suites": [
            {
              "title": "Algorithms",
              "ctx": null,
              "suites": [
                {
                  "title": "Add Proof",
                  "ctx": null,
                  "suites": [],
                  "tests": [
                    {
                      "type": "test",
                      "title": "Whenever this algorithm encodes strings, it MUST use UTF-8 encoding.",
                      "body": "function() {\n            this.test.link = 'https://www.w3.org/TR/vc-data-integrity/#:~:text=or%20an%20error.-,Whenever%20this%20algorithm%20encodes%20strings%2C%20it%20MUST%20use%20UTF%2D8%20encoding.,-Let%20proof%20be';\n            for(const proof of proofs) {\n              expect(proof.proofValue.isWellFormed()).to.be.true;\n            }\n          }",
                      "async": 0,
                      "sync": true,
                      "_timeout": 15000,
                      "_slow": 75,
                      "_retries": -1,
                      "timedOut": false,
                      "_currentRetry": 0,
                      "pending": false,
                      "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
                      "parent": "TlcD-_4ft8qQH4fIbEm1t",
                      "ctx": null,
                      "_testId": "urn:uuid:d590cef3-cae7-47e2-bde2-a1b8783a61f6",
                      "cell": {
                        "columnId": "bovine",
                        "rowId": "Whenever this algorithm encodes strings, it MUST use UTF-8 encoding."
                      },
                      "_events": {},
                      "_eventsCount": 1,
                      "link": "https://www.w3.org/TR/vc-data-integrity/#:~:text=or%20an%20error.-,Whenever%20this%20algorithm%20encodes%20strings%2C%20it%20MUST%20use%20UTF%2D8%20encoding.,-Let%20proof%20be",
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast"
                    },
                    {
                      "type": "test",
                      "title": "If the algorithm produces an error, the error MUST be propagated and SHOULD convey the error type.",
                      "body": "function() {\n            this.test.link = 'https://www.w3.org/TR/vc-data-integrity/#:~:text=If%20the%20algorithm%20produces%20an%20error%2C%20the%20error%20MUST%20be%20propagated%20and%20SHOULD%20convey%20the%20error%20type.';\n            this.test.cell.skipMessage = 'Pending test.';\n            this.skip();\n          }",
                      "async": 0,
                      "sync": true,
                      "_timeout": 15000,
                      "_slow": 75,
                      "_retries": -1,
                      "timedOut": false,
                      "_currentRetry": 0,
                      "pending": true,
                      "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
                      "parent": "TlcD-_4ft8qQH4fIbEm1t",
                      "ctx": null,
                      "_testId": "urn:uuid:c26f0400-bf15-401e-962c-6f7e508480a9",
                      "cell": {
                        "columnId": "bovine",
                        "rowId": "If the algorithm produces an error, the error MUST be propagated and SHOULD convey the error type.",
                        "skipMessage": "Pending test."
                      },
                      "_events": {},
                      "_eventsCount": 1,
                      "link": "https://www.w3.org/TR/vc-data-integrity/#:~:text=If%20the%20algorithm%20produces%20an%20error%2C%20the%20error%20MUST%20be%20propagated%20and%20SHOULD%20convey%20the%20error%20type.",
                      "duration": 0,
                      "state": "pending"
                    },
                    {
                      "type": "test",
                      "title": "If one or more of the proof.type, proof.verificationMethod, and proof.proofPurpose values is not set, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
                      "body": "function() {\n            this.test.link = 'https://www.w3.org/TR/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20the%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20values%20is%20not%20set%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n            for(const proof of proofs) {\n              expect(proof).to.contain.keys(\n                'type', 'proofPurpose', 'verificationMethod');\n            }\n          }",
                      "async": 0,
                      "sync": true,
                      "_timeout": 15000,
                      "_slow": 75,
                      "_retries": -1,
                      "timedOut": false,
                      "_currentRetry": 0,
                      "pending": false,
                      "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
                      "parent": "TlcD-_4ft8qQH4fIbEm1t",
                      "ctx": null,
                      "_testId": "urn:uuid:a654cd1c-fc5c-446c-a0b4-eb6eca75f67b",
                      "cell": {
                        "columnId": "bovine",
                        "rowId": "If one or more of the proof.type, proof.verificationMethod, and proof.proofPurpose values is not set, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
                      },
                      "_events": {},
                      "_eventsCount": 1,
                      "link": "https://www.w3.org/TR/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20the%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20values%20is%20not%20set%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast"
                    },
                    {
                      "type": "test",
                      "title": "If options has a non-null domain item, it MUST be equal to proof.domain or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
                      "body": "function() {\n            this.test.link = 'https://www.w3.org/TR/vc-data-integrity/#:~:text=If%20options%20has%20a%20non%2Dnull%20domain%20item%2C%20it%20MUST%20be%20equal%20to%20proof.domain%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n            this.test.cell.skipMessage = 'Pending test.';\n            this.skip();\n          }",
                      "async": 0,
                      "sync": true,
                      "_timeout": 15000,
                      "_slow": 75,
                      "_retries": -1,
                      "timedOut": false,
                      "_currentRetry": 0,
                      "pending": true,
                      "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
                      "parent": "TlcD-_4ft8qQH4fIbEm1t",
                      "ctx": null,
                      "_testId": "urn:uuid:dc14464e-c1a7-4500-9b17-8e6f08d8f454",
                      "cell": {
                        "columnId": "bovine",
                        "rowId": "If options has a non-null domain item, it MUST be equal to proof.domain or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
                        "skipMessage": "Pending test."
                      },
                      "_events": {},
                      "_eventsCount": 1,
                      "link": "https://www.w3.org/TR/vc-data-integrity/#:~:text=If%20options%20has%20a%20non%2Dnull%20domain%20item%2C%20it%20MUST%20be%20equal%20to%20proof.domain%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
                      "duration": 0,
                      "state": "pending"
                    },
                    {
                      "type": "test",
                      "title": "If options has a non-null challenge item, it MUST be equal to proof.challenge or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
                      "body": "function() {\n            this.test.link = 'https://www.w3.org/TR/vc-data-integrity/#:~:text=If%20options%20has%20a%20non%2Dnull%20challenge%20item%2C%20it%20MUST%20be%20equal%20to%20proof.challenge%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n            this.test.cell.skipMessage = 'Pending test.';\n            this.skip();\n          }",
                      "async": 0,
                      "sync": true,
                      "_timeout": 15000,
                      "_slow": 75,
                      "_retries": -1,
                      "timedOut": false,
                      "_currentRetry": 0,
                      "pending": true,
                      "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
                      "parent": "TlcD-_4ft8qQH4fIbEm1t",
                      "ctx": null,
                      "_testId": "urn:uuid:b3f3cad3-f457-463c-9c8f-4e57cfab6627",
                      "cell": {
                        "columnId": "bovine",
                        "rowId": "If options has a non-null challenge item, it MUST be equal to proof.challenge or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
                        "skipMessage": "Pending test."
                      },
                      "_events": {},
                      "_eventsCount": 1,
                      "link": "https://www.w3.org/TR/vc-data-integrity/#:~:text=If%20options%20has%20a%20non%2Dnull%20challenge%20item%2C%20it%20MUST%20be%20equal%20to%20proof.challenge%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
                      "duration": 0,
                      "state": "pending"
                    }
                  ],
                  "root": false,
                  "pending": false,
                  "_retries": -1,
                  "_beforeEach": [],
                  "_beforeAll": [],
                  "_afterEach": [],
                  "_afterAll": [],
                  "_timeout": 15000,
                  "_slow": 75,
                  "_bail": false,
                  "_onlyTests": [],
                  "_onlySuites": [],
                  "delayed": false,
                  "parent": "OkZmP0KDpYKYJXSvsA8w8",
                  "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
                  "_testId": "urn:uuid:7ddb933f-2ae6-42c3-8d37-4f022c2ab524"
                },
                {
                  "title": "Add Proof Set/Chain",
                  "ctx": null,
                  "suites": [],
                  "tests": [
                    {
                      "type": "test",
                      "title": "Whenever this algorithm encodes strings, it MUST use UTF-8 encoding.",
                      "body": "function() {\n            this.test.link = 'https://www.w3.org/TR/vc-data-integrity/#:~:text=(map).-,Whenever%20this%20algorithm%20encodes%20strings%2C%20it%20MUST%20use%20UTF%2D8%20encoding.,-Let%20proof%20be';\n            for(const proof of proofs) {\n              expect(proof.proofValue.isWellFormed()).to.be.true;\n            }\n          }",
                      "async": 0,
                      "sync": true,
                      "_timeout": 15000,
                      "_slow": 75,
                      "_retries": -1,
                      "timedOut": false,
                      "_currentRetry": 0,
                      "pending": false,
                      "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
                      "parent": "s_bReD2x-f0A5oWG-_lvo",
                      "ctx": null,
                      "_testId": "urn:uuid:b4b6e3f6-dbf2-4cd4-83b4-b3cace7cebb7",
                      "cell": {
                        "columnId": "bovine",
                        "rowId": "Whenever this algorithm encodes strings, it MUST use UTF-8 encoding."
                      },
                      "_events": {},
                      "_eventsCount": 1,
                      "link": "https://www.w3.org/TR/vc-data-integrity/#:~:text=(map).-,Whenever%20this%20algorithm%20encodes%20strings%2C%20it%20MUST%20use%20UTF%2D8%20encoding.,-Let%20proof%20be",
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast"
                    },
                    {
                      "type": "test",
                      "title": "If a proof with id equal to previousProof does not exist in allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
                      "body": "function() {\n            this.test.link = 'https://www.w3.org/TR/vc-data-integrity/#:~:text=If%20a%20proof%20with%20id%20equal%20to%20previousProofdoes%20not%20exist%20in%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n            for(const proof of proofs) {\n              if('previousProof' in proof) {\n                if(typeof proof.previousProof === 'string') {\n                  proofs.some(\n                    otherProof => otherProof.id == proof.previousProof).\n                    should.equal(true,\n                      'Expected previousProof ' +\n                      `${proof.previousProof} ` +\n                      'to be the id of another included proof.'\n                    );\n                } if(Array.isArray(proof.previousProof)) {\n                  for(const previousProof in proof.previousProof) {\n                    proofs.some(\n                      otherProof => otherProof.id == previousProof).\n                      should.equal(true,\n                        'Expected previousProof ' +\n                        `${proof.previousProof} ` +\n                        'to be the id of another included proof.'\n                      );\n                  }\n                }\n              }\n            }\n          }",
                      "async": 0,
                      "sync": true,
                      "_timeout": 15000,
                      "_slow": 75,
                      "_retries": -1,
                      "timedOut": false,
                      "_currentRetry": 0,
                      "pending": false,
                      "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
                      "parent": "s_bReD2x-f0A5oWG-_lvo",
                      "ctx": null,
                      "_testId": "urn:uuid:bbee7a8a-81d7-4f18-82a9-3ea784e49274",
                      "cell": {
                        "columnId": "bovine",
                        "rowId": "If a proof with id equal to previousProof does not exist in allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
                      },
                      "_events": {},
                      "_eventsCount": 1,
                      "link": "https://www.w3.org/TR/vc-data-integrity/#:~:text=If%20a%20proof%20with%20id%20equal%20to%20previousProofdoes%20not%20exist%20in%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast"
                    },
                    {
                      "type": "test",
                      "title": "If any element of previousProof array has an id attribute that does not match the id attribute of any element of allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
                      "body": "function() {\n            this.test.link = 'https://www.w3.org/TR/vc-data-integrity/#:~:text=If%20any%20element%20of%20previousProof%20array%20has%20an%20id%20attribute%20that%20does%20not%20match%20the%20id%20attribute%20of%20any%20element%20of%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n            const previousProofs = [];\n            for(const proof of proofs) {\n              if('previousProof' in proof) {\n                if(typeof proof.previousProof === 'string') {\n                  previousProofs.push(proof.previousProof);\n                } if(Array.isArray(proof.previousProof)) {\n                  previousProofs.concat(proof.previousProof);\n                }\n              }\n            }\n            for(const previousProof of previousProofs) {\n              proofs.some(\n                otherProof => otherProof.id == previousProof).should.equal(\n                true,\n                'Expected all previousProof values to be the id of ' +\n                'another included proof.'\n              );\n            }\n          }",
                      "async": 0,
                      "sync": true,
                      "_timeout": 15000,
                      "_slow": 75,
                      "_retries": -1,
                      "timedOut": false,
                      "_currentRetry": 0,
                      "pending": false,
                      "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
                      "parent": "s_bReD2x-f0A5oWG-_lvo",
                      "ctx": null,
                      "_testId": "urn:uuid:7e69b8cd-7b4c-432e-aedf-9023aa3bc367",
                      "cell": {
                        "columnId": "bovine",
                        "rowId": "If any element of previousProof array has an id attribute that does not match the id attribute of any element of allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
                      },
                      "_events": {},
                      "_eventsCount": 1,
                      "link": "https://www.w3.org/TR/vc-data-integrity/#:~:text=If%20any%20element%20of%20previousProof%20array%20has%20an%20id%20attribute%20that%20does%20not%20match%20the%20id%20attribute%20of%20any%20element%20of%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast"
                    }
                  ],
                  "root": false,
                  "pending": false,
                  "_retries": -1,
                  "_beforeEach": [],
                  "_beforeAll": [],
                  "_afterEach": [],
                  "_afterAll": [],
                  "_timeout": 15000,
                  "_slow": 75,
                  "_bail": false,
                  "_onlyTests": [],
                  "_onlySuites": [],
                  "delayed": false,
                  "parent": "OkZmP0KDpYKYJXSvsA8w8",
                  "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
                  "_testId": "urn:uuid:b3e50f65-7302-4d5c-9995-c07288edb742"
                }
              ],
              "tests": [],
              "root": false,
              "pending": false,
              "_retries": -1,
              "_beforeEach": [],
              "_beforeAll": [],
              "_afterEach": [],
              "_afterAll": [],
              "_timeout": 15000,
              "_slow": 75,
              "_bail": false,
              "_onlyTests": [],
              "_onlySuites": [],
              "delayed": false,
              "parent": "GiFchlSHnrHGbDB__tDI9",
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "_testId": "urn:uuid:6da15d6b-8536-4acd-a5e0-c3e395d5f7b8"
            }
          ],
          "tests": [
            {
              "type": "test",
              "title": "When expressing a data integrity proof on an object, a proof property MUST be used.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=When%20expressing%20a%20data%20integrity%20proof%20on%20an%20object%2C%20a%20proof%20property%20MUST%20be%20used';\n      shouldHaveProof({vc: data});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "GiFchlSHnrHGbDB__tDI9",
              "ctx": null,
              "_testId": "urn:uuid:623a5ca4-2534-4be4-b865-59c84579d44a",
              "cell": {
                "columnId": "bovine",
                "rowId": "When expressing a data integrity proof on an object, a proof property MUST be used."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=When%20expressing%20a%20data%20integrity%20proof%20on%20an%20object%2C%20a%20proof%20property%20MUST%20be%20used",
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If present (proof), its value MUST be either a single object, or an unordered set of objects",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=If%20present%2C%20its%20value%20MUST%20be%20either%20a%20single%20object%2C%20or%20an%20unordered%20set%20of%20objects';\n      shouldHaveProof({vc: data});\n      const {proof} = data;\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "GiFchlSHnrHGbDB__tDI9",
              "ctx": null,
              "_testId": "urn:uuid:9f1e6006-549c-4dea-9e34-55f7e78f46f9",
              "cell": {
                "columnId": "bovine",
                "rowId": "If present (proof), its value MUST be either a single object, or an unordered set of objects"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=If%20present%2C%20its%20value%20MUST%20be%20either%20a%20single%20object%2C%20or%20an%20unordered%20set%20of%20objects",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.id\") An optional identifier for the proof, which MUST be a URL.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=An%20optional%20identifier%20for%20the%20proof%2C%20which%20MUST%20be%20a%20URL';\n      for(const proof of proofs) {\n        if(proof.id) {\n          shouldBeUrl({url: proof.id, prop: 'proof.id'});\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "GiFchlSHnrHGbDB__tDI9",
              "ctx": null,
              "_testId": "urn:uuid:9e5deb02-0d56-4be2-a147-c716ed59106e",
              "cell": {
                "columnId": "bovine",
                "rowId": "(\"proof.id\") An optional identifier for the proof, which MUST be a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=An%20optional%20identifier%20for%20the%20proof%2C%20which%20MUST%20be%20a%20URL",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The specific proof type used for the cryptographic proof MUST be specified as a string that maps to a URL.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20specific%20proof%20type%20used%20for%20the%20cryptographic%20proof%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL';\n      const prop = '@type';\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n        const expanded = await jsonld.expand({\n          '@context': data['@context'],\n          type: proof.type\n        }, {documentLoader});\n        for(const term of expanded) {\n          const types = term[prop];\n          should.exist(types, 'Expected @type to exist.');\n          types.every(url => shouldBeUrl({url, prop}));\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "GiFchlSHnrHGbDB__tDI9",
              "ctx": null,
              "_testId": "urn:uuid:2b508e9a-badd-4dfc-a121-a7af903588fc",
              "cell": {
                "columnId": "bovine",
                "rowId": "The specific proof type used for the cryptographic proof MUST be specified as a string that maps to a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20specific%20proof%20type%20used%20for%20the%20cryptographic%20proof%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9304,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The type property MUST contain the string DataIntegrityProof.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-data-integrity/#contexts-and-vocabularies:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.';\n          for(const proof of proofs) {\n            proof.should.have.property('type');\n            proof.type.should.be.a(\n              'string',\n              'Expected \"proof.type\" to be a string.'\n            );\n            const hasExpectedType = expectedProofTypes.includes(proof.type);\n            hasExpectedType.should.equal(\n              true,\n              `Expected \"proof.type\" to be one of ` +\n              `${expectedProofTypes} Received: ${proof.type}`);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "GiFchlSHnrHGbDB__tDI9",
              "ctx": null,
              "_testId": "urn:uuid:d3beec59-e05a-4884-9850-fe4b5cb6d3ad",
              "cell": {
                "columnId": "bovine",
                "rowId": "The type property MUST contain the string DataIntegrityProof."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#contexts-and-vocabularies:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9305,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
              "body": "function() {\n          this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.';\n          for(const proof of proofs) {\n            should.exist(proof, 'Expected proof to exist.');\n            if(proof.type === 'DataIntegrityProof') {\n              should.exist(proof.cryptosuite,\n                'Expected proof to have property \"cryptosuite\".');\n            }\n            const {\n              prefix: expectedPrefix,\n              name: encodingName\n            } = expectedMultibasePrefix(proof.cryptosuite);\n            shouldHaveProofValue({proof, expectedPrefix, encodingName});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "GiFchlSHnrHGbDB__tDI9",
              "ctx": null,
              "_testId": "urn:uuid:d5e0587b-4b11-42f8-a842-5d6df19f8580",
              "cell": {
                "columnId": "bovine",
                "rowId": "The proofValue property MUST be used, as specified in 2.1 Proofs."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified. If specified, its value MUST be a string.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.';\n      for(const proof of proofs) {\n        if(proof.type && proof.type === 'DataIntegrityProof') {\n          should.exist(\n            proof.cryptosuite,\n            'If the proof type is DataIntegrityProof, cryptosuite MUST ' +\n            'be specified');\n          proof.cryptosuite.should.be.a(\n            'string',\n            'cryptosuite value MUST be a string.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "GiFchlSHnrHGbDB__tDI9",
              "ctx": null,
              "_testId": "urn:uuid:616449a9-2d79-4a2d-b285-412a1b3bc34d",
              "cell": {
                "columnId": "bovine",
                "rowId": "If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified. If specified, its value MUST be a string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "A verification method is the means and information needed to verify the proof. If included, the value MUST be a string that maps to a [URL]",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=A%20verification%20method%20is%20the%20means%20and%20information%20needed%20to%20verify%20the%20proof.%20If%20included%2C%20the%20value%20MUST%20be%20a%20string%20that%20maps%20to%20a%20%5BURL%5D.';\n      for(const proof of proofs) {\n        await shouldMapToUrl({\n          doc: {\n            '@context': data['@context'],\n            ...proof\n          },\n          term: 'https://w3id.org/security#verificationMethod',\n          prop: '@id',\n          documentLoader\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "GiFchlSHnrHGbDB__tDI9",
              "ctx": null,
              "_testId": "urn:uuid:44451bfd-fdda-4fa1-9518-8e6a858f2ca7",
              "cell": {
                "columnId": "bovine",
                "rowId": "A verification method is the means and information needed to verify the proof. If included, the value MUST be a string that maps to a [URL]"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=A%20verification%20method%20is%20the%20means%20and%20information%20needed%20to%20verify%20the%20proof.%20If%20included%2C%20the%20value%20MUST%20be%20a%20string%20that%20maps%20to%20a%20%5BURL%5D.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9306,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The reason the proof was created (\"proof.proofPurpose\") MUST be specified as a string that maps to a URL",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20reason%20the%20proof%20was%20created%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL';\n      for(const proof of proofs) {\n        proof.should.have.property('proofPurpose');\n        proof.proofPurpose.should.be.a('string');\n        await shouldMapToUrl({\n          doc: {\n            '@context': data['@context'],\n            ...proof\n          },\n          term: 'https://w3id.org/security#proofPurpose',\n          prop: '@id',\n          documentLoader\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "GiFchlSHnrHGbDB__tDI9",
              "ctx": null,
              "_testId": "urn:uuid:537acfd1-d0f6-4b2d-b2be-8ac0da4ff242",
              "cell": {
                "columnId": "bovine",
                "rowId": "The reason the proof was created (\"proof.proofPurpose\") MUST be specified as a string that maps to a URL"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20reason%20the%20proof%20was%20created%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9308,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof';\n      for(const proof of proofs) {\n        should.exist(proof, 'Expected proof to exist.');\n        const {\n          prefix: expectedPrefix,\n          name: encodingName\n        } = expectedMultibasePrefix(proof.cryptosuite);\n        shouldHaveProofValue({proof, expectedPrefix, encodingName});\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "GiFchlSHnrHGbDB__tDI9",
              "ctx": null,
              "_testId": "urn:uuid:77b10791-0532-4f65-82b7-3615b537bde7",
              "cell": {
                "columnId": "bovine",
                "rowId": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.previousProof\" field exists, it MUST be a string.",
              "body": "function() {\n        for(const proof of proofs) {\n          if(proof.previousProof) {\n            proof.previousProof.should.be.a('string', 'Expected ' +\n              '\"proof.previousProof\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "GiFchlSHnrHGbDB__tDI9",
              "ctx": null,
              "_testId": "urn:uuid:b1d3edf5-4eca-43a6-a1d3-b0881e05f0c2",
              "cell": {
                "columnId": "bovine",
                "rowId": "if \"proof.previousProof\" field exists, it MUST be a string."
              },
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.nonce\" field exists, it MUST be a string.",
              "body": "function() {\n        for(const proof of proofs) {\n          if(proof.nonce) {\n            proof.nonce.should.be.a('string', 'Expected \"proof.nonce\" ' +\n              'to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "GiFchlSHnrHGbDB__tDI9",
              "ctx": null,
              "_testId": "urn:uuid:fb3e950a-1fe0-4716-ae66-0a128aba0536",
              "cell": {
                "columnId": "bovine",
                "rowId": "if \"proof.nonce\" field exists, it MUST be a string."
              },
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Cryptographic suite designers MUST use mandatory proof value properties defined in Section 2.1 Proofs, and MAY define other properties specific to their cryptographic suite.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#add-proof:~:text=MUST%20use%20mandatory%20proof%20value%20properties%20defined';\n      for(const proof of proofs) {\n        shouldBeProof({proof});\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "GiFchlSHnrHGbDB__tDI9",
              "ctx": null,
              "_testId": "urn:uuid:5b904026-960e-41bf-b273-c1a5c8ede10d",
              "cell": {
                "columnId": "bovine",
                "rowId": "Cryptographic suite designers MUST use mandatory proof value properties defined in Section 2.1 Proofs, and MAY define other properties specific to their cryptographic suite."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#add-proof:~:text=MUST%20use%20mandatory%20proof%20value%20properties%20defined",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9310,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      const undefinedType = structuredClone(credential);\n      undefinedType.type.push('InvalidType');\n      await shouldFailIssuance({\n        credential: undefinedType,\n        issuer,\n        reason: 'Expected issuer to error when VC has an undefined type.'\n      });\n      const undefinedTerm = structuredClone(credential);\n      undefinedTerm.credentialSubject.invalidTerm = 'invalidTerm';\n      await shouldFailIssuance({\n        credential: undefinedTerm,\n        issuer,\n        reason: 'Expected issuer to error when VC has an undefined term.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "GiFchlSHnrHGbDB__tDI9",
              "ctx": null,
              "_testId": "urn:uuid:1080d662-7187-478d-9dfe-09bd30850585",
              "cell": {
                "columnId": "bovine",
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9310,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 111,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected issuer to error when VC has an undefined type.: expected Response { status: 200, statusText: 'OK', headers: Headers { server: 'nginx/1.18.0 (Ubuntu)', date: 'Sun, 25 Aug 2024 05:05:31 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'content-encoding': 'gzip', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected issuer to error when VC has an undefined type.: expected Response { status: 200, statusText: 'OK', headers: Headers { server: 'nginx/1.18.0 (Ubuntu)', date: 'Sun, 25 Aug 2024 05:05:31 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'content-encoding': 'gzip', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at shouldFailIssuance (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:71:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/suites/create.js:246:7)"
              }
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n        const hasCryptosuiteName = proofs.some(\n          p => p?.cryptosuite === cryptosuiteName);\n        hasCryptosuiteName.should.equal(\n          true,\n          `Expected at least one proof with cryptosuite ${cryptosuiteName}`);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "GiFchlSHnrHGbDB__tDI9",
              "ctx": null,
              "_testId": "urn:uuid:258cd5e2-e7db-4f09-9d0c-ab3f7ff56d40",
              "cell": {
                "columnId": "bovine",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9422,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n        const cryptoProp = 'https://w3id.org/security#cryptosuite';\n        const cryptoType = 'https://w3id.org/security#cryptosuiteString';\n        for(const {cryptosuite, type} of proofs) {\n          should.exist(cryptosuite,\n            'Expected property \"proof.cryptosuite\" to exist.');\n          should.exist(type,\n            'Expected property \"proof.type\" to exist.');\n          should.exist(data['@context'],\n            'Expected VC to have property \"@context\".');\n          const expanded = await jsonld.expand({\n            '@context': data['@context'],\n            cryptosuite,\n            type\n          }, {documentLoader});\n          for(const terms of expanded) {\n            const cryptoProperties = terms[cryptoProp];\n            should.exist(cryptoProperties,\n              `Expected property ${cryptoProp} to exist.`);\n            const hasTypeName = cryptoProperties.some(suite =>\n              suite['@type'] === cryptoType &&\n              suite['@value'] == cryptosuiteName);\n            hasTypeName.should.equal(true,\n              `Expected ${cryptoProp} with @value ${cryptosuiteName} & ` +\n              `@type ${cryptoType}`);\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "GiFchlSHnrHGbDB__tDI9",
              "ctx": null,
              "_testId": "urn:uuid:0fd21c28-8048-4863-bc69-69799f2b05fb",
              "cell": {
                "columnId": "bovine",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9422,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "When an application is securing a document, if an @context property is not provided in the document or the Data Integrity terms used in the document are not mapped by existing values in the @context property, implementations SHOULD inject or append an @context property with a value of https://w3id.org/security/data-integrity/v2 or one or more contexts with at least the same declarations, such as the Verifiable Credential Data Model v2.0 context (https://www.w3.org/ns/credentials/v2).",
              "body": "async function() {\n      if(!issuer) {\n        throw new Error(`Expected ${vendorName} to have an issuer.`);\n      }\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#context-injection:~:text=if%20an%20%40context%20property%20is%20not%20provided%20in%20the%20document%20or%20the%20Data%20Integrity%20terms%20used%20in%20the%20document%20are%20not%20mapped%20by%20existing%20values%20in%20the%20%40context%20property%2C%20implementations%20SHOULD%20inject%20or%20append';\n      if(optionalTests.contextInjection === false) {\n        this.test.cell.skipMessage = 'Optional Test Skipped';\n        this.skip();\n      }\n      const _credential = structuredClone(credential);\n      const expectedContexts = [\n        'https://w3id.org/security/data-integrity/v2',\n        'https://www.w3.org/ns/credentials/v2'\n      ];\n      // remove the vc's context and expect context injection to occur\n      delete _credential['@context'];\n      let err;\n      let data;\n      try {\n        data = await createInitialVc({issuer, credential: _credential});\n      } catch(e) {\n        err = e;\n      }\n      should.not.exist(\n        err,\n        `Expected issuer ${vendorName} to perform context injection on a ` +\n        `VC with out an \"@context\" property`);\n      should.exist(data, `Expected issuer ${vendorName} to return data.`);\n      data.should.be.an('object', 'Expected response data to be an object.');\n      should.exist(data['@context'],\n        'Expected data to have an injected \"@context\" property.');\n      if(Array.isArray(data['@context'])) {\n        const hasExpectedContext = expectedContexts.some(\n          ctx => data['@context'].includes(ctx));\n        return hasExpectedContext.should.equal(true,\n          `Expected injected context to contain one of ${expectedContexts}`);\n      }\n      data['@context'].should.be.oneOf(expectedContexts);\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "GiFchlSHnrHGbDB__tDI9",
              "ctx": null,
              "_testId": "urn:uuid:da8c064f-41ab-4fc3-afd4-f38f5d7c4b05",
              "cell": {
                "columnId": "bovine",
                "rowId": "When an application is securing a document, if an @context property is not provided in the document or the Data Integrity terms used in the document are not mapped by existing values in the @context property, implementations SHOULD inject or append an @context property with a value of https://w3id.org/security/data-integrity/v2 or one or more contexts with at least the same declarations, such as the Verifiable Credential Data Model v2.0 context (https://www.w3.org/ns/credentials/v2)."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#context-injection:~:text=if%20an%20%40context%20property%20is%20not%20provided%20in%20the%20document%20or%20the%20Data%20Integrity%20terms%20used%20in%20the%20document%20are%20not%20mapped%20by%20existing%20values%20in%20the%20%40context%20property%2C%20implementations%20SHOULD%20inject%20or%20append",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9424,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 99,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The date and time the proof was created is OPTIONAL and, if included, MUST be specified as an [XMLSCHEMA11-2] dateTimeStamp string, either in Universal Coordinated Time (UTC), denoted by a Z at the end of the value, or with a time zone offset relative to UTC.",
              "body": "function() {\n      this.test.link = 'https://www.w3.org/TR/vc-data-integrity/#:~:text=The%20date%20and%20time%20the%20proof%20was%20created%20is%20OPTIONAL%20and%2C%20if%20included%2C%20MUST%20be%20specified%20as%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%2C%20either%20in%20Universal%20Coordinated%20Time%20(UTC)%2C%20denoted%20by%20a%20Z%20at%20the%20end%20of%20the%20value%2C%20or%20with%20a%20time%20zone%20offset%20relative%20to%20UTC.';\n      if(optionalTests.dates === false) {\n        this.test.cell.skipMessage = 'Optional Test Skipped';\n        this.skip();\n      }\n      for(const proof of proofs) {\n        if(proof.created) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.created.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "GiFchlSHnrHGbDB__tDI9",
              "ctx": null,
              "_testId": "urn:uuid:2c9dcdaf-e8ac-4c7e-9633-4b9012bcd51a",
              "cell": {
                "columnId": "bovine",
                "rowId": "The date and time the proof was created is OPTIONAL and, if included, MUST be specified as an [XMLSCHEMA11-2] dateTimeStamp string, either in Universal Coordinated Time (UTC), denoted by a Z at the end of the value, or with a time zone offset relative to UTC."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://www.w3.org/TR/vc-data-integrity/#:~:text=The%20date%20and%20time%20the%20proof%20was%20created%20is%20OPTIONAL%20and%2C%20if%20included%2C%20MUST%20be%20specified%20as%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%2C%20either%20in%20Universal%20Coordinated%20Time%20(UTC)%2C%20denoted%20by%20a%20Z%20at%20the%20end%20of%20the%20value%2C%20or%20with%20a%20time%20zone%20offset%20relative%20to%20UTC.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The expires property is OPTIONAL and, if present, specifies when the proof expires. If present, it MUST be an [XMLSCHEMA11-2] dateTimeStamp string, either in Universal Coordinated Time (UTC), denoted by a Z at the end of the value, or with a time zone offset relative to UTC.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=MUST%20be%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%2C%20either%20in%20Universal%20Coordinated%20Time';\n      if(optionalTests.dates === false) {\n        this.test.cell.skipMessage = 'Optional Test Skipped';\n        this.skip();\n      }\n      for(const proof of proofs) {\n        if(proof.expires) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.expires.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "GiFchlSHnrHGbDB__tDI9",
              "ctx": null,
              "_testId": "urn:uuid:d32496b5-a699-4e18-815f-ec22eafb1c40",
              "cell": {
                "columnId": "bovine",
                "rowId": "The expires property is OPTIONAL and, if present, specifies when the proof expires. If present, it MUST be an [XMLSCHEMA11-2] dateTimeStamp string, either in Universal Coordinated Time (UTC), denoted by a Z at the end of the value, or with a time zone offset relative to UTC."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=MUST%20be%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%2C%20either%20in%20Universal%20Coordinated%20Time",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The domain property is OPTIONAL. It conveys one or more security domains in which the proof is meant to be used. If specified, the associated value MUST be either a string, or an unordered set of strings. A verifier SHOULD use the value to ensure that the proof was intended to be used in the security domain in which the verifier is operating.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#verify-proof:~:text=The%20domain%20property%20is%20OPTIONAL.%20It%20conveys%20one%20or%20more%20security%20domains%20in%20which%20the%20proof%20is%20meant%20to%20be%20used.%20If%20specified%2C%20the%20associated%20value%20MUST';\n      if(optionalTests.domain === false) {\n        this.test.cell.skipMessage = 'Optional Test Skipped';\n        this.skip();\n      }\n      for(const proof of proofs) {\n        if(proof.domain) {\n          const validType = isStringOrArrayOfStrings(proof.domain);\n          validType.should.equal(true, 'Expected ' +\n            '\"proof.domain\" to be either a string or an unordered ' +\n            'set of strings.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "GiFchlSHnrHGbDB__tDI9",
              "ctx": null,
              "_testId": "urn:uuid:a3a4d997-8234-48f6-b6b7-2936268c2383",
              "cell": {
                "columnId": "bovine",
                "rowId": "The domain property is OPTIONAL. It conveys one or more security domains in which the proof is meant to be used. If specified, the associated value MUST be either a string, or an unordered set of strings. A verifier SHOULD use the value to ensure that the proof was intended to be used in the security domain in which the verifier is operating."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#verify-proof:~:text=The%20domain%20property%20is%20OPTIONAL.%20It%20conveys%20one%20or%20more%20security%20domains%20in%20which%20the%20proof%20is%20meant%20to%20be%20used.%20If%20specified%2C%20the%20associated%20value%20MUST",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(challenge) A string value that SHOULD be included in a proof if a domain is specified.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#verify-proof:~:text=A%20string%20value%20that%20SHOULD%20be%20included%20in%20a%20proof%20if%20a%20domain%20is%20specified.';\n      if(optionalTests.domain === false) {\n        this.test.cell.skipMessage = 'Optional Test Skipped';\n        this.skip();\n      }\n      for(const proof of proofs) {\n        if(proof.challenge) {\n          // domain must be specified\n          should.exist(proof.domain, 'Expected \"proof.domain\" ' +\n            'to be specified.');\n          proof.challenge.should.be.a('string', 'Expected ' +\n            '\"proof.challenge\" to be a string.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "GiFchlSHnrHGbDB__tDI9",
              "ctx": null,
              "_testId": "urn:uuid:aaddc5c9-9b04-4cdd-b4d7-5475b9cf0401",
              "cell": {
                "columnId": "bovine",
                "rowId": "(challenge) A string value that SHOULD be included in a proof if a domain is specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#verify-proof:~:text=A%20string%20value%20that%20SHOULD%20be%20included%20in%20a%20proof%20if%20a%20domain%20is%20specified.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"bovine\"",
              "body": "function() {\n      this.currentTest.cell = {\n        columnId,\n        rowId: this.currentTest.title\n      };\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "GiFchlSHnrHGbDB__tDI9",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"bovine\"",
              "body": "async function() {\n      if(!issuer) {\n        throw new Error(`Expected ${vendorName} to have an issuer.`);\n      }\n      if(!credential) {\n        throw new Error(`Expected a credential to be passed in ` +\n          `received ${credential}`);\n      }\n      data = await createInitialVc({issuer, credential});\n      proofs = Array.isArray(data.proof) ? data.proof : [data.proof];\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "GiFchlSHnrHGbDB__tDI9",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3850,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 5453,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "4R3sZ40Ry4GvBz6dLxy7S",
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
          "_testId": "urn:uuid:1d1f81a5-7f53-45c6-aee8-d6f0c83ceebf"
        }
      ],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "QTtpw9S7WaqSoh51WrSQz",
      "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Issuer",
      "_testId": "urn:uuid:7cf1749c-3020-4639-a478-11c08369deba",
      "columns": [
        "apicatalog.com",
        "Digital Bazaar",
        "Grotto Networking",
        "OpSecId",
        "SpruceID",
        "Trinsic",
        "bovine"
      ],
      "rows": [
        {
          "id": "When expressing a data integrity proof on an object, a proof property MUST be used.",
          "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=When%20expressing%20a%20data%20integrity%20proof%20on%20an%20object%2C%20a%20proof%20property%20MUST%20be%20used",
          "cells": [
            {
              "type": "test",
              "title": "When expressing a data integrity proof on an object, a proof property MUST be used.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=When%20expressing%20a%20data%20integrity%20proof%20on%20an%20object%2C%20a%20proof%20property%20MUST%20be%20used';\n      shouldHaveProof({vc: data});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "p0z5X_a8SbyICvvAEIUUP",
              "ctx": null,
              "_testId": "urn:uuid:d77b8b8b-7f0a-4f5a-ba36-bf147300dca4",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "When expressing a data integrity proof on an object, a proof property MUST be used."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=When%20expressing%20a%20data%20integrity%20proof%20on%20an%20object%2C%20a%20proof%20property%20MUST%20be%20used",
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "When expressing a data integrity proof on an object, a proof property MUST be used.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=When%20expressing%20a%20data%20integrity%20proof%20on%20an%20object%2C%20a%20proof%20property%20MUST%20be%20used';\n      shouldHaveProof({vc: data});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "P6-Fcl6bFqa3F88kTD5Wy",
              "ctx": null,
              "_testId": "urn:uuid:e99edb42-9918-4b0f-a649-7ecfd4e182dc",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "When expressing a data integrity proof on an object, a proof property MUST be used."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=When%20expressing%20a%20data%20integrity%20proof%20on%20an%20object%2C%20a%20proof%20property%20MUST%20be%20used",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "When expressing a data integrity proof on an object, a proof property MUST be used.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=When%20expressing%20a%20data%20integrity%20proof%20on%20an%20object%2C%20a%20proof%20property%20MUST%20be%20used';\n      shouldHaveProof({vc: data});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "A-KW4fZO9QGbsyZkZ2ZWI",
              "ctx": null,
              "_testId": "urn:uuid:362a120a-e4f4-46a7-8efc-7b452e4f464f",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "When expressing a data integrity proof on an object, a proof property MUST be used."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=When%20expressing%20a%20data%20integrity%20proof%20on%20an%20object%2C%20a%20proof%20property%20MUST%20be%20used",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "cell": {
                "rowId": "When expressing a data integrity proof on an object, a proof property MUST be used.",
                "colId": "OpSecId"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            },
            {
              "type": "test",
              "title": "When expressing a data integrity proof on an object, a proof property MUST be used.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=When%20expressing%20a%20data%20integrity%20proof%20on%20an%20object%2C%20a%20proof%20property%20MUST%20be%20used';\n      shouldHaveProof({vc: data});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "iA97ETyVVLCXoJl9VcrPz",
              "ctx": null,
              "_testId": "urn:uuid:c5575420-5a64-4ba8-aae9-37b3527bd884",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "When expressing a data integrity proof on an object, a proof property MUST be used."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=When%20expressing%20a%20data%20integrity%20proof%20on%20an%20object%2C%20a%20proof%20property%20MUST%20be%20used",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "When expressing a data integrity proof on an object, a proof property MUST be used.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=When%20expressing%20a%20data%20integrity%20proof%20on%20an%20object%2C%20a%20proof%20property%20MUST%20be%20used';\n      shouldHaveProof({vc: data});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "2VGiV4rJyIo1DbvXHIrx2",
              "ctx": null,
              "_testId": "urn:uuid:050e0577-e631-47e5-8e89-6cd3451de89b",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "When expressing a data integrity proof on an object, a proof property MUST be used."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=When%20expressing%20a%20data%20integrity%20proof%20on%20an%20object%2C%20a%20proof%20property%20MUST%20be%20used",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "When expressing a data integrity proof on an object, a proof property MUST be used.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=When%20expressing%20a%20data%20integrity%20proof%20on%20an%20object%2C%20a%20proof%20property%20MUST%20be%20used';\n      shouldHaveProof({vc: data});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "GiFchlSHnrHGbDB__tDI9",
              "ctx": null,
              "_testId": "urn:uuid:623a5ca4-2534-4be4-b865-59c84579d44a",
              "cell": {
                "columnId": "bovine",
                "rowId": "When expressing a data integrity proof on an object, a proof property MUST be used."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=When%20expressing%20a%20data%20integrity%20proof%20on%20an%20object%2C%20a%20proof%20property%20MUST%20be%20used",
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "If present (proof), its value MUST be either a single object, or an unordered set of objects",
          "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=If%20present%2C%20its%20value%20MUST%20be%20either%20a%20single%20object%2C%20or%20an%20unordered%20set%20of%20objects",
          "cells": [
            {
              "type": "test",
              "title": "If present (proof), its value MUST be either a single object, or an unordered set of objects",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=If%20present%2C%20its%20value%20MUST%20be%20either%20a%20single%20object%2C%20or%20an%20unordered%20set%20of%20objects';\n      shouldHaveProof({vc: data});\n      const {proof} = data;\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "p0z5X_a8SbyICvvAEIUUP",
              "ctx": null,
              "_testId": "urn:uuid:4ec4f7e8-a43f-4a1f-b417-b43f496b7844",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If present (proof), its value MUST be either a single object, or an unordered set of objects"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=If%20present%2C%20its%20value%20MUST%20be%20either%20a%20single%20object%2C%20or%20an%20unordered%20set%20of%20objects",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If present (proof), its value MUST be either a single object, or an unordered set of objects",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=If%20present%2C%20its%20value%20MUST%20be%20either%20a%20single%20object%2C%20or%20an%20unordered%20set%20of%20objects';\n      shouldHaveProof({vc: data});\n      const {proof} = data;\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "P6-Fcl6bFqa3F88kTD5Wy",
              "ctx": null,
              "_testId": "urn:uuid:fdbc2df2-aeeb-442a-88d7-1c1160912b2e",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If present (proof), its value MUST be either a single object, or an unordered set of objects"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=If%20present%2C%20its%20value%20MUST%20be%20either%20a%20single%20object%2C%20or%20an%20unordered%20set%20of%20objects",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If present (proof), its value MUST be either a single object, or an unordered set of objects",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=If%20present%2C%20its%20value%20MUST%20be%20either%20a%20single%20object%2C%20or%20an%20unordered%20set%20of%20objects';\n      shouldHaveProof({vc: data});\n      const {proof} = data;\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "A-KW4fZO9QGbsyZkZ2ZWI",
              "ctx": null,
              "_testId": "urn:uuid:9107b558-2399-4761-b231-78a0705b4389",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If present (proof), its value MUST be either a single object, or an unordered set of objects"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=If%20present%2C%20its%20value%20MUST%20be%20either%20a%20single%20object%2C%20or%20an%20unordered%20set%20of%20objects",
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "cell": {
                "rowId": "If present (proof), its value MUST be either a single object, or an unordered set of objects",
                "colId": "OpSecId"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            },
            {
              "type": "test",
              "title": "If present (proof), its value MUST be either a single object, or an unordered set of objects",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=If%20present%2C%20its%20value%20MUST%20be%20either%20a%20single%20object%2C%20or%20an%20unordered%20set%20of%20objects';\n      shouldHaveProof({vc: data});\n      const {proof} = data;\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "iA97ETyVVLCXoJl9VcrPz",
              "ctx": null,
              "_testId": "urn:uuid:efd0ff60-fe44-4302-a4eb-6c5101fe42f4",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If present (proof), its value MUST be either a single object, or an unordered set of objects"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=If%20present%2C%20its%20value%20MUST%20be%20either%20a%20single%20object%2C%20or%20an%20unordered%20set%20of%20objects",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If present (proof), its value MUST be either a single object, or an unordered set of objects",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=If%20present%2C%20its%20value%20MUST%20be%20either%20a%20single%20object%2C%20or%20an%20unordered%20set%20of%20objects';\n      shouldHaveProof({vc: data});\n      const {proof} = data;\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "2VGiV4rJyIo1DbvXHIrx2",
              "ctx": null,
              "_testId": "urn:uuid:76b2d719-c267-494e-af48-5287e2893131",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "If present (proof), its value MUST be either a single object, or an unordered set of objects"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=If%20present%2C%20its%20value%20MUST%20be%20either%20a%20single%20object%2C%20or%20an%20unordered%20set%20of%20objects",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If present (proof), its value MUST be either a single object, or an unordered set of objects",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=If%20present%2C%20its%20value%20MUST%20be%20either%20a%20single%20object%2C%20or%20an%20unordered%20set%20of%20objects';\n      shouldHaveProof({vc: data});\n      const {proof} = data;\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "GiFchlSHnrHGbDB__tDI9",
              "ctx": null,
              "_testId": "urn:uuid:9f1e6006-549c-4dea-9e34-55f7e78f46f9",
              "cell": {
                "columnId": "bovine",
                "rowId": "If present (proof), its value MUST be either a single object, or an unordered set of objects"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=If%20present%2C%20its%20value%20MUST%20be%20either%20a%20single%20object%2C%20or%20an%20unordered%20set%20of%20objects",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "(\"proof.id\") An optional identifier for the proof, which MUST be a URL.",
          "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=An%20optional%20identifier%20for%20the%20proof%2C%20which%20MUST%20be%20a%20URL",
          "cells": [
            {
              "type": "test",
              "title": "(\"proof.id\") An optional identifier for the proof, which MUST be a URL.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=An%20optional%20identifier%20for%20the%20proof%2C%20which%20MUST%20be%20a%20URL';\n      for(const proof of proofs) {\n        if(proof.id) {\n          shouldBeUrl({url: proof.id, prop: 'proof.id'});\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "p0z5X_a8SbyICvvAEIUUP",
              "ctx": null,
              "_testId": "urn:uuid:a15e1dc3-e913-4fe5-b449-d07f44ca6466",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "(\"proof.id\") An optional identifier for the proof, which MUST be a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=An%20optional%20identifier%20for%20the%20proof%2C%20which%20MUST%20be%20a%20URL",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.id\") An optional identifier for the proof, which MUST be a URL.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=An%20optional%20identifier%20for%20the%20proof%2C%20which%20MUST%20be%20a%20URL';\n      for(const proof of proofs) {\n        if(proof.id) {\n          shouldBeUrl({url: proof.id, prop: 'proof.id'});\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "P6-Fcl6bFqa3F88kTD5Wy",
              "ctx": null,
              "_testId": "urn:uuid:a59c8f96-c762-48a5-917e-e1f29962be4e",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "(\"proof.id\") An optional identifier for the proof, which MUST be a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=An%20optional%20identifier%20for%20the%20proof%2C%20which%20MUST%20be%20a%20URL",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.id\") An optional identifier for the proof, which MUST be a URL.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=An%20optional%20identifier%20for%20the%20proof%2C%20which%20MUST%20be%20a%20URL';\n      for(const proof of proofs) {\n        if(proof.id) {\n          shouldBeUrl({url: proof.id, prop: 'proof.id'});\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "A-KW4fZO9QGbsyZkZ2ZWI",
              "ctx": null,
              "_testId": "urn:uuid:bc8878c6-462f-4315-bf68-0486e2c55286",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "(\"proof.id\") An optional identifier for the proof, which MUST be a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=An%20optional%20identifier%20for%20the%20proof%2C%20which%20MUST%20be%20a%20URL",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "cell": {
                "rowId": "(\"proof.id\") An optional identifier for the proof, which MUST be a URL.",
                "colId": "OpSecId"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            },
            {
              "type": "test",
              "title": "(\"proof.id\") An optional identifier for the proof, which MUST be a URL.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=An%20optional%20identifier%20for%20the%20proof%2C%20which%20MUST%20be%20a%20URL';\n      for(const proof of proofs) {\n        if(proof.id) {\n          shouldBeUrl({url: proof.id, prop: 'proof.id'});\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "iA97ETyVVLCXoJl9VcrPz",
              "ctx": null,
              "_testId": "urn:uuid:d017eed9-bc73-4e25-96bb-daee5ff837eb",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "(\"proof.id\") An optional identifier for the proof, which MUST be a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=An%20optional%20identifier%20for%20the%20proof%2C%20which%20MUST%20be%20a%20URL",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.id\") An optional identifier for the proof, which MUST be a URL.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=An%20optional%20identifier%20for%20the%20proof%2C%20which%20MUST%20be%20a%20URL';\n      for(const proof of proofs) {\n        if(proof.id) {\n          shouldBeUrl({url: proof.id, prop: 'proof.id'});\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "2VGiV4rJyIo1DbvXHIrx2",
              "ctx": null,
              "_testId": "urn:uuid:fd109d7a-a28a-40b3-a078-3f1837534056",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "(\"proof.id\") An optional identifier for the proof, which MUST be a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=An%20optional%20identifier%20for%20the%20proof%2C%20which%20MUST%20be%20a%20URL",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.id\") An optional identifier for the proof, which MUST be a URL.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=An%20optional%20identifier%20for%20the%20proof%2C%20which%20MUST%20be%20a%20URL';\n      for(const proof of proofs) {\n        if(proof.id) {\n          shouldBeUrl({url: proof.id, prop: 'proof.id'});\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "GiFchlSHnrHGbDB__tDI9",
              "ctx": null,
              "_testId": "urn:uuid:9e5deb02-0d56-4be2-a147-c716ed59106e",
              "cell": {
                "columnId": "bovine",
                "rowId": "(\"proof.id\") An optional identifier for the proof, which MUST be a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=An%20optional%20identifier%20for%20the%20proof%2C%20which%20MUST%20be%20a%20URL",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "The specific proof type used for the cryptographic proof MUST be specified as a string that maps to a URL.",
          "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20specific%20proof%20type%20used%20for%20the%20cryptographic%20proof%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL",
          "cells": [
            {
              "type": "test",
              "title": "The specific proof type used for the cryptographic proof MUST be specified as a string that maps to a URL.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20specific%20proof%20type%20used%20for%20the%20cryptographic%20proof%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL';\n      const prop = '@type';\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n        const expanded = await jsonld.expand({\n          '@context': data['@context'],\n          type: proof.type\n        }, {documentLoader});\n        for(const term of expanded) {\n          const types = term[prop];\n          should.exist(types, 'Expected @type to exist.');\n          types.every(url => shouldBeUrl({url, prop}));\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "p0z5X_a8SbyICvvAEIUUP",
              "ctx": null,
              "_testId": "urn:uuid:4b9d9f3c-6ec8-47eb-8fc9-5226ba349b25",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "The specific proof type used for the cryptographic proof MUST be specified as a string that maps to a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20specific%20proof%20type%20used%20for%20the%20cryptographic%20proof%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1089,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 15,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The specific proof type used for the cryptographic proof MUST be specified as a string that maps to a URL.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20specific%20proof%20type%20used%20for%20the%20cryptographic%20proof%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL';\n      const prop = '@type';\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n        const expanded = await jsonld.expand({\n          '@context': data['@context'],\n          type: proof.type\n        }, {documentLoader});\n        for(const term of expanded) {\n          const types = term[prop];\n          should.exist(types, 'Expected @type to exist.');\n          types.every(url => shouldBeUrl({url, prop}));\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "P6-Fcl6bFqa3F88kTD5Wy",
              "ctx": null,
              "_testId": "urn:uuid:d69978a9-91a3-4029-af97-eaf2c7121279",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The specific proof type used for the cryptographic proof MUST be specified as a string that maps to a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20specific%20proof%20type%20used%20for%20the%20cryptographic%20proof%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1709,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The specific proof type used for the cryptographic proof MUST be specified as a string that maps to a URL.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20specific%20proof%20type%20used%20for%20the%20cryptographic%20proof%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL';\n      const prop = '@type';\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n        const expanded = await jsonld.expand({\n          '@context': data['@context'],\n          type: proof.type\n        }, {documentLoader});\n        for(const term of expanded) {\n          const types = term[prop];\n          should.exist(types, 'Expected @type to exist.');\n          types.every(url => shouldBeUrl({url, prop}));\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "A-KW4fZO9QGbsyZkZ2ZWI",
              "ctx": null,
              "_testId": "urn:uuid:c1101aa4-5853-488d-839a-83981b0c0842",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The specific proof type used for the cryptographic proof MUST be specified as a string that maps to a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20specific%20proof%20type%20used%20for%20the%20cryptographic%20proof%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2453,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "cell": {
                "rowId": "The specific proof type used for the cryptographic proof MUST be specified as a string that maps to a URL.",
                "colId": "OpSecId"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            },
            {
              "type": "test",
              "title": "The specific proof type used for the cryptographic proof MUST be specified as a string that maps to a URL.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20specific%20proof%20type%20used%20for%20the%20cryptographic%20proof%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL';\n      const prop = '@type';\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n        const expanded = await jsonld.expand({\n          '@context': data['@context'],\n          type: proof.type\n        }, {documentLoader});\n        for(const term of expanded) {\n          const types = term[prop];\n          should.exist(types, 'Expected @type to exist.');\n          types.every(url => shouldBeUrl({url, prop}));\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "iA97ETyVVLCXoJl9VcrPz",
              "ctx": null,
              "_testId": "urn:uuid:e3fd64b7-3afc-442f-b308-1581d8290388",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The specific proof type used for the cryptographic proof MUST be specified as a string that maps to a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20specific%20proof%20type%20used%20for%20the%20cryptographic%20proof%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3388,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The specific proof type used for the cryptographic proof MUST be specified as a string that maps to a URL.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20specific%20proof%20type%20used%20for%20the%20cryptographic%20proof%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL';\n      const prop = '@type';\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n        const expanded = await jsonld.expand({\n          '@context': data['@context'],\n          type: proof.type\n        }, {documentLoader});\n        for(const term of expanded) {\n          const types = term[prop];\n          should.exist(types, 'Expected @type to exist.');\n          types.every(url => shouldBeUrl({url, prop}));\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "2VGiV4rJyIo1DbvXHIrx2",
              "ctx": null,
              "_testId": "urn:uuid:4b74bd7d-762a-42e5-b915-6230ee2a16ab",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "The specific proof type used for the cryptographic proof MUST be specified as a string that maps to a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20specific%20proof%20type%20used%20for%20the%20cryptographic%20proof%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3750,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "jsonld.InvalidUrl",
                "details": {
                  "code": "loading remote context failed",
                  "url": "https://w3id.org/security/data-integrity/v1",
                  "cause": {}
                }
              }
            },
            {
              "type": "test",
              "title": "The specific proof type used for the cryptographic proof MUST be specified as a string that maps to a URL.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20specific%20proof%20type%20used%20for%20the%20cryptographic%20proof%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL';\n      const prop = '@type';\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n        const expanded = await jsonld.expand({\n          '@context': data['@context'],\n          type: proof.type\n        }, {documentLoader});\n        for(const term of expanded) {\n          const types = term[prop];\n          should.exist(types, 'Expected @type to exist.');\n          types.every(url => shouldBeUrl({url, prop}));\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "GiFchlSHnrHGbDB__tDI9",
              "ctx": null,
              "_testId": "urn:uuid:2b508e9a-badd-4dfc-a121-a7af903588fc",
              "cell": {
                "columnId": "bovine",
                "rowId": "The specific proof type used for the cryptographic proof MUST be specified as a string that maps to a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20specific%20proof%20type%20used%20for%20the%20cryptographic%20proof%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9304,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "The type property MUST contain the string DataIntegrityProof.",
          "link": "https://w3c.github.io/vc-data-integrity/#contexts-and-vocabularies:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.",
          "cells": [
            {
              "type": "test",
              "title": "The type property MUST contain the string DataIntegrityProof.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-data-integrity/#contexts-and-vocabularies:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.';\n          for(const proof of proofs) {\n            proof.should.have.property('type');\n            proof.type.should.be.a(\n              'string',\n              'Expected \"proof.type\" to be a string.'\n            );\n            const hasExpectedType = expectedProofTypes.includes(proof.type);\n            hasExpectedType.should.equal(\n              true,\n              `Expected \"proof.type\" to be one of ` +\n              `${expectedProofTypes} Received: ${proof.type}`);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "p0z5X_a8SbyICvvAEIUUP",
              "ctx": null,
              "_testId": "urn:uuid:36fbf3a7-0afe-4661-adcc-36dbc1944614",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "The type property MUST contain the string DataIntegrityProof."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#contexts-and-vocabularies:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1101,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The type property MUST contain the string DataIntegrityProof.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-data-integrity/#contexts-and-vocabularies:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.';\n          for(const proof of proofs) {\n            proof.should.have.property('type');\n            proof.type.should.be.a(\n              'string',\n              'Expected \"proof.type\" to be a string.'\n            );\n            const hasExpectedType = expectedProofTypes.includes(proof.type);\n            hasExpectedType.should.equal(\n              true,\n              `Expected \"proof.type\" to be one of ` +\n              `${expectedProofTypes} Received: ${proof.type}`);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "P6-Fcl6bFqa3F88kTD5Wy",
              "ctx": null,
              "_testId": "urn:uuid:7173a7ab-1147-4485-b0c6-f3732213ebc8",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The type property MUST contain the string DataIntegrityProof."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#contexts-and-vocabularies:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1710,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The type property MUST contain the string DataIntegrityProof.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-data-integrity/#contexts-and-vocabularies:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.';\n          for(const proof of proofs) {\n            proof.should.have.property('type');\n            proof.type.should.be.a(\n              'string',\n              'Expected \"proof.type\" to be a string.'\n            );\n            const hasExpectedType = expectedProofTypes.includes(proof.type);\n            hasExpectedType.should.equal(\n              true,\n              `Expected \"proof.type\" to be one of ` +\n              `${expectedProofTypes} Received: ${proof.type}`);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "A-KW4fZO9QGbsyZkZ2ZWI",
              "ctx": null,
              "_testId": "urn:uuid:c6c2ba47-ac37-4523-9ca8-369c64e50f17",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The type property MUST contain the string DataIntegrityProof."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#contexts-and-vocabularies:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2454,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "cell": {
                "rowId": "The type property MUST contain the string DataIntegrityProof.",
                "colId": "OpSecId"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            },
            {
              "type": "test",
              "title": "The type property MUST contain the string DataIntegrityProof.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-data-integrity/#contexts-and-vocabularies:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.';\n          for(const proof of proofs) {\n            proof.should.have.property('type');\n            proof.type.should.be.a(\n              'string',\n              'Expected \"proof.type\" to be a string.'\n            );\n            const hasExpectedType = expectedProofTypes.includes(proof.type);\n            hasExpectedType.should.equal(\n              true,\n              `Expected \"proof.type\" to be one of ` +\n              `${expectedProofTypes} Received: ${proof.type}`);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "iA97ETyVVLCXoJl9VcrPz",
              "ctx": null,
              "_testId": "urn:uuid:c9470804-c09e-43dd-9126-a8b384d0b058",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The type property MUST contain the string DataIntegrityProof."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#contexts-and-vocabularies:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3389,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The type property MUST contain the string DataIntegrityProof.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-data-integrity/#contexts-and-vocabularies:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.';\n          for(const proof of proofs) {\n            proof.should.have.property('type');\n            proof.type.should.be.a(\n              'string',\n              'Expected \"proof.type\" to be a string.'\n            );\n            const hasExpectedType = expectedProofTypes.includes(proof.type);\n            hasExpectedType.should.equal(\n              true,\n              `Expected \"proof.type\" to be one of ` +\n              `${expectedProofTypes} Received: ${proof.type}`);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "2VGiV4rJyIo1DbvXHIrx2",
              "ctx": null,
              "_testId": "urn:uuid:33b25ee8-b15f-4387-bfff-a6f83432cedb",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "The type property MUST contain the string DataIntegrityProof."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#contexts-and-vocabularies:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3751,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The type property MUST contain the string DataIntegrityProof.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-data-integrity/#contexts-and-vocabularies:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.';\n          for(const proof of proofs) {\n            proof.should.have.property('type');\n            proof.type.should.be.a(\n              'string',\n              'Expected \"proof.type\" to be a string.'\n            );\n            const hasExpectedType = expectedProofTypes.includes(proof.type);\n            hasExpectedType.should.equal(\n              true,\n              `Expected \"proof.type\" to be one of ` +\n              `${expectedProofTypes} Received: ${proof.type}`);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "GiFchlSHnrHGbDB__tDI9",
              "ctx": null,
              "_testId": "urn:uuid:d3beec59-e05a-4884-9850-fe4b5cb6d3ad",
              "cell": {
                "columnId": "bovine",
                "rowId": "The type property MUST contain the string DataIntegrityProof."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#contexts-and-vocabularies:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9305,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
          "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.",
          "cells": [
            {
              "type": "test",
              "title": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
              "body": "function() {\n          this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.';\n          for(const proof of proofs) {\n            should.exist(proof, 'Expected proof to exist.');\n            if(proof.type === 'DataIntegrityProof') {\n              should.exist(proof.cryptosuite,\n                'Expected proof to have property \"cryptosuite\".');\n            }\n            const {\n              prefix: expectedPrefix,\n              name: encodingName\n            } = expectedMultibasePrefix(proof.cryptosuite);\n            shouldHaveProofValue({proof, expectedPrefix, encodingName});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "p0z5X_a8SbyICvvAEIUUP",
              "ctx": null,
              "_testId": "urn:uuid:7c738a7c-ef90-4878-89f1-7078ad378e44",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "The proofValue property MUST be used, as specified in 2.1 Proofs."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
              "body": "function() {\n          this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.';\n          for(const proof of proofs) {\n            should.exist(proof, 'Expected proof to exist.');\n            if(proof.type === 'DataIntegrityProof') {\n              should.exist(proof.cryptosuite,\n                'Expected proof to have property \"cryptosuite\".');\n            }\n            const {\n              prefix: expectedPrefix,\n              name: encodingName\n            } = expectedMultibasePrefix(proof.cryptosuite);\n            shouldHaveProofValue({proof, expectedPrefix, encodingName});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "P6-Fcl6bFqa3F88kTD5Wy",
              "ctx": null,
              "_testId": "urn:uuid:49f0e93c-6d44-4f02-8b94-d22e17dbc67a",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The proofValue property MUST be used, as specified in 2.1 Proofs."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
              "body": "function() {\n          this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.';\n          for(const proof of proofs) {\n            should.exist(proof, 'Expected proof to exist.');\n            if(proof.type === 'DataIntegrityProof') {\n              should.exist(proof.cryptosuite,\n                'Expected proof to have property \"cryptosuite\".');\n            }\n            const {\n              prefix: expectedPrefix,\n              name: encodingName\n            } = expectedMultibasePrefix(proof.cryptosuite);\n            shouldHaveProofValue({proof, expectedPrefix, encodingName});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "A-KW4fZO9QGbsyZkZ2ZWI",
              "ctx": null,
              "_testId": "urn:uuid:c5efa94f-991c-436e-9c66-8719a60fe95c",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The proofValue property MUST be used, as specified in 2.1 Proofs."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "cell": {
                "rowId": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
                "colId": "OpSecId"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            },
            {
              "type": "test",
              "title": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
              "body": "function() {\n          this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.';\n          for(const proof of proofs) {\n            should.exist(proof, 'Expected proof to exist.');\n            if(proof.type === 'DataIntegrityProof') {\n              should.exist(proof.cryptosuite,\n                'Expected proof to have property \"cryptosuite\".');\n            }\n            const {\n              prefix: expectedPrefix,\n              name: encodingName\n            } = expectedMultibasePrefix(proof.cryptosuite);\n            shouldHaveProofValue({proof, expectedPrefix, encodingName});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "iA97ETyVVLCXoJl9VcrPz",
              "ctx": null,
              "_testId": "urn:uuid:3715ac31-2bf0-4e58-b5e5-f2513761ecc0",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The proofValue property MUST be used, as specified in 2.1 Proofs."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
              "body": "function() {\n          this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.';\n          for(const proof of proofs) {\n            should.exist(proof, 'Expected proof to exist.');\n            if(proof.type === 'DataIntegrityProof') {\n              should.exist(proof.cryptosuite,\n                'Expected proof to have property \"cryptosuite\".');\n            }\n            const {\n              prefix: expectedPrefix,\n              name: encodingName\n            } = expectedMultibasePrefix(proof.cryptosuite);\n            shouldHaveProofValue({proof, expectedPrefix, encodingName});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "2VGiV4rJyIo1DbvXHIrx2",
              "ctx": null,
              "_testId": "urn:uuid:a562fcd6-acfa-4871-9376-6fe49bec3b92",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "The proofValue property MUST be used, as specified in 2.1 Proofs."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
              "body": "function() {\n          this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.';\n          for(const proof of proofs) {\n            should.exist(proof, 'Expected proof to exist.');\n            if(proof.type === 'DataIntegrityProof') {\n              should.exist(proof.cryptosuite,\n                'Expected proof to have property \"cryptosuite\".');\n            }\n            const {\n              prefix: expectedPrefix,\n              name: encodingName\n            } = expectedMultibasePrefix(proof.cryptosuite);\n            shouldHaveProofValue({proof, expectedPrefix, encodingName});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "GiFchlSHnrHGbDB__tDI9",
              "ctx": null,
              "_testId": "urn:uuid:d5e0587b-4b11-42f8-a842-5d6df19f8580",
              "cell": {
                "columnId": "bovine",
                "rowId": "The proofValue property MUST be used, as specified in 2.1 Proofs."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified. If specified, its value MUST be a string.",
          "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.",
          "cells": [
            {
              "type": "test",
              "title": "If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified. If specified, its value MUST be a string.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.';\n      for(const proof of proofs) {\n        if(proof.type && proof.type === 'DataIntegrityProof') {\n          should.exist(\n            proof.cryptosuite,\n            'If the proof type is DataIntegrityProof, cryptosuite MUST ' +\n            'be specified');\n          proof.cryptosuite.should.be.a(\n            'string',\n            'cryptosuite value MUST be a string.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "p0z5X_a8SbyICvvAEIUUP",
              "ctx": null,
              "_testId": "urn:uuid:97d07dbc-ee0b-45d6-8422-6e610b8ab2e0",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified. If specified, its value MUST be a string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified. If specified, its value MUST be a string.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.';\n      for(const proof of proofs) {\n        if(proof.type && proof.type === 'DataIntegrityProof') {\n          should.exist(\n            proof.cryptosuite,\n            'If the proof type is DataIntegrityProof, cryptosuite MUST ' +\n            'be specified');\n          proof.cryptosuite.should.be.a(\n            'string',\n            'cryptosuite value MUST be a string.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "P6-Fcl6bFqa3F88kTD5Wy",
              "ctx": null,
              "_testId": "urn:uuid:c6b90616-ec6b-40f7-b63b-b3338180dc34",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified. If specified, its value MUST be a string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified. If specified, its value MUST be a string.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.';\n      for(const proof of proofs) {\n        if(proof.type && proof.type === 'DataIntegrityProof') {\n          should.exist(\n            proof.cryptosuite,\n            'If the proof type is DataIntegrityProof, cryptosuite MUST ' +\n            'be specified');\n          proof.cryptosuite.should.be.a(\n            'string',\n            'cryptosuite value MUST be a string.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "A-KW4fZO9QGbsyZkZ2ZWI",
              "ctx": null,
              "_testId": "urn:uuid:eb5343c3-0bb7-4413-961a-d054b0837176",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified. If specified, its value MUST be a string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "cell": {
                "rowId": "If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified. If specified, its value MUST be a string.",
                "colId": "OpSecId"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            },
            {
              "type": "test",
              "title": "If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified. If specified, its value MUST be a string.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.';\n      for(const proof of proofs) {\n        if(proof.type && proof.type === 'DataIntegrityProof') {\n          should.exist(\n            proof.cryptosuite,\n            'If the proof type is DataIntegrityProof, cryptosuite MUST ' +\n            'be specified');\n          proof.cryptosuite.should.be.a(\n            'string',\n            'cryptosuite value MUST be a string.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "iA97ETyVVLCXoJl9VcrPz",
              "ctx": null,
              "_testId": "urn:uuid:3cf54c35-b294-4c5e-985b-24574a6bd60d",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified. If specified, its value MUST be a string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified. If specified, its value MUST be a string.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.';\n      for(const proof of proofs) {\n        if(proof.type && proof.type === 'DataIntegrityProof') {\n          should.exist(\n            proof.cryptosuite,\n            'If the proof type is DataIntegrityProof, cryptosuite MUST ' +\n            'be specified');\n          proof.cryptosuite.should.be.a(\n            'string',\n            'cryptosuite value MUST be a string.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "2VGiV4rJyIo1DbvXHIrx2",
              "ctx": null,
              "_testId": "urn:uuid:688c84e5-a3f9-46ef-b364-5885342a1fb8",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified. If specified, its value MUST be a string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified. If specified, its value MUST be a string.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.';\n      for(const proof of proofs) {\n        if(proof.type && proof.type === 'DataIntegrityProof') {\n          should.exist(\n            proof.cryptosuite,\n            'If the proof type is DataIntegrityProof, cryptosuite MUST ' +\n            'be specified');\n          proof.cryptosuite.should.be.a(\n            'string',\n            'cryptosuite value MUST be a string.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "GiFchlSHnrHGbDB__tDI9",
              "ctx": null,
              "_testId": "urn:uuid:616449a9-2d79-4a2d-b285-412a1b3bc34d",
              "cell": {
                "columnId": "bovine",
                "rowId": "If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified. If specified, its value MUST be a string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "A verification method is the means and information needed to verify the proof. If included, the value MUST be a string that maps to a [URL]",
          "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=A%20verification%20method%20is%20the%20means%20and%20information%20needed%20to%20verify%20the%20proof.%20If%20included%2C%20the%20value%20MUST%20be%20a%20string%20that%20maps%20to%20a%20%5BURL%5D.",
          "cells": [
            {
              "type": "test",
              "title": "A verification method is the means and information needed to verify the proof. If included, the value MUST be a string that maps to a [URL]",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=A%20verification%20method%20is%20the%20means%20and%20information%20needed%20to%20verify%20the%20proof.%20If%20included%2C%20the%20value%20MUST%20be%20a%20string%20that%20maps%20to%20a%20%5BURL%5D.';\n      for(const proof of proofs) {\n        await shouldMapToUrl({\n          doc: {\n            '@context': data['@context'],\n            ...proof\n          },\n          term: 'https://w3id.org/security#verificationMethod',\n          prop: '@id',\n          documentLoader\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "p0z5X_a8SbyICvvAEIUUP",
              "ctx": null,
              "_testId": "urn:uuid:f7d094b3-b0b4-4bf4-bbb3-fa37808976eb",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "A verification method is the means and information needed to verify the proof. If included, the value MUST be a string that maps to a [URL]"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=A%20verification%20method%20is%20the%20means%20and%20information%20needed%20to%20verify%20the%20proof.%20If%20included%2C%20the%20value%20MUST%20be%20a%20string%20that%20maps%20to%20a%20%5BURL%5D.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1104,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 2,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "A verification method is the means and information needed to verify the proof. If included, the value MUST be a string that maps to a [URL]",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=A%20verification%20method%20is%20the%20means%20and%20information%20needed%20to%20verify%20the%20proof.%20If%20included%2C%20the%20value%20MUST%20be%20a%20string%20that%20maps%20to%20a%20%5BURL%5D.';\n      for(const proof of proofs) {\n        await shouldMapToUrl({\n          doc: {\n            '@context': data['@context'],\n            ...proof\n          },\n          term: 'https://w3id.org/security#verificationMethod',\n          prop: '@id',\n          documentLoader\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "P6-Fcl6bFqa3F88kTD5Wy",
              "ctx": null,
              "_testId": "urn:uuid:b7ecf615-81e5-4822-a20c-09a09ee9ef6a",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "A verification method is the means and information needed to verify the proof. If included, the value MUST be a string that maps to a [URL]"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=A%20verification%20method%20is%20the%20means%20and%20information%20needed%20to%20verify%20the%20proof.%20If%20included%2C%20the%20value%20MUST%20be%20a%20string%20that%20maps%20to%20a%20%5BURL%5D.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1710,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "A verification method is the means and information needed to verify the proof. If included, the value MUST be a string that maps to a [URL]",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=A%20verification%20method%20is%20the%20means%20and%20information%20needed%20to%20verify%20the%20proof.%20If%20included%2C%20the%20value%20MUST%20be%20a%20string%20that%20maps%20to%20a%20%5BURL%5D.';\n      for(const proof of proofs) {\n        await shouldMapToUrl({\n          doc: {\n            '@context': data['@context'],\n            ...proof\n          },\n          term: 'https://w3id.org/security#verificationMethod',\n          prop: '@id',\n          documentLoader\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "A-KW4fZO9QGbsyZkZ2ZWI",
              "ctx": null,
              "_testId": "urn:uuid:114669fd-9243-4947-aa74-c80285eeeeba",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "A verification method is the means and information needed to verify the proof. If included, the value MUST be a string that maps to a [URL]"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=A%20verification%20method%20is%20the%20means%20and%20information%20needed%20to%20verify%20the%20proof.%20If%20included%2C%20the%20value%20MUST%20be%20a%20string%20that%20maps%20to%20a%20%5BURL%5D.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2455,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "cell": {
                "rowId": "A verification method is the means and information needed to verify the proof. If included, the value MUST be a string that maps to a [URL]",
                "colId": "OpSecId"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            },
            {
              "type": "test",
              "title": "A verification method is the means and information needed to verify the proof. If included, the value MUST be a string that maps to a [URL]",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=A%20verification%20method%20is%20the%20means%20and%20information%20needed%20to%20verify%20the%20proof.%20If%20included%2C%20the%20value%20MUST%20be%20a%20string%20that%20maps%20to%20a%20%5BURL%5D.';\n      for(const proof of proofs) {\n        await shouldMapToUrl({\n          doc: {\n            '@context': data['@context'],\n            ...proof\n          },\n          term: 'https://w3id.org/security#verificationMethod',\n          prop: '@id',\n          documentLoader\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "iA97ETyVVLCXoJl9VcrPz",
              "ctx": null,
              "_testId": "urn:uuid:63763701-92ae-4379-8843-03d2e15e84fe",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "A verification method is the means and information needed to verify the proof. If included, the value MUST be a string that maps to a [URL]"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=A%20verification%20method%20is%20the%20means%20and%20information%20needed%20to%20verify%20the%20proof.%20If%20included%2C%20the%20value%20MUST%20be%20a%20string%20that%20maps%20to%20a%20%5BURL%5D.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3390,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "A verification method is the means and information needed to verify the proof. If included, the value MUST be a string that maps to a [URL]",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=A%20verification%20method%20is%20the%20means%20and%20information%20needed%20to%20verify%20the%20proof.%20If%20included%2C%20the%20value%20MUST%20be%20a%20string%20that%20maps%20to%20a%20%5BURL%5D.';\n      for(const proof of proofs) {\n        await shouldMapToUrl({\n          doc: {\n            '@context': data['@context'],\n            ...proof\n          },\n          term: 'https://w3id.org/security#verificationMethod',\n          prop: '@id',\n          documentLoader\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "2VGiV4rJyIo1DbvXHIrx2",
              "ctx": null,
              "_testId": "urn:uuid:3e90bca6-3e72-4648-9007-63d8c6edac2f",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "A verification method is the means and information needed to verify the proof. If included, the value MUST be a string that maps to a [URL]"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=A%20verification%20method%20is%20the%20means%20and%20information%20needed%20to%20verify%20the%20proof.%20If%20included%2C%20the%20value%20MUST%20be%20a%20string%20that%20maps%20to%20a%20%5BURL%5D.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3752,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "jsonld.InvalidUrl",
                "details": {
                  "code": "loading remote context failed",
                  "url": "https://w3id.org/security/data-integrity/v1",
                  "cause": {}
                }
              }
            },
            {
              "type": "test",
              "title": "A verification method is the means and information needed to verify the proof. If included, the value MUST be a string that maps to a [URL]",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=A%20verification%20method%20is%20the%20means%20and%20information%20needed%20to%20verify%20the%20proof.%20If%20included%2C%20the%20value%20MUST%20be%20a%20string%20that%20maps%20to%20a%20%5BURL%5D.';\n      for(const proof of proofs) {\n        await shouldMapToUrl({\n          doc: {\n            '@context': data['@context'],\n            ...proof\n          },\n          term: 'https://w3id.org/security#verificationMethod',\n          prop: '@id',\n          documentLoader\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "GiFchlSHnrHGbDB__tDI9",
              "ctx": null,
              "_testId": "urn:uuid:44451bfd-fdda-4fa1-9518-8e6a858f2ca7",
              "cell": {
                "columnId": "bovine",
                "rowId": "A verification method is the means and information needed to verify the proof. If included, the value MUST be a string that maps to a [URL]"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=A%20verification%20method%20is%20the%20means%20and%20information%20needed%20to%20verify%20the%20proof.%20If%20included%2C%20the%20value%20MUST%20be%20a%20string%20that%20maps%20to%20a%20%5BURL%5D.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9306,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "The reason the proof was created (\"proof.proofPurpose\") MUST be specified as a string that maps to a URL",
          "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20reason%20the%20proof%20was%20created%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL",
          "cells": [
            {
              "type": "test",
              "title": "The reason the proof was created (\"proof.proofPurpose\") MUST be specified as a string that maps to a URL",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20reason%20the%20proof%20was%20created%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL';\n      for(const proof of proofs) {\n        proof.should.have.property('proofPurpose');\n        proof.proofPurpose.should.be.a('string');\n        await shouldMapToUrl({\n          doc: {\n            '@context': data['@context'],\n            ...proof\n          },\n          term: 'https://w3id.org/security#proofPurpose',\n          prop: '@id',\n          documentLoader\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "p0z5X_a8SbyICvvAEIUUP",
              "ctx": null,
              "_testId": "urn:uuid:12f28223-fb11-4813-870f-333074d09f5e",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "The reason the proof was created (\"proof.proofPurpose\") MUST be specified as a string that maps to a URL"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20reason%20the%20proof%20was%20created%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1106,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The reason the proof was created (\"proof.proofPurpose\") MUST be specified as a string that maps to a URL",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20reason%20the%20proof%20was%20created%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL';\n      for(const proof of proofs) {\n        proof.should.have.property('proofPurpose');\n        proof.proofPurpose.should.be.a('string');\n        await shouldMapToUrl({\n          doc: {\n            '@context': data['@context'],\n            ...proof\n          },\n          term: 'https://w3id.org/security#proofPurpose',\n          prop: '@id',\n          documentLoader\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "P6-Fcl6bFqa3F88kTD5Wy",
              "ctx": null,
              "_testId": "urn:uuid:72b1923c-fe79-45ba-9691-705e5213d5a2",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The reason the proof was created (\"proof.proofPurpose\") MUST be specified as a string that maps to a URL"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20reason%20the%20proof%20was%20created%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1712,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The reason the proof was created (\"proof.proofPurpose\") MUST be specified as a string that maps to a URL",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20reason%20the%20proof%20was%20created%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL';\n      for(const proof of proofs) {\n        proof.should.have.property('proofPurpose');\n        proof.proofPurpose.should.be.a('string');\n        await shouldMapToUrl({\n          doc: {\n            '@context': data['@context'],\n            ...proof\n          },\n          term: 'https://w3id.org/security#proofPurpose',\n          prop: '@id',\n          documentLoader\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "A-KW4fZO9QGbsyZkZ2ZWI",
              "ctx": null,
              "_testId": "urn:uuid:b2d71695-1cd8-49da-8611-d81606c28527",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The reason the proof was created (\"proof.proofPurpose\") MUST be specified as a string that maps to a URL"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20reason%20the%20proof%20was%20created%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2458,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "cell": {
                "rowId": "The reason the proof was created (\"proof.proofPurpose\") MUST be specified as a string that maps to a URL",
                "colId": "OpSecId"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            },
            {
              "type": "test",
              "title": "The reason the proof was created (\"proof.proofPurpose\") MUST be specified as a string that maps to a URL",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20reason%20the%20proof%20was%20created%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL';\n      for(const proof of proofs) {\n        proof.should.have.property('proofPurpose');\n        proof.proofPurpose.should.be.a('string');\n        await shouldMapToUrl({\n          doc: {\n            '@context': data['@context'],\n            ...proof\n          },\n          term: 'https://w3id.org/security#proofPurpose',\n          prop: '@id',\n          documentLoader\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "iA97ETyVVLCXoJl9VcrPz",
              "ctx": null,
              "_testId": "urn:uuid:7e834fce-8f73-47a2-a3d1-c97c186e16d9",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The reason the proof was created (\"proof.proofPurpose\") MUST be specified as a string that maps to a URL"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20reason%20the%20proof%20was%20created%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3391,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The reason the proof was created (\"proof.proofPurpose\") MUST be specified as a string that maps to a URL",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20reason%20the%20proof%20was%20created%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL';\n      for(const proof of proofs) {\n        proof.should.have.property('proofPurpose');\n        proof.proofPurpose.should.be.a('string');\n        await shouldMapToUrl({\n          doc: {\n            '@context': data['@context'],\n            ...proof\n          },\n          term: 'https://w3id.org/security#proofPurpose',\n          prop: '@id',\n          documentLoader\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "2VGiV4rJyIo1DbvXHIrx2",
              "ctx": null,
              "_testId": "urn:uuid:fe73abfc-0c50-46c3-b4b6-b12e66c482fe",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "The reason the proof was created (\"proof.proofPurpose\") MUST be specified as a string that maps to a URL"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20reason%20the%20proof%20was%20created%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3753,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "failed",
              "err": {
                "name": "jsonld.InvalidUrl",
                "details": {
                  "code": "loading remote context failed",
                  "url": "https://w3id.org/security/data-integrity/v1",
                  "cause": {}
                }
              }
            },
            {
              "type": "test",
              "title": "The reason the proof was created (\"proof.proofPurpose\") MUST be specified as a string that maps to a URL",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20reason%20the%20proof%20was%20created%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL';\n      for(const proof of proofs) {\n        proof.should.have.property('proofPurpose');\n        proof.proofPurpose.should.be.a('string');\n        await shouldMapToUrl({\n          doc: {\n            '@context': data['@context'],\n            ...proof\n          },\n          term: 'https://w3id.org/security#proofPurpose',\n          prop: '@id',\n          documentLoader\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "GiFchlSHnrHGbDB__tDI9",
              "ctx": null,
              "_testId": "urn:uuid:537acfd1-d0f6-4b2d-b2be-8ac0da4ff242",
              "cell": {
                "columnId": "bovine",
                "rowId": "The reason the proof was created (\"proof.proofPurpose\") MUST be specified as a string that maps to a URL"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20reason%20the%20proof%20was%20created%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9308,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification.",
          "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof",
          "cells": [
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof';\n      for(const proof of proofs) {\n        should.exist(proof, 'Expected proof to exist.');\n        const {\n          prefix: expectedPrefix,\n          name: encodingName\n        } = expectedMultibasePrefix(proof.cryptosuite);\n        shouldHaveProofValue({proof, expectedPrefix, encodingName});\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "p0z5X_a8SbyICvvAEIUUP",
              "ctx": null,
              "_testId": "urn:uuid:6f06354f-046b-45dc-b52e-f6f3fc173d8f",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof';\n      for(const proof of proofs) {\n        should.exist(proof, 'Expected proof to exist.');\n        const {\n          prefix: expectedPrefix,\n          name: encodingName\n        } = expectedMultibasePrefix(proof.cryptosuite);\n        shouldHaveProofValue({proof, expectedPrefix, encodingName});\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "P6-Fcl6bFqa3F88kTD5Wy",
              "ctx": null,
              "_testId": "urn:uuid:1e6166e9-b824-4638-9a6d-8ac19699636d",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof';\n      for(const proof of proofs) {\n        should.exist(proof, 'Expected proof to exist.');\n        const {\n          prefix: expectedPrefix,\n          name: encodingName\n        } = expectedMultibasePrefix(proof.cryptosuite);\n        shouldHaveProofValue({proof, expectedPrefix, encodingName});\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "A-KW4fZO9QGbsyZkZ2ZWI",
              "ctx": null,
              "_testId": "urn:uuid:982de1eb-d59a-442b-83f1-774e39a234a4",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "cell": {
                "rowId": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification.",
                "colId": "OpSecId"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            },
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof';\n      for(const proof of proofs) {\n        should.exist(proof, 'Expected proof to exist.');\n        const {\n          prefix: expectedPrefix,\n          name: encodingName\n        } = expectedMultibasePrefix(proof.cryptosuite);\n        shouldHaveProofValue({proof, expectedPrefix, encodingName});\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "iA97ETyVVLCXoJl9VcrPz",
              "ctx": null,
              "_testId": "urn:uuid:1d531a88-836f-463d-82a0-49327debb684",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof';\n      for(const proof of proofs) {\n        should.exist(proof, 'Expected proof to exist.');\n        const {\n          prefix: expectedPrefix,\n          name: encodingName\n        } = expectedMultibasePrefix(proof.cryptosuite);\n        shouldHaveProofValue({proof, expectedPrefix, encodingName});\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "2VGiV4rJyIo1DbvXHIrx2",
              "ctx": null,
              "_testId": "urn:uuid:d83278ee-71a0-45b8-991a-8b531b156a91",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof';\n      for(const proof of proofs) {\n        should.exist(proof, 'Expected proof to exist.');\n        const {\n          prefix: expectedPrefix,\n          name: encodingName\n        } = expectedMultibasePrefix(proof.cryptosuite);\n        shouldHaveProofValue({proof, expectedPrefix, encodingName});\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "GiFchlSHnrHGbDB__tDI9",
              "ctx": null,
              "_testId": "urn:uuid:77b10791-0532-4f65-82b7-3615b537bde7",
              "cell": {
                "columnId": "bovine",
                "rowId": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "if \"proof.previousProof\" field exists, it MUST be a string.",
          "cells": [
            {
              "type": "test",
              "title": "if \"proof.previousProof\" field exists, it MUST be a string.",
              "body": "function() {\n        for(const proof of proofs) {\n          if(proof.previousProof) {\n            proof.previousProof.should.be.a('string', 'Expected ' +\n              '\"proof.previousProof\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "p0z5X_a8SbyICvvAEIUUP",
              "ctx": null,
              "_testId": "urn:uuid:daadff68-7a0d-4f4b-83a3-799457e34988",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "if \"proof.previousProof\" field exists, it MUST be a string."
              },
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.previousProof\" field exists, it MUST be a string.",
              "body": "function() {\n        for(const proof of proofs) {\n          if(proof.previousProof) {\n            proof.previousProof.should.be.a('string', 'Expected ' +\n              '\"proof.previousProof\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "P6-Fcl6bFqa3F88kTD5Wy",
              "ctx": null,
              "_testId": "urn:uuid:577149c4-70ab-4c4d-8954-0dba46e23a1f",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "if \"proof.previousProof\" field exists, it MUST be a string."
              },
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.previousProof\" field exists, it MUST be a string.",
              "body": "function() {\n        for(const proof of proofs) {\n          if(proof.previousProof) {\n            proof.previousProof.should.be.a('string', 'Expected ' +\n              '\"proof.previousProof\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "A-KW4fZO9QGbsyZkZ2ZWI",
              "ctx": null,
              "_testId": "urn:uuid:569b82be-1324-4eb7-945b-d36a280d186b",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "if \"proof.previousProof\" field exists, it MUST be a string."
              },
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "cell": {
                "rowId": "if \"proof.previousProof\" field exists, it MUST be a string.",
                "colId": "OpSecId"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            },
            {
              "type": "test",
              "title": "if \"proof.previousProof\" field exists, it MUST be a string.",
              "body": "function() {\n        for(const proof of proofs) {\n          if(proof.previousProof) {\n            proof.previousProof.should.be.a('string', 'Expected ' +\n              '\"proof.previousProof\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "iA97ETyVVLCXoJl9VcrPz",
              "ctx": null,
              "_testId": "urn:uuid:942833bb-cadf-4d94-a91b-8012093e195a",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "if \"proof.previousProof\" field exists, it MUST be a string."
              },
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.previousProof\" field exists, it MUST be a string.",
              "body": "function() {\n        for(const proof of proofs) {\n          if(proof.previousProof) {\n            proof.previousProof.should.be.a('string', 'Expected ' +\n              '\"proof.previousProof\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "2VGiV4rJyIo1DbvXHIrx2",
              "ctx": null,
              "_testId": "urn:uuid:4fa5bf1e-5e17-4587-af66-a55d03b971f3",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "if \"proof.previousProof\" field exists, it MUST be a string."
              },
              "_events": {},
              "_eventsCount": 1,
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.previousProof\" field exists, it MUST be a string.",
              "body": "function() {\n        for(const proof of proofs) {\n          if(proof.previousProof) {\n            proof.previousProof.should.be.a('string', 'Expected ' +\n              '\"proof.previousProof\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "GiFchlSHnrHGbDB__tDI9",
              "ctx": null,
              "_testId": "urn:uuid:b1d3edf5-4eca-43a6-a1d3-b0881e05f0c2",
              "cell": {
                "columnId": "bovine",
                "rowId": "if \"proof.previousProof\" field exists, it MUST be a string."
              },
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "if \"proof.nonce\" field exists, it MUST be a string.",
          "cells": [
            {
              "type": "test",
              "title": "if \"proof.nonce\" field exists, it MUST be a string.",
              "body": "function() {\n        for(const proof of proofs) {\n          if(proof.nonce) {\n            proof.nonce.should.be.a('string', 'Expected \"proof.nonce\" ' +\n              'to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "p0z5X_a8SbyICvvAEIUUP",
              "ctx": null,
              "_testId": "urn:uuid:472f4852-3b7b-4d8e-9e0a-5c28d1bbbac2",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "if \"proof.nonce\" field exists, it MUST be a string."
              },
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.nonce\" field exists, it MUST be a string.",
              "body": "function() {\n        for(const proof of proofs) {\n          if(proof.nonce) {\n            proof.nonce.should.be.a('string', 'Expected \"proof.nonce\" ' +\n              'to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "P6-Fcl6bFqa3F88kTD5Wy",
              "ctx": null,
              "_testId": "urn:uuid:51e00cdd-481d-45f6-867f-c89ab0e6df1a",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "if \"proof.nonce\" field exists, it MUST be a string."
              },
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.nonce\" field exists, it MUST be a string.",
              "body": "function() {\n        for(const proof of proofs) {\n          if(proof.nonce) {\n            proof.nonce.should.be.a('string', 'Expected \"proof.nonce\" ' +\n              'to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "A-KW4fZO9QGbsyZkZ2ZWI",
              "ctx": null,
              "_testId": "urn:uuid:754a0dd2-96af-4e75-a6ed-346fd25a3886",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "if \"proof.nonce\" field exists, it MUST be a string."
              },
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "cell": {
                "rowId": "if \"proof.nonce\" field exists, it MUST be a string.",
                "colId": "OpSecId"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            },
            {
              "type": "test",
              "title": "if \"proof.nonce\" field exists, it MUST be a string.",
              "body": "function() {\n        for(const proof of proofs) {\n          if(proof.nonce) {\n            proof.nonce.should.be.a('string', 'Expected \"proof.nonce\" ' +\n              'to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "iA97ETyVVLCXoJl9VcrPz",
              "ctx": null,
              "_testId": "urn:uuid:12bb812c-8266-46f4-b5ab-9959ae7e9640",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "if \"proof.nonce\" field exists, it MUST be a string."
              },
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.nonce\" field exists, it MUST be a string.",
              "body": "function() {\n        for(const proof of proofs) {\n          if(proof.nonce) {\n            proof.nonce.should.be.a('string', 'Expected \"proof.nonce\" ' +\n              'to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "2VGiV4rJyIo1DbvXHIrx2",
              "ctx": null,
              "_testId": "urn:uuid:50837691-f061-4912-a65a-e70f9d1d2ce7",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "if \"proof.nonce\" field exists, it MUST be a string."
              },
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.nonce\" field exists, it MUST be a string.",
              "body": "function() {\n        for(const proof of proofs) {\n          if(proof.nonce) {\n            proof.nonce.should.be.a('string', 'Expected \"proof.nonce\" ' +\n              'to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "GiFchlSHnrHGbDB__tDI9",
              "ctx": null,
              "_testId": "urn:uuid:fb3e950a-1fe0-4716-ae66-0a128aba0536",
              "cell": {
                "columnId": "bovine",
                "rowId": "if \"proof.nonce\" field exists, it MUST be a string."
              },
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "Cryptographic suite designers MUST use mandatory proof value properties defined in Section 2.1 Proofs, and MAY define other properties specific to their cryptographic suite.",
          "link": "https://w3c.github.io/vc-data-integrity/#add-proof:~:text=MUST%20use%20mandatory%20proof%20value%20properties%20defined",
          "cells": [
            {
              "type": "test",
              "title": "Cryptographic suite designers MUST use mandatory proof value properties defined in Section 2.1 Proofs, and MAY define other properties specific to their cryptographic suite.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#add-proof:~:text=MUST%20use%20mandatory%20proof%20value%20properties%20defined';\n      for(const proof of proofs) {\n        shouldBeProof({proof});\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "p0z5X_a8SbyICvvAEIUUP",
              "ctx": null,
              "_testId": "urn:uuid:f22eb48b-c017-490a-9169-392bab68b643",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "Cryptographic suite designers MUST use mandatory proof value properties defined in Section 2.1 Proofs, and MAY define other properties specific to their cryptographic suite."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#add-proof:~:text=MUST%20use%20mandatory%20proof%20value%20properties%20defined",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1109,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Cryptographic suite designers MUST use mandatory proof value properties defined in Section 2.1 Proofs, and MAY define other properties specific to their cryptographic suite.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#add-proof:~:text=MUST%20use%20mandatory%20proof%20value%20properties%20defined';\n      for(const proof of proofs) {\n        shouldBeProof({proof});\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "P6-Fcl6bFqa3F88kTD5Wy",
              "ctx": null,
              "_testId": "urn:uuid:3ba381e8-7010-4abf-98be-c4e6636005ca",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "Cryptographic suite designers MUST use mandatory proof value properties defined in Section 2.1 Proofs, and MAY define other properties specific to their cryptographic suite."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#add-proof:~:text=MUST%20use%20mandatory%20proof%20value%20properties%20defined",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1713,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Cryptographic suite designers MUST use mandatory proof value properties defined in Section 2.1 Proofs, and MAY define other properties specific to their cryptographic suite.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#add-proof:~:text=MUST%20use%20mandatory%20proof%20value%20properties%20defined';\n      for(const proof of proofs) {\n        shouldBeProof({proof});\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "A-KW4fZO9QGbsyZkZ2ZWI",
              "ctx": null,
              "_testId": "urn:uuid:1abeb969-e4d1-4dfd-bcd5-2104ea27f1b6",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "Cryptographic suite designers MUST use mandatory proof value properties defined in Section 2.1 Proofs, and MAY define other properties specific to their cryptographic suite."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#add-proof:~:text=MUST%20use%20mandatory%20proof%20value%20properties%20defined",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2460,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "cell": {
                "rowId": "Cryptographic suite designers MUST use mandatory proof value properties defined in Section 2.1 Proofs, and MAY define other properties specific to their cryptographic suite.",
                "colId": "OpSecId"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            },
            {
              "type": "test",
              "title": "Cryptographic suite designers MUST use mandatory proof value properties defined in Section 2.1 Proofs, and MAY define other properties specific to their cryptographic suite.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#add-proof:~:text=MUST%20use%20mandatory%20proof%20value%20properties%20defined';\n      for(const proof of proofs) {\n        shouldBeProof({proof});\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "iA97ETyVVLCXoJl9VcrPz",
              "ctx": null,
              "_testId": "urn:uuid:8ac57293-463b-4638-909d-697722c2c21c",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "Cryptographic suite designers MUST use mandatory proof value properties defined in Section 2.1 Proofs, and MAY define other properties specific to their cryptographic suite."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#add-proof:~:text=MUST%20use%20mandatory%20proof%20value%20properties%20defined",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3393,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Cryptographic suite designers MUST use mandatory proof value properties defined in Section 2.1 Proofs, and MAY define other properties specific to their cryptographic suite.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#add-proof:~:text=MUST%20use%20mandatory%20proof%20value%20properties%20defined';\n      for(const proof of proofs) {\n        shouldBeProof({proof});\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "2VGiV4rJyIo1DbvXHIrx2",
              "ctx": null,
              "_testId": "urn:uuid:b9beebaa-8060-4b12-82ba-1142745892c4",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "Cryptographic suite designers MUST use mandatory proof value properties defined in Section 2.1 Proofs, and MAY define other properties specific to their cryptographic suite."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#add-proof:~:text=MUST%20use%20mandatory%20proof%20value%20properties%20defined",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3754,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Cryptographic suite designers MUST use mandatory proof value properties defined in Section 2.1 Proofs, and MAY define other properties specific to their cryptographic suite.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#add-proof:~:text=MUST%20use%20mandatory%20proof%20value%20properties%20defined';\n      for(const proof of proofs) {\n        shouldBeProof({proof});\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "GiFchlSHnrHGbDB__tDI9",
              "ctx": null,
              "_testId": "urn:uuid:5b904026-960e-41bf-b273-c1a5c8ede10d",
              "cell": {
                "columnId": "bovine",
                "rowId": "Cryptographic suite designers MUST use mandatory proof value properties defined in Section 2.1 Proofs, and MAY define other properties specific to their cryptographic suite."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#add-proof:~:text=MUST%20use%20mandatory%20proof%20value%20properties%20defined",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9310,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
          "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
          "cells": [
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      const undefinedType = structuredClone(credential);\n      undefinedType.type.push('InvalidType');\n      await shouldFailIssuance({\n        credential: undefinedType,\n        issuer,\n        reason: 'Expected issuer to error when VC has an undefined type.'\n      });\n      const undefinedTerm = structuredClone(credential);\n      undefinedTerm.credentialSubject.invalidTerm = 'invalidTerm';\n      await shouldFailIssuance({\n        credential: undefinedTerm,\n        issuer,\n        reason: 'Expected issuer to error when VC has an undefined term.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "p0z5X_a8SbyICvvAEIUUP",
              "ctx": null,
              "_testId": "urn:uuid:326de654-4ede-4544-8d73-4bd86d978d7a",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1110,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 69,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected issuer to error when VC has an undefined type.: expected Response { status: 201, statusText: 'Created', headers: Headers { 'content-type': 'application/ld+json', 'x-cloud-trace-context': 'dcdd853ffe8acce91ab9a368e8a9238d', date: 'Sun, 25 Aug 2024 05:05:23 GMT', server: 'Google Frontend', 'content-length': '805', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected issuer to error when VC has an undefined type.: expected Response { status: 201, statusText: 'Created', headers: Headers { 'content-type': 'application/ld+json', 'x-cloud-trace-context': 'dcdd853ffe8acce91ab9a368e8a9238d', date: 'Sun, 25 Aug 2024 05:05:23 GMT', server: 'Google Frontend', 'content-length': '805', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at shouldFailIssuance (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:71:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/suites/create.js:246:7)"
              }
            },
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      const undefinedType = structuredClone(credential);\n      undefinedType.type.push('InvalidType');\n      await shouldFailIssuance({\n        credential: undefinedType,\n        issuer,\n        reason: 'Expected issuer to error when VC has an undefined type.'\n      });\n      const undefinedTerm = structuredClone(credential);\n      undefinedTerm.credentialSubject.invalidTerm = 'invalidTerm';\n      await shouldFailIssuance({\n        credential: undefinedTerm,\n        issuer,\n        reason: 'Expected issuer to error when VC has an undefined term.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "P6-Fcl6bFqa3F88kTD5Wy",
              "ctx": null,
              "_testId": "urn:uuid:4327a10c-4572-4929-a062-f698f881cbc1",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1714,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 245,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      const undefinedType = structuredClone(credential);\n      undefinedType.type.push('InvalidType');\n      await shouldFailIssuance({\n        credential: undefinedType,\n        issuer,\n        reason: 'Expected issuer to error when VC has an undefined type.'\n      });\n      const undefinedTerm = structuredClone(credential);\n      undefinedTerm.credentialSubject.invalidTerm = 'invalidTerm';\n      await shouldFailIssuance({\n        credential: undefinedTerm,\n        issuer,\n        reason: 'Expected issuer to error when VC has an undefined term.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "A-KW4fZO9QGbsyZkZ2ZWI",
              "ctx": null,
              "_testId": "urn:uuid:4dae9fc7-84ce-4fef-9e78-e9d418c2e1fc",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2460,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 395,
              "state": "passed",
              "speed": "slow"
            },
            {
              "cell": {
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
                "colId": "OpSecId"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            },
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      const undefinedType = structuredClone(credential);\n      undefinedType.type.push('InvalidType');\n      await shouldFailIssuance({\n        credential: undefinedType,\n        issuer,\n        reason: 'Expected issuer to error when VC has an undefined type.'\n      });\n      const undefinedTerm = structuredClone(credential);\n      undefinedTerm.credentialSubject.invalidTerm = 'invalidTerm';\n      await shouldFailIssuance({\n        credential: undefinedTerm,\n        issuer,\n        reason: 'Expected issuer to error when VC has an undefined term.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "iA97ETyVVLCXoJl9VcrPz",
              "ctx": null,
              "_testId": "urn:uuid:f5b01243-f371-4731-bf76-57dcd1871851",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3393,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 84,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      const undefinedType = structuredClone(credential);\n      undefinedType.type.push('InvalidType');\n      await shouldFailIssuance({\n        credential: undefinedType,\n        issuer,\n        reason: 'Expected issuer to error when VC has an undefined type.'\n      });\n      const undefinedTerm = structuredClone(credential);\n      undefinedTerm.credentialSubject.invalidTerm = 'invalidTerm';\n      await shouldFailIssuance({\n        credential: undefinedTerm,\n        issuer,\n        reason: 'Expected issuer to error when VC has an undefined term.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "2VGiV4rJyIo1DbvXHIrx2",
              "ctx": null,
              "_testId": "urn:uuid:4fb93232-8811-4c87-857c-9f792f3b7635",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3754,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 65,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected issuer to error when VC has an undefined type.: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 25 Aug 2024 05:05:25 GMT', 'content-type': 'text/html; charset=utf-8', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'cache-control': 'no-cache,no-store', expires: '-1', pragma: 'no-cache', 'x-envoy-upstream-service-time': '46', 'cf-cache-status': 'DYNAMIC', 'report-to': '{\"endpoints\":[{\"url\":\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=pEvXAwBChZceZov9okA9zgswvB4GvbPo013FNxGGbbNWSBQv0JdGzwKT1FzlCG42d9fSjSB1LtHXiOJpsGpCxPDev19VvbOLXt9hLZ7An%2FgLtxhx2YemydytYoG7w%2FtyMhKgpdzHJwwDm77uC1ry\"}],\"group\":\"cf-nel\",\"max_age\":604800}', nel: '{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}', server: 'cloudflare', 'cf-ray': '8b890c09088b57a2-IAD', 'content-encoding': 'br', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: null, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected issuer to error when VC has an undefined type.: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 25 Aug 2024 05:05:25 GMT', 'content-type': 'text/html; charset=utf-8', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'cache-control': 'no-cache,no-store', expires: '-1', pragma: 'no-cache', 'x-envoy-upstream-service-time': '46', 'cf-cache-status': 'DYNAMIC', 'report-to': '{\"endpoints\":[{\"url\":\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=pEvXAwBChZceZov9okA9zgswvB4GvbPo013FNxGGbbNWSBQv0JdGzwKT1FzlCG42d9fSjSB1LtHXiOJpsGpCxPDev19VvbOLXt9hLZ7An%2FgLtxhx2YemydytYoG7w%2FtyMhKgpdzHJwwDm77uC1ry\"}],\"group\":\"cf-nel\",\"max_age\":604800}', nel: '{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}', server: 'cloudflare', 'cf-ray': '8b890c09088b57a2-IAD', 'content-encoding': 'br', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: null, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at shouldFailIssuance (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:71:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/suites/create.js:246:7)"
              }
            },
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      const undefinedType = structuredClone(credential);\n      undefinedType.type.push('InvalidType');\n      await shouldFailIssuance({\n        credential: undefinedType,\n        issuer,\n        reason: 'Expected issuer to error when VC has an undefined type.'\n      });\n      const undefinedTerm = structuredClone(credential);\n      undefinedTerm.credentialSubject.invalidTerm = 'invalidTerm';\n      await shouldFailIssuance({\n        credential: undefinedTerm,\n        issuer,\n        reason: 'Expected issuer to error when VC has an undefined term.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "GiFchlSHnrHGbDB__tDI9",
              "ctx": null,
              "_testId": "urn:uuid:1080d662-7187-478d-9dfe-09bd30850585",
              "cell": {
                "columnId": "bovine",
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9310,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 111,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected issuer to error when VC has an undefined type.: expected Response { status: 200, statusText: 'OK', headers: Headers { server: 'nginx/1.18.0 (Ubuntu)', date: 'Sun, 25 Aug 2024 05:05:31 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'content-encoding': 'gzip', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected issuer to error when VC has an undefined type.: expected Response { status: 200, statusText: 'OK', headers: Headers { server: 'nginx/1.18.0 (Ubuntu)', date: 'Sun, 25 Aug 2024 05:05:31 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'content-encoding': 'gzip', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at shouldFailIssuance (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:71:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/suites/create.js:246:7)"
              }
            }
          ]
        },
        {
          "id": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite.",
          "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
          "cells": [
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n        const hasCryptosuiteName = proofs.some(\n          p => p?.cryptosuite === cryptosuiteName);\n        hasCryptosuiteName.should.equal(\n          true,\n          `Expected at least one proof with cryptosuite ${cryptosuiteName}`);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "p0z5X_a8SbyICvvAEIUUP",
              "ctx": null,
              "_testId": "urn:uuid:890aadba-b016-4055-8782-62efc07cbecc",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1181,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n        const hasCryptosuiteName = proofs.some(\n          p => p?.cryptosuite === cryptosuiteName);\n        hasCryptosuiteName.should.equal(\n          true,\n          `Expected at least one proof with cryptosuite ${cryptosuiteName}`);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "P6-Fcl6bFqa3F88kTD5Wy",
              "ctx": null,
              "_testId": "urn:uuid:a6cf75b7-9dbc-4548-b08f-fa0298be0a22",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1958,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n        const hasCryptosuiteName = proofs.some(\n          p => p?.cryptosuite === cryptosuiteName);\n        hasCryptosuiteName.should.equal(\n          true,\n          `Expected at least one proof with cryptosuite ${cryptosuiteName}`);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "A-KW4fZO9QGbsyZkZ2ZWI",
              "ctx": null,
              "_testId": "urn:uuid:a293edce-1d62-48b3-bd3a-6e9d93adc1db",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2856,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "cell": {
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite.",
                "colId": "OpSecId"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n        const hasCryptosuiteName = proofs.some(\n          p => p?.cryptosuite === cryptosuiteName);\n        hasCryptosuiteName.should.equal(\n          true,\n          `Expected at least one proof with cryptosuite ${cryptosuiteName}`);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "iA97ETyVVLCXoJl9VcrPz",
              "ctx": null,
              "_testId": "urn:uuid:ec2e2e5e-212f-43dd-bc49-9a4bbd837bf5",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3477,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n        const hasCryptosuiteName = proofs.some(\n          p => p?.cryptosuite === cryptosuiteName);\n        hasCryptosuiteName.should.equal(\n          true,\n          `Expected at least one proof with cryptosuite ${cryptosuiteName}`);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "2VGiV4rJyIo1DbvXHIrx2",
              "ctx": null,
              "_testId": "urn:uuid:c3aa35bb-fd80-4b34-9873-143664f72895",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3820,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected at least one proof with cryptosuite eddsa-rdfc-2022: expected false to equal true",
                "showDiff": true,
                "actual": "false",
                "expected": "true",
                "operator": "strictEqual",
                "stack": "AssertionError: Expected at least one proof with cryptosuite eddsa-rdfc-2022: expected false to equal true\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/suites/create.js:265:35)\n    at process.processImmediate (node:internal/timers:483:21)"
              }
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n        const hasCryptosuiteName = proofs.some(\n          p => p?.cryptosuite === cryptosuiteName);\n        hasCryptosuiteName.should.equal(\n          true,\n          `Expected at least one proof with cryptosuite ${cryptosuiteName}`);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "GiFchlSHnrHGbDB__tDI9",
              "ctx": null,
              "_testId": "urn:uuid:258cd5e2-e7db-4f09-9d0c-ab3f7ff56d40",
              "cell": {
                "columnId": "bovine",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9422,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
          "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
          "cells": [
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n        const cryptoProp = 'https://w3id.org/security#cryptosuite';\n        const cryptoType = 'https://w3id.org/security#cryptosuiteString';\n        for(const {cryptosuite, type} of proofs) {\n          should.exist(cryptosuite,\n            'Expected property \"proof.cryptosuite\" to exist.');\n          should.exist(type,\n            'Expected property \"proof.type\" to exist.');\n          should.exist(data['@context'],\n            'Expected VC to have property \"@context\".');\n          const expanded = await jsonld.expand({\n            '@context': data['@context'],\n            cryptosuite,\n            type\n          }, {documentLoader});\n          for(const terms of expanded) {\n            const cryptoProperties = terms[cryptoProp];\n            should.exist(cryptoProperties,\n              `Expected property ${cryptoProp} to exist.`);\n            const hasTypeName = cryptoProperties.some(suite =>\n              suite['@type'] === cryptoType &&\n              suite['@value'] == cryptosuiteName);\n            hasTypeName.should.equal(true,\n              `Expected ${cryptoProp} with @value ${cryptosuiteName} & ` +\n              `@type ${cryptoType}`);\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "p0z5X_a8SbyICvvAEIUUP",
              "ctx": null,
              "_testId": "urn:uuid:8996c696-d2a4-48bd-b1bb-9e58b06fcf54",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1182,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n        const cryptoProp = 'https://w3id.org/security#cryptosuite';\n        const cryptoType = 'https://w3id.org/security#cryptosuiteString';\n        for(const {cryptosuite, type} of proofs) {\n          should.exist(cryptosuite,\n            'Expected property \"proof.cryptosuite\" to exist.');\n          should.exist(type,\n            'Expected property \"proof.type\" to exist.');\n          should.exist(data['@context'],\n            'Expected VC to have property \"@context\".');\n          const expanded = await jsonld.expand({\n            '@context': data['@context'],\n            cryptosuite,\n            type\n          }, {documentLoader});\n          for(const terms of expanded) {\n            const cryptoProperties = terms[cryptoProp];\n            should.exist(cryptoProperties,\n              `Expected property ${cryptoProp} to exist.`);\n            const hasTypeName = cryptoProperties.some(suite =>\n              suite['@type'] === cryptoType &&\n              suite['@value'] == cryptosuiteName);\n            hasTypeName.should.equal(true,\n              `Expected ${cryptoProp} with @value ${cryptosuiteName} & ` +\n              `@type ${cryptoType}`);\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "P6-Fcl6bFqa3F88kTD5Wy",
              "ctx": null,
              "_testId": "urn:uuid:128bf8ea-efba-45db-9b99-8b5ff53839d7",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1959,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n        const cryptoProp = 'https://w3id.org/security#cryptosuite';\n        const cryptoType = 'https://w3id.org/security#cryptosuiteString';\n        for(const {cryptosuite, type} of proofs) {\n          should.exist(cryptosuite,\n            'Expected property \"proof.cryptosuite\" to exist.');\n          should.exist(type,\n            'Expected property \"proof.type\" to exist.');\n          should.exist(data['@context'],\n            'Expected VC to have property \"@context\".');\n          const expanded = await jsonld.expand({\n            '@context': data['@context'],\n            cryptosuite,\n            type\n          }, {documentLoader});\n          for(const terms of expanded) {\n            const cryptoProperties = terms[cryptoProp];\n            should.exist(cryptoProperties,\n              `Expected property ${cryptoProp} to exist.`);\n            const hasTypeName = cryptoProperties.some(suite =>\n              suite['@type'] === cryptoType &&\n              suite['@value'] == cryptosuiteName);\n            hasTypeName.should.equal(true,\n              `Expected ${cryptoProp} with @value ${cryptosuiteName} & ` +\n              `@type ${cryptoType}`);\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "A-KW4fZO9QGbsyZkZ2ZWI",
              "ctx": null,
              "_testId": "urn:uuid:7e0019bb-c552-4ba9-981e-cc31869d5059",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2856,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "cell": {
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
                "colId": "OpSecId"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n        const cryptoProp = 'https://w3id.org/security#cryptosuite';\n        const cryptoType = 'https://w3id.org/security#cryptosuiteString';\n        for(const {cryptosuite, type} of proofs) {\n          should.exist(cryptosuite,\n            'Expected property \"proof.cryptosuite\" to exist.');\n          should.exist(type,\n            'Expected property \"proof.type\" to exist.');\n          should.exist(data['@context'],\n            'Expected VC to have property \"@context\".');\n          const expanded = await jsonld.expand({\n            '@context': data['@context'],\n            cryptosuite,\n            type\n          }, {documentLoader});\n          for(const terms of expanded) {\n            const cryptoProperties = terms[cryptoProp];\n            should.exist(cryptoProperties,\n              `Expected property ${cryptoProp} to exist.`);\n            const hasTypeName = cryptoProperties.some(suite =>\n              suite['@type'] === cryptoType &&\n              suite['@value'] == cryptosuiteName);\n            hasTypeName.should.equal(true,\n              `Expected ${cryptoProp} with @value ${cryptosuiteName} & ` +\n              `@type ${cryptoType}`);\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "iA97ETyVVLCXoJl9VcrPz",
              "ctx": null,
              "_testId": "urn:uuid:b936c445-ce47-42ff-99d2-295ae9ad0b09",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3477,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n        const cryptoProp = 'https://w3id.org/security#cryptosuite';\n        const cryptoType = 'https://w3id.org/security#cryptosuiteString';\n        for(const {cryptosuite, type} of proofs) {\n          should.exist(cryptosuite,\n            'Expected property \"proof.cryptosuite\" to exist.');\n          should.exist(type,\n            'Expected property \"proof.type\" to exist.');\n          should.exist(data['@context'],\n            'Expected VC to have property \"@context\".');\n          const expanded = await jsonld.expand({\n            '@context': data['@context'],\n            cryptosuite,\n            type\n          }, {documentLoader});\n          for(const terms of expanded) {\n            const cryptoProperties = terms[cryptoProp];\n            should.exist(cryptoProperties,\n              `Expected property ${cryptoProp} to exist.`);\n            const hasTypeName = cryptoProperties.some(suite =>\n              suite['@type'] === cryptoType &&\n              suite['@value'] == cryptosuiteName);\n            hasTypeName.should.equal(true,\n              `Expected ${cryptoProp} with @value ${cryptosuiteName} & ` +\n              `@type ${cryptoType}`);\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "2VGiV4rJyIo1DbvXHIrx2",
              "ctx": null,
              "_testId": "urn:uuid:b548604f-a766-4c48-975e-836957daad64",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3821,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "jsonld.InvalidUrl",
                "details": {
                  "code": "loading remote context failed",
                  "url": "https://w3id.org/security/data-integrity/v1",
                  "cause": {}
                }
              }
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n        const cryptoProp = 'https://w3id.org/security#cryptosuite';\n        const cryptoType = 'https://w3id.org/security#cryptosuiteString';\n        for(const {cryptosuite, type} of proofs) {\n          should.exist(cryptosuite,\n            'Expected property \"proof.cryptosuite\" to exist.');\n          should.exist(type,\n            'Expected property \"proof.type\" to exist.');\n          should.exist(data['@context'],\n            'Expected VC to have property \"@context\".');\n          const expanded = await jsonld.expand({\n            '@context': data['@context'],\n            cryptosuite,\n            type\n          }, {documentLoader});\n          for(const terms of expanded) {\n            const cryptoProperties = terms[cryptoProp];\n            should.exist(cryptoProperties,\n              `Expected property ${cryptoProp} to exist.`);\n            const hasTypeName = cryptoProperties.some(suite =>\n              suite['@type'] === cryptoType &&\n              suite['@value'] == cryptosuiteName);\n            hasTypeName.should.equal(true,\n              `Expected ${cryptoProp} with @value ${cryptosuiteName} & ` +\n              `@type ${cryptoType}`);\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "GiFchlSHnrHGbDB__tDI9",
              "ctx": null,
              "_testId": "urn:uuid:0fd21c28-8048-4863-bc69-69799f2b05fb",
              "cell": {
                "columnId": "bovine",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9422,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "When an application is securing a document, if an @context property is not provided in the document or the Data Integrity terms used in the document are not mapped by existing values in the @context property, implementations SHOULD inject or append an @context property with a value of https://w3id.org/security/data-integrity/v2 or one or more contexts with at least the same declarations, such as the Verifiable Credential Data Model v2.0 context (https://www.w3.org/ns/credentials/v2).",
          "link": "https://w3c.github.io/vc-data-integrity/#context-injection:~:text=if%20an%20%40context%20property%20is%20not%20provided%20in%20the%20document%20or%20the%20Data%20Integrity%20terms%20used%20in%20the%20document%20are%20not%20mapped%20by%20existing%20values%20in%20the%20%40context%20property%2C%20implementations%20SHOULD%20inject%20or%20append",
          "cells": [
            {
              "type": "test",
              "title": "When an application is securing a document, if an @context property is not provided in the document or the Data Integrity terms used in the document are not mapped by existing values in the @context property, implementations SHOULD inject or append an @context property with a value of https://w3id.org/security/data-integrity/v2 or one or more contexts with at least the same declarations, such as the Verifiable Credential Data Model v2.0 context (https://www.w3.org/ns/credentials/v2).",
              "body": "async function() {\n      if(!issuer) {\n        throw new Error(`Expected ${vendorName} to have an issuer.`);\n      }\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#context-injection:~:text=if%20an%20%40context%20property%20is%20not%20provided%20in%20the%20document%20or%20the%20Data%20Integrity%20terms%20used%20in%20the%20document%20are%20not%20mapped%20by%20existing%20values%20in%20the%20%40context%20property%2C%20implementations%20SHOULD%20inject%20or%20append';\n      if(optionalTests.contextInjection === false) {\n        this.test.cell.skipMessage = 'Optional Test Skipped';\n        this.skip();\n      }\n      const _credential = structuredClone(credential);\n      const expectedContexts = [\n        'https://w3id.org/security/data-integrity/v2',\n        'https://www.w3.org/ns/credentials/v2'\n      ];\n      // remove the vc's context and expect context injection to occur\n      delete _credential['@context'];\n      let err;\n      let data;\n      try {\n        data = await createInitialVc({issuer, credential: _credential});\n      } catch(e) {\n        err = e;\n      }\n      should.not.exist(\n        err,\n        `Expected issuer ${vendorName} to perform context injection on a ` +\n        `VC with out an \"@context\" property`);\n      should.exist(data, `Expected issuer ${vendorName} to return data.`);\n      data.should.be.an('object', 'Expected response data to be an object.');\n      should.exist(data['@context'],\n        'Expected data to have an injected \"@context\" property.');\n      if(Array.isArray(data['@context'])) {\n        const hasExpectedContext = expectedContexts.some(\n          ctx => data['@context'].includes(ctx));\n        return hasExpectedContext.should.equal(true,\n          `Expected injected context to contain one of ${expectedContexts}`);\n      }\n      data['@context'].should.be.oneOf(expectedContexts);\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "p0z5X_a8SbyICvvAEIUUP",
              "ctx": null,
              "_testId": "urn:uuid:58a208ec-d358-4184-bac6-b8f5814d9fe4",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "When an application is securing a document, if an @context property is not provided in the document or the Data Integrity terms used in the document are not mapped by existing values in the @context property, implementations SHOULD inject or append an @context property with a value of https://w3id.org/security/data-integrity/v2 or one or more contexts with at least the same declarations, such as the Verifiable Credential Data Model v2.0 context (https://www.w3.org/ns/credentials/v2)."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#context-injection:~:text=if%20an%20%40context%20property%20is%20not%20provided%20in%20the%20document%20or%20the%20Data%20Integrity%20terms%20used%20in%20the%20document%20are%20not%20mapped%20by%20existing%20values%20in%20the%20%40context%20property%2C%20implementations%20SHOULD%20inject%20or%20append",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1183,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 101,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected issuer apicatalog.com to perform context injection on a VC with out an \"@context\" property: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"credential\":{\"id\":\"urn:uuid:b7044db4-8bce-4ccd-9a98-9dd833c92a62\",\"type\":[\"VerifiableCredential\"],\"issuer\":\"https://vc.apicatalog.com/issuer/?suite=eddsa-rdfc-2022\",\"issuanceDate\":\"2020-03-16T22:37:26.544Z\",\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\"}},\"options\":{}}",
                    "method": "POST",
                    "json": {
                      "credential": {
                        "id": "urn:uuid:b7044db4-8bce-4ccd-9a98-9dd833c92a62",
                        "type": [
                          "VerifiableCredential"
                        ],
                        "issuer": "https://vc.apicatalog.com/issuer/?suite=eddsa-rdfc-2022",
                        "issuanceDate": "2020-03-16T22:37:26.544Z",
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                        }
                      },
                      "options": {}
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc.apicatalog.com/credentials/issue?suite=eddsa-rdfc-2022",
                  "status": 400,
                  "data": {
                    "id": "MALFORMED",
                    "code": "INVALID_DOCUMENT",
                    "message": null
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected issuer apicatalog.com to perform context injection on a VC with out an \"@context\" property: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/suites/create.js:442:18)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "When an application is securing a document, if an @context property is not provided in the document or the Data Integrity terms used in the document are not mapped by existing values in the @context property, implementations SHOULD inject or append an @context property with a value of https://w3id.org/security/data-integrity/v2 or one or more contexts with at least the same declarations, such as the Verifiable Credential Data Model v2.0 context (https://www.w3.org/ns/credentials/v2).",
              "body": "async function() {\n      if(!issuer) {\n        throw new Error(`Expected ${vendorName} to have an issuer.`);\n      }\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#context-injection:~:text=if%20an%20%40context%20property%20is%20not%20provided%20in%20the%20document%20or%20the%20Data%20Integrity%20terms%20used%20in%20the%20document%20are%20not%20mapped%20by%20existing%20values%20in%20the%20%40context%20property%2C%20implementations%20SHOULD%20inject%20or%20append';\n      if(optionalTests.contextInjection === false) {\n        this.test.cell.skipMessage = 'Optional Test Skipped';\n        this.skip();\n      }\n      const _credential = structuredClone(credential);\n      const expectedContexts = [\n        'https://w3id.org/security/data-integrity/v2',\n        'https://www.w3.org/ns/credentials/v2'\n      ];\n      // remove the vc's context and expect context injection to occur\n      delete _credential['@context'];\n      let err;\n      let data;\n      try {\n        data = await createInitialVc({issuer, credential: _credential});\n      } catch(e) {\n        err = e;\n      }\n      should.not.exist(\n        err,\n        `Expected issuer ${vendorName} to perform context injection on a ` +\n        `VC with out an \"@context\" property`);\n      should.exist(data, `Expected issuer ${vendorName} to return data.`);\n      data.should.be.an('object', 'Expected response data to be an object.');\n      should.exist(data['@context'],\n        'Expected data to have an injected \"@context\" property.');\n      if(Array.isArray(data['@context'])) {\n        const hasExpectedContext = expectedContexts.some(\n          ctx => data['@context'].includes(ctx));\n        return hasExpectedContext.should.equal(true,\n          `Expected injected context to contain one of ${expectedContexts}`);\n      }\n      data['@context'].should.be.oneOf(expectedContexts);\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "P6-Fcl6bFqa3F88kTD5Wy",
              "ctx": null,
              "_testId": "urn:uuid:bb4c4475-d074-4ce1-9a53-5a0cfd6048c1",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "When an application is securing a document, if an @context property is not provided in the document or the Data Integrity terms used in the document are not mapped by existing values in the @context property, implementations SHOULD inject or append an @context property with a value of https://w3id.org/security/data-integrity/v2 or one or more contexts with at least the same declarations, such as the Verifiable Credential Data Model v2.0 context (https://www.w3.org/ns/credentials/v2)."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#context-injection:~:text=if%20an%20%40context%20property%20is%20not%20provided%20in%20the%20document%20or%20the%20Data%20Integrity%20terms%20used%20in%20the%20document%20are%20not%20mapped%20by%20existing%20values%20in%20the%20%40context%20property%2C%20implementations%20SHOULD%20inject%20or%20append",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1959,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 37,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected issuer Digital Bazaar to perform context injection on a VC with out an \"@context\" property: expected HTTPError: A validation error occured in … { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "method": "POST",
                    "json": {
                      "credential": {
                        "id": "urn:uuid:5abc984f-a441-44d8-acd2-e6bc026227f0",
                        "type": [
                          "VerifiableCredential"
                        ],
                        "issuer": "did:key:z6MkkwVJXDkKXhu2y3E1iF2cbzCUL42veRdzC7FFvNAeJ3Ja",
                        "issuanceDate": "2020-03-16T22:37:26.544Z",
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                        }
                      },
                      "options": {}
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half",
                    "body": "{\"credential\":{\"id\":\"urn:uuid:5abc984f-a441-44d8-acd2-e6bc026227f0\",\"type\":[\"VerifiableCredential\"],\"issuer\":\"did:key:z6MkkwVJXDkKXhu2y3E1iF2cbzCUL42veRdzC7FFvNAeJ3Ja\",\"issuanceDate\":\"2020-03-16T22:37:26.544Z\",\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\"}},\"options\":{}}"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc2.veresissuer.dev/issuers/z1AG4jtcG7E9KZCBXyyekq2nw/credentials/issue",
                  "status": 400,
                  "data": {
                    "name": "ValidationError",
                    "message": "A validation error occured in the 'Issue Credential' validator.",
                    "details": {
                      "errors": [
                        {
                          "stack": "ValidationError: should have required property '@context'\n    at _createError (file:///home/node/app/node_modules/@bedrock/validation/lib/index.js:240:17)\n    at validate (file:///home/node/app/node_modules/@bedrock/validation/lib/index.js:88:14)\n    at validate (file:///home/node/app/node_modules/@bedrock/validation/lib/index.js:181:22)\n    at Layer.handle [as handle_request] (/home/node/app/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/node/app/node_modules/express/lib/router/route.js:149:13)\n    at cors (/home/node/app/node_modules/cors/lib/index.js:188:7)\n    at /home/node/app/node_modules/cors/lib/index.js:224:17\n    at originCallback (/home/node/app/node_modules/cors/lib/index.js:214:15)\n    at /home/node/app/node_modules/cors/lib/index.js:219:13\n    at optionsCallback (/home/node/app/node_modules/cors/lib/index.js:199:9)",
                          "name": "ValidationError",
                          "message": "should have required property '@context'",
                          "details": {
                            "instance": {
                              "credential": {
                                "id": "urn:uuid:5abc984f-a441-44d8-acd2-e6bc026227f0",
                                "type": [
                                  "VerifiableCredential"
                                ],
                                "issuer": "did:key:z6MkkwVJXDkKXhu2y3E1iF2cbzCUL42veRdzC7FFvNAeJ3Ja",
                                "issuanceDate": "2020-03-16T22:37:26.544Z",
                                "credentialSubject": {
                                  "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                                }
                              },
                              "options": {}
                            },
                            "params": {
                              "missingProperty": "@context"
                            },
                            "path": ".credential",
                            "public": true,
                            "schemaPath": "#/properties/credential/required",
                            "schema": {
                              "description": "",
                              "title": ""
                            },
                            "value": {
                              "id": "urn:uuid:5abc984f-a441-44d8-acd2-e6bc026227f0",
                              "type": [
                                "VerifiableCredential"
                              ],
                              "issuer": "did:key:z6MkkwVJXDkKXhu2y3E1iF2cbzCUL42veRdzC7FFvNAeJ3Ja",
                              "issuanceDate": "2020-03-16T22:37:26.544Z",
                              "credentialSubject": {
                                "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                              }
                            }
                          },
                          "cause": null
                        }
                      ],
                      "httpStatusCode": 400
                    },
                    "cause": null,
                    "stack": "ValidationError: A validation error occured in the 'Issue Credential' validator.\n    at _createError (file:///home/node/app/node_modules/@bedrock/validation/lib/index.js:246:17)\n    at validate (file:///home/node/app/node_modules/@bedrock/validation/lib/index.js:88:14)\n    at validate (file:///home/node/app/node_modules/@bedrock/validation/lib/index.js:181:22)\n    at Layer.handle [as handle_request] (/home/node/app/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/node/app/node_modules/express/lib/router/route.js:149:13)\n    at cors (/home/node/app/node_modules/cors/lib/index.js:188:7)\n    at /home/node/app/node_modules/cors/lib/index.js:224:17\n    at originCallback (/home/node/app/node_modules/cors/lib/index.js:214:15)\n    at /home/node/app/node_modules/cors/lib/index.js:219:13\n    at optionsCallback (/home/node/app/node_modules/cors/lib/index.js:199:9)",
                    "type": "ValidationError"
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected issuer Digital Bazaar to perform context injection on a VC with out an \"@context\" property: expected HTTPError: A validation error occured in … { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/suites/create.js:442:18)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "When an application is securing a document, if an @context property is not provided in the document or the Data Integrity terms used in the document are not mapped by existing values in the @context property, implementations SHOULD inject or append an @context property with a value of https://w3id.org/security/data-integrity/v2 or one or more contexts with at least the same declarations, such as the Verifiable Credential Data Model v2.0 context (https://www.w3.org/ns/credentials/v2).",
              "body": "async function() {\n      if(!issuer) {\n        throw new Error(`Expected ${vendorName} to have an issuer.`);\n      }\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#context-injection:~:text=if%20an%20%40context%20property%20is%20not%20provided%20in%20the%20document%20or%20the%20Data%20Integrity%20terms%20used%20in%20the%20document%20are%20not%20mapped%20by%20existing%20values%20in%20the%20%40context%20property%2C%20implementations%20SHOULD%20inject%20or%20append';\n      if(optionalTests.contextInjection === false) {\n        this.test.cell.skipMessage = 'Optional Test Skipped';\n        this.skip();\n      }\n      const _credential = structuredClone(credential);\n      const expectedContexts = [\n        'https://w3id.org/security/data-integrity/v2',\n        'https://www.w3.org/ns/credentials/v2'\n      ];\n      // remove the vc's context and expect context injection to occur\n      delete _credential['@context'];\n      let err;\n      let data;\n      try {\n        data = await createInitialVc({issuer, credential: _credential});\n      } catch(e) {\n        err = e;\n      }\n      should.not.exist(\n        err,\n        `Expected issuer ${vendorName} to perform context injection on a ` +\n        `VC with out an \"@context\" property`);\n      should.exist(data, `Expected issuer ${vendorName} to return data.`);\n      data.should.be.an('object', 'Expected response data to be an object.');\n      should.exist(data['@context'],\n        'Expected data to have an injected \"@context\" property.');\n      if(Array.isArray(data['@context'])) {\n        const hasExpectedContext = expectedContexts.some(\n          ctx => data['@context'].includes(ctx));\n        return hasExpectedContext.should.equal(true,\n          `Expected injected context to contain one of ${expectedContexts}`);\n      }\n      data['@context'].should.be.oneOf(expectedContexts);\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "A-KW4fZO9QGbsyZkZ2ZWI",
              "ctx": null,
              "_testId": "urn:uuid:af6319cd-6340-4fff-b51a-57cd151a526c",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "When an application is securing a document, if an @context property is not provided in the document or the Data Integrity terms used in the document are not mapped by existing values in the @context property, implementations SHOULD inject or append an @context property with a value of https://w3id.org/security/data-integrity/v2 or one or more contexts with at least the same declarations, such as the Verifiable Credential Data Model v2.0 context (https://www.w3.org/ns/credentials/v2)."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#context-injection:~:text=if%20an%20%40context%20property%20is%20not%20provided%20in%20the%20document%20or%20the%20Data%20Integrity%20terms%20used%20in%20the%20document%20are%20not%20mapped%20by%20existing%20values%20in%20the%20%40context%20property%2C%20implementations%20SHOULD%20inject%20or%20append",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2857,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 72,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected issuer Grotto Networking to perform context injection on a VC with out an \"@context\" property: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"credential\":{\"id\":\"urn:uuid:bc6db2d1-e5aa-47a9-ac72-aafb221522e8\",\"type\":[\"VerifiableCredential\"],\"issuer\":\"did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7\",\"issuanceDate\":\"2020-03-16T22:37:26.544Z\",\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\"}},\"options\":{}}",
                    "method": "POST",
                    "json": {
                      "credential": {
                        "id": "urn:uuid:bc6db2d1-e5aa-47a9-ac72-aafb221522e8",
                        "type": [
                          "VerifiableCredential"
                        ],
                        "issuer": "did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7",
                        "issuanceDate": "2020-03-16T22:37:26.544Z",
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                        }
                      },
                      "options": {}
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://ecdsa-sd.grotto-networking.com/EdDSA-RDFC/credentials/issue",
                  "status": 400,
                  "data": {
                    "errors": [
                      "must have required property '@context'"
                    ]
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected issuer Grotto Networking to perform context injection on a VC with out an \"@context\" property: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/suites/create.js:442:18)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "cell": {
                "rowId": "When an application is securing a document, if an @context property is not provided in the document or the Data Integrity terms used in the document are not mapped by existing values in the @context property, implementations SHOULD inject or append an @context property with a value of https://w3id.org/security/data-integrity/v2 or one or more contexts with at least the same declarations, such as the Verifiable Credential Data Model v2.0 context (https://www.w3.org/ns/credentials/v2).",
                "colId": "OpSecId"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            },
            {
              "type": "test",
              "title": "When an application is securing a document, if an @context property is not provided in the document or the Data Integrity terms used in the document are not mapped by existing values in the @context property, implementations SHOULD inject or append an @context property with a value of https://w3id.org/security/data-integrity/v2 or one or more contexts with at least the same declarations, such as the Verifiable Credential Data Model v2.0 context (https://www.w3.org/ns/credentials/v2).",
              "body": "async function() {\n      if(!issuer) {\n        throw new Error(`Expected ${vendorName} to have an issuer.`);\n      }\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#context-injection:~:text=if%20an%20%40context%20property%20is%20not%20provided%20in%20the%20document%20or%20the%20Data%20Integrity%20terms%20used%20in%20the%20document%20are%20not%20mapped%20by%20existing%20values%20in%20the%20%40context%20property%2C%20implementations%20SHOULD%20inject%20or%20append';\n      if(optionalTests.contextInjection === false) {\n        this.test.cell.skipMessage = 'Optional Test Skipped';\n        this.skip();\n      }\n      const _credential = structuredClone(credential);\n      const expectedContexts = [\n        'https://w3id.org/security/data-integrity/v2',\n        'https://www.w3.org/ns/credentials/v2'\n      ];\n      // remove the vc's context and expect context injection to occur\n      delete _credential['@context'];\n      let err;\n      let data;\n      try {\n        data = await createInitialVc({issuer, credential: _credential});\n      } catch(e) {\n        err = e;\n      }\n      should.not.exist(\n        err,\n        `Expected issuer ${vendorName} to perform context injection on a ` +\n        `VC with out an \"@context\" property`);\n      should.exist(data, `Expected issuer ${vendorName} to return data.`);\n      data.should.be.an('object', 'Expected response data to be an object.');\n      should.exist(data['@context'],\n        'Expected data to have an injected \"@context\" property.');\n      if(Array.isArray(data['@context'])) {\n        const hasExpectedContext = expectedContexts.some(\n          ctx => data['@context'].includes(ctx));\n        return hasExpectedContext.should.equal(true,\n          `Expected injected context to contain one of ${expectedContexts}`);\n      }\n      data['@context'].should.be.oneOf(expectedContexts);\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "iA97ETyVVLCXoJl9VcrPz",
              "ctx": null,
              "_testId": "urn:uuid:d9ae6400-00a5-4ae7-9dc7-3a90f7621f75",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "When an application is securing a document, if an @context property is not provided in the document or the Data Integrity terms used in the document are not mapped by existing values in the @context property, implementations SHOULD inject or append an @context property with a value of https://w3id.org/security/data-integrity/v2 or one or more contexts with at least the same declarations, such as the Verifiable Credential Data Model v2.0 context (https://www.w3.org/ns/credentials/v2)."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#context-injection:~:text=if%20an%20%40context%20property%20is%20not%20provided%20in%20the%20document%20or%20the%20Data%20Integrity%20terms%20used%20in%20the%20document%20are%20not%20mapped%20by%20existing%20values%20in%20the%20%40context%20property%2C%20implementations%20SHOULD%20inject%20or%20append",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3478,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 20,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected issuer SpruceID to perform context injection on a VC with out an \"@context\" property: expected HTTPError: Request failed with status cod… { …(5) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"credential\":{\"id\":\"urn:uuid:11db28af-c170-4f37-8792-17fa73e581db\",\"type\":[\"VerifiableCredential\"],\"issuer\":\"did:key:z6MkgYAGxLBSXa6Ygk1PnUbK2F7zya8juE9nfsZhrvY7c9GD\",\"issuanceDate\":\"2020-03-16T22:37:26.544Z\",\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\"}},\"options\":{\"type\":\"DataIntegrityProof\",\"cryptosuite\":\"eddsa-rdfc-2022\"}}",
                    "method": "POST",
                    "json": {
                      "credential": {
                        "id": "urn:uuid:11db28af-c170-4f37-8792-17fa73e581db",
                        "type": [
                          "VerifiableCredential"
                        ],
                        "issuer": "did:key:z6MkgYAGxLBSXa6Ygk1PnUbK2F7zya8juE9nfsZhrvY7c9GD",
                        "issuanceDate": "2020-03-16T22:37:26.544Z",
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                        }
                      },
                      "options": {
                        "type": "DataIntegrityProof",
                        "cryptosuite": "eddsa-rdfc-2022"
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc.spruceid.xyz/credentials/issue",
                  "status": 400
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected issuer SpruceID to perform context injection on a VC with out an \"@context\" property: expected HTTPError: Request failed with status cod… { …(5) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/suites/create.js:442:18)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "When an application is securing a document, if an @context property is not provided in the document or the Data Integrity terms used in the document are not mapped by existing values in the @context property, implementations SHOULD inject or append an @context property with a value of https://w3id.org/security/data-integrity/v2 or one or more contexts with at least the same declarations, such as the Verifiable Credential Data Model v2.0 context (https://www.w3.org/ns/credentials/v2).",
              "body": "async function() {\n      if(!issuer) {\n        throw new Error(`Expected ${vendorName} to have an issuer.`);\n      }\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#context-injection:~:text=if%20an%20%40context%20property%20is%20not%20provided%20in%20the%20document%20or%20the%20Data%20Integrity%20terms%20used%20in%20the%20document%20are%20not%20mapped%20by%20existing%20values%20in%20the%20%40context%20property%2C%20implementations%20SHOULD%20inject%20or%20append';\n      if(optionalTests.contextInjection === false) {\n        this.test.cell.skipMessage = 'Optional Test Skipped';\n        this.skip();\n      }\n      const _credential = structuredClone(credential);\n      const expectedContexts = [\n        'https://w3id.org/security/data-integrity/v2',\n        'https://www.w3.org/ns/credentials/v2'\n      ];\n      // remove the vc's context and expect context injection to occur\n      delete _credential['@context'];\n      let err;\n      let data;\n      try {\n        data = await createInitialVc({issuer, credential: _credential});\n      } catch(e) {\n        err = e;\n      }\n      should.not.exist(\n        err,\n        `Expected issuer ${vendorName} to perform context injection on a ` +\n        `VC with out an \"@context\" property`);\n      should.exist(data, `Expected issuer ${vendorName} to return data.`);\n      data.should.be.an('object', 'Expected response data to be an object.');\n      should.exist(data['@context'],\n        'Expected data to have an injected \"@context\" property.');\n      if(Array.isArray(data['@context'])) {\n        const hasExpectedContext = expectedContexts.some(\n          ctx => data['@context'].includes(ctx));\n        return hasExpectedContext.should.equal(true,\n          `Expected injected context to contain one of ${expectedContexts}`);\n      }\n      data['@context'].should.be.oneOf(expectedContexts);\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "2VGiV4rJyIo1DbvXHIrx2",
              "ctx": null,
              "_testId": "urn:uuid:77b1c48a-7620-4f52-9627-432854f3b5bc",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "When an application is securing a document, if an @context property is not provided in the document or the Data Integrity terms used in the document are not mapped by existing values in the @context property, implementations SHOULD inject or append an @context property with a value of https://w3id.org/security/data-integrity/v2 or one or more contexts with at least the same declarations, such as the Verifiable Credential Data Model v2.0 context (https://www.w3.org/ns/credentials/v2)."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#context-injection:~:text=if%20an%20%40context%20property%20is%20not%20provided%20in%20the%20document%20or%20the%20Data%20Integrity%20terms%20used%20in%20the%20document%20are%20not%20mapped%20by%20existing%20values%20in%20the%20%40context%20property%2C%20implementations%20SHOULD%20inject%20or%20append",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3822,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 24,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected issuer Trinsic to perform context injection on a VC with out an \"@context\" property: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"credential\":{\"id\":\"urn:uuid:55626632-4855-4b09-a97b-3c18ce3d4b4d\",\"type\":[\"VerifiableCredential\"],\"issuer\":\"did:key:z6MkqbpLSbqnY1pxVyhBCDYcFsv4ZgGgqP32kzNrf5deWVPU\",\"issuanceDate\":\"2020-03-16T22:37:26.544Z\",\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\"}},\"options\":{\"type\":\"DataIntegrityProof\"}}",
                    "method": "POST",
                    "json": {
                      "credential": {
                        "id": "urn:uuid:55626632-4855-4b09-a97b-3c18ce3d4b4d",
                        "type": [
                          "VerifiableCredential"
                        ],
                        "issuer": "did:key:z6MkqbpLSbqnY1pxVyhBCDYcFsv4ZgGgqP32kzNrf5deWVPU",
                        "issuanceDate": "2020-03-16T22:37:26.544Z",
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                        }
                      },
                      "options": {
                        "type": "DataIntegrityProof"
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://interop.connect.trinsic.cloud/vc-api/credentials/issue",
                  "status": 400,
                  "data": "Invalid credential"
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected issuer Trinsic to perform context injection on a VC with out an \"@context\" property: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/suites/create.js:442:18)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "When an application is securing a document, if an @context property is not provided in the document or the Data Integrity terms used in the document are not mapped by existing values in the @context property, implementations SHOULD inject or append an @context property with a value of https://w3id.org/security/data-integrity/v2 or one or more contexts with at least the same declarations, such as the Verifiable Credential Data Model v2.0 context (https://www.w3.org/ns/credentials/v2).",
              "body": "async function() {\n      if(!issuer) {\n        throw new Error(`Expected ${vendorName} to have an issuer.`);\n      }\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#context-injection:~:text=if%20an%20%40context%20property%20is%20not%20provided%20in%20the%20document%20or%20the%20Data%20Integrity%20terms%20used%20in%20the%20document%20are%20not%20mapped%20by%20existing%20values%20in%20the%20%40context%20property%2C%20implementations%20SHOULD%20inject%20or%20append';\n      if(optionalTests.contextInjection === false) {\n        this.test.cell.skipMessage = 'Optional Test Skipped';\n        this.skip();\n      }\n      const _credential = structuredClone(credential);\n      const expectedContexts = [\n        'https://w3id.org/security/data-integrity/v2',\n        'https://www.w3.org/ns/credentials/v2'\n      ];\n      // remove the vc's context and expect context injection to occur\n      delete _credential['@context'];\n      let err;\n      let data;\n      try {\n        data = await createInitialVc({issuer, credential: _credential});\n      } catch(e) {\n        err = e;\n      }\n      should.not.exist(\n        err,\n        `Expected issuer ${vendorName} to perform context injection on a ` +\n        `VC with out an \"@context\" property`);\n      should.exist(data, `Expected issuer ${vendorName} to return data.`);\n      data.should.be.an('object', 'Expected response data to be an object.');\n      should.exist(data['@context'],\n        'Expected data to have an injected \"@context\" property.');\n      if(Array.isArray(data['@context'])) {\n        const hasExpectedContext = expectedContexts.some(\n          ctx => data['@context'].includes(ctx));\n        return hasExpectedContext.should.equal(true,\n          `Expected injected context to contain one of ${expectedContexts}`);\n      }\n      data['@context'].should.be.oneOf(expectedContexts);\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "GiFchlSHnrHGbDB__tDI9",
              "ctx": null,
              "_testId": "urn:uuid:da8c064f-41ab-4fc3-afd4-f38f5d7c4b05",
              "cell": {
                "columnId": "bovine",
                "rowId": "When an application is securing a document, if an @context property is not provided in the document or the Data Integrity terms used in the document are not mapped by existing values in the @context property, implementations SHOULD inject or append an @context property with a value of https://w3id.org/security/data-integrity/v2 or one or more contexts with at least the same declarations, such as the Verifiable Credential Data Model v2.0 context (https://www.w3.org/ns/credentials/v2)."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#context-injection:~:text=if%20an%20%40context%20property%20is%20not%20provided%20in%20the%20document%20or%20the%20Data%20Integrity%20terms%20used%20in%20the%20document%20are%20not%20mapped%20by%20existing%20values%20in%20the%20%40context%20property%2C%20implementations%20SHOULD%20inject%20or%20append",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9424,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 99,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "The date and time the proof was created is OPTIONAL and, if included, MUST be specified as an [XMLSCHEMA11-2] dateTimeStamp string, either in Universal Coordinated Time (UTC), denoted by a Z at the end of the value, or with a time zone offset relative to UTC.",
          "link": "https://www.w3.org/TR/vc-data-integrity/#:~:text=The%20date%20and%20time%20the%20proof%20was%20created%20is%20OPTIONAL%20and%2C%20if%20included%2C%20MUST%20be%20specified%20as%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%2C%20either%20in%20Universal%20Coordinated%20Time%20(UTC)%2C%20denoted%20by%20a%20Z%20at%20the%20end%20of%20the%20value%2C%20or%20with%20a%20time%20zone%20offset%20relative%20to%20UTC.",
          "cells": [
            {
              "type": "test",
              "title": "The date and time the proof was created is OPTIONAL and, if included, MUST be specified as an [XMLSCHEMA11-2] dateTimeStamp string, either in Universal Coordinated Time (UTC), denoted by a Z at the end of the value, or with a time zone offset relative to UTC.",
              "body": "function() {\n      this.test.link = 'https://www.w3.org/TR/vc-data-integrity/#:~:text=The%20date%20and%20time%20the%20proof%20was%20created%20is%20OPTIONAL%20and%2C%20if%20included%2C%20MUST%20be%20specified%20as%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%2C%20either%20in%20Universal%20Coordinated%20Time%20(UTC)%2C%20denoted%20by%20a%20Z%20at%20the%20end%20of%20the%20value%2C%20or%20with%20a%20time%20zone%20offset%20relative%20to%20UTC.';\n      if(optionalTests.dates === false) {\n        this.test.cell.skipMessage = 'Optional Test Skipped';\n        this.skip();\n      }\n      for(const proof of proofs) {\n        if(proof.created) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.created.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "p0z5X_a8SbyICvvAEIUUP",
              "ctx": null,
              "_testId": "urn:uuid:63aaa15a-8685-4878-ae19-9e7c2a711e60",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "The date and time the proof was created is OPTIONAL and, if included, MUST be specified as an [XMLSCHEMA11-2] dateTimeStamp string, either in Universal Coordinated Time (UTC), denoted by a Z at the end of the value, or with a time zone offset relative to UTC."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://www.w3.org/TR/vc-data-integrity/#:~:text=The%20date%20and%20time%20the%20proof%20was%20created%20is%20OPTIONAL%20and%2C%20if%20included%2C%20MUST%20be%20specified%20as%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%2C%20either%20in%20Universal%20Coordinated%20Time%20(UTC)%2C%20denoted%20by%20a%20Z%20at%20the%20end%20of%20the%20value%2C%20or%20with%20a%20time%20zone%20offset%20relative%20to%20UTC.",
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The date and time the proof was created is OPTIONAL and, if included, MUST be specified as an [XMLSCHEMA11-2] dateTimeStamp string, either in Universal Coordinated Time (UTC), denoted by a Z at the end of the value, or with a time zone offset relative to UTC.",
              "body": "function() {\n      this.test.link = 'https://www.w3.org/TR/vc-data-integrity/#:~:text=The%20date%20and%20time%20the%20proof%20was%20created%20is%20OPTIONAL%20and%2C%20if%20included%2C%20MUST%20be%20specified%20as%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%2C%20either%20in%20Universal%20Coordinated%20Time%20(UTC)%2C%20denoted%20by%20a%20Z%20at%20the%20end%20of%20the%20value%2C%20or%20with%20a%20time%20zone%20offset%20relative%20to%20UTC.';\n      if(optionalTests.dates === false) {\n        this.test.cell.skipMessage = 'Optional Test Skipped';\n        this.skip();\n      }\n      for(const proof of proofs) {\n        if(proof.created) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.created.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "P6-Fcl6bFqa3F88kTD5Wy",
              "ctx": null,
              "_testId": "urn:uuid:c5290208-2246-4564-bdda-7acda692deab",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The date and time the proof was created is OPTIONAL and, if included, MUST be specified as an [XMLSCHEMA11-2] dateTimeStamp string, either in Universal Coordinated Time (UTC), denoted by a Z at the end of the value, or with a time zone offset relative to UTC."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://www.w3.org/TR/vc-data-integrity/#:~:text=The%20date%20and%20time%20the%20proof%20was%20created%20is%20OPTIONAL%20and%2C%20if%20included%2C%20MUST%20be%20specified%20as%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%2C%20either%20in%20Universal%20Coordinated%20Time%20(UTC)%2C%20denoted%20by%20a%20Z%20at%20the%20end%20of%20the%20value%2C%20or%20with%20a%20time%20zone%20offset%20relative%20to%20UTC.",
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The date and time the proof was created is OPTIONAL and, if included, MUST be specified as an [XMLSCHEMA11-2] dateTimeStamp string, either in Universal Coordinated Time (UTC), denoted by a Z at the end of the value, or with a time zone offset relative to UTC.",
              "body": "function() {\n      this.test.link = 'https://www.w3.org/TR/vc-data-integrity/#:~:text=The%20date%20and%20time%20the%20proof%20was%20created%20is%20OPTIONAL%20and%2C%20if%20included%2C%20MUST%20be%20specified%20as%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%2C%20either%20in%20Universal%20Coordinated%20Time%20(UTC)%2C%20denoted%20by%20a%20Z%20at%20the%20end%20of%20the%20value%2C%20or%20with%20a%20time%20zone%20offset%20relative%20to%20UTC.';\n      if(optionalTests.dates === false) {\n        this.test.cell.skipMessage = 'Optional Test Skipped';\n        this.skip();\n      }\n      for(const proof of proofs) {\n        if(proof.created) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.created.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "A-KW4fZO9QGbsyZkZ2ZWI",
              "ctx": null,
              "_testId": "urn:uuid:d1ab0e68-6f73-4cc9-9712-6acf94d9b9a8",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The date and time the proof was created is OPTIONAL and, if included, MUST be specified as an [XMLSCHEMA11-2] dateTimeStamp string, either in Universal Coordinated Time (UTC), denoted by a Z at the end of the value, or with a time zone offset relative to UTC."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://www.w3.org/TR/vc-data-integrity/#:~:text=The%20date%20and%20time%20the%20proof%20was%20created%20is%20OPTIONAL%20and%2C%20if%20included%2C%20MUST%20be%20specified%20as%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%2C%20either%20in%20Universal%20Coordinated%20Time%20(UTC)%2C%20denoted%20by%20a%20Z%20at%20the%20end%20of%20the%20value%2C%20or%20with%20a%20time%20zone%20offset%20relative%20to%20UTC.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "cell": {
                "rowId": "The date and time the proof was created is OPTIONAL and, if included, MUST be specified as an [XMLSCHEMA11-2] dateTimeStamp string, either in Universal Coordinated Time (UTC), denoted by a Z at the end of the value, or with a time zone offset relative to UTC.",
                "colId": "OpSecId"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            },
            {
              "type": "test",
              "title": "The date and time the proof was created is OPTIONAL and, if included, MUST be specified as an [XMLSCHEMA11-2] dateTimeStamp string, either in Universal Coordinated Time (UTC), denoted by a Z at the end of the value, or with a time zone offset relative to UTC.",
              "body": "function() {\n      this.test.link = 'https://www.w3.org/TR/vc-data-integrity/#:~:text=The%20date%20and%20time%20the%20proof%20was%20created%20is%20OPTIONAL%20and%2C%20if%20included%2C%20MUST%20be%20specified%20as%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%2C%20either%20in%20Universal%20Coordinated%20Time%20(UTC)%2C%20denoted%20by%20a%20Z%20at%20the%20end%20of%20the%20value%2C%20or%20with%20a%20time%20zone%20offset%20relative%20to%20UTC.';\n      if(optionalTests.dates === false) {\n        this.test.cell.skipMessage = 'Optional Test Skipped';\n        this.skip();\n      }\n      for(const proof of proofs) {\n        if(proof.created) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.created.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "iA97ETyVVLCXoJl9VcrPz",
              "ctx": null,
              "_testId": "urn:uuid:09b9c343-6cab-4cf8-9ca9-7546a3c9496d",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The date and time the proof was created is OPTIONAL and, if included, MUST be specified as an [XMLSCHEMA11-2] dateTimeStamp string, either in Universal Coordinated Time (UTC), denoted by a Z at the end of the value, or with a time zone offset relative to UTC."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://www.w3.org/TR/vc-data-integrity/#:~:text=The%20date%20and%20time%20the%20proof%20was%20created%20is%20OPTIONAL%20and%2C%20if%20included%2C%20MUST%20be%20specified%20as%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%2C%20either%20in%20Universal%20Coordinated%20Time%20(UTC)%2C%20denoted%20by%20a%20Z%20at%20the%20end%20of%20the%20value%2C%20or%20with%20a%20time%20zone%20offset%20relative%20to%20UTC.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The date and time the proof was created is OPTIONAL and, if included, MUST be specified as an [XMLSCHEMA11-2] dateTimeStamp string, either in Universal Coordinated Time (UTC), denoted by a Z at the end of the value, or with a time zone offset relative to UTC.",
              "body": "function() {\n      this.test.link = 'https://www.w3.org/TR/vc-data-integrity/#:~:text=The%20date%20and%20time%20the%20proof%20was%20created%20is%20OPTIONAL%20and%2C%20if%20included%2C%20MUST%20be%20specified%20as%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%2C%20either%20in%20Universal%20Coordinated%20Time%20(UTC)%2C%20denoted%20by%20a%20Z%20at%20the%20end%20of%20the%20value%2C%20or%20with%20a%20time%20zone%20offset%20relative%20to%20UTC.';\n      if(optionalTests.dates === false) {\n        this.test.cell.skipMessage = 'Optional Test Skipped';\n        this.skip();\n      }\n      for(const proof of proofs) {\n        if(proof.created) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.created.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "2VGiV4rJyIo1DbvXHIrx2",
              "ctx": null,
              "_testId": "urn:uuid:3a109e86-ce69-4caf-a43a-9d171274bc46",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "The date and time the proof was created is OPTIONAL and, if included, MUST be specified as an [XMLSCHEMA11-2] dateTimeStamp string, either in Universal Coordinated Time (UTC), denoted by a Z at the end of the value, or with a time zone offset relative to UTC."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://www.w3.org/TR/vc-data-integrity/#:~:text=The%20date%20and%20time%20the%20proof%20was%20created%20is%20OPTIONAL%20and%2C%20if%20included%2C%20MUST%20be%20specified%20as%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%2C%20either%20in%20Universal%20Coordinated%20Time%20(UTC)%2C%20denoted%20by%20a%20Z%20at%20the%20end%20of%20the%20value%2C%20or%20with%20a%20time%20zone%20offset%20relative%20to%20UTC.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The date and time the proof was created is OPTIONAL and, if included, MUST be specified as an [XMLSCHEMA11-2] dateTimeStamp string, either in Universal Coordinated Time (UTC), denoted by a Z at the end of the value, or with a time zone offset relative to UTC.",
              "body": "function() {\n      this.test.link = 'https://www.w3.org/TR/vc-data-integrity/#:~:text=The%20date%20and%20time%20the%20proof%20was%20created%20is%20OPTIONAL%20and%2C%20if%20included%2C%20MUST%20be%20specified%20as%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%2C%20either%20in%20Universal%20Coordinated%20Time%20(UTC)%2C%20denoted%20by%20a%20Z%20at%20the%20end%20of%20the%20value%2C%20or%20with%20a%20time%20zone%20offset%20relative%20to%20UTC.';\n      if(optionalTests.dates === false) {\n        this.test.cell.skipMessage = 'Optional Test Skipped';\n        this.skip();\n      }\n      for(const proof of proofs) {\n        if(proof.created) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.created.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "GiFchlSHnrHGbDB__tDI9",
              "ctx": null,
              "_testId": "urn:uuid:2c9dcdaf-e8ac-4c7e-9633-4b9012bcd51a",
              "cell": {
                "columnId": "bovine",
                "rowId": "The date and time the proof was created is OPTIONAL and, if included, MUST be specified as an [XMLSCHEMA11-2] dateTimeStamp string, either in Universal Coordinated Time (UTC), denoted by a Z at the end of the value, or with a time zone offset relative to UTC."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://www.w3.org/TR/vc-data-integrity/#:~:text=The%20date%20and%20time%20the%20proof%20was%20created%20is%20OPTIONAL%20and%2C%20if%20included%2C%20MUST%20be%20specified%20as%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%2C%20either%20in%20Universal%20Coordinated%20Time%20(UTC)%2C%20denoted%20by%20a%20Z%20at%20the%20end%20of%20the%20value%2C%20or%20with%20a%20time%20zone%20offset%20relative%20to%20UTC.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "The expires property is OPTIONAL and, if present, specifies when the proof expires. If present, it MUST be an [XMLSCHEMA11-2] dateTimeStamp string, either in Universal Coordinated Time (UTC), denoted by a Z at the end of the value, or with a time zone offset relative to UTC.",
          "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=MUST%20be%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%2C%20either%20in%20Universal%20Coordinated%20Time",
          "cells": [
            {
              "type": "test",
              "title": "The expires property is OPTIONAL and, if present, specifies when the proof expires. If present, it MUST be an [XMLSCHEMA11-2] dateTimeStamp string, either in Universal Coordinated Time (UTC), denoted by a Z at the end of the value, or with a time zone offset relative to UTC.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=MUST%20be%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%2C%20either%20in%20Universal%20Coordinated%20Time';\n      if(optionalTests.dates === false) {\n        this.test.cell.skipMessage = 'Optional Test Skipped';\n        this.skip();\n      }\n      for(const proof of proofs) {\n        if(proof.expires) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.expires.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "p0z5X_a8SbyICvvAEIUUP",
              "ctx": null,
              "_testId": "urn:uuid:2ed7558b-34a4-4ad6-89eb-c3302a7df54d",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "The expires property is OPTIONAL and, if present, specifies when the proof expires. If present, it MUST be an [XMLSCHEMA11-2] dateTimeStamp string, either in Universal Coordinated Time (UTC), denoted by a Z at the end of the value, or with a time zone offset relative to UTC."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=MUST%20be%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%2C%20either%20in%20Universal%20Coordinated%20Time",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The expires property is OPTIONAL and, if present, specifies when the proof expires. If present, it MUST be an [XMLSCHEMA11-2] dateTimeStamp string, either in Universal Coordinated Time (UTC), denoted by a Z at the end of the value, or with a time zone offset relative to UTC.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=MUST%20be%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%2C%20either%20in%20Universal%20Coordinated%20Time';\n      if(optionalTests.dates === false) {\n        this.test.cell.skipMessage = 'Optional Test Skipped';\n        this.skip();\n      }\n      for(const proof of proofs) {\n        if(proof.expires) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.expires.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "P6-Fcl6bFqa3F88kTD5Wy",
              "ctx": null,
              "_testId": "urn:uuid:fdac0131-4f8a-4378-917f-8991c17e35bc",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The expires property is OPTIONAL and, if present, specifies when the proof expires. If present, it MUST be an [XMLSCHEMA11-2] dateTimeStamp string, either in Universal Coordinated Time (UTC), denoted by a Z at the end of the value, or with a time zone offset relative to UTC."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=MUST%20be%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%2C%20either%20in%20Universal%20Coordinated%20Time",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The expires property is OPTIONAL and, if present, specifies when the proof expires. If present, it MUST be an [XMLSCHEMA11-2] dateTimeStamp string, either in Universal Coordinated Time (UTC), denoted by a Z at the end of the value, or with a time zone offset relative to UTC.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=MUST%20be%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%2C%20either%20in%20Universal%20Coordinated%20Time';\n      if(optionalTests.dates === false) {\n        this.test.cell.skipMessage = 'Optional Test Skipped';\n        this.skip();\n      }\n      for(const proof of proofs) {\n        if(proof.expires) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.expires.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "A-KW4fZO9QGbsyZkZ2ZWI",
              "ctx": null,
              "_testId": "urn:uuid:a2ab6363-71f8-4628-96b1-6b3abbaf44c9",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The expires property is OPTIONAL and, if present, specifies when the proof expires. If present, it MUST be an [XMLSCHEMA11-2] dateTimeStamp string, either in Universal Coordinated Time (UTC), denoted by a Z at the end of the value, or with a time zone offset relative to UTC."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=MUST%20be%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%2C%20either%20in%20Universal%20Coordinated%20Time",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "cell": {
                "rowId": "The expires property is OPTIONAL and, if present, specifies when the proof expires. If present, it MUST be an [XMLSCHEMA11-2] dateTimeStamp string, either in Universal Coordinated Time (UTC), denoted by a Z at the end of the value, or with a time zone offset relative to UTC.",
                "colId": "OpSecId"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            },
            {
              "type": "test",
              "title": "The expires property is OPTIONAL and, if present, specifies when the proof expires. If present, it MUST be an [XMLSCHEMA11-2] dateTimeStamp string, either in Universal Coordinated Time (UTC), denoted by a Z at the end of the value, or with a time zone offset relative to UTC.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=MUST%20be%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%2C%20either%20in%20Universal%20Coordinated%20Time';\n      if(optionalTests.dates === false) {\n        this.test.cell.skipMessage = 'Optional Test Skipped';\n        this.skip();\n      }\n      for(const proof of proofs) {\n        if(proof.expires) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.expires.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "iA97ETyVVLCXoJl9VcrPz",
              "ctx": null,
              "_testId": "urn:uuid:0001643b-9622-4e69-b6b2-937099abb267",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The expires property is OPTIONAL and, if present, specifies when the proof expires. If present, it MUST be an [XMLSCHEMA11-2] dateTimeStamp string, either in Universal Coordinated Time (UTC), denoted by a Z at the end of the value, or with a time zone offset relative to UTC."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=MUST%20be%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%2C%20either%20in%20Universal%20Coordinated%20Time",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The expires property is OPTIONAL and, if present, specifies when the proof expires. If present, it MUST be an [XMLSCHEMA11-2] dateTimeStamp string, either in Universal Coordinated Time (UTC), denoted by a Z at the end of the value, or with a time zone offset relative to UTC.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=MUST%20be%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%2C%20either%20in%20Universal%20Coordinated%20Time';\n      if(optionalTests.dates === false) {\n        this.test.cell.skipMessage = 'Optional Test Skipped';\n        this.skip();\n      }\n      for(const proof of proofs) {\n        if(proof.expires) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.expires.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "2VGiV4rJyIo1DbvXHIrx2",
              "ctx": null,
              "_testId": "urn:uuid:8b8fb126-9b0c-4395-8c3f-9b1cd98c7db2",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "The expires property is OPTIONAL and, if present, specifies when the proof expires. If present, it MUST be an [XMLSCHEMA11-2] dateTimeStamp string, either in Universal Coordinated Time (UTC), denoted by a Z at the end of the value, or with a time zone offset relative to UTC."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=MUST%20be%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%2C%20either%20in%20Universal%20Coordinated%20Time",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The expires property is OPTIONAL and, if present, specifies when the proof expires. If present, it MUST be an [XMLSCHEMA11-2] dateTimeStamp string, either in Universal Coordinated Time (UTC), denoted by a Z at the end of the value, or with a time zone offset relative to UTC.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=MUST%20be%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%2C%20either%20in%20Universal%20Coordinated%20Time';\n      if(optionalTests.dates === false) {\n        this.test.cell.skipMessage = 'Optional Test Skipped';\n        this.skip();\n      }\n      for(const proof of proofs) {\n        if(proof.expires) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.expires.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "GiFchlSHnrHGbDB__tDI9",
              "ctx": null,
              "_testId": "urn:uuid:d32496b5-a699-4e18-815f-ec22eafb1c40",
              "cell": {
                "columnId": "bovine",
                "rowId": "The expires property is OPTIONAL and, if present, specifies when the proof expires. If present, it MUST be an [XMLSCHEMA11-2] dateTimeStamp string, either in Universal Coordinated Time (UTC), denoted by a Z at the end of the value, or with a time zone offset relative to UTC."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=MUST%20be%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%2C%20either%20in%20Universal%20Coordinated%20Time",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "The domain property is OPTIONAL. It conveys one or more security domains in which the proof is meant to be used. If specified, the associated value MUST be either a string, or an unordered set of strings. A verifier SHOULD use the value to ensure that the proof was intended to be used in the security domain in which the verifier is operating.",
          "link": "https://w3c.github.io/vc-data-integrity/#verify-proof:~:text=The%20domain%20property%20is%20OPTIONAL.%20It%20conveys%20one%20or%20more%20security%20domains%20in%20which%20the%20proof%20is%20meant%20to%20be%20used.%20If%20specified%2C%20the%20associated%20value%20MUST",
          "cells": [
            {
              "type": "test",
              "title": "The domain property is OPTIONAL. It conveys one or more security domains in which the proof is meant to be used. If specified, the associated value MUST be either a string, or an unordered set of strings. A verifier SHOULD use the value to ensure that the proof was intended to be used in the security domain in which the verifier is operating.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#verify-proof:~:text=The%20domain%20property%20is%20OPTIONAL.%20It%20conveys%20one%20or%20more%20security%20domains%20in%20which%20the%20proof%20is%20meant%20to%20be%20used.%20If%20specified%2C%20the%20associated%20value%20MUST';\n      if(optionalTests.domain === false) {\n        this.test.cell.skipMessage = 'Optional Test Skipped';\n        this.skip();\n      }\n      for(const proof of proofs) {\n        if(proof.domain) {\n          const validType = isStringOrArrayOfStrings(proof.domain);\n          validType.should.equal(true, 'Expected ' +\n            '\"proof.domain\" to be either a string or an unordered ' +\n            'set of strings.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "p0z5X_a8SbyICvvAEIUUP",
              "ctx": null,
              "_testId": "urn:uuid:e983c6d2-748b-448a-acc7-7c384af59d64",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "The domain property is OPTIONAL. It conveys one or more security domains in which the proof is meant to be used. If specified, the associated value MUST be either a string, or an unordered set of strings. A verifier SHOULD use the value to ensure that the proof was intended to be used in the security domain in which the verifier is operating."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#verify-proof:~:text=The%20domain%20property%20is%20OPTIONAL.%20It%20conveys%20one%20or%20more%20security%20domains%20in%20which%20the%20proof%20is%20meant%20to%20be%20used.%20If%20specified%2C%20the%20associated%20value%20MUST",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The domain property is OPTIONAL. It conveys one or more security domains in which the proof is meant to be used. If specified, the associated value MUST be either a string, or an unordered set of strings. A verifier SHOULD use the value to ensure that the proof was intended to be used in the security domain in which the verifier is operating.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#verify-proof:~:text=The%20domain%20property%20is%20OPTIONAL.%20It%20conveys%20one%20or%20more%20security%20domains%20in%20which%20the%20proof%20is%20meant%20to%20be%20used.%20If%20specified%2C%20the%20associated%20value%20MUST';\n      if(optionalTests.domain === false) {\n        this.test.cell.skipMessage = 'Optional Test Skipped';\n        this.skip();\n      }\n      for(const proof of proofs) {\n        if(proof.domain) {\n          const validType = isStringOrArrayOfStrings(proof.domain);\n          validType.should.equal(true, 'Expected ' +\n            '\"proof.domain\" to be either a string or an unordered ' +\n            'set of strings.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "P6-Fcl6bFqa3F88kTD5Wy",
              "ctx": null,
              "_testId": "urn:uuid:b064a2df-5dbe-4b7f-a8ad-735dfb449867",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The domain property is OPTIONAL. It conveys one or more security domains in which the proof is meant to be used. If specified, the associated value MUST be either a string, or an unordered set of strings. A verifier SHOULD use the value to ensure that the proof was intended to be used in the security domain in which the verifier is operating."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#verify-proof:~:text=The%20domain%20property%20is%20OPTIONAL.%20It%20conveys%20one%20or%20more%20security%20domains%20in%20which%20the%20proof%20is%20meant%20to%20be%20used.%20If%20specified%2C%20the%20associated%20value%20MUST",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The domain property is OPTIONAL. It conveys one or more security domains in which the proof is meant to be used. If specified, the associated value MUST be either a string, or an unordered set of strings. A verifier SHOULD use the value to ensure that the proof was intended to be used in the security domain in which the verifier is operating.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#verify-proof:~:text=The%20domain%20property%20is%20OPTIONAL.%20It%20conveys%20one%20or%20more%20security%20domains%20in%20which%20the%20proof%20is%20meant%20to%20be%20used.%20If%20specified%2C%20the%20associated%20value%20MUST';\n      if(optionalTests.domain === false) {\n        this.test.cell.skipMessage = 'Optional Test Skipped';\n        this.skip();\n      }\n      for(const proof of proofs) {\n        if(proof.domain) {\n          const validType = isStringOrArrayOfStrings(proof.domain);\n          validType.should.equal(true, 'Expected ' +\n            '\"proof.domain\" to be either a string or an unordered ' +\n            'set of strings.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "A-KW4fZO9QGbsyZkZ2ZWI",
              "ctx": null,
              "_testId": "urn:uuid:4b634acc-201f-4b74-98c1-bbe91f82934b",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The domain property is OPTIONAL. It conveys one or more security domains in which the proof is meant to be used. If specified, the associated value MUST be either a string, or an unordered set of strings. A verifier SHOULD use the value to ensure that the proof was intended to be used in the security domain in which the verifier is operating."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#verify-proof:~:text=The%20domain%20property%20is%20OPTIONAL.%20It%20conveys%20one%20or%20more%20security%20domains%20in%20which%20the%20proof%20is%20meant%20to%20be%20used.%20If%20specified%2C%20the%20associated%20value%20MUST",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "cell": {
                "rowId": "The domain property is OPTIONAL. It conveys one or more security domains in which the proof is meant to be used. If specified, the associated value MUST be either a string, or an unordered set of strings. A verifier SHOULD use the value to ensure that the proof was intended to be used in the security domain in which the verifier is operating.",
                "colId": "OpSecId"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            },
            {
              "type": "test",
              "title": "The domain property is OPTIONAL. It conveys one or more security domains in which the proof is meant to be used. If specified, the associated value MUST be either a string, or an unordered set of strings. A verifier SHOULD use the value to ensure that the proof was intended to be used in the security domain in which the verifier is operating.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#verify-proof:~:text=The%20domain%20property%20is%20OPTIONAL.%20It%20conveys%20one%20or%20more%20security%20domains%20in%20which%20the%20proof%20is%20meant%20to%20be%20used.%20If%20specified%2C%20the%20associated%20value%20MUST';\n      if(optionalTests.domain === false) {\n        this.test.cell.skipMessage = 'Optional Test Skipped';\n        this.skip();\n      }\n      for(const proof of proofs) {\n        if(proof.domain) {\n          const validType = isStringOrArrayOfStrings(proof.domain);\n          validType.should.equal(true, 'Expected ' +\n            '\"proof.domain\" to be either a string or an unordered ' +\n            'set of strings.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "iA97ETyVVLCXoJl9VcrPz",
              "ctx": null,
              "_testId": "urn:uuid:a73a8d11-52ad-4dba-997e-7f7247496376",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The domain property is OPTIONAL. It conveys one or more security domains in which the proof is meant to be used. If specified, the associated value MUST be either a string, or an unordered set of strings. A verifier SHOULD use the value to ensure that the proof was intended to be used in the security domain in which the verifier is operating."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#verify-proof:~:text=The%20domain%20property%20is%20OPTIONAL.%20It%20conveys%20one%20or%20more%20security%20domains%20in%20which%20the%20proof%20is%20meant%20to%20be%20used.%20If%20specified%2C%20the%20associated%20value%20MUST",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The domain property is OPTIONAL. It conveys one or more security domains in which the proof is meant to be used. If specified, the associated value MUST be either a string, or an unordered set of strings. A verifier SHOULD use the value to ensure that the proof was intended to be used in the security domain in which the verifier is operating.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#verify-proof:~:text=The%20domain%20property%20is%20OPTIONAL.%20It%20conveys%20one%20or%20more%20security%20domains%20in%20which%20the%20proof%20is%20meant%20to%20be%20used.%20If%20specified%2C%20the%20associated%20value%20MUST';\n      if(optionalTests.domain === false) {\n        this.test.cell.skipMessage = 'Optional Test Skipped';\n        this.skip();\n      }\n      for(const proof of proofs) {\n        if(proof.domain) {\n          const validType = isStringOrArrayOfStrings(proof.domain);\n          validType.should.equal(true, 'Expected ' +\n            '\"proof.domain\" to be either a string or an unordered ' +\n            'set of strings.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "2VGiV4rJyIo1DbvXHIrx2",
              "ctx": null,
              "_testId": "urn:uuid:c5939a85-32a5-408e-b891-d8817fa11cf9",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "The domain property is OPTIONAL. It conveys one or more security domains in which the proof is meant to be used. If specified, the associated value MUST be either a string, or an unordered set of strings. A verifier SHOULD use the value to ensure that the proof was intended to be used in the security domain in which the verifier is operating."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#verify-proof:~:text=The%20domain%20property%20is%20OPTIONAL.%20It%20conveys%20one%20or%20more%20security%20domains%20in%20which%20the%20proof%20is%20meant%20to%20be%20used.%20If%20specified%2C%20the%20associated%20value%20MUST",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The domain property is OPTIONAL. It conveys one or more security domains in which the proof is meant to be used. If specified, the associated value MUST be either a string, or an unordered set of strings. A verifier SHOULD use the value to ensure that the proof was intended to be used in the security domain in which the verifier is operating.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#verify-proof:~:text=The%20domain%20property%20is%20OPTIONAL.%20It%20conveys%20one%20or%20more%20security%20domains%20in%20which%20the%20proof%20is%20meant%20to%20be%20used.%20If%20specified%2C%20the%20associated%20value%20MUST';\n      if(optionalTests.domain === false) {\n        this.test.cell.skipMessage = 'Optional Test Skipped';\n        this.skip();\n      }\n      for(const proof of proofs) {\n        if(proof.domain) {\n          const validType = isStringOrArrayOfStrings(proof.domain);\n          validType.should.equal(true, 'Expected ' +\n            '\"proof.domain\" to be either a string or an unordered ' +\n            'set of strings.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "GiFchlSHnrHGbDB__tDI9",
              "ctx": null,
              "_testId": "urn:uuid:a3a4d997-8234-48f6-b6b7-2936268c2383",
              "cell": {
                "columnId": "bovine",
                "rowId": "The domain property is OPTIONAL. It conveys one or more security domains in which the proof is meant to be used. If specified, the associated value MUST be either a string, or an unordered set of strings. A verifier SHOULD use the value to ensure that the proof was intended to be used in the security domain in which the verifier is operating."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#verify-proof:~:text=The%20domain%20property%20is%20OPTIONAL.%20It%20conveys%20one%20or%20more%20security%20domains%20in%20which%20the%20proof%20is%20meant%20to%20be%20used.%20If%20specified%2C%20the%20associated%20value%20MUST",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "(challenge) A string value that SHOULD be included in a proof if a domain is specified.",
          "link": "https://w3c.github.io/vc-data-integrity/#verify-proof:~:text=A%20string%20value%20that%20SHOULD%20be%20included%20in%20a%20proof%20if%20a%20domain%20is%20specified.",
          "cells": [
            {
              "type": "test",
              "title": "(challenge) A string value that SHOULD be included in a proof if a domain is specified.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#verify-proof:~:text=A%20string%20value%20that%20SHOULD%20be%20included%20in%20a%20proof%20if%20a%20domain%20is%20specified.';\n      if(optionalTests.domain === false) {\n        this.test.cell.skipMessage = 'Optional Test Skipped';\n        this.skip();\n      }\n      for(const proof of proofs) {\n        if(proof.challenge) {\n          // domain must be specified\n          should.exist(proof.domain, 'Expected \"proof.domain\" ' +\n            'to be specified.');\n          proof.challenge.should.be.a('string', 'Expected ' +\n            '\"proof.challenge\" to be a string.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "p0z5X_a8SbyICvvAEIUUP",
              "ctx": null,
              "_testId": "urn:uuid:e611e4fb-f091-43d6-b251-b70fc16b3e19",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "(challenge) A string value that SHOULD be included in a proof if a domain is specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#verify-proof:~:text=A%20string%20value%20that%20SHOULD%20be%20included%20in%20a%20proof%20if%20a%20domain%20is%20specified.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(challenge) A string value that SHOULD be included in a proof if a domain is specified.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#verify-proof:~:text=A%20string%20value%20that%20SHOULD%20be%20included%20in%20a%20proof%20if%20a%20domain%20is%20specified.';\n      if(optionalTests.domain === false) {\n        this.test.cell.skipMessage = 'Optional Test Skipped';\n        this.skip();\n      }\n      for(const proof of proofs) {\n        if(proof.challenge) {\n          // domain must be specified\n          should.exist(proof.domain, 'Expected \"proof.domain\" ' +\n            'to be specified.');\n          proof.challenge.should.be.a('string', 'Expected ' +\n            '\"proof.challenge\" to be a string.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "P6-Fcl6bFqa3F88kTD5Wy",
              "ctx": null,
              "_testId": "urn:uuid:a3ae7343-56a2-4e86-91b9-c6bb87349fee",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "(challenge) A string value that SHOULD be included in a proof if a domain is specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#verify-proof:~:text=A%20string%20value%20that%20SHOULD%20be%20included%20in%20a%20proof%20if%20a%20domain%20is%20specified.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(challenge) A string value that SHOULD be included in a proof if a domain is specified.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#verify-proof:~:text=A%20string%20value%20that%20SHOULD%20be%20included%20in%20a%20proof%20if%20a%20domain%20is%20specified.';\n      if(optionalTests.domain === false) {\n        this.test.cell.skipMessage = 'Optional Test Skipped';\n        this.skip();\n      }\n      for(const proof of proofs) {\n        if(proof.challenge) {\n          // domain must be specified\n          should.exist(proof.domain, 'Expected \"proof.domain\" ' +\n            'to be specified.');\n          proof.challenge.should.be.a('string', 'Expected ' +\n            '\"proof.challenge\" to be a string.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "A-KW4fZO9QGbsyZkZ2ZWI",
              "ctx": null,
              "_testId": "urn:uuid:6b58a5ad-be17-41be-b8d2-b2eeddcc37e6",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "(challenge) A string value that SHOULD be included in a proof if a domain is specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#verify-proof:~:text=A%20string%20value%20that%20SHOULD%20be%20included%20in%20a%20proof%20if%20a%20domain%20is%20specified.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "cell": {
                "rowId": "(challenge) A string value that SHOULD be included in a proof if a domain is specified.",
                "colId": "OpSecId"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            },
            {
              "type": "test",
              "title": "(challenge) A string value that SHOULD be included in a proof if a domain is specified.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#verify-proof:~:text=A%20string%20value%20that%20SHOULD%20be%20included%20in%20a%20proof%20if%20a%20domain%20is%20specified.';\n      if(optionalTests.domain === false) {\n        this.test.cell.skipMessage = 'Optional Test Skipped';\n        this.skip();\n      }\n      for(const proof of proofs) {\n        if(proof.challenge) {\n          // domain must be specified\n          should.exist(proof.domain, 'Expected \"proof.domain\" ' +\n            'to be specified.');\n          proof.challenge.should.be.a('string', 'Expected ' +\n            '\"proof.challenge\" to be a string.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "iA97ETyVVLCXoJl9VcrPz",
              "ctx": null,
              "_testId": "urn:uuid:65e944e4-9d53-43ae-996e-42d07abc4fa9",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "(challenge) A string value that SHOULD be included in a proof if a domain is specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#verify-proof:~:text=A%20string%20value%20that%20SHOULD%20be%20included%20in%20a%20proof%20if%20a%20domain%20is%20specified.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(challenge) A string value that SHOULD be included in a proof if a domain is specified.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#verify-proof:~:text=A%20string%20value%20that%20SHOULD%20be%20included%20in%20a%20proof%20if%20a%20domain%20is%20specified.';\n      if(optionalTests.domain === false) {\n        this.test.cell.skipMessage = 'Optional Test Skipped';\n        this.skip();\n      }\n      for(const proof of proofs) {\n        if(proof.challenge) {\n          // domain must be specified\n          should.exist(proof.domain, 'Expected \"proof.domain\" ' +\n            'to be specified.');\n          proof.challenge.should.be.a('string', 'Expected ' +\n            '\"proof.challenge\" to be a string.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "2VGiV4rJyIo1DbvXHIrx2",
              "ctx": null,
              "_testId": "urn:uuid:ece45d31-1cb7-4f5d-a5cf-04d00d7ba6e9",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "(challenge) A string value that SHOULD be included in a proof if a domain is specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#verify-proof:~:text=A%20string%20value%20that%20SHOULD%20be%20included%20in%20a%20proof%20if%20a%20domain%20is%20specified.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(challenge) A string value that SHOULD be included in a proof if a domain is specified.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#verify-proof:~:text=A%20string%20value%20that%20SHOULD%20be%20included%20in%20a%20proof%20if%20a%20domain%20is%20specified.';\n      if(optionalTests.domain === false) {\n        this.test.cell.skipMessage = 'Optional Test Skipped';\n        this.skip();\n      }\n      for(const proof of proofs) {\n        if(proof.challenge) {\n          // domain must be specified\n          should.exist(proof.domain, 'Expected \"proof.domain\" ' +\n            'to be specified.');\n          proof.challenge.should.be.a('string', 'Expected ' +\n            '\"proof.challenge\" to be a string.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "GiFchlSHnrHGbDB__tDI9",
              "ctx": null,
              "_testId": "urn:uuid:aaddc5c9-9b04-4cdd-b4d7-5475b9cf0401",
              "cell": {
                "columnId": "bovine",
                "rowId": "(challenge) A string value that SHOULD be included in a proof if a domain is specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#verify-proof:~:text=A%20string%20value%20that%20SHOULD%20be%20included%20in%20a%20proof%20if%20a%20domain%20is%20specified.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        }
      ]
    },
    {
      "title": "eddsa-rdfc-2022 (issuer)",
      "ctx": null,
      "suites": [
        {
          "title": "apicatalog.com",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The field \"cryptosuite\" MUST be \"eddsa-rdfc-2022\".",
              "body": "function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const suites = proofs.map(p => p?.cryptosuite);\n\n          suites.some(\n            suite => suite === cryptosuite\n          ).should.equal(true, 'Expected at least one proof to have ' +\n            '\"cryptosuite\" with the value \"eddsa-rdfc-2022\": ' +\n            JSON.stringify(suites) + ' does not contain \"eddsa-rdfc-2022\".');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "IqLfOfbpg8cD82gAQEKrN",
              "ctx": null,
              "_testId": "urn:uuid:a926815d-f48c-4e61-8dd4-6d0c35bc6101",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "The field \"cryptosuite\" MUST be \"eddsa-rdfc-2022\"."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Dereferencing the \"verificationMethod\" MUST result in an object containing a type property with the value set to \"Multikey\".",
              "body": "function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          verificationMethodDocuments.some(\n            verificationMethodDocument =>\n              verificationMethodDocument?.type === 'Multikey'\n          ).should.equal(true, 'Expected at least one proof to have \"type\" ' +\n            'property value \"Multikey\".');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "IqLfOfbpg8cD82gAQEKrN",
              "ctx": null,
              "_testId": "urn:uuid:50a15543-81b1-4a3d-bba2-d418d088d322",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "Dereferencing the \"verificationMethod\" MUST result in an object containing a type property with the value set to \"Multikey\"."
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          verificationMethodDocuments.some(\n            verificationMethodDocument =>\n              verificationMethodDocument?.type === 'Multikey'\n          ).should.equal(true, 'Expected at least one proof to have \"type\" ' +\n            'property value \"Multikey\".'\n          );\n          const controllerDocuments = [];\n          for(const verificationMethodDocument of verificationMethodDocuments) {\n            const controllerDocument = await documentLoader({\n              url: verificationMethodDocument.controller\n            });\n            controllerDocuments.push(controllerDocument);\n          }\n          proofs.some(\n            proof => controllerDocuments.some(controllerDocument =>\n              controllerDocument.hasOwnProperty(proof.proofPurpose))\n          ).should.equal(true, 'Expected \"proof.proofPurpose\" field ' +\n             'to match the verification method controller.'\n          );\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "IqLfOfbpg8cD82gAQEKrN",
              "ctx": null,
              "_testId": "urn:uuid:519f760e-5819-4f21-bfe9-70f8e9675f46",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 10375,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"publicKeyMultibase\" value of the verification method MUST be 34 bytes in length and start with the base-58-btc prefix (z).",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          for(const verificationMethodDocument of verificationMethodDocuments) {\n            const multibase = 'z';\n            const {publicKeyMultibase} = verificationMethodDocument;\n            const isMultibaseEncoded =\n              publicKeyMultibase.startsWith(multibase) &&\n                shouldBeBs58(publicKeyMultibase);\n            isMultibaseEncoded.should.equal(\n              true,\n              'Expected \"publicKeyMultibase\" value of the verification ' +\n              'method to be multibase base58-btc encoded value'\n            );\n            const publicKeyMultibaseBytes = bs58Decode({\n              id: publicKeyMultibase\n            });\n            publicKeyMultibaseBytes.byteLength.should.equal(34, 'Expected ' +\n              '\"publicKeyMultibase\" value of the verification method to ' +\n              'be 34 bytes in length.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "IqLfOfbpg8cD82gAQEKrN",
              "ctx": null,
              "_testId": "urn:uuid:44d1e2ab-2966-46b1-a672-c70293bc5ffb",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "The \"publicKeyMultibase\" value of the verification method MUST be 34 bytes in length and start with the base-58-btc prefix (z)."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 10376,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "[\"publicKeyMultibase\"] MUST consist of a binary value that startswith the two-byte prefix 0xed01",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n\n          for(const verificationMethodDocument of verificationMethodDocuments) {\n            // If we can decode then the key is valid\n            const {publicKey} =\n              await fromEncodedMultikey(verificationMethodDocument);\n\n            publicKey.length.should.equal(32, 'Expected public key ' +\n              'to be 32 bytes.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "IqLfOfbpg8cD82gAQEKrN",
              "ctx": null,
              "_testId": "urn:uuid:5daf862f-b1af-479f-b3eb-ac1d4accf73e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "[\"publicKeyMultibase\"] MUST consist of a binary value that startswith the two-byte prefix 0xed01"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 10376,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proofValue\" field when decoded to raw bytes, MUST be 64 bytes in length if the associated public key is 32 bytes or 114 bytes in length if the public key is 57 bytes.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          should.exist(issuedVc, 'Expected issuer to have issued a ' +\n            'credential.');\n          should.exist(proofs, 'Expected credential to have a proof.');\n          const eddsa2022Proofs = proofs.filter(\n            proof => proof?.cryptosuite === cryptosuite);\n          eddsa2022Proofs.length.should.be.gte(1, 'Expected at least one ' +\n            'eddsa-rdfc-2022 cryptosuite.');\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.proofValue, 'Expected a proof value on ' +\n              'the proof.');\n            const valueBytes = bs58Decode({id: proof.proofValue});\n            should.exist(proof.verificationMethod);\n            const vmBytes = await getPublicKeyBytes({\n              did: proof.verificationMethod});\n            vmBytes.byteLength.should.be.oneOf([32, 57], 'Expected public ' +\n              'key length to be either 32 or 57 bytes.');\n            if(vmBytes.byteLength === 32) {\n              valueBytes.byteLength.should.equal(64, 'Expected 64 byte ' +\n                'proofValue for 32 byte key.');\n            } else {\n              valueBytes.byteLength.should.equal(114, 'Expected 114 byte ' +\n                'proofValue for 57 byte key.');\n            }\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "IqLfOfbpg8cD82gAQEKrN",
              "ctx": null,
              "_testId": "urn:uuid:035326d9-1afd-438b-8510-fb40f675bdeb",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "\"proofValue\" field when decoded to raw bytes, MUST be 64 bytes in length if the associated public key is 32 bytes or 114 bytes in length if the public key is 57 bytes."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 10377,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof\" MUST verify when using a conformant verifier.",
              "body": "async function() {\n            this.test.cell = {columnId, rowId: this.test.title};\n            should.exist(verifier, 'Expected implementation to have a VC ' +\n              'API compatible verifier.');\n            const {result, error} = await verifier.post({json: {\n              verifiableCredential: issuedVc,\n              options: {checks: ['proof']}\n            }});\n            should.not.exist(error, 'Expected verifier to not error.');\n            should.exist(result, 'Expected verifier to return a result.');\n            result.status.should.not.equal(400, 'Expected status code to not ' +\n              'be 400.');\n            result.status.should.equal(200, 'Expected status code to be 200.');\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "IqLfOfbpg8cD82gAQEKrN",
              "ctx": null,
              "_testId": "urn:uuid:59fe5125-446b-47a5-b65b-468aebf2a310",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "\"proof\" MUST verify when using a conformant verifier."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 10377,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 708,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"apicatalog.com\"",
              "body": "async function() {\n          issuedVc = await createInitialVc({issuer, vc: validVc});\n          proofs = Array.isArray(issuedVc?.proof) ?\n            issuedVc.proof : [issuedVc?.proof];\n          const verificationMethods = proofs.map(\n            proof => proof.verificationMethod);\n          for(const verificationMethod of verificationMethods) {\n            const verificationMethodDocument = await documentLoader({\n              url: verificationMethod\n            });\n            verificationMethodDocuments.push(verificationMethodDocument);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "IqLfOfbpg8cD82gAQEKrN",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9563,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 811,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "LA5IWE6F9gUbf79nnMW1G",
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
          "_testId": "urn:uuid:7c25803a-1fb1-45a0-9a03-bce0163dab00"
        },
        {
          "title": "Digital Bazaar",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The field \"cryptosuite\" MUST be \"eddsa-rdfc-2022\".",
              "body": "function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const suites = proofs.map(p => p?.cryptosuite);\n\n          suites.some(\n            suite => suite === cryptosuite\n          ).should.equal(true, 'Expected at least one proof to have ' +\n            '\"cryptosuite\" with the value \"eddsa-rdfc-2022\": ' +\n            JSON.stringify(suites) + ' does not contain \"eddsa-rdfc-2022\".');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "X3Vl1nuLc53Z9WeR_XOAU",
              "ctx": null,
              "_testId": "urn:uuid:f65c9e2e-4871-4645-ad6f-dba3cc98273a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The field \"cryptosuite\" MUST be \"eddsa-rdfc-2022\"."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Dereferencing the \"verificationMethod\" MUST result in an object containing a type property with the value set to \"Multikey\".",
              "body": "function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          verificationMethodDocuments.some(\n            verificationMethodDocument =>\n              verificationMethodDocument?.type === 'Multikey'\n          ).should.equal(true, 'Expected at least one proof to have \"type\" ' +\n            'property value \"Multikey\".');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "X3Vl1nuLc53Z9WeR_XOAU",
              "ctx": null,
              "_testId": "urn:uuid:92cf9ef7-0bc7-414c-b43a-33d4065791ef",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "Dereferencing the \"verificationMethod\" MUST result in an object containing a type property with the value set to \"Multikey\"."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          verificationMethodDocuments.some(\n            verificationMethodDocument =>\n              verificationMethodDocument?.type === 'Multikey'\n          ).should.equal(true, 'Expected at least one proof to have \"type\" ' +\n            'property value \"Multikey\".'\n          );\n          const controllerDocuments = [];\n          for(const verificationMethodDocument of verificationMethodDocuments) {\n            const controllerDocument = await documentLoader({\n              url: verificationMethodDocument.controller\n            });\n            controllerDocuments.push(controllerDocument);\n          }\n          proofs.some(\n            proof => controllerDocuments.some(controllerDocument =>\n              controllerDocument.hasOwnProperty(proof.proofPurpose))\n          ).should.equal(true, 'Expected \"proof.proofPurpose\" field ' +\n             'to match the verification method controller.'\n          );\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "X3Vl1nuLc53Z9WeR_XOAU",
              "ctx": null,
              "_testId": "urn:uuid:ca3f9735-fd7a-4611-8ed6-549cf55673ba",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 11325,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"publicKeyMultibase\" value of the verification method MUST be 34 bytes in length and start with the base-58-btc prefix (z).",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          for(const verificationMethodDocument of verificationMethodDocuments) {\n            const multibase = 'z';\n            const {publicKeyMultibase} = verificationMethodDocument;\n            const isMultibaseEncoded =\n              publicKeyMultibase.startsWith(multibase) &&\n                shouldBeBs58(publicKeyMultibase);\n            isMultibaseEncoded.should.equal(\n              true,\n              'Expected \"publicKeyMultibase\" value of the verification ' +\n              'method to be multibase base58-btc encoded value'\n            );\n            const publicKeyMultibaseBytes = bs58Decode({\n              id: publicKeyMultibase\n            });\n            publicKeyMultibaseBytes.byteLength.should.equal(34, 'Expected ' +\n              '\"publicKeyMultibase\" value of the verification method to ' +\n              'be 34 bytes in length.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "X3Vl1nuLc53Z9WeR_XOAU",
              "ctx": null,
              "_testId": "urn:uuid:c0fcc95d-0b23-4689-bc85-db49b7d9be16",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The \"publicKeyMultibase\" value of the verification method MUST be 34 bytes in length and start with the base-58-btc prefix (z)."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 11326,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "[\"publicKeyMultibase\"] MUST consist of a binary value that startswith the two-byte prefix 0xed01",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n\n          for(const verificationMethodDocument of verificationMethodDocuments) {\n            // If we can decode then the key is valid\n            const {publicKey} =\n              await fromEncodedMultikey(verificationMethodDocument);\n\n            publicKey.length.should.equal(32, 'Expected public key ' +\n              'to be 32 bytes.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "X3Vl1nuLc53Z9WeR_XOAU",
              "ctx": null,
              "_testId": "urn:uuid:3458bdec-5046-42bd-b558-6d73268c99e9",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "[\"publicKeyMultibase\"] MUST consist of a binary value that startswith the two-byte prefix 0xed01"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 11326,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proofValue\" field when decoded to raw bytes, MUST be 64 bytes in length if the associated public key is 32 bytes or 114 bytes in length if the public key is 57 bytes.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          should.exist(issuedVc, 'Expected issuer to have issued a ' +\n            'credential.');\n          should.exist(proofs, 'Expected credential to have a proof.');\n          const eddsa2022Proofs = proofs.filter(\n            proof => proof?.cryptosuite === cryptosuite);\n          eddsa2022Proofs.length.should.be.gte(1, 'Expected at least one ' +\n            'eddsa-rdfc-2022 cryptosuite.');\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.proofValue, 'Expected a proof value on ' +\n              'the proof.');\n            const valueBytes = bs58Decode({id: proof.proofValue});\n            should.exist(proof.verificationMethod);\n            const vmBytes = await getPublicKeyBytes({\n              did: proof.verificationMethod});\n            vmBytes.byteLength.should.be.oneOf([32, 57], 'Expected public ' +\n              'key length to be either 32 or 57 bytes.');\n            if(vmBytes.byteLength === 32) {\n              valueBytes.byteLength.should.equal(64, 'Expected 64 byte ' +\n                'proofValue for 32 byte key.');\n            } else {\n              valueBytes.byteLength.should.equal(114, 'Expected 114 byte ' +\n                'proofValue for 57 byte key.');\n            }\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "X3Vl1nuLc53Z9WeR_XOAU",
              "ctx": null,
              "_testId": "urn:uuid:3da3942a-b9f8-45d8-942e-30f29aa7a097",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "\"proofValue\" field when decoded to raw bytes, MUST be 64 bytes in length if the associated public key is 32 bytes or 114 bytes in length if the public key is 57 bytes."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 11326,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof\" MUST verify when using a conformant verifier.",
              "body": "async function() {\n            this.test.cell = {columnId, rowId: this.test.title};\n            should.exist(verifier, 'Expected implementation to have a VC ' +\n              'API compatible verifier.');\n            const {result, error} = await verifier.post({json: {\n              verifiableCredential: issuedVc,\n              options: {checks: ['proof']}\n            }});\n            should.not.exist(error, 'Expected verifier to not error.');\n            should.exist(result, 'Expected verifier to return a result.');\n            result.status.should.not.equal(400, 'Expected status code to not ' +\n              'be 400.');\n            result.status.should.equal(200, 'Expected status code to be 200.');\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "X3Vl1nuLc53Z9WeR_XOAU",
              "ctx": null,
              "_testId": "urn:uuid:0abb747d-83a9-4096-8b0d-60d6e7e61255",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "\"proof\" MUST verify when using a conformant verifier."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 11327,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 2187,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Digital Bazaar\"",
              "body": "async function() {\n          issuedVc = await createInitialVc({issuer, vc: validVc});\n          proofs = Array.isArray(issuedVc?.proof) ?\n            issuedVc.proof : [issuedVc?.proof];\n          const verificationMethods = proofs.map(\n            proof => proof.verificationMethod);\n          for(const verificationMethod of verificationMethods) {\n            const verificationMethodDocument = await documentLoader({\n              url: verificationMethod\n            });\n            verificationMethodDocuments.push(verificationMethodDocument);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "X3Vl1nuLc53Z9WeR_XOAU",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 11086,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 238,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "LA5IWE6F9gUbf79nnMW1G",
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
          "_testId": "urn:uuid:aba0abc6-d71d-42eb-9fa3-e0dba08619f2"
        },
        {
          "title": "Grotto Networking",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The field \"cryptosuite\" MUST be \"eddsa-rdfc-2022\".",
              "body": "function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const suites = proofs.map(p => p?.cryptosuite);\n\n          suites.some(\n            suite => suite === cryptosuite\n          ).should.equal(true, 'Expected at least one proof to have ' +\n            '\"cryptosuite\" with the value \"eddsa-rdfc-2022\": ' +\n            JSON.stringify(suites) + ' does not contain \"eddsa-rdfc-2022\".');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "QvxbSfmfv2UA_3YIZfJub",
              "ctx": null,
              "_testId": "urn:uuid:dd9f998e-4beb-4299-ba64-85ddce563556",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The field \"cryptosuite\" MUST be \"eddsa-rdfc-2022\"."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Dereferencing the \"verificationMethod\" MUST result in an object containing a type property with the value set to \"Multikey\".",
              "body": "function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          verificationMethodDocuments.some(\n            verificationMethodDocument =>\n              verificationMethodDocument?.type === 'Multikey'\n          ).should.equal(true, 'Expected at least one proof to have \"type\" ' +\n            'property value \"Multikey\".');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "QvxbSfmfv2UA_3YIZfJub",
              "ctx": null,
              "_testId": "urn:uuid:194ac052-d6f4-4ac3-a98b-d675abeae9dd",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "Dereferencing the \"verificationMethod\" MUST result in an object containing a type property with the value set to \"Multikey\"."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          verificationMethodDocuments.some(\n            verificationMethodDocument =>\n              verificationMethodDocument?.type === 'Multikey'\n          ).should.equal(true, 'Expected at least one proof to have \"type\" ' +\n            'property value \"Multikey\".'\n          );\n          const controllerDocuments = [];\n          for(const verificationMethodDocument of verificationMethodDocuments) {\n            const controllerDocument = await documentLoader({\n              url: verificationMethodDocument.controller\n            });\n            controllerDocuments.push(controllerDocument);\n          }\n          proofs.some(\n            proof => controllerDocuments.some(controllerDocument =>\n              controllerDocument.hasOwnProperty(proof.proofPurpose))\n          ).should.equal(true, 'Expected \"proof.proofPurpose\" field ' +\n             'to match the verification method controller.'\n          );\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "QvxbSfmfv2UA_3YIZfJub",
              "ctx": null,
              "_testId": "urn:uuid:83554894-d8f1-44c2-9cbd-8f07ca4d2751",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 13782,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"publicKeyMultibase\" value of the verification method MUST be 34 bytes in length and start with the base-58-btc prefix (z).",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          for(const verificationMethodDocument of verificationMethodDocuments) {\n            const multibase = 'z';\n            const {publicKeyMultibase} = verificationMethodDocument;\n            const isMultibaseEncoded =\n              publicKeyMultibase.startsWith(multibase) &&\n                shouldBeBs58(publicKeyMultibase);\n            isMultibaseEncoded.should.equal(\n              true,\n              'Expected \"publicKeyMultibase\" value of the verification ' +\n              'method to be multibase base58-btc encoded value'\n            );\n            const publicKeyMultibaseBytes = bs58Decode({\n              id: publicKeyMultibase\n            });\n            publicKeyMultibaseBytes.byteLength.should.equal(34, 'Expected ' +\n              '\"publicKeyMultibase\" value of the verification method to ' +\n              'be 34 bytes in length.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "QvxbSfmfv2UA_3YIZfJub",
              "ctx": null,
              "_testId": "urn:uuid:a6c45ab1-b05a-4106-b302-0737e18b270f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The \"publicKeyMultibase\" value of the verification method MUST be 34 bytes in length and start with the base-58-btc prefix (z)."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 13782,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "[\"publicKeyMultibase\"] MUST consist of a binary value that startswith the two-byte prefix 0xed01",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n\n          for(const verificationMethodDocument of verificationMethodDocuments) {\n            // If we can decode then the key is valid\n            const {publicKey} =\n              await fromEncodedMultikey(verificationMethodDocument);\n\n            publicKey.length.should.equal(32, 'Expected public key ' +\n              'to be 32 bytes.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "QvxbSfmfv2UA_3YIZfJub",
              "ctx": null,
              "_testId": "urn:uuid:a1a05653-f4c7-46eb-996c-359acf085f77",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "[\"publicKeyMultibase\"] MUST consist of a binary value that startswith the two-byte prefix 0xed01"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 13783,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proofValue\" field when decoded to raw bytes, MUST be 64 bytes in length if the associated public key is 32 bytes or 114 bytes in length if the public key is 57 bytes.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          should.exist(issuedVc, 'Expected issuer to have issued a ' +\n            'credential.');\n          should.exist(proofs, 'Expected credential to have a proof.');\n          const eddsa2022Proofs = proofs.filter(\n            proof => proof?.cryptosuite === cryptosuite);\n          eddsa2022Proofs.length.should.be.gte(1, 'Expected at least one ' +\n            'eddsa-rdfc-2022 cryptosuite.');\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.proofValue, 'Expected a proof value on ' +\n              'the proof.');\n            const valueBytes = bs58Decode({id: proof.proofValue});\n            should.exist(proof.verificationMethod);\n            const vmBytes = await getPublicKeyBytes({\n              did: proof.verificationMethod});\n            vmBytes.byteLength.should.be.oneOf([32, 57], 'Expected public ' +\n              'key length to be either 32 or 57 bytes.');\n            if(vmBytes.byteLength === 32) {\n              valueBytes.byteLength.should.equal(64, 'Expected 64 byte ' +\n                'proofValue for 32 byte key.');\n            } else {\n              valueBytes.byteLength.should.equal(114, 'Expected 114 byte ' +\n                'proofValue for 57 byte key.');\n            }\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "QvxbSfmfv2UA_3YIZfJub",
              "ctx": null,
              "_testId": "urn:uuid:1e791ed8-dd0b-4e02-96dd-6e326b87ef57",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "\"proofValue\" field when decoded to raw bytes, MUST be 64 bytes in length if the associated public key is 32 bytes or 114 bytes in length if the public key is 57 bytes."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 13783,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof\" MUST verify when using a conformant verifier.",
              "body": "async function() {\n            this.test.cell = {columnId, rowId: this.test.title};\n            should.exist(verifier, 'Expected implementation to have a VC ' +\n              'API compatible verifier.');\n            const {result, error} = await verifier.post({json: {\n              verifiableCredential: issuedVc,\n              options: {checks: ['proof']}\n            }});\n            should.not.exist(error, 'Expected verifier to not error.');\n            should.exist(result, 'Expected verifier to return a result.');\n            result.status.should.not.equal(400, 'Expected status code to not ' +\n              'be 400.');\n            result.status.should.equal(200, 'Expected status code to be 200.');\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "QvxbSfmfv2UA_3YIZfJub",
              "ctx": null,
              "_testId": "urn:uuid:c6580598-9e05-47bc-9d9c-cc50a1f0d102",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "\"proof\" MUST verify when using a conformant verifier."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 13784,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 90,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Grotto Networking\"",
              "body": "async function() {\n          issuedVc = await createInitialVc({issuer, vc: validVc});\n          proofs = Array.isArray(issuedVc?.proof) ?\n            issuedVc.proof : [issuedVc?.proof];\n          const verificationMethods = proofs.map(\n            proof => proof.verificationMethod);\n          for(const verificationMethod of verificationMethods) {\n            const verificationMethodDocument = await documentLoader({\n              url: verificationMethod\n            });\n            verificationMethodDocuments.push(verificationMethodDocument);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "QvxbSfmfv2UA_3YIZfJub",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 13514,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 267,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "LA5IWE6F9gUbf79nnMW1G",
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
          "_testId": "urn:uuid:608fd901-175f-44e6-bfe0-35277e93d6f5"
        },
        {
          "title": "OpSecId",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The field \"cryptosuite\" MUST be \"eddsa-rdfc-2022\".",
              "body": "function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const suites = proofs.map(p => p?.cryptosuite);\n\n          suites.some(\n            suite => suite === cryptosuite\n          ).should.equal(true, 'Expected at least one proof to have ' +\n            '\"cryptosuite\" with the value \"eddsa-rdfc-2022\": ' +\n            JSON.stringify(suites) + ' does not contain \"eddsa-rdfc-2022\".');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "8hDE3Q8nqyL3z4Ip-sddm",
              "ctx": null
            },
            {
              "type": "test",
              "title": "Dereferencing the \"verificationMethod\" MUST result in an object containing a type property with the value set to \"Multikey\".",
              "body": "function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          verificationMethodDocuments.some(\n            verificationMethodDocument =>\n              verificationMethodDocument?.type === 'Multikey'\n          ).should.equal(true, 'Expected at least one proof to have \"type\" ' +\n            'property value \"Multikey\".');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "8hDE3Q8nqyL3z4Ip-sddm",
              "ctx": null
            },
            {
              "type": "test",
              "title": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          verificationMethodDocuments.some(\n            verificationMethodDocument =>\n              verificationMethodDocument?.type === 'Multikey'\n          ).should.equal(true, 'Expected at least one proof to have \"type\" ' +\n            'property value \"Multikey\".'\n          );\n          const controllerDocuments = [];\n          for(const verificationMethodDocument of verificationMethodDocuments) {\n            const controllerDocument = await documentLoader({\n              url: verificationMethodDocument.controller\n            });\n            controllerDocuments.push(controllerDocument);\n          }\n          proofs.some(\n            proof => controllerDocuments.some(controllerDocument =>\n              controllerDocument.hasOwnProperty(proof.proofPurpose))\n          ).should.equal(true, 'Expected \"proof.proofPurpose\" field ' +\n             'to match the verification method controller.'\n          );\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "8hDE3Q8nqyL3z4Ip-sddm",
              "ctx": null
            },
            {
              "type": "test",
              "title": "The \"publicKeyMultibase\" value of the verification method MUST be 34 bytes in length and start with the base-58-btc prefix (z).",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          for(const verificationMethodDocument of verificationMethodDocuments) {\n            const multibase = 'z';\n            const {publicKeyMultibase} = verificationMethodDocument;\n            const isMultibaseEncoded =\n              publicKeyMultibase.startsWith(multibase) &&\n                shouldBeBs58(publicKeyMultibase);\n            isMultibaseEncoded.should.equal(\n              true,\n              'Expected \"publicKeyMultibase\" value of the verification ' +\n              'method to be multibase base58-btc encoded value'\n            );\n            const publicKeyMultibaseBytes = bs58Decode({\n              id: publicKeyMultibase\n            });\n            publicKeyMultibaseBytes.byteLength.should.equal(34, 'Expected ' +\n              '\"publicKeyMultibase\" value of the verification method to ' +\n              'be 34 bytes in length.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "8hDE3Q8nqyL3z4Ip-sddm",
              "ctx": null
            },
            {
              "type": "test",
              "title": "[\"publicKeyMultibase\"] MUST consist of a binary value that startswith the two-byte prefix 0xed01",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n\n          for(const verificationMethodDocument of verificationMethodDocuments) {\n            // If we can decode then the key is valid\n            const {publicKey} =\n              await fromEncodedMultikey(verificationMethodDocument);\n\n            publicKey.length.should.equal(32, 'Expected public key ' +\n              'to be 32 bytes.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "8hDE3Q8nqyL3z4Ip-sddm",
              "ctx": null
            },
            {
              "type": "test",
              "title": "\"proofValue\" field when decoded to raw bytes, MUST be 64 bytes in length if the associated public key is 32 bytes or 114 bytes in length if the public key is 57 bytes.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          should.exist(issuedVc, 'Expected issuer to have issued a ' +\n            'credential.');\n          should.exist(proofs, 'Expected credential to have a proof.');\n          const eddsa2022Proofs = proofs.filter(\n            proof => proof?.cryptosuite === cryptosuite);\n          eddsa2022Proofs.length.should.be.gte(1, 'Expected at least one ' +\n            'eddsa-rdfc-2022 cryptosuite.');\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.proofValue, 'Expected a proof value on ' +\n              'the proof.');\n            const valueBytes = bs58Decode({id: proof.proofValue});\n            should.exist(proof.verificationMethod);\n            const vmBytes = await getPublicKeyBytes({\n              did: proof.verificationMethod});\n            vmBytes.byteLength.should.be.oneOf([32, 57], 'Expected public ' +\n              'key length to be either 32 or 57 bytes.');\n            if(vmBytes.byteLength === 32) {\n              valueBytes.byteLength.should.equal(64, 'Expected 64 byte ' +\n                'proofValue for 32 byte key.');\n            } else {\n              valueBytes.byteLength.should.equal(114, 'Expected 114 byte ' +\n                'proofValue for 57 byte key.');\n            }\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "8hDE3Q8nqyL3z4Ip-sddm",
              "ctx": null
            },
            {
              "type": "test",
              "title": "\"proof\" MUST verify when using a conformant verifier.",
              "body": "async function() {\n            this.test.cell = {columnId, rowId: this.test.title};\n            should.exist(verifier, 'Expected implementation to have a VC ' +\n              'API compatible verifier.');\n            const {result, error} = await verifier.post({json: {\n              verifiableCredential: issuedVc,\n              options: {checks: ['proof']}\n            }});\n            should.not.exist(error, 'Expected verifier to not error.');\n            should.exist(result, 'Expected verifier to return a result.');\n            result.status.should.not.equal(400, 'Expected status code to not ' +\n              'be 400.');\n            result.status.should.equal(200, 'Expected status code to be 200.');\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "8hDE3Q8nqyL3z4Ip-sddm",
              "ctx": null
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook for \"The field \"cryptosuite\" MUST be \"eddsa-rdfc-2022\".\"",
              "body": "async function() {\n          issuedVc = await createInitialVc({issuer, vc: validVc});\n          proofs = Array.isArray(issuedVc?.proof) ?\n            issuedVc.proof : [issuedVc?.proof];\n          const verificationMethods = proofs.map(\n            proof => proof.verificationMethod);\n          for(const verificationMethod of verificationMethods) {\n            const verificationMethodDocument = await documentLoader({\n              url: verificationMethod\n            });\n            verificationMethodDocuments.push(verificationMethodDocument);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "8hDE3Q8nqyL3z4Ip-sddm",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 13874,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 180,
              "_error": null,
              "state": "failed",
              "err": {
                "response": {},
                "request": {},
                "options": {
                  "headers": {},
                  "body": "{\"credential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\"],\"id\":\"urn:uuid:b76ba9de-7317-411f-9575-1fcb8f152e28\",\"type\":[\"VerifiableCredential\"],\"issuer\":\"did:key:z6MksCeXh9Jwp4ZTEb5Kei7sJpBLpUyS3oaAib8wbtJQqsQu\",\"issuanceDate\":\"2020-03-16T22:37:26.544Z\",\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\"}},\"options\":{\"type\":\"DataIntegrityProof\",\"cryptosuite\":\"eddsa-rdfc-2022\",\"credentialStatus\":{\"type\":\"BitstringStatusListEntry\",\"statusPurpose\":\"suspension\"}}}",
                  "method": "POST",
                  "json": {
                    "credential": {
                      "@context": [
                        "https://www.w3.org/2018/credentials/v1"
                      ],
                      "id": "urn:uuid:b76ba9de-7317-411f-9575-1fcb8f152e28",
                      "type": [
                        "VerifiableCredential"
                      ],
                      "issuer": "did:key:z6MksCeXh9Jwp4ZTEb5Kei7sJpBLpUyS3oaAib8wbtJQqsQu",
                      "issuanceDate": "2020-03-16T22:37:26.544Z",
                      "credentialSubject": {
                        "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                      }
                    },
                    "options": {
                      "type": "DataIntegrityProof",
                      "cryptosuite": "eddsa-rdfc-2022",
                      "credentialStatus": {
                        "type": "BitstringStatusListEntry",
                        "statusPurpose": "suspension"
                      }
                    }
                  },
                  "agent": {
                    "_events": {},
                    "_eventsCount": 2,
                    "defaultPort": 443,
                    "protocol": "https:",
                    "options": {
                      "rejectUnauthorized": false,
                      "noDelay": true,
                      "path": null
                    },
                    "requests": {},
                    "sockets": {},
                    "freeSockets": {},
                    "keepAliveMsecs": 1000,
                    "keepAlive": false,
                    "maxSockets": null,
                    "maxFreeSockets": 256,
                    "scheduling": "lifo",
                    "maxTotalSockets": null,
                    "totalSocketCount": 0,
                    "maxCachedSessions": 100,
                    "_sessionCache": {
                      "map": {},
                      "list": []
                    }
                  },
                  "hooks": {
                    "beforeRequest": [],
                    "beforeRetry": [],
                    "afterResponse": [],
                    "beforeError": []
                  },
                  "prefixUrl": "",
                  "retry": {
                    "limit": 2,
                    "methods": [
                      "get",
                      "put",
                      "head",
                      "delete",
                      "options",
                      "trace"
                    ],
                    "statusCodes": [
                      408,
                      413,
                      429,
                      500,
                      502,
                      503,
                      504
                    ],
                    "afterStatusCodes": [
                      413,
                      429,
                      503
                    ],
                    "maxRetryAfter": null,
                    "backoffLimit": null
                  },
                  "throwHttpErrors": true,
                  "timeout": 10000,
                  "signal": {},
                  "duplex": "half"
                },
                "name": "HTTPError",
                "requestUrl": "https://agent.opsec.id/vc/credentials/issue",
                "status": 400,
                "data": {
                  "message": "DID not found: did:key:z6MksCeXh9Jwp4ZTEb5Kei7sJpBLpUyS3oaAib8wbtJQqsQu"
                }
              }
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "LA5IWE6F9gUbf79nnMW1G",
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
          "_testId": "urn:uuid:68036844-2b0d-4297-b3c5-6d649c97c058"
        },
        {
          "title": "SpruceID",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The field \"cryptosuite\" MUST be \"eddsa-rdfc-2022\".",
              "body": "function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const suites = proofs.map(p => p?.cryptosuite);\n\n          suites.some(\n            suite => suite === cryptosuite\n          ).should.equal(true, 'Expected at least one proof to have ' +\n            '\"cryptosuite\" with the value \"eddsa-rdfc-2022\": ' +\n            JSON.stringify(suites) + ' does not contain \"eddsa-rdfc-2022\".');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "8nRH6Acvkh66Ny5HiMReH",
              "ctx": null,
              "_testId": "urn:uuid:1d66eb4d-9c4e-4bc9-82e0-fd5a2ae4a59e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The field \"cryptosuite\" MUST be \"eddsa-rdfc-2022\"."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Dereferencing the \"verificationMethod\" MUST result in an object containing a type property with the value set to \"Multikey\".",
              "body": "function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          verificationMethodDocuments.some(\n            verificationMethodDocument =>\n              verificationMethodDocument?.type === 'Multikey'\n          ).should.equal(true, 'Expected at least one proof to have \"type\" ' +\n            'property value \"Multikey\".');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "8nRH6Acvkh66Ny5HiMReH",
              "ctx": null,
              "_testId": "urn:uuid:5c2502cb-c9d2-4345-993b-b92ab0c9277e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "Dereferencing the \"verificationMethod\" MUST result in an object containing a type property with the value set to \"Multikey\"."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          verificationMethodDocuments.some(\n            verificationMethodDocument =>\n              verificationMethodDocument?.type === 'Multikey'\n          ).should.equal(true, 'Expected at least one proof to have \"type\" ' +\n            'property value \"Multikey\".'\n          );\n          const controllerDocuments = [];\n          for(const verificationMethodDocument of verificationMethodDocuments) {\n            const controllerDocument = await documentLoader({\n              url: verificationMethodDocument.controller\n            });\n            controllerDocuments.push(controllerDocument);\n          }\n          proofs.some(\n            proof => controllerDocuments.some(controllerDocument =>\n              controllerDocument.hasOwnProperty(proof.proofPurpose))\n          ).should.equal(true, 'Expected \"proof.proofPurpose\" field ' +\n             'to match the verification method controller.'\n          );\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "8nRH6Acvkh66Ny5HiMReH",
              "ctx": null,
              "_testId": "urn:uuid:a33ddfb0-dc16-4487-8721-1a734cb6776f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 14103,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"publicKeyMultibase\" value of the verification method MUST be 34 bytes in length and start with the base-58-btc prefix (z).",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          for(const verificationMethodDocument of verificationMethodDocuments) {\n            const multibase = 'z';\n            const {publicKeyMultibase} = verificationMethodDocument;\n            const isMultibaseEncoded =\n              publicKeyMultibase.startsWith(multibase) &&\n                shouldBeBs58(publicKeyMultibase);\n            isMultibaseEncoded.should.equal(\n              true,\n              'Expected \"publicKeyMultibase\" value of the verification ' +\n              'method to be multibase base58-btc encoded value'\n            );\n            const publicKeyMultibaseBytes = bs58Decode({\n              id: publicKeyMultibase\n            });\n            publicKeyMultibaseBytes.byteLength.should.equal(34, 'Expected ' +\n              '\"publicKeyMultibase\" value of the verification method to ' +\n              'be 34 bytes in length.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "8nRH6Acvkh66Ny5HiMReH",
              "ctx": null,
              "_testId": "urn:uuid:421b8205-64f4-4152-b339-359ddad7f1a3",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The \"publicKeyMultibase\" value of the verification method MUST be 34 bytes in length and start with the base-58-btc prefix (z)."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 14104,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "[\"publicKeyMultibase\"] MUST consist of a binary value that startswith the two-byte prefix 0xed01",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n\n          for(const verificationMethodDocument of verificationMethodDocuments) {\n            // If we can decode then the key is valid\n            const {publicKey} =\n              await fromEncodedMultikey(verificationMethodDocument);\n\n            publicKey.length.should.equal(32, 'Expected public key ' +\n              'to be 32 bytes.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "8nRH6Acvkh66Ny5HiMReH",
              "ctx": null,
              "_testId": "urn:uuid:807081e3-bec3-4b5d-8427-9a998ef0a6e5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "[\"publicKeyMultibase\"] MUST consist of a binary value that startswith the two-byte prefix 0xed01"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 14104,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proofValue\" field when decoded to raw bytes, MUST be 64 bytes in length if the associated public key is 32 bytes or 114 bytes in length if the public key is 57 bytes.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          should.exist(issuedVc, 'Expected issuer to have issued a ' +\n            'credential.');\n          should.exist(proofs, 'Expected credential to have a proof.');\n          const eddsa2022Proofs = proofs.filter(\n            proof => proof?.cryptosuite === cryptosuite);\n          eddsa2022Proofs.length.should.be.gte(1, 'Expected at least one ' +\n            'eddsa-rdfc-2022 cryptosuite.');\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.proofValue, 'Expected a proof value on ' +\n              'the proof.');\n            const valueBytes = bs58Decode({id: proof.proofValue});\n            should.exist(proof.verificationMethod);\n            const vmBytes = await getPublicKeyBytes({\n              did: proof.verificationMethod});\n            vmBytes.byteLength.should.be.oneOf([32, 57], 'Expected public ' +\n              'key length to be either 32 or 57 bytes.');\n            if(vmBytes.byteLength === 32) {\n              valueBytes.byteLength.should.equal(64, 'Expected 64 byte ' +\n                'proofValue for 32 byte key.');\n            } else {\n              valueBytes.byteLength.should.equal(114, 'Expected 114 byte ' +\n                'proofValue for 57 byte key.');\n            }\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "8nRH6Acvkh66Ny5HiMReH",
              "ctx": null,
              "_testId": "urn:uuid:9543b95f-eedc-434a-845e-6fba7cbb518b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "\"proofValue\" field when decoded to raw bytes, MUST be 64 bytes in length if the associated public key is 32 bytes or 114 bytes in length if the public key is 57 bytes."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 14105,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof\" MUST verify when using a conformant verifier.",
              "body": "async function() {\n            this.test.cell = {columnId, rowId: this.test.title};\n            should.exist(verifier, 'Expected implementation to have a VC ' +\n              'API compatible verifier.');\n            const {result, error} = await verifier.post({json: {\n              verifiableCredential: issuedVc,\n              options: {checks: ['proof']}\n            }});\n            should.not.exist(error, 'Expected verifier to not error.');\n            should.exist(result, 'Expected verifier to return a result.');\n            result.status.should.not.equal(400, 'Expected status code to not ' +\n              'be 400.');\n            result.status.should.equal(200, 'Expected status code to be 200.');\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "8nRH6Acvkh66Ny5HiMReH",
              "ctx": null,
              "_testId": "urn:uuid:89402e27-d209-4ab1-a5e9-159c187042f1",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "\"proof\" MUST verify when using a conformant verifier."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 14105,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 28,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"SpruceID\"",
              "body": "async function() {\n          issuedVc = await createInitialVc({issuer, vc: validVc});\n          proofs = Array.isArray(issuedVc?.proof) ?\n            issuedVc.proof : [issuedVc?.proof];\n          const verificationMethods = proofs.map(\n            proof => proof.verificationMethod);\n          for(const verificationMethod of verificationMethods) {\n            const verificationMethodDocument = await documentLoader({\n              url: verificationMethod\n            });\n            verificationMethodDocuments.push(verificationMethodDocument);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "8nRH6Acvkh66Ny5HiMReH",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 14057,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 46,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "LA5IWE6F9gUbf79nnMW1G",
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
          "_testId": "urn:uuid:4b1c0975-1dcf-4737-a88a-d78b85f085cb"
        },
        {
          "title": "Trinsic",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The field \"cryptosuite\" MUST be \"eddsa-rdfc-2022\".",
              "body": "function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const suites = proofs.map(p => p?.cryptosuite);\n\n          suites.some(\n            suite => suite === cryptosuite\n          ).should.equal(true, 'Expected at least one proof to have ' +\n            '\"cryptosuite\" with the value \"eddsa-rdfc-2022\": ' +\n            JSON.stringify(suites) + ' does not contain \"eddsa-rdfc-2022\".');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "v2dqkfqX5IQLm3KoFkwN2",
              "ctx": null,
              "_testId": "urn:uuid:908b067f-19ab-4e08-abde-2f65d168378f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "The field \"cryptosuite\" MUST be \"eddsa-rdfc-2022\"."
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected at least one proof to have \"cryptosuite\" with the value \"eddsa-rdfc-2022\": [\"eddsa-2022\"] does not contain \"eddsa-rdfc-2022\".: expected false to equal true",
                "showDiff": true,
                "actual": "false",
                "expected": "true",
                "stack": "AssertionError: Expected at least one proof to have \"cryptosuite\" with the value \"eddsa-rdfc-2022\": [\"eddsa-2022\"] does not contain \"eddsa-rdfc-2022\".: expected false to equal true\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js:68:20)\n    at process.processImmediate (node:internal/timers:483:21)"
              }
            },
            {
              "type": "test",
              "title": "Dereferencing the \"verificationMethod\" MUST result in an object containing a type property with the value set to \"Multikey\".",
              "body": "function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          verificationMethodDocuments.some(\n            verificationMethodDocument =>\n              verificationMethodDocument?.type === 'Multikey'\n          ).should.equal(true, 'Expected at least one proof to have \"type\" ' +\n            'property value \"Multikey\".');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "v2dqkfqX5IQLm3KoFkwN2",
              "ctx": null,
              "_testId": "urn:uuid:7b60384c-9010-41f0-b395-9970fc1c708f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "Dereferencing the \"verificationMethod\" MUST result in an object containing a type property with the value set to \"Multikey\"."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          verificationMethodDocuments.some(\n            verificationMethodDocument =>\n              verificationMethodDocument?.type === 'Multikey'\n          ).should.equal(true, 'Expected at least one proof to have \"type\" ' +\n            'property value \"Multikey\".'\n          );\n          const controllerDocuments = [];\n          for(const verificationMethodDocument of verificationMethodDocuments) {\n            const controllerDocument = await documentLoader({\n              url: verificationMethodDocument.controller\n            });\n            controllerDocuments.push(controllerDocument);\n          }\n          proofs.some(\n            proof => controllerDocuments.some(controllerDocument =>\n              controllerDocument.hasOwnProperty(proof.proofPurpose))\n          ).should.equal(true, 'Expected \"proof.proofPurpose\" field ' +\n             'to match the verification method controller.'\n          );\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "v2dqkfqX5IQLm3KoFkwN2",
              "ctx": null,
              "_testId": "urn:uuid:9c8be1d3-9b61-4ff8-8a07-2fbf6a164859",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 14203,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"publicKeyMultibase\" value of the verification method MUST be 34 bytes in length and start with the base-58-btc prefix (z).",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          for(const verificationMethodDocument of verificationMethodDocuments) {\n            const multibase = 'z';\n            const {publicKeyMultibase} = verificationMethodDocument;\n            const isMultibaseEncoded =\n              publicKeyMultibase.startsWith(multibase) &&\n                shouldBeBs58(publicKeyMultibase);\n            isMultibaseEncoded.should.equal(\n              true,\n              'Expected \"publicKeyMultibase\" value of the verification ' +\n              'method to be multibase base58-btc encoded value'\n            );\n            const publicKeyMultibaseBytes = bs58Decode({\n              id: publicKeyMultibase\n            });\n            publicKeyMultibaseBytes.byteLength.should.equal(34, 'Expected ' +\n              '\"publicKeyMultibase\" value of the verification method to ' +\n              'be 34 bytes in length.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "v2dqkfqX5IQLm3KoFkwN2",
              "ctx": null,
              "_testId": "urn:uuid:b5f7839a-aff4-43b0-8fec-9bd6f4470f5b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "The \"publicKeyMultibase\" value of the verification method MUST be 34 bytes in length and start with the base-58-btc prefix (z)."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 14204,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "[\"publicKeyMultibase\"] MUST consist of a binary value that startswith the two-byte prefix 0xed01",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n\n          for(const verificationMethodDocument of verificationMethodDocuments) {\n            // If we can decode then the key is valid\n            const {publicKey} =\n              await fromEncodedMultikey(verificationMethodDocument);\n\n            publicKey.length.should.equal(32, 'Expected public key ' +\n              'to be 32 bytes.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "v2dqkfqX5IQLm3KoFkwN2",
              "ctx": null,
              "_testId": "urn:uuid:c963faa2-2ca3-40f5-ba0f-4956e7868ed3",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "[\"publicKeyMultibase\"] MUST consist of a binary value that startswith the two-byte prefix 0xed01"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 14204,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proofValue\" field when decoded to raw bytes, MUST be 64 bytes in length if the associated public key is 32 bytes or 114 bytes in length if the public key is 57 bytes.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          should.exist(issuedVc, 'Expected issuer to have issued a ' +\n            'credential.');\n          should.exist(proofs, 'Expected credential to have a proof.');\n          const eddsa2022Proofs = proofs.filter(\n            proof => proof?.cryptosuite === cryptosuite);\n          eddsa2022Proofs.length.should.be.gte(1, 'Expected at least one ' +\n            'eddsa-rdfc-2022 cryptosuite.');\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.proofValue, 'Expected a proof value on ' +\n              'the proof.');\n            const valueBytes = bs58Decode({id: proof.proofValue});\n            should.exist(proof.verificationMethod);\n            const vmBytes = await getPublicKeyBytes({\n              did: proof.verificationMethod});\n            vmBytes.byteLength.should.be.oneOf([32, 57], 'Expected public ' +\n              'key length to be either 32 or 57 bytes.');\n            if(vmBytes.byteLength === 32) {\n              valueBytes.byteLength.should.equal(64, 'Expected 64 byte ' +\n                'proofValue for 32 byte key.');\n            } else {\n              valueBytes.byteLength.should.equal(114, 'Expected 114 byte ' +\n                'proofValue for 57 byte key.');\n            }\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "v2dqkfqX5IQLm3KoFkwN2",
              "ctx": null,
              "_testId": "urn:uuid:caa7e297-6d3f-48dd-a9f9-ad1e49816445",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "\"proofValue\" field when decoded to raw bytes, MUST be 64 bytes in length if the associated public key is 32 bytes or 114 bytes in length if the public key is 57 bytes."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 14205,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected at least one eddsa-rdfc-2022 cryptosuite.: expected +0 to be at least 1",
                "showDiff": true,
                "actual": "0",
                "expected": "1",
                "operator": "strictEqual",
                "stack": "AssertionError: Expected at least one eddsa-rdfc-2022 cryptosuite.: expected +0 to be at least 1\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js:198:44)\n    at process.processImmediate (node:internal/timers:483:21)"
              }
            },
            {
              "type": "test",
              "title": "\"proof\" MUST verify when using a conformant verifier.",
              "body": "async function() {\n            this.test.cell = {columnId, rowId: this.test.title};\n            should.exist(verifier, 'Expected implementation to have a VC ' +\n              'API compatible verifier.');\n            const {result, error} = await verifier.post({json: {\n              verifiableCredential: issuedVc,\n              options: {checks: ['proof']}\n            }});\n            should.not.exist(error, 'Expected verifier to not error.');\n            should.exist(result, 'Expected verifier to return a result.');\n            result.status.should.not.equal(400, 'Expected status code to not ' +\n              'be 400.');\n            result.status.should.equal(200, 'Expected status code to be 200.');\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "v2dqkfqX5IQLm3KoFkwN2",
              "ctx": null,
              "_testId": "urn:uuid:ce0798e8-5f45-42a7-83c6-351f21540d15",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "\"proof\" MUST verify when using a conformant verifier."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 14205,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 40,
              "state": "passed",
              "speed": "medium"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Trinsic\"",
              "body": "async function() {\n          issuedVc = await createInitialVc({issuer, vc: validVc});\n          proofs = Array.isArray(issuedVc?.proof) ?\n            issuedVc.proof : [issuedVc?.proof];\n          const verificationMethods = proofs.map(\n            proof => proof.verificationMethod);\n          for(const verificationMethod of verificationMethods) {\n            const verificationMethodDocument = await documentLoader({\n              url: verificationMethod\n            });\n            verificationMethodDocuments.push(verificationMethodDocument);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "v2dqkfqX5IQLm3KoFkwN2",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 14134,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 67,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "LA5IWE6F9gUbf79nnMW1G",
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
          "_testId": "urn:uuid:1ec7f93c-f17d-4afb-b17d-dcbbb1c73793"
        },
        {
          "title": "bovine",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The field \"cryptosuite\" MUST be \"eddsa-rdfc-2022\".",
              "body": "function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const suites = proofs.map(p => p?.cryptosuite);\n\n          suites.some(\n            suite => suite === cryptosuite\n          ).should.equal(true, 'Expected at least one proof to have ' +\n            '\"cryptosuite\" with the value \"eddsa-rdfc-2022\": ' +\n            JSON.stringify(suites) + ' does not contain \"eddsa-rdfc-2022\".');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "rEUtLU9zXedgsreMH1uPm",
              "ctx": null,
              "_testId": "urn:uuid:7ea4005c-615b-4659-8f42-6cddabbac12c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine",
                "rowId": "The field \"cryptosuite\" MUST be \"eddsa-rdfc-2022\"."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Dereferencing the \"verificationMethod\" MUST result in an object containing a type property with the value set to \"Multikey\".",
              "body": "function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          verificationMethodDocuments.some(\n            verificationMethodDocument =>\n              verificationMethodDocument?.type === 'Multikey'\n          ).should.equal(true, 'Expected at least one proof to have \"type\" ' +\n            'property value \"Multikey\".');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "rEUtLU9zXedgsreMH1uPm",
              "ctx": null,
              "_testId": "urn:uuid:c033885a-0c8b-4dc0-ae58-33733cc226a7",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine",
                "rowId": "Dereferencing the \"verificationMethod\" MUST result in an object containing a type property with the value set to \"Multikey\"."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          verificationMethodDocuments.some(\n            verificationMethodDocument =>\n              verificationMethodDocument?.type === 'Multikey'\n          ).should.equal(true, 'Expected at least one proof to have \"type\" ' +\n            'property value \"Multikey\".'\n          );\n          const controllerDocuments = [];\n          for(const verificationMethodDocument of verificationMethodDocuments) {\n            const controllerDocument = await documentLoader({\n              url: verificationMethodDocument.controller\n            });\n            controllerDocuments.push(controllerDocument);\n          }\n          proofs.some(\n            proof => controllerDocuments.some(controllerDocument =>\n              controllerDocument.hasOwnProperty(proof.proofPurpose))\n          ).should.equal(true, 'Expected \"proof.proofPurpose\" field ' +\n             'to match the verification method controller.'\n          );\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "rEUtLU9zXedgsreMH1uPm",
              "ctx": null,
              "_testId": "urn:uuid:bc4c6912-08bf-4406-8c5b-d5af4b39ba69",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine",
                "rowId": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 14538,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"publicKeyMultibase\" value of the verification method MUST be 34 bytes in length and start with the base-58-btc prefix (z).",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          for(const verificationMethodDocument of verificationMethodDocuments) {\n            const multibase = 'z';\n            const {publicKeyMultibase} = verificationMethodDocument;\n            const isMultibaseEncoded =\n              publicKeyMultibase.startsWith(multibase) &&\n                shouldBeBs58(publicKeyMultibase);\n            isMultibaseEncoded.should.equal(\n              true,\n              'Expected \"publicKeyMultibase\" value of the verification ' +\n              'method to be multibase base58-btc encoded value'\n            );\n            const publicKeyMultibaseBytes = bs58Decode({\n              id: publicKeyMultibase\n            });\n            publicKeyMultibaseBytes.byteLength.should.equal(34, 'Expected ' +\n              '\"publicKeyMultibase\" value of the verification method to ' +\n              'be 34 bytes in length.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "rEUtLU9zXedgsreMH1uPm",
              "ctx": null,
              "_testId": "urn:uuid:b30a6b58-578b-4ed6-942c-851ee174776e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine",
                "rowId": "The \"publicKeyMultibase\" value of the verification method MUST be 34 bytes in length and start with the base-58-btc prefix (z)."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 14538,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "[\"publicKeyMultibase\"] MUST consist of a binary value that startswith the two-byte prefix 0xed01",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n\n          for(const verificationMethodDocument of verificationMethodDocuments) {\n            // If we can decode then the key is valid\n            const {publicKey} =\n              await fromEncodedMultikey(verificationMethodDocument);\n\n            publicKey.length.should.equal(32, 'Expected public key ' +\n              'to be 32 bytes.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "rEUtLU9zXedgsreMH1uPm",
              "ctx": null,
              "_testId": "urn:uuid:f3f3434a-f7d9-42f4-9a74-005d4593fb75",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine",
                "rowId": "[\"publicKeyMultibase\"] MUST consist of a binary value that startswith the two-byte prefix 0xed01"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 14538,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proofValue\" field when decoded to raw bytes, MUST be 64 bytes in length if the associated public key is 32 bytes or 114 bytes in length if the public key is 57 bytes.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          should.exist(issuedVc, 'Expected issuer to have issued a ' +\n            'credential.');\n          should.exist(proofs, 'Expected credential to have a proof.');\n          const eddsa2022Proofs = proofs.filter(\n            proof => proof?.cryptosuite === cryptosuite);\n          eddsa2022Proofs.length.should.be.gte(1, 'Expected at least one ' +\n            'eddsa-rdfc-2022 cryptosuite.');\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.proofValue, 'Expected a proof value on ' +\n              'the proof.');\n            const valueBytes = bs58Decode({id: proof.proofValue});\n            should.exist(proof.verificationMethod);\n            const vmBytes = await getPublicKeyBytes({\n              did: proof.verificationMethod});\n            vmBytes.byteLength.should.be.oneOf([32, 57], 'Expected public ' +\n              'key length to be either 32 or 57 bytes.');\n            if(vmBytes.byteLength === 32) {\n              valueBytes.byteLength.should.equal(64, 'Expected 64 byte ' +\n                'proofValue for 32 byte key.');\n            } else {\n              valueBytes.byteLength.should.equal(114, 'Expected 114 byte ' +\n                'proofValue for 57 byte key.');\n            }\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "rEUtLU9zXedgsreMH1uPm",
              "ctx": null,
              "_testId": "urn:uuid:6e41fec5-049f-450f-9cc1-d0ec36134d96",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine",
                "rowId": "\"proofValue\" field when decoded to raw bytes, MUST be 64 bytes in length if the associated public key is 32 bytes or 114 bytes in length if the public key is 57 bytes."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 14539,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof\" MUST verify when using a conformant verifier.",
              "body": "async function() {\n            this.test.cell = {columnId, rowId: this.test.title};\n            should.exist(verifier, 'Expected implementation to have a VC ' +\n              'API compatible verifier.');\n            const {result, error} = await verifier.post({json: {\n              verifiableCredential: issuedVc,\n              options: {checks: ['proof']}\n            }});\n            should.not.exist(error, 'Expected verifier to not error.');\n            should.exist(result, 'Expected verifier to return a result.');\n            result.status.should.not.equal(400, 'Expected status code to not ' +\n              'be 400.');\n            result.status.should.equal(200, 'Expected status code to be 200.');\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "rEUtLU9zXedgsreMH1uPm",
              "ctx": null,
              "_testId": "urn:uuid:f4e2b5dc-74b5-43fa-855e-0f3da964ad63",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine",
                "rowId": "\"proof\" MUST verify when using a conformant verifier."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 14539,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 118,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"bovine\"",
              "body": "async function() {\n          issuedVc = await createInitialVc({issuer, vc: validVc});\n          proofs = Array.isArray(issuedVc?.proof) ?\n            issuedVc.proof : [issuedVc?.proof];\n          const verificationMethods = proofs.map(\n            proof => proof.verificationMethod);\n          for(const verificationMethod of verificationMethods) {\n            const verificationMethodDocument = await documentLoader({\n              url: verificationMethod\n            });\n            verificationMethodDocuments.push(verificationMethodDocument);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "rEUtLU9zXedgsreMH1uPm",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 14246,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 291,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "LA5IWE6F9gUbf79nnMW1G",
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
          "_testId": "urn:uuid:2160769b-c277-4d0c-bbb6-8b6dbcc6fe18"
        }
      ],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "58oEMH-hOnvbSw_BdV8WV",
      "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Implementation",
      "_testId": "urn:uuid:ff94e535-04e4-469d-aa7b-3b2fe63e0461",
      "columns": [
        "apicatalog.com",
        "Digital Bazaar",
        "Grotto Networking",
        "OpSecId",
        "SpruceID",
        "Trinsic",
        "bovine"
      ],
      "rows": [
        {
          "id": "The field \"cryptosuite\" MUST be \"eddsa-rdfc-2022\".",
          "cells": [
            {
              "type": "test",
              "title": "The field \"cryptosuite\" MUST be \"eddsa-rdfc-2022\".",
              "body": "function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const suites = proofs.map(p => p?.cryptosuite);\n\n          suites.some(\n            suite => suite === cryptosuite\n          ).should.equal(true, 'Expected at least one proof to have ' +\n            '\"cryptosuite\" with the value \"eddsa-rdfc-2022\": ' +\n            JSON.stringify(suites) + ' does not contain \"eddsa-rdfc-2022\".');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "IqLfOfbpg8cD82gAQEKrN",
              "ctx": null,
              "_testId": "urn:uuid:a926815d-f48c-4e61-8dd4-6d0c35bc6101",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "The field \"cryptosuite\" MUST be \"eddsa-rdfc-2022\"."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The field \"cryptosuite\" MUST be \"eddsa-rdfc-2022\".",
              "body": "function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const suites = proofs.map(p => p?.cryptosuite);\n\n          suites.some(\n            suite => suite === cryptosuite\n          ).should.equal(true, 'Expected at least one proof to have ' +\n            '\"cryptosuite\" with the value \"eddsa-rdfc-2022\": ' +\n            JSON.stringify(suites) + ' does not contain \"eddsa-rdfc-2022\".');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "X3Vl1nuLc53Z9WeR_XOAU",
              "ctx": null,
              "_testId": "urn:uuid:f65c9e2e-4871-4645-ad6f-dba3cc98273a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The field \"cryptosuite\" MUST be \"eddsa-rdfc-2022\"."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The field \"cryptosuite\" MUST be \"eddsa-rdfc-2022\".",
              "body": "function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const suites = proofs.map(p => p?.cryptosuite);\n\n          suites.some(\n            suite => suite === cryptosuite\n          ).should.equal(true, 'Expected at least one proof to have ' +\n            '\"cryptosuite\" with the value \"eddsa-rdfc-2022\": ' +\n            JSON.stringify(suites) + ' does not contain \"eddsa-rdfc-2022\".');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "QvxbSfmfv2UA_3YIZfJub",
              "ctx": null,
              "_testId": "urn:uuid:dd9f998e-4beb-4299-ba64-85ddce563556",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The field \"cryptosuite\" MUST be \"eddsa-rdfc-2022\"."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "cell": {
                "rowId": "The field \"cryptosuite\" MUST be \"eddsa-rdfc-2022\".",
                "colId": "OpSecId"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            },
            {
              "type": "test",
              "title": "The field \"cryptosuite\" MUST be \"eddsa-rdfc-2022\".",
              "body": "function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const suites = proofs.map(p => p?.cryptosuite);\n\n          suites.some(\n            suite => suite === cryptosuite\n          ).should.equal(true, 'Expected at least one proof to have ' +\n            '\"cryptosuite\" with the value \"eddsa-rdfc-2022\": ' +\n            JSON.stringify(suites) + ' does not contain \"eddsa-rdfc-2022\".');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "8nRH6Acvkh66Ny5HiMReH",
              "ctx": null,
              "_testId": "urn:uuid:1d66eb4d-9c4e-4bc9-82e0-fd5a2ae4a59e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The field \"cryptosuite\" MUST be \"eddsa-rdfc-2022\"."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The field \"cryptosuite\" MUST be \"eddsa-rdfc-2022\".",
              "body": "function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const suites = proofs.map(p => p?.cryptosuite);\n\n          suites.some(\n            suite => suite === cryptosuite\n          ).should.equal(true, 'Expected at least one proof to have ' +\n            '\"cryptosuite\" with the value \"eddsa-rdfc-2022\": ' +\n            JSON.stringify(suites) + ' does not contain \"eddsa-rdfc-2022\".');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "v2dqkfqX5IQLm3KoFkwN2",
              "ctx": null,
              "_testId": "urn:uuid:908b067f-19ab-4e08-abde-2f65d168378f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "The field \"cryptosuite\" MUST be \"eddsa-rdfc-2022\"."
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected at least one proof to have \"cryptosuite\" with the value \"eddsa-rdfc-2022\": [\"eddsa-2022\"] does not contain \"eddsa-rdfc-2022\".: expected false to equal true",
                "showDiff": true,
                "actual": "false",
                "expected": "true",
                "stack": "AssertionError: Expected at least one proof to have \"cryptosuite\" with the value \"eddsa-rdfc-2022\": [\"eddsa-2022\"] does not contain \"eddsa-rdfc-2022\".: expected false to equal true\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js:68:20)\n    at process.processImmediate (node:internal/timers:483:21)"
              }
            },
            {
              "type": "test",
              "title": "The field \"cryptosuite\" MUST be \"eddsa-rdfc-2022\".",
              "body": "function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const suites = proofs.map(p => p?.cryptosuite);\n\n          suites.some(\n            suite => suite === cryptosuite\n          ).should.equal(true, 'Expected at least one proof to have ' +\n            '\"cryptosuite\" with the value \"eddsa-rdfc-2022\": ' +\n            JSON.stringify(suites) + ' does not contain \"eddsa-rdfc-2022\".');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "rEUtLU9zXedgsreMH1uPm",
              "ctx": null,
              "_testId": "urn:uuid:7ea4005c-615b-4659-8f42-6cddabbac12c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine",
                "rowId": "The field \"cryptosuite\" MUST be \"eddsa-rdfc-2022\"."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "Dereferencing the \"verificationMethod\" MUST result in an object containing a type property with the value set to \"Multikey\".",
          "cells": [
            {
              "type": "test",
              "title": "Dereferencing the \"verificationMethod\" MUST result in an object containing a type property with the value set to \"Multikey\".",
              "body": "function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          verificationMethodDocuments.some(\n            verificationMethodDocument =>\n              verificationMethodDocument?.type === 'Multikey'\n          ).should.equal(true, 'Expected at least one proof to have \"type\" ' +\n            'property value \"Multikey\".');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "IqLfOfbpg8cD82gAQEKrN",
              "ctx": null,
              "_testId": "urn:uuid:50a15543-81b1-4a3d-bba2-d418d088d322",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "Dereferencing the \"verificationMethod\" MUST result in an object containing a type property with the value set to \"Multikey\"."
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Dereferencing the \"verificationMethod\" MUST result in an object containing a type property with the value set to \"Multikey\".",
              "body": "function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          verificationMethodDocuments.some(\n            verificationMethodDocument =>\n              verificationMethodDocument?.type === 'Multikey'\n          ).should.equal(true, 'Expected at least one proof to have \"type\" ' +\n            'property value \"Multikey\".');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "X3Vl1nuLc53Z9WeR_XOAU",
              "ctx": null,
              "_testId": "urn:uuid:92cf9ef7-0bc7-414c-b43a-33d4065791ef",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "Dereferencing the \"verificationMethod\" MUST result in an object containing a type property with the value set to \"Multikey\"."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Dereferencing the \"verificationMethod\" MUST result in an object containing a type property with the value set to \"Multikey\".",
              "body": "function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          verificationMethodDocuments.some(\n            verificationMethodDocument =>\n              verificationMethodDocument?.type === 'Multikey'\n          ).should.equal(true, 'Expected at least one proof to have \"type\" ' +\n            'property value \"Multikey\".');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "QvxbSfmfv2UA_3YIZfJub",
              "ctx": null,
              "_testId": "urn:uuid:194ac052-d6f4-4ac3-a98b-d675abeae9dd",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "Dereferencing the \"verificationMethod\" MUST result in an object containing a type property with the value set to \"Multikey\"."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "cell": {
                "rowId": "Dereferencing the \"verificationMethod\" MUST result in an object containing a type property with the value set to \"Multikey\".",
                "colId": "OpSecId"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            },
            {
              "type": "test",
              "title": "Dereferencing the \"verificationMethod\" MUST result in an object containing a type property with the value set to \"Multikey\".",
              "body": "function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          verificationMethodDocuments.some(\n            verificationMethodDocument =>\n              verificationMethodDocument?.type === 'Multikey'\n          ).should.equal(true, 'Expected at least one proof to have \"type\" ' +\n            'property value \"Multikey\".');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "8nRH6Acvkh66Ny5HiMReH",
              "ctx": null,
              "_testId": "urn:uuid:5c2502cb-c9d2-4345-993b-b92ab0c9277e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "Dereferencing the \"verificationMethod\" MUST result in an object containing a type property with the value set to \"Multikey\"."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Dereferencing the \"verificationMethod\" MUST result in an object containing a type property with the value set to \"Multikey\".",
              "body": "function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          verificationMethodDocuments.some(\n            verificationMethodDocument =>\n              verificationMethodDocument?.type === 'Multikey'\n          ).should.equal(true, 'Expected at least one proof to have \"type\" ' +\n            'property value \"Multikey\".');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "v2dqkfqX5IQLm3KoFkwN2",
              "ctx": null,
              "_testId": "urn:uuid:7b60384c-9010-41f0-b395-9970fc1c708f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "Dereferencing the \"verificationMethod\" MUST result in an object containing a type property with the value set to \"Multikey\"."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Dereferencing the \"verificationMethod\" MUST result in an object containing a type property with the value set to \"Multikey\".",
              "body": "function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          verificationMethodDocuments.some(\n            verificationMethodDocument =>\n              verificationMethodDocument?.type === 'Multikey'\n          ).should.equal(true, 'Expected at least one proof to have \"type\" ' +\n            'property value \"Multikey\".');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "rEUtLU9zXedgsreMH1uPm",
              "ctx": null,
              "_testId": "urn:uuid:c033885a-0c8b-4dc0-ae58-33733cc226a7",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine",
                "rowId": "Dereferencing the \"verificationMethod\" MUST result in an object containing a type property with the value set to \"Multikey\"."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
          "cells": [
            {
              "type": "test",
              "title": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          verificationMethodDocuments.some(\n            verificationMethodDocument =>\n              verificationMethodDocument?.type === 'Multikey'\n          ).should.equal(true, 'Expected at least one proof to have \"type\" ' +\n            'property value \"Multikey\".'\n          );\n          const controllerDocuments = [];\n          for(const verificationMethodDocument of verificationMethodDocuments) {\n            const controllerDocument = await documentLoader({\n              url: verificationMethodDocument.controller\n            });\n            controllerDocuments.push(controllerDocument);\n          }\n          proofs.some(\n            proof => controllerDocuments.some(controllerDocument =>\n              controllerDocument.hasOwnProperty(proof.proofPurpose))\n          ).should.equal(true, 'Expected \"proof.proofPurpose\" field ' +\n             'to match the verification method controller.'\n          );\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "IqLfOfbpg8cD82gAQEKrN",
              "ctx": null,
              "_testId": "urn:uuid:519f760e-5819-4f21-bfe9-70f8e9675f46",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 10375,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          verificationMethodDocuments.some(\n            verificationMethodDocument =>\n              verificationMethodDocument?.type === 'Multikey'\n          ).should.equal(true, 'Expected at least one proof to have \"type\" ' +\n            'property value \"Multikey\".'\n          );\n          const controllerDocuments = [];\n          for(const verificationMethodDocument of verificationMethodDocuments) {\n            const controllerDocument = await documentLoader({\n              url: verificationMethodDocument.controller\n            });\n            controllerDocuments.push(controllerDocument);\n          }\n          proofs.some(\n            proof => controllerDocuments.some(controllerDocument =>\n              controllerDocument.hasOwnProperty(proof.proofPurpose))\n          ).should.equal(true, 'Expected \"proof.proofPurpose\" field ' +\n             'to match the verification method controller.'\n          );\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "X3Vl1nuLc53Z9WeR_XOAU",
              "ctx": null,
              "_testId": "urn:uuid:ca3f9735-fd7a-4611-8ed6-549cf55673ba",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 11325,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          verificationMethodDocuments.some(\n            verificationMethodDocument =>\n              verificationMethodDocument?.type === 'Multikey'\n          ).should.equal(true, 'Expected at least one proof to have \"type\" ' +\n            'property value \"Multikey\".'\n          );\n          const controllerDocuments = [];\n          for(const verificationMethodDocument of verificationMethodDocuments) {\n            const controllerDocument = await documentLoader({\n              url: verificationMethodDocument.controller\n            });\n            controllerDocuments.push(controllerDocument);\n          }\n          proofs.some(\n            proof => controllerDocuments.some(controllerDocument =>\n              controllerDocument.hasOwnProperty(proof.proofPurpose))\n          ).should.equal(true, 'Expected \"proof.proofPurpose\" field ' +\n             'to match the verification method controller.'\n          );\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "QvxbSfmfv2UA_3YIZfJub",
              "ctx": null,
              "_testId": "urn:uuid:83554894-d8f1-44c2-9cbd-8f07ca4d2751",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 13782,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "cell": {
                "rowId": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
                "colId": "OpSecId"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            },
            {
              "type": "test",
              "title": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          verificationMethodDocuments.some(\n            verificationMethodDocument =>\n              verificationMethodDocument?.type === 'Multikey'\n          ).should.equal(true, 'Expected at least one proof to have \"type\" ' +\n            'property value \"Multikey\".'\n          );\n          const controllerDocuments = [];\n          for(const verificationMethodDocument of verificationMethodDocuments) {\n            const controllerDocument = await documentLoader({\n              url: verificationMethodDocument.controller\n            });\n            controllerDocuments.push(controllerDocument);\n          }\n          proofs.some(\n            proof => controllerDocuments.some(controllerDocument =>\n              controllerDocument.hasOwnProperty(proof.proofPurpose))\n          ).should.equal(true, 'Expected \"proof.proofPurpose\" field ' +\n             'to match the verification method controller.'\n          );\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "8nRH6Acvkh66Ny5HiMReH",
              "ctx": null,
              "_testId": "urn:uuid:a33ddfb0-dc16-4487-8721-1a734cb6776f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 14103,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          verificationMethodDocuments.some(\n            verificationMethodDocument =>\n              verificationMethodDocument?.type === 'Multikey'\n          ).should.equal(true, 'Expected at least one proof to have \"type\" ' +\n            'property value \"Multikey\".'\n          );\n          const controllerDocuments = [];\n          for(const verificationMethodDocument of verificationMethodDocuments) {\n            const controllerDocument = await documentLoader({\n              url: verificationMethodDocument.controller\n            });\n            controllerDocuments.push(controllerDocument);\n          }\n          proofs.some(\n            proof => controllerDocuments.some(controllerDocument =>\n              controllerDocument.hasOwnProperty(proof.proofPurpose))\n          ).should.equal(true, 'Expected \"proof.proofPurpose\" field ' +\n             'to match the verification method controller.'\n          );\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "v2dqkfqX5IQLm3KoFkwN2",
              "ctx": null,
              "_testId": "urn:uuid:9c8be1d3-9b61-4ff8-8a07-2fbf6a164859",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 14203,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          verificationMethodDocuments.some(\n            verificationMethodDocument =>\n              verificationMethodDocument?.type === 'Multikey'\n          ).should.equal(true, 'Expected at least one proof to have \"type\" ' +\n            'property value \"Multikey\".'\n          );\n          const controllerDocuments = [];\n          for(const verificationMethodDocument of verificationMethodDocuments) {\n            const controllerDocument = await documentLoader({\n              url: verificationMethodDocument.controller\n            });\n            controllerDocuments.push(controllerDocument);\n          }\n          proofs.some(\n            proof => controllerDocuments.some(controllerDocument =>\n              controllerDocument.hasOwnProperty(proof.proofPurpose))\n          ).should.equal(true, 'Expected \"proof.proofPurpose\" field ' +\n             'to match the verification method controller.'\n          );\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "rEUtLU9zXedgsreMH1uPm",
              "ctx": null,
              "_testId": "urn:uuid:bc4c6912-08bf-4406-8c5b-d5af4b39ba69",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine",
                "rowId": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 14538,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "The \"publicKeyMultibase\" value of the verification method MUST be 34 bytes in length and start with the base-58-btc prefix (z).",
          "cells": [
            {
              "type": "test",
              "title": "The \"publicKeyMultibase\" value of the verification method MUST be 34 bytes in length and start with the base-58-btc prefix (z).",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          for(const verificationMethodDocument of verificationMethodDocuments) {\n            const multibase = 'z';\n            const {publicKeyMultibase} = verificationMethodDocument;\n            const isMultibaseEncoded =\n              publicKeyMultibase.startsWith(multibase) &&\n                shouldBeBs58(publicKeyMultibase);\n            isMultibaseEncoded.should.equal(\n              true,\n              'Expected \"publicKeyMultibase\" value of the verification ' +\n              'method to be multibase base58-btc encoded value'\n            );\n            const publicKeyMultibaseBytes = bs58Decode({\n              id: publicKeyMultibase\n            });\n            publicKeyMultibaseBytes.byteLength.should.equal(34, 'Expected ' +\n              '\"publicKeyMultibase\" value of the verification method to ' +\n              'be 34 bytes in length.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "IqLfOfbpg8cD82gAQEKrN",
              "ctx": null,
              "_testId": "urn:uuid:44d1e2ab-2966-46b1-a672-c70293bc5ffb",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "The \"publicKeyMultibase\" value of the verification method MUST be 34 bytes in length and start with the base-58-btc prefix (z)."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 10376,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"publicKeyMultibase\" value of the verification method MUST be 34 bytes in length and start with the base-58-btc prefix (z).",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          for(const verificationMethodDocument of verificationMethodDocuments) {\n            const multibase = 'z';\n            const {publicKeyMultibase} = verificationMethodDocument;\n            const isMultibaseEncoded =\n              publicKeyMultibase.startsWith(multibase) &&\n                shouldBeBs58(publicKeyMultibase);\n            isMultibaseEncoded.should.equal(\n              true,\n              'Expected \"publicKeyMultibase\" value of the verification ' +\n              'method to be multibase base58-btc encoded value'\n            );\n            const publicKeyMultibaseBytes = bs58Decode({\n              id: publicKeyMultibase\n            });\n            publicKeyMultibaseBytes.byteLength.should.equal(34, 'Expected ' +\n              '\"publicKeyMultibase\" value of the verification method to ' +\n              'be 34 bytes in length.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "X3Vl1nuLc53Z9WeR_XOAU",
              "ctx": null,
              "_testId": "urn:uuid:c0fcc95d-0b23-4689-bc85-db49b7d9be16",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The \"publicKeyMultibase\" value of the verification method MUST be 34 bytes in length and start with the base-58-btc prefix (z)."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 11326,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"publicKeyMultibase\" value of the verification method MUST be 34 bytes in length and start with the base-58-btc prefix (z).",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          for(const verificationMethodDocument of verificationMethodDocuments) {\n            const multibase = 'z';\n            const {publicKeyMultibase} = verificationMethodDocument;\n            const isMultibaseEncoded =\n              publicKeyMultibase.startsWith(multibase) &&\n                shouldBeBs58(publicKeyMultibase);\n            isMultibaseEncoded.should.equal(\n              true,\n              'Expected \"publicKeyMultibase\" value of the verification ' +\n              'method to be multibase base58-btc encoded value'\n            );\n            const publicKeyMultibaseBytes = bs58Decode({\n              id: publicKeyMultibase\n            });\n            publicKeyMultibaseBytes.byteLength.should.equal(34, 'Expected ' +\n              '\"publicKeyMultibase\" value of the verification method to ' +\n              'be 34 bytes in length.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "QvxbSfmfv2UA_3YIZfJub",
              "ctx": null,
              "_testId": "urn:uuid:a6c45ab1-b05a-4106-b302-0737e18b270f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The \"publicKeyMultibase\" value of the verification method MUST be 34 bytes in length and start with the base-58-btc prefix (z)."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 13782,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "cell": {
                "rowId": "The \"publicKeyMultibase\" value of the verification method MUST be 34 bytes in length and start with the base-58-btc prefix (z).",
                "colId": "OpSecId"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            },
            {
              "type": "test",
              "title": "The \"publicKeyMultibase\" value of the verification method MUST be 34 bytes in length and start with the base-58-btc prefix (z).",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          for(const verificationMethodDocument of verificationMethodDocuments) {\n            const multibase = 'z';\n            const {publicKeyMultibase} = verificationMethodDocument;\n            const isMultibaseEncoded =\n              publicKeyMultibase.startsWith(multibase) &&\n                shouldBeBs58(publicKeyMultibase);\n            isMultibaseEncoded.should.equal(\n              true,\n              'Expected \"publicKeyMultibase\" value of the verification ' +\n              'method to be multibase base58-btc encoded value'\n            );\n            const publicKeyMultibaseBytes = bs58Decode({\n              id: publicKeyMultibase\n            });\n            publicKeyMultibaseBytes.byteLength.should.equal(34, 'Expected ' +\n              '\"publicKeyMultibase\" value of the verification method to ' +\n              'be 34 bytes in length.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "8nRH6Acvkh66Ny5HiMReH",
              "ctx": null,
              "_testId": "urn:uuid:421b8205-64f4-4152-b339-359ddad7f1a3",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The \"publicKeyMultibase\" value of the verification method MUST be 34 bytes in length and start with the base-58-btc prefix (z)."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 14104,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"publicKeyMultibase\" value of the verification method MUST be 34 bytes in length and start with the base-58-btc prefix (z).",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          for(const verificationMethodDocument of verificationMethodDocuments) {\n            const multibase = 'z';\n            const {publicKeyMultibase} = verificationMethodDocument;\n            const isMultibaseEncoded =\n              publicKeyMultibase.startsWith(multibase) &&\n                shouldBeBs58(publicKeyMultibase);\n            isMultibaseEncoded.should.equal(\n              true,\n              'Expected \"publicKeyMultibase\" value of the verification ' +\n              'method to be multibase base58-btc encoded value'\n            );\n            const publicKeyMultibaseBytes = bs58Decode({\n              id: publicKeyMultibase\n            });\n            publicKeyMultibaseBytes.byteLength.should.equal(34, 'Expected ' +\n              '\"publicKeyMultibase\" value of the verification method to ' +\n              'be 34 bytes in length.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "v2dqkfqX5IQLm3KoFkwN2",
              "ctx": null,
              "_testId": "urn:uuid:b5f7839a-aff4-43b0-8fec-9bd6f4470f5b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "The \"publicKeyMultibase\" value of the verification method MUST be 34 bytes in length and start with the base-58-btc prefix (z)."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 14204,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"publicKeyMultibase\" value of the verification method MUST be 34 bytes in length and start with the base-58-btc prefix (z).",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          for(const verificationMethodDocument of verificationMethodDocuments) {\n            const multibase = 'z';\n            const {publicKeyMultibase} = verificationMethodDocument;\n            const isMultibaseEncoded =\n              publicKeyMultibase.startsWith(multibase) &&\n                shouldBeBs58(publicKeyMultibase);\n            isMultibaseEncoded.should.equal(\n              true,\n              'Expected \"publicKeyMultibase\" value of the verification ' +\n              'method to be multibase base58-btc encoded value'\n            );\n            const publicKeyMultibaseBytes = bs58Decode({\n              id: publicKeyMultibase\n            });\n            publicKeyMultibaseBytes.byteLength.should.equal(34, 'Expected ' +\n              '\"publicKeyMultibase\" value of the verification method to ' +\n              'be 34 bytes in length.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "rEUtLU9zXedgsreMH1uPm",
              "ctx": null,
              "_testId": "urn:uuid:b30a6b58-578b-4ed6-942c-851ee174776e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine",
                "rowId": "The \"publicKeyMultibase\" value of the verification method MUST be 34 bytes in length and start with the base-58-btc prefix (z)."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 14538,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "[\"publicKeyMultibase\"] MUST consist of a binary value that startswith the two-byte prefix 0xed01",
          "cells": [
            {
              "type": "test",
              "title": "[\"publicKeyMultibase\"] MUST consist of a binary value that startswith the two-byte prefix 0xed01",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n\n          for(const verificationMethodDocument of verificationMethodDocuments) {\n            // If we can decode then the key is valid\n            const {publicKey} =\n              await fromEncodedMultikey(verificationMethodDocument);\n\n            publicKey.length.should.equal(32, 'Expected public key ' +\n              'to be 32 bytes.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "IqLfOfbpg8cD82gAQEKrN",
              "ctx": null,
              "_testId": "urn:uuid:5daf862f-b1af-479f-b3eb-ac1d4accf73e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "[\"publicKeyMultibase\"] MUST consist of a binary value that startswith the two-byte prefix 0xed01"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 10376,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "[\"publicKeyMultibase\"] MUST consist of a binary value that startswith the two-byte prefix 0xed01",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n\n          for(const verificationMethodDocument of verificationMethodDocuments) {\n            // If we can decode then the key is valid\n            const {publicKey} =\n              await fromEncodedMultikey(verificationMethodDocument);\n\n            publicKey.length.should.equal(32, 'Expected public key ' +\n              'to be 32 bytes.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "X3Vl1nuLc53Z9WeR_XOAU",
              "ctx": null,
              "_testId": "urn:uuid:3458bdec-5046-42bd-b558-6d73268c99e9",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "[\"publicKeyMultibase\"] MUST consist of a binary value that startswith the two-byte prefix 0xed01"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 11326,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "[\"publicKeyMultibase\"] MUST consist of a binary value that startswith the two-byte prefix 0xed01",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n\n          for(const verificationMethodDocument of verificationMethodDocuments) {\n            // If we can decode then the key is valid\n            const {publicKey} =\n              await fromEncodedMultikey(verificationMethodDocument);\n\n            publicKey.length.should.equal(32, 'Expected public key ' +\n              'to be 32 bytes.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "QvxbSfmfv2UA_3YIZfJub",
              "ctx": null,
              "_testId": "urn:uuid:a1a05653-f4c7-46eb-996c-359acf085f77",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "[\"publicKeyMultibase\"] MUST consist of a binary value that startswith the two-byte prefix 0xed01"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 13783,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "cell": {
                "rowId": "[\"publicKeyMultibase\"] MUST consist of a binary value that startswith the two-byte prefix 0xed01",
                "colId": "OpSecId"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            },
            {
              "type": "test",
              "title": "[\"publicKeyMultibase\"] MUST consist of a binary value that startswith the two-byte prefix 0xed01",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n\n          for(const verificationMethodDocument of verificationMethodDocuments) {\n            // If we can decode then the key is valid\n            const {publicKey} =\n              await fromEncodedMultikey(verificationMethodDocument);\n\n            publicKey.length.should.equal(32, 'Expected public key ' +\n              'to be 32 bytes.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "8nRH6Acvkh66Ny5HiMReH",
              "ctx": null,
              "_testId": "urn:uuid:807081e3-bec3-4b5d-8427-9a998ef0a6e5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "[\"publicKeyMultibase\"] MUST consist of a binary value that startswith the two-byte prefix 0xed01"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 14104,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "[\"publicKeyMultibase\"] MUST consist of a binary value that startswith the two-byte prefix 0xed01",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n\n          for(const verificationMethodDocument of verificationMethodDocuments) {\n            // If we can decode then the key is valid\n            const {publicKey} =\n              await fromEncodedMultikey(verificationMethodDocument);\n\n            publicKey.length.should.equal(32, 'Expected public key ' +\n              'to be 32 bytes.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "v2dqkfqX5IQLm3KoFkwN2",
              "ctx": null,
              "_testId": "urn:uuid:c963faa2-2ca3-40f5-ba0f-4956e7868ed3",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "[\"publicKeyMultibase\"] MUST consist of a binary value that startswith the two-byte prefix 0xed01"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 14204,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "[\"publicKeyMultibase\"] MUST consist of a binary value that startswith the two-byte prefix 0xed01",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n\n          for(const verificationMethodDocument of verificationMethodDocuments) {\n            // If we can decode then the key is valid\n            const {publicKey} =\n              await fromEncodedMultikey(verificationMethodDocument);\n\n            publicKey.length.should.equal(32, 'Expected public key ' +\n              'to be 32 bytes.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "rEUtLU9zXedgsreMH1uPm",
              "ctx": null,
              "_testId": "urn:uuid:f3f3434a-f7d9-42f4-9a74-005d4593fb75",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine",
                "rowId": "[\"publicKeyMultibase\"] MUST consist of a binary value that startswith the two-byte prefix 0xed01"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 14538,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "\"proofValue\" field when decoded to raw bytes, MUST be 64 bytes in length if the associated public key is 32 bytes or 114 bytes in length if the public key is 57 bytes.",
          "cells": [
            {
              "type": "test",
              "title": "\"proofValue\" field when decoded to raw bytes, MUST be 64 bytes in length if the associated public key is 32 bytes or 114 bytes in length if the public key is 57 bytes.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          should.exist(issuedVc, 'Expected issuer to have issued a ' +\n            'credential.');\n          should.exist(proofs, 'Expected credential to have a proof.');\n          const eddsa2022Proofs = proofs.filter(\n            proof => proof?.cryptosuite === cryptosuite);\n          eddsa2022Proofs.length.should.be.gte(1, 'Expected at least one ' +\n            'eddsa-rdfc-2022 cryptosuite.');\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.proofValue, 'Expected a proof value on ' +\n              'the proof.');\n            const valueBytes = bs58Decode({id: proof.proofValue});\n            should.exist(proof.verificationMethod);\n            const vmBytes = await getPublicKeyBytes({\n              did: proof.verificationMethod});\n            vmBytes.byteLength.should.be.oneOf([32, 57], 'Expected public ' +\n              'key length to be either 32 or 57 bytes.');\n            if(vmBytes.byteLength === 32) {\n              valueBytes.byteLength.should.equal(64, 'Expected 64 byte ' +\n                'proofValue for 32 byte key.');\n            } else {\n              valueBytes.byteLength.should.equal(114, 'Expected 114 byte ' +\n                'proofValue for 57 byte key.');\n            }\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "IqLfOfbpg8cD82gAQEKrN",
              "ctx": null,
              "_testId": "urn:uuid:035326d9-1afd-438b-8510-fb40f675bdeb",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "\"proofValue\" field when decoded to raw bytes, MUST be 64 bytes in length if the associated public key is 32 bytes or 114 bytes in length if the public key is 57 bytes."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 10377,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proofValue\" field when decoded to raw bytes, MUST be 64 bytes in length if the associated public key is 32 bytes or 114 bytes in length if the public key is 57 bytes.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          should.exist(issuedVc, 'Expected issuer to have issued a ' +\n            'credential.');\n          should.exist(proofs, 'Expected credential to have a proof.');\n          const eddsa2022Proofs = proofs.filter(\n            proof => proof?.cryptosuite === cryptosuite);\n          eddsa2022Proofs.length.should.be.gte(1, 'Expected at least one ' +\n            'eddsa-rdfc-2022 cryptosuite.');\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.proofValue, 'Expected a proof value on ' +\n              'the proof.');\n            const valueBytes = bs58Decode({id: proof.proofValue});\n            should.exist(proof.verificationMethod);\n            const vmBytes = await getPublicKeyBytes({\n              did: proof.verificationMethod});\n            vmBytes.byteLength.should.be.oneOf([32, 57], 'Expected public ' +\n              'key length to be either 32 or 57 bytes.');\n            if(vmBytes.byteLength === 32) {\n              valueBytes.byteLength.should.equal(64, 'Expected 64 byte ' +\n                'proofValue for 32 byte key.');\n            } else {\n              valueBytes.byteLength.should.equal(114, 'Expected 114 byte ' +\n                'proofValue for 57 byte key.');\n            }\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "X3Vl1nuLc53Z9WeR_XOAU",
              "ctx": null,
              "_testId": "urn:uuid:3da3942a-b9f8-45d8-942e-30f29aa7a097",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "\"proofValue\" field when decoded to raw bytes, MUST be 64 bytes in length if the associated public key is 32 bytes or 114 bytes in length if the public key is 57 bytes."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 11326,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proofValue\" field when decoded to raw bytes, MUST be 64 bytes in length if the associated public key is 32 bytes or 114 bytes in length if the public key is 57 bytes.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          should.exist(issuedVc, 'Expected issuer to have issued a ' +\n            'credential.');\n          should.exist(proofs, 'Expected credential to have a proof.');\n          const eddsa2022Proofs = proofs.filter(\n            proof => proof?.cryptosuite === cryptosuite);\n          eddsa2022Proofs.length.should.be.gte(1, 'Expected at least one ' +\n            'eddsa-rdfc-2022 cryptosuite.');\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.proofValue, 'Expected a proof value on ' +\n              'the proof.');\n            const valueBytes = bs58Decode({id: proof.proofValue});\n            should.exist(proof.verificationMethod);\n            const vmBytes = await getPublicKeyBytes({\n              did: proof.verificationMethod});\n            vmBytes.byteLength.should.be.oneOf([32, 57], 'Expected public ' +\n              'key length to be either 32 or 57 bytes.');\n            if(vmBytes.byteLength === 32) {\n              valueBytes.byteLength.should.equal(64, 'Expected 64 byte ' +\n                'proofValue for 32 byte key.');\n            } else {\n              valueBytes.byteLength.should.equal(114, 'Expected 114 byte ' +\n                'proofValue for 57 byte key.');\n            }\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "QvxbSfmfv2UA_3YIZfJub",
              "ctx": null,
              "_testId": "urn:uuid:1e791ed8-dd0b-4e02-96dd-6e326b87ef57",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "\"proofValue\" field when decoded to raw bytes, MUST be 64 bytes in length if the associated public key is 32 bytes or 114 bytes in length if the public key is 57 bytes."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 13783,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "cell": {
                "rowId": "\"proofValue\" field when decoded to raw bytes, MUST be 64 bytes in length if the associated public key is 32 bytes or 114 bytes in length if the public key is 57 bytes.",
                "colId": "OpSecId"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            },
            {
              "type": "test",
              "title": "\"proofValue\" field when decoded to raw bytes, MUST be 64 bytes in length if the associated public key is 32 bytes or 114 bytes in length if the public key is 57 bytes.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          should.exist(issuedVc, 'Expected issuer to have issued a ' +\n            'credential.');\n          should.exist(proofs, 'Expected credential to have a proof.');\n          const eddsa2022Proofs = proofs.filter(\n            proof => proof?.cryptosuite === cryptosuite);\n          eddsa2022Proofs.length.should.be.gte(1, 'Expected at least one ' +\n            'eddsa-rdfc-2022 cryptosuite.');\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.proofValue, 'Expected a proof value on ' +\n              'the proof.');\n            const valueBytes = bs58Decode({id: proof.proofValue});\n            should.exist(proof.verificationMethod);\n            const vmBytes = await getPublicKeyBytes({\n              did: proof.verificationMethod});\n            vmBytes.byteLength.should.be.oneOf([32, 57], 'Expected public ' +\n              'key length to be either 32 or 57 bytes.');\n            if(vmBytes.byteLength === 32) {\n              valueBytes.byteLength.should.equal(64, 'Expected 64 byte ' +\n                'proofValue for 32 byte key.');\n            } else {\n              valueBytes.byteLength.should.equal(114, 'Expected 114 byte ' +\n                'proofValue for 57 byte key.');\n            }\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "8nRH6Acvkh66Ny5HiMReH",
              "ctx": null,
              "_testId": "urn:uuid:9543b95f-eedc-434a-845e-6fba7cbb518b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "\"proofValue\" field when decoded to raw bytes, MUST be 64 bytes in length if the associated public key is 32 bytes or 114 bytes in length if the public key is 57 bytes."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 14105,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proofValue\" field when decoded to raw bytes, MUST be 64 bytes in length if the associated public key is 32 bytes or 114 bytes in length if the public key is 57 bytes.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          should.exist(issuedVc, 'Expected issuer to have issued a ' +\n            'credential.');\n          should.exist(proofs, 'Expected credential to have a proof.');\n          const eddsa2022Proofs = proofs.filter(\n            proof => proof?.cryptosuite === cryptosuite);\n          eddsa2022Proofs.length.should.be.gte(1, 'Expected at least one ' +\n            'eddsa-rdfc-2022 cryptosuite.');\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.proofValue, 'Expected a proof value on ' +\n              'the proof.');\n            const valueBytes = bs58Decode({id: proof.proofValue});\n            should.exist(proof.verificationMethod);\n            const vmBytes = await getPublicKeyBytes({\n              did: proof.verificationMethod});\n            vmBytes.byteLength.should.be.oneOf([32, 57], 'Expected public ' +\n              'key length to be either 32 or 57 bytes.');\n            if(vmBytes.byteLength === 32) {\n              valueBytes.byteLength.should.equal(64, 'Expected 64 byte ' +\n                'proofValue for 32 byte key.');\n            } else {\n              valueBytes.byteLength.should.equal(114, 'Expected 114 byte ' +\n                'proofValue for 57 byte key.');\n            }\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "v2dqkfqX5IQLm3KoFkwN2",
              "ctx": null,
              "_testId": "urn:uuid:caa7e297-6d3f-48dd-a9f9-ad1e49816445",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "\"proofValue\" field when decoded to raw bytes, MUST be 64 bytes in length if the associated public key is 32 bytes or 114 bytes in length if the public key is 57 bytes."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 14205,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected at least one eddsa-rdfc-2022 cryptosuite.: expected +0 to be at least 1",
                "showDiff": true,
                "actual": "0",
                "expected": "1",
                "operator": "strictEqual",
                "stack": "AssertionError: Expected at least one eddsa-rdfc-2022 cryptosuite.: expected +0 to be at least 1\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js:198:44)\n    at process.processImmediate (node:internal/timers:483:21)"
              }
            },
            {
              "type": "test",
              "title": "\"proofValue\" field when decoded to raw bytes, MUST be 64 bytes in length if the associated public key is 32 bytes or 114 bytes in length if the public key is 57 bytes.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          should.exist(issuedVc, 'Expected issuer to have issued a ' +\n            'credential.');\n          should.exist(proofs, 'Expected credential to have a proof.');\n          const eddsa2022Proofs = proofs.filter(\n            proof => proof?.cryptosuite === cryptosuite);\n          eddsa2022Proofs.length.should.be.gte(1, 'Expected at least one ' +\n            'eddsa-rdfc-2022 cryptosuite.');\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.proofValue, 'Expected a proof value on ' +\n              'the proof.');\n            const valueBytes = bs58Decode({id: proof.proofValue});\n            should.exist(proof.verificationMethod);\n            const vmBytes = await getPublicKeyBytes({\n              did: proof.verificationMethod});\n            vmBytes.byteLength.should.be.oneOf([32, 57], 'Expected public ' +\n              'key length to be either 32 or 57 bytes.');\n            if(vmBytes.byteLength === 32) {\n              valueBytes.byteLength.should.equal(64, 'Expected 64 byte ' +\n                'proofValue for 32 byte key.');\n            } else {\n              valueBytes.byteLength.should.equal(114, 'Expected 114 byte ' +\n                'proofValue for 57 byte key.');\n            }\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "rEUtLU9zXedgsreMH1uPm",
              "ctx": null,
              "_testId": "urn:uuid:6e41fec5-049f-450f-9cc1-d0ec36134d96",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine",
                "rowId": "\"proofValue\" field when decoded to raw bytes, MUST be 64 bytes in length if the associated public key is 32 bytes or 114 bytes in length if the public key is 57 bytes."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 14539,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "\"proof\" MUST verify when using a conformant verifier.",
          "cells": [
            {
              "type": "test",
              "title": "\"proof\" MUST verify when using a conformant verifier.",
              "body": "async function() {\n            this.test.cell = {columnId, rowId: this.test.title};\n            should.exist(verifier, 'Expected implementation to have a VC ' +\n              'API compatible verifier.');\n            const {result, error} = await verifier.post({json: {\n              verifiableCredential: issuedVc,\n              options: {checks: ['proof']}\n            }});\n            should.not.exist(error, 'Expected verifier to not error.');\n            should.exist(result, 'Expected verifier to return a result.');\n            result.status.should.not.equal(400, 'Expected status code to not ' +\n              'be 400.');\n            result.status.should.equal(200, 'Expected status code to be 200.');\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "IqLfOfbpg8cD82gAQEKrN",
              "ctx": null,
              "_testId": "urn:uuid:59fe5125-446b-47a5-b65b-468aebf2a310",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "\"proof\" MUST verify when using a conformant verifier."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 10377,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 708,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "\"proof\" MUST verify when using a conformant verifier.",
              "body": "async function() {\n            this.test.cell = {columnId, rowId: this.test.title};\n            should.exist(verifier, 'Expected implementation to have a VC ' +\n              'API compatible verifier.');\n            const {result, error} = await verifier.post({json: {\n              verifiableCredential: issuedVc,\n              options: {checks: ['proof']}\n            }});\n            should.not.exist(error, 'Expected verifier to not error.');\n            should.exist(result, 'Expected verifier to return a result.');\n            result.status.should.not.equal(400, 'Expected status code to not ' +\n              'be 400.');\n            result.status.should.equal(200, 'Expected status code to be 200.');\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "X3Vl1nuLc53Z9WeR_XOAU",
              "ctx": null,
              "_testId": "urn:uuid:0abb747d-83a9-4096-8b0d-60d6e7e61255",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "\"proof\" MUST verify when using a conformant verifier."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 11327,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 2187,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "\"proof\" MUST verify when using a conformant verifier.",
              "body": "async function() {\n            this.test.cell = {columnId, rowId: this.test.title};\n            should.exist(verifier, 'Expected implementation to have a VC ' +\n              'API compatible verifier.');\n            const {result, error} = await verifier.post({json: {\n              verifiableCredential: issuedVc,\n              options: {checks: ['proof']}\n            }});\n            should.not.exist(error, 'Expected verifier to not error.');\n            should.exist(result, 'Expected verifier to return a result.');\n            result.status.should.not.equal(400, 'Expected status code to not ' +\n              'be 400.');\n            result.status.should.equal(200, 'Expected status code to be 200.');\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "QvxbSfmfv2UA_3YIZfJub",
              "ctx": null,
              "_testId": "urn:uuid:c6580598-9e05-47bc-9d9c-cc50a1f0d102",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "\"proof\" MUST verify when using a conformant verifier."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 13784,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 90,
              "state": "passed",
              "speed": "slow"
            },
            {
              "cell": {
                "rowId": "\"proof\" MUST verify when using a conformant verifier.",
                "colId": "OpSecId"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            },
            {
              "type": "test",
              "title": "\"proof\" MUST verify when using a conformant verifier.",
              "body": "async function() {\n            this.test.cell = {columnId, rowId: this.test.title};\n            should.exist(verifier, 'Expected implementation to have a VC ' +\n              'API compatible verifier.');\n            const {result, error} = await verifier.post({json: {\n              verifiableCredential: issuedVc,\n              options: {checks: ['proof']}\n            }});\n            should.not.exist(error, 'Expected verifier to not error.');\n            should.exist(result, 'Expected verifier to return a result.');\n            result.status.should.not.equal(400, 'Expected status code to not ' +\n              'be 400.');\n            result.status.should.equal(200, 'Expected status code to be 200.');\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "8nRH6Acvkh66Ny5HiMReH",
              "ctx": null,
              "_testId": "urn:uuid:89402e27-d209-4ab1-a5e9-159c187042f1",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "\"proof\" MUST verify when using a conformant verifier."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 14105,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 28,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof\" MUST verify when using a conformant verifier.",
              "body": "async function() {\n            this.test.cell = {columnId, rowId: this.test.title};\n            should.exist(verifier, 'Expected implementation to have a VC ' +\n              'API compatible verifier.');\n            const {result, error} = await verifier.post({json: {\n              verifiableCredential: issuedVc,\n              options: {checks: ['proof']}\n            }});\n            should.not.exist(error, 'Expected verifier to not error.');\n            should.exist(result, 'Expected verifier to return a result.');\n            result.status.should.not.equal(400, 'Expected status code to not ' +\n              'be 400.');\n            result.status.should.equal(200, 'Expected status code to be 200.');\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "v2dqkfqX5IQLm3KoFkwN2",
              "ctx": null,
              "_testId": "urn:uuid:ce0798e8-5f45-42a7-83c6-351f21540d15",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "\"proof\" MUST verify when using a conformant verifier."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 14205,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 40,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "\"proof\" MUST verify when using a conformant verifier.",
              "body": "async function() {\n            this.test.cell = {columnId, rowId: this.test.title};\n            should.exist(verifier, 'Expected implementation to have a VC ' +\n              'API compatible verifier.');\n            const {result, error} = await verifier.post({json: {\n              verifiableCredential: issuedVc,\n              options: {checks: ['proof']}\n            }});\n            should.not.exist(error, 'Expected verifier to not error.');\n            should.exist(result, 'Expected verifier to return a result.');\n            result.status.should.not.equal(400, 'Expected status code to not ' +\n              'be 400.');\n            result.status.should.equal(200, 'Expected status code to be 200.');\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "rEUtLU9zXedgsreMH1uPm",
              "ctx": null,
              "_testId": "urn:uuid:f4e2b5dc-74b5-43fa-855e-0f3da964ad63",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine",
                "rowId": "\"proof\" MUST verify when using a conformant verifier."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 14539,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 118,
              "state": "passed",
              "speed": "slow"
            }
          ]
        }
      ]
    },
    {
      "title": "Data Integrity (eddsa-rdfc-2022 verifiers)",
      "ctx": null,
      "suites": [
        {
          "title": "apicatalog.com",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.';\n      const credential = credentials.clone('invalidBaseUrl');\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'Should not verify VC with invalid base URL'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "w8u6n8rndrGCijhw47HFj",
              "ctx": null,
              "_testId": "urn:uuid:f79b52bf-4376-4170-8586-00f97b480d61",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 14701,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 171,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Conforming processors MUST produce errors when non-conforming documents are consumed.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.';\n      // this could be read as testing all non-confirming docs or just one\n      // for this test only one doc is tested as it should throw for any\n      // non-conforming doc\n      await verificationFail({\n        credential: credentials.clone('invalidProofType'),\n        verifier,\n        reason: 'Should not verify VC with invalid \"proof.type\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "w8u6n8rndrGCijhw47HFj",
              "ctx": null,
              "_testId": "urn:uuid:a5612fdb-fa57-4eb4-a893-60b6b1c86088",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "Conforming processors MUST produce errors when non-conforming documents are consumed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 14873,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 112,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "w8u6n8rndrGCijhw47HFj",
              "ctx": null,
              "_testId": "urn:uuid:34a903cd-17f7-41fa-823a-b2f48f8bdc98",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If the \"proof\" field is missing, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 14985,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 96,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n        const credential = credentials.clone('issuedVc');\n        credential.proof = null;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "w8u6n8rndrGCijhw47HFj",
              "ctx": null,
              "_testId": "urn:uuid:dcead741-75d5-4e9b-9595-12171c08a2cd",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If the \"proof\" field is invalid, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 15081,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 101,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof.type;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "w8u6n8rndrGCijhw47HFj",
              "ctx": null,
              "_testId": "urn:uuid:0ee54fbd-11b8-41c3-b403-4eb806ce7645",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If the \"proof.type\" field is missing, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 15182,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 93,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('invalidProofType');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "w8u6n8rndrGCijhw47HFj",
              "ctx": null,
              "_testId": "urn:uuid:6ca87b52-aa76-4881-8c85-ccc7a998e8b4",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 15276,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 98,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('noVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "w8u6n8rndrGCijhw47HFj",
              "ctx": null,
              "_testId": "urn:uuid:62b2ecd0-f3e3-44e3-aafb-8060b268146c",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 15375,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 98,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('invalidVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "w8u6n8rndrGCijhw47HFj",
              "ctx": null,
              "_testId": "urn:uuid:5870ff8a-45c2-4e89-8fde-ba7e2b480b6f",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 15473,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 112,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('noProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "w8u6n8rndrGCijhw47HFj",
              "ctx": null,
              "_testId": "urn:uuid:8ae778bb-94eb-44a3-84f1-1323558769ad",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 15585,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 92,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('invalidProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "w8u6n8rndrGCijhw47HFj",
              "ctx": null,
              "_testId": "urn:uuid:ccc06c8f-abc6-41a1-b35a-08e42ba14181",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 15677,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 205,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      // NOTE: expectedProofPurpose should be specified by verifiers internally\n      // it is very unlikely to be invalidProofPurpose\n      await verificationFail({\n        credential: credentials.clone('invalidProofPurpose'),\n        verifier,\n        reason: 'Verifier should reject VC with invalid proof purpose.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "w8u6n8rndrGCijhw47HFj",
              "ctx": null,
              "_testId": "urn:uuid:1420cc45-be07-4947-b1d8-3ed00d1ea513",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 15882,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 96,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.';\n        await proofValueTests;\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "w8u6n8rndrGCijhw47HFj",
              "ctx": null,
              "_testId": "urn:uuid:fe7a6d5b-089c-4e1d-a75e-8f24473da55c",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "The proofValue property MUST be used, as specified in 2.1 Proofs."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 15979,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof';\n      await proofValueTests;\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "w8u6n8rndrGCijhw47HFj",
              "ctx": null,
              "_testId": "urn:uuid:80f49de8-2f11-435e-82bf-2a15516e36af",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 15979,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      await verificationFail({\n        credential: credentials.clone('undefinedTerm'),\n        verifier,\n        reason: 'Should fail to verify VC when data is dropped by JSON-LD'\n      });\n      const undefinedTerm = credentials.clone('issuedVc');\n      undefinedTerm.credentialSubject.undefinedTerm = 'IfDroppedWillVerify';\n      await verificationFail({\n        credential: undefinedTerm,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined term is added ' +\n          'after issuance.'\n      });\n      const undefinedType = credentials.clone('issuedVc');\n      undefinedType.type.push('UndefinedType');\n      await verificationFail({\n        credential: undefinedType,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined type is added ' +\n          'after issuance.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "w8u6n8rndrGCijhw47HFj",
              "ctx": null,
              "_testId": "urn:uuid:6a628f1c-2816-48f0-a96e-80f2c1c178e1",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 15979,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 299,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Should fail to verify VC if an undefined term is added after issuance.: expected Response { status: 200, statusText: 'OK', headers: Headers { 'content-type': 'application/json', vary: 'Accept-Encoding', 'content-encoding': 'gzip', 'x-cloud-trace-context': 'f371963b40abf742327d4a8cee203510', date: 'Sun, 25 Aug 2024 05:05:38 GMT', server: 'Google Frontend', 'cache-control': 'private', 'transfer-encoding': 'chunked', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Should fail to verify VC if an undefined term is added after issuance.: expected Response { status: 200, statusText: 'OK', headers: Headers { 'content-type': 'application/json', vary: 'Accept-Encoding', 'content-encoding': 'gzip', 'x-cloud-trace-context': 'f371963b40abf742327d4a8cee203510', date: 'Sun, 25 Aug 2024 05:05:38 GMT', server: 'Google Frontend', 'cache-control': 'private', 'transfer-encoding': 'chunked', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationFail (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:49:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/suites/verify.js:137:7)"
              }
            },
            {
              "type": "test",
              "title": "The date and time the proof was created is OPTIONAL and, if included, MUST be specified as an [XMLSCHEMA11-2] dateTimeStamp string, either in Universal Coordinated Time (UTC), denoted by a Z at the end of the value, or with a time zone offset relative to UTC.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=MUST%20be%20specified%20as%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%2C%20either%20in%20Universal%20Coordinated%20Time%20(UTC)%2C%20denoted%20by%20a%20Z%20at%20the%20end%20of%20the%20value%2C%20or%20with%20a%20time%20zone%20offset%20relative%20to%20UTC';\n        const credential = credentials.clone('invalidCreated');\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "w8u6n8rndrGCijhw47HFj",
              "ctx": null,
              "_testId": "urn:uuid:bfa80f47-6c69-4b99-b832-fdd21b850c3c",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "The date and time the proof was created is OPTIONAL and, if included, MUST be specified as an [XMLSCHEMA11-2] dateTimeStamp string, either in Universal Coordinated Time (UTC), denoted by a Z at the end of the value, or with a time zone offset relative to UTC."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=MUST%20be%20specified%20as%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%2C%20either%20in%20Universal%20Coordinated%20Time%20(UTC)%2C%20denoted%20by%20a%20Z%20at%20the%20end%20of%20the%20value%2C%20or%20with%20a%20time%20zone%20offset%20relative%20to%20UTC",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16279,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 96,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n      const credential = credentials.clone('invalidCryptosuite');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "w8u6n8rndrGCijhw47HFj",
              "ctx": null,
              "_testId": "urn:uuid:4d382d91-d36f-430c-9f3c-b55458a4d138",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16375,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 100,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If options has a non-null domain item, it MUST be equal to proof.domain or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#verify-proof:~:text=If%20options%20has%20a%20non%2Dnull%20domain%20item%2C%20it%20MUST%20be%20equal%20to%20proof.domain%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n        const credential = credentials.clone('invalidDomain');\n        await verificationFail({\n          credential, verifier, options: {\n            domain: 'domain.example'\n          }\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "w8u6n8rndrGCijhw47HFj",
              "ctx": null,
              "_testId": "urn:uuid:0ea47598-3623-4aa7-a38b-bad2afed1ee7",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If options has a non-null domain item, it MUST be equal to proof.domain or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#verify-proof:~:text=If%20options%20has%20a%20non%2Dnull%20domain%20item%2C%20it%20MUST%20be%20equal%20to%20proof.domain%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16474,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 98,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If options has a non-null challenge item, it MUST be equal to proof.challenge or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#add-proof:~:text=If%20options%20has%20a%20non%2Dnull%20challenge%20item%2C%20it%20MUST%20be%20equal%20to%20proof.challenge%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n        const credential = credentials.clone('invalidChallenge');\n        await verificationFail({\n          credential, verifier, options: {\n            domain: 'domain.example',\n            challenge: '1235abcd6789'\n          }\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "w8u6n8rndrGCijhw47HFj",
              "ctx": null,
              "_testId": "urn:uuid:57a031d9-8e9c-4cc0-ac4f-77a7f2d6bace",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If options has a non-null challenge item, it MUST be equal to proof.challenge or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#add-proof:~:text=If%20options%20has%20a%20non%2Dnull%20challenge%20item%2C%20it%20MUST%20be%20equal%20to%20proof.challenge%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16573,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 106,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "(created) A conforming processor MAY chose to consume time values that were incorrectly serialized without an offset.",
              "body": "async function() {\n        this.test.link = 'https://www.w3.org/TR/vc-data-integrity/#proofs:~:text=be%20a%20string.-,created,-The%20date%20and';\n        await verificationFail({\n          credential: credentials.clone('noOffsetCreated'),\n          verifier\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "w8u6n8rndrGCijhw47HFj",
              "ctx": null,
              "_testId": "urn:uuid:e449b731-5bfc-4dad-994e-6d6ca090c825",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "(created) A conforming processor MAY chose to consume time values that were incorrectly serialized without an offset."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://www.w3.org/TR/vc-data-integrity/#proofs:~:text=be%20a%20string.-,created,-The%20date%20and",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16679,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 101,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "(expires) A conforming processor MAY chose to consume time values that were incorrectly serialized without an offset.",
              "body": "async function() {\n        this.test.link = 'https://www.w3.org/TR/vc-data-integrity/#proofs:~:text=interpreted%20as%20UTC.-,expires,-The%20expires%20property';\n        await verificationFail({\n          credential: credentials.clone('noOffsetExpires'),\n          verifier\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "w8u6n8rndrGCijhw47HFj",
              "ctx": null,
              "_testId": "urn:uuid:51f4347d-c888-4608-99de-0b3a4b6a7619",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "(expires) A conforming processor MAY chose to consume time values that were incorrectly serialized without an offset."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://www.w3.org/TR/vc-data-integrity/#proofs:~:text=interpreted%20as%20UTC.-,expires,-The%20expires%20property",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16780,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 195,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no result from verifier.: expected Response { status: 200, statusText: 'OK', headers: Headers { 'content-type': 'application/json', vary: 'Accept-Encoding', 'content-encoding': 'gzip', 'x-cloud-trace-context': 'e2cc51b7db103915076afdc385d3c56a', date: 'Sun, 25 Aug 2024 05:05:39 GMT', server: 'Google Frontend', 'cache-control': 'private', 'transfer-encoding': 'chunked', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no result from verifier.: expected Response { status: 200, statusText: 'OK', headers: Headers { 'content-type': 'application/json', vary: 'Accept-Encoding', 'content-encoding': 'gzip', 'x-cloud-trace-context': 'e2cc51b7db103915076afdc385d3c56a', date: 'Sun, 25 Aug 2024 05:05:39 GMT', server: 'Google Frontend', 'cache-control': 'private', 'transfer-encoding': 'chunked', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationFail (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:49:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/suites/verify.js:209:9)"
              }
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"apicatalog.com\"",
              "body": "function() {\n      this.currentTest.cell = {\n        columnId: testDescription,\n        rowId: this.currentTest.title\n      };\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "w8u6n8rndrGCijhw47HFj",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"apicatalog.com\"",
              "body": "async function() {\n      proofValueTests = shouldBeProofValue({credentials, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "w8u6n8rndrGCijhw47HFj",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 14700,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "9RfDhOhvbmrKJpq3U2WuS",
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
          "_testId": "urn:uuid:34e55ccc-029e-4fcf-b265-64edc4bdfda3"
        },
        {
          "title": "Digital Bazaar",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.';\n      const credential = credentials.clone('invalidBaseUrl');\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'Should not verify VC with invalid base URL'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "8rdRVXR4E8x6YlOvPxg3j",
              "ctx": null,
              "_testId": "urn:uuid:aecb0e32-8458-487e-a0ed-dc41ceddf174",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16980,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 2908,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Conforming processors MUST produce errors when non-conforming documents are consumed.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.';\n      // this could be read as testing all non-confirming docs or just one\n      // for this test only one doc is tested as it should throw for any\n      // non-conforming doc\n      await verificationFail({\n        credential: credentials.clone('invalidProofType'),\n        verifier,\n        reason: 'Should not verify VC with invalid \"proof.type\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "8rdRVXR4E8x6YlOvPxg3j",
              "ctx": null,
              "_testId": "urn:uuid:6e087a7c-3fa9-4e99-8003-a7d64adc72d5",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "Conforming processors MUST produce errors when non-conforming documents are consumed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19888,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 56,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "8rdRVXR4E8x6YlOvPxg3j",
              "ctx": null,
              "_testId": "urn:uuid:124e0012-6ce2-427e-a6f8-fc0dd659a3cc",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the \"proof\" field is missing, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19945,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 57,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n        const credential = credentials.clone('issuedVc');\n        credential.proof = null;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "8rdRVXR4E8x6YlOvPxg3j",
              "ctx": null,
              "_testId": "urn:uuid:1eafd623-d81e-4668-b2a6-3eea90a3644c",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the \"proof\" field is invalid, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20001,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 43,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof.type;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "8rdRVXR4E8x6YlOvPxg3j",
              "ctx": null,
              "_testId": "urn:uuid:ec4bb4bf-ce33-4155-a044-b92462e391b7",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the \"proof.type\" field is missing, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20044,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 41,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('invalidProofType');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "8rdRVXR4E8x6YlOvPxg3j",
              "ctx": null,
              "_testId": "urn:uuid:a7b19aa4-1d47-452b-b218-052d9e316796",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20086,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 40,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('noVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "8rdRVXR4E8x6YlOvPxg3j",
              "ctx": null,
              "_testId": "urn:uuid:d9da5c99-f2f9-49f4-8a62-b933f69c666c",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20126,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 620,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('invalidVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "8rdRVXR4E8x6YlOvPxg3j",
              "ctx": null,
              "_testId": "urn:uuid:6b36182a-7b37-4f56-a149-251edafb4cde",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20745,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 62,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('noProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "8rdRVXR4E8x6YlOvPxg3j",
              "ctx": null,
              "_testId": "urn:uuid:e4a6abe7-789e-42b1-b2e1-eea15f35d7a0",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20807,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 44,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('invalidProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "8rdRVXR4E8x6YlOvPxg3j",
              "ctx": null,
              "_testId": "urn:uuid:ebc14bff-2353-4429-bf70-8610fed8a366",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20851,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 37,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      // NOTE: expectedProofPurpose should be specified by verifiers internally\n      // it is very unlikely to be invalidProofPurpose\n      await verificationFail({\n        credential: credentials.clone('invalidProofPurpose'),\n        verifier,\n        reason: 'Verifier should reject VC with invalid proof purpose.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "8rdRVXR4E8x6YlOvPxg3j",
              "ctx": null,
              "_testId": "urn:uuid:7538db6b-7971-4d5e-b5ea-ca60c3287fa5",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20889,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 41,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.';\n        await proofValueTests;\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "8rdRVXR4E8x6YlOvPxg3j",
              "ctx": null,
              "_testId": "urn:uuid:0a8e9439-5424-4fd3-9121-533d9af50f21",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The proofValue property MUST be used, as specified in 2.1 Proofs."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20929,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof';\n      await proofValueTests;\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "8rdRVXR4E8x6YlOvPxg3j",
              "ctx": null,
              "_testId": "urn:uuid:fd6056c5-756d-40d8-a074-43c7cd75cde9",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20929,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      await verificationFail({\n        credential: credentials.clone('undefinedTerm'),\n        verifier,\n        reason: 'Should fail to verify VC when data is dropped by JSON-LD'\n      });\n      const undefinedTerm = credentials.clone('issuedVc');\n      undefinedTerm.credentialSubject.undefinedTerm = 'IfDroppedWillVerify';\n      await verificationFail({\n        credential: undefinedTerm,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined term is added ' +\n          'after issuance.'\n      });\n      const undefinedType = credentials.clone('issuedVc');\n      undefinedType.type.push('UndefinedType');\n      await verificationFail({\n        credential: undefinedType,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined type is added ' +\n          'after issuance.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "8rdRVXR4E8x6YlOvPxg3j",
              "ctx": null,
              "_testId": "urn:uuid:5e4e4f95-03c7-4801-95a7-1eeb33518469",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20929,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 884,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The date and time the proof was created is OPTIONAL and, if included, MUST be specified as an [XMLSCHEMA11-2] dateTimeStamp string, either in Universal Coordinated Time (UTC), denoted by a Z at the end of the value, or with a time zone offset relative to UTC.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=MUST%20be%20specified%20as%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%2C%20either%20in%20Universal%20Coordinated%20Time%20(UTC)%2C%20denoted%20by%20a%20Z%20at%20the%20end%20of%20the%20value%2C%20or%20with%20a%20time%20zone%20offset%20relative%20to%20UTC';\n        const credential = credentials.clone('invalidCreated');\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "8rdRVXR4E8x6YlOvPxg3j",
              "ctx": null,
              "_testId": "urn:uuid:b1f63ef4-ae32-401b-a6b0-f6a9785c3cf0",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The date and time the proof was created is OPTIONAL and, if included, MUST be specified as an [XMLSCHEMA11-2] dateTimeStamp string, either in Universal Coordinated Time (UTC), denoted by a Z at the end of the value, or with a time zone offset relative to UTC."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=MUST%20be%20specified%20as%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%2C%20either%20in%20Universal%20Coordinated%20Time%20(UTC)%2C%20denoted%20by%20a%20Z%20at%20the%20end%20of%20the%20value%2C%20or%20with%20a%20time%20zone%20offset%20relative%20to%20UTC",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 21814,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 556,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no result from verifier.: expected Response { status: 200, statusText: 'OK', headers: Headers { 'cache-control': 'no-cache, no-store, must-revalidate', pragma: 'no-cache', expires: '0', vary: 'X-HTTP-Method-Override, Accept-Encoding', 'access-control-allow-origin': '*', 'content-type': 'application/json; charset=utf-8', etag: 'W/\"3a8-mOQWaO6dvCqdK4vKycIyfppfGTc\"', 'x-cloud-trace-context': '1f385f9bcffd06b299263ad4e117dd05', date: 'Sun, 25 Aug 2024 05:05:44 GMT', server: 'Google Frontend', 'content-length': '936', via: '1.1 google', 'alt-svc': 'h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no result from verifier.: expected Response { status: 200, statusText: 'OK', headers: Headers { 'cache-control': 'no-cache, no-store, must-revalidate', pragma: 'no-cache', expires: '0', vary: 'X-HTTP-Method-Override, Accept-Encoding', 'access-control-allow-origin': '*', 'content-type': 'application/json; charset=utf-8', etag: 'W/\"3a8-mOQWaO6dvCqdK4vKycIyfppfGTc\"', 'x-cloud-trace-context': '1f385f9bcffd06b299263ad4e117dd05', date: 'Sun, 25 Aug 2024 05:05:44 GMT', server: 'Google Frontend', 'content-length': '936', via: '1.1 google', 'alt-svc': 'h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationFail (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:49:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/suites/verify.js:160:9)"
              }
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n      const credential = credentials.clone('invalidCryptosuite');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "8rdRVXR4E8x6YlOvPxg3j",
              "ctx": null,
              "_testId": "urn:uuid:8a4058c4-4982-47e4-9b45-05a39e54d882",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 22370,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 45,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If options has a non-null domain item, it MUST be equal to proof.domain or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#verify-proof:~:text=If%20options%20has%20a%20non%2Dnull%20domain%20item%2C%20it%20MUST%20be%20equal%20to%20proof.domain%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n        const credential = credentials.clone('invalidDomain');\n        await verificationFail({\n          credential, verifier, options: {\n            domain: 'domain.example'\n          }\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "8rdRVXR4E8x6YlOvPxg3j",
              "ctx": null,
              "_testId": "urn:uuid:fef1e055-6944-4420-9a74-62e3fbbafe4e",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If options has a non-null domain item, it MUST be equal to proof.domain or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#verify-proof:~:text=If%20options%20has%20a%20non%2Dnull%20domain%20item%2C%20it%20MUST%20be%20equal%20to%20proof.domain%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 22415,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 38,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If options has a non-null challenge item, it MUST be equal to proof.challenge or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#add-proof:~:text=If%20options%20has%20a%20non%2Dnull%20challenge%20item%2C%20it%20MUST%20be%20equal%20to%20proof.challenge%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n        const credential = credentials.clone('invalidChallenge');\n        await verificationFail({\n          credential, verifier, options: {\n            domain: 'domain.example',\n            challenge: '1235abcd6789'\n          }\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "8rdRVXR4E8x6YlOvPxg3j",
              "ctx": null,
              "_testId": "urn:uuid:86c06671-6af8-4377-befe-cbdd942dd67f",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If options has a non-null challenge item, it MUST be equal to proof.challenge or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#add-proof:~:text=If%20options%20has%20a%20non%2Dnull%20challenge%20item%2C%20it%20MUST%20be%20equal%20to%20proof.challenge%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 22452,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 38,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "(created) A conforming processor MAY chose to consume time values that were incorrectly serialized without an offset.",
              "body": "async function() {\n        this.test.link = 'https://www.w3.org/TR/vc-data-integrity/#proofs:~:text=be%20a%20string.-,created,-The%20date%20and';\n        await verificationFail({\n          credential: credentials.clone('noOffsetCreated'),\n          verifier\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "8rdRVXR4E8x6YlOvPxg3j",
              "ctx": null,
              "_testId": "urn:uuid:a7bd0959-cc16-48b9-a37f-d39042eb5df1",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "(created) A conforming processor MAY chose to consume time values that were incorrectly serialized without an offset."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://www.w3.org/TR/vc-data-integrity/#proofs:~:text=be%20a%20string.-,created,-The%20date%20and",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 22490,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 42,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no result from verifier.: expected Response { status: 200, statusText: 'OK', headers: Headers { 'cache-control': 'no-cache, no-store, must-revalidate', pragma: 'no-cache', expires: '0', vary: 'X-HTTP-Method-Override, Accept-Encoding', 'access-control-allow-origin': '*', 'content-type': 'application/json; charset=utf-8', etag: 'W/\"3b0-CO3WJMMN7TmQenq31TvmD7HXr+s\"', 'x-cloud-trace-context': '9633d7c481d3b8b41b44ad853d8a8b1b', date: 'Sun, 25 Aug 2024 05:05:44 GMT', server: 'Google Frontend', 'content-length': '944', via: '1.1 google', 'alt-svc': 'h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no result from verifier.: expected Response { status: 200, statusText: 'OK', headers: Headers { 'cache-control': 'no-cache, no-store, must-revalidate', pragma: 'no-cache', expires: '0', vary: 'X-HTTP-Method-Override, Accept-Encoding', 'access-control-allow-origin': '*', 'content-type': 'application/json; charset=utf-8', etag: 'W/\"3b0-CO3WJMMN7TmQenq31TvmD7HXr+s\"', 'x-cloud-trace-context': '9633d7c481d3b8b41b44ad853d8a8b1b', date: 'Sun, 25 Aug 2024 05:05:44 GMT', server: 'Google Frontend', 'content-length': '944', via: '1.1 google', 'alt-svc': 'h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationFail (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:49:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/suites/verify.js:201:9)"
              }
            },
            {
              "type": "test",
              "title": "(expires) A conforming processor MAY chose to consume time values that were incorrectly serialized without an offset.",
              "body": "async function() {\n        this.test.link = 'https://www.w3.org/TR/vc-data-integrity/#proofs:~:text=interpreted%20as%20UTC.-,expires,-The%20expires%20property';\n        await verificationFail({\n          credential: credentials.clone('noOffsetExpires'),\n          verifier\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "8rdRVXR4E8x6YlOvPxg3j",
              "ctx": null,
              "_testId": "urn:uuid:e21c549f-4425-4172-969d-1ed9a9ed0fe6",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "(expires) A conforming processor MAY chose to consume time values that were incorrectly serialized without an offset."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://www.w3.org/TR/vc-data-integrity/#proofs:~:text=interpreted%20as%20UTC.-,expires,-The%20expires%20property",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 22532,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 546,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no result from verifier.: expected Response { status: 200, statusText: 'OK', headers: Headers { 'cache-control': 'no-cache, no-store, must-revalidate', pragma: 'no-cache', expires: '0', vary: 'X-HTTP-Method-Override, Accept-Encoding', 'access-control-allow-origin': '*', 'content-type': 'application/json; charset=utf-8', etag: 'W/\"3d1-f06hMm/Fi4+idcINxeZo/j7kzI4\"', 'x-cloud-trace-context': 'fee31e48390006797462419f4e4963bf', date: 'Sun, 25 Aug 2024 05:05:45 GMT', server: 'Google Frontend', 'content-length': '977', via: '1.1 google', 'alt-svc': 'h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no result from verifier.: expected Response { status: 200, statusText: 'OK', headers: Headers { 'cache-control': 'no-cache, no-store, must-revalidate', pragma: 'no-cache', expires: '0', vary: 'X-HTTP-Method-Override, Accept-Encoding', 'access-control-allow-origin': '*', 'content-type': 'application/json; charset=utf-8', etag: 'W/\"3d1-f06hMm/Fi4+idcINxeZo/j7kzI4\"', 'x-cloud-trace-context': 'fee31e48390006797462419f4e4963bf', date: 'Sun, 25 Aug 2024 05:05:45 GMT', server: 'Google Frontend', 'content-length': '977', via: '1.1 google', 'alt-svc': 'h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationFail (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:49:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/suites/verify.js:209:9)"
              }
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"Digital Bazaar\"",
              "body": "function() {\n      this.currentTest.cell = {\n        columnId: testDescription,\n        rowId: this.currentTest.title\n      };\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "8rdRVXR4E8x6YlOvPxg3j",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Digital Bazaar\"",
              "body": "async function() {\n      proofValueTests = shouldBeProofValue({credentials, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "8rdRVXR4E8x6YlOvPxg3j",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16976,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "9RfDhOhvbmrKJpq3U2WuS",
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
          "_testId": "urn:uuid:3446663d-fcfa-4f5b-a517-ebc04cb05796"
        },
        {
          "title": "Grotto Networking",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.';\n      const credential = credentials.clone('invalidBaseUrl');\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'Should not verify VC with invalid base URL'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "OiFDHlu4HFPeLRuGUCXFQ",
              "ctx": null,
              "_testId": "urn:uuid:7efdcf14-5580-48ff-aedd-48f62bfd66eb",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 23081,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 241,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Conforming processors MUST produce errors when non-conforming documents are consumed.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.';\n      // this could be read as testing all non-confirming docs or just one\n      // for this test only one doc is tested as it should throw for any\n      // non-conforming doc\n      await verificationFail({\n        credential: credentials.clone('invalidProofType'),\n        verifier,\n        reason: 'Should not verify VC with invalid \"proof.type\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "OiFDHlu4HFPeLRuGUCXFQ",
              "ctx": null,
              "_testId": "urn:uuid:2289b4e2-3f3b-4e96-a5ac-b132aa7c9ea2",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "Conforming processors MUST produce errors when non-conforming documents are consumed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 23322,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 73,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "OiFDHlu4HFPeLRuGUCXFQ",
              "ctx": null,
              "_testId": "urn:uuid:ae5c9db5-8f96-49ac-8de8-7538770d04d6",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If the \"proof\" field is missing, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 23395,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 71,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n        const credential = credentials.clone('issuedVc');\n        credential.proof = null;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "OiFDHlu4HFPeLRuGUCXFQ",
              "ctx": null,
              "_testId": "urn:uuid:273d3f1a-7bd2-4d48-a668-72228ea3f24d",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If the \"proof\" field is invalid, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 23466,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 72,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof.type;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "OiFDHlu4HFPeLRuGUCXFQ",
              "ctx": null,
              "_testId": "urn:uuid:c34de821-b6cf-425b-9629-42d3561da0f0",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If the \"proof.type\" field is missing, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 23538,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 71,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('invalidProofType');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "OiFDHlu4HFPeLRuGUCXFQ",
              "ctx": null,
              "_testId": "urn:uuid:886cd345-2e2f-4941-86b5-9841145609bc",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 23609,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 71,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('noVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "OiFDHlu4HFPeLRuGUCXFQ",
              "ctx": null,
              "_testId": "urn:uuid:fbfe59ae-b722-48b5-8724-72dc263e19aa",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 23681,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 72,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('invalidVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "OiFDHlu4HFPeLRuGUCXFQ",
              "ctx": null,
              "_testId": "urn:uuid:622fe5ca-36f5-4080-92cb-bb8e28712b54",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 23752,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 71,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('noProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "OiFDHlu4HFPeLRuGUCXFQ",
              "ctx": null,
              "_testId": "urn:uuid:4d3a01e6-73bc-4602-9669-046f645d1b8e",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 23823,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 72,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('invalidProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "OiFDHlu4HFPeLRuGUCXFQ",
              "ctx": null,
              "_testId": "urn:uuid:7b0b3545-1278-4b8b-a0cf-b8ac89fd0a6e",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 23895,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 77,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      // NOTE: expectedProofPurpose should be specified by verifiers internally\n      // it is very unlikely to be invalidProofPurpose\n      await verificationFail({\n        credential: credentials.clone('invalidProofPurpose'),\n        verifier,\n        reason: 'Verifier should reject VC with invalid proof purpose.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "OiFDHlu4HFPeLRuGUCXFQ",
              "ctx": null,
              "_testId": "urn:uuid:c35a9d8b-7049-4eb6-ad11-b37cc1a92569",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 23972,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 74,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.';\n        await proofValueTests;\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "OiFDHlu4HFPeLRuGUCXFQ",
              "ctx": null,
              "_testId": "urn:uuid:0cd786e1-b7ec-4923-ba40-b07ca711c23e",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The proofValue property MUST be used, as specified in 2.1 Proofs."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 24046,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof';\n      await proofValueTests;\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "OiFDHlu4HFPeLRuGUCXFQ",
              "ctx": null,
              "_testId": "urn:uuid:adc962f8-ab77-4e79-a0ef-78517937cc7d",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 24047,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      await verificationFail({\n        credential: credentials.clone('undefinedTerm'),\n        verifier,\n        reason: 'Should fail to verify VC when data is dropped by JSON-LD'\n      });\n      const undefinedTerm = credentials.clone('issuedVc');\n      undefinedTerm.credentialSubject.undefinedTerm = 'IfDroppedWillVerify';\n      await verificationFail({\n        credential: undefinedTerm,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined term is added ' +\n          'after issuance.'\n      });\n      const undefinedType = credentials.clone('issuedVc');\n      undefinedType.type.push('UndefinedType');\n      await verificationFail({\n        credential: undefinedType,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined type is added ' +\n          'after issuance.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "OiFDHlu4HFPeLRuGUCXFQ",
              "ctx": null,
              "_testId": "urn:uuid:1e776538-293c-426d-81c0-406d3a4f398f",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 24047,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 218,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The date and time the proof was created is OPTIONAL and, if included, MUST be specified as an [XMLSCHEMA11-2] dateTimeStamp string, either in Universal Coordinated Time (UTC), denoted by a Z at the end of the value, or with a time zone offset relative to UTC.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=MUST%20be%20specified%20as%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%2C%20either%20in%20Universal%20Coordinated%20Time%20(UTC)%2C%20denoted%20by%20a%20Z%20at%20the%20end%20of%20the%20value%2C%20or%20with%20a%20time%20zone%20offset%20relative%20to%20UTC';\n        const credential = credentials.clone('invalidCreated');\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "OiFDHlu4HFPeLRuGUCXFQ",
              "ctx": null,
              "_testId": "urn:uuid:22e60d55-4dda-4b6d-8eec-ec8f56ea32c2",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The date and time the proof was created is OPTIONAL and, if included, MUST be specified as an [XMLSCHEMA11-2] dateTimeStamp string, either in Universal Coordinated Time (UTC), denoted by a Z at the end of the value, or with a time zone offset relative to UTC."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=MUST%20be%20specified%20as%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%2C%20either%20in%20Universal%20Coordinated%20Time%20(UTC)%2C%20denoted%20by%20a%20Z%20at%20the%20end%20of%20the%20value%2C%20or%20with%20a%20time%20zone%20offset%20relative%20to%20UTC",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 24265,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 71,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n      const credential = credentials.clone('invalidCryptosuite');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "OiFDHlu4HFPeLRuGUCXFQ",
              "ctx": null,
              "_testId": "urn:uuid:5f4b92f1-38ba-40fe-a78c-0dc7fffd29b9",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 24336,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 71,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If options has a non-null domain item, it MUST be equal to proof.domain or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#verify-proof:~:text=If%20options%20has%20a%20non%2Dnull%20domain%20item%2C%20it%20MUST%20be%20equal%20to%20proof.domain%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n        const credential = credentials.clone('invalidDomain');\n        await verificationFail({\n          credential, verifier, options: {\n            domain: 'domain.example'\n          }\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "OiFDHlu4HFPeLRuGUCXFQ",
              "ctx": null,
              "_testId": "urn:uuid:9d3ee6a2-ac6c-4656-9a02-6b19833cdc78",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If options has a non-null domain item, it MUST be equal to proof.domain or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#verify-proof:~:text=If%20options%20has%20a%20non%2Dnull%20domain%20item%2C%20it%20MUST%20be%20equal%20to%20proof.domain%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 24407,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 72,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If options has a non-null challenge item, it MUST be equal to proof.challenge or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#add-proof:~:text=If%20options%20has%20a%20non%2Dnull%20challenge%20item%2C%20it%20MUST%20be%20equal%20to%20proof.challenge%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n        const credential = credentials.clone('invalidChallenge');\n        await verificationFail({\n          credential, verifier, options: {\n            domain: 'domain.example',\n            challenge: '1235abcd6789'\n          }\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "OiFDHlu4HFPeLRuGUCXFQ",
              "ctx": null,
              "_testId": "urn:uuid:f6f6fa3f-b131-429f-be94-60c2cb4f41b5",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If options has a non-null challenge item, it MUST be equal to proof.challenge or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#add-proof:~:text=If%20options%20has%20a%20non%2Dnull%20challenge%20item%2C%20it%20MUST%20be%20equal%20to%20proof.challenge%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 24479,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 72,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "(created) A conforming processor MAY chose to consume time values that were incorrectly serialized without an offset.",
              "body": "async function() {\n        this.test.link = 'https://www.w3.org/TR/vc-data-integrity/#proofs:~:text=be%20a%20string.-,created,-The%20date%20and';\n        await verificationFail({\n          credential: credentials.clone('noOffsetCreated'),\n          verifier\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "OiFDHlu4HFPeLRuGUCXFQ",
              "ctx": null,
              "_testId": "urn:uuid:5bc1f8f4-3c5d-4ba8-82ae-b90cf7afda1f",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "(created) A conforming processor MAY chose to consume time values that were incorrectly serialized without an offset."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://www.w3.org/TR/vc-data-integrity/#proofs:~:text=be%20a%20string.-,created,-The%20date%20and",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 24552,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 71,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "(expires) A conforming processor MAY chose to consume time values that were incorrectly serialized without an offset.",
              "body": "async function() {\n        this.test.link = 'https://www.w3.org/TR/vc-data-integrity/#proofs:~:text=interpreted%20as%20UTC.-,expires,-The%20expires%20property';\n        await verificationFail({\n          credential: credentials.clone('noOffsetExpires'),\n          verifier\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "OiFDHlu4HFPeLRuGUCXFQ",
              "ctx": null,
              "_testId": "urn:uuid:00d23000-edf3-463e-9ed4-8fe34950da71",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "(expires) A conforming processor MAY chose to consume time values that were incorrectly serialized without an offset."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://www.w3.org/TR/vc-data-integrity/#proofs:~:text=interpreted%20as%20UTC.-,expires,-The%20expires%20property",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 24624,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 71,
              "state": "passed",
              "speed": "medium"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"Grotto Networking\"",
              "body": "function() {\n      this.currentTest.cell = {\n        columnId: testDescription,\n        rowId: this.currentTest.title\n      };\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "OiFDHlu4HFPeLRuGUCXFQ",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Grotto Networking\"",
              "body": "async function() {\n      proofValueTests = shouldBeProofValue({credentials, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "OiFDHlu4HFPeLRuGUCXFQ",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 23079,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "9RfDhOhvbmrKJpq3U2WuS",
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
          "_testId": "urn:uuid:15db9b9d-80c8-4ac4-a3cb-a32198f7c31a"
        },
        {
          "title": "OpSecId",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.';\n      const credential = credentials.clone('invalidBaseUrl');\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'Should not verify VC with invalid base URL'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "BaNOT3cGHQFd5wB8TMK03",
              "ctx": null,
              "_testId": "urn:uuid:281aa9ae-f6ca-4bc5-8c9a-ff37c2dd6455",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 24697,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 214,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Should not verify VC with invalid base URL: expected Response { status: 200, statusText: 'OK', headers: Headers { 'content-length': '656', 'content-type': 'application/json; charset=utf-8', date: 'Sun, 25 Aug 2024 05:05:47 GMT', server: 'Python/3.12 aiohttp/3.10.5', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Should not verify VC with invalid base URL: expected Response { status: 200, statusText: 'OK', headers: Headers { 'content-length': '656', 'content-type': 'application/json; charset=utf-8', date: 'Sun, 25 Aug 2024 05:05:47 GMT', server: 'Python/3.12 aiohttp/3.10.5', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationFail (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:49:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/suites/verify.js:36:7)"
              }
            },
            {
              "type": "test",
              "title": "Conforming processors MUST produce errors when non-conforming documents are consumed.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.';\n      // this could be read as testing all non-confirming docs or just one\n      // for this test only one doc is tested as it should throw for any\n      // non-conforming doc\n      await verificationFail({\n        credential: credentials.clone('invalidProofType'),\n        verifier,\n        reason: 'Should not verify VC with invalid \"proof.type\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "BaNOT3cGHQFd5wB8TMK03",
              "ctx": null,
              "_testId": "urn:uuid:f7174229-5e37-4614-a848-329a0c6434c4",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "Conforming processors MUST produce errors when non-conforming documents are consumed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 24912,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 25,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "BaNOT3cGHQFd5wB8TMK03",
              "ctx": null,
              "_testId": "urn:uuid:5d7af1b2-1f65-41ec-8fdd-0d87d9210648",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "If the \"proof\" field is missing, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 24937,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 24,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n        const credential = credentials.clone('issuedVc');\n        credential.proof = null;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "BaNOT3cGHQFd5wB8TMK03",
              "ctx": null,
              "_testId": "urn:uuid:9384f4c3-4fdb-4a9a-b20c-bd79a6e72644",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "If the \"proof\" field is invalid, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 24962,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 25,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof.type;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "BaNOT3cGHQFd5wB8TMK03",
              "ctx": null,
              "_testId": "urn:uuid:95ef8a9b-b760-4fd0-a5a1-e45fa8015e29",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "If the \"proof.type\" field is missing, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 24986,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 25,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('invalidProofType');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "BaNOT3cGHQFd5wB8TMK03",
              "ctx": null,
              "_testId": "urn:uuid:22724ca5-191d-4533-b9c7-da963cd3a53e",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25011,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 24,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('noVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "BaNOT3cGHQFd5wB8TMK03",
              "ctx": null,
              "_testId": "urn:uuid:d079aebc-02af-4223-8a5c-2c48e05df7d7",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25036,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 22,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('invalidVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "BaNOT3cGHQFd5wB8TMK03",
              "ctx": null,
              "_testId": "urn:uuid:c677df97-e97e-488d-99b5-b0d99bf5666e",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25058,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 30,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('noProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "BaNOT3cGHQFd5wB8TMK03",
              "ctx": null,
              "_testId": "urn:uuid:dc24b26c-73d7-4b60-bd15-178d9debc38d",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25088,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 25,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('invalidProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "BaNOT3cGHQFd5wB8TMK03",
              "ctx": null,
              "_testId": "urn:uuid:0e1b9294-1847-4ab2-b21e-95e21a47c799",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25113,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 30,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no result from verifier.: expected Response { status: 200, statusText: 'OK', headers: Headers { 'content-length': '633', 'content-type': 'application/json; charset=utf-8', date: 'Sun, 25 Aug 2024 05:05:47 GMT', server: 'Python/3.12 aiohttp/3.10.5', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no result from verifier.: expected Response { status: 200, statusText: 'OK', headers: Headers { 'content-length': '633', 'content-type': 'application/json; charset=utf-8', date: 'Sun, 25 Aug 2024 05:05:47 GMT', server: 'Python/3.12 aiohttp/3.10.5', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationFail (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:49:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/suites/verify.js:96:7)"
              }
            },
            {
              "type": "test",
              "title": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      // NOTE: expectedProofPurpose should be specified by verifiers internally\n      // it is very unlikely to be invalidProofPurpose\n      await verificationFail({\n        credential: credentials.clone('invalidProofPurpose'),\n        verifier,\n        reason: 'Verifier should reject VC with invalid proof purpose.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "BaNOT3cGHQFd5wB8TMK03",
              "ctx": null,
              "_testId": "urn:uuid:b9f3a4ea-d43f-4c3c-a533-043a895ff5d5",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25144,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 43,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Verifier should reject VC with invalid proof purpose.: expected Response { status: 200, statusText: 'OK', headers: Headers { 'content-length': '633', 'content-type': 'application/json; charset=utf-8', date: 'Sun, 25 Aug 2024 05:05:47 GMT', server: 'Python/3.12 aiohttp/3.10.5', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Verifier should reject VC with invalid proof purpose.: expected Response { status: 200, statusText: 'OK', headers: Headers { 'content-length': '633', 'content-type': 'application/json; charset=utf-8', date: 'Sun, 25 Aug 2024 05:05:47 GMT', server: 'Python/3.12 aiohttp/3.10.5', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationFail (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:49:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/suites/verify.js:104:7)"
              }
            },
            {
              "type": "test",
              "title": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.';\n        await proofValueTests;\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "BaNOT3cGHQFd5wB8TMK03",
              "ctx": null,
              "_testId": "urn:uuid:a2833efb-d9dd-4b32-92e4-5fa86f1bf4e9",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "The proofValue property MUST be used, as specified in 2.1 Proofs."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25188,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof';\n      await proofValueTests;\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "BaNOT3cGHQFd5wB8TMK03",
              "ctx": null,
              "_testId": "urn:uuid:ca02a949-d458-4bb8-a686-5bd7b46636eb",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25188,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      await verificationFail({\n        credential: credentials.clone('undefinedTerm'),\n        verifier,\n        reason: 'Should fail to verify VC when data is dropped by JSON-LD'\n      });\n      const undefinedTerm = credentials.clone('issuedVc');\n      undefinedTerm.credentialSubject.undefinedTerm = 'IfDroppedWillVerify';\n      await verificationFail({\n        credential: undefinedTerm,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined term is added ' +\n          'after issuance.'\n      });\n      const undefinedType = credentials.clone('issuedVc');\n      undefinedType.type.push('UndefinedType');\n      await verificationFail({\n        credential: undefinedType,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined type is added ' +\n          'after issuance.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "BaNOT3cGHQFd5wB8TMK03",
              "ctx": null,
              "_testId": "urn:uuid:e259963a-bd92-4696-8cbf-576171eb29e6",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25188,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 32,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Should fail to verify VC when data is dropped by JSON-LD: expected Response { status: 200, statusText: 'OK', headers: Headers { 'content-length': '667', 'content-type': 'application/json; charset=utf-8', date: 'Sun, 25 Aug 2024 05:05:47 GMT', server: 'Python/3.12 aiohttp/3.10.5', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Should fail to verify VC when data is dropped by JSON-LD: expected Response { status: 200, statusText: 'OK', headers: Headers { 'content-length': '667', 'content-type': 'application/json; charset=utf-8', date: 'Sun, 25 Aug 2024 05:05:47 GMT', server: 'Python/3.12 aiohttp/3.10.5', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationFail (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:49:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/suites/verify.js:130:7)"
              }
            },
            {
              "type": "test",
              "title": "The date and time the proof was created is OPTIONAL and, if included, MUST be specified as an [XMLSCHEMA11-2] dateTimeStamp string, either in Universal Coordinated Time (UTC), denoted by a Z at the end of the value, or with a time zone offset relative to UTC.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=MUST%20be%20specified%20as%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%2C%20either%20in%20Universal%20Coordinated%20Time%20(UTC)%2C%20denoted%20by%20a%20Z%20at%20the%20end%20of%20the%20value%2C%20or%20with%20a%20time%20zone%20offset%20relative%20to%20UTC';\n        const credential = credentials.clone('invalidCreated');\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "BaNOT3cGHQFd5wB8TMK03",
              "ctx": null,
              "_testId": "urn:uuid:d732d2bd-4d7c-4fb8-a6bd-67f130b737ae",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "The date and time the proof was created is OPTIONAL and, if included, MUST be specified as an [XMLSCHEMA11-2] dateTimeStamp string, either in Universal Coordinated Time (UTC), denoted by a Z at the end of the value, or with a time zone offset relative to UTC."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=MUST%20be%20specified%20as%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%2C%20either%20in%20Universal%20Coordinated%20Time%20(UTC)%2C%20denoted%20by%20a%20Z%20at%20the%20end%20of%20the%20value%2C%20or%20with%20a%20time%20zone%20offset%20relative%20to%20UTC",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25221,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 25,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n      const credential = credentials.clone('invalidCryptosuite');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "BaNOT3cGHQFd5wB8TMK03",
              "ctx": null,
              "_testId": "urn:uuid:1b896e7f-910a-4c71-9dfd-c4f00d5d495a",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25247,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 29,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If options has a non-null domain item, it MUST be equal to proof.domain or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#verify-proof:~:text=If%20options%20has%20a%20non%2Dnull%20domain%20item%2C%20it%20MUST%20be%20equal%20to%20proof.domain%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n        const credential = credentials.clone('invalidDomain');\n        await verificationFail({\n          credential, verifier, options: {\n            domain: 'domain.example'\n          }\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "BaNOT3cGHQFd5wB8TMK03",
              "ctx": null,
              "_testId": "urn:uuid:f7400262-9ca3-4523-86b9-a91f58c285ac",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "If options has a non-null domain item, it MUST be equal to proof.domain or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#verify-proof:~:text=If%20options%20has%20a%20non%2Dnull%20domain%20item%2C%20it%20MUST%20be%20equal%20to%20proof.domain%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25276,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 24,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If options has a non-null challenge item, it MUST be equal to proof.challenge or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#add-proof:~:text=If%20options%20has%20a%20non%2Dnull%20challenge%20item%2C%20it%20MUST%20be%20equal%20to%20proof.challenge%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n        const credential = credentials.clone('invalidChallenge');\n        await verificationFail({\n          credential, verifier, options: {\n            domain: 'domain.example',\n            challenge: '1235abcd6789'\n          }\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "BaNOT3cGHQFd5wB8TMK03",
              "ctx": null,
              "_testId": "urn:uuid:75e174b3-5682-4b60-a7f6-9fa8b68dbe86",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "If options has a non-null challenge item, it MUST be equal to proof.challenge or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#add-proof:~:text=If%20options%20has%20a%20non%2Dnull%20challenge%20item%2C%20it%20MUST%20be%20equal%20to%20proof.challenge%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25300,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 24,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(created) A conforming processor MAY chose to consume time values that were incorrectly serialized without an offset.",
              "body": "async function() {\n        this.test.link = 'https://www.w3.org/TR/vc-data-integrity/#proofs:~:text=be%20a%20string.-,created,-The%20date%20and';\n        await verificationFail({\n          credential: credentials.clone('noOffsetCreated'),\n          verifier\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "BaNOT3cGHQFd5wB8TMK03",
              "ctx": null,
              "_testId": "urn:uuid:700d92be-0960-4339-b7ee-07dcbf9a8c7c",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "(created) A conforming processor MAY chose to consume time values that were incorrectly serialized without an offset."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://www.w3.org/TR/vc-data-integrity/#proofs:~:text=be%20a%20string.-,created,-The%20date%20and",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25324,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 30,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no result from verifier.: expected Response { status: 200, statusText: 'OK', headers: Headers { 'content-length': '465', 'content-type': 'application/json; charset=utf-8', date: 'Sun, 25 Aug 2024 05:05:47 GMT', server: 'Python/3.12 aiohttp/3.10.5', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no result from verifier.: expected Response { status: 200, statusText: 'OK', headers: Headers { 'content-length': '465', 'content-type': 'application/json; charset=utf-8', date: 'Sun, 25 Aug 2024 05:05:47 GMT', server: 'Python/3.12 aiohttp/3.10.5', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationFail (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:49:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/suites/verify.js:201:9)"
              }
            },
            {
              "type": "test",
              "title": "(expires) A conforming processor MAY chose to consume time values that were incorrectly serialized without an offset.",
              "body": "async function() {\n        this.test.link = 'https://www.w3.org/TR/vc-data-integrity/#proofs:~:text=interpreted%20as%20UTC.-,expires,-The%20expires%20property';\n        await verificationFail({\n          credential: credentials.clone('noOffsetExpires'),\n          verifier\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "BaNOT3cGHQFd5wB8TMK03",
              "ctx": null,
              "_testId": "urn:uuid:918fccd3-a086-4216-8e38-93084f97c259",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "(expires) A conforming processor MAY chose to consume time values that were incorrectly serialized without an offset."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://www.w3.org/TR/vc-data-integrity/#proofs:~:text=interpreted%20as%20UTC.-,expires,-The%20expires%20property",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25355,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 31,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no result from verifier.: expected Response { status: 200, statusText: 'OK', headers: Headers { 'content-length': '465', 'content-type': 'application/json; charset=utf-8', date: 'Sun, 25 Aug 2024 05:05:47 GMT', server: 'Python/3.12 aiohttp/3.10.5', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no result from verifier.: expected Response { status: 200, statusText: 'OK', headers: Headers { 'content-length': '465', 'content-type': 'application/json; charset=utf-8', date: 'Sun, 25 Aug 2024 05:05:47 GMT', server: 'Python/3.12 aiohttp/3.10.5', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationFail (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:49:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/suites/verify.js:209:9)"
              }
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"OpSecId\"",
              "body": "function() {\n      this.currentTest.cell = {\n        columnId: testDescription,\n        rowId: this.currentTest.title\n      };\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "BaNOT3cGHQFd5wB8TMK03",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"OpSecId\"",
              "body": "async function() {\n      proofValueTests = shouldBeProofValue({credentials, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "BaNOT3cGHQFd5wB8TMK03",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 24695,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "9RfDhOhvbmrKJpq3U2WuS",
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
          "_testId": "urn:uuid:d0a5deb0-dcb3-43ca-a3f1-e8db2a0315dd"
        },
        {
          "title": "SpruceID",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.';\n      const credential = credentials.clone('invalidBaseUrl');\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'Should not verify VC with invalid base URL'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "swiqezcFB6dtWqhV3uWcI",
              "ctx": null,
              "_testId": "urn:uuid:87ae1e8c-a50e-4e9e-8e45-7db5443e30df",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25389,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 67,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "Conforming processors MUST produce errors when non-conforming documents are consumed.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.';\n      // this could be read as testing all non-confirming docs or just one\n      // for this test only one doc is tested as it should throw for any\n      // non-conforming doc\n      await verificationFail({\n        credential: credentials.clone('invalidProofType'),\n        verifier,\n        reason: 'Should not verify VC with invalid \"proof.type\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "swiqezcFB6dtWqhV3uWcI",
              "ctx": null,
              "_testId": "urn:uuid:0b570b05-2c24-45b1-b5b4-b70671bd5ccc",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "Conforming processors MUST produce errors when non-conforming documents are consumed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25457,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 21,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "swiqezcFB6dtWqhV3uWcI",
              "ctx": null,
              "_testId": "urn:uuid:a7b40d00-24bc-424a-8513-0d08acf9725d",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If the \"proof\" field is missing, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25477,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 17,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n        const credential = credentials.clone('issuedVc');\n        credential.proof = null;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "swiqezcFB6dtWqhV3uWcI",
              "ctx": null,
              "_testId": "urn:uuid:106fb42f-8080-416e-adb3-7beddd31ccbe",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If the \"proof\" field is invalid, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25494,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 19,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof.type;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "swiqezcFB6dtWqhV3uWcI",
              "ctx": null,
              "_testId": "urn:uuid:5653fbbc-d9fd-467e-bd2d-012d2f711949",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If the \"proof.type\" field is missing, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25513,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 20,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('invalidProofType');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "swiqezcFB6dtWqhV3uWcI",
              "ctx": null,
              "_testId": "urn:uuid:178585f5-e4c4-4f5e-9fd8-4182ca2ab393",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25533,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 18,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('noVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "swiqezcFB6dtWqhV3uWcI",
              "ctx": null,
              "_testId": "urn:uuid:5b8102ff-8af9-4fe6-9639-4b35949e6681",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25551,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 19,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('invalidVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "swiqezcFB6dtWqhV3uWcI",
              "ctx": null,
              "_testId": "urn:uuid:07e63097-df97-4a35-a411-6a8b6fae46c7",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25570,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 18,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('noProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "swiqezcFB6dtWqhV3uWcI",
              "ctx": null,
              "_testId": "urn:uuid:fc5619fd-3ac4-49b7-b025-580f2059e594",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25588,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 18,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('invalidProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "swiqezcFB6dtWqhV3uWcI",
              "ctx": null,
              "_testId": "urn:uuid:4b8b9466-246d-4e23-83b6-91a3ded74eb4",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25607,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 30,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      // NOTE: expectedProofPurpose should be specified by verifiers internally\n      // it is very unlikely to be invalidProofPurpose\n      await verificationFail({\n        credential: credentials.clone('invalidProofPurpose'),\n        verifier,\n        reason: 'Verifier should reject VC with invalid proof purpose.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "swiqezcFB6dtWqhV3uWcI",
              "ctx": null,
              "_testId": "urn:uuid:9e144191-bc48-4cda-af5a-38fd9ab7edb1",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25638,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 17,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.';\n        await proofValueTests;\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "swiqezcFB6dtWqhV3uWcI",
              "ctx": null,
              "_testId": "urn:uuid:ccc3681c-33f7-457b-a727-e34c40ca18c3",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The proofValue property MUST be used, as specified in 2.1 Proofs."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25655,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof';\n      await proofValueTests;\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "swiqezcFB6dtWqhV3uWcI",
              "ctx": null,
              "_testId": "urn:uuid:46ae36a7-4574-4d2d-9a78-e8c398ea1e6e",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25656,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      await verificationFail({\n        credential: credentials.clone('undefinedTerm'),\n        verifier,\n        reason: 'Should fail to verify VC when data is dropped by JSON-LD'\n      });\n      const undefinedTerm = credentials.clone('issuedVc');\n      undefinedTerm.credentialSubject.undefinedTerm = 'IfDroppedWillVerify';\n      await verificationFail({\n        credential: undefinedTerm,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined term is added ' +\n          'after issuance.'\n      });\n      const undefinedType = credentials.clone('issuedVc');\n      undefinedType.type.push('UndefinedType');\n      await verificationFail({\n        credential: undefinedType,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined type is added ' +\n          'after issuance.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "swiqezcFB6dtWqhV3uWcI",
              "ctx": null,
              "_testId": "urn:uuid:e7db27e2-7d9c-4bff-9b48-ca621e59edf6",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25656,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 53,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "The date and time the proof was created is OPTIONAL and, if included, MUST be specified as an [XMLSCHEMA11-2] dateTimeStamp string, either in Universal Coordinated Time (UTC), denoted by a Z at the end of the value, or with a time zone offset relative to UTC.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=MUST%20be%20specified%20as%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%2C%20either%20in%20Universal%20Coordinated%20Time%20(UTC)%2C%20denoted%20by%20a%20Z%20at%20the%20end%20of%20the%20value%2C%20or%20with%20a%20time%20zone%20offset%20relative%20to%20UTC';\n        const credential = credentials.clone('invalidCreated');\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "swiqezcFB6dtWqhV3uWcI",
              "ctx": null,
              "_testId": "urn:uuid:57d513f4-b12c-455b-9449-a710ec1977b9",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The date and time the proof was created is OPTIONAL and, if included, MUST be specified as an [XMLSCHEMA11-2] dateTimeStamp string, either in Universal Coordinated Time (UTC), denoted by a Z at the end of the value, or with a time zone offset relative to UTC."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=MUST%20be%20specified%20as%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%2C%20either%20in%20Universal%20Coordinated%20Time%20(UTC)%2C%20denoted%20by%20a%20Z%20at%20the%20end%20of%20the%20value%2C%20or%20with%20a%20time%20zone%20offset%20relative%20to%20UTC",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25709,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 17,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n      const credential = credentials.clone('invalidCryptosuite');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "swiqezcFB6dtWqhV3uWcI",
              "ctx": null,
              "_testId": "urn:uuid:a23c4110-7001-449a-a24c-913696f404d1",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25727,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 18,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If options has a non-null domain item, it MUST be equal to proof.domain or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#verify-proof:~:text=If%20options%20has%20a%20non%2Dnull%20domain%20item%2C%20it%20MUST%20be%20equal%20to%20proof.domain%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n        const credential = credentials.clone('invalidDomain');\n        await verificationFail({\n          credential, verifier, options: {\n            domain: 'domain.example'\n          }\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "swiqezcFB6dtWqhV3uWcI",
              "ctx": null,
              "_testId": "urn:uuid:662a8e76-430e-4684-9fea-44514f786985",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If options has a non-null domain item, it MUST be equal to proof.domain or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#verify-proof:~:text=If%20options%20has%20a%20non%2Dnull%20domain%20item%2C%20it%20MUST%20be%20equal%20to%20proof.domain%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25745,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 24,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If options has a non-null challenge item, it MUST be equal to proof.challenge or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#add-proof:~:text=If%20options%20has%20a%20non%2Dnull%20challenge%20item%2C%20it%20MUST%20be%20equal%20to%20proof.challenge%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n        const credential = credentials.clone('invalidChallenge');\n        await verificationFail({\n          credential, verifier, options: {\n            domain: 'domain.example',\n            challenge: '1235abcd6789'\n          }\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "swiqezcFB6dtWqhV3uWcI",
              "ctx": null,
              "_testId": "urn:uuid:d71f14d0-3e49-4044-85cb-ea416a9d647b",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If options has a non-null challenge item, it MUST be equal to proof.challenge or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#add-proof:~:text=If%20options%20has%20a%20non%2Dnull%20challenge%20item%2C%20it%20MUST%20be%20equal%20to%20proof.challenge%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25769,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 18,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(created) A conforming processor MAY chose to consume time values that were incorrectly serialized without an offset.",
              "body": "async function() {\n        this.test.link = 'https://www.w3.org/TR/vc-data-integrity/#proofs:~:text=be%20a%20string.-,created,-The%20date%20and';\n        await verificationFail({\n          credential: credentials.clone('noOffsetCreated'),\n          verifier\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "swiqezcFB6dtWqhV3uWcI",
              "ctx": null,
              "_testId": "urn:uuid:9c86eaf1-3537-4f98-a25c-4dcb2d3c0157",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "(created) A conforming processor MAY chose to consume time values that were incorrectly serialized without an offset."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://www.w3.org/TR/vc-data-integrity/#proofs:~:text=be%20a%20string.-,created,-The%20date%20and",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25788,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 16,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(expires) A conforming processor MAY chose to consume time values that were incorrectly serialized without an offset.",
              "body": "async function() {\n        this.test.link = 'https://www.w3.org/TR/vc-data-integrity/#proofs:~:text=interpreted%20as%20UTC.-,expires,-The%20expires%20property';\n        await verificationFail({\n          credential: credentials.clone('noOffsetExpires'),\n          verifier\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "swiqezcFB6dtWqhV3uWcI",
              "ctx": null,
              "_testId": "urn:uuid:bb92a75e-8983-4026-9dd5-a2b8e4a43ad4",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "(expires) A conforming processor MAY chose to consume time values that were incorrectly serialized without an offset."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://www.w3.org/TR/vc-data-integrity/#proofs:~:text=interpreted%20as%20UTC.-,expires,-The%20expires%20property",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25805,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 17,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"SpruceID\"",
              "body": "function() {\n      this.currentTest.cell = {\n        columnId: testDescription,\n        rowId: this.currentTest.title\n      };\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "swiqezcFB6dtWqhV3uWcI",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"SpruceID\"",
              "body": "async function() {\n      proofValueTests = shouldBeProofValue({credentials, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "swiqezcFB6dtWqhV3uWcI",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25387,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "9RfDhOhvbmrKJpq3U2WuS",
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
          "_testId": "urn:uuid:13d7cc26-803b-46e5-8c8e-79bf10827678"
        },
        {
          "title": "Trinsic",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.';\n      const credential = credentials.clone('invalidBaseUrl');\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'Should not verify VC with invalid base URL'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "2zCwF9FvWV8qCrcXrzxF_",
              "ctx": null,
              "_testId": "urn:uuid:34dc853b-00bd-4592-b8df-bf284de43556",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25824,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 50,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "Conforming processors MUST produce errors when non-conforming documents are consumed.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.';\n      // this could be read as testing all non-confirming docs or just one\n      // for this test only one doc is tested as it should throw for any\n      // non-conforming doc\n      await verificationFail({\n        credential: credentials.clone('invalidProofType'),\n        verifier,\n        reason: 'Should not verify VC with invalid \"proof.type\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "2zCwF9FvWV8qCrcXrzxF_",
              "ctx": null,
              "_testId": "urn:uuid:399bbca8-a0a9-4ee6-9492-0ae32227679d",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "Conforming processors MUST produce errors when non-conforming documents are consumed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25875,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 20,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "2zCwF9FvWV8qCrcXrzxF_",
              "ctx": null,
              "_testId": "urn:uuid:80e0e90c-dc49-4e94-b0d8-fd2dccefcdbb",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "If the \"proof\" field is missing, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25895,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 21,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n        const credential = credentials.clone('issuedVc');\n        credential.proof = null;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "2zCwF9FvWV8qCrcXrzxF_",
              "ctx": null,
              "_testId": "urn:uuid:42726045-2c9a-4584-8464-79c911e096e7",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "If the \"proof\" field is invalid, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25917,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 18,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof.type;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "2zCwF9FvWV8qCrcXrzxF_",
              "ctx": null,
              "_testId": "urn:uuid:d8ed5a1f-270c-4362-915b-12b62c299fa8",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "If the \"proof.type\" field is missing, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25935,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 20,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('invalidProofType');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "2zCwF9FvWV8qCrcXrzxF_",
              "ctx": null,
              "_testId": "urn:uuid:8970b5d5-ceda-42ff-b2ff-7b82d5d199fe",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25955,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 21,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('noVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "2zCwF9FvWV8qCrcXrzxF_",
              "ctx": null,
              "_testId": "urn:uuid:10850254-632b-44ba-8b2e-8871512a98ea",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25977,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 23,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('invalidVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "2zCwF9FvWV8qCrcXrzxF_",
              "ctx": null,
              "_testId": "urn:uuid:deca0c2e-d288-497b-b456-5c6e1bb5d6ea",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 26000,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 19,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('noProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "2zCwF9FvWV8qCrcXrzxF_",
              "ctx": null,
              "_testId": "urn:uuid:4393d5d8-4c61-4764-a686-9e9d78ed40fa",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 26019,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 19,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('invalidProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "2zCwF9FvWV8qCrcXrzxF_",
              "ctx": null,
              "_testId": "urn:uuid:f958f0a0-eb0b-4e04-b05b-4a2585b623d4",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 26038,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 24,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      // NOTE: expectedProofPurpose should be specified by verifiers internally\n      // it is very unlikely to be invalidProofPurpose\n      await verificationFail({\n        credential: credentials.clone('invalidProofPurpose'),\n        verifier,\n        reason: 'Verifier should reject VC with invalid proof purpose.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "2zCwF9FvWV8qCrcXrzxF_",
              "ctx": null,
              "_testId": "urn:uuid:191be3ec-afb0-412f-b74c-6ad9506ed57e",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 26062,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 21,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.';\n        await proofValueTests;\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "2zCwF9FvWV8qCrcXrzxF_",
              "ctx": null,
              "_testId": "urn:uuid:7598ab6a-4467-4cda-9819-4b4c8da0ea1d",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "The proofValue property MUST be used, as specified in 2.1 Proofs."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 26084,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof';\n      await proofValueTests;\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "2zCwF9FvWV8qCrcXrzxF_",
              "ctx": null,
              "_testId": "urn:uuid:c0af8bee-1a65-4fc6-bf1e-61beac33fa93",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 26084,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      await verificationFail({\n        credential: credentials.clone('undefinedTerm'),\n        verifier,\n        reason: 'Should fail to verify VC when data is dropped by JSON-LD'\n      });\n      const undefinedTerm = credentials.clone('issuedVc');\n      undefinedTerm.credentialSubject.undefinedTerm = 'IfDroppedWillVerify';\n      await verificationFail({\n        credential: undefinedTerm,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined term is added ' +\n          'after issuance.'\n      });\n      const undefinedType = credentials.clone('issuedVc');\n      undefinedType.type.push('UndefinedType');\n      await verificationFail({\n        credential: undefinedType,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined type is added ' +\n          'after issuance.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "2zCwF9FvWV8qCrcXrzxF_",
              "ctx": null,
              "_testId": "urn:uuid:1449a18b-d883-4bac-9ff5-6437bd2e74c8",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 26084,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 54,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "The date and time the proof was created is OPTIONAL and, if included, MUST be specified as an [XMLSCHEMA11-2] dateTimeStamp string, either in Universal Coordinated Time (UTC), denoted by a Z at the end of the value, or with a time zone offset relative to UTC.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=MUST%20be%20specified%20as%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%2C%20either%20in%20Universal%20Coordinated%20Time%20(UTC)%2C%20denoted%20by%20a%20Z%20at%20the%20end%20of%20the%20value%2C%20or%20with%20a%20time%20zone%20offset%20relative%20to%20UTC';\n        const credential = credentials.clone('invalidCreated');\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "2zCwF9FvWV8qCrcXrzxF_",
              "ctx": null,
              "_testId": "urn:uuid:9f101a8f-a167-4625-9448-8f3bf59a3806",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "The date and time the proof was created is OPTIONAL and, if included, MUST be specified as an [XMLSCHEMA11-2] dateTimeStamp string, either in Universal Coordinated Time (UTC), denoted by a Z at the end of the value, or with a time zone offset relative to UTC."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=MUST%20be%20specified%20as%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%2C%20either%20in%20Universal%20Coordinated%20Time%20(UTC)%2C%20denoted%20by%20a%20Z%20at%20the%20end%20of%20the%20value%2C%20or%20with%20a%20time%20zone%20offset%20relative%20to%20UTC",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 26139,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 21,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n      const credential = credentials.clone('invalidCryptosuite');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "2zCwF9FvWV8qCrcXrzxF_",
              "ctx": null,
              "_testId": "urn:uuid:c01a8243-098f-4475-817b-fb4c4acf4203",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 26160,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 19,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If options has a non-null domain item, it MUST be equal to proof.domain or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#verify-proof:~:text=If%20options%20has%20a%20non%2Dnull%20domain%20item%2C%20it%20MUST%20be%20equal%20to%20proof.domain%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n        const credential = credentials.clone('invalidDomain');\n        await verificationFail({\n          credential, verifier, options: {\n            domain: 'domain.example'\n          }\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "2zCwF9FvWV8qCrcXrzxF_",
              "ctx": null,
              "_testId": "urn:uuid:7d0d62be-15fa-4e01-81fa-b041a28db2b5",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "If options has a non-null domain item, it MUST be equal to proof.domain or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#verify-proof:~:text=If%20options%20has%20a%20non%2Dnull%20domain%20item%2C%20it%20MUST%20be%20equal%20to%20proof.domain%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 26179,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 22,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If options has a non-null challenge item, it MUST be equal to proof.challenge or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#add-proof:~:text=If%20options%20has%20a%20non%2Dnull%20challenge%20item%2C%20it%20MUST%20be%20equal%20to%20proof.challenge%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n        const credential = credentials.clone('invalidChallenge');\n        await verificationFail({\n          credential, verifier, options: {\n            domain: 'domain.example',\n            challenge: '1235abcd6789'\n          }\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "2zCwF9FvWV8qCrcXrzxF_",
              "ctx": null,
              "_testId": "urn:uuid:5bb2ccfb-e904-4f02-9699-e75d5115ddeb",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "If options has a non-null challenge item, it MUST be equal to proof.challenge or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#add-proof:~:text=If%20options%20has%20a%20non%2Dnull%20challenge%20item%2C%20it%20MUST%20be%20equal%20to%20proof.challenge%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 26201,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 20,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(created) A conforming processor MAY chose to consume time values that were incorrectly serialized without an offset.",
              "body": "async function() {\n        this.test.link = 'https://www.w3.org/TR/vc-data-integrity/#proofs:~:text=be%20a%20string.-,created,-The%20date%20and';\n        await verificationFail({\n          credential: credentials.clone('noOffsetCreated'),\n          verifier\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "2zCwF9FvWV8qCrcXrzxF_",
              "ctx": null,
              "_testId": "urn:uuid:79770328-fb8a-4467-821c-0e2e52a05530",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "(created) A conforming processor MAY chose to consume time values that were incorrectly serialized without an offset."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://www.w3.org/TR/vc-data-integrity/#proofs:~:text=be%20a%20string.-,created,-The%20date%20and",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 26222,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 21,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(expires) A conforming processor MAY chose to consume time values that were incorrectly serialized without an offset.",
              "body": "async function() {\n        this.test.link = 'https://www.w3.org/TR/vc-data-integrity/#proofs:~:text=interpreted%20as%20UTC.-,expires,-The%20expires%20property';\n        await verificationFail({\n          credential: credentials.clone('noOffsetExpires'),\n          verifier\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "2zCwF9FvWV8qCrcXrzxF_",
              "ctx": null,
              "_testId": "urn:uuid:359d528d-811f-485a-be9f-8fe18c17d67c",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "(expires) A conforming processor MAY chose to consume time values that were incorrectly serialized without an offset."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://www.w3.org/TR/vc-data-integrity/#proofs:~:text=interpreted%20as%20UTC.-,expires,-The%20expires%20property",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 26243,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 18,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"Trinsic\"",
              "body": "function() {\n      this.currentTest.cell = {\n        columnId: testDescription,\n        rowId: this.currentTest.title\n      };\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "2zCwF9FvWV8qCrcXrzxF_",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Trinsic\"",
              "body": "async function() {\n      proofValueTests = shouldBeProofValue({credentials, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "2zCwF9FvWV8qCrcXrzxF_",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25823,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "9RfDhOhvbmrKJpq3U2WuS",
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
          "_testId": "urn:uuid:87947061-e426-44b8-a88f-4406867ed613"
        },
        {
          "title": "bovine",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.';\n      const credential = credentials.clone('invalidBaseUrl');\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'Should not verify VC with invalid base URL'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "xJ1HqI8WZKSmgcssIJqfk",
              "ctx": null,
              "_testId": "urn:uuid:e53e1b0b-48bb-49cb-91b9-f9ee635dae61",
              "cell": {
                "columnId": "bovine",
                "rowId": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 26263,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 3761,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Conforming processors MUST produce errors when non-conforming documents are consumed.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.';\n      // this could be read as testing all non-confirming docs or just one\n      // for this test only one doc is tested as it should throw for any\n      // non-conforming doc\n      await verificationFail({\n        credential: credentials.clone('invalidProofType'),\n        verifier,\n        reason: 'Should not verify VC with invalid \"proof.type\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "xJ1HqI8WZKSmgcssIJqfk",
              "ctx": null,
              "_testId": "urn:uuid:0774a5dd-fed4-405e-a36f-51beb47acaee",
              "cell": {
                "columnId": "bovine",
                "rowId": "Conforming processors MUST produce errors when non-conforming documents are consumed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30025,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 95,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "xJ1HqI8WZKSmgcssIJqfk",
              "ctx": null,
              "_testId": "urn:uuid:af5c209a-3ef8-49bc-a861-716f061620c1",
              "cell": {
                "columnId": "bovine",
                "rowId": "If the \"proof\" field is missing, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30120,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 93,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n        const credential = credentials.clone('issuedVc');\n        credential.proof = null;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "xJ1HqI8WZKSmgcssIJqfk",
              "ctx": null,
              "_testId": "urn:uuid:db1db75d-47c5-431f-ad35-8a5bce10faa2",
              "cell": {
                "columnId": "bovine",
                "rowId": "If the \"proof\" field is invalid, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30213,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 93,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof.type;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "xJ1HqI8WZKSmgcssIJqfk",
              "ctx": null,
              "_testId": "urn:uuid:b5aed38c-29ba-4203-a313-550d8aaeb3fc",
              "cell": {
                "columnId": "bovine",
                "rowId": "If the \"proof.type\" field is missing, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30306,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 95,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('invalidProofType');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "xJ1HqI8WZKSmgcssIJqfk",
              "ctx": null,
              "_testId": "urn:uuid:f7e59382-633d-4d25-8ea1-ce6b3c2a4dd9",
              "cell": {
                "columnId": "bovine",
                "rowId": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30402,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 98,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('noVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "xJ1HqI8WZKSmgcssIJqfk",
              "ctx": null,
              "_testId": "urn:uuid:f036d1e5-e2e6-4543-b8e9-a7995757ffe7",
              "cell": {
                "columnId": "bovine",
                "rowId": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30500,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 92,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('invalidVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "xJ1HqI8WZKSmgcssIJqfk",
              "ctx": null,
              "_testId": "urn:uuid:81b775e2-f27e-4805-a7f8-2b580546362a",
              "cell": {
                "columnId": "bovine",
                "rowId": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30593,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 93,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('noProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "xJ1HqI8WZKSmgcssIJqfk",
              "ctx": null,
              "_testId": "urn:uuid:a6b0e550-14c2-403f-8ece-dd1d27f6b1ba",
              "cell": {
                "columnId": "bovine",
                "rowId": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30687,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 93,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('invalidProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "xJ1HqI8WZKSmgcssIJqfk",
              "ctx": null,
              "_testId": "urn:uuid:bebd4edd-d1d5-4384-a917-fab618f890cd",
              "cell": {
                "columnId": "bovine",
                "rowId": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30780,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 97,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      // NOTE: expectedProofPurpose should be specified by verifiers internally\n      // it is very unlikely to be invalidProofPurpose\n      await verificationFail({\n        credential: credentials.clone('invalidProofPurpose'),\n        verifier,\n        reason: 'Verifier should reject VC with invalid proof purpose.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "xJ1HqI8WZKSmgcssIJqfk",
              "ctx": null,
              "_testId": "urn:uuid:26db5dd3-267a-4cad-86bc-072c87adc762",
              "cell": {
                "columnId": "bovine",
                "rowId": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30876,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 96,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.';\n        await proofValueTests;\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "xJ1HqI8WZKSmgcssIJqfk",
              "ctx": null,
              "_testId": "urn:uuid:b1b34fd4-250e-40d6-bb2a-5313bedbd32b",
              "cell": {
                "columnId": "bovine",
                "rowId": "The proofValue property MUST be used, as specified in 2.1 Proofs."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30972,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 4597,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof';\n      await proofValueTests;\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "xJ1HqI8WZKSmgcssIJqfk",
              "ctx": null,
              "_testId": "urn:uuid:1fcb59b9-799d-4c6a-ab3b-093d93a86442",
              "cell": {
                "columnId": "bovine",
                "rowId": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 35570,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      await verificationFail({\n        credential: credentials.clone('undefinedTerm'),\n        verifier,\n        reason: 'Should fail to verify VC when data is dropped by JSON-LD'\n      });\n      const undefinedTerm = credentials.clone('issuedVc');\n      undefinedTerm.credentialSubject.undefinedTerm = 'IfDroppedWillVerify';\n      await verificationFail({\n        credential: undefinedTerm,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined term is added ' +\n          'after issuance.'\n      });\n      const undefinedType = credentials.clone('issuedVc');\n      undefinedType.type.push('UndefinedType');\n      await verificationFail({\n        credential: undefinedType,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined type is added ' +\n          'after issuance.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "xJ1HqI8WZKSmgcssIJqfk",
              "ctx": null,
              "_testId": "urn:uuid:b71b95d3-29a7-47b4-9a77-630aaf09b168",
              "cell": {
                "columnId": "bovine",
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 35570,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 9793,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Should fail to verify VC if an undefined term is added after issuance.: expected Response { status: 200, statusText: 'OK', headers: Headers { server: 'nginx/1.18.0 (Ubuntu)', date: 'Sun, 25 Aug 2024 05:06:07 GMT', 'content-type': 'text/html; charset=utf-8', 'content-length': '0', connection: 'keep-alive', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: null, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Should fail to verify VC if an undefined term is added after issuance.: expected Response { status: 200, statusText: 'OK', headers: Headers { server: 'nginx/1.18.0 (Ubuntu)', date: 'Sun, 25 Aug 2024 05:06:07 GMT', 'content-type': 'text/html; charset=utf-8', 'content-length': '0', connection: 'keep-alive', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: null, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationFail (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:49:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/suites/verify.js:137:7)"
              }
            },
            {
              "type": "test",
              "title": "The date and time the proof was created is OPTIONAL and, if included, MUST be specified as an [XMLSCHEMA11-2] dateTimeStamp string, either in Universal Coordinated Time (UTC), denoted by a Z at the end of the value, or with a time zone offset relative to UTC.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=MUST%20be%20specified%20as%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%2C%20either%20in%20Universal%20Coordinated%20Time%20(UTC)%2C%20denoted%20by%20a%20Z%20at%20the%20end%20of%20the%20value%2C%20or%20with%20a%20time%20zone%20offset%20relative%20to%20UTC';\n        const credential = credentials.clone('invalidCreated');\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "xJ1HqI8WZKSmgcssIJqfk",
              "ctx": null,
              "_testId": "urn:uuid:c2d25186-159d-4d56-8c4f-8502d2b02063",
              "cell": {
                "columnId": "bovine",
                "rowId": "The date and time the proof was created is OPTIONAL and, if included, MUST be specified as an [XMLSCHEMA11-2] dateTimeStamp string, either in Universal Coordinated Time (UTC), denoted by a Z at the end of the value, or with a time zone offset relative to UTC."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=MUST%20be%20specified%20as%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%2C%20either%20in%20Universal%20Coordinated%20Time%20(UTC)%2C%20denoted%20by%20a%20Z%20at%20the%20end%20of%20the%20value%2C%20or%20with%20a%20time%20zone%20offset%20relative%20to%20UTC",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 45364,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 10007,
              "state": "failed",
              "err": {}
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n      const credential = credentials.clone('invalidCryptosuite');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "xJ1HqI8WZKSmgcssIJqfk",
              "ctx": null,
              "_testId": "urn:uuid:7df02d49-1e74-46c6-8b6b-967c34150620",
              "cell": {
                "columnId": "bovine",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 55373,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 4185,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If options has a non-null domain item, it MUST be equal to proof.domain or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#verify-proof:~:text=If%20options%20has%20a%20non%2Dnull%20domain%20item%2C%20it%20MUST%20be%20equal%20to%20proof.domain%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n        const credential = credentials.clone('invalidDomain');\n        await verificationFail({\n          credential, verifier, options: {\n            domain: 'domain.example'\n          }\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "xJ1HqI8WZKSmgcssIJqfk",
              "ctx": null,
              "_testId": "urn:uuid:20a81bdc-ffa8-44e7-8a32-8c863ecc1c30",
              "cell": {
                "columnId": "bovine",
                "rowId": "If options has a non-null domain item, it MUST be equal to proof.domain or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#verify-proof:~:text=If%20options%20has%20a%20non%2Dnull%20domain%20item%2C%20it%20MUST%20be%20equal%20to%20proof.domain%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 59558,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 96,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no result from verifier.: expected Response { status: 200, statusText: 'OK', headers: Headers { server: 'nginx/1.18.0 (Ubuntu)', date: 'Sun, 25 Aug 2024 05:06:21 GMT', 'content-type': 'text/html; charset=utf-8', 'content-length': '0', connection: 'keep-alive', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: null, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no result from verifier.: expected Response { status: 200, statusText: 'OK', headers: Headers { server: 'nginx/1.18.0 (Ubuntu)', date: 'Sun, 25 Aug 2024 05:06:21 GMT', 'content-type': 'text/html; charset=utf-8', 'content-length': '0', connection: 'keep-alive', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: null, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationFail (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:49:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/suites/verify.js:178:9)"
              }
            },
            {
              "type": "test",
              "title": "If options has a non-null challenge item, it MUST be equal to proof.challenge or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#add-proof:~:text=If%20options%20has%20a%20non%2Dnull%20challenge%20item%2C%20it%20MUST%20be%20equal%20to%20proof.challenge%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n        const credential = credentials.clone('invalidChallenge');\n        await verificationFail({\n          credential, verifier, options: {\n            domain: 'domain.example',\n            challenge: '1235abcd6789'\n          }\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "xJ1HqI8WZKSmgcssIJqfk",
              "ctx": null,
              "_testId": "urn:uuid:3b839de2-113f-4080-ba1e-132e63dd88b0",
              "cell": {
                "columnId": "bovine",
                "rowId": "If options has a non-null challenge item, it MUST be equal to proof.challenge or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#add-proof:~:text=If%20options%20has%20a%20non%2Dnull%20challenge%20item%2C%20it%20MUST%20be%20equal%20to%20proof.challenge%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 59655,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 95,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no result from verifier.: expected Response { status: 200, statusText: 'OK', headers: Headers { server: 'nginx/1.18.0 (Ubuntu)', date: 'Sun, 25 Aug 2024 05:06:21 GMT', 'content-type': 'text/html; charset=utf-8', 'content-length': '0', connection: 'keep-alive', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: null, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no result from verifier.: expected Response { status: 200, statusText: 'OK', headers: Headers { server: 'nginx/1.18.0 (Ubuntu)', date: 'Sun, 25 Aug 2024 05:06:21 GMT', 'content-type': 'text/html; charset=utf-8', 'content-length': '0', connection: 'keep-alive', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: null, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationFail (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:49:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/suites/verify.js:189:9)"
              }
            },
            {
              "type": "test",
              "title": "(created) A conforming processor MAY chose to consume time values that were incorrectly serialized without an offset.",
              "body": "async function() {\n        this.test.link = 'https://www.w3.org/TR/vc-data-integrity/#proofs:~:text=be%20a%20string.-,created,-The%20date%20and';\n        await verificationFail({\n          credential: credentials.clone('noOffsetCreated'),\n          verifier\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "xJ1HqI8WZKSmgcssIJqfk",
              "ctx": null,
              "_testId": "urn:uuid:b45b37b6-5dd1-4ad3-ad3b-d7e0e9032686",
              "cell": {
                "columnId": "bovine",
                "rowId": "(created) A conforming processor MAY chose to consume time values that were incorrectly serialized without an offset."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://www.w3.org/TR/vc-data-integrity/#proofs:~:text=be%20a%20string.-,created,-The%20date%20and",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 59751,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 93,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "(expires) A conforming processor MAY chose to consume time values that were incorrectly serialized without an offset.",
              "body": "async function() {\n        this.test.link = 'https://www.w3.org/TR/vc-data-integrity/#proofs:~:text=interpreted%20as%20UTC.-,expires,-The%20expires%20property';\n        await verificationFail({\n          credential: credentials.clone('noOffsetExpires'),\n          verifier\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "xJ1HqI8WZKSmgcssIJqfk",
              "ctx": null,
              "_testId": "urn:uuid:e852698c-c7f7-4840-8649-35fb0dfaed9a",
              "cell": {
                "columnId": "bovine",
                "rowId": "(expires) A conforming processor MAY chose to consume time values that were incorrectly serialized without an offset."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://www.w3.org/TR/vc-data-integrity/#proofs:~:text=interpreted%20as%20UTC.-,expires,-The%20expires%20property",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 59844,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 92,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"bovine\"",
              "body": "function() {\n      this.currentTest.cell = {\n        columnId: testDescription,\n        rowId: this.currentTest.title\n      };\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "xJ1HqI8WZKSmgcssIJqfk",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"bovine\"",
              "body": "async function() {\n      proofValueTests = shouldBeProofValue({credentials, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "xJ1HqI8WZKSmgcssIJqfk",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 26262,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "9RfDhOhvbmrKJpq3U2WuS",
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
          "_testId": "urn:uuid:daf7f69f-77e2-4e37-9bf7-6ef55689c861"
        }
      ],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [
        {
          "title": "\"before all\" hook in \"Data Integrity (eddsa-rdfc-2022 verifiers)\"",
          "body": "async function() {\n      const data = await generateTestData({...testDataOptions, optionalTests});\n      // this might seem weird, but mocha won't wait for credentials to be set\n      // before passing the credentials var to the tests\n      // so we just update the credentials passed to the actual test suite\n      Object.assign(credentials, data);\n    }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "9RfDhOhvbmrKJpq3U2WuS",
          "ctx": null,
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 14658,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 42,
          "_error": null
        }
      ],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "QTtpw9S7WaqSoh51WrSQz",
      "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Verifier",
      "_testId": "urn:uuid:e29d20f5-f43c-4ca4-8ded-31df12b0c9b4",
      "columns": [
        "apicatalog.com",
        "Digital Bazaar",
        "Grotto Networking",
        "OpSecId",
        "SpruceID",
        "Trinsic",
        "bovine"
      ],
      "rows": [
        {
          "id": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null.",
          "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.",
          "cells": [
            {
              "type": "test",
              "title": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.';\n      const credential = credentials.clone('invalidBaseUrl');\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'Should not verify VC with invalid base URL'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "w8u6n8rndrGCijhw47HFj",
              "ctx": null,
              "_testId": "urn:uuid:f79b52bf-4376-4170-8586-00f97b480d61",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 14701,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 171,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.';\n      const credential = credentials.clone('invalidBaseUrl');\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'Should not verify VC with invalid base URL'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "8rdRVXR4E8x6YlOvPxg3j",
              "ctx": null,
              "_testId": "urn:uuid:aecb0e32-8458-487e-a0ed-dc41ceddf174",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16980,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 2908,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.';\n      const credential = credentials.clone('invalidBaseUrl');\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'Should not verify VC with invalid base URL'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "OiFDHlu4HFPeLRuGUCXFQ",
              "ctx": null,
              "_testId": "urn:uuid:7efdcf14-5580-48ff-aedd-48f62bfd66eb",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 23081,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 241,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.';\n      const credential = credentials.clone('invalidBaseUrl');\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'Should not verify VC with invalid base URL'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "BaNOT3cGHQFd5wB8TMK03",
              "ctx": null,
              "_testId": "urn:uuid:281aa9ae-f6ca-4bc5-8c9a-ff37c2dd6455",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 24697,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 214,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Should not verify VC with invalid base URL: expected Response { status: 200, statusText: 'OK', headers: Headers { 'content-length': '656', 'content-type': 'application/json; charset=utf-8', date: 'Sun, 25 Aug 2024 05:05:47 GMT', server: 'Python/3.12 aiohttp/3.10.5', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Should not verify VC with invalid base URL: expected Response { status: 200, statusText: 'OK', headers: Headers { 'content-length': '656', 'content-type': 'application/json; charset=utf-8', date: 'Sun, 25 Aug 2024 05:05:47 GMT', server: 'Python/3.12 aiohttp/3.10.5', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationFail (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:49:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/suites/verify.js:36:7)"
              }
            },
            {
              "type": "test",
              "title": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.';\n      const credential = credentials.clone('invalidBaseUrl');\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'Should not verify VC with invalid base URL'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "swiqezcFB6dtWqhV3uWcI",
              "ctx": null,
              "_testId": "urn:uuid:87ae1e8c-a50e-4e9e-8e45-7db5443e30df",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25389,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 67,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.';\n      const credential = credentials.clone('invalidBaseUrl');\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'Should not verify VC with invalid base URL'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "2zCwF9FvWV8qCrcXrzxF_",
              "ctx": null,
              "_testId": "urn:uuid:34dc853b-00bd-4592-b8df-bf284de43556",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25824,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 50,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.';\n      const credential = credentials.clone('invalidBaseUrl');\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'Should not verify VC with invalid base URL'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "xJ1HqI8WZKSmgcssIJqfk",
              "ctx": null,
              "_testId": "urn:uuid:e53e1b0b-48bb-49cb-91b9-f9ee635dae61",
              "cell": {
                "columnId": "bovine",
                "rowId": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 26263,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 3761,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "Conforming processors MUST produce errors when non-conforming documents are consumed.",
          "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.",
          "cells": [
            {
              "type": "test",
              "title": "Conforming processors MUST produce errors when non-conforming documents are consumed.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.';\n      // this could be read as testing all non-confirming docs or just one\n      // for this test only one doc is tested as it should throw for any\n      // non-conforming doc\n      await verificationFail({\n        credential: credentials.clone('invalidProofType'),\n        verifier,\n        reason: 'Should not verify VC with invalid \"proof.type\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "w8u6n8rndrGCijhw47HFj",
              "ctx": null,
              "_testId": "urn:uuid:a5612fdb-fa57-4eb4-a893-60b6b1c86088",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "Conforming processors MUST produce errors when non-conforming documents are consumed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 14873,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 112,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Conforming processors MUST produce errors when non-conforming documents are consumed.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.';\n      // this could be read as testing all non-confirming docs or just one\n      // for this test only one doc is tested as it should throw for any\n      // non-conforming doc\n      await verificationFail({\n        credential: credentials.clone('invalidProofType'),\n        verifier,\n        reason: 'Should not verify VC with invalid \"proof.type\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "8rdRVXR4E8x6YlOvPxg3j",
              "ctx": null,
              "_testId": "urn:uuid:6e087a7c-3fa9-4e99-8003-a7d64adc72d5",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "Conforming processors MUST produce errors when non-conforming documents are consumed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19888,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 56,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "Conforming processors MUST produce errors when non-conforming documents are consumed.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.';\n      // this could be read as testing all non-confirming docs or just one\n      // for this test only one doc is tested as it should throw for any\n      // non-conforming doc\n      await verificationFail({\n        credential: credentials.clone('invalidProofType'),\n        verifier,\n        reason: 'Should not verify VC with invalid \"proof.type\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "OiFDHlu4HFPeLRuGUCXFQ",
              "ctx": null,
              "_testId": "urn:uuid:2289b4e2-3f3b-4e96-a5ac-b132aa7c9ea2",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "Conforming processors MUST produce errors when non-conforming documents are consumed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 23322,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 73,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "Conforming processors MUST produce errors when non-conforming documents are consumed.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.';\n      // this could be read as testing all non-confirming docs or just one\n      // for this test only one doc is tested as it should throw for any\n      // non-conforming doc\n      await verificationFail({\n        credential: credentials.clone('invalidProofType'),\n        verifier,\n        reason: 'Should not verify VC with invalid \"proof.type\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "BaNOT3cGHQFd5wB8TMK03",
              "ctx": null,
              "_testId": "urn:uuid:f7174229-5e37-4614-a848-329a0c6434c4",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "Conforming processors MUST produce errors when non-conforming documents are consumed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 24912,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 25,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Conforming processors MUST produce errors when non-conforming documents are consumed.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.';\n      // this could be read as testing all non-confirming docs or just one\n      // for this test only one doc is tested as it should throw for any\n      // non-conforming doc\n      await verificationFail({\n        credential: credentials.clone('invalidProofType'),\n        verifier,\n        reason: 'Should not verify VC with invalid \"proof.type\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "swiqezcFB6dtWqhV3uWcI",
              "ctx": null,
              "_testId": "urn:uuid:0b570b05-2c24-45b1-b5b4-b70671bd5ccc",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "Conforming processors MUST produce errors when non-conforming documents are consumed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25457,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 21,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Conforming processors MUST produce errors when non-conforming documents are consumed.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.';\n      // this could be read as testing all non-confirming docs or just one\n      // for this test only one doc is tested as it should throw for any\n      // non-conforming doc\n      await verificationFail({\n        credential: credentials.clone('invalidProofType'),\n        verifier,\n        reason: 'Should not verify VC with invalid \"proof.type\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "2zCwF9FvWV8qCrcXrzxF_",
              "ctx": null,
              "_testId": "urn:uuid:399bbca8-a0a9-4ee6-9492-0ae32227679d",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "Conforming processors MUST produce errors when non-conforming documents are consumed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25875,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 20,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Conforming processors MUST produce errors when non-conforming documents are consumed.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.';\n      // this could be read as testing all non-confirming docs or just one\n      // for this test only one doc is tested as it should throw for any\n      // non-conforming doc\n      await verificationFail({\n        credential: credentials.clone('invalidProofType'),\n        verifier,\n        reason: 'Should not verify VC with invalid \"proof.type\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "xJ1HqI8WZKSmgcssIJqfk",
              "ctx": null,
              "_testId": "urn:uuid:0774a5dd-fed4-405e-a36f-51beb47acaee",
              "cell": {
                "columnId": "bovine",
                "rowId": "Conforming processors MUST produce errors when non-conforming documents are consumed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30025,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 95,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If the \"proof\" field is missing, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "w8u6n8rndrGCijhw47HFj",
              "ctx": null,
              "_testId": "urn:uuid:34a903cd-17f7-41fa-823a-b2f48f8bdc98",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If the \"proof\" field is missing, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 14985,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 96,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "8rdRVXR4E8x6YlOvPxg3j",
              "ctx": null,
              "_testId": "urn:uuid:124e0012-6ce2-427e-a6f8-fc0dd659a3cc",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the \"proof\" field is missing, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19945,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 57,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "OiFDHlu4HFPeLRuGUCXFQ",
              "ctx": null,
              "_testId": "urn:uuid:ae5c9db5-8f96-49ac-8de8-7538770d04d6",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If the \"proof\" field is missing, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 23395,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 71,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "BaNOT3cGHQFd5wB8TMK03",
              "ctx": null,
              "_testId": "urn:uuid:5d7af1b2-1f65-41ec-8fdd-0d87d9210648",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "If the \"proof\" field is missing, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 24937,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 24,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "swiqezcFB6dtWqhV3uWcI",
              "ctx": null,
              "_testId": "urn:uuid:a7b40d00-24bc-424a-8513-0d08acf9725d",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If the \"proof\" field is missing, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25477,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 17,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "2zCwF9FvWV8qCrcXrzxF_",
              "ctx": null,
              "_testId": "urn:uuid:80e0e90c-dc49-4e94-b0d8-fd2dccefcdbb",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "If the \"proof\" field is missing, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25895,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 21,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "xJ1HqI8WZKSmgcssIJqfk",
              "ctx": null,
              "_testId": "urn:uuid:af5c209a-3ef8-49bc-a861-716f061620c1",
              "cell": {
                "columnId": "bovine",
                "rowId": "If the \"proof\" field is missing, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30120,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 93,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If the \"proof\" field is invalid, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n        const credential = credentials.clone('issuedVc');\n        credential.proof = null;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "w8u6n8rndrGCijhw47HFj",
              "ctx": null,
              "_testId": "urn:uuid:dcead741-75d5-4e9b-9595-12171c08a2cd",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If the \"proof\" field is invalid, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 15081,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 101,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n        const credential = credentials.clone('issuedVc');\n        credential.proof = null;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "8rdRVXR4E8x6YlOvPxg3j",
              "ctx": null,
              "_testId": "urn:uuid:1eafd623-d81e-4668-b2a6-3eea90a3644c",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the \"proof\" field is invalid, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20001,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 43,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n        const credential = credentials.clone('issuedVc');\n        credential.proof = null;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "OiFDHlu4HFPeLRuGUCXFQ",
              "ctx": null,
              "_testId": "urn:uuid:273d3f1a-7bd2-4d48-a668-72228ea3f24d",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If the \"proof\" field is invalid, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 23466,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 72,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n        const credential = credentials.clone('issuedVc');\n        credential.proof = null;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "BaNOT3cGHQFd5wB8TMK03",
              "ctx": null,
              "_testId": "urn:uuid:9384f4c3-4fdb-4a9a-b20c-bd79a6e72644",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "If the \"proof\" field is invalid, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 24962,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 25,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n        const credential = credentials.clone('issuedVc');\n        credential.proof = null;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "swiqezcFB6dtWqhV3uWcI",
              "ctx": null,
              "_testId": "urn:uuid:106fb42f-8080-416e-adb3-7beddd31ccbe",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If the \"proof\" field is invalid, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25494,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 19,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n        const credential = credentials.clone('issuedVc');\n        credential.proof = null;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "2zCwF9FvWV8qCrcXrzxF_",
              "ctx": null,
              "_testId": "urn:uuid:42726045-2c9a-4584-8464-79c911e096e7",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "If the \"proof\" field is invalid, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25917,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 18,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n        const credential = credentials.clone('issuedVc');\n        credential.proof = null;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "xJ1HqI8WZKSmgcssIJqfk",
              "ctx": null,
              "_testId": "urn:uuid:db1db75d-47c5-431f-ad35-8a5bce10faa2",
              "cell": {
                "columnId": "bovine",
                "rowId": "If the \"proof\" field is invalid, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30213,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 93,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If the \"proof.type\" field is missing, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof.type\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof.type;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "w8u6n8rndrGCijhw47HFj",
              "ctx": null,
              "_testId": "urn:uuid:0ee54fbd-11b8-41c3-b403-4eb806ce7645",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If the \"proof.type\" field is missing, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 15182,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 93,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof.type;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "8rdRVXR4E8x6YlOvPxg3j",
              "ctx": null,
              "_testId": "urn:uuid:ec4bb4bf-ce33-4155-a044-b92462e391b7",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the \"proof.type\" field is missing, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20044,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 41,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof.type;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "OiFDHlu4HFPeLRuGUCXFQ",
              "ctx": null,
              "_testId": "urn:uuid:c34de821-b6cf-425b-9629-42d3561da0f0",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If the \"proof.type\" field is missing, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 23538,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 71,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof.type;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "BaNOT3cGHQFd5wB8TMK03",
              "ctx": null,
              "_testId": "urn:uuid:95ef8a9b-b760-4fd0-a5a1-e45fa8015e29",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "If the \"proof.type\" field is missing, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 24986,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 25,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof.type;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "swiqezcFB6dtWqhV3uWcI",
              "ctx": null,
              "_testId": "urn:uuid:5653fbbc-d9fd-467e-bd2d-012d2f711949",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If the \"proof.type\" field is missing, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25513,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 20,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof.type;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "2zCwF9FvWV8qCrcXrzxF_",
              "ctx": null,
              "_testId": "urn:uuid:d8ed5a1f-270c-4362-915b-12b62c299fa8",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "If the \"proof.type\" field is missing, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25935,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 20,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is missing, an error MUST be raised.",
              "body": "async function() {\n        const credential = credentials.clone('issuedVc');\n        delete credential.proof.type;\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "xJ1HqI8WZKSmgcssIJqfk",
              "ctx": null,
              "_testId": "urn:uuid:b5aed38c-29ba-4203-a313-550d8aaeb3fc",
              "cell": {
                "columnId": "bovine",
                "rowId": "If the \"proof.type\" field is missing, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30306,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 95,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('invalidProofType');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "w8u6n8rndrGCijhw47HFj",
              "ctx": null,
              "_testId": "urn:uuid:6ca87b52-aa76-4881-8c85-ccc7a998e8b4",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 15276,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 98,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('invalidProofType');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "8rdRVXR4E8x6YlOvPxg3j",
              "ctx": null,
              "_testId": "urn:uuid:a7b19aa4-1d47-452b-b218-052d9e316796",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20086,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 40,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('invalidProofType');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "OiFDHlu4HFPeLRuGUCXFQ",
              "ctx": null,
              "_testId": "urn:uuid:886cd345-2e2f-4941-86b5-9841145609bc",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 23609,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 71,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('invalidProofType');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "BaNOT3cGHQFd5wB8TMK03",
              "ctx": null,
              "_testId": "urn:uuid:22724ca5-191d-4533-b9c7-da963cd3a53e",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25011,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 24,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('invalidProofType');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "swiqezcFB6dtWqhV3uWcI",
              "ctx": null,
              "_testId": "urn:uuid:178585f5-e4c4-4f5e-9fd8-4182ca2ab393",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25533,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 18,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('invalidProofType');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "2zCwF9FvWV8qCrcXrzxF_",
              "ctx": null,
              "_testId": "urn:uuid:8970b5d5-ceda-42ff-b2ff-7b82d5d199fe",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25955,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 21,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('invalidProofType');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "xJ1HqI8WZKSmgcssIJqfk",
              "ctx": null,
              "_testId": "urn:uuid:f7e59382-633d-4d25-8ea1-ce6b3c2a4dd9",
              "cell": {
                "columnId": "bovine",
                "rowId": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30402,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 98,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('noVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "w8u6n8rndrGCijhw47HFj",
              "ctx": null,
              "_testId": "urn:uuid:62b2ecd0-f3e3-44e3-aafb-8060b268146c",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 15375,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 98,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('noVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "8rdRVXR4E8x6YlOvPxg3j",
              "ctx": null,
              "_testId": "urn:uuid:d9da5c99-f2f9-49f4-8a62-b933f69c666c",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20126,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 620,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('noVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "OiFDHlu4HFPeLRuGUCXFQ",
              "ctx": null,
              "_testId": "urn:uuid:fbfe59ae-b722-48b5-8724-72dc263e19aa",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 23681,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 72,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('noVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "BaNOT3cGHQFd5wB8TMK03",
              "ctx": null,
              "_testId": "urn:uuid:d079aebc-02af-4223-8a5c-2c48e05df7d7",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25036,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 22,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('noVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "swiqezcFB6dtWqhV3uWcI",
              "ctx": null,
              "_testId": "urn:uuid:5b8102ff-8af9-4fe6-9639-4b35949e6681",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25551,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 19,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('noVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "2zCwF9FvWV8qCrcXrzxF_",
              "ctx": null,
              "_testId": "urn:uuid:10850254-632b-44ba-8b2e-8871512a98ea",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25977,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 23,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('noVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "xJ1HqI8WZKSmgcssIJqfk",
              "ctx": null,
              "_testId": "urn:uuid:f036d1e5-e2e6-4543-b8e9-a7995757ffe7",
              "cell": {
                "columnId": "bovine",
                "rowId": "If the \"proof.verificationMethod\" field is missing, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30500,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 92,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('invalidVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "w8u6n8rndrGCijhw47HFj",
              "ctx": null,
              "_testId": "urn:uuid:5870ff8a-45c2-4e89-8fde-ba7e2b480b6f",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 15473,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 112,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('invalidVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "8rdRVXR4E8x6YlOvPxg3j",
              "ctx": null,
              "_testId": "urn:uuid:6b36182a-7b37-4f56-a149-251edafb4cde",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20745,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 62,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('invalidVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "OiFDHlu4HFPeLRuGUCXFQ",
              "ctx": null,
              "_testId": "urn:uuid:622fe5ca-36f5-4080-92cb-bb8e28712b54",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 23752,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 71,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('invalidVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "BaNOT3cGHQFd5wB8TMK03",
              "ctx": null,
              "_testId": "urn:uuid:c677df97-e97e-488d-99b5-b0d99bf5666e",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25058,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 30,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('invalidVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "swiqezcFB6dtWqhV3uWcI",
              "ctx": null,
              "_testId": "urn:uuid:07e63097-df97-4a35-a411-6a8b6fae46c7",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25570,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 18,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('invalidVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "2zCwF9FvWV8qCrcXrzxF_",
              "ctx": null,
              "_testId": "urn:uuid:deca0c2e-d288-497b-b456-5c6e1bb5d6ea",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 26000,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 19,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('invalidVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "xJ1HqI8WZKSmgcssIJqfk",
              "ctx": null,
              "_testId": "urn:uuid:81b775e2-f27e-4805-a7f8-2b580546362a",
              "cell": {
                "columnId": "bovine",
                "rowId": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30593,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 93,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('noProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "w8u6n8rndrGCijhw47HFj",
              "ctx": null,
              "_testId": "urn:uuid:8ae778bb-94eb-44a3-84f1-1323558769ad",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 15585,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 92,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('noProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "8rdRVXR4E8x6YlOvPxg3j",
              "ctx": null,
              "_testId": "urn:uuid:e4a6abe7-789e-42b1-b2e1-eea15f35d7a0",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20807,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 44,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('noProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "OiFDHlu4HFPeLRuGUCXFQ",
              "ctx": null,
              "_testId": "urn:uuid:4d3a01e6-73bc-4602-9669-046f645d1b8e",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 23823,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 72,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('noProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "BaNOT3cGHQFd5wB8TMK03",
              "ctx": null,
              "_testId": "urn:uuid:dc24b26c-73d7-4b60-bd15-178d9debc38d",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25088,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 25,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('noProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "swiqezcFB6dtWqhV3uWcI",
              "ctx": null,
              "_testId": "urn:uuid:fc5619fd-3ac4-49b7-b025-580f2059e594",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25588,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 18,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('noProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "2zCwF9FvWV8qCrcXrzxF_",
              "ctx": null,
              "_testId": "urn:uuid:4393d5d8-4c61-4764-a686-9e9d78ed40fa",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 26019,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 19,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('noProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "xJ1HqI8WZKSmgcssIJqfk",
              "ctx": null,
              "_testId": "urn:uuid:a6b0e550-14c2-403f-8ece-dd1d27f6b1ba",
              "cell": {
                "columnId": "bovine",
                "rowId": "If the \"proof.proofPurpose\" field is missing, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30687,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 93,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('invalidProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "w8u6n8rndrGCijhw47HFj",
              "ctx": null,
              "_testId": "urn:uuid:ccc06c8f-abc6-41a1-b35a-08e42ba14181",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 15677,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 205,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('invalidProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "8rdRVXR4E8x6YlOvPxg3j",
              "ctx": null,
              "_testId": "urn:uuid:ebc14bff-2353-4429-bf70-8610fed8a366",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20851,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 37,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('invalidProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "OiFDHlu4HFPeLRuGUCXFQ",
              "ctx": null,
              "_testId": "urn:uuid:7b0b3545-1278-4b8b-a0cf-b8ac89fd0a6e",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 23895,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 77,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('invalidProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "BaNOT3cGHQFd5wB8TMK03",
              "ctx": null,
              "_testId": "urn:uuid:0e1b9294-1847-4ab2-b21e-95e21a47c799",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25113,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 30,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no result from verifier.: expected Response { status: 200, statusText: 'OK', headers: Headers { 'content-length': '633', 'content-type': 'application/json; charset=utf-8', date: 'Sun, 25 Aug 2024 05:05:47 GMT', server: 'Python/3.12 aiohttp/3.10.5', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no result from verifier.: expected Response { status: 200, statusText: 'OK', headers: Headers { 'content-length': '633', 'content-type': 'application/json; charset=utf-8', date: 'Sun, 25 Aug 2024 05:05:47 GMT', server: 'Python/3.12 aiohttp/3.10.5', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationFail (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:49:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/suites/verify.js:96:7)"
              }
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('invalidProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "swiqezcFB6dtWqhV3uWcI",
              "ctx": null,
              "_testId": "urn:uuid:4b8b9466-246d-4e23-83b6-91a3ded74eb4",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25607,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 30,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('invalidProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "2zCwF9FvWV8qCrcXrzxF_",
              "ctx": null,
              "_testId": "urn:uuid:f958f0a0-eb0b-4e04-b05b-4a2585b623d4",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 26038,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 24,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('invalidProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "xJ1HqI8WZKSmgcssIJqfk",
              "ctx": null,
              "_testId": "urn:uuid:bebd4edd-d1d5-4384-a917-fab618f890cd",
              "cell": {
                "columnId": "bovine",
                "rowId": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30780,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 97,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
          "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
          "cells": [
            {
              "type": "test",
              "title": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      // NOTE: expectedProofPurpose should be specified by verifiers internally\n      // it is very unlikely to be invalidProofPurpose\n      await verificationFail({\n        credential: credentials.clone('invalidProofPurpose'),\n        verifier,\n        reason: 'Verifier should reject VC with invalid proof purpose.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "w8u6n8rndrGCijhw47HFj",
              "ctx": null,
              "_testId": "urn:uuid:1420cc45-be07-4947-b1d8-3ed00d1ea513",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 15882,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 96,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      // NOTE: expectedProofPurpose should be specified by verifiers internally\n      // it is very unlikely to be invalidProofPurpose\n      await verificationFail({\n        credential: credentials.clone('invalidProofPurpose'),\n        verifier,\n        reason: 'Verifier should reject VC with invalid proof purpose.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "8rdRVXR4E8x6YlOvPxg3j",
              "ctx": null,
              "_testId": "urn:uuid:7538db6b-7971-4d5e-b5ea-ca60c3287fa5",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20889,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 41,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      // NOTE: expectedProofPurpose should be specified by verifiers internally\n      // it is very unlikely to be invalidProofPurpose\n      await verificationFail({\n        credential: credentials.clone('invalidProofPurpose'),\n        verifier,\n        reason: 'Verifier should reject VC with invalid proof purpose.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "OiFDHlu4HFPeLRuGUCXFQ",
              "ctx": null,
              "_testId": "urn:uuid:c35a9d8b-7049-4eb6-ad11-b37cc1a92569",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 23972,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 74,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      // NOTE: expectedProofPurpose should be specified by verifiers internally\n      // it is very unlikely to be invalidProofPurpose\n      await verificationFail({\n        credential: credentials.clone('invalidProofPurpose'),\n        verifier,\n        reason: 'Verifier should reject VC with invalid proof purpose.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "BaNOT3cGHQFd5wB8TMK03",
              "ctx": null,
              "_testId": "urn:uuid:b9f3a4ea-d43f-4c3c-a533-043a895ff5d5",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25144,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 43,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Verifier should reject VC with invalid proof purpose.: expected Response { status: 200, statusText: 'OK', headers: Headers { 'content-length': '633', 'content-type': 'application/json; charset=utf-8', date: 'Sun, 25 Aug 2024 05:05:47 GMT', server: 'Python/3.12 aiohttp/3.10.5', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Verifier should reject VC with invalid proof purpose.: expected Response { status: 200, statusText: 'OK', headers: Headers { 'content-length': '633', 'content-type': 'application/json; charset=utf-8', date: 'Sun, 25 Aug 2024 05:05:47 GMT', server: 'Python/3.12 aiohttp/3.10.5', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationFail (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:49:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/suites/verify.js:104:7)"
              }
            },
            {
              "type": "test",
              "title": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      // NOTE: expectedProofPurpose should be specified by verifiers internally\n      // it is very unlikely to be invalidProofPurpose\n      await verificationFail({\n        credential: credentials.clone('invalidProofPurpose'),\n        verifier,\n        reason: 'Verifier should reject VC with invalid proof purpose.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "swiqezcFB6dtWqhV3uWcI",
              "ctx": null,
              "_testId": "urn:uuid:9e144191-bc48-4cda-af5a-38fd9ab7edb1",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25638,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 17,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      // NOTE: expectedProofPurpose should be specified by verifiers internally\n      // it is very unlikely to be invalidProofPurpose\n      await verificationFail({\n        credential: credentials.clone('invalidProofPurpose'),\n        verifier,\n        reason: 'Verifier should reject VC with invalid proof purpose.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "2zCwF9FvWV8qCrcXrzxF_",
              "ctx": null,
              "_testId": "urn:uuid:191be3ec-afb0-412f-b74c-6ad9506ed57e",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 26062,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 21,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      // NOTE: expectedProofPurpose should be specified by verifiers internally\n      // it is very unlikely to be invalidProofPurpose\n      await verificationFail({\n        credential: credentials.clone('invalidProofPurpose'),\n        verifier,\n        reason: 'Verifier should reject VC with invalid proof purpose.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "xJ1HqI8WZKSmgcssIJqfk",
              "ctx": null,
              "_testId": "urn:uuid:26db5dd3-267a-4cad-86bc-072c87adc762",
              "cell": {
                "columnId": "bovine",
                "rowId": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30876,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 96,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
          "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.",
          "cells": [
            {
              "type": "test",
              "title": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.';\n        await proofValueTests;\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "w8u6n8rndrGCijhw47HFj",
              "ctx": null,
              "_testId": "urn:uuid:fe7a6d5b-089c-4e1d-a75e-8f24473da55c",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "The proofValue property MUST be used, as specified in 2.1 Proofs."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 15979,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.';\n        await proofValueTests;\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "8rdRVXR4E8x6YlOvPxg3j",
              "ctx": null,
              "_testId": "urn:uuid:0a8e9439-5424-4fd3-9121-533d9af50f21",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The proofValue property MUST be used, as specified in 2.1 Proofs."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20929,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.';\n        await proofValueTests;\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "OiFDHlu4HFPeLRuGUCXFQ",
              "ctx": null,
              "_testId": "urn:uuid:0cd786e1-b7ec-4923-ba40-b07ca711c23e",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The proofValue property MUST be used, as specified in 2.1 Proofs."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 24046,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.';\n        await proofValueTests;\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "BaNOT3cGHQFd5wB8TMK03",
              "ctx": null,
              "_testId": "urn:uuid:a2833efb-d9dd-4b32-92e4-5fa86f1bf4e9",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "The proofValue property MUST be used, as specified in 2.1 Proofs."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25188,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.';\n        await proofValueTests;\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "swiqezcFB6dtWqhV3uWcI",
              "ctx": null,
              "_testId": "urn:uuid:ccc3681c-33f7-457b-a727-e34c40ca18c3",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The proofValue property MUST be used, as specified in 2.1 Proofs."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25655,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.';\n        await proofValueTests;\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "2zCwF9FvWV8qCrcXrzxF_",
              "ctx": null,
              "_testId": "urn:uuid:7598ab6a-4467-4cda-9819-4b4c8da0ea1d",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "The proofValue property MUST be used, as specified in 2.1 Proofs."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 26084,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.';\n        await proofValueTests;\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "xJ1HqI8WZKSmgcssIJqfk",
              "ctx": null,
              "_testId": "urn:uuid:b1b34fd4-250e-40d6-bb2a-5313bedbd32b",
              "cell": {
                "columnId": "bovine",
                "rowId": "The proofValue property MUST be used, as specified in 2.1 Proofs."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30972,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 4597,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification.",
          "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof",
          "cells": [
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof';\n      await proofValueTests;\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "w8u6n8rndrGCijhw47HFj",
              "ctx": null,
              "_testId": "urn:uuid:80f49de8-2f11-435e-82bf-2a15516e36af",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 15979,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof';\n      await proofValueTests;\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "8rdRVXR4E8x6YlOvPxg3j",
              "ctx": null,
              "_testId": "urn:uuid:fd6056c5-756d-40d8-a074-43c7cd75cde9",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20929,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof';\n      await proofValueTests;\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "OiFDHlu4HFPeLRuGUCXFQ",
              "ctx": null,
              "_testId": "urn:uuid:adc962f8-ab77-4e79-a0ef-78517937cc7d",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 24047,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof';\n      await proofValueTests;\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "BaNOT3cGHQFd5wB8TMK03",
              "ctx": null,
              "_testId": "urn:uuid:ca02a949-d458-4bb8-a686-5bd7b46636eb",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25188,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof';\n      await proofValueTests;\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "swiqezcFB6dtWqhV3uWcI",
              "ctx": null,
              "_testId": "urn:uuid:46ae36a7-4574-4d2d-9a78-e8c398ea1e6e",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25656,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof';\n      await proofValueTests;\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "2zCwF9FvWV8qCrcXrzxF_",
              "ctx": null,
              "_testId": "urn:uuid:c0af8bee-1a65-4fc6-bf1e-61beac33fa93",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 26084,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof';\n      await proofValueTests;\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "xJ1HqI8WZKSmgcssIJqfk",
              "ctx": null,
              "_testId": "urn:uuid:1fcb59b9-799d-4c6a-ab3b-093d93a86442",
              "cell": {
                "columnId": "bovine",
                "rowId": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 35570,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
          "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
          "cells": [
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      await verificationFail({\n        credential: credentials.clone('undefinedTerm'),\n        verifier,\n        reason: 'Should fail to verify VC when data is dropped by JSON-LD'\n      });\n      const undefinedTerm = credentials.clone('issuedVc');\n      undefinedTerm.credentialSubject.undefinedTerm = 'IfDroppedWillVerify';\n      await verificationFail({\n        credential: undefinedTerm,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined term is added ' +\n          'after issuance.'\n      });\n      const undefinedType = credentials.clone('issuedVc');\n      undefinedType.type.push('UndefinedType');\n      await verificationFail({\n        credential: undefinedType,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined type is added ' +\n          'after issuance.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "w8u6n8rndrGCijhw47HFj",
              "ctx": null,
              "_testId": "urn:uuid:6a628f1c-2816-48f0-a96e-80f2c1c178e1",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 15979,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 299,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Should fail to verify VC if an undefined term is added after issuance.: expected Response { status: 200, statusText: 'OK', headers: Headers { 'content-type': 'application/json', vary: 'Accept-Encoding', 'content-encoding': 'gzip', 'x-cloud-trace-context': 'f371963b40abf742327d4a8cee203510', date: 'Sun, 25 Aug 2024 05:05:38 GMT', server: 'Google Frontend', 'cache-control': 'private', 'transfer-encoding': 'chunked', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Should fail to verify VC if an undefined term is added after issuance.: expected Response { status: 200, statusText: 'OK', headers: Headers { 'content-type': 'application/json', vary: 'Accept-Encoding', 'content-encoding': 'gzip', 'x-cloud-trace-context': 'f371963b40abf742327d4a8cee203510', date: 'Sun, 25 Aug 2024 05:05:38 GMT', server: 'Google Frontend', 'cache-control': 'private', 'transfer-encoding': 'chunked', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationFail (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:49:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/suites/verify.js:137:7)"
              }
            },
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      await verificationFail({\n        credential: credentials.clone('undefinedTerm'),\n        verifier,\n        reason: 'Should fail to verify VC when data is dropped by JSON-LD'\n      });\n      const undefinedTerm = credentials.clone('issuedVc');\n      undefinedTerm.credentialSubject.undefinedTerm = 'IfDroppedWillVerify';\n      await verificationFail({\n        credential: undefinedTerm,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined term is added ' +\n          'after issuance.'\n      });\n      const undefinedType = credentials.clone('issuedVc');\n      undefinedType.type.push('UndefinedType');\n      await verificationFail({\n        credential: undefinedType,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined type is added ' +\n          'after issuance.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "8rdRVXR4E8x6YlOvPxg3j",
              "ctx": null,
              "_testId": "urn:uuid:5e4e4f95-03c7-4801-95a7-1eeb33518469",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20929,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 884,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      await verificationFail({\n        credential: credentials.clone('undefinedTerm'),\n        verifier,\n        reason: 'Should fail to verify VC when data is dropped by JSON-LD'\n      });\n      const undefinedTerm = credentials.clone('issuedVc');\n      undefinedTerm.credentialSubject.undefinedTerm = 'IfDroppedWillVerify';\n      await verificationFail({\n        credential: undefinedTerm,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined term is added ' +\n          'after issuance.'\n      });\n      const undefinedType = credentials.clone('issuedVc');\n      undefinedType.type.push('UndefinedType');\n      await verificationFail({\n        credential: undefinedType,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined type is added ' +\n          'after issuance.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "OiFDHlu4HFPeLRuGUCXFQ",
              "ctx": null,
              "_testId": "urn:uuid:1e776538-293c-426d-81c0-406d3a4f398f",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 24047,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 218,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      await verificationFail({\n        credential: credentials.clone('undefinedTerm'),\n        verifier,\n        reason: 'Should fail to verify VC when data is dropped by JSON-LD'\n      });\n      const undefinedTerm = credentials.clone('issuedVc');\n      undefinedTerm.credentialSubject.undefinedTerm = 'IfDroppedWillVerify';\n      await verificationFail({\n        credential: undefinedTerm,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined term is added ' +\n          'after issuance.'\n      });\n      const undefinedType = credentials.clone('issuedVc');\n      undefinedType.type.push('UndefinedType');\n      await verificationFail({\n        credential: undefinedType,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined type is added ' +\n          'after issuance.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "BaNOT3cGHQFd5wB8TMK03",
              "ctx": null,
              "_testId": "urn:uuid:e259963a-bd92-4696-8cbf-576171eb29e6",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25188,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 32,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Should fail to verify VC when data is dropped by JSON-LD: expected Response { status: 200, statusText: 'OK', headers: Headers { 'content-length': '667', 'content-type': 'application/json; charset=utf-8', date: 'Sun, 25 Aug 2024 05:05:47 GMT', server: 'Python/3.12 aiohttp/3.10.5', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Should fail to verify VC when data is dropped by JSON-LD: expected Response { status: 200, statusText: 'OK', headers: Headers { 'content-length': '667', 'content-type': 'application/json; charset=utf-8', date: 'Sun, 25 Aug 2024 05:05:47 GMT', server: 'Python/3.12 aiohttp/3.10.5', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationFail (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:49:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/suites/verify.js:130:7)"
              }
            },
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      await verificationFail({\n        credential: credentials.clone('undefinedTerm'),\n        verifier,\n        reason: 'Should fail to verify VC when data is dropped by JSON-LD'\n      });\n      const undefinedTerm = credentials.clone('issuedVc');\n      undefinedTerm.credentialSubject.undefinedTerm = 'IfDroppedWillVerify';\n      await verificationFail({\n        credential: undefinedTerm,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined term is added ' +\n          'after issuance.'\n      });\n      const undefinedType = credentials.clone('issuedVc');\n      undefinedType.type.push('UndefinedType');\n      await verificationFail({\n        credential: undefinedType,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined type is added ' +\n          'after issuance.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "swiqezcFB6dtWqhV3uWcI",
              "ctx": null,
              "_testId": "urn:uuid:e7db27e2-7d9c-4bff-9b48-ca621e59edf6",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25656,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 53,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      await verificationFail({\n        credential: credentials.clone('undefinedTerm'),\n        verifier,\n        reason: 'Should fail to verify VC when data is dropped by JSON-LD'\n      });\n      const undefinedTerm = credentials.clone('issuedVc');\n      undefinedTerm.credentialSubject.undefinedTerm = 'IfDroppedWillVerify';\n      await verificationFail({\n        credential: undefinedTerm,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined term is added ' +\n          'after issuance.'\n      });\n      const undefinedType = credentials.clone('issuedVc');\n      undefinedType.type.push('UndefinedType');\n      await verificationFail({\n        credential: undefinedType,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined type is added ' +\n          'after issuance.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "2zCwF9FvWV8qCrcXrzxF_",
              "ctx": null,
              "_testId": "urn:uuid:1449a18b-d883-4bac-9ff5-6437bd2e74c8",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 26084,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 54,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      await verificationFail({\n        credential: credentials.clone('undefinedTerm'),\n        verifier,\n        reason: 'Should fail to verify VC when data is dropped by JSON-LD'\n      });\n      const undefinedTerm = credentials.clone('issuedVc');\n      undefinedTerm.credentialSubject.undefinedTerm = 'IfDroppedWillVerify';\n      await verificationFail({\n        credential: undefinedTerm,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined term is added ' +\n          'after issuance.'\n      });\n      const undefinedType = credentials.clone('issuedVc');\n      undefinedType.type.push('UndefinedType');\n      await verificationFail({\n        credential: undefinedType,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined type is added ' +\n          'after issuance.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "xJ1HqI8WZKSmgcssIJqfk",
              "ctx": null,
              "_testId": "urn:uuid:b71b95d3-29a7-47b4-9a77-630aaf09b168",
              "cell": {
                "columnId": "bovine",
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 35570,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 9793,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Should fail to verify VC if an undefined term is added after issuance.: expected Response { status: 200, statusText: 'OK', headers: Headers { server: 'nginx/1.18.0 (Ubuntu)', date: 'Sun, 25 Aug 2024 05:06:07 GMT', 'content-type': 'text/html; charset=utf-8', 'content-length': '0', connection: 'keep-alive', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: null, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Should fail to verify VC if an undefined term is added after issuance.: expected Response { status: 200, statusText: 'OK', headers: Headers { server: 'nginx/1.18.0 (Ubuntu)', date: 'Sun, 25 Aug 2024 05:06:07 GMT', 'content-type': 'text/html; charset=utf-8', 'content-length': '0', connection: 'keep-alive', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: null, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationFail (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:49:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/suites/verify.js:137:7)"
              }
            }
          ]
        },
        {
          "id": "The date and time the proof was created is OPTIONAL and, if included, MUST be specified as an [XMLSCHEMA11-2] dateTimeStamp string, either in Universal Coordinated Time (UTC), denoted by a Z at the end of the value, or with a time zone offset relative to UTC.",
          "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=MUST%20be%20specified%20as%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%2C%20either%20in%20Universal%20Coordinated%20Time%20(UTC)%2C%20denoted%20by%20a%20Z%20at%20the%20end%20of%20the%20value%2C%20or%20with%20a%20time%20zone%20offset%20relative%20to%20UTC",
          "cells": [
            {
              "type": "test",
              "title": "The date and time the proof was created is OPTIONAL and, if included, MUST be specified as an [XMLSCHEMA11-2] dateTimeStamp string, either in Universal Coordinated Time (UTC), denoted by a Z at the end of the value, or with a time zone offset relative to UTC.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=MUST%20be%20specified%20as%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%2C%20either%20in%20Universal%20Coordinated%20Time%20(UTC)%2C%20denoted%20by%20a%20Z%20at%20the%20end%20of%20the%20value%2C%20or%20with%20a%20time%20zone%20offset%20relative%20to%20UTC';\n        const credential = credentials.clone('invalidCreated');\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "w8u6n8rndrGCijhw47HFj",
              "ctx": null,
              "_testId": "urn:uuid:bfa80f47-6c69-4b99-b832-fdd21b850c3c",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "The date and time the proof was created is OPTIONAL and, if included, MUST be specified as an [XMLSCHEMA11-2] dateTimeStamp string, either in Universal Coordinated Time (UTC), denoted by a Z at the end of the value, or with a time zone offset relative to UTC."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=MUST%20be%20specified%20as%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%2C%20either%20in%20Universal%20Coordinated%20Time%20(UTC)%2C%20denoted%20by%20a%20Z%20at%20the%20end%20of%20the%20value%2C%20or%20with%20a%20time%20zone%20offset%20relative%20to%20UTC",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16279,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 96,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The date and time the proof was created is OPTIONAL and, if included, MUST be specified as an [XMLSCHEMA11-2] dateTimeStamp string, either in Universal Coordinated Time (UTC), denoted by a Z at the end of the value, or with a time zone offset relative to UTC.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=MUST%20be%20specified%20as%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%2C%20either%20in%20Universal%20Coordinated%20Time%20(UTC)%2C%20denoted%20by%20a%20Z%20at%20the%20end%20of%20the%20value%2C%20or%20with%20a%20time%20zone%20offset%20relative%20to%20UTC';\n        const credential = credentials.clone('invalidCreated');\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "8rdRVXR4E8x6YlOvPxg3j",
              "ctx": null,
              "_testId": "urn:uuid:b1f63ef4-ae32-401b-a6b0-f6a9785c3cf0",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The date and time the proof was created is OPTIONAL and, if included, MUST be specified as an [XMLSCHEMA11-2] dateTimeStamp string, either in Universal Coordinated Time (UTC), denoted by a Z at the end of the value, or with a time zone offset relative to UTC."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=MUST%20be%20specified%20as%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%2C%20either%20in%20Universal%20Coordinated%20Time%20(UTC)%2C%20denoted%20by%20a%20Z%20at%20the%20end%20of%20the%20value%2C%20or%20with%20a%20time%20zone%20offset%20relative%20to%20UTC",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 21814,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 556,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no result from verifier.: expected Response { status: 200, statusText: 'OK', headers: Headers { 'cache-control': 'no-cache, no-store, must-revalidate', pragma: 'no-cache', expires: '0', vary: 'X-HTTP-Method-Override, Accept-Encoding', 'access-control-allow-origin': '*', 'content-type': 'application/json; charset=utf-8', etag: 'W/\"3a8-mOQWaO6dvCqdK4vKycIyfppfGTc\"', 'x-cloud-trace-context': '1f385f9bcffd06b299263ad4e117dd05', date: 'Sun, 25 Aug 2024 05:05:44 GMT', server: 'Google Frontend', 'content-length': '936', via: '1.1 google', 'alt-svc': 'h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no result from verifier.: expected Response { status: 200, statusText: 'OK', headers: Headers { 'cache-control': 'no-cache, no-store, must-revalidate', pragma: 'no-cache', expires: '0', vary: 'X-HTTP-Method-Override, Accept-Encoding', 'access-control-allow-origin': '*', 'content-type': 'application/json; charset=utf-8', etag: 'W/\"3a8-mOQWaO6dvCqdK4vKycIyfppfGTc\"', 'x-cloud-trace-context': '1f385f9bcffd06b299263ad4e117dd05', date: 'Sun, 25 Aug 2024 05:05:44 GMT', server: 'Google Frontend', 'content-length': '936', via: '1.1 google', 'alt-svc': 'h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationFail (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:49:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/suites/verify.js:160:9)"
              }
            },
            {
              "type": "test",
              "title": "The date and time the proof was created is OPTIONAL and, if included, MUST be specified as an [XMLSCHEMA11-2] dateTimeStamp string, either in Universal Coordinated Time (UTC), denoted by a Z at the end of the value, or with a time zone offset relative to UTC.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=MUST%20be%20specified%20as%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%2C%20either%20in%20Universal%20Coordinated%20Time%20(UTC)%2C%20denoted%20by%20a%20Z%20at%20the%20end%20of%20the%20value%2C%20or%20with%20a%20time%20zone%20offset%20relative%20to%20UTC';\n        const credential = credentials.clone('invalidCreated');\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "OiFDHlu4HFPeLRuGUCXFQ",
              "ctx": null,
              "_testId": "urn:uuid:22e60d55-4dda-4b6d-8eec-ec8f56ea32c2",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The date and time the proof was created is OPTIONAL and, if included, MUST be specified as an [XMLSCHEMA11-2] dateTimeStamp string, either in Universal Coordinated Time (UTC), denoted by a Z at the end of the value, or with a time zone offset relative to UTC."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=MUST%20be%20specified%20as%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%2C%20either%20in%20Universal%20Coordinated%20Time%20(UTC)%2C%20denoted%20by%20a%20Z%20at%20the%20end%20of%20the%20value%2C%20or%20with%20a%20time%20zone%20offset%20relative%20to%20UTC",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 24265,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 71,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "The date and time the proof was created is OPTIONAL and, if included, MUST be specified as an [XMLSCHEMA11-2] dateTimeStamp string, either in Universal Coordinated Time (UTC), denoted by a Z at the end of the value, or with a time zone offset relative to UTC.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=MUST%20be%20specified%20as%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%2C%20either%20in%20Universal%20Coordinated%20Time%20(UTC)%2C%20denoted%20by%20a%20Z%20at%20the%20end%20of%20the%20value%2C%20or%20with%20a%20time%20zone%20offset%20relative%20to%20UTC';\n        const credential = credentials.clone('invalidCreated');\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "BaNOT3cGHQFd5wB8TMK03",
              "ctx": null,
              "_testId": "urn:uuid:d732d2bd-4d7c-4fb8-a6bd-67f130b737ae",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "The date and time the proof was created is OPTIONAL and, if included, MUST be specified as an [XMLSCHEMA11-2] dateTimeStamp string, either in Universal Coordinated Time (UTC), denoted by a Z at the end of the value, or with a time zone offset relative to UTC."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=MUST%20be%20specified%20as%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%2C%20either%20in%20Universal%20Coordinated%20Time%20(UTC)%2C%20denoted%20by%20a%20Z%20at%20the%20end%20of%20the%20value%2C%20or%20with%20a%20time%20zone%20offset%20relative%20to%20UTC",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25221,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 25,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The date and time the proof was created is OPTIONAL and, if included, MUST be specified as an [XMLSCHEMA11-2] dateTimeStamp string, either in Universal Coordinated Time (UTC), denoted by a Z at the end of the value, or with a time zone offset relative to UTC.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=MUST%20be%20specified%20as%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%2C%20either%20in%20Universal%20Coordinated%20Time%20(UTC)%2C%20denoted%20by%20a%20Z%20at%20the%20end%20of%20the%20value%2C%20or%20with%20a%20time%20zone%20offset%20relative%20to%20UTC';\n        const credential = credentials.clone('invalidCreated');\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "swiqezcFB6dtWqhV3uWcI",
              "ctx": null,
              "_testId": "urn:uuid:57d513f4-b12c-455b-9449-a710ec1977b9",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The date and time the proof was created is OPTIONAL and, if included, MUST be specified as an [XMLSCHEMA11-2] dateTimeStamp string, either in Universal Coordinated Time (UTC), denoted by a Z at the end of the value, or with a time zone offset relative to UTC."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=MUST%20be%20specified%20as%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%2C%20either%20in%20Universal%20Coordinated%20Time%20(UTC)%2C%20denoted%20by%20a%20Z%20at%20the%20end%20of%20the%20value%2C%20or%20with%20a%20time%20zone%20offset%20relative%20to%20UTC",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25709,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 17,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The date and time the proof was created is OPTIONAL and, if included, MUST be specified as an [XMLSCHEMA11-2] dateTimeStamp string, either in Universal Coordinated Time (UTC), denoted by a Z at the end of the value, or with a time zone offset relative to UTC.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=MUST%20be%20specified%20as%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%2C%20either%20in%20Universal%20Coordinated%20Time%20(UTC)%2C%20denoted%20by%20a%20Z%20at%20the%20end%20of%20the%20value%2C%20or%20with%20a%20time%20zone%20offset%20relative%20to%20UTC';\n        const credential = credentials.clone('invalidCreated');\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "2zCwF9FvWV8qCrcXrzxF_",
              "ctx": null,
              "_testId": "urn:uuid:9f101a8f-a167-4625-9448-8f3bf59a3806",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "The date and time the proof was created is OPTIONAL and, if included, MUST be specified as an [XMLSCHEMA11-2] dateTimeStamp string, either in Universal Coordinated Time (UTC), denoted by a Z at the end of the value, or with a time zone offset relative to UTC."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=MUST%20be%20specified%20as%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%2C%20either%20in%20Universal%20Coordinated%20Time%20(UTC)%2C%20denoted%20by%20a%20Z%20at%20the%20end%20of%20the%20value%2C%20or%20with%20a%20time%20zone%20offset%20relative%20to%20UTC",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 26139,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 21,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The date and time the proof was created is OPTIONAL and, if included, MUST be specified as an [XMLSCHEMA11-2] dateTimeStamp string, either in Universal Coordinated Time (UTC), denoted by a Z at the end of the value, or with a time zone offset relative to UTC.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=MUST%20be%20specified%20as%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%2C%20either%20in%20Universal%20Coordinated%20Time%20(UTC)%2C%20denoted%20by%20a%20Z%20at%20the%20end%20of%20the%20value%2C%20or%20with%20a%20time%20zone%20offset%20relative%20to%20UTC';\n        const credential = credentials.clone('invalidCreated');\n        await verificationFail({credential, verifier});\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "xJ1HqI8WZKSmgcssIJqfk",
              "ctx": null,
              "_testId": "urn:uuid:c2d25186-159d-4d56-8c4f-8502d2b02063",
              "cell": {
                "columnId": "bovine",
                "rowId": "The date and time the proof was created is OPTIONAL and, if included, MUST be specified as an [XMLSCHEMA11-2] dateTimeStamp string, either in Universal Coordinated Time (UTC), denoted by a Z at the end of the value, or with a time zone offset relative to UTC."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=MUST%20be%20specified%20as%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%2C%20either%20in%20Universal%20Coordinated%20Time%20(UTC)%2C%20denoted%20by%20a%20Z%20at%20the%20end%20of%20the%20value%2C%20or%20with%20a%20time%20zone%20offset%20relative%20to%20UTC",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 45364,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 10007,
              "state": "failed",
              "err": {}
            }
          ]
        },
        {
          "id": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
          "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
          "cells": [
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n      const credential = credentials.clone('invalidCryptosuite');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "w8u6n8rndrGCijhw47HFj",
              "ctx": null,
              "_testId": "urn:uuid:4d382d91-d36f-430c-9f3c-b55458a4d138",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16375,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 100,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n      const credential = credentials.clone('invalidCryptosuite');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "8rdRVXR4E8x6YlOvPxg3j",
              "ctx": null,
              "_testId": "urn:uuid:8a4058c4-4982-47e4-9b45-05a39e54d882",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 22370,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 45,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n      const credential = credentials.clone('invalidCryptosuite');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "OiFDHlu4HFPeLRuGUCXFQ",
              "ctx": null,
              "_testId": "urn:uuid:5f4b92f1-38ba-40fe-a78c-0dc7fffd29b9",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 24336,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 71,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n      const credential = credentials.clone('invalidCryptosuite');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "BaNOT3cGHQFd5wB8TMK03",
              "ctx": null,
              "_testId": "urn:uuid:1b896e7f-910a-4c71-9dfd-c4f00d5d495a",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25247,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 29,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n      const credential = credentials.clone('invalidCryptosuite');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "swiqezcFB6dtWqhV3uWcI",
              "ctx": null,
              "_testId": "urn:uuid:a23c4110-7001-449a-a24c-913696f404d1",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25727,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 18,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n      const credential = credentials.clone('invalidCryptosuite');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "2zCwF9FvWV8qCrcXrzxF_",
              "ctx": null,
              "_testId": "urn:uuid:c01a8243-098f-4475-817b-fb4c4acf4203",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 26160,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 19,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n      const credential = credentials.clone('invalidCryptosuite');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "xJ1HqI8WZKSmgcssIJqfk",
              "ctx": null,
              "_testId": "urn:uuid:7df02d49-1e74-46c6-8b6b-967c34150620",
              "cell": {
                "columnId": "bovine",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 55373,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 4185,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If options has a non-null domain item, it MUST be equal to proof.domain or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
          "link": "https://w3c.github.io/vc-data-integrity/#verify-proof:~:text=If%20options%20has%20a%20non%2Dnull%20domain%20item%2C%20it%20MUST%20be%20equal%20to%20proof.domain%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
          "cells": [
            {
              "type": "test",
              "title": "If options has a non-null domain item, it MUST be equal to proof.domain or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#verify-proof:~:text=If%20options%20has%20a%20non%2Dnull%20domain%20item%2C%20it%20MUST%20be%20equal%20to%20proof.domain%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n        const credential = credentials.clone('invalidDomain');\n        await verificationFail({\n          credential, verifier, options: {\n            domain: 'domain.example'\n          }\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "w8u6n8rndrGCijhw47HFj",
              "ctx": null,
              "_testId": "urn:uuid:0ea47598-3623-4aa7-a38b-bad2afed1ee7",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If options has a non-null domain item, it MUST be equal to proof.domain or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#verify-proof:~:text=If%20options%20has%20a%20non%2Dnull%20domain%20item%2C%20it%20MUST%20be%20equal%20to%20proof.domain%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16474,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 98,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If options has a non-null domain item, it MUST be equal to proof.domain or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#verify-proof:~:text=If%20options%20has%20a%20non%2Dnull%20domain%20item%2C%20it%20MUST%20be%20equal%20to%20proof.domain%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n        const credential = credentials.clone('invalidDomain');\n        await verificationFail({\n          credential, verifier, options: {\n            domain: 'domain.example'\n          }\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "8rdRVXR4E8x6YlOvPxg3j",
              "ctx": null,
              "_testId": "urn:uuid:fef1e055-6944-4420-9a74-62e3fbbafe4e",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If options has a non-null domain item, it MUST be equal to proof.domain or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#verify-proof:~:text=If%20options%20has%20a%20non%2Dnull%20domain%20item%2C%20it%20MUST%20be%20equal%20to%20proof.domain%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 22415,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 38,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If options has a non-null domain item, it MUST be equal to proof.domain or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#verify-proof:~:text=If%20options%20has%20a%20non%2Dnull%20domain%20item%2C%20it%20MUST%20be%20equal%20to%20proof.domain%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n        const credential = credentials.clone('invalidDomain');\n        await verificationFail({\n          credential, verifier, options: {\n            domain: 'domain.example'\n          }\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "OiFDHlu4HFPeLRuGUCXFQ",
              "ctx": null,
              "_testId": "urn:uuid:9d3ee6a2-ac6c-4656-9a02-6b19833cdc78",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If options has a non-null domain item, it MUST be equal to proof.domain or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#verify-proof:~:text=If%20options%20has%20a%20non%2Dnull%20domain%20item%2C%20it%20MUST%20be%20equal%20to%20proof.domain%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 24407,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 72,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If options has a non-null domain item, it MUST be equal to proof.domain or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#verify-proof:~:text=If%20options%20has%20a%20non%2Dnull%20domain%20item%2C%20it%20MUST%20be%20equal%20to%20proof.domain%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n        const credential = credentials.clone('invalidDomain');\n        await verificationFail({\n          credential, verifier, options: {\n            domain: 'domain.example'\n          }\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "BaNOT3cGHQFd5wB8TMK03",
              "ctx": null,
              "_testId": "urn:uuid:f7400262-9ca3-4523-86b9-a91f58c285ac",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "If options has a non-null domain item, it MUST be equal to proof.domain or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#verify-proof:~:text=If%20options%20has%20a%20non%2Dnull%20domain%20item%2C%20it%20MUST%20be%20equal%20to%20proof.domain%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25276,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 24,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If options has a non-null domain item, it MUST be equal to proof.domain or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#verify-proof:~:text=If%20options%20has%20a%20non%2Dnull%20domain%20item%2C%20it%20MUST%20be%20equal%20to%20proof.domain%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n        const credential = credentials.clone('invalidDomain');\n        await verificationFail({\n          credential, verifier, options: {\n            domain: 'domain.example'\n          }\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "swiqezcFB6dtWqhV3uWcI",
              "ctx": null,
              "_testId": "urn:uuid:662a8e76-430e-4684-9fea-44514f786985",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If options has a non-null domain item, it MUST be equal to proof.domain or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#verify-proof:~:text=If%20options%20has%20a%20non%2Dnull%20domain%20item%2C%20it%20MUST%20be%20equal%20to%20proof.domain%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25745,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 24,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If options has a non-null domain item, it MUST be equal to proof.domain or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#verify-proof:~:text=If%20options%20has%20a%20non%2Dnull%20domain%20item%2C%20it%20MUST%20be%20equal%20to%20proof.domain%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n        const credential = credentials.clone('invalidDomain');\n        await verificationFail({\n          credential, verifier, options: {\n            domain: 'domain.example'\n          }\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "2zCwF9FvWV8qCrcXrzxF_",
              "ctx": null,
              "_testId": "urn:uuid:7d0d62be-15fa-4e01-81fa-b041a28db2b5",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "If options has a non-null domain item, it MUST be equal to proof.domain or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#verify-proof:~:text=If%20options%20has%20a%20non%2Dnull%20domain%20item%2C%20it%20MUST%20be%20equal%20to%20proof.domain%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 26179,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 22,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If options has a non-null domain item, it MUST be equal to proof.domain or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#verify-proof:~:text=If%20options%20has%20a%20non%2Dnull%20domain%20item%2C%20it%20MUST%20be%20equal%20to%20proof.domain%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n        const credential = credentials.clone('invalidDomain');\n        await verificationFail({\n          credential, verifier, options: {\n            domain: 'domain.example'\n          }\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "xJ1HqI8WZKSmgcssIJqfk",
              "ctx": null,
              "_testId": "urn:uuid:20a81bdc-ffa8-44e7-8a32-8c863ecc1c30",
              "cell": {
                "columnId": "bovine",
                "rowId": "If options has a non-null domain item, it MUST be equal to proof.domain or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#verify-proof:~:text=If%20options%20has%20a%20non%2Dnull%20domain%20item%2C%20it%20MUST%20be%20equal%20to%20proof.domain%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 59558,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 96,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no result from verifier.: expected Response { status: 200, statusText: 'OK', headers: Headers { server: 'nginx/1.18.0 (Ubuntu)', date: 'Sun, 25 Aug 2024 05:06:21 GMT', 'content-type': 'text/html; charset=utf-8', 'content-length': '0', connection: 'keep-alive', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: null, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no result from verifier.: expected Response { status: 200, statusText: 'OK', headers: Headers { server: 'nginx/1.18.0 (Ubuntu)', date: 'Sun, 25 Aug 2024 05:06:21 GMT', 'content-type': 'text/html; charset=utf-8', 'content-length': '0', connection: 'keep-alive', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: null, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationFail (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:49:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/suites/verify.js:178:9)"
              }
            }
          ]
        },
        {
          "id": "If options has a non-null challenge item, it MUST be equal to proof.challenge or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
          "link": "https://w3c.github.io/vc-data-integrity/#add-proof:~:text=If%20options%20has%20a%20non%2Dnull%20challenge%20item%2C%20it%20MUST%20be%20equal%20to%20proof.challenge%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
          "cells": [
            {
              "type": "test",
              "title": "If options has a non-null challenge item, it MUST be equal to proof.challenge or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#add-proof:~:text=If%20options%20has%20a%20non%2Dnull%20challenge%20item%2C%20it%20MUST%20be%20equal%20to%20proof.challenge%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n        const credential = credentials.clone('invalidChallenge');\n        await verificationFail({\n          credential, verifier, options: {\n            domain: 'domain.example',\n            challenge: '1235abcd6789'\n          }\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "w8u6n8rndrGCijhw47HFj",
              "ctx": null,
              "_testId": "urn:uuid:57a031d9-8e9c-4cc0-ac4f-77a7f2d6bace",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If options has a non-null challenge item, it MUST be equal to proof.challenge or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#add-proof:~:text=If%20options%20has%20a%20non%2Dnull%20challenge%20item%2C%20it%20MUST%20be%20equal%20to%20proof.challenge%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16573,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 106,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If options has a non-null challenge item, it MUST be equal to proof.challenge or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#add-proof:~:text=If%20options%20has%20a%20non%2Dnull%20challenge%20item%2C%20it%20MUST%20be%20equal%20to%20proof.challenge%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n        const credential = credentials.clone('invalidChallenge');\n        await verificationFail({\n          credential, verifier, options: {\n            domain: 'domain.example',\n            challenge: '1235abcd6789'\n          }\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "8rdRVXR4E8x6YlOvPxg3j",
              "ctx": null,
              "_testId": "urn:uuid:86c06671-6af8-4377-befe-cbdd942dd67f",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If options has a non-null challenge item, it MUST be equal to proof.challenge or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#add-proof:~:text=If%20options%20has%20a%20non%2Dnull%20challenge%20item%2C%20it%20MUST%20be%20equal%20to%20proof.challenge%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 22452,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 38,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If options has a non-null challenge item, it MUST be equal to proof.challenge or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#add-proof:~:text=If%20options%20has%20a%20non%2Dnull%20challenge%20item%2C%20it%20MUST%20be%20equal%20to%20proof.challenge%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n        const credential = credentials.clone('invalidChallenge');\n        await verificationFail({\n          credential, verifier, options: {\n            domain: 'domain.example',\n            challenge: '1235abcd6789'\n          }\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "OiFDHlu4HFPeLRuGUCXFQ",
              "ctx": null,
              "_testId": "urn:uuid:f6f6fa3f-b131-429f-be94-60c2cb4f41b5",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If options has a non-null challenge item, it MUST be equal to proof.challenge or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#add-proof:~:text=If%20options%20has%20a%20non%2Dnull%20challenge%20item%2C%20it%20MUST%20be%20equal%20to%20proof.challenge%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 24479,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 72,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If options has a non-null challenge item, it MUST be equal to proof.challenge or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#add-proof:~:text=If%20options%20has%20a%20non%2Dnull%20challenge%20item%2C%20it%20MUST%20be%20equal%20to%20proof.challenge%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n        const credential = credentials.clone('invalidChallenge');\n        await verificationFail({\n          credential, verifier, options: {\n            domain: 'domain.example',\n            challenge: '1235abcd6789'\n          }\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "BaNOT3cGHQFd5wB8TMK03",
              "ctx": null,
              "_testId": "urn:uuid:75e174b3-5682-4b60-a7f6-9fa8b68dbe86",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "If options has a non-null challenge item, it MUST be equal to proof.challenge or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#add-proof:~:text=If%20options%20has%20a%20non%2Dnull%20challenge%20item%2C%20it%20MUST%20be%20equal%20to%20proof.challenge%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25300,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 24,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If options has a non-null challenge item, it MUST be equal to proof.challenge or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#add-proof:~:text=If%20options%20has%20a%20non%2Dnull%20challenge%20item%2C%20it%20MUST%20be%20equal%20to%20proof.challenge%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n        const credential = credentials.clone('invalidChallenge');\n        await verificationFail({\n          credential, verifier, options: {\n            domain: 'domain.example',\n            challenge: '1235abcd6789'\n          }\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "swiqezcFB6dtWqhV3uWcI",
              "ctx": null,
              "_testId": "urn:uuid:d71f14d0-3e49-4044-85cb-ea416a9d647b",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If options has a non-null challenge item, it MUST be equal to proof.challenge or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#add-proof:~:text=If%20options%20has%20a%20non%2Dnull%20challenge%20item%2C%20it%20MUST%20be%20equal%20to%20proof.challenge%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25769,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 18,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If options has a non-null challenge item, it MUST be equal to proof.challenge or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#add-proof:~:text=If%20options%20has%20a%20non%2Dnull%20challenge%20item%2C%20it%20MUST%20be%20equal%20to%20proof.challenge%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n        const credential = credentials.clone('invalidChallenge');\n        await verificationFail({\n          credential, verifier, options: {\n            domain: 'domain.example',\n            challenge: '1235abcd6789'\n          }\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "2zCwF9FvWV8qCrcXrzxF_",
              "ctx": null,
              "_testId": "urn:uuid:5bb2ccfb-e904-4f02-9699-e75d5115ddeb",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "If options has a non-null challenge item, it MUST be equal to proof.challenge or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#add-proof:~:text=If%20options%20has%20a%20non%2Dnull%20challenge%20item%2C%20it%20MUST%20be%20equal%20to%20proof.challenge%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 26201,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 20,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If options has a non-null challenge item, it MUST be equal to proof.challenge or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#add-proof:~:text=If%20options%20has%20a%20non%2Dnull%20challenge%20item%2C%20it%20MUST%20be%20equal%20to%20proof.challenge%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n        const credential = credentials.clone('invalidChallenge');\n        await verificationFail({\n          credential, verifier, options: {\n            domain: 'domain.example',\n            challenge: '1235abcd6789'\n          }\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "xJ1HqI8WZKSmgcssIJqfk",
              "ctx": null,
              "_testId": "urn:uuid:3b839de2-113f-4080-ba1e-132e63dd88b0",
              "cell": {
                "columnId": "bovine",
                "rowId": "If options has a non-null challenge item, it MUST be equal to proof.challenge or an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#add-proof:~:text=If%20options%20has%20a%20non%2Dnull%20challenge%20item%2C%20it%20MUST%20be%20equal%20to%20proof.challenge%20or%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 59655,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 95,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no result from verifier.: expected Response { status: 200, statusText: 'OK', headers: Headers { server: 'nginx/1.18.0 (Ubuntu)', date: 'Sun, 25 Aug 2024 05:06:21 GMT', 'content-type': 'text/html; charset=utf-8', 'content-length': '0', connection: 'keep-alive', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: null, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no result from verifier.: expected Response { status: 200, statusText: 'OK', headers: Headers { server: 'nginx/1.18.0 (Ubuntu)', date: 'Sun, 25 Aug 2024 05:06:21 GMT', 'content-type': 'text/html; charset=utf-8', 'content-length': '0', connection: 'keep-alive', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: null, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationFail (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:49:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/suites/verify.js:189:9)"
              }
            }
          ]
        },
        {
          "id": "(created) A conforming processor MAY chose to consume time values that were incorrectly serialized without an offset.",
          "link": "https://www.w3.org/TR/vc-data-integrity/#proofs:~:text=be%20a%20string.-,created,-The%20date%20and",
          "cells": [
            {
              "type": "test",
              "title": "(created) A conforming processor MAY chose to consume time values that were incorrectly serialized without an offset.",
              "body": "async function() {\n        this.test.link = 'https://www.w3.org/TR/vc-data-integrity/#proofs:~:text=be%20a%20string.-,created,-The%20date%20and';\n        await verificationFail({\n          credential: credentials.clone('noOffsetCreated'),\n          verifier\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "w8u6n8rndrGCijhw47HFj",
              "ctx": null,
              "_testId": "urn:uuid:e449b731-5bfc-4dad-994e-6d6ca090c825",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "(created) A conforming processor MAY chose to consume time values that were incorrectly serialized without an offset."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://www.w3.org/TR/vc-data-integrity/#proofs:~:text=be%20a%20string.-,created,-The%20date%20and",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16679,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 101,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "(created) A conforming processor MAY chose to consume time values that were incorrectly serialized without an offset.",
              "body": "async function() {\n        this.test.link = 'https://www.w3.org/TR/vc-data-integrity/#proofs:~:text=be%20a%20string.-,created,-The%20date%20and';\n        await verificationFail({\n          credential: credentials.clone('noOffsetCreated'),\n          verifier\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "8rdRVXR4E8x6YlOvPxg3j",
              "ctx": null,
              "_testId": "urn:uuid:a7bd0959-cc16-48b9-a37f-d39042eb5df1",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "(created) A conforming processor MAY chose to consume time values that were incorrectly serialized without an offset."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://www.w3.org/TR/vc-data-integrity/#proofs:~:text=be%20a%20string.-,created,-The%20date%20and",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 22490,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 42,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no result from verifier.: expected Response { status: 200, statusText: 'OK', headers: Headers { 'cache-control': 'no-cache, no-store, must-revalidate', pragma: 'no-cache', expires: '0', vary: 'X-HTTP-Method-Override, Accept-Encoding', 'access-control-allow-origin': '*', 'content-type': 'application/json; charset=utf-8', etag: 'W/\"3b0-CO3WJMMN7TmQenq31TvmD7HXr+s\"', 'x-cloud-trace-context': '9633d7c481d3b8b41b44ad853d8a8b1b', date: 'Sun, 25 Aug 2024 05:05:44 GMT', server: 'Google Frontend', 'content-length': '944', via: '1.1 google', 'alt-svc': 'h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no result from verifier.: expected Response { status: 200, statusText: 'OK', headers: Headers { 'cache-control': 'no-cache, no-store, must-revalidate', pragma: 'no-cache', expires: '0', vary: 'X-HTTP-Method-Override, Accept-Encoding', 'access-control-allow-origin': '*', 'content-type': 'application/json; charset=utf-8', etag: 'W/\"3b0-CO3WJMMN7TmQenq31TvmD7HXr+s\"', 'x-cloud-trace-context': '9633d7c481d3b8b41b44ad853d8a8b1b', date: 'Sun, 25 Aug 2024 05:05:44 GMT', server: 'Google Frontend', 'content-length': '944', via: '1.1 google', 'alt-svc': 'h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationFail (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:49:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/suites/verify.js:201:9)"
              }
            },
            {
              "type": "test",
              "title": "(created) A conforming processor MAY chose to consume time values that were incorrectly serialized without an offset.",
              "body": "async function() {\n        this.test.link = 'https://www.w3.org/TR/vc-data-integrity/#proofs:~:text=be%20a%20string.-,created,-The%20date%20and';\n        await verificationFail({\n          credential: credentials.clone('noOffsetCreated'),\n          verifier\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "OiFDHlu4HFPeLRuGUCXFQ",
              "ctx": null,
              "_testId": "urn:uuid:5bc1f8f4-3c5d-4ba8-82ae-b90cf7afda1f",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "(created) A conforming processor MAY chose to consume time values that were incorrectly serialized without an offset."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://www.w3.org/TR/vc-data-integrity/#proofs:~:text=be%20a%20string.-,created,-The%20date%20and",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 24552,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 71,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "(created) A conforming processor MAY chose to consume time values that were incorrectly serialized without an offset.",
              "body": "async function() {\n        this.test.link = 'https://www.w3.org/TR/vc-data-integrity/#proofs:~:text=be%20a%20string.-,created,-The%20date%20and';\n        await verificationFail({\n          credential: credentials.clone('noOffsetCreated'),\n          verifier\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "BaNOT3cGHQFd5wB8TMK03",
              "ctx": null,
              "_testId": "urn:uuid:700d92be-0960-4339-b7ee-07dcbf9a8c7c",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "(created) A conforming processor MAY chose to consume time values that were incorrectly serialized without an offset."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://www.w3.org/TR/vc-data-integrity/#proofs:~:text=be%20a%20string.-,created,-The%20date%20and",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25324,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 30,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no result from verifier.: expected Response { status: 200, statusText: 'OK', headers: Headers { 'content-length': '465', 'content-type': 'application/json; charset=utf-8', date: 'Sun, 25 Aug 2024 05:05:47 GMT', server: 'Python/3.12 aiohttp/3.10.5', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no result from verifier.: expected Response { status: 200, statusText: 'OK', headers: Headers { 'content-length': '465', 'content-type': 'application/json; charset=utf-8', date: 'Sun, 25 Aug 2024 05:05:47 GMT', server: 'Python/3.12 aiohttp/3.10.5', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationFail (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:49:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/suites/verify.js:201:9)"
              }
            },
            {
              "type": "test",
              "title": "(created) A conforming processor MAY chose to consume time values that were incorrectly serialized without an offset.",
              "body": "async function() {\n        this.test.link = 'https://www.w3.org/TR/vc-data-integrity/#proofs:~:text=be%20a%20string.-,created,-The%20date%20and';\n        await verificationFail({\n          credential: credentials.clone('noOffsetCreated'),\n          verifier\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "swiqezcFB6dtWqhV3uWcI",
              "ctx": null,
              "_testId": "urn:uuid:9c86eaf1-3537-4f98-a25c-4dcb2d3c0157",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "(created) A conforming processor MAY chose to consume time values that were incorrectly serialized without an offset."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://www.w3.org/TR/vc-data-integrity/#proofs:~:text=be%20a%20string.-,created,-The%20date%20and",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25788,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 16,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(created) A conforming processor MAY chose to consume time values that were incorrectly serialized without an offset.",
              "body": "async function() {\n        this.test.link = 'https://www.w3.org/TR/vc-data-integrity/#proofs:~:text=be%20a%20string.-,created,-The%20date%20and';\n        await verificationFail({\n          credential: credentials.clone('noOffsetCreated'),\n          verifier\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "2zCwF9FvWV8qCrcXrzxF_",
              "ctx": null,
              "_testId": "urn:uuid:79770328-fb8a-4467-821c-0e2e52a05530",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "(created) A conforming processor MAY chose to consume time values that were incorrectly serialized without an offset."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://www.w3.org/TR/vc-data-integrity/#proofs:~:text=be%20a%20string.-,created,-The%20date%20and",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 26222,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 21,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(created) A conforming processor MAY chose to consume time values that were incorrectly serialized without an offset.",
              "body": "async function() {\n        this.test.link = 'https://www.w3.org/TR/vc-data-integrity/#proofs:~:text=be%20a%20string.-,created,-The%20date%20and';\n        await verificationFail({\n          credential: credentials.clone('noOffsetCreated'),\n          verifier\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "xJ1HqI8WZKSmgcssIJqfk",
              "ctx": null,
              "_testId": "urn:uuid:b45b37b6-5dd1-4ad3-ad3b-d7e0e9032686",
              "cell": {
                "columnId": "bovine",
                "rowId": "(created) A conforming processor MAY chose to consume time values that were incorrectly serialized without an offset."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://www.w3.org/TR/vc-data-integrity/#proofs:~:text=be%20a%20string.-,created,-The%20date%20and",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 59751,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 93,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "(expires) A conforming processor MAY chose to consume time values that were incorrectly serialized without an offset.",
          "link": "https://www.w3.org/TR/vc-data-integrity/#proofs:~:text=interpreted%20as%20UTC.-,expires,-The%20expires%20property",
          "cells": [
            {
              "type": "test",
              "title": "(expires) A conforming processor MAY chose to consume time values that were incorrectly serialized without an offset.",
              "body": "async function() {\n        this.test.link = 'https://www.w3.org/TR/vc-data-integrity/#proofs:~:text=interpreted%20as%20UTC.-,expires,-The%20expires%20property';\n        await verificationFail({\n          credential: credentials.clone('noOffsetExpires'),\n          verifier\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "w8u6n8rndrGCijhw47HFj",
              "ctx": null,
              "_testId": "urn:uuid:51f4347d-c888-4608-99de-0b3a4b6a7619",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "(expires) A conforming processor MAY chose to consume time values that were incorrectly serialized without an offset."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://www.w3.org/TR/vc-data-integrity/#proofs:~:text=interpreted%20as%20UTC.-,expires,-The%20expires%20property",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16780,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 195,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no result from verifier.: expected Response { status: 200, statusText: 'OK', headers: Headers { 'content-type': 'application/json', vary: 'Accept-Encoding', 'content-encoding': 'gzip', 'x-cloud-trace-context': 'e2cc51b7db103915076afdc385d3c56a', date: 'Sun, 25 Aug 2024 05:05:39 GMT', server: 'Google Frontend', 'cache-control': 'private', 'transfer-encoding': 'chunked', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no result from verifier.: expected Response { status: 200, statusText: 'OK', headers: Headers { 'content-type': 'application/json', vary: 'Accept-Encoding', 'content-encoding': 'gzip', 'x-cloud-trace-context': 'e2cc51b7db103915076afdc385d3c56a', date: 'Sun, 25 Aug 2024 05:05:39 GMT', server: 'Google Frontend', 'cache-control': 'private', 'transfer-encoding': 'chunked', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationFail (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:49:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/suites/verify.js:209:9)"
              }
            },
            {
              "type": "test",
              "title": "(expires) A conforming processor MAY chose to consume time values that were incorrectly serialized without an offset.",
              "body": "async function() {\n        this.test.link = 'https://www.w3.org/TR/vc-data-integrity/#proofs:~:text=interpreted%20as%20UTC.-,expires,-The%20expires%20property';\n        await verificationFail({\n          credential: credentials.clone('noOffsetExpires'),\n          verifier\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "8rdRVXR4E8x6YlOvPxg3j",
              "ctx": null,
              "_testId": "urn:uuid:e21c549f-4425-4172-969d-1ed9a9ed0fe6",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "(expires) A conforming processor MAY chose to consume time values that were incorrectly serialized without an offset."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://www.w3.org/TR/vc-data-integrity/#proofs:~:text=interpreted%20as%20UTC.-,expires,-The%20expires%20property",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 22532,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 546,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no result from verifier.: expected Response { status: 200, statusText: 'OK', headers: Headers { 'cache-control': 'no-cache, no-store, must-revalidate', pragma: 'no-cache', expires: '0', vary: 'X-HTTP-Method-Override, Accept-Encoding', 'access-control-allow-origin': '*', 'content-type': 'application/json; charset=utf-8', etag: 'W/\"3d1-f06hMm/Fi4+idcINxeZo/j7kzI4\"', 'x-cloud-trace-context': 'fee31e48390006797462419f4e4963bf', date: 'Sun, 25 Aug 2024 05:05:45 GMT', server: 'Google Frontend', 'content-length': '977', via: '1.1 google', 'alt-svc': 'h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no result from verifier.: expected Response { status: 200, statusText: 'OK', headers: Headers { 'cache-control': 'no-cache, no-store, must-revalidate', pragma: 'no-cache', expires: '0', vary: 'X-HTTP-Method-Override, Accept-Encoding', 'access-control-allow-origin': '*', 'content-type': 'application/json; charset=utf-8', etag: 'W/\"3d1-f06hMm/Fi4+idcINxeZo/j7kzI4\"', 'x-cloud-trace-context': 'fee31e48390006797462419f4e4963bf', date: 'Sun, 25 Aug 2024 05:05:45 GMT', server: 'Google Frontend', 'content-length': '977', via: '1.1 google', 'alt-svc': 'h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationFail (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:49:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/suites/verify.js:209:9)"
              }
            },
            {
              "type": "test",
              "title": "(expires) A conforming processor MAY chose to consume time values that were incorrectly serialized without an offset.",
              "body": "async function() {\n        this.test.link = 'https://www.w3.org/TR/vc-data-integrity/#proofs:~:text=interpreted%20as%20UTC.-,expires,-The%20expires%20property';\n        await verificationFail({\n          credential: credentials.clone('noOffsetExpires'),\n          verifier\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "OiFDHlu4HFPeLRuGUCXFQ",
              "ctx": null,
              "_testId": "urn:uuid:00d23000-edf3-463e-9ed4-8fe34950da71",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "(expires) A conforming processor MAY chose to consume time values that were incorrectly serialized without an offset."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://www.w3.org/TR/vc-data-integrity/#proofs:~:text=interpreted%20as%20UTC.-,expires,-The%20expires%20property",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 24624,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 71,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "(expires) A conforming processor MAY chose to consume time values that were incorrectly serialized without an offset.",
              "body": "async function() {\n        this.test.link = 'https://www.w3.org/TR/vc-data-integrity/#proofs:~:text=interpreted%20as%20UTC.-,expires,-The%20expires%20property';\n        await verificationFail({\n          credential: credentials.clone('noOffsetExpires'),\n          verifier\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "BaNOT3cGHQFd5wB8TMK03",
              "ctx": null,
              "_testId": "urn:uuid:918fccd3-a086-4216-8e38-93084f97c259",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "(expires) A conforming processor MAY chose to consume time values that were incorrectly serialized without an offset."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://www.w3.org/TR/vc-data-integrity/#proofs:~:text=interpreted%20as%20UTC.-,expires,-The%20expires%20property",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25355,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 31,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no result from verifier.: expected Response { status: 200, statusText: 'OK', headers: Headers { 'content-length': '465', 'content-type': 'application/json; charset=utf-8', date: 'Sun, 25 Aug 2024 05:05:47 GMT', server: 'Python/3.12 aiohttp/3.10.5', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no result from verifier.: expected Response { status: 200, statusText: 'OK', headers: Headers { 'content-length': '465', 'content-type': 'application/json; charset=utf-8', date: 'Sun, 25 Aug 2024 05:05:47 GMT', server: 'Python/3.12 aiohttp/3.10.5', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationFail (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:49:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/suites/verify.js:209:9)"
              }
            },
            {
              "type": "test",
              "title": "(expires) A conforming processor MAY chose to consume time values that were incorrectly serialized without an offset.",
              "body": "async function() {\n        this.test.link = 'https://www.w3.org/TR/vc-data-integrity/#proofs:~:text=interpreted%20as%20UTC.-,expires,-The%20expires%20property';\n        await verificationFail({\n          credential: credentials.clone('noOffsetExpires'),\n          verifier\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "swiqezcFB6dtWqhV3uWcI",
              "ctx": null,
              "_testId": "urn:uuid:bb92a75e-8983-4026-9dd5-a2b8e4a43ad4",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "(expires) A conforming processor MAY chose to consume time values that were incorrectly serialized without an offset."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://www.w3.org/TR/vc-data-integrity/#proofs:~:text=interpreted%20as%20UTC.-,expires,-The%20expires%20property",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25805,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 17,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(expires) A conforming processor MAY chose to consume time values that were incorrectly serialized without an offset.",
              "body": "async function() {\n        this.test.link = 'https://www.w3.org/TR/vc-data-integrity/#proofs:~:text=interpreted%20as%20UTC.-,expires,-The%20expires%20property';\n        await verificationFail({\n          credential: credentials.clone('noOffsetExpires'),\n          verifier\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "2zCwF9FvWV8qCrcXrzxF_",
              "ctx": null,
              "_testId": "urn:uuid:359d528d-811f-485a-be9f-8fe18c17d67c",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "(expires) A conforming processor MAY chose to consume time values that were incorrectly serialized without an offset."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://www.w3.org/TR/vc-data-integrity/#proofs:~:text=interpreted%20as%20UTC.-,expires,-The%20expires%20property",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 26243,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 18,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(expires) A conforming processor MAY chose to consume time values that were incorrectly serialized without an offset.",
              "body": "async function() {\n        this.test.link = 'https://www.w3.org/TR/vc-data-integrity/#proofs:~:text=interpreted%20as%20UTC.-,expires,-The%20expires%20property';\n        await verificationFail({\n          credential: credentials.clone('noOffsetExpires'),\n          verifier\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "xJ1HqI8WZKSmgcssIJqfk",
              "ctx": null,
              "_testId": "urn:uuid:e852698c-c7f7-4840-8649-35fb0dfaed9a",
              "cell": {
                "columnId": "bovine",
                "rowId": "(expires) A conforming processor MAY chose to consume time values that were incorrectly serialized without an offset."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://www.w3.org/TR/vc-data-integrity/#proofs:~:text=interpreted%20as%20UTC.-,expires,-The%20expires%20property",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 59844,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 92,
              "state": "passed",
              "speed": "slow"
            }
          ]
        }
      ]
    },
    {
      "title": "eddsa-rdfc-2022 (verifier)",
      "ctx": null,
      "suites": [
        {
          "title": "apicatalog.com",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "verifies a valid eddsa-rdfc-2022 proof.",
              "body": "async function() {\n            this.test.cell = {columnId, rowId: this.test.title};\n            const credential = credentials.clone('issuedVc');\n            await verificationSuccess({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/20-rdfc-verify.js",
              "parent": "K6AL_p6_WsKwAdib7zHja",
              "ctx": null,
              "_testId": "urn:uuid:e3bc68fa-b3d5-499b-a827-f34f83beb5f8",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "verifies a valid eddsa-rdfc-2022 proof."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 59939,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 232,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proofValue\" field, when decoded to raw bytes, is not 64 bytes in length if the associated public key is 32 bytes in length, or 114 bytes in length if the public key is 57 bytes in length, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const credential = credentials.clone('issuedVc');\n          const proofBytes = bs58Decode({id: credential.proof.proofValue});\n          const randomBytes = new Uint8Array(32).map(\n            () => Math.floor(Math.random() * 255));\n          credential.proof.proofValue = bs58Encode(\n            new Uint8Array([...proofBytes, ...randomBytes]));\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/20-rdfc-verify.js",
              "parent": "K6AL_p6_WsKwAdib7zHja",
              "ctx": null,
              "_testId": "urn:uuid:ec98ff74-a44b-4ef1-820b-c4ec23b0a3b5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If the \"proofValue\" field, when decoded to raw bytes, is not 64 bytes in length if the associated public key is 32 bytes in length, or 114 bytes in length if the public key is 57 bytes in length, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 60171,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 105,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "fails verification when credential is not canonicalized correctly.",
              "body": "async function() {\n            this.test.cell = {columnId, rowId: this.test.title};\n            const credential = credentials.clone('canonizeJcs');\n            await verificationFail({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/20-rdfc-verify.js",
              "parent": "K6AL_p6_WsKwAdib7zHja",
              "ctx": null,
              "_testId": "urn:uuid:9f389efc-eba5-4f48-a986-e7811ec7693a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "fails verification when credential is not canonicalized correctly."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 60276,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 106,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"eddsa-rdfc-2022\", an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const credential = credentials.clone('incorrectCryptosuite');\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/20-rdfc-verify.js",
              "parent": "K6AL_p6_WsKwAdib7zHja",
              "ctx": null,
              "_testId": "urn:uuid:f655537f-4745-4f4a-9068-ebab94bd013e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If the \"cryptosuite\" field is not the string \"eddsa-rdfc-2022\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 60382,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 98,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "8KjC4vFM3ngG7fsvVwrFn",
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/20-rdfc-verify.js",
          "_testId": "urn:uuid:4ea7c88f-ee43-4b2c-8269-7623ab3e65bd"
        },
        {
          "title": "Digital Bazaar",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "verifies a valid eddsa-rdfc-2022 proof.",
              "body": "async function() {\n            this.test.cell = {columnId, rowId: this.test.title};\n            const credential = credentials.clone('issuedVc');\n            await verificationSuccess({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/20-rdfc-verify.js",
              "parent": "WQLZkSU3OG5cZhejBIOXH",
              "ctx": null,
              "_testId": "urn:uuid:a3932245-84db-4fb6-8cc9-4049cedeffbd",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "verifies a valid eddsa-rdfc-2022 proof."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 60480,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 241,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proofValue\" field, when decoded to raw bytes, is not 64 bytes in length if the associated public key is 32 bytes in length, or 114 bytes in length if the public key is 57 bytes in length, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const credential = credentials.clone('issuedVc');\n          const proofBytes = bs58Decode({id: credential.proof.proofValue});\n          const randomBytes = new Uint8Array(32).map(\n            () => Math.floor(Math.random() * 255));\n          credential.proof.proofValue = bs58Encode(\n            new Uint8Array([...proofBytes, ...randomBytes]));\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/20-rdfc-verify.js",
              "parent": "WQLZkSU3OG5cZhejBIOXH",
              "ctx": null,
              "_testId": "urn:uuid:37f8ab3b-7a4c-4a21-9797-762d157b2473",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the \"proofValue\" field, when decoded to raw bytes, is not 64 bytes in length if the associated public key is 32 bytes in length, or 114 bytes in length if the public key is 57 bytes in length, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 60721,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 57,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "fails verification when credential is not canonicalized correctly.",
              "body": "async function() {\n            this.test.cell = {columnId, rowId: this.test.title};\n            const credential = credentials.clone('canonizeJcs');\n            await verificationFail({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/20-rdfc-verify.js",
              "parent": "WQLZkSU3OG5cZhejBIOXH",
              "ctx": null,
              "_testId": "urn:uuid:71b2dd0e-a4f2-44b8-9911-30344d494cb4",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "fails verification when credential is not canonicalized correctly."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 60778,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 44,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"eddsa-rdfc-2022\", an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const credential = credentials.clone('incorrectCryptosuite');\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/20-rdfc-verify.js",
              "parent": "WQLZkSU3OG5cZhejBIOXH",
              "ctx": null,
              "_testId": "urn:uuid:6336a7f7-ac47-403e-b173-139480dfa05f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the \"cryptosuite\" field is not the string \"eddsa-rdfc-2022\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 60822,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 30,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "8KjC4vFM3ngG7fsvVwrFn",
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/20-rdfc-verify.js",
          "_testId": "urn:uuid:2de67c9d-c9b8-4cb9-bfa8-8b0ff7643348"
        },
        {
          "title": "Grotto Networking",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "verifies a valid eddsa-rdfc-2022 proof.",
              "body": "async function() {\n            this.test.cell = {columnId, rowId: this.test.title};\n            const credential = credentials.clone('issuedVc');\n            await verificationSuccess({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/20-rdfc-verify.js",
              "parent": "uouzjYwJVAEZIXgVywjgt",
              "ctx": null,
              "_testId": "urn:uuid:33d3e76d-c96d-4cd0-8b3a-764644e8a643",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "verifies a valid eddsa-rdfc-2022 proof."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 60852,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 224,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proofValue\" field, when decoded to raw bytes, is not 64 bytes in length if the associated public key is 32 bytes in length, or 114 bytes in length if the public key is 57 bytes in length, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const credential = credentials.clone('issuedVc');\n          const proofBytes = bs58Decode({id: credential.proof.proofValue});\n          const randomBytes = new Uint8Array(32).map(\n            () => Math.floor(Math.random() * 255));\n          credential.proof.proofValue = bs58Encode(\n            new Uint8Array([...proofBytes, ...randomBytes]));\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/20-rdfc-verify.js",
              "parent": "uouzjYwJVAEZIXgVywjgt",
              "ctx": null,
              "_testId": "urn:uuid:aafef6f8-2789-44ab-9b2b-853d1cce0176",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If the \"proofValue\" field, when decoded to raw bytes, is not 64 bytes in length if the associated public key is 32 bytes in length, or 114 bytes in length if the public key is 57 bytes in length, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 61077,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 78,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "fails verification when credential is not canonicalized correctly.",
              "body": "async function() {\n            this.test.cell = {columnId, rowId: this.test.title};\n            const credential = credentials.clone('canonizeJcs');\n            await verificationFail({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/20-rdfc-verify.js",
              "parent": "uouzjYwJVAEZIXgVywjgt",
              "ctx": null,
              "_testId": "urn:uuid:e7d5f96d-976b-4e17-81d6-6e3c73d34c22",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "fails verification when credential is not canonicalized correctly."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 61156,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 87,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"eddsa-rdfc-2022\", an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const credential = credentials.clone('incorrectCryptosuite');\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/20-rdfc-verify.js",
              "parent": "uouzjYwJVAEZIXgVywjgt",
              "ctx": null,
              "_testId": "urn:uuid:850527d0-41de-422e-8e8a-baabf63f1184",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If the \"cryptosuite\" field is not the string \"eddsa-rdfc-2022\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 61242,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 71,
              "state": "passed",
              "speed": "medium"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "8KjC4vFM3ngG7fsvVwrFn",
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/20-rdfc-verify.js",
          "_testId": "urn:uuid:86e6750e-a842-4afb-a210-d197bf589ef1"
        },
        {
          "title": "OpSecId",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "verifies a valid eddsa-rdfc-2022 proof.",
              "body": "async function() {\n            this.test.cell = {columnId, rowId: this.test.title};\n            const credential = credentials.clone('issuedVc');\n            await verificationSuccess({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/20-rdfc-verify.js",
              "parent": "J4zcvDQrlgvQS_DPG9o9j",
              "ctx": null,
              "_testId": "urn:uuid:57d3053c-89d3-4ff7-a765-df23b149ca52",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "OpSecId",
                "rowId": "verifies a valid eddsa-rdfc-2022 proof."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 61313,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 73,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proofValue\" field, when decoded to raw bytes, is not 64 bytes in length if the associated public key is 32 bytes in length, or 114 bytes in length if the public key is 57 bytes in length, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const credential = credentials.clone('issuedVc');\n          const proofBytes = bs58Decode({id: credential.proof.proofValue});\n          const randomBytes = new Uint8Array(32).map(\n            () => Math.floor(Math.random() * 255));\n          credential.proof.proofValue = bs58Encode(\n            new Uint8Array([...proofBytes, ...randomBytes]));\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/20-rdfc-verify.js",
              "parent": "J4zcvDQrlgvQS_DPG9o9j",
              "ctx": null,
              "_testId": "urn:uuid:07176b88-7050-40ef-8a0d-e71230fcb5c4",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "OpSecId",
                "rowId": "If the \"proofValue\" field, when decoded to raw bytes, is not 64 bytes in length if the associated public key is 32 bytes in length, or 114 bytes in length if the public key is 57 bytes in length, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 61386,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 30,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no result from verifier.: expected Response { status: 200, statusText: 'OK', headers: Headers { 'content-length': '633', 'content-type': 'application/json; charset=utf-8', date: 'Sun, 25 Aug 2024 05:06:23 GMT', server: 'Python/3.12 aiohttp/3.10.5', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no result from verifier.: expected Response { status: 200, statusText: 'OK', headers: Headers { 'content-length': '633', 'content-type': 'application/json; charset=utf-8', date: 'Sun, 25 Aug 2024 05:06:23 GMT', server: 'Python/3.12 aiohttp/3.10.5', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationFail (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/assertions.js:49:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/20-rdfc-verify.js:57:11)"
              }
            },
            {
              "type": "test",
              "title": "fails verification when credential is not canonicalized correctly.",
              "body": "async function() {\n            this.test.cell = {columnId, rowId: this.test.title};\n            const credential = credentials.clone('canonizeJcs');\n            await verificationFail({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/20-rdfc-verify.js",
              "parent": "J4zcvDQrlgvQS_DPG9o9j",
              "ctx": null,
              "_testId": "urn:uuid:d099dfb2-0922-468a-ad4b-4d95a89c9160",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "OpSecId",
                "rowId": "fails verification when credential is not canonicalized correctly."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 61417,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 31,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no result from verifier.: expected Response { status: 200, statusText: 'OK', headers: Headers { 'content-length': '633', 'content-type': 'application/json; charset=utf-8', date: 'Sun, 25 Aug 2024 05:06:23 GMT', server: 'Python/3.12 aiohttp/3.10.5', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no result from verifier.: expected Response { status: 200, statusText: 'OK', headers: Headers { 'content-length': '633', 'content-type': 'application/json; charset=utf-8', date: 'Sun, 25 Aug 2024 05:06:23 GMT', server: 'Python/3.12 aiohttp/3.10.5', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationFail (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/assertions.js:49:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/20-rdfc-verify.js:68:13)"
              }
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"eddsa-rdfc-2022\", an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const credential = credentials.clone('incorrectCryptosuite');\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/20-rdfc-verify.js",
              "parent": "J4zcvDQrlgvQS_DPG9o9j",
              "ctx": null,
              "_testId": "urn:uuid:3a1821a5-09ef-4117-a80a-7545b5eb38ac",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "OpSecId",
                "rowId": "If the \"cryptosuite\" field is not the string \"eddsa-rdfc-2022\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 61447,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 22,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "8KjC4vFM3ngG7fsvVwrFn",
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/20-rdfc-verify.js",
          "_testId": "urn:uuid:b955b86a-72e6-40d8-9bc8-624ba0de94d6"
        },
        {
          "title": "SpruceID",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "verifies a valid eddsa-rdfc-2022 proof.",
              "body": "async function() {\n            this.test.cell = {columnId, rowId: this.test.title};\n            const credential = credentials.clone('issuedVc');\n            await verificationSuccess({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/20-rdfc-verify.js",
              "parent": "TkTKyhLjMtZiJxdsvW_y8",
              "ctx": null,
              "_testId": "urn:uuid:0664040d-27e4-4630-a72e-410af5596128",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "verifies a valid eddsa-rdfc-2022 proof."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 61470,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 63,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proofValue\" field, when decoded to raw bytes, is not 64 bytes in length if the associated public key is 32 bytes in length, or 114 bytes in length if the public key is 57 bytes in length, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const credential = credentials.clone('issuedVc');\n          const proofBytes = bs58Decode({id: credential.proof.proofValue});\n          const randomBytes = new Uint8Array(32).map(\n            () => Math.floor(Math.random() * 255));\n          credential.proof.proofValue = bs58Encode(\n            new Uint8Array([...proofBytes, ...randomBytes]));\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/20-rdfc-verify.js",
              "parent": "TkTKyhLjMtZiJxdsvW_y8",
              "ctx": null,
              "_testId": "urn:uuid:55788f58-5dbe-4153-afc7-0508467aa1f1",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If the \"proofValue\" field, when decoded to raw bytes, is not 64 bytes in length if the associated public key is 32 bytes in length, or 114 bytes in length if the public key is 57 bytes in length, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 61534,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 29,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "fails verification when credential is not canonicalized correctly.",
              "body": "async function() {\n            this.test.cell = {columnId, rowId: this.test.title};\n            const credential = credentials.clone('canonizeJcs');\n            await verificationFail({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/20-rdfc-verify.js",
              "parent": "TkTKyhLjMtZiJxdsvW_y8",
              "ctx": null,
              "_testId": "urn:uuid:0130f45c-4304-49cb-8f57-a73bee38fc65",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "fails verification when credential is not canonicalized correctly."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 61562,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 30,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"eddsa-rdfc-2022\", an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const credential = credentials.clone('incorrectCryptosuite');\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/20-rdfc-verify.js",
              "parent": "TkTKyhLjMtZiJxdsvW_y8",
              "ctx": null,
              "_testId": "urn:uuid:8bdbee0f-e7a9-4a7a-961e-084ff9bef902",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If the \"cryptosuite\" field is not the string \"eddsa-rdfc-2022\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 61593,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 21,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "8KjC4vFM3ngG7fsvVwrFn",
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/20-rdfc-verify.js",
          "_testId": "urn:uuid:f2a9c9c0-be41-439b-acfa-0f05e70b51e4"
        },
        {
          "title": "Trinsic",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "verifies a valid eddsa-rdfc-2022 proof.",
              "body": "async function() {\n            this.test.cell = {columnId, rowId: this.test.title};\n            const credential = credentials.clone('issuedVc');\n            await verificationSuccess({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/20-rdfc-verify.js",
              "parent": "D0egLM8Q1c4LI-pc-BhgU",
              "ctx": null,
              "_testId": "urn:uuid:e5b18950-df95-4102-a241-c42b81c30ad7",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "verifies a valid eddsa-rdfc-2022 proof."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 61614,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 37,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected a result from verifier.: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected a result from verifier.: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at verificationSuccess (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/assertions.js:66:10)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/20-rdfc-verify.js:44:13)"
              }
            },
            {
              "type": "test",
              "title": "If the \"proofValue\" field, when decoded to raw bytes, is not 64 bytes in length if the associated public key is 32 bytes in length, or 114 bytes in length if the public key is 57 bytes in length, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const credential = credentials.clone('issuedVc');\n          const proofBytes = bs58Decode({id: credential.proof.proofValue});\n          const randomBytes = new Uint8Array(32).map(\n            () => Math.floor(Math.random() * 255));\n          credential.proof.proofValue = bs58Encode(\n            new Uint8Array([...proofBytes, ...randomBytes]));\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/20-rdfc-verify.js",
              "parent": "D0egLM8Q1c4LI-pc-BhgU",
              "ctx": null,
              "_testId": "urn:uuid:9aeb8201-bd5a-4bf2-89fe-dcbc2847290a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "If the \"proofValue\" field, when decoded to raw bytes, is not 64 bytes in length if the associated public key is 32 bytes in length, or 114 bytes in length if the public key is 57 bytes in length, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 61652,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 18,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "fails verification when credential is not canonicalized correctly.",
              "body": "async function() {\n            this.test.cell = {columnId, rowId: this.test.title};\n            const credential = credentials.clone('canonizeJcs');\n            await verificationFail({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/20-rdfc-verify.js",
              "parent": "D0egLM8Q1c4LI-pc-BhgU",
              "ctx": null,
              "_testId": "urn:uuid:f89f786b-1d27-4aa8-b344-8f110494b501",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "fails verification when credential is not canonicalized correctly."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 61670,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 17,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"eddsa-rdfc-2022\", an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const credential = credentials.clone('incorrectCryptosuite');\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/20-rdfc-verify.js",
              "parent": "D0egLM8Q1c4LI-pc-BhgU",
              "ctx": null,
              "_testId": "urn:uuid:14d869ce-ebd5-4854-ba0e-4e0a12a749b2",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "If the \"cryptosuite\" field is not the string \"eddsa-rdfc-2022\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 61687,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 21,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "8KjC4vFM3ngG7fsvVwrFn",
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/20-rdfc-verify.js",
          "_testId": "urn:uuid:c8e6d556-6897-48cc-959d-11a15ae75fa6"
        },
        {
          "title": "bovine",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "verifies a valid eddsa-rdfc-2022 proof.",
              "body": "async function() {\n            this.test.cell = {columnId, rowId: this.test.title};\n            const credential = credentials.clone('issuedVc');\n            await verificationSuccess({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/20-rdfc-verify.js",
              "parent": "IHRhVVOI9IJm7Ud9eXsIV",
              "ctx": null,
              "_testId": "urn:uuid:f74cf9fb-47f4-4771-94d4-101bb80ffd8f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine",
                "rowId": "verifies a valid eddsa-rdfc-2022 proof."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 61709,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 98,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proofValue\" field, when decoded to raw bytes, is not 64 bytes in length if the associated public key is 32 bytes in length, or 114 bytes in length if the public key is 57 bytes in length, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const credential = credentials.clone('issuedVc');\n          const proofBytes = bs58Decode({id: credential.proof.proofValue});\n          const randomBytes = new Uint8Array(32).map(\n            () => Math.floor(Math.random() * 255));\n          credential.proof.proofValue = bs58Encode(\n            new Uint8Array([...proofBytes, ...randomBytes]));\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/20-rdfc-verify.js",
              "parent": "IHRhVVOI9IJm7Ud9eXsIV",
              "ctx": null,
              "_testId": "urn:uuid:70f88b8e-6482-4f95-bffd-5c74cc9be7f8",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine",
                "rowId": "If the \"proofValue\" field, when decoded to raw bytes, is not 64 bytes in length if the associated public key is 32 bytes in length, or 114 bytes in length if the public key is 57 bytes in length, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 61808,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 100,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "fails verification when credential is not canonicalized correctly.",
              "body": "async function() {\n            this.test.cell = {columnId, rowId: this.test.title};\n            const credential = credentials.clone('canonizeJcs');\n            await verificationFail({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/20-rdfc-verify.js",
              "parent": "IHRhVVOI9IJm7Ud9eXsIV",
              "ctx": null,
              "_testId": "urn:uuid:94f70b86-d37d-4908-9df4-c203e551392e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine",
                "rowId": "fails verification when credential is not canonicalized correctly."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 61907,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 97,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"eddsa-rdfc-2022\", an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const credential = credentials.clone('incorrectCryptosuite');\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/20-rdfc-verify.js",
              "parent": "IHRhVVOI9IJm7Ud9eXsIV",
              "ctx": null,
              "_testId": "urn:uuid:55ca32d0-7983-444c-9f7d-3e55e2d13dde",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine",
                "rowId": "If the \"cryptosuite\" field is not the string \"eddsa-rdfc-2022\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 62005,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 91,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "8KjC4vFM3ngG7fsvVwrFn",
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/20-rdfc-verify.js",
          "_testId": "urn:uuid:de492bf4-c1d8-4af3-8fc5-11a2e77fe321"
        }
      ],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "X9hXNIu5hyhLAlPNaH4NE",
      "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/20-rdfc-verify.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Verifier",
      "_testId": "urn:uuid:395f5716-e455-4f5c-8ac6-a9931be1eb35",
      "columns": [
        "apicatalog.com",
        "Digital Bazaar",
        "Grotto Networking",
        "OpSecId",
        "SpruceID",
        "Trinsic",
        "bovine"
      ],
      "rows": [
        {
          "id": "verifies a valid eddsa-rdfc-2022 proof.",
          "cells": [
            {
              "type": "test",
              "title": "verifies a valid eddsa-rdfc-2022 proof.",
              "body": "async function() {\n            this.test.cell = {columnId, rowId: this.test.title};\n            const credential = credentials.clone('issuedVc');\n            await verificationSuccess({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/20-rdfc-verify.js",
              "parent": "K6AL_p6_WsKwAdib7zHja",
              "ctx": null,
              "_testId": "urn:uuid:e3bc68fa-b3d5-499b-a827-f34f83beb5f8",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "verifies a valid eddsa-rdfc-2022 proof."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 59939,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 232,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "verifies a valid eddsa-rdfc-2022 proof.",
              "body": "async function() {\n            this.test.cell = {columnId, rowId: this.test.title};\n            const credential = credentials.clone('issuedVc');\n            await verificationSuccess({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/20-rdfc-verify.js",
              "parent": "WQLZkSU3OG5cZhejBIOXH",
              "ctx": null,
              "_testId": "urn:uuid:a3932245-84db-4fb6-8cc9-4049cedeffbd",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "verifies a valid eddsa-rdfc-2022 proof."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 60480,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 241,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "verifies a valid eddsa-rdfc-2022 proof.",
              "body": "async function() {\n            this.test.cell = {columnId, rowId: this.test.title};\n            const credential = credentials.clone('issuedVc');\n            await verificationSuccess({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/20-rdfc-verify.js",
              "parent": "uouzjYwJVAEZIXgVywjgt",
              "ctx": null,
              "_testId": "urn:uuid:33d3e76d-c96d-4cd0-8b3a-764644e8a643",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "verifies a valid eddsa-rdfc-2022 proof."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 60852,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 224,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "verifies a valid eddsa-rdfc-2022 proof.",
              "body": "async function() {\n            this.test.cell = {columnId, rowId: this.test.title};\n            const credential = credentials.clone('issuedVc');\n            await verificationSuccess({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/20-rdfc-verify.js",
              "parent": "J4zcvDQrlgvQS_DPG9o9j",
              "ctx": null,
              "_testId": "urn:uuid:57d3053c-89d3-4ff7-a765-df23b149ca52",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "OpSecId",
                "rowId": "verifies a valid eddsa-rdfc-2022 proof."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 61313,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 73,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "verifies a valid eddsa-rdfc-2022 proof.",
              "body": "async function() {\n            this.test.cell = {columnId, rowId: this.test.title};\n            const credential = credentials.clone('issuedVc');\n            await verificationSuccess({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/20-rdfc-verify.js",
              "parent": "TkTKyhLjMtZiJxdsvW_y8",
              "ctx": null,
              "_testId": "urn:uuid:0664040d-27e4-4630-a72e-410af5596128",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "verifies a valid eddsa-rdfc-2022 proof."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 61470,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 63,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "verifies a valid eddsa-rdfc-2022 proof.",
              "body": "async function() {\n            this.test.cell = {columnId, rowId: this.test.title};\n            const credential = credentials.clone('issuedVc');\n            await verificationSuccess({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/20-rdfc-verify.js",
              "parent": "D0egLM8Q1c4LI-pc-BhgU",
              "ctx": null,
              "_testId": "urn:uuid:e5b18950-df95-4102-a241-c42b81c30ad7",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "verifies a valid eddsa-rdfc-2022 proof."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 61614,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 37,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected a result from verifier.: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected a result from verifier.: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at verificationSuccess (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/assertions.js:66:10)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/20-rdfc-verify.js:44:13)"
              }
            },
            {
              "type": "test",
              "title": "verifies a valid eddsa-rdfc-2022 proof.",
              "body": "async function() {\n            this.test.cell = {columnId, rowId: this.test.title};\n            const credential = credentials.clone('issuedVc');\n            await verificationSuccess({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/20-rdfc-verify.js",
              "parent": "IHRhVVOI9IJm7Ud9eXsIV",
              "ctx": null,
              "_testId": "urn:uuid:f74cf9fb-47f4-4771-94d4-101bb80ffd8f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine",
                "rowId": "verifies a valid eddsa-rdfc-2022 proof."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 61709,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 98,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If the \"proofValue\" field, when decoded to raw bytes, is not 64 bytes in length if the associated public key is 32 bytes in length, or 114 bytes in length if the public key is 57 bytes in length, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proofValue\" field, when decoded to raw bytes, is not 64 bytes in length if the associated public key is 32 bytes in length, or 114 bytes in length if the public key is 57 bytes in length, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const credential = credentials.clone('issuedVc');\n          const proofBytes = bs58Decode({id: credential.proof.proofValue});\n          const randomBytes = new Uint8Array(32).map(\n            () => Math.floor(Math.random() * 255));\n          credential.proof.proofValue = bs58Encode(\n            new Uint8Array([...proofBytes, ...randomBytes]));\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/20-rdfc-verify.js",
              "parent": "K6AL_p6_WsKwAdib7zHja",
              "ctx": null,
              "_testId": "urn:uuid:ec98ff74-a44b-4ef1-820b-c4ec23b0a3b5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If the \"proofValue\" field, when decoded to raw bytes, is not 64 bytes in length if the associated public key is 32 bytes in length, or 114 bytes in length if the public key is 57 bytes in length, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 60171,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 105,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proofValue\" field, when decoded to raw bytes, is not 64 bytes in length if the associated public key is 32 bytes in length, or 114 bytes in length if the public key is 57 bytes in length, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const credential = credentials.clone('issuedVc');\n          const proofBytes = bs58Decode({id: credential.proof.proofValue});\n          const randomBytes = new Uint8Array(32).map(\n            () => Math.floor(Math.random() * 255));\n          credential.proof.proofValue = bs58Encode(\n            new Uint8Array([...proofBytes, ...randomBytes]));\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/20-rdfc-verify.js",
              "parent": "WQLZkSU3OG5cZhejBIOXH",
              "ctx": null,
              "_testId": "urn:uuid:37f8ab3b-7a4c-4a21-9797-762d157b2473",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the \"proofValue\" field, when decoded to raw bytes, is not 64 bytes in length if the associated public key is 32 bytes in length, or 114 bytes in length if the public key is 57 bytes in length, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 60721,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 57,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proofValue\" field, when decoded to raw bytes, is not 64 bytes in length if the associated public key is 32 bytes in length, or 114 bytes in length if the public key is 57 bytes in length, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const credential = credentials.clone('issuedVc');\n          const proofBytes = bs58Decode({id: credential.proof.proofValue});\n          const randomBytes = new Uint8Array(32).map(\n            () => Math.floor(Math.random() * 255));\n          credential.proof.proofValue = bs58Encode(\n            new Uint8Array([...proofBytes, ...randomBytes]));\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/20-rdfc-verify.js",
              "parent": "uouzjYwJVAEZIXgVywjgt",
              "ctx": null,
              "_testId": "urn:uuid:aafef6f8-2789-44ab-9b2b-853d1cce0176",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If the \"proofValue\" field, when decoded to raw bytes, is not 64 bytes in length if the associated public key is 32 bytes in length, or 114 bytes in length if the public key is 57 bytes in length, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 61077,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 78,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proofValue\" field, when decoded to raw bytes, is not 64 bytes in length if the associated public key is 32 bytes in length, or 114 bytes in length if the public key is 57 bytes in length, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const credential = credentials.clone('issuedVc');\n          const proofBytes = bs58Decode({id: credential.proof.proofValue});\n          const randomBytes = new Uint8Array(32).map(\n            () => Math.floor(Math.random() * 255));\n          credential.proof.proofValue = bs58Encode(\n            new Uint8Array([...proofBytes, ...randomBytes]));\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/20-rdfc-verify.js",
              "parent": "J4zcvDQrlgvQS_DPG9o9j",
              "ctx": null,
              "_testId": "urn:uuid:07176b88-7050-40ef-8a0d-e71230fcb5c4",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "OpSecId",
                "rowId": "If the \"proofValue\" field, when decoded to raw bytes, is not 64 bytes in length if the associated public key is 32 bytes in length, or 114 bytes in length if the public key is 57 bytes in length, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 61386,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 30,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no result from verifier.: expected Response { status: 200, statusText: 'OK', headers: Headers { 'content-length': '633', 'content-type': 'application/json; charset=utf-8', date: 'Sun, 25 Aug 2024 05:06:23 GMT', server: 'Python/3.12 aiohttp/3.10.5', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no result from verifier.: expected Response { status: 200, statusText: 'OK', headers: Headers { 'content-length': '633', 'content-type': 'application/json; charset=utf-8', date: 'Sun, 25 Aug 2024 05:06:23 GMT', server: 'Python/3.12 aiohttp/3.10.5', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationFail (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/assertions.js:49:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/20-rdfc-verify.js:57:11)"
              }
            },
            {
              "type": "test",
              "title": "If the \"proofValue\" field, when decoded to raw bytes, is not 64 bytes in length if the associated public key is 32 bytes in length, or 114 bytes in length if the public key is 57 bytes in length, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const credential = credentials.clone('issuedVc');\n          const proofBytes = bs58Decode({id: credential.proof.proofValue});\n          const randomBytes = new Uint8Array(32).map(\n            () => Math.floor(Math.random() * 255));\n          credential.proof.proofValue = bs58Encode(\n            new Uint8Array([...proofBytes, ...randomBytes]));\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/20-rdfc-verify.js",
              "parent": "TkTKyhLjMtZiJxdsvW_y8",
              "ctx": null,
              "_testId": "urn:uuid:55788f58-5dbe-4153-afc7-0508467aa1f1",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If the \"proofValue\" field, when decoded to raw bytes, is not 64 bytes in length if the associated public key is 32 bytes in length, or 114 bytes in length if the public key is 57 bytes in length, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 61534,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 29,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proofValue\" field, when decoded to raw bytes, is not 64 bytes in length if the associated public key is 32 bytes in length, or 114 bytes in length if the public key is 57 bytes in length, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const credential = credentials.clone('issuedVc');\n          const proofBytes = bs58Decode({id: credential.proof.proofValue});\n          const randomBytes = new Uint8Array(32).map(\n            () => Math.floor(Math.random() * 255));\n          credential.proof.proofValue = bs58Encode(\n            new Uint8Array([...proofBytes, ...randomBytes]));\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/20-rdfc-verify.js",
              "parent": "D0egLM8Q1c4LI-pc-BhgU",
              "ctx": null,
              "_testId": "urn:uuid:9aeb8201-bd5a-4bf2-89fe-dcbc2847290a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "If the \"proofValue\" field, when decoded to raw bytes, is not 64 bytes in length if the associated public key is 32 bytes in length, or 114 bytes in length if the public key is 57 bytes in length, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 61652,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 18,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proofValue\" field, when decoded to raw bytes, is not 64 bytes in length if the associated public key is 32 bytes in length, or 114 bytes in length if the public key is 57 bytes in length, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const credential = credentials.clone('issuedVc');\n          const proofBytes = bs58Decode({id: credential.proof.proofValue});\n          const randomBytes = new Uint8Array(32).map(\n            () => Math.floor(Math.random() * 255));\n          credential.proof.proofValue = bs58Encode(\n            new Uint8Array([...proofBytes, ...randomBytes]));\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/20-rdfc-verify.js",
              "parent": "IHRhVVOI9IJm7Ud9eXsIV",
              "ctx": null,
              "_testId": "urn:uuid:70f88b8e-6482-4f95-bffd-5c74cc9be7f8",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine",
                "rowId": "If the \"proofValue\" field, when decoded to raw bytes, is not 64 bytes in length if the associated public key is 32 bytes in length, or 114 bytes in length if the public key is 57 bytes in length, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 61808,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 100,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "fails verification when credential is not canonicalized correctly.",
          "cells": [
            {
              "type": "test",
              "title": "fails verification when credential is not canonicalized correctly.",
              "body": "async function() {\n            this.test.cell = {columnId, rowId: this.test.title};\n            const credential = credentials.clone('canonizeJcs');\n            await verificationFail({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/20-rdfc-verify.js",
              "parent": "K6AL_p6_WsKwAdib7zHja",
              "ctx": null,
              "_testId": "urn:uuid:9f389efc-eba5-4f48-a986-e7811ec7693a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "fails verification when credential is not canonicalized correctly."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 60276,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 106,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "fails verification when credential is not canonicalized correctly.",
              "body": "async function() {\n            this.test.cell = {columnId, rowId: this.test.title};\n            const credential = credentials.clone('canonizeJcs');\n            await verificationFail({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/20-rdfc-verify.js",
              "parent": "WQLZkSU3OG5cZhejBIOXH",
              "ctx": null,
              "_testId": "urn:uuid:71b2dd0e-a4f2-44b8-9911-30344d494cb4",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "fails verification when credential is not canonicalized correctly."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 60778,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 44,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "fails verification when credential is not canonicalized correctly.",
              "body": "async function() {\n            this.test.cell = {columnId, rowId: this.test.title};\n            const credential = credentials.clone('canonizeJcs');\n            await verificationFail({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/20-rdfc-verify.js",
              "parent": "uouzjYwJVAEZIXgVywjgt",
              "ctx": null,
              "_testId": "urn:uuid:e7d5f96d-976b-4e17-81d6-6e3c73d34c22",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "fails verification when credential is not canonicalized correctly."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 61156,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 87,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "fails verification when credential is not canonicalized correctly.",
              "body": "async function() {\n            this.test.cell = {columnId, rowId: this.test.title};\n            const credential = credentials.clone('canonizeJcs');\n            await verificationFail({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/20-rdfc-verify.js",
              "parent": "J4zcvDQrlgvQS_DPG9o9j",
              "ctx": null,
              "_testId": "urn:uuid:d099dfb2-0922-468a-ad4b-4d95a89c9160",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "OpSecId",
                "rowId": "fails verification when credential is not canonicalized correctly."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 61417,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 31,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no result from verifier.: expected Response { status: 200, statusText: 'OK', headers: Headers { 'content-length': '633', 'content-type': 'application/json; charset=utf-8', date: 'Sun, 25 Aug 2024 05:06:23 GMT', server: 'Python/3.12 aiohttp/3.10.5', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no result from verifier.: expected Response { status: 200, statusText: 'OK', headers: Headers { 'content-length': '633', 'content-type': 'application/json; charset=utf-8', date: 'Sun, 25 Aug 2024 05:06:23 GMT', server: 'Python/3.12 aiohttp/3.10.5', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationFail (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/assertions.js:49:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/20-rdfc-verify.js:68:13)"
              }
            },
            {
              "type": "test",
              "title": "fails verification when credential is not canonicalized correctly.",
              "body": "async function() {\n            this.test.cell = {columnId, rowId: this.test.title};\n            const credential = credentials.clone('canonizeJcs');\n            await verificationFail({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/20-rdfc-verify.js",
              "parent": "TkTKyhLjMtZiJxdsvW_y8",
              "ctx": null,
              "_testId": "urn:uuid:0130f45c-4304-49cb-8f57-a73bee38fc65",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "fails verification when credential is not canonicalized correctly."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 61562,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 30,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "fails verification when credential is not canonicalized correctly.",
              "body": "async function() {\n            this.test.cell = {columnId, rowId: this.test.title};\n            const credential = credentials.clone('canonizeJcs');\n            await verificationFail({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/20-rdfc-verify.js",
              "parent": "D0egLM8Q1c4LI-pc-BhgU",
              "ctx": null,
              "_testId": "urn:uuid:f89f786b-1d27-4aa8-b344-8f110494b501",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "fails verification when credential is not canonicalized correctly."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 61670,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 17,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "fails verification when credential is not canonicalized correctly.",
              "body": "async function() {\n            this.test.cell = {columnId, rowId: this.test.title};\n            const credential = credentials.clone('canonizeJcs');\n            await verificationFail({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/20-rdfc-verify.js",
              "parent": "IHRhVVOI9IJm7Ud9eXsIV",
              "ctx": null,
              "_testId": "urn:uuid:94f70b86-d37d-4908-9df4-c203e551392e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine",
                "rowId": "fails verification when credential is not canonicalized correctly."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 61907,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 97,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If the \"cryptosuite\" field is not the string \"eddsa-rdfc-2022\", an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"eddsa-rdfc-2022\", an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const credential = credentials.clone('incorrectCryptosuite');\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/20-rdfc-verify.js",
              "parent": "K6AL_p6_WsKwAdib7zHja",
              "ctx": null,
              "_testId": "urn:uuid:f655537f-4745-4f4a-9068-ebab94bd013e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If the \"cryptosuite\" field is not the string \"eddsa-rdfc-2022\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 60382,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 98,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"eddsa-rdfc-2022\", an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const credential = credentials.clone('incorrectCryptosuite');\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/20-rdfc-verify.js",
              "parent": "WQLZkSU3OG5cZhejBIOXH",
              "ctx": null,
              "_testId": "urn:uuid:6336a7f7-ac47-403e-b173-139480dfa05f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the \"cryptosuite\" field is not the string \"eddsa-rdfc-2022\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 60822,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 30,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"eddsa-rdfc-2022\", an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const credential = credentials.clone('incorrectCryptosuite');\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/20-rdfc-verify.js",
              "parent": "uouzjYwJVAEZIXgVywjgt",
              "ctx": null,
              "_testId": "urn:uuid:850527d0-41de-422e-8e8a-baabf63f1184",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If the \"cryptosuite\" field is not the string \"eddsa-rdfc-2022\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 61242,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 71,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"eddsa-rdfc-2022\", an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const credential = credentials.clone('incorrectCryptosuite');\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/20-rdfc-verify.js",
              "parent": "J4zcvDQrlgvQS_DPG9o9j",
              "ctx": null,
              "_testId": "urn:uuid:3a1821a5-09ef-4117-a80a-7545b5eb38ac",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "OpSecId",
                "rowId": "If the \"cryptosuite\" field is not the string \"eddsa-rdfc-2022\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 61447,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 22,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"eddsa-rdfc-2022\", an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const credential = credentials.clone('incorrectCryptosuite');\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/20-rdfc-verify.js",
              "parent": "TkTKyhLjMtZiJxdsvW_y8",
              "ctx": null,
              "_testId": "urn:uuid:8bdbee0f-e7a9-4a7a-961e-084ff9bef902",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If the \"cryptosuite\" field is not the string \"eddsa-rdfc-2022\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 61593,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 21,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"eddsa-rdfc-2022\", an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const credential = credentials.clone('incorrectCryptosuite');\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/20-rdfc-verify.js",
              "parent": "D0egLM8Q1c4LI-pc-BhgU",
              "ctx": null,
              "_testId": "urn:uuid:14d869ce-ebd5-4854-ba0e-4e0a12a749b2",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "If the \"cryptosuite\" field is not the string \"eddsa-rdfc-2022\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 61687,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 21,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"eddsa-rdfc-2022\", an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const credential = credentials.clone('incorrectCryptosuite');\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/20-rdfc-verify.js",
              "parent": "IHRhVVOI9IJm7Ud9eXsIV",
              "ctx": null,
              "_testId": "urn:uuid:55ca32d0-7983-444c-9f7d-3e55e2d13dde",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine",
                "rowId": "If the \"cryptosuite\" field is not the string \"eddsa-rdfc-2022\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 62005,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 91,
              "state": "passed",
              "speed": "slow"
            }
          ]
        }
      ]
    },
    {
      "title": "eddsa-rdfc-2022 (interop)",
      "ctx": null,
      "suites": [],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [
        {
          "title": "\"before all\" hook in \"eddsa-rdfc-2022 (interop)\"",
          "body": "async function() {\n    const credentials = await generateTestData();\n    validVc = credentials.clone('validVc');\n  }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "3wh0kyFGTAC3zwGPljBw5",
          "ctx": null,
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 62098,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 1,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"eddsa-rdfc-2022 (interop)\"",
          "body": "async function() {\n      const [issuer] = endpoints;\n      try {\n        issuedVc = await createInitialVc({issuer, vc: validVc});\n      } catch(e) {\n        console.error(`issuer ${issuerName} failed to issue interop VC`, e);\n      }\n    }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "3wh0kyFGTAC3zwGPljBw5",
          "ctx": null,
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 62098,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 51,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"eddsa-rdfc-2022 (interop)\"",
          "body": "async function() {\n      const [issuer] = endpoints;\n      try {\n        issuedVc = await createInitialVc({issuer, vc: validVc});\n      } catch(e) {\n        console.error(`issuer ${issuerName} failed to issue interop VC`, e);\n      }\n    }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "3wh0kyFGTAC3zwGPljBw5",
          "ctx": null,
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 62149,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 202,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"eddsa-rdfc-2022 (interop)\"",
          "body": "async function() {\n      const [issuer] = endpoints;\n      try {\n        issuedVc = await createInitialVc({issuer, vc: validVc});\n      } catch(e) {\n        console.error(`issuer ${issuerName} failed to issue interop VC`, e);\n      }\n    }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "3wh0kyFGTAC3zwGPljBw5",
          "ctx": null,
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 62351,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 77,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"eddsa-rdfc-2022 (interop)\"",
          "body": "async function() {\n      const [issuer] = endpoints;\n      try {\n        issuedVc = await createInitialVc({issuer, vc: validVc});\n      } catch(e) {\n        console.error(`issuer ${issuerName} failed to issue interop VC`, e);\n      }\n    }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "3wh0kyFGTAC3zwGPljBw5",
          "ctx": null,
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 62428,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 25,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"eddsa-rdfc-2022 (interop)\"",
          "body": "async function() {\n      const [issuer] = endpoints;\n      try {\n        issuedVc = await createInitialVc({issuer, vc: validVc});\n      } catch(e) {\n        console.error(`issuer ${issuerName} failed to issue interop VC`, e);\n      }\n    }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "3wh0kyFGTAC3zwGPljBw5",
          "ctx": null,
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 62453,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 25,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"eddsa-rdfc-2022 (interop)\"",
          "body": "async function() {\n      const [issuer] = endpoints;\n      try {\n        issuedVc = await createInitialVc({issuer, vc: validVc});\n      } catch(e) {\n        console.error(`issuer ${issuerName} failed to issue interop VC`, e);\n      }\n    }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "3wh0kyFGTAC3zwGPljBw5",
          "ctx": null,
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 62479,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 80,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"eddsa-rdfc-2022 (interop)\"",
          "body": "async function() {\n      const [issuer] = endpoints;\n      try {\n        issuedVc = await createInitialVc({issuer, vc: validVc});\n      } catch(e) {\n        console.error(`issuer ${issuerName} failed to issue interop VC`, e);\n      }\n    }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "3wh0kyFGTAC3zwGPljBw5",
          "ctx": null,
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 62559,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 99,
          "_error": null
        }
      ],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "QTtpw9S7WaqSoh51WrSQz",
      "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Issuer",
      "columnLabel": "Verifier",
      "_testId": "urn:uuid:89d4f109-5a9a-494e-9fc8-a76ce1ffbfeb",
      "columns": [
        "apicatalog.com",
        "Digital Bazaar",
        "Grotto Networking",
        "OpSecId",
        "SpruceID",
        "Trinsic",
        "bovine"
      ],
      "rows": [
        {
          "id": "apicatalog.com",
          "cells": [
            {
              "type": "test",
              "title": "apicatalog.com should verify apicatalog.com",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "3wh0kyFGTAC3zwGPljBw5",
              "ctx": null,
              "_testId": "urn:uuid:c64561be-c1e7-4eb2-8855-13a4bd861c91",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "apicatalog.com",
                "columnId": "apicatalog.com"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 62657,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 42,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "Digital Bazaar should verify apicatalog.com",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "3wh0kyFGTAC3zwGPljBw5",
              "ctx": null,
              "_testId": "urn:uuid:16331182-b090-4861-a50e-94238460c53f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "apicatalog.com",
                "columnId": "Digital Bazaar"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 62699,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 34,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: A validation error occured in … { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          "https://w3id.org/security/data-integrity/v2",
                          "https://w3id.org/security/multikey/v1"
                        ],
                        "id": "urn:uuid:a59fd8f7-06e6-4909-803c-2a61d49e7f09",
                        "type": "VerifiableCredential",
                        "issuer": "https://vc.apicatalog.com/issuer/?suite=eddsa-rdfc-2022",
                        "issuanceDate": "2020-03-16T22:37:26.544Z",
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                        },
                        "proof": {
                          "verificationMethod": "did:key:z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y#z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y",
                          "type": "DataIntegrityProof",
                          "cryptosuite": "eddsa-rdfc-2022",
                          "proofPurpose": "assertionMethod",
                          "created": "2024-08-25T05:06:24Z",
                          "proofValue": "z2mQxoSJCHjcfu6YrqtPQCtEBXNmvxZ4bb8cTikfLHFkQzrDogA1AmHqgjSyv4N7Q17tvdZfzAzgVBLXhHoiLpLb2"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half",
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",\"https://w3id.org/security/data-integrity/v2\",\"https://w3id.org/security/multikey/v1\"],\"id\":\"urn:uuid:a59fd8f7-06e6-4909-803c-2a61d49e7f09\",\"type\":\"VerifiableCredential\",\"issuer\":\"https://vc.apicatalog.com/issuer/?suite=eddsa-rdfc-2022\",\"issuanceDate\":\"2020-03-16T22:37:26.544Z\",\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\"},\"proof\":{\"verificationMethod\":\"did:key:z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y#z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y\",\"type\":\"DataIntegrityProof\",\"cryptosuite\":\"eddsa-rdfc-2022\",\"proofPurpose\":\"assertionMethod\",\"created\":\"2024-08-25T05:06:24Z\",\"proofValue\":\"z2mQxoSJCHjcfu6YrqtPQCtEBXNmvxZ4bb8cTikfLHFkQzrDogA1AmHqgjSyv4N7Q17tvdZfzAzgVBLXhHoiLpLb2\"}},\"options\":{\"checks\":[\"proof\"]}}"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc2.veresverifier.dev/verifiers/z19w7KofwvE2nkJeRVLp8NDxz/credentials/verify",
                  "status": 400,
                  "data": {
                    "name": "ValidationError",
                    "message": "A validation error occured in the 'Verify Credential Body' validator.",
                    "details": {
                      "errors": [
                        {
                          "stack": "ValidationError: should be array\n    at _createError (file:///home/node/app/node_modules/@bedrock/validation/lib/index.js:240:17)\n    at validate (file:///home/node/app/node_modules/@bedrock/validation/lib/index.js:88:14)\n    at validate (file:///home/node/app/node_modules/@bedrock/validation/lib/index.js:181:22)\n    at Layer.handle [as handle_request] (/home/node/app/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/node/app/node_modules/express/lib/router/route.js:149:13)\n    at cors (/home/node/app/node_modules/cors/lib/index.js:188:7)\n    at /home/node/app/node_modules/cors/lib/index.js:224:17\n    at originCallback (/home/node/app/node_modules/cors/lib/index.js:214:15)\n    at /home/node/app/node_modules/cors/lib/index.js:219:13\n    at optionsCallback (/home/node/app/node_modules/cors/lib/index.js:199:9)",
                          "name": "ValidationError",
                          "message": "should be array",
                          "details": {
                            "instance": {
                              "verifiableCredential": {
                                "@context": [
                                  "https://www.w3.org/2018/credentials/v1",
                                  "https://w3id.org/security/data-integrity/v2",
                                  "https://w3id.org/security/multikey/v1"
                                ],
                                "id": "urn:uuid:a59fd8f7-06e6-4909-803c-2a61d49e7f09",
                                "type": "VerifiableCredential",
                                "issuer": "https://vc.apicatalog.com/issuer/?suite=eddsa-rdfc-2022",
                                "issuanceDate": "2020-03-16T22:37:26.544Z",
                                "credentialSubject": {
                                  "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                                },
                                "proof": {
                                  "verificationMethod": "did:key:z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y#z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y",
                                  "type": "DataIntegrityProof",
                                  "cryptosuite": "eddsa-rdfc-2022",
                                  "proofPurpose": "assertionMethod",
                                  "created": "2024-08-25T05:06:24Z",
                                  "proofValue": "z2mQxoSJCHjcfu6YrqtPQCtEBXNmvxZ4bb8cTikfLHFkQzrDogA1AmHqgjSyv4N7Q17tvdZfzAzgVBLXhHoiLpLb2"
                                }
                              },
                              "options": {
                                "checks": [
                                  "proof"
                                ]
                              }
                            },
                            "params": {
                              "type": "array"
                            },
                            "path": ".verifiableCredential.type",
                            "public": true,
                            "schemaPath": "#/properties/verifiableCredential/anyOf/0/properties/type/type",
                            "schema": {
                              "description": "",
                              "title": ""
                            },
                            "value": "VerifiableCredential"
                          },
                          "cause": null
                        },
                        {
                          "stack": "ValidationError: should NOT have additional properties\n    at _createError (file:///home/node/app/node_modules/@bedrock/validation/lib/index.js:240:17)\n    at validate (file:///home/node/app/node_modules/@bedrock/validation/lib/index.js:88:14)\n    at validate (file:///home/node/app/node_modules/@bedrock/validation/lib/index.js:181:22)\n    at Layer.handle [as handle_request] (/home/node/app/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/node/app/node_modules/express/lib/router/route.js:149:13)\n    at cors (/home/node/app/node_modules/cors/lib/index.js:188:7)\n    at /home/node/app/node_modules/cors/lib/index.js:224:17\n    at originCallback (/home/node/app/node_modules/cors/lib/index.js:214:15)\n    at /home/node/app/node_modules/cors/lib/index.js:219:13\n    at optionsCallback (/home/node/app/node_modules/cors/lib/index.js:199:9)",
                          "name": "ValidationError",
                          "message": "should NOT have additional properties",
                          "details": {
                            "instance": {
                              "verifiableCredential": {
                                "@context": [
                                  "https://www.w3.org/2018/credentials/v1",
                                  "https://w3id.org/security/data-integrity/v2",
                                  "https://w3id.org/security/multikey/v1"
                                ],
                                "id": "urn:uuid:a59fd8f7-06e6-4909-803c-2a61d49e7f09",
                                "type": "VerifiableCredential",
                                "issuer": "https://vc.apicatalog.com/issuer/?suite=eddsa-rdfc-2022",
                                "issuanceDate": "2020-03-16T22:37:26.544Z",
                                "credentialSubject": {
                                  "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                                },
                                "proof": {
                                  "verificationMethod": "did:key:z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y#z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y",
                                  "type": "DataIntegrityProof",
                                  "cryptosuite": "eddsa-rdfc-2022",
                                  "proofPurpose": "assertionMethod",
                                  "created": "2024-08-25T05:06:24Z",
                                  "proofValue": "z2mQxoSJCHjcfu6YrqtPQCtEBXNmvxZ4bb8cTikfLHFkQzrDogA1AmHqgjSyv4N7Q17tvdZfzAzgVBLXhHoiLpLb2"
                                }
                              },
                              "options": {
                                "checks": [
                                  "proof"
                                ]
                              }
                            },
                            "params": {
                              "additionalProperty": "issuer"
                            },
                            "path": ".verifiableCredential",
                            "public": true,
                            "schemaPath": "#/properties/verifiableCredential/anyOf/1/additionalProperties",
                            "schema": {
                              "description": "",
                              "title": "Enveloped Verifiable Credential"
                            },
                            "value": {
                              "@context": [
                                "https://www.w3.org/2018/credentials/v1",
                                "https://w3id.org/security/data-integrity/v2",
                                "https://w3id.org/security/multikey/v1"
                              ],
                              "id": "urn:uuid:a59fd8f7-06e6-4909-803c-2a61d49e7f09",
                              "type": "VerifiableCredential",
                              "issuer": "https://vc.apicatalog.com/issuer/?suite=eddsa-rdfc-2022",
                              "issuanceDate": "2020-03-16T22:37:26.544Z",
                              "credentialSubject": {
                                "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                              },
                              "proof": {
                                "verificationMethod": "did:key:z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y#z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y",
                                "type": "DataIntegrityProof",
                                "cryptosuite": "eddsa-rdfc-2022",
                                "proofPurpose": "assertionMethod",
                                "created": "2024-08-25T05:06:24Z",
                                "proofValue": "z2mQxoSJCHjcfu6YrqtPQCtEBXNmvxZ4bb8cTikfLHFkQzrDogA1AmHqgjSyv4N7Q17tvdZfzAzgVBLXhHoiLpLb2"
                              }
                            }
                          },
                          "cause": null
                        },
                        {
                          "stack": "ValidationError: should match some schema in anyOf\n    at _createError (file:///home/node/app/node_modules/@bedrock/validation/lib/index.js:240:17)\n    at validate (file:///home/node/app/node_modules/@bedrock/validation/lib/index.js:88:14)\n    at validate (file:///home/node/app/node_modules/@bedrock/validation/lib/index.js:181:22)\n    at Layer.handle [as handle_request] (/home/node/app/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/node/app/node_modules/express/lib/router/route.js:149:13)\n    at cors (/home/node/app/node_modules/cors/lib/index.js:188:7)\n    at /home/node/app/node_modules/cors/lib/index.js:224:17\n    at originCallback (/home/node/app/node_modules/cors/lib/index.js:214:15)\n    at /home/node/app/node_modules/cors/lib/index.js:219:13\n    at optionsCallback (/home/node/app/node_modules/cors/lib/index.js:199:9)",
                          "name": "ValidationError",
                          "message": "should match some schema in anyOf",
                          "details": {
                            "instance": {
                              "verifiableCredential": {
                                "@context": [
                                  "https://www.w3.org/2018/credentials/v1",
                                  "https://w3id.org/security/data-integrity/v2",
                                  "https://w3id.org/security/multikey/v1"
                                ],
                                "id": "urn:uuid:a59fd8f7-06e6-4909-803c-2a61d49e7f09",
                                "type": "VerifiableCredential",
                                "issuer": "https://vc.apicatalog.com/issuer/?suite=eddsa-rdfc-2022",
                                "issuanceDate": "2020-03-16T22:37:26.544Z",
                                "credentialSubject": {
                                  "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                                },
                                "proof": {
                                  "verificationMethod": "did:key:z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y#z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y",
                                  "type": "DataIntegrityProof",
                                  "cryptosuite": "eddsa-rdfc-2022",
                                  "proofPurpose": "assertionMethod",
                                  "created": "2024-08-25T05:06:24Z",
                                  "proofValue": "z2mQxoSJCHjcfu6YrqtPQCtEBXNmvxZ4bb8cTikfLHFkQzrDogA1AmHqgjSyv4N7Q17tvdZfzAzgVBLXhHoiLpLb2"
                                }
                              },
                              "options": {
                                "checks": [
                                  "proof"
                                ]
                              }
                            },
                            "params": {},
                            "path": ".verifiableCredential",
                            "public": true,
                            "schemaPath": "#/properties/verifiableCredential/anyOf",
                            "schema": {
                              "description": "",
                              "title": {
                                "title": "Verifiable Credential",
                                "type": "object",
                                "required": [
                                  "@context",
                                  "credentialSubject",
                                  "issuer",
                                  "type"
                                ],
                                "additionalProperties": true,
                                "properties": {
                                  "@context": {
                                    "type": "array",
                                    "minItems": 1,
                                    "items": [
                                      {
                                        "oneOf": [
                                          {
                                            "const": "https://www.w3.org/2018/credentials/v1"
                                          },
                                          {
                                            "const": "https://www.w3.org/ns/credentials/v2"
                                          }
                                        ]
                                      }
                                    ],
                                    "additionalItems": {
                                      "anyOf": [
                                        {
                                          "type": "string"
                                        },
                                        {
                                          "type": "object"
                                        }
                                      ]
                                    }
                                  },
                                  "credentialSubject": {
                                    "anyOf": [
                                      {
                                        "type": "object"
                                      },
                                      {
                                        "type": "array",
                                        "minItems": 1,
                                        "items": {
                                          "type": "object"
                                        }
                                      }
                                    ]
                                  },
                                  "id": {
                                    "type": "string"
                                  },
                                  "issuer": {
                                    "title": "identifier or an object with an id",
                                    "anyOf": [
                                      {
                                        "title": "ID",
                                        "description": "A unique identifier.",
                                        "type": "string",
                                        "minLength": 1,
                                        "disallow": {
                                          "type": "string",
                                          "enum": [
                                            "0"
                                          ]
                                        }
                                      },
                                      {
                                        "type": "object",
                                        "required": [
                                          "id"
                                        ],
                                        "additionalProperties": true,
                                        "properties": {
                                          "id": {
                                            "title": "ID",
                                            "description": "A unique identifier.",
                                            "type": "string",
                                            "minLength": 1,
                                            "disallow": {
                                              "type": "string",
                                              "enum": [
                                                "0"
                                              ]
                                            }
                                          }
                                        }
                                      }
                                    ]
                                  },
                                  "type": {
                                    "type": "array",
                                    "minItems": 1,
                                    "items": [
                                      {
                                        "const": "VerifiableCredential"
                                      }
                                    ],
                                    "additionalItems": {
                                      "type": "string"
                                    }
                                  },
                                  "proof": {
                                    "title": "Proof",
                                    "anyOf": [
                                      {
                                        "type": "object"
                                      },
                                      {
                                        "type": "array",
                                        "minItems": 1,
                                        "items": {
                                          "type": "object"
                                        }
                                      }
                                    ]
                                  }
                                }
                              }
                            },
                            "value": {
                              "@context": [
                                "https://www.w3.org/2018/credentials/v1",
                                "https://w3id.org/security/data-integrity/v2",
                                "https://w3id.org/security/multikey/v1"
                              ],
                              "id": "urn:uuid:a59fd8f7-06e6-4909-803c-2a61d49e7f09",
                              "type": "VerifiableCredential",
                              "issuer": "https://vc.apicatalog.com/issuer/?suite=eddsa-rdfc-2022",
                              "issuanceDate": "2020-03-16T22:37:26.544Z",
                              "credentialSubject": {
                                "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                              },
                              "proof": {
                                "verificationMethod": "did:key:z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y#z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y",
                                "type": "DataIntegrityProof",
                                "cryptosuite": "eddsa-rdfc-2022",
                                "proofPurpose": "assertionMethod",
                                "created": "2024-08-25T05:06:24Z",
                                "proofValue": "z2mQxoSJCHjcfu6YrqtPQCtEBXNmvxZ4bb8cTikfLHFkQzrDogA1AmHqgjSyv4N7Q17tvdZfzAzgVBLXhHoiLpLb2"
                              }
                            }
                          },
                          "cause": null
                        }
                      ],
                      "httpStatusCode": 400
                    },
                    "cause": null,
                    "stack": "ValidationError: A validation error occured in the 'Verify Credential Body' validator.\n    at _createError (file:///home/node/app/node_modules/@bedrock/validation/lib/index.js:246:17)\n    at validate (file:///home/node/app/node_modules/@bedrock/validation/lib/index.js:88:14)\n    at validate (file:///home/node/app/node_modules/@bedrock/validation/lib/index.js:181:22)\n    at Layer.handle [as handle_request] (/home/node/app/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/node/app/node_modules/express/lib/router/route.js:149:13)\n    at cors (/home/node/app/node_modules/cors/lib/index.js:188:7)\n    at /home/node/app/node_modules/cors/lib/index.js:224:17\n    at originCallback (/home/node/app/node_modules/cors/lib/index.js:214:15)\n    at /home/node/app/node_modules/cors/lib/index.js:219:13\n    at optionsCallback (/home/node/app/node_modules/cors/lib/index.js:199:9)",
                    "type": "ValidationError"
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: A validation error occured in … { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js:56:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "Grotto Networking should verify apicatalog.com",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "3wh0kyFGTAC3zwGPljBw5",
              "ctx": null,
              "_testId": "urn:uuid:52c34daa-da5c-4b7e-8471-7d539128c520",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "apicatalog.com",
                "columnId": "Grotto Networking"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 62734,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 74,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",\"https://w3id.org/security/data-integrity/v2\",\"https://w3id.org/security/multikey/v1\"],\"id\":\"urn:uuid:a59fd8f7-06e6-4909-803c-2a61d49e7f09\",\"type\":\"VerifiableCredential\",\"issuer\":\"https://vc.apicatalog.com/issuer/?suite=eddsa-rdfc-2022\",\"issuanceDate\":\"2020-03-16T22:37:26.544Z\",\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\"},\"proof\":{\"verificationMethod\":\"did:key:z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y#z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y\",\"type\":\"DataIntegrityProof\",\"cryptosuite\":\"eddsa-rdfc-2022\",\"proofPurpose\":\"assertionMethod\",\"created\":\"2024-08-25T05:06:24Z\",\"proofValue\":\"z2mQxoSJCHjcfu6YrqtPQCtEBXNmvxZ4bb8cTikfLHFkQzrDogA1AmHqgjSyv4N7Q17tvdZfzAzgVBLXhHoiLpLb2\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          "https://w3id.org/security/data-integrity/v2",
                          "https://w3id.org/security/multikey/v1"
                        ],
                        "id": "urn:uuid:a59fd8f7-06e6-4909-803c-2a61d49e7f09",
                        "type": "VerifiableCredential",
                        "issuer": "https://vc.apicatalog.com/issuer/?suite=eddsa-rdfc-2022",
                        "issuanceDate": "2020-03-16T22:37:26.544Z",
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                        },
                        "proof": {
                          "verificationMethod": "did:key:z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y#z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y",
                          "type": "DataIntegrityProof",
                          "cryptosuite": "eddsa-rdfc-2022",
                          "proofPurpose": "assertionMethod",
                          "created": "2024-08-25T05:06:24Z",
                          "proofValue": "z2mQxoSJCHjcfu6YrqtPQCtEBXNmvxZ4bb8cTikfLHFkQzrDogA1AmHqgjSyv4N7Q17tvdZfzAzgVBLXhHoiLpLb2"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://ecdsa-sd.grotto-networking.com/EdDSA-RDFC/credentials/verify",
                  "status": 400,
                  "data": {
                    "errors": [
                      "proof: invalid"
                    ]
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js:56:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "OpSecId should verify apicatalog.com",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "3wh0kyFGTAC3zwGPljBw5",
              "ctx": null,
              "_testId": "urn:uuid:1cca9b46-3db2-410b-b41e-25c6ef18580e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "apicatalog.com",
                "columnId": "OpSecId"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 62809,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 28,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",\"https://w3id.org/security/data-integrity/v2\",\"https://w3id.org/security/multikey/v1\"],\"id\":\"urn:uuid:a59fd8f7-06e6-4909-803c-2a61d49e7f09\",\"type\":\"VerifiableCredential\",\"issuer\":\"https://vc.apicatalog.com/issuer/?suite=eddsa-rdfc-2022\",\"issuanceDate\":\"2020-03-16T22:37:26.544Z\",\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\"},\"proof\":{\"verificationMethod\":\"did:key:z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y#z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y\",\"type\":\"DataIntegrityProof\",\"cryptosuite\":\"eddsa-rdfc-2022\",\"proofPurpose\":\"assertionMethod\",\"created\":\"2024-08-25T05:06:24Z\",\"proofValue\":\"z2mQxoSJCHjcfu6YrqtPQCtEBXNmvxZ4bb8cTikfLHFkQzrDogA1AmHqgjSyv4N7Q17tvdZfzAzgVBLXhHoiLpLb2\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          "https://w3id.org/security/data-integrity/v2",
                          "https://w3id.org/security/multikey/v1"
                        ],
                        "id": "urn:uuid:a59fd8f7-06e6-4909-803c-2a61d49e7f09",
                        "type": "VerifiableCredential",
                        "issuer": "https://vc.apicatalog.com/issuer/?suite=eddsa-rdfc-2022",
                        "issuanceDate": "2020-03-16T22:37:26.544Z",
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                        },
                        "proof": {
                          "verificationMethod": "did:key:z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y#z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y",
                          "type": "DataIntegrityProof",
                          "cryptosuite": "eddsa-rdfc-2022",
                          "proofPurpose": "assertionMethod",
                          "created": "2024-08-25T05:06:24Z",
                          "proofValue": "z2mQxoSJCHjcfu6YrqtPQCtEBXNmvxZ4bb8cTikfLHFkQzrDogA1AmHqgjSyv4N7Q17tvdZfzAzgVBLXhHoiLpLb2"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://agent.opsec.id/vc/credentials/verify",
                  "status": 422,
                  "data": {
                    "json": {
                      "verifiableCredential": {
                        "type": [
                          "Not a valid list."
                        ]
                      }
                    }
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js:56:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "SpruceID should verify apicatalog.com",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "3wh0kyFGTAC3zwGPljBw5",
              "ctx": null,
              "_testId": "urn:uuid:72299bc4-b1b6-4d81-ab3a-966db2baf1dd",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "apicatalog.com",
                "columnId": "SpruceID"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 62838,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 36,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Trinsic should verify apicatalog.com",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "3wh0kyFGTAC3zwGPljBw5",
              "ctx": null,
              "_testId": "urn:uuid:8e861a5d-979a-4712-9398-71d0198a8366",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "apicatalog.com",
                "columnId": "Trinsic"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 62875,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 16,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",\"https://w3id.org/security/data-integrity/v2\",\"https://w3id.org/security/multikey/v1\"],\"id\":\"urn:uuid:a59fd8f7-06e6-4909-803c-2a61d49e7f09\",\"type\":\"VerifiableCredential\",\"issuer\":\"https://vc.apicatalog.com/issuer/?suite=eddsa-rdfc-2022\",\"issuanceDate\":\"2020-03-16T22:37:26.544Z\",\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\"},\"proof\":{\"verificationMethod\":\"did:key:z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y#z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y\",\"type\":\"DataIntegrityProof\",\"cryptosuite\":\"eddsa-rdfc-2022\",\"proofPurpose\":\"assertionMethod\",\"created\":\"2024-08-25T05:06:24Z\",\"proofValue\":\"z2mQxoSJCHjcfu6YrqtPQCtEBXNmvxZ4bb8cTikfLHFkQzrDogA1AmHqgjSyv4N7Q17tvdZfzAzgVBLXhHoiLpLb2\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          "https://w3id.org/security/data-integrity/v2",
                          "https://w3id.org/security/multikey/v1"
                        ],
                        "id": "urn:uuid:a59fd8f7-06e6-4909-803c-2a61d49e7f09",
                        "type": "VerifiableCredential",
                        "issuer": "https://vc.apicatalog.com/issuer/?suite=eddsa-rdfc-2022",
                        "issuanceDate": "2020-03-16T22:37:26.544Z",
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                        },
                        "proof": {
                          "verificationMethod": "did:key:z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y#z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y",
                          "type": "DataIntegrityProof",
                          "cryptosuite": "eddsa-rdfc-2022",
                          "proofPurpose": "assertionMethod",
                          "created": "2024-08-25T05:06:24Z",
                          "proofValue": "z2mQxoSJCHjcfu6YrqtPQCtEBXNmvxZ4bb8cTikfLHFkQzrDogA1AmHqgjSyv4N7Q17tvdZfzAzgVBLXhHoiLpLb2"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://interop.connect.trinsic.cloud/vc-api/credentials/verify",
                  "status": 400
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js:56:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "bovine should verify apicatalog.com",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "3wh0kyFGTAC3zwGPljBw5",
              "ctx": null,
              "_testId": "urn:uuid:ee8eaf9c-a2de-4ee7-9e4d-eb64c9bcee13",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "apicatalog.com",
                "columnId": "bovine"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 62892,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 98,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "Digital Bazaar",
          "cells": [
            {
              "type": "test",
              "title": "apicatalog.com should verify Digital Bazaar",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "3wh0kyFGTAC3zwGPljBw5",
              "ctx": null,
              "_testId": "urn:uuid:9e5352d3-9f8d-4879-adbe-58dbe145c8b8",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Digital Bazaar",
                "columnId": "apicatalog.com"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 62991,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 49,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "Digital Bazaar should verify Digital Bazaar",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "3wh0kyFGTAC3zwGPljBw5",
              "ctx": null,
              "_testId": "urn:uuid:33e835f0-bf05-4e74-8f8b-f771b6b50308",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Digital Bazaar",
                "columnId": "Digital Bazaar"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 63040,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 41,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "Grotto Networking should verify Digital Bazaar",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "3wh0kyFGTAC3zwGPljBw5",
              "ctx": null,
              "_testId": "urn:uuid:98bed604-eec2-4428-b463-f84183a08f21",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Digital Bazaar",
                "columnId": "Grotto Networking"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 63081,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 79,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "OpSecId should verify Digital Bazaar",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "3wh0kyFGTAC3zwGPljBw5",
              "ctx": null,
              "_testId": "urn:uuid:999d136f-e120-4b75-9b69-e852fb241120",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Digital Bazaar",
                "columnId": "OpSecId"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 63161,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 64,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "SpruceID should verify Digital Bazaar",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "3wh0kyFGTAC3zwGPljBw5",
              "ctx": null,
              "_testId": "urn:uuid:7fab25de-8bb6-4d44-8b00-8592b4da7526",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Digital Bazaar",
                "columnId": "SpruceID"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 63226,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 26,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Trinsic should verify Digital Bazaar",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "3wh0kyFGTAC3zwGPljBw5",
              "ctx": null,
              "_testId": "urn:uuid:a61b25cf-4881-4052-8ff4-a987a9718295",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Digital Bazaar",
                "columnId": "Trinsic"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 63253,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 17,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",\"https://w3id.org/security/data-integrity/v2\"],\"id\":\"urn:uuid:48b5df38-cbcd-47f0-b8b7-150f833ead80\",\"type\":[\"VerifiableCredential\"],\"issuer\":\"did:key:z6MkkwVJXDkKXhu2y3E1iF2cbzCUL42veRdzC7FFvNAeJ3Ja\",\"issuanceDate\":\"2020-03-16T22:37:26.544Z\",\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\"},\"proof\":{\"type\":\"DataIntegrityProof\",\"created\":\"2024-08-25T05:06:24Z\",\"verificationMethod\":\"did:key:z6MkkwVJXDkKXhu2y3E1iF2cbzCUL42veRdzC7FFvNAeJ3Ja#z6MkkwVJXDkKXhu2y3E1iF2cbzCUL42veRdzC7FFvNAeJ3Ja\",\"cryptosuite\":\"eddsa-rdfc-2022\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z4uivQBMmX5SgVSANw8Mz95EeMxve23bK1SSDwXoFrj2r63qzLD93gAPZBUs1U6uyuXmFoHvoRtnu9H7EuATUm6Ki\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          "https://w3id.org/security/data-integrity/v2"
                        ],
                        "id": "urn:uuid:48b5df38-cbcd-47f0-b8b7-150f833ead80",
                        "type": [
                          "VerifiableCredential"
                        ],
                        "issuer": "did:key:z6MkkwVJXDkKXhu2y3E1iF2cbzCUL42veRdzC7FFvNAeJ3Ja",
                        "issuanceDate": "2020-03-16T22:37:26.544Z",
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                        },
                        "proof": {
                          "type": "DataIntegrityProof",
                          "created": "2024-08-25T05:06:24Z",
                          "verificationMethod": "did:key:z6MkkwVJXDkKXhu2y3E1iF2cbzCUL42veRdzC7FFvNAeJ3Ja#z6MkkwVJXDkKXhu2y3E1iF2cbzCUL42veRdzC7FFvNAeJ3Ja",
                          "cryptosuite": "eddsa-rdfc-2022",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "z4uivQBMmX5SgVSANw8Mz95EeMxve23bK1SSDwXoFrj2r63qzLD93gAPZBUs1U6uyuXmFoHvoRtnu9H7EuATUm6Ki"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://interop.connect.trinsic.cloud/vc-api/credentials/verify",
                  "status": 400
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js:56:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "bovine should verify Digital Bazaar",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "3wh0kyFGTAC3zwGPljBw5",
              "ctx": null,
              "_testId": "urn:uuid:5374ecc3-f8f7-4e10-a4c9-df6019070c1c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Digital Bazaar",
                "columnId": "bovine"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 63271,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 98,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "Grotto Networking",
          "cells": [
            {
              "type": "test",
              "title": "apicatalog.com should verify Grotto Networking",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "3wh0kyFGTAC3zwGPljBw5",
              "ctx": null,
              "_testId": "urn:uuid:48bb7f32-95bc-4d22-9b35-7c8d5def3a7d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Grotto Networking",
                "columnId": "apicatalog.com"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 63370,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 51,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "Digital Bazaar should verify Grotto Networking",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "3wh0kyFGTAC3zwGPljBw5",
              "ctx": null,
              "_testId": "urn:uuid:9518497f-3188-4916-b0e2-0bea985493b9",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Grotto Networking",
                "columnId": "Digital Bazaar"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 63421,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 42,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "Grotto Networking should verify Grotto Networking",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "3wh0kyFGTAC3zwGPljBw5",
              "ctx": null,
              "_testId": "urn:uuid:7eb4b1b1-a061-4481-801f-c423509f3f0c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Grotto Networking",
                "columnId": "Grotto Networking"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 63463,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 83,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "OpSecId should verify Grotto Networking",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "3wh0kyFGTAC3zwGPljBw5",
              "ctx": null,
              "_testId": "urn:uuid:eeffef06-ca14-4a18-8771-67f30a0e3f54",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Grotto Networking",
                "columnId": "OpSecId"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 63546,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 34,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "SpruceID should verify Grotto Networking",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "3wh0kyFGTAC3zwGPljBw5",
              "ctx": null,
              "_testId": "urn:uuid:9d178417-c7b4-45b4-bb33-2abc86342fa6",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Grotto Networking",
                "columnId": "SpruceID"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 63580,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 50,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "Trinsic should verify Grotto Networking",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "3wh0kyFGTAC3zwGPljBw5",
              "ctx": null,
              "_testId": "urn:uuid:7e96d904-bc72-4867-9b18-82fc118fef63",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Grotto Networking",
                "columnId": "Trinsic"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 63631,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 20,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",\"https://w3id.org/security/data-integrity/v2\"],\"id\":\"urn:uuid:da56e1c6-1958-4c19-8ded-12c6599f8d94\",\"type\":[\"VerifiableCredential\"],\"issuer\":\"did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7\",\"issuanceDate\":\"2020-03-16T22:37:26.544Z\",\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\"},\"proof\":{\"type\":\"DataIntegrityProof\",\"cryptosuite\":\"eddsa-rdfc-2022\",\"created\":\"2024-08-25T05:06:24.557Z\",\"verificationMethod\":\"did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7#z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z2btYRmK2HQmE3VHCbyQrYe6dEbV2q2pfkh7h46Eh3QvJ3mks1PaTBnVGthNEShiAu9VEt3NVpP3fgYqQpfQvgvyV\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          "https://w3id.org/security/data-integrity/v2"
                        ],
                        "id": "urn:uuid:da56e1c6-1958-4c19-8ded-12c6599f8d94",
                        "type": [
                          "VerifiableCredential"
                        ],
                        "issuer": "did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7",
                        "issuanceDate": "2020-03-16T22:37:26.544Z",
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                        },
                        "proof": {
                          "type": "DataIntegrityProof",
                          "cryptosuite": "eddsa-rdfc-2022",
                          "created": "2024-08-25T05:06:24.557Z",
                          "verificationMethod": "did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7#z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "z2btYRmK2HQmE3VHCbyQrYe6dEbV2q2pfkh7h46Eh3QvJ3mks1PaTBnVGthNEShiAu9VEt3NVpP3fgYqQpfQvgvyV"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://interop.connect.trinsic.cloud/vc-api/credentials/verify",
                  "status": 400
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js:56:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "bovine should verify Grotto Networking",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "3wh0kyFGTAC3zwGPljBw5",
              "ctx": null,
              "_testId": "urn:uuid:15ec57a7-7d31-46a5-90cc-13a6767725c8",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Grotto Networking",
                "columnId": "bovine"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 63652,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 99,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",\"https://w3id.org/security/data-integrity/v2\"],\"id\":\"urn:uuid:da56e1c6-1958-4c19-8ded-12c6599f8d94\",\"type\":[\"VerifiableCredential\"],\"issuer\":\"did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7\",\"issuanceDate\":\"2020-03-16T22:37:26.544Z\",\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\"},\"proof\":{\"type\":\"DataIntegrityProof\",\"cryptosuite\":\"eddsa-rdfc-2022\",\"created\":\"2024-08-25T05:06:24.557Z\",\"verificationMethod\":\"did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7#z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z2btYRmK2HQmE3VHCbyQrYe6dEbV2q2pfkh7h46Eh3QvJ3mks1PaTBnVGthNEShiAu9VEt3NVpP3fgYqQpfQvgvyV\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          "https://w3id.org/security/data-integrity/v2"
                        ],
                        "id": "urn:uuid:da56e1c6-1958-4c19-8ded-12c6599f8d94",
                        "type": [
                          "VerifiableCredential"
                        ],
                        "issuer": "did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7",
                        "issuanceDate": "2020-03-16T22:37:26.544Z",
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                        },
                        "proof": {
                          "type": "DataIntegrityProof",
                          "cryptosuite": "eddsa-rdfc-2022",
                          "created": "2024-08-25T05:06:24.557Z",
                          "verificationMethod": "did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7#z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "z2btYRmK2HQmE3VHCbyQrYe6dEbV2q2pfkh7h46Eh3QvJ3mks1PaTBnVGthNEShiAu9VEt3NVpP3fgYqQpfQvgvyV"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://bovine.social/w3c-di/verify",
                  "status": 400
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js:56:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            }
          ]
        },
        {
          "id": "OpSecId",
          "cells": [
            {
              "type": "test",
              "title": "apicatalog.com should verify OpSecId",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "3wh0kyFGTAC3zwGPljBw5",
              "ctx": null,
              "_testId": "urn:uuid:42010a30-d59e-4b67-bd0b-195f5ae4a6eb",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "OpSecId",
                "columnId": "apicatalog.com"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 63752,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected issuer: OpSecId to issue a VC: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected issuer: OpSecId to issue a VC: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js:48:16)\n    at process.processImmediate (node:internal/timers:483:21)"
              }
            },
            {
              "type": "test",
              "title": "Digital Bazaar should verify OpSecId",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "3wh0kyFGTAC3zwGPljBw5",
              "ctx": null,
              "_testId": "urn:uuid:cb1b293f-94cf-4a0d-b20b-3a61c3900819",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "OpSecId",
                "columnId": "Digital Bazaar"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 63753,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected issuer: OpSecId to issue a VC: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected issuer: OpSecId to issue a VC: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js:48:16)\n    at process.processImmediate (node:internal/timers:483:21)"
              }
            },
            {
              "type": "test",
              "title": "Grotto Networking should verify OpSecId",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "3wh0kyFGTAC3zwGPljBw5",
              "ctx": null,
              "_testId": "urn:uuid:79be6f81-d932-4627-82fa-b7a8c70dbf37",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "OpSecId",
                "columnId": "Grotto Networking"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 63753,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected issuer: OpSecId to issue a VC: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected issuer: OpSecId to issue a VC: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js:48:16)\n    at process.processImmediate (node:internal/timers:483:21)"
              }
            },
            {
              "type": "test",
              "title": "OpSecId should verify OpSecId",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "3wh0kyFGTAC3zwGPljBw5",
              "ctx": null,
              "_testId": "urn:uuid:8dc1081f-1efc-4444-86d2-65b82f18e17b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "OpSecId",
                "columnId": "OpSecId"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 63753,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected issuer: OpSecId to issue a VC: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected issuer: OpSecId to issue a VC: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js:48:16)\n    at process.processImmediate (node:internal/timers:483:21)"
              }
            },
            {
              "type": "test",
              "title": "SpruceID should verify OpSecId",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "3wh0kyFGTAC3zwGPljBw5",
              "ctx": null,
              "_testId": "urn:uuid:2057918f-f1ce-40be-900b-928ca330b5bb",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "OpSecId",
                "columnId": "SpruceID"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 63754,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected issuer: OpSecId to issue a VC: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected issuer: OpSecId to issue a VC: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js:48:16)\n    at process.processImmediate (node:internal/timers:483:21)"
              }
            },
            {
              "type": "test",
              "title": "Trinsic should verify OpSecId",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "3wh0kyFGTAC3zwGPljBw5",
              "ctx": null,
              "_testId": "urn:uuid:f37ad0aa-819b-4f78-beab-cbdeaf3d50b9",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "OpSecId",
                "columnId": "Trinsic"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 63754,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected issuer: OpSecId to issue a VC: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected issuer: OpSecId to issue a VC: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js:48:16)\n    at process.processImmediate (node:internal/timers:483:21)"
              }
            },
            {
              "type": "test",
              "title": "bovine should verify OpSecId",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "3wh0kyFGTAC3zwGPljBw5",
              "ctx": null,
              "_testId": "urn:uuid:d172b6d6-0ea2-42c5-9ad4-91b1b4a72c5a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "OpSecId",
                "columnId": "bovine"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 63754,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected issuer: OpSecId to issue a VC: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected issuer: OpSecId to issue a VC: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js:48:16)\n    at process.processImmediate (node:internal/timers:483:21)"
              }
            }
          ]
        },
        {
          "id": "SpruceID",
          "cells": [
            {
              "type": "test",
              "title": "apicatalog.com should verify SpruceID",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "3wh0kyFGTAC3zwGPljBw5",
              "ctx": null,
              "_testId": "urn:uuid:3beff2a5-4768-49a3-b3ed-54f901658ef7",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "SpruceID",
                "columnId": "apicatalog.com"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 63755,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 48,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",\"https://w3id.org/security/data-integrity/v2\"],\"id\":\"urn:uuid:8cb51f49-e937-4f1a-8125-ce830c06b8ad\",\"type\":[\"VerifiableCredential\"],\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\"},\"issuer\":\"did:key:z6MkgYAGxLBSXa6Ygk1PnUbK2F7zya8juE9nfsZhrvY7c9GD\",\"issuanceDate\":\"2020-03-16T22:37:26.544Z\",\"proof\":{\"type\":\"DataIntegrityProof\",\"cryptosuite\":\"eddsa-rdfc-2022\",\"verificationMethod\":\"did:key:z6MkgYAGxLBSXa6Ygk1PnUbK2F7zya8juE9nfsZhrvY7c9GD#z6MkgYAGxLBSXa6Ygk1PnUbK2F7zya8juE9nfsZhrvY7c9GD\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z2Wb1gKVQJgyerzFXyq5gnUHZYagnCGH5kUYCZpU4BRimCo2TTeV5eakinDu6KseKWN7bEAbEkHwwGm6xnLZ78u9x\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          "https://w3id.org/security/data-integrity/v2"
                        ],
                        "id": "urn:uuid:8cb51f49-e937-4f1a-8125-ce830c06b8ad",
                        "type": [
                          "VerifiableCredential"
                        ],
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                        },
                        "issuer": "did:key:z6MkgYAGxLBSXa6Ygk1PnUbK2F7zya8juE9nfsZhrvY7c9GD",
                        "issuanceDate": "2020-03-16T22:37:26.544Z",
                        "proof": {
                          "type": "DataIntegrityProof",
                          "cryptosuite": "eddsa-rdfc-2022",
                          "verificationMethod": "did:key:z6MkgYAGxLBSXa6Ygk1PnUbK2F7zya8juE9nfsZhrvY7c9GD#z6MkgYAGxLBSXa6Ygk1PnUbK2F7zya8juE9nfsZhrvY7c9GD",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "z2Wb1gKVQJgyerzFXyq5gnUHZYagnCGH5kUYCZpU4BRimCo2TTeV5eakinDu6KseKWN7bEAbEkHwwGm6xnLZ78u9x"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc.apicatalog.com/credentials/verify",
                  "status": 400,
                  "data": {
                    "checks": [
                      "PROOF"
                    ],
                    "warnings": [],
                    "errors": [
                      "MALFORMED",
                      "MISSING_CREATED"
                    ]
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js:56:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "Digital Bazaar should verify SpruceID",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "3wh0kyFGTAC3zwGPljBw5",
              "ctx": null,
              "_testId": "urn:uuid:bd6bbb46-0f44-48f5-9069-954c5218e303",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "SpruceID",
                "columnId": "Digital Bazaar"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 63803,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 62,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "Grotto Networking should verify SpruceID",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "3wh0kyFGTAC3zwGPljBw5",
              "ctx": null,
              "_testId": "urn:uuid:b7d634d5-8f10-47a8-b5ff-4eba9644fdb3",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "SpruceID",
                "columnId": "Grotto Networking"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 63866,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 80,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "OpSecId should verify SpruceID",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "3wh0kyFGTAC3zwGPljBw5",
              "ctx": null,
              "_testId": "urn:uuid:6ba2f408-5dcc-4833-8cd6-f7bd1ed205f0",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "SpruceID",
                "columnId": "OpSecId"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 63946,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 37,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "SpruceID should verify SpruceID",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "3wh0kyFGTAC3zwGPljBw5",
              "ctx": null,
              "_testId": "urn:uuid:8ba890c9-d444-410a-9063-d560a2fd8663",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "SpruceID",
                "columnId": "SpruceID"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 63984,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 35,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Trinsic should verify SpruceID",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "3wh0kyFGTAC3zwGPljBw5",
              "ctx": null,
              "_testId": "urn:uuid:de2a917b-83a8-481f-875d-47a1418facc1",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "SpruceID",
                "columnId": "Trinsic"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 64020,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 19,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",\"https://w3id.org/security/data-integrity/v2\"],\"id\":\"urn:uuid:8cb51f49-e937-4f1a-8125-ce830c06b8ad\",\"type\":[\"VerifiableCredential\"],\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\"},\"issuer\":\"did:key:z6MkgYAGxLBSXa6Ygk1PnUbK2F7zya8juE9nfsZhrvY7c9GD\",\"issuanceDate\":\"2020-03-16T22:37:26.544Z\",\"proof\":{\"type\":\"DataIntegrityProof\",\"cryptosuite\":\"eddsa-rdfc-2022\",\"verificationMethod\":\"did:key:z6MkgYAGxLBSXa6Ygk1PnUbK2F7zya8juE9nfsZhrvY7c9GD#z6MkgYAGxLBSXa6Ygk1PnUbK2F7zya8juE9nfsZhrvY7c9GD\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z2Wb1gKVQJgyerzFXyq5gnUHZYagnCGH5kUYCZpU4BRimCo2TTeV5eakinDu6KseKWN7bEAbEkHwwGm6xnLZ78u9x\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          "https://w3id.org/security/data-integrity/v2"
                        ],
                        "id": "urn:uuid:8cb51f49-e937-4f1a-8125-ce830c06b8ad",
                        "type": [
                          "VerifiableCredential"
                        ],
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                        },
                        "issuer": "did:key:z6MkgYAGxLBSXa6Ygk1PnUbK2F7zya8juE9nfsZhrvY7c9GD",
                        "issuanceDate": "2020-03-16T22:37:26.544Z",
                        "proof": {
                          "type": "DataIntegrityProof",
                          "cryptosuite": "eddsa-rdfc-2022",
                          "verificationMethod": "did:key:z6MkgYAGxLBSXa6Ygk1PnUbK2F7zya8juE9nfsZhrvY7c9GD#z6MkgYAGxLBSXa6Ygk1PnUbK2F7zya8juE9nfsZhrvY7c9GD",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "z2Wb1gKVQJgyerzFXyq5gnUHZYagnCGH5kUYCZpU4BRimCo2TTeV5eakinDu6KseKWN7bEAbEkHwwGm6xnLZ78u9x"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://interop.connect.trinsic.cloud/vc-api/credentials/verify",
                  "status": 400
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js:56:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "bovine should verify SpruceID",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "3wh0kyFGTAC3zwGPljBw5",
              "ctx": null,
              "_testId": "urn:uuid:94c41fde-b159-42ff-aa26-6384f5e5fd02",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "SpruceID",
                "columnId": "bovine"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 64040,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 96,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "Trinsic",
          "cells": [
            {
              "type": "test",
              "title": "apicatalog.com should verify Trinsic",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "3wh0kyFGTAC3zwGPljBw5",
              "ctx": null,
              "_testId": "urn:uuid:c68e7c98-ecee-4963-89a2-c923a499362e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Trinsic",
                "columnId": "apicatalog.com"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 64135,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 41,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",\"https://w3id.org/security/data-integrity/v1\"],\"id\":\"urn:uuid:d190e319-fc08-4daf-8d9e-9d8628230d14\",\"type\":[\"VerifiableCredential\"],\"issuer\":\"did:key:z6MkqbpLSbqnY1pxVyhBCDYcFsv4ZgGgqP32kzNrf5deWVPU\",\"issuanceDate\":\"2020-03-16T22:37:26.544Z\",\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\"},\"proof\":{\"type\":\"DataIntegrityProof\",\"created\":\"2024-08-25T05:06:24.7107460Z\",\"proofPurpose\":\"assertionMethod\",\"verificationMethod\":\"did:key:z6MkqbpLSbqnY1pxVyhBCDYcFsv4ZgGgqP32kzNrf5deWVPU#z6MkqbpLSbqnY1pxVyhBCDYcFsv4ZgGgqP32kzNrf5deWVPU\",\"cryptosuite\":\"eddsa-2022\",\"proofValue\":\"z5UzxtBt6PfnRWWFwPxqeW2RyThRb5UwX4NSMf12wwPrVL4HYLkqkszSP6aJ1z4CV3mznKuZNxcKcwo7V6CLm7GAP\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          "https://w3id.org/security/data-integrity/v1"
                        ],
                        "id": "urn:uuid:d190e319-fc08-4daf-8d9e-9d8628230d14",
                        "type": [
                          "VerifiableCredential"
                        ],
                        "issuer": "did:key:z6MkqbpLSbqnY1pxVyhBCDYcFsv4ZgGgqP32kzNrf5deWVPU",
                        "issuanceDate": "2020-03-16T22:37:26.544Z",
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                        },
                        "proof": {
                          "type": "DataIntegrityProof",
                          "created": "2024-08-25T05:06:24.7107460Z",
                          "proofPurpose": "assertionMethod",
                          "verificationMethod": "did:key:z6MkqbpLSbqnY1pxVyhBCDYcFsv4ZgGgqP32kzNrf5deWVPU#z6MkqbpLSbqnY1pxVyhBCDYcFsv4ZgGgqP32kzNrf5deWVPU",
                          "cryptosuite": "eddsa-2022",
                          "proofValue": "z5UzxtBt6PfnRWWFwPxqeW2RyThRb5UwX4NSMf12wwPrVL4HYLkqkszSP6aJ1z4CV3mznKuZNxcKcwo7V6CLm7GAP"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc.apicatalog.com/credentials/verify",
                  "status": 400,
                  "data": {
                    "checks": [
                      "PROOF",
                      "INVALID_PROOF_CONFIGURATION"
                    ],
                    "warnings": [],
                    "errors": []
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js:56:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "Digital Bazaar should verify Trinsic",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "3wh0kyFGTAC3zwGPljBw5",
              "ctx": null,
              "_testId": "urn:uuid:a7d35481-c57d-4a23-9b93-336c7e2dcbc4",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Trinsic",
                "columnId": "Digital Bazaar"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 64178,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 43,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "Grotto Networking should verify Trinsic",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "3wh0kyFGTAC3zwGPljBw5",
              "ctx": null,
              "_testId": "urn:uuid:99027ceb-3309-40f4-8774-4c120d720eda",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Trinsic",
                "columnId": "Grotto Networking"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 64221,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 71,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",\"https://w3id.org/security/data-integrity/v1\"],\"id\":\"urn:uuid:d190e319-fc08-4daf-8d9e-9d8628230d14\",\"type\":[\"VerifiableCredential\"],\"issuer\":\"did:key:z6MkqbpLSbqnY1pxVyhBCDYcFsv4ZgGgqP32kzNrf5deWVPU\",\"issuanceDate\":\"2020-03-16T22:37:26.544Z\",\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\"},\"proof\":{\"type\":\"DataIntegrityProof\",\"created\":\"2024-08-25T05:06:24.7107460Z\",\"proofPurpose\":\"assertionMethod\",\"verificationMethod\":\"did:key:z6MkqbpLSbqnY1pxVyhBCDYcFsv4ZgGgqP32kzNrf5deWVPU#z6MkqbpLSbqnY1pxVyhBCDYcFsv4ZgGgqP32kzNrf5deWVPU\",\"cryptosuite\":\"eddsa-2022\",\"proofValue\":\"z5UzxtBt6PfnRWWFwPxqeW2RyThRb5UwX4NSMf12wwPrVL4HYLkqkszSP6aJ1z4CV3mznKuZNxcKcwo7V6CLm7GAP\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          "https://w3id.org/security/data-integrity/v1"
                        ],
                        "id": "urn:uuid:d190e319-fc08-4daf-8d9e-9d8628230d14",
                        "type": [
                          "VerifiableCredential"
                        ],
                        "issuer": "did:key:z6MkqbpLSbqnY1pxVyhBCDYcFsv4ZgGgqP32kzNrf5deWVPU",
                        "issuanceDate": "2020-03-16T22:37:26.544Z",
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                        },
                        "proof": {
                          "type": "DataIntegrityProof",
                          "created": "2024-08-25T05:06:24.7107460Z",
                          "proofPurpose": "assertionMethod",
                          "verificationMethod": "did:key:z6MkqbpLSbqnY1pxVyhBCDYcFsv4ZgGgqP32kzNrf5deWVPU#z6MkqbpLSbqnY1pxVyhBCDYcFsv4ZgGgqP32kzNrf5deWVPU",
                          "cryptosuite": "eddsa-2022",
                          "proofValue": "z5UzxtBt6PfnRWWFwPxqeW2RyThRb5UwX4NSMf12wwPrVL4HYLkqkszSP6aJ1z4CV3mznKuZNxcKcwo7V6CLm7GAP"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://ecdsa-sd.grotto-networking.com/EdDSA-RDFC/credentials/verify",
                  "status": 400,
                  "data": {
                    "errors": [
                      "proof: must be equal to one of the allowed values"
                    ]
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js:56:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "OpSecId should verify Trinsic",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "3wh0kyFGTAC3zwGPljBw5",
              "ctx": null,
              "_testId": "urn:uuid:f365f956-413b-4bf2-8e71-8bbca53c0565",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Trinsic",
                "columnId": "OpSecId"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 64294,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 24,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",\"https://w3id.org/security/data-integrity/v1\"],\"id\":\"urn:uuid:d190e319-fc08-4daf-8d9e-9d8628230d14\",\"type\":[\"VerifiableCredential\"],\"issuer\":\"did:key:z6MkqbpLSbqnY1pxVyhBCDYcFsv4ZgGgqP32kzNrf5deWVPU\",\"issuanceDate\":\"2020-03-16T22:37:26.544Z\",\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\"},\"proof\":{\"type\":\"DataIntegrityProof\",\"created\":\"2024-08-25T05:06:24.7107460Z\",\"proofPurpose\":\"assertionMethod\",\"verificationMethod\":\"did:key:z6MkqbpLSbqnY1pxVyhBCDYcFsv4ZgGgqP32kzNrf5deWVPU#z6MkqbpLSbqnY1pxVyhBCDYcFsv4ZgGgqP32kzNrf5deWVPU\",\"cryptosuite\":\"eddsa-2022\",\"proofValue\":\"z5UzxtBt6PfnRWWFwPxqeW2RyThRb5UwX4NSMf12wwPrVL4HYLkqkszSP6aJ1z4CV3mznKuZNxcKcwo7V6CLm7GAP\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          "https://w3id.org/security/data-integrity/v1"
                        ],
                        "id": "urn:uuid:d190e319-fc08-4daf-8d9e-9d8628230d14",
                        "type": [
                          "VerifiableCredential"
                        ],
                        "issuer": "did:key:z6MkqbpLSbqnY1pxVyhBCDYcFsv4ZgGgqP32kzNrf5deWVPU",
                        "issuanceDate": "2020-03-16T22:37:26.544Z",
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                        },
                        "proof": {
                          "type": "DataIntegrityProof",
                          "created": "2024-08-25T05:06:24.7107460Z",
                          "proofPurpose": "assertionMethod",
                          "verificationMethod": "did:key:z6MkqbpLSbqnY1pxVyhBCDYcFsv4ZgGgqP32kzNrf5deWVPU#z6MkqbpLSbqnY1pxVyhBCDYcFsv4ZgGgqP32kzNrf5deWVPU",
                          "cryptosuite": "eddsa-2022",
                          "proofValue": "z5UzxtBt6PfnRWWFwPxqeW2RyThRb5UwX4NSMf12wwPrVL4HYLkqkszSP6aJ1z4CV3mznKuZNxcKcwo7V6CLm7GAP"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://agent.opsec.id/vc/credentials/verify",
                  "status": 422,
                  "data": {
                    "json": {
                      "verifiableCredential": {
                        "proof": {
                          "created": [
                            "Value 2024-08-25T05:06:24.7107460Z is not a date in valid format"
                          ]
                        }
                      }
                    }
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js:56:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "SpruceID should verify Trinsic",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "3wh0kyFGTAC3zwGPljBw5",
              "ctx": null,
              "_testId": "urn:uuid:b49a1c61-cd5c-47e6-b2f6-5e8be25840c3",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Trinsic",
                "columnId": "SpruceID"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 64319,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 28,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",\"https://w3id.org/security/data-integrity/v1\"],\"id\":\"urn:uuid:d190e319-fc08-4daf-8d9e-9d8628230d14\",\"type\":[\"VerifiableCredential\"],\"issuer\":\"did:key:z6MkqbpLSbqnY1pxVyhBCDYcFsv4ZgGgqP32kzNrf5deWVPU\",\"issuanceDate\":\"2020-03-16T22:37:26.544Z\",\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\"},\"proof\":{\"type\":\"DataIntegrityProof\",\"created\":\"2024-08-25T05:06:24.7107460Z\",\"proofPurpose\":\"assertionMethod\",\"verificationMethod\":\"did:key:z6MkqbpLSbqnY1pxVyhBCDYcFsv4ZgGgqP32kzNrf5deWVPU#z6MkqbpLSbqnY1pxVyhBCDYcFsv4ZgGgqP32kzNrf5deWVPU\",\"cryptosuite\":\"eddsa-2022\",\"proofValue\":\"z5UzxtBt6PfnRWWFwPxqeW2RyThRb5UwX4NSMf12wwPrVL4HYLkqkszSP6aJ1z4CV3mznKuZNxcKcwo7V6CLm7GAP\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          "https://w3id.org/security/data-integrity/v1"
                        ],
                        "id": "urn:uuid:d190e319-fc08-4daf-8d9e-9d8628230d14",
                        "type": [
                          "VerifiableCredential"
                        ],
                        "issuer": "did:key:z6MkqbpLSbqnY1pxVyhBCDYcFsv4ZgGgqP32kzNrf5deWVPU",
                        "issuanceDate": "2020-03-16T22:37:26.544Z",
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                        },
                        "proof": {
                          "type": "DataIntegrityProof",
                          "created": "2024-08-25T05:06:24.7107460Z",
                          "proofPurpose": "assertionMethod",
                          "verificationMethod": "did:key:z6MkqbpLSbqnY1pxVyhBCDYcFsv4ZgGgqP32kzNrf5deWVPU#z6MkqbpLSbqnY1pxVyhBCDYcFsv4ZgGgqP32kzNrf5deWVPU",
                          "cryptosuite": "eddsa-2022",
                          "proofValue": "z5UzxtBt6PfnRWWFwPxqeW2RyThRb5UwX4NSMf12wwPrVL4HYLkqkszSP6aJ1z4CV3mznKuZNxcKcwo7V6CLm7GAP"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc.spruceid.xyz/credentials/verify",
                  "status": 400
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js:56:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "Trinsic should verify Trinsic",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "3wh0kyFGTAC3zwGPljBw5",
              "ctx": null,
              "_testId": "urn:uuid:72753fa9-f10b-45d3-a06e-0f0c1e28ae67",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Trinsic",
                "columnId": "Trinsic"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 64347,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 38,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "bovine should verify Trinsic",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "3wh0kyFGTAC3zwGPljBw5",
              "ctx": null,
              "_testId": "urn:uuid:7158cc74-867e-4a7f-9f47-ff9065b635c5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Trinsic",
                "columnId": "bovine"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 64385,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 92,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",\"https://w3id.org/security/data-integrity/v1\"],\"id\":\"urn:uuid:d190e319-fc08-4daf-8d9e-9d8628230d14\",\"type\":[\"VerifiableCredential\"],\"issuer\":\"did:key:z6MkqbpLSbqnY1pxVyhBCDYcFsv4ZgGgqP32kzNrf5deWVPU\",\"issuanceDate\":\"2020-03-16T22:37:26.544Z\",\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\"},\"proof\":{\"type\":\"DataIntegrityProof\",\"created\":\"2024-08-25T05:06:24.7107460Z\",\"proofPurpose\":\"assertionMethod\",\"verificationMethod\":\"did:key:z6MkqbpLSbqnY1pxVyhBCDYcFsv4ZgGgqP32kzNrf5deWVPU#z6MkqbpLSbqnY1pxVyhBCDYcFsv4ZgGgqP32kzNrf5deWVPU\",\"cryptosuite\":\"eddsa-2022\",\"proofValue\":\"z5UzxtBt6PfnRWWFwPxqeW2RyThRb5UwX4NSMf12wwPrVL4HYLkqkszSP6aJ1z4CV3mznKuZNxcKcwo7V6CLm7GAP\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          "https://w3id.org/security/data-integrity/v1"
                        ],
                        "id": "urn:uuid:d190e319-fc08-4daf-8d9e-9d8628230d14",
                        "type": [
                          "VerifiableCredential"
                        ],
                        "issuer": "did:key:z6MkqbpLSbqnY1pxVyhBCDYcFsv4ZgGgqP32kzNrf5deWVPU",
                        "issuanceDate": "2020-03-16T22:37:26.544Z",
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                        },
                        "proof": {
                          "type": "DataIntegrityProof",
                          "created": "2024-08-25T05:06:24.7107460Z",
                          "proofPurpose": "assertionMethod",
                          "verificationMethod": "did:key:z6MkqbpLSbqnY1pxVyhBCDYcFsv4ZgGgqP32kzNrf5deWVPU#z6MkqbpLSbqnY1pxVyhBCDYcFsv4ZgGgqP32kzNrf5deWVPU",
                          "cryptosuite": "eddsa-2022",
                          "proofValue": "z5UzxtBt6PfnRWWFwPxqeW2RyThRb5UwX4NSMf12wwPrVL4HYLkqkszSP6aJ1z4CV3mznKuZNxcKcwo7V6CLm7GAP"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://bovine.social/w3c-di/verify",
                  "status": 400
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js:56:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            }
          ]
        },
        {
          "id": "bovine",
          "cells": [
            {
              "type": "test",
              "title": "apicatalog.com should verify bovine",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "3wh0kyFGTAC3zwGPljBw5",
              "ctx": null,
              "_testId": "urn:uuid:2d67b79c-c3a3-48d3-9c5e-0efe9437d5ed",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "bovine",
                "columnId": "apicatalog.com"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 64478,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 210,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Digital Bazaar should verify bovine",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "3wh0kyFGTAC3zwGPljBw5",
              "ctx": null,
              "_testId": "urn:uuid:ee4992af-6ed4-4d65-b53b-4f0a0fc0117a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "bovine",
                "columnId": "Digital Bazaar"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 64688,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 35,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: A validation error occured in … { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          "https://w3id.org/security/data-integrity/v2"
                        ],
                        "credentialSubject": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b",
                        "id": "urn:uuid:7518fe3b-c3f2-4aa6-b14e-99397e31c732",
                        "issuanceDate": "2020-03-16T22:37:26.544Z",
                        "issuer": "did:key:z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd",
                        "proof": {
                          "created": "2024-08-25T05:06:24Z",
                          "cryptosuite": "eddsa-rdfc-2022",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "z4REiu1k5Ec5J6zYdn1M5c7rJtmNU5FjXDAWt7772E2Uf5BjQj5Lv1P9U7ngCJQLjbmGD7id3wpGQZTmdJeFQjXs2",
                          "type": "DataIntegrityProof",
                          "verificationMethod": "did:key:z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd#z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd"
                        },
                        "type": "VerifiableCredential"
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half",
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",\"https://w3id.org/security/data-integrity/v2\"],\"credentialSubject\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\",\"id\":\"urn:uuid:7518fe3b-c3f2-4aa6-b14e-99397e31c732\",\"issuanceDate\":\"2020-03-16T22:37:26.544Z\",\"issuer\":\"did:key:z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd\",\"proof\":{\"created\":\"2024-08-25T05:06:24Z\",\"cryptosuite\":\"eddsa-rdfc-2022\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z4REiu1k5Ec5J6zYdn1M5c7rJtmNU5FjXDAWt7772E2Uf5BjQj5Lv1P9U7ngCJQLjbmGD7id3wpGQZTmdJeFQjXs2\",\"type\":\"DataIntegrityProof\",\"verificationMethod\":\"did:key:z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd#z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd\"},\"type\":\"VerifiableCredential\"},\"options\":{\"checks\":[\"proof\"]}}"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc2.veresverifier.dev/verifiers/z19w7KofwvE2nkJeRVLp8NDxz/credentials/verify",
                  "status": 400,
                  "data": {
                    "name": "ValidationError",
                    "message": "A validation error occured in the 'Verify Credential Body' validator.",
                    "details": {
                      "errors": [
                        {
                          "stack": "ValidationError: should be object\n    at _createError (file:///home/node/app/node_modules/@bedrock/validation/lib/index.js:240:17)\n    at validate (file:///home/node/app/node_modules/@bedrock/validation/lib/index.js:88:14)\n    at validate (file:///home/node/app/node_modules/@bedrock/validation/lib/index.js:181:22)\n    at Layer.handle [as handle_request] (/home/node/app/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/node/app/node_modules/express/lib/router/route.js:149:13)\n    at cors (/home/node/app/node_modules/cors/lib/index.js:188:7)\n    at /home/node/app/node_modules/cors/lib/index.js:224:17\n    at originCallback (/home/node/app/node_modules/cors/lib/index.js:214:15)\n    at /home/node/app/node_modules/cors/lib/index.js:219:13\n    at optionsCallback (/home/node/app/node_modules/cors/lib/index.js:199:9)",
                          "name": "ValidationError",
                          "message": "should be object",
                          "details": {
                            "instance": {
                              "verifiableCredential": {
                                "@context": [
                                  "https://www.w3.org/2018/credentials/v1",
                                  "https://w3id.org/security/data-integrity/v2"
                                ],
                                "credentialSubject": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b",
                                "id": "urn:uuid:7518fe3b-c3f2-4aa6-b14e-99397e31c732",
                                "issuanceDate": "2020-03-16T22:37:26.544Z",
                                "issuer": "did:key:z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd",
                                "proof": {
                                  "created": "2024-08-25T05:06:24Z",
                                  "cryptosuite": "eddsa-rdfc-2022",
                                  "proofPurpose": "assertionMethod",
                                  "proofValue": "z4REiu1k5Ec5J6zYdn1M5c7rJtmNU5FjXDAWt7772E2Uf5BjQj5Lv1P9U7ngCJQLjbmGD7id3wpGQZTmdJeFQjXs2",
                                  "type": "DataIntegrityProof",
                                  "verificationMethod": "did:key:z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd#z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd"
                                },
                                "type": "VerifiableCredential"
                              },
                              "options": {
                                "checks": [
                                  "proof"
                                ]
                              }
                            },
                            "params": {
                              "type": "object"
                            },
                            "path": ".verifiableCredential.credentialSubject",
                            "public": true,
                            "schemaPath": "#/properties/verifiableCredential/anyOf/0/properties/credentialSubject/anyOf/0/type",
                            "schema": {
                              "description": "",
                              "title": ""
                            },
                            "value": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                          },
                          "cause": null
                        },
                        {
                          "stack": "ValidationError: should be array\n    at _createError (file:///home/node/app/node_modules/@bedrock/validation/lib/index.js:240:17)\n    at validate (file:///home/node/app/node_modules/@bedrock/validation/lib/index.js:88:14)\n    at validate (file:///home/node/app/node_modules/@bedrock/validation/lib/index.js:181:22)\n    at Layer.handle [as handle_request] (/home/node/app/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/node/app/node_modules/express/lib/router/route.js:149:13)\n    at cors (/home/node/app/node_modules/cors/lib/index.js:188:7)\n    at /home/node/app/node_modules/cors/lib/index.js:224:17\n    at originCallback (/home/node/app/node_modules/cors/lib/index.js:214:15)\n    at /home/node/app/node_modules/cors/lib/index.js:219:13\n    at optionsCallback (/home/node/app/node_modules/cors/lib/index.js:199:9)",
                          "name": "ValidationError",
                          "message": "should be array",
                          "details": {
                            "instance": {
                              "verifiableCredential": {
                                "@context": [
                                  "https://www.w3.org/2018/credentials/v1",
                                  "https://w3id.org/security/data-integrity/v2"
                                ],
                                "credentialSubject": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b",
                                "id": "urn:uuid:7518fe3b-c3f2-4aa6-b14e-99397e31c732",
                                "issuanceDate": "2020-03-16T22:37:26.544Z",
                                "issuer": "did:key:z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd",
                                "proof": {
                                  "created": "2024-08-25T05:06:24Z",
                                  "cryptosuite": "eddsa-rdfc-2022",
                                  "proofPurpose": "assertionMethod",
                                  "proofValue": "z4REiu1k5Ec5J6zYdn1M5c7rJtmNU5FjXDAWt7772E2Uf5BjQj5Lv1P9U7ngCJQLjbmGD7id3wpGQZTmdJeFQjXs2",
                                  "type": "DataIntegrityProof",
                                  "verificationMethod": "did:key:z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd#z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd"
                                },
                                "type": "VerifiableCredential"
                              },
                              "options": {
                                "checks": [
                                  "proof"
                                ]
                              }
                            },
                            "params": {
                              "type": "array"
                            },
                            "path": ".verifiableCredential.credentialSubject",
                            "public": true,
                            "schemaPath": "#/properties/verifiableCredential/anyOf/0/properties/credentialSubject/anyOf/1/type",
                            "schema": {
                              "description": "",
                              "title": ""
                            },
                            "value": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                          },
                          "cause": null
                        },
                        {
                          "stack": "ValidationError: should match some schema in anyOf\n    at _createError (file:///home/node/app/node_modules/@bedrock/validation/lib/index.js:240:17)\n    at validate (file:///home/node/app/node_modules/@bedrock/validation/lib/index.js:88:14)\n    at validate (file:///home/node/app/node_modules/@bedrock/validation/lib/index.js:181:22)\n    at Layer.handle [as handle_request] (/home/node/app/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/node/app/node_modules/express/lib/router/route.js:149:13)\n    at cors (/home/node/app/node_modules/cors/lib/index.js:188:7)\n    at /home/node/app/node_modules/cors/lib/index.js:224:17\n    at originCallback (/home/node/app/node_modules/cors/lib/index.js:214:15)\n    at /home/node/app/node_modules/cors/lib/index.js:219:13\n    at optionsCallback (/home/node/app/node_modules/cors/lib/index.js:199:9)",
                          "name": "ValidationError",
                          "message": "should match some schema in anyOf",
                          "details": {
                            "instance": {
                              "verifiableCredential": {
                                "@context": [
                                  "https://www.w3.org/2018/credentials/v1",
                                  "https://w3id.org/security/data-integrity/v2"
                                ],
                                "credentialSubject": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b",
                                "id": "urn:uuid:7518fe3b-c3f2-4aa6-b14e-99397e31c732",
                                "issuanceDate": "2020-03-16T22:37:26.544Z",
                                "issuer": "did:key:z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd",
                                "proof": {
                                  "created": "2024-08-25T05:06:24Z",
                                  "cryptosuite": "eddsa-rdfc-2022",
                                  "proofPurpose": "assertionMethod",
                                  "proofValue": "z4REiu1k5Ec5J6zYdn1M5c7rJtmNU5FjXDAWt7772E2Uf5BjQj5Lv1P9U7ngCJQLjbmGD7id3wpGQZTmdJeFQjXs2",
                                  "type": "DataIntegrityProof",
                                  "verificationMethod": "did:key:z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd#z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd"
                                },
                                "type": "VerifiableCredential"
                              },
                              "options": {
                                "checks": [
                                  "proof"
                                ]
                              }
                            },
                            "params": {},
                            "path": ".verifiableCredential.credentialSubject",
                            "public": true,
                            "schemaPath": "#/properties/verifiableCredential/anyOf/0/properties/credentialSubject/anyOf",
                            "schema": {
                              "description": "",
                              "title": {
                                "type": "object"
                              }
                            },
                            "value": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                          },
                          "cause": null
                        },
                        {
                          "stack": "ValidationError: should NOT have additional properties\n    at _createError (file:///home/node/app/node_modules/@bedrock/validation/lib/index.js:240:17)\n    at validate (file:///home/node/app/node_modules/@bedrock/validation/lib/index.js:88:14)\n    at validate (file:///home/node/app/node_modules/@bedrock/validation/lib/index.js:181:22)\n    at Layer.handle [as handle_request] (/home/node/app/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/node/app/node_modules/express/lib/router/route.js:149:13)\n    at cors (/home/node/app/node_modules/cors/lib/index.js:188:7)\n    at /home/node/app/node_modules/cors/lib/index.js:224:17\n    at originCallback (/home/node/app/node_modules/cors/lib/index.js:214:15)\n    at /home/node/app/node_modules/cors/lib/index.js:219:13\n    at optionsCallback (/home/node/app/node_modules/cors/lib/index.js:199:9)",
                          "name": "ValidationError",
                          "message": "should NOT have additional properties",
                          "details": {
                            "instance": {
                              "verifiableCredential": {
                                "@context": [
                                  "https://www.w3.org/2018/credentials/v1",
                                  "https://w3id.org/security/data-integrity/v2"
                                ],
                                "credentialSubject": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b",
                                "id": "urn:uuid:7518fe3b-c3f2-4aa6-b14e-99397e31c732",
                                "issuanceDate": "2020-03-16T22:37:26.544Z",
                                "issuer": "did:key:z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd",
                                "proof": {
                                  "created": "2024-08-25T05:06:24Z",
                                  "cryptosuite": "eddsa-rdfc-2022",
                                  "proofPurpose": "assertionMethod",
                                  "proofValue": "z4REiu1k5Ec5J6zYdn1M5c7rJtmNU5FjXDAWt7772E2Uf5BjQj5Lv1P9U7ngCJQLjbmGD7id3wpGQZTmdJeFQjXs2",
                                  "type": "DataIntegrityProof",
                                  "verificationMethod": "did:key:z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd#z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd"
                                },
                                "type": "VerifiableCredential"
                              },
                              "options": {
                                "checks": [
                                  "proof"
                                ]
                              }
                            },
                            "params": {
                              "additionalProperty": "credentialSubject"
                            },
                            "path": ".verifiableCredential",
                            "public": true,
                            "schemaPath": "#/properties/verifiableCredential/anyOf/1/additionalProperties",
                            "schema": {
                              "description": "",
                              "title": "Enveloped Verifiable Credential"
                            },
                            "value": {
                              "@context": [
                                "https://www.w3.org/2018/credentials/v1",
                                "https://w3id.org/security/data-integrity/v2"
                              ],
                              "credentialSubject": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b",
                              "id": "urn:uuid:7518fe3b-c3f2-4aa6-b14e-99397e31c732",
                              "issuanceDate": "2020-03-16T22:37:26.544Z",
                              "issuer": "did:key:z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd",
                              "proof": {
                                "created": "2024-08-25T05:06:24Z",
                                "cryptosuite": "eddsa-rdfc-2022",
                                "proofPurpose": "assertionMethod",
                                "proofValue": "z4REiu1k5Ec5J6zYdn1M5c7rJtmNU5FjXDAWt7772E2Uf5BjQj5Lv1P9U7ngCJQLjbmGD7id3wpGQZTmdJeFQjXs2",
                                "type": "DataIntegrityProof",
                                "verificationMethod": "did:key:z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd#z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd"
                              },
                              "type": "VerifiableCredential"
                            }
                          },
                          "cause": null
                        },
                        {
                          "stack": "ValidationError: should match some schema in anyOf\n    at _createError (file:///home/node/app/node_modules/@bedrock/validation/lib/index.js:240:17)\n    at validate (file:///home/node/app/node_modules/@bedrock/validation/lib/index.js:88:14)\n    at validate (file:///home/node/app/node_modules/@bedrock/validation/lib/index.js:181:22)\n    at Layer.handle [as handle_request] (/home/node/app/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/node/app/node_modules/express/lib/router/route.js:149:13)\n    at cors (/home/node/app/node_modules/cors/lib/index.js:188:7)\n    at /home/node/app/node_modules/cors/lib/index.js:224:17\n    at originCallback (/home/node/app/node_modules/cors/lib/index.js:214:15)\n    at /home/node/app/node_modules/cors/lib/index.js:219:13\n    at optionsCallback (/home/node/app/node_modules/cors/lib/index.js:199:9)",
                          "name": "ValidationError",
                          "message": "should match some schema in anyOf",
                          "details": {
                            "instance": {
                              "verifiableCredential": {
                                "@context": [
                                  "https://www.w3.org/2018/credentials/v1",
                                  "https://w3id.org/security/data-integrity/v2"
                                ],
                                "credentialSubject": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b",
                                "id": "urn:uuid:7518fe3b-c3f2-4aa6-b14e-99397e31c732",
                                "issuanceDate": "2020-03-16T22:37:26.544Z",
                                "issuer": "did:key:z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd",
                                "proof": {
                                  "created": "2024-08-25T05:06:24Z",
                                  "cryptosuite": "eddsa-rdfc-2022",
                                  "proofPurpose": "assertionMethod",
                                  "proofValue": "z4REiu1k5Ec5J6zYdn1M5c7rJtmNU5FjXDAWt7772E2Uf5BjQj5Lv1P9U7ngCJQLjbmGD7id3wpGQZTmdJeFQjXs2",
                                  "type": "DataIntegrityProof",
                                  "verificationMethod": "did:key:z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd#z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd"
                                },
                                "type": "VerifiableCredential"
                              },
                              "options": {
                                "checks": [
                                  "proof"
                                ]
                              }
                            },
                            "params": {},
                            "path": ".verifiableCredential",
                            "public": true,
                            "schemaPath": "#/properties/verifiableCredential/anyOf",
                            "schema": {
                              "description": "",
                              "title": {
                                "title": "Verifiable Credential",
                                "type": "object",
                                "required": [
                                  "@context",
                                  "credentialSubject",
                                  "issuer",
                                  "type"
                                ],
                                "additionalProperties": true,
                                "properties": {
                                  "@context": {
                                    "type": "array",
                                    "minItems": 1,
                                    "items": [
                                      {
                                        "oneOf": [
                                          {
                                            "const": "https://www.w3.org/2018/credentials/v1"
                                          },
                                          {
                                            "const": "https://www.w3.org/ns/credentials/v2"
                                          }
                                        ]
                                      }
                                    ],
                                    "additionalItems": {
                                      "anyOf": [
                                        {
                                          "type": "string"
                                        },
                                        {
                                          "type": "object"
                                        }
                                      ]
                                    }
                                  },
                                  "credentialSubject": {
                                    "anyOf": [
                                      {
                                        "type": "object"
                                      },
                                      {
                                        "type": "array",
                                        "minItems": 1,
                                        "items": {
                                          "type": "object"
                                        }
                                      }
                                    ]
                                  },
                                  "id": {
                                    "type": "string"
                                  },
                                  "issuer": {
                                    "title": "identifier or an object with an id",
                                    "anyOf": [
                                      {
                                        "title": "ID",
                                        "description": "A unique identifier.",
                                        "type": "string",
                                        "minLength": 1,
                                        "disallow": {
                                          "type": "string",
                                          "enum": [
                                            "0"
                                          ]
                                        }
                                      },
                                      {
                                        "type": "object",
                                        "required": [
                                          "id"
                                        ],
                                        "additionalProperties": true,
                                        "properties": {
                                          "id": {
                                            "title": "ID",
                                            "description": "A unique identifier.",
                                            "type": "string",
                                            "minLength": 1,
                                            "disallow": {
                                              "type": "string",
                                              "enum": [
                                                "0"
                                              ]
                                            }
                                          }
                                        }
                                      }
                                    ]
                                  },
                                  "type": {
                                    "type": "array",
                                    "minItems": 1,
                                    "items": [
                                      {
                                        "const": "VerifiableCredential"
                                      }
                                    ],
                                    "additionalItems": {
                                      "type": "string"
                                    }
                                  },
                                  "proof": {
                                    "title": "Proof",
                                    "anyOf": [
                                      {
                                        "type": "object"
                                      },
                                      {
                                        "type": "array",
                                        "minItems": 1,
                                        "items": {
                                          "type": "object"
                                        }
                                      }
                                    ]
                                  }
                                }
                              }
                            },
                            "value": {
                              "@context": [
                                "https://www.w3.org/2018/credentials/v1",
                                "https://w3id.org/security/data-integrity/v2"
                              ],
                              "credentialSubject": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b",
                              "id": "urn:uuid:7518fe3b-c3f2-4aa6-b14e-99397e31c732",
                              "issuanceDate": "2020-03-16T22:37:26.544Z",
                              "issuer": "did:key:z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd",
                              "proof": {
                                "created": "2024-08-25T05:06:24Z",
                                "cryptosuite": "eddsa-rdfc-2022",
                                "proofPurpose": "assertionMethod",
                                "proofValue": "z4REiu1k5Ec5J6zYdn1M5c7rJtmNU5FjXDAWt7772E2Uf5BjQj5Lv1P9U7ngCJQLjbmGD7id3wpGQZTmdJeFQjXs2",
                                "type": "DataIntegrityProof",
                                "verificationMethod": "did:key:z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd#z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd"
                              },
                              "type": "VerifiableCredential"
                            }
                          },
                          "cause": null
                        }
                      ],
                      "httpStatusCode": 400
                    },
                    "cause": null,
                    "stack": "ValidationError: A validation error occured in the 'Verify Credential Body' validator.\n    at _createError (file:///home/node/app/node_modules/@bedrock/validation/lib/index.js:246:17)\n    at validate (file:///home/node/app/node_modules/@bedrock/validation/lib/index.js:88:14)\n    at validate (file:///home/node/app/node_modules/@bedrock/validation/lib/index.js:181:22)\n    at Layer.handle [as handle_request] (/home/node/app/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/node/app/node_modules/express/lib/router/route.js:149:13)\n    at cors (/home/node/app/node_modules/cors/lib/index.js:188:7)\n    at /home/node/app/node_modules/cors/lib/index.js:224:17\n    at originCallback (/home/node/app/node_modules/cors/lib/index.js:214:15)\n    at /home/node/app/node_modules/cors/lib/index.js:219:13\n    at optionsCallback (/home/node/app/node_modules/cors/lib/index.js:199:9)",
                    "type": "ValidationError"
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: A validation error occured in … { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js:56:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "Grotto Networking should verify bovine",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "3wh0kyFGTAC3zwGPljBw5",
              "ctx": null,
              "_testId": "urn:uuid:abffcfc6-33fd-4d8e-b750-cef047c9e7d3",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "bovine",
                "columnId": "Grotto Networking"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 64724,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 72,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",\"https://w3id.org/security/data-integrity/v2\"],\"credentialSubject\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\",\"id\":\"urn:uuid:7518fe3b-c3f2-4aa6-b14e-99397e31c732\",\"issuanceDate\":\"2020-03-16T22:37:26.544Z\",\"issuer\":\"did:key:z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd\",\"proof\":{\"created\":\"2024-08-25T05:06:24Z\",\"cryptosuite\":\"eddsa-rdfc-2022\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z4REiu1k5Ec5J6zYdn1M5c7rJtmNU5FjXDAWt7772E2Uf5BjQj5Lv1P9U7ngCJQLjbmGD7id3wpGQZTmdJeFQjXs2\",\"type\":\"DataIntegrityProof\",\"verificationMethod\":\"did:key:z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd#z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd\"},\"type\":\"VerifiableCredential\"},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          "https://w3id.org/security/data-integrity/v2"
                        ],
                        "credentialSubject": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b",
                        "id": "urn:uuid:7518fe3b-c3f2-4aa6-b14e-99397e31c732",
                        "issuanceDate": "2020-03-16T22:37:26.544Z",
                        "issuer": "did:key:z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd",
                        "proof": {
                          "created": "2024-08-25T05:06:24Z",
                          "cryptosuite": "eddsa-rdfc-2022",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "z4REiu1k5Ec5J6zYdn1M5c7rJtmNU5FjXDAWt7772E2Uf5BjQj5Lv1P9U7ngCJQLjbmGD7id3wpGQZTmdJeFQjXs2",
                          "type": "DataIntegrityProof",
                          "verificationMethod": "did:key:z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd#z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd"
                        },
                        "type": "VerifiableCredential"
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://ecdsa-sd.grotto-networking.com/EdDSA-RDFC/credentials/verify",
                  "status": 400,
                  "data": {
                    "errors": [
                      "proof: must be object,array"
                    ]
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js:56:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "OpSecId should verify bovine",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "3wh0kyFGTAC3zwGPljBw5",
              "ctx": null,
              "_testId": "urn:uuid:83ce40d3-f953-485a-83e5-2d2e12a547eb",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "bovine",
                "columnId": "OpSecId"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 64797,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 25,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",\"https://w3id.org/security/data-integrity/v2\"],\"credentialSubject\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\",\"id\":\"urn:uuid:7518fe3b-c3f2-4aa6-b14e-99397e31c732\",\"issuanceDate\":\"2020-03-16T22:37:26.544Z\",\"issuer\":\"did:key:z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd\",\"proof\":{\"created\":\"2024-08-25T05:06:24Z\",\"cryptosuite\":\"eddsa-rdfc-2022\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z4REiu1k5Ec5J6zYdn1M5c7rJtmNU5FjXDAWt7772E2Uf5BjQj5Lv1P9U7ngCJQLjbmGD7id3wpGQZTmdJeFQjXs2\",\"type\":\"DataIntegrityProof\",\"verificationMethod\":\"did:key:z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd#z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd\"},\"type\":\"VerifiableCredential\"},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          "https://w3id.org/security/data-integrity/v2"
                        ],
                        "credentialSubject": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b",
                        "id": "urn:uuid:7518fe3b-c3f2-4aa6-b14e-99397e31c732",
                        "issuanceDate": "2020-03-16T22:37:26.544Z",
                        "issuer": "did:key:z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd",
                        "proof": {
                          "created": "2024-08-25T05:06:24Z",
                          "cryptosuite": "eddsa-rdfc-2022",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "z4REiu1k5Ec5J6zYdn1M5c7rJtmNU5FjXDAWt7772E2Uf5BjQj5Lv1P9U7ngCJQLjbmGD7id3wpGQZTmdJeFQjXs2",
                          "type": "DataIntegrityProof",
                          "verificationMethod": "did:key:z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd#z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd"
                        },
                        "type": "VerifiableCredential"
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://agent.opsec.id/vc/credentials/verify",
                  "status": 422,
                  "data": {
                    "json": {
                      "verifiableCredential": {
                        "type": [
                          "Not a valid list."
                        ],
                        "credentialSubject": [
                          "Field should be dict or list of dicts"
                        ]
                      }
                    }
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js:56:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "SpruceID should verify bovine",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "3wh0kyFGTAC3zwGPljBw5",
              "ctx": null,
              "_testId": "urn:uuid:18d145ce-54b3-4370-b516-43c9c172afa6",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "bovine",
                "columnId": "SpruceID"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 64823,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 28,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",\"https://w3id.org/security/data-integrity/v2\"],\"credentialSubject\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\",\"id\":\"urn:uuid:7518fe3b-c3f2-4aa6-b14e-99397e31c732\",\"issuanceDate\":\"2020-03-16T22:37:26.544Z\",\"issuer\":\"did:key:z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd\",\"proof\":{\"created\":\"2024-08-25T05:06:24Z\",\"cryptosuite\":\"eddsa-rdfc-2022\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z4REiu1k5Ec5J6zYdn1M5c7rJtmNU5FjXDAWt7772E2Uf5BjQj5Lv1P9U7ngCJQLjbmGD7id3wpGQZTmdJeFQjXs2\",\"type\":\"DataIntegrityProof\",\"verificationMethod\":\"did:key:z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd#z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd\"},\"type\":\"VerifiableCredential\"},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          "https://w3id.org/security/data-integrity/v2"
                        ],
                        "credentialSubject": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b",
                        "id": "urn:uuid:7518fe3b-c3f2-4aa6-b14e-99397e31c732",
                        "issuanceDate": "2020-03-16T22:37:26.544Z",
                        "issuer": "did:key:z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd",
                        "proof": {
                          "created": "2024-08-25T05:06:24Z",
                          "cryptosuite": "eddsa-rdfc-2022",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "z4REiu1k5Ec5J6zYdn1M5c7rJtmNU5FjXDAWt7772E2Uf5BjQj5Lv1P9U7ngCJQLjbmGD7id3wpGQZTmdJeFQjXs2",
                          "type": "DataIntegrityProof",
                          "verificationMethod": "did:key:z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd#z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd"
                        },
                        "type": "VerifiableCredential"
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc.spruceid.xyz/credentials/verify",
                  "status": 400
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js:56:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "Trinsic should verify bovine",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "3wh0kyFGTAC3zwGPljBw5",
              "ctx": null,
              "_testId": "urn:uuid:14049875-3ede-44d4-a6e4-c581a30c9aaa",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "bovine",
                "columnId": "Trinsic"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 64851,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 24,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",\"https://w3id.org/security/data-integrity/v2\"],\"credentialSubject\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\",\"id\":\"urn:uuid:7518fe3b-c3f2-4aa6-b14e-99397e31c732\",\"issuanceDate\":\"2020-03-16T22:37:26.544Z\",\"issuer\":\"did:key:z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd\",\"proof\":{\"created\":\"2024-08-25T05:06:24Z\",\"cryptosuite\":\"eddsa-rdfc-2022\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z4REiu1k5Ec5J6zYdn1M5c7rJtmNU5FjXDAWt7772E2Uf5BjQj5Lv1P9U7ngCJQLjbmGD7id3wpGQZTmdJeFQjXs2\",\"type\":\"DataIntegrityProof\",\"verificationMethod\":\"did:key:z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd#z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd\"},\"type\":\"VerifiableCredential\"},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          "https://w3id.org/security/data-integrity/v2"
                        ],
                        "credentialSubject": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b",
                        "id": "urn:uuid:7518fe3b-c3f2-4aa6-b14e-99397e31c732",
                        "issuanceDate": "2020-03-16T22:37:26.544Z",
                        "issuer": "did:key:z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd",
                        "proof": {
                          "created": "2024-08-25T05:06:24Z",
                          "cryptosuite": "eddsa-rdfc-2022",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "z4REiu1k5Ec5J6zYdn1M5c7rJtmNU5FjXDAWt7772E2Uf5BjQj5Lv1P9U7ngCJQLjbmGD7id3wpGQZTmdJeFQjXs2",
                          "type": "DataIntegrityProof",
                          "verificationMethod": "did:key:z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd#z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd"
                        },
                        "type": "VerifiableCredential"
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://interop.connect.trinsic.cloud/vc-api/credentials/verify",
                  "status": 400
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js:56:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "bovine should verify bovine",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "3wh0kyFGTAC3zwGPljBw5",
              "ctx": null,
              "_testId": "urn:uuid:3c487aba-2ff2-4d43-81c0-17df7179898c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "bovine",
                "columnId": "bovine"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 64875,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 95,
              "state": "passed",
              "speed": "slow"
            }
          ]
        }
      ]
    },
    {
      "title": "Data Integrity (eddsa-jcs-2022 issuers)",
      "ctx": null,
      "suites": [
        {
          "title": "Grotto Networking",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "When expressing a data integrity proof on an object, a proof property MUST be used.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=When%20expressing%20a%20data%20integrity%20proof%20on%20an%20object%2C%20a%20proof%20property%20MUST%20be%20used';\n      shouldHaveProof({vc: data});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/35-di-jcs-create.js",
              "parent": "KdN2hm8WrJINf4v5bSYcJ",
              "ctx": null,
              "_testId": "urn:uuid:3d93e302-6016-4524-9989-dce756ee938c",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "When expressing a data integrity proof on an object, a proof property MUST be used."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=When%20expressing%20a%20data%20integrity%20proof%20on%20an%20object%2C%20a%20proof%20property%20MUST%20be%20used",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If present (proof), its value MUST be either a single object, or an unordered set of objects",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=If%20present%2C%20its%20value%20MUST%20be%20either%20a%20single%20object%2C%20or%20an%20unordered%20set%20of%20objects';\n      shouldHaveProof({vc: data});\n      const {proof} = data;\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/35-di-jcs-create.js",
              "parent": "KdN2hm8WrJINf4v5bSYcJ",
              "ctx": null,
              "_testId": "urn:uuid:27ce8981-8009-4712-bea2-de29d331f0ac",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If present (proof), its value MUST be either a single object, or an unordered set of objects"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=If%20present%2C%20its%20value%20MUST%20be%20either%20a%20single%20object%2C%20or%20an%20unordered%20set%20of%20objects",
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.id\") An optional identifier for the proof, which MUST be a URL.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=An%20optional%20identifier%20for%20the%20proof%2C%20which%20MUST%20be%20a%20URL';\n      for(const proof of proofs) {\n        if(proof.id) {\n          shouldBeUrl({url: proof.id, prop: 'proof.id'});\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/35-di-jcs-create.js",
              "parent": "KdN2hm8WrJINf4v5bSYcJ",
              "ctx": null,
              "_testId": "urn:uuid:be88b5d1-2a93-4f2a-8eca-f42d1ec25eca",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "(\"proof.id\") An optional identifier for the proof, which MUST be a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=An%20optional%20identifier%20for%20the%20proof%2C%20which%20MUST%20be%20a%20URL",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The specific proof type used for the cryptographic proof MUST be specified as a string that maps to a URL.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20specific%20proof%20type%20used%20for%20the%20cryptographic%20proof%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL';\n      const prop = '@type';\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n        const expanded = await jsonld.expand({\n          '@context': data['@context'],\n          type: proof.type\n        }, {documentLoader});\n        for(const term of expanded) {\n          const types = term[prop];\n          should.exist(types, 'Expected @type to exist.');\n          types.every(url => shouldBeUrl({url, prop}));\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/35-di-jcs-create.js",
              "parent": "KdN2hm8WrJINf4v5bSYcJ",
              "ctx": null,
              "_testId": "urn:uuid:3d91e0f7-18a3-418e-a402-c573537b80b4",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The specific proof type used for the cryptographic proof MUST be specified as a string that maps to a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20specific%20proof%20type%20used%20for%20the%20cryptographic%20proof%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 65058,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The type property MUST contain the string DataIntegrityProof.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-data-integrity/#contexts-and-vocabularies:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.';\n          for(const proof of proofs) {\n            proof.should.have.property('type');\n            proof.type.should.be.a(\n              'string',\n              'Expected \"proof.type\" to be a string.'\n            );\n            const hasExpectedType = expectedProofTypes.includes(proof.type);\n            hasExpectedType.should.equal(\n              true,\n              `Expected \"proof.type\" to be one of ` +\n              `${expectedProofTypes} Received: ${proof.type}`);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/35-di-jcs-create.js",
              "parent": "KdN2hm8WrJINf4v5bSYcJ",
              "ctx": null,
              "_testId": "urn:uuid:317dcd19-0482-4dc2-a637-83a7df663a08",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The type property MUST contain the string DataIntegrityProof."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#contexts-and-vocabularies:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 65060,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
              "body": "function() {\n          this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.';\n          for(const proof of proofs) {\n            should.exist(proof, 'Expected proof to exist.');\n            if(proof.type === 'DataIntegrityProof') {\n              should.exist(proof.cryptosuite,\n                'Expected proof to have property \"cryptosuite\".');\n            }\n            const {\n              prefix: expectedPrefix,\n              name: encodingName\n            } = expectedMultibasePrefix(proof.cryptosuite);\n            shouldHaveProofValue({proof, expectedPrefix, encodingName});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/35-di-jcs-create.js",
              "parent": "KdN2hm8WrJINf4v5bSYcJ",
              "ctx": null,
              "_testId": "urn:uuid:ff86d47f-29fc-4673-b3e7-3ddc98bd8796",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The proofValue property MUST be used, as specified in 2.1 Proofs."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified. If specified, its value MUST be a string.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.';\n      for(const proof of proofs) {\n        if(proof.type && proof.type === 'DataIntegrityProof') {\n          should.exist(\n            proof.cryptosuite,\n            'If the proof type is DataIntegrityProof, cryptosuite MUST ' +\n            'be specified');\n          proof.cryptosuite.should.be.a(\n            'string',\n            'cryptosuite value MUST be a string.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/35-di-jcs-create.js",
              "parent": "KdN2hm8WrJINf4v5bSYcJ",
              "ctx": null,
              "_testId": "urn:uuid:74509a57-6521-4ac6-9170-6179c153e39e",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified. If specified, its value MUST be a string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "A verification method is the means and information needed to verify the proof. If included, the value MUST be a string that maps to a [URL]",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=A%20verification%20method%20is%20the%20means%20and%20information%20needed%20to%20verify%20the%20proof.%20If%20included%2C%20the%20value%20MUST%20be%20a%20string%20that%20maps%20to%20a%20%5BURL%5D.';\n      for(const proof of proofs) {\n        await shouldMapToUrl({\n          doc: {\n            '@context': data['@context'],\n            ...proof\n          },\n          term: 'https://w3id.org/security#verificationMethod',\n          prop: '@id',\n          documentLoader\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/35-di-jcs-create.js",
              "parent": "KdN2hm8WrJINf4v5bSYcJ",
              "ctx": null,
              "_testId": "urn:uuid:efd41f42-f41d-40a9-b473-8b8d5986b956",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "A verification method is the means and information needed to verify the proof. If included, the value MUST be a string that maps to a [URL]"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=A%20verification%20method%20is%20the%20means%20and%20information%20needed%20to%20verify%20the%20proof.%20If%20included%2C%20the%20value%20MUST%20be%20a%20string%20that%20maps%20to%20a%20%5BURL%5D.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 65060,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The reason the proof was created (\"proof.proofPurpose\") MUST be specified as a string that maps to a URL",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20reason%20the%20proof%20was%20created%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL';\n      for(const proof of proofs) {\n        proof.should.have.property('proofPurpose');\n        proof.proofPurpose.should.be.a('string');\n        await shouldMapToUrl({\n          doc: {\n            '@context': data['@context'],\n            ...proof\n          },\n          term: 'https://w3id.org/security#proofPurpose',\n          prop: '@id',\n          documentLoader\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/35-di-jcs-create.js",
              "parent": "KdN2hm8WrJINf4v5bSYcJ",
              "ctx": null,
              "_testId": "urn:uuid:4569aea5-80b4-43de-8a0d-f9cf3ba661c9",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The reason the proof was created (\"proof.proofPurpose\") MUST be specified as a string that maps to a URL"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20reason%20the%20proof%20was%20created%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 65061,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof';\n      for(const proof of proofs) {\n        should.exist(proof, 'Expected proof to exist.');\n        const {\n          prefix: expectedPrefix,\n          name: encodingName\n        } = expectedMultibasePrefix(proof.cryptosuite);\n        shouldHaveProofValue({proof, expectedPrefix, encodingName});\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/35-di-jcs-create.js",
              "parent": "KdN2hm8WrJINf4v5bSYcJ",
              "ctx": null,
              "_testId": "urn:uuid:36c0fcf9-bd6c-425a-b960-510c05ce29a5",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.previousProof\" field exists, it MUST be a string.",
              "body": "function() {\n        for(const proof of proofs) {\n          if(proof.previousProof) {\n            proof.previousProof.should.be.a('string', 'Expected ' +\n              '\"proof.previousProof\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/35-di-jcs-create.js",
              "parent": "KdN2hm8WrJINf4v5bSYcJ",
              "ctx": null,
              "_testId": "urn:uuid:925cf34e-7198-40fe-a6e2-58f05b629257",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "if \"proof.previousProof\" field exists, it MUST be a string."
              },
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.nonce\" field exists, it MUST be a string.",
              "body": "function() {\n        for(const proof of proofs) {\n          if(proof.nonce) {\n            proof.nonce.should.be.a('string', 'Expected \"proof.nonce\" ' +\n              'to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/35-di-jcs-create.js",
              "parent": "KdN2hm8WrJINf4v5bSYcJ",
              "ctx": null,
              "_testId": "urn:uuid:006200eb-ca6d-441d-af01-ce7632ea3ddd",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "if \"proof.nonce\" field exists, it MUST be a string."
              },
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Cryptographic suite designers MUST use mandatory proof value properties defined in Section 2.1 Proofs, and MAY define other properties specific to their cryptographic suite.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#add-proof:~:text=MUST%20use%20mandatory%20proof%20value%20properties%20defined';\n      for(const proof of proofs) {\n        shouldBeProof({proof});\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/35-di-jcs-create.js",
              "parent": "KdN2hm8WrJINf4v5bSYcJ",
              "ctx": null,
              "_testId": "urn:uuid:18161d16-c024-4cdd-808d-dc8aef299302",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "Cryptographic suite designers MUST use mandatory proof value properties defined in Section 2.1 Proofs, and MAY define other properties specific to their cryptographic suite."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#add-proof:~:text=MUST%20use%20mandatory%20proof%20value%20properties%20defined",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 65063,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      const undefinedType = structuredClone(credential);\n      undefinedType.type.push('InvalidType');\n      await shouldFailIssuance({\n        credential: undefinedType,\n        issuer,\n        reason: 'Expected issuer to error when VC has an undefined type.'\n      });\n      const undefinedTerm = structuredClone(credential);\n      undefinedTerm.credentialSubject.invalidTerm = 'invalidTerm';\n      await shouldFailIssuance({\n        credential: undefinedTerm,\n        issuer,\n        reason: 'Expected issuer to error when VC has an undefined term.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/35-di-jcs-create.js",
              "parent": "KdN2hm8WrJINf4v5bSYcJ",
              "ctx": null,
              "_testId": "urn:uuid:c2969ada-fc83-4b64-95e0-c64affe0b282",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 65063,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 73,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected issuer to error when VC has an undefined type.: expected Response { status: 201, statusText: 'Created', headers: Headers { server: 'nginx/1.18.0 (Ubuntu)', date: 'Sun, 25 Aug 2024 05:06:27 GMT', 'content-type': 'application/json; charset=utf-8', 'content-length': '869', connection: 'keep-alive', 'x-powered-by': 'Express', etag: 'W/\"365-YeP+bOnf/mVh2Lx6xeDmHSOfsG4\"', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected issuer to error when VC has an undefined type.: expected Response { status: 201, statusText: 'Created', headers: Headers { server: 'nginx/1.18.0 (Ubuntu)', date: 'Sun, 25 Aug 2024 05:06:27 GMT', 'content-type': 'application/json; charset=utf-8', 'content-length': '869', connection: 'keep-alive', 'x-powered-by': 'Express', etag: 'W/\"365-YeP+bOnf/mVh2Lx6xeDmHSOfsG4\"', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at shouldFailIssuance (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:71:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/suites/create.js:246:7)"
              }
            },
            {
              "type": "test",
              "title": "When an application is securing a document, if an @context property is not provided in the document or the Data Integrity terms used in the document are not mapped by existing values in the @context property, implementations SHOULD inject or append an @context property with a value of https://w3id.org/security/data-integrity/v2 or one or more contexts with at least the same declarations, such as the Verifiable Credential Data Model v2.0 context (https://www.w3.org/ns/credentials/v2).",
              "body": "async function() {\n      if(!issuer) {\n        throw new Error(`Expected ${vendorName} to have an issuer.`);\n      }\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#context-injection:~:text=if%20an%20%40context%20property%20is%20not%20provided%20in%20the%20document%20or%20the%20Data%20Integrity%20terms%20used%20in%20the%20document%20are%20not%20mapped%20by%20existing%20values%20in%20the%20%40context%20property%2C%20implementations%20SHOULD%20inject%20or%20append';\n      if(optionalTests.contextInjection === false) {\n        this.test.cell.skipMessage = 'Optional Test Skipped';\n        this.skip();\n      }\n      const _credential = structuredClone(credential);\n      const expectedContexts = [\n        'https://w3id.org/security/data-integrity/v2',\n        'https://www.w3.org/ns/credentials/v2'\n      ];\n      // remove the vc's context and expect context injection to occur\n      delete _credential['@context'];\n      let err;\n      let data;\n      try {\n        data = await createInitialVc({issuer, credential: _credential});\n      } catch(e) {\n        err = e;\n      }\n      should.not.exist(\n        err,\n        `Expected issuer ${vendorName} to perform context injection on a ` +\n        `VC with out an \"@context\" property`);\n      should.exist(data, `Expected issuer ${vendorName} to return data.`);\n      data.should.be.an('object', 'Expected response data to be an object.');\n      should.exist(data['@context'],\n        'Expected data to have an injected \"@context\" property.');\n      if(Array.isArray(data['@context'])) {\n        const hasExpectedContext = expectedContexts.some(\n          ctx => data['@context'].includes(ctx));\n        return hasExpectedContext.should.equal(true,\n          `Expected injected context to contain one of ${expectedContexts}`);\n      }\n      data['@context'].should.be.oneOf(expectedContexts);\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/35-di-jcs-create.js",
              "parent": "KdN2hm8WrJINf4v5bSYcJ",
              "ctx": null,
              "_testId": "urn:uuid:d751bb28-b892-44c4-b215-1ebfe8f797e8",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "When an application is securing a document, if an @context property is not provided in the document or the Data Integrity terms used in the document are not mapped by existing values in the @context property, implementations SHOULD inject or append an @context property with a value of https://w3id.org/security/data-integrity/v2 or one or more contexts with at least the same declarations, such as the Verifiable Credential Data Model v2.0 context (https://www.w3.org/ns/credentials/v2)."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#context-injection:~:text=if%20an%20%40context%20property%20is%20not%20provided%20in%20the%20document%20or%20the%20Data%20Integrity%20terms%20used%20in%20the%20document%20are%20not%20mapped%20by%20existing%20values%20in%20the%20%40context%20property%2C%20implementations%20SHOULD%20inject%20or%20append",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 65137,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 70,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected issuer Grotto Networking to perform context injection on a VC with out an \"@context\" property: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"credential\":{\"id\":\"urn:uuid:66979021-9f3d-4e87-8bb7-c254a005cbaf\",\"type\":[\"VerifiableCredential\"],\"issuer\":\"did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7\",\"issuanceDate\":\"2020-03-16T22:37:26.544Z\",\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\"}},\"options\":{}}",
                    "method": "POST",
                    "json": {
                      "credential": {
                        "id": "urn:uuid:66979021-9f3d-4e87-8bb7-c254a005cbaf",
                        "type": [
                          "VerifiableCredential"
                        ],
                        "issuer": "did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7",
                        "issuanceDate": "2020-03-16T22:37:26.544Z",
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                        }
                      },
                      "options": {}
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://ecdsa-sd.grotto-networking.com/EdDSA-JCS/credentials/issue",
                  "status": 400,
                  "data": {
                    "errors": [
                      "must have required property '@context'"
                    ]
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected issuer Grotto Networking to perform context injection on a VC with out an \"@context\" property: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/suites/create.js:442:18)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "The date and time the proof was created is OPTIONAL and, if included, MUST be specified as an [XMLSCHEMA11-2] dateTimeStamp string, either in Universal Coordinated Time (UTC), denoted by a Z at the end of the value, or with a time zone offset relative to UTC.",
              "body": "function() {\n      this.test.link = 'https://www.w3.org/TR/vc-data-integrity/#:~:text=The%20date%20and%20time%20the%20proof%20was%20created%20is%20OPTIONAL%20and%2C%20if%20included%2C%20MUST%20be%20specified%20as%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%2C%20either%20in%20Universal%20Coordinated%20Time%20(UTC)%2C%20denoted%20by%20a%20Z%20at%20the%20end%20of%20the%20value%2C%20or%20with%20a%20time%20zone%20offset%20relative%20to%20UTC.';\n      if(optionalTests.dates === false) {\n        this.test.cell.skipMessage = 'Optional Test Skipped';\n        this.skip();\n      }\n      for(const proof of proofs) {\n        if(proof.created) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.created.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/35-di-jcs-create.js",
              "parent": "KdN2hm8WrJINf4v5bSYcJ",
              "ctx": null,
              "_testId": "urn:uuid:7e0f4c97-5f0e-43c9-a948-d1acf82b0435",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The date and time the proof was created is OPTIONAL and, if included, MUST be specified as an [XMLSCHEMA11-2] dateTimeStamp string, either in Universal Coordinated Time (UTC), denoted by a Z at the end of the value, or with a time zone offset relative to UTC."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://www.w3.org/TR/vc-data-integrity/#:~:text=The%20date%20and%20time%20the%20proof%20was%20created%20is%20OPTIONAL%20and%2C%20if%20included%2C%20MUST%20be%20specified%20as%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%2C%20either%20in%20Universal%20Coordinated%20Time%20(UTC)%2C%20denoted%20by%20a%20Z%20at%20the%20end%20of%20the%20value%2C%20or%20with%20a%20time%20zone%20offset%20relative%20to%20UTC.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The expires property is OPTIONAL and, if present, specifies when the proof expires. If present, it MUST be an [XMLSCHEMA11-2] dateTimeStamp string, either in Universal Coordinated Time (UTC), denoted by a Z at the end of the value, or with a time zone offset relative to UTC.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=MUST%20be%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%2C%20either%20in%20Universal%20Coordinated%20Time';\n      if(optionalTests.dates === false) {\n        this.test.cell.skipMessage = 'Optional Test Skipped';\n        this.skip();\n      }\n      for(const proof of proofs) {\n        if(proof.expires) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.expires.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/35-di-jcs-create.js",
              "parent": "KdN2hm8WrJINf4v5bSYcJ",
              "ctx": null,
              "_testId": "urn:uuid:4c35f926-9aa9-4e19-9eb3-40733d5f31a5",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The expires property is OPTIONAL and, if present, specifies when the proof expires. If present, it MUST be an [XMLSCHEMA11-2] dateTimeStamp string, either in Universal Coordinated Time (UTC), denoted by a Z at the end of the value, or with a time zone offset relative to UTC."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=MUST%20be%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%2C%20either%20in%20Universal%20Coordinated%20Time",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The domain property is OPTIONAL. It conveys one or more security domains in which the proof is meant to be used. If specified, the associated value MUST be either a string, or an unordered set of strings. A verifier SHOULD use the value to ensure that the proof was intended to be used in the security domain in which the verifier is operating.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#verify-proof:~:text=The%20domain%20property%20is%20OPTIONAL.%20It%20conveys%20one%20or%20more%20security%20domains%20in%20which%20the%20proof%20is%20meant%20to%20be%20used.%20If%20specified%2C%20the%20associated%20value%20MUST';\n      if(optionalTests.domain === false) {\n        this.test.cell.skipMessage = 'Optional Test Skipped';\n        this.skip();\n      }\n      for(const proof of proofs) {\n        if(proof.domain) {\n          const validType = isStringOrArrayOfStrings(proof.domain);\n          validType.should.equal(true, 'Expected ' +\n            '\"proof.domain\" to be either a string or an unordered ' +\n            'set of strings.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/35-di-jcs-create.js",
              "parent": "KdN2hm8WrJINf4v5bSYcJ",
              "ctx": null,
              "_testId": "urn:uuid:cf6bd597-1e89-44d6-95f8-828afd56dca2",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The domain property is OPTIONAL. It conveys one or more security domains in which the proof is meant to be used. If specified, the associated value MUST be either a string, or an unordered set of strings. A verifier SHOULD use the value to ensure that the proof was intended to be used in the security domain in which the verifier is operating."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#verify-proof:~:text=The%20domain%20property%20is%20OPTIONAL.%20It%20conveys%20one%20or%20more%20security%20domains%20in%20which%20the%20proof%20is%20meant%20to%20be%20used.%20If%20specified%2C%20the%20associated%20value%20MUST",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(challenge) A string value that SHOULD be included in a proof if a domain is specified.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#verify-proof:~:text=A%20string%20value%20that%20SHOULD%20be%20included%20in%20a%20proof%20if%20a%20domain%20is%20specified.';\n      if(optionalTests.domain === false) {\n        this.test.cell.skipMessage = 'Optional Test Skipped';\n        this.skip();\n      }\n      for(const proof of proofs) {\n        if(proof.challenge) {\n          // domain must be specified\n          should.exist(proof.domain, 'Expected \"proof.domain\" ' +\n            'to be specified.');\n          proof.challenge.should.be.a('string', 'Expected ' +\n            '\"proof.challenge\" to be a string.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/35-di-jcs-create.js",
              "parent": "KdN2hm8WrJINf4v5bSYcJ",
              "ctx": null,
              "_testId": "urn:uuid:e6697a9c-f212-43e5-aa42-248909583b80",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "(challenge) A string value that SHOULD be included in a proof if a domain is specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#verify-proof:~:text=A%20string%20value%20that%20SHOULD%20be%20included%20in%20a%20proof%20if%20a%20domain%20is%20specified.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"Grotto Networking\"",
              "body": "function() {\n      this.currentTest.cell = {\n        columnId,\n        rowId: this.currentTest.title\n      };\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "KdN2hm8WrJINf4v5bSYcJ",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/35-di-jcs-create.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Grotto Networking\"",
              "body": "async function() {\n      if(!issuer) {\n        throw new Error(`Expected ${vendorName} to have an issuer.`);\n      }\n      if(!credential) {\n        throw new Error(`Expected a credential to be passed in ` +\n          `received ${credential}`);\n      }\n      data = await createInitialVc({issuer, credential});\n      proofs = Array.isArray(data.proof) ? data.proof : [data.proof];\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "KdN2hm8WrJINf4v5bSYcJ",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/35-di-jcs-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 64971,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 86,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "uSeA59PSWEwmCZ3WZqY3g",
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/35-di-jcs-create.js",
          "_testId": "urn:uuid:ffd4fc64-689c-4209-9024-25e7031c497e"
        },
        {
          "title": "OpSecId",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "When expressing a data integrity proof on an object, a proof property MUST be used.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=When%20expressing%20a%20data%20integrity%20proof%20on%20an%20object%2C%20a%20proof%20property%20MUST%20be%20used';\n      shouldHaveProof({vc: data});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/35-di-jcs-create.js",
              "parent": "6kE6okCh75QdiTfkOWWUl",
              "ctx": null
            },
            {
              "type": "test",
              "title": "If present (proof), its value MUST be either a single object, or an unordered set of objects",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=If%20present%2C%20its%20value%20MUST%20be%20either%20a%20single%20object%2C%20or%20an%20unordered%20set%20of%20objects';\n      shouldHaveProof({vc: data});\n      const {proof} = data;\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/35-di-jcs-create.js",
              "parent": "6kE6okCh75QdiTfkOWWUl",
              "ctx": null
            },
            {
              "type": "test",
              "title": "(\"proof.id\") An optional identifier for the proof, which MUST be a URL.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=An%20optional%20identifier%20for%20the%20proof%2C%20which%20MUST%20be%20a%20URL';\n      for(const proof of proofs) {\n        if(proof.id) {\n          shouldBeUrl({url: proof.id, prop: 'proof.id'});\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/35-di-jcs-create.js",
              "parent": "6kE6okCh75QdiTfkOWWUl",
              "ctx": null
            },
            {
              "type": "test",
              "title": "The specific proof type used for the cryptographic proof MUST be specified as a string that maps to a URL.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20specific%20proof%20type%20used%20for%20the%20cryptographic%20proof%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL';\n      const prop = '@type';\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n        const expanded = await jsonld.expand({\n          '@context': data['@context'],\n          type: proof.type\n        }, {documentLoader});\n        for(const term of expanded) {\n          const types = term[prop];\n          should.exist(types, 'Expected @type to exist.');\n          types.every(url => shouldBeUrl({url, prop}));\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/35-di-jcs-create.js",
              "parent": "6kE6okCh75QdiTfkOWWUl",
              "ctx": null
            },
            {
              "type": "test",
              "title": "The type property MUST contain the string DataIntegrityProof.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-data-integrity/#contexts-and-vocabularies:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.';\n          for(const proof of proofs) {\n            proof.should.have.property('type');\n            proof.type.should.be.a(\n              'string',\n              'Expected \"proof.type\" to be a string.'\n            );\n            const hasExpectedType = expectedProofTypes.includes(proof.type);\n            hasExpectedType.should.equal(\n              true,\n              `Expected \"proof.type\" to be one of ` +\n              `${expectedProofTypes} Received: ${proof.type}`);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/35-di-jcs-create.js",
              "parent": "6kE6okCh75QdiTfkOWWUl",
              "ctx": null
            },
            {
              "type": "test",
              "title": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
              "body": "function() {\n          this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.';\n          for(const proof of proofs) {\n            should.exist(proof, 'Expected proof to exist.');\n            if(proof.type === 'DataIntegrityProof') {\n              should.exist(proof.cryptosuite,\n                'Expected proof to have property \"cryptosuite\".');\n            }\n            const {\n              prefix: expectedPrefix,\n              name: encodingName\n            } = expectedMultibasePrefix(proof.cryptosuite);\n            shouldHaveProofValue({proof, expectedPrefix, encodingName});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/35-di-jcs-create.js",
              "parent": "6kE6okCh75QdiTfkOWWUl",
              "ctx": null
            },
            {
              "type": "test",
              "title": "If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified. If specified, its value MUST be a string.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.';\n      for(const proof of proofs) {\n        if(proof.type && proof.type === 'DataIntegrityProof') {\n          should.exist(\n            proof.cryptosuite,\n            'If the proof type is DataIntegrityProof, cryptosuite MUST ' +\n            'be specified');\n          proof.cryptosuite.should.be.a(\n            'string',\n            'cryptosuite value MUST be a string.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/35-di-jcs-create.js",
              "parent": "6kE6okCh75QdiTfkOWWUl",
              "ctx": null
            },
            {
              "type": "test",
              "title": "A verification method is the means and information needed to verify the proof. If included, the value MUST be a string that maps to a [URL]",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=A%20verification%20method%20is%20the%20means%20and%20information%20needed%20to%20verify%20the%20proof.%20If%20included%2C%20the%20value%20MUST%20be%20a%20string%20that%20maps%20to%20a%20%5BURL%5D.';\n      for(const proof of proofs) {\n        await shouldMapToUrl({\n          doc: {\n            '@context': data['@context'],\n            ...proof\n          },\n          term: 'https://w3id.org/security#verificationMethod',\n          prop: '@id',\n          documentLoader\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/35-di-jcs-create.js",
              "parent": "6kE6okCh75QdiTfkOWWUl",
              "ctx": null
            },
            {
              "type": "test",
              "title": "The reason the proof was created (\"proof.proofPurpose\") MUST be specified as a string that maps to a URL",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20reason%20the%20proof%20was%20created%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL';\n      for(const proof of proofs) {\n        proof.should.have.property('proofPurpose');\n        proof.proofPurpose.should.be.a('string');\n        await shouldMapToUrl({\n          doc: {\n            '@context': data['@context'],\n            ...proof\n          },\n          term: 'https://w3id.org/security#proofPurpose',\n          prop: '@id',\n          documentLoader\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/35-di-jcs-create.js",
              "parent": "6kE6okCh75QdiTfkOWWUl",
              "ctx": null
            },
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof';\n      for(const proof of proofs) {\n        should.exist(proof, 'Expected proof to exist.');\n        const {\n          prefix: expectedPrefix,\n          name: encodingName\n        } = expectedMultibasePrefix(proof.cryptosuite);\n        shouldHaveProofValue({proof, expectedPrefix, encodingName});\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/35-di-jcs-create.js",
              "parent": "6kE6okCh75QdiTfkOWWUl",
              "ctx": null
            },
            {
              "type": "test",
              "title": "if \"proof.previousProof\" field exists, it MUST be a string.",
              "body": "function() {\n        for(const proof of proofs) {\n          if(proof.previousProof) {\n            proof.previousProof.should.be.a('string', 'Expected ' +\n              '\"proof.previousProof\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/35-di-jcs-create.js",
              "parent": "6kE6okCh75QdiTfkOWWUl",
              "ctx": null
            },
            {
              "type": "test",
              "title": "if \"proof.nonce\" field exists, it MUST be a string.",
              "body": "function() {\n        for(const proof of proofs) {\n          if(proof.nonce) {\n            proof.nonce.should.be.a('string', 'Expected \"proof.nonce\" ' +\n              'to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/35-di-jcs-create.js",
              "parent": "6kE6okCh75QdiTfkOWWUl",
              "ctx": null
            },
            {
              "type": "test",
              "title": "Cryptographic suite designers MUST use mandatory proof value properties defined in Section 2.1 Proofs, and MAY define other properties specific to their cryptographic suite.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#add-proof:~:text=MUST%20use%20mandatory%20proof%20value%20properties%20defined';\n      for(const proof of proofs) {\n        shouldBeProof({proof});\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/35-di-jcs-create.js",
              "parent": "6kE6okCh75QdiTfkOWWUl",
              "ctx": null
            },
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      const undefinedType = structuredClone(credential);\n      undefinedType.type.push('InvalidType');\n      await shouldFailIssuance({\n        credential: undefinedType,\n        issuer,\n        reason: 'Expected issuer to error when VC has an undefined type.'\n      });\n      const undefinedTerm = structuredClone(credential);\n      undefinedTerm.credentialSubject.invalidTerm = 'invalidTerm';\n      await shouldFailIssuance({\n        credential: undefinedTerm,\n        issuer,\n        reason: 'Expected issuer to error when VC has an undefined term.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/35-di-jcs-create.js",
              "parent": "6kE6okCh75QdiTfkOWWUl",
              "ctx": null
            },
            {
              "type": "test",
              "title": "When an application is securing a document, if an @context property is not provided in the document or the Data Integrity terms used in the document are not mapped by existing values in the @context property, implementations SHOULD inject or append an @context property with a value of https://w3id.org/security/data-integrity/v2 or one or more contexts with at least the same declarations, such as the Verifiable Credential Data Model v2.0 context (https://www.w3.org/ns/credentials/v2).",
              "body": "async function() {\n      if(!issuer) {\n        throw new Error(`Expected ${vendorName} to have an issuer.`);\n      }\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#context-injection:~:text=if%20an%20%40context%20property%20is%20not%20provided%20in%20the%20document%20or%20the%20Data%20Integrity%20terms%20used%20in%20the%20document%20are%20not%20mapped%20by%20existing%20values%20in%20the%20%40context%20property%2C%20implementations%20SHOULD%20inject%20or%20append';\n      if(optionalTests.contextInjection === false) {\n        this.test.cell.skipMessage = 'Optional Test Skipped';\n        this.skip();\n      }\n      const _credential = structuredClone(credential);\n      const expectedContexts = [\n        'https://w3id.org/security/data-integrity/v2',\n        'https://www.w3.org/ns/credentials/v2'\n      ];\n      // remove the vc's context and expect context injection to occur\n      delete _credential['@context'];\n      let err;\n      let data;\n      try {\n        data = await createInitialVc({issuer, credential: _credential});\n      } catch(e) {\n        err = e;\n      }\n      should.not.exist(\n        err,\n        `Expected issuer ${vendorName} to perform context injection on a ` +\n        `VC with out an \"@context\" property`);\n      should.exist(data, `Expected issuer ${vendorName} to return data.`);\n      data.should.be.an('object', 'Expected response data to be an object.');\n      should.exist(data['@context'],\n        'Expected data to have an injected \"@context\" property.');\n      if(Array.isArray(data['@context'])) {\n        const hasExpectedContext = expectedContexts.some(\n          ctx => data['@context'].includes(ctx));\n        return hasExpectedContext.should.equal(true,\n          `Expected injected context to contain one of ${expectedContexts}`);\n      }\n      data['@context'].should.be.oneOf(expectedContexts);\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/35-di-jcs-create.js",
              "parent": "6kE6okCh75QdiTfkOWWUl",
              "ctx": null
            },
            {
              "type": "test",
              "title": "The date and time the proof was created is OPTIONAL and, if included, MUST be specified as an [XMLSCHEMA11-2] dateTimeStamp string, either in Universal Coordinated Time (UTC), denoted by a Z at the end of the value, or with a time zone offset relative to UTC.",
              "body": "function() {\n      this.test.link = 'https://www.w3.org/TR/vc-data-integrity/#:~:text=The%20date%20and%20time%20the%20proof%20was%20created%20is%20OPTIONAL%20and%2C%20if%20included%2C%20MUST%20be%20specified%20as%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%2C%20either%20in%20Universal%20Coordinated%20Time%20(UTC)%2C%20denoted%20by%20a%20Z%20at%20the%20end%20of%20the%20value%2C%20or%20with%20a%20time%20zone%20offset%20relative%20to%20UTC.';\n      if(optionalTests.dates === false) {\n        this.test.cell.skipMessage = 'Optional Test Skipped';\n        this.skip();\n      }\n      for(const proof of proofs) {\n        if(proof.created) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.created.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/35-di-jcs-create.js",
              "parent": "6kE6okCh75QdiTfkOWWUl",
              "ctx": null
            },
            {
              "type": "test",
              "title": "The expires property is OPTIONAL and, if present, specifies when the proof expires. If present, it MUST be an [XMLSCHEMA11-2] dateTimeStamp string, either in Universal Coordinated Time (UTC), denoted by a Z at the end of the value, or with a time zone offset relative to UTC.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=MUST%20be%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%2C%20either%20in%20Universal%20Coordinated%20Time';\n      if(optionalTests.dates === false) {\n        this.test.cell.skipMessage = 'Optional Test Skipped';\n        this.skip();\n      }\n      for(const proof of proofs) {\n        if(proof.expires) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.expires.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/35-di-jcs-create.js",
              "parent": "6kE6okCh75QdiTfkOWWUl",
              "ctx": null
            },
            {
              "type": "test",
              "title": "The domain property is OPTIONAL. It conveys one or more security domains in which the proof is meant to be used. If specified, the associated value MUST be either a string, or an unordered set of strings. A verifier SHOULD use the value to ensure that the proof was intended to be used in the security domain in which the verifier is operating.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#verify-proof:~:text=The%20domain%20property%20is%20OPTIONAL.%20It%20conveys%20one%20or%20more%20security%20domains%20in%20which%20the%20proof%20is%20meant%20to%20be%20used.%20If%20specified%2C%20the%20associated%20value%20MUST';\n      if(optionalTests.domain === false) {\n        this.test.cell.skipMessage = 'Optional Test Skipped';\n        this.skip();\n      }\n      for(const proof of proofs) {\n        if(proof.domain) {\n          const validType = isStringOrArrayOfStrings(proof.domain);\n          validType.should.equal(true, 'Expected ' +\n            '\"proof.domain\" to be either a string or an unordered ' +\n            'set of strings.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/35-di-jcs-create.js",
              "parent": "6kE6okCh75QdiTfkOWWUl",
              "ctx": null
            },
            {
              "type": "test",
              "title": "(challenge) A string value that SHOULD be included in a proof if a domain is specified.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#verify-proof:~:text=A%20string%20value%20that%20SHOULD%20be%20included%20in%20a%20proof%20if%20a%20domain%20is%20specified.';\n      if(optionalTests.domain === false) {\n        this.test.cell.skipMessage = 'Optional Test Skipped';\n        this.skip();\n      }\n      for(const proof of proofs) {\n        if(proof.challenge) {\n          // domain must be specified\n          should.exist(proof.domain, 'Expected \"proof.domain\" ' +\n            'to be specified.');\n          proof.challenge.should.be.a('string', 'Expected ' +\n            '\"proof.challenge\" to be a string.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/35-di-jcs-create.js",
              "parent": "6kE6okCh75QdiTfkOWWUl",
              "ctx": null
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook",
              "body": "function() {\n      this.currentTest.cell = {\n        columnId,\n        rowId: this.currentTest.title\n      };\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "6kE6okCh75QdiTfkOWWUl",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/35-di-jcs-create.js"
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook for \"When expressing a data integrity proof on an object, a proof property MUST be used.\"",
              "body": "async function() {\n      if(!issuer) {\n        throw new Error(`Expected ${vendorName} to have an issuer.`);\n      }\n      if(!credential) {\n        throw new Error(`Expected a credential to be passed in ` +\n          `received ${credential}`);\n      }\n      data = await createInitialVc({issuer, credential});\n      proofs = Array.isArray(data.proof) ? data.proof : [data.proof];\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "6kE6okCh75QdiTfkOWWUl",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/35-di-jcs-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 65209,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 24,
              "_error": null,
              "state": "failed",
              "err": {
                "response": {},
                "request": {},
                "options": {
                  "headers": {},
                  "body": "{\"credential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\"],\"id\":\"urn:uuid:f1353488-ab47-4db4-aab2-3570817297e8\",\"type\":[\"VerifiableCredential\"],\"issuer\":\"did:key:z6MksCeXh9Jwp4ZTEb5Kei7sJpBLpUyS3oaAib8wbtJQqsQu\",\"issuanceDate\":\"2020-03-16T22:37:26.544Z\",\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\"}},\"options\":{\"type\":\"DataIntegrityProof\",\"cryptosuite\":\"eddsa-jcs-2022\",\"credentialStatus\":{\"type\":\"BitstringStatusListEntry\",\"statusPurpose\":\"suspension\"}}}",
                  "method": "POST",
                  "json": {
                    "credential": {
                      "@context": [
                        "https://www.w3.org/2018/credentials/v1"
                      ],
                      "id": "urn:uuid:f1353488-ab47-4db4-aab2-3570817297e8",
                      "type": [
                        "VerifiableCredential"
                      ],
                      "issuer": "did:key:z6MksCeXh9Jwp4ZTEb5Kei7sJpBLpUyS3oaAib8wbtJQqsQu",
                      "issuanceDate": "2020-03-16T22:37:26.544Z",
                      "credentialSubject": {
                        "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                      }
                    },
                    "options": {
                      "type": "DataIntegrityProof",
                      "cryptosuite": "eddsa-jcs-2022",
                      "credentialStatus": {
                        "type": "BitstringStatusListEntry",
                        "statusPurpose": "suspension"
                      }
                    }
                  },
                  "agent": {
                    "_events": {},
                    "_eventsCount": 2,
                    "defaultPort": 443,
                    "protocol": "https:",
                    "options": {
                      "rejectUnauthorized": false,
                      "noDelay": true,
                      "path": null
                    },
                    "requests": {},
                    "sockets": {},
                    "freeSockets": {},
                    "keepAliveMsecs": 1000,
                    "keepAlive": false,
                    "maxSockets": null,
                    "maxFreeSockets": 256,
                    "scheduling": "lifo",
                    "maxTotalSockets": null,
                    "totalSocketCount": 0,
                    "maxCachedSessions": 100,
                    "_sessionCache": {
                      "map": {},
                      "list": []
                    }
                  },
                  "hooks": {
                    "beforeRequest": [],
                    "beforeRetry": [],
                    "afterResponse": [],
                    "beforeError": []
                  },
                  "prefixUrl": "",
                  "retry": {
                    "limit": 2,
                    "methods": [
                      "get",
                      "put",
                      "head",
                      "delete",
                      "options",
                      "trace"
                    ],
                    "statusCodes": [
                      408,
                      413,
                      429,
                      500,
                      502,
                      503,
                      504
                    ],
                    "afterStatusCodes": [
                      413,
                      429,
                      503
                    ],
                    "maxRetryAfter": null,
                    "backoffLimit": null
                  },
                  "throwHttpErrors": true,
                  "timeout": 10000,
                  "signal": {},
                  "duplex": "half"
                },
                "name": "HTTPError",
                "requestUrl": "https://agent.opsec.id/vc/credentials/issue",
                "status": 400,
                "data": {
                  "message": "DID not found: did:key:z6MksCeXh9Jwp4ZTEb5Kei7sJpBLpUyS3oaAib8wbtJQqsQu"
                }
              }
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "uSeA59PSWEwmCZ3WZqY3g",
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/35-di-jcs-create.js",
          "_testId": "urn:uuid:8e254bcc-315a-42db-8c1a-a20e13e0835b"
        },
        {
          "title": "bovine",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "When expressing a data integrity proof on an object, a proof property MUST be used.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=When%20expressing%20a%20data%20integrity%20proof%20on%20an%20object%2C%20a%20proof%20property%20MUST%20be%20used';\n      shouldHaveProof({vc: data});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/35-di-jcs-create.js",
              "parent": "Bcawf-ovY8cisOlug-0dG",
              "ctx": null,
              "_testId": "urn:uuid:21ba2244-5856-42c4-a050-89f6ab9d49f9",
              "cell": {
                "columnId": "bovine",
                "rowId": "When expressing a data integrity proof on an object, a proof property MUST be used."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=When%20expressing%20a%20data%20integrity%20proof%20on%20an%20object%2C%20a%20proof%20property%20MUST%20be%20used",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If present (proof), its value MUST be either a single object, or an unordered set of objects",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=If%20present%2C%20its%20value%20MUST%20be%20either%20a%20single%20object%2C%20or%20an%20unordered%20set%20of%20objects';\n      shouldHaveProof({vc: data});\n      const {proof} = data;\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/35-di-jcs-create.js",
              "parent": "Bcawf-ovY8cisOlug-0dG",
              "ctx": null,
              "_testId": "urn:uuid:f3f50606-8bc4-4ae8-b3aa-14198cd30215",
              "cell": {
                "columnId": "bovine",
                "rowId": "If present (proof), its value MUST be either a single object, or an unordered set of objects"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=If%20present%2C%20its%20value%20MUST%20be%20either%20a%20single%20object%2C%20or%20an%20unordered%20set%20of%20objects",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.id\") An optional identifier for the proof, which MUST be a URL.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=An%20optional%20identifier%20for%20the%20proof%2C%20which%20MUST%20be%20a%20URL';\n      for(const proof of proofs) {\n        if(proof.id) {\n          shouldBeUrl({url: proof.id, prop: 'proof.id'});\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/35-di-jcs-create.js",
              "parent": "Bcawf-ovY8cisOlug-0dG",
              "ctx": null,
              "_testId": "urn:uuid:7fc16c3a-ca9a-43f1-8f3d-29df45d0b0e7",
              "cell": {
                "columnId": "bovine",
                "rowId": "(\"proof.id\") An optional identifier for the proof, which MUST be a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=An%20optional%20identifier%20for%20the%20proof%2C%20which%20MUST%20be%20a%20URL",
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The specific proof type used for the cryptographic proof MUST be specified as a string that maps to a URL.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20specific%20proof%20type%20used%20for%20the%20cryptographic%20proof%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL';\n      const prop = '@type';\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n        const expanded = await jsonld.expand({\n          '@context': data['@context'],\n          type: proof.type\n        }, {documentLoader});\n        for(const term of expanded) {\n          const types = term[prop];\n          should.exist(types, 'Expected @type to exist.');\n          types.every(url => shouldBeUrl({url, prop}));\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/35-di-jcs-create.js",
              "parent": "Bcawf-ovY8cisOlug-0dG",
              "ctx": null,
              "_testId": "urn:uuid:430b1df8-73cd-4943-9d7c-4db7cd668e46",
              "cell": {
                "columnId": "bovine",
                "rowId": "The specific proof type used for the cryptographic proof MUST be specified as a string that maps to a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20specific%20proof%20type%20used%20for%20the%20cryptographic%20proof%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 65334,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The type property MUST contain the string DataIntegrityProof.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-data-integrity/#contexts-and-vocabularies:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.';\n          for(const proof of proofs) {\n            proof.should.have.property('type');\n            proof.type.should.be.a(\n              'string',\n              'Expected \"proof.type\" to be a string.'\n            );\n            const hasExpectedType = expectedProofTypes.includes(proof.type);\n            hasExpectedType.should.equal(\n              true,\n              `Expected \"proof.type\" to be one of ` +\n              `${expectedProofTypes} Received: ${proof.type}`);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/35-di-jcs-create.js",
              "parent": "Bcawf-ovY8cisOlug-0dG",
              "ctx": null,
              "_testId": "urn:uuid:e56cf9d7-f1c8-44b9-8a3a-8be423ab1dc1",
              "cell": {
                "columnId": "bovine",
                "rowId": "The type property MUST contain the string DataIntegrityProof."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#contexts-and-vocabularies:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 65335,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
              "body": "function() {\n          this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.';\n          for(const proof of proofs) {\n            should.exist(proof, 'Expected proof to exist.');\n            if(proof.type === 'DataIntegrityProof') {\n              should.exist(proof.cryptosuite,\n                'Expected proof to have property \"cryptosuite\".');\n            }\n            const {\n              prefix: expectedPrefix,\n              name: encodingName\n            } = expectedMultibasePrefix(proof.cryptosuite);\n            shouldHaveProofValue({proof, expectedPrefix, encodingName});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/35-di-jcs-create.js",
              "parent": "Bcawf-ovY8cisOlug-0dG",
              "ctx": null,
              "_testId": "urn:uuid:a9d83460-48bd-4329-a421-a375f03c55b3",
              "cell": {
                "columnId": "bovine",
                "rowId": "The proofValue property MUST be used, as specified in 2.1 Proofs."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified. If specified, its value MUST be a string.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.';\n      for(const proof of proofs) {\n        if(proof.type && proof.type === 'DataIntegrityProof') {\n          should.exist(\n            proof.cryptosuite,\n            'If the proof type is DataIntegrityProof, cryptosuite MUST ' +\n            'be specified');\n          proof.cryptosuite.should.be.a(\n            'string',\n            'cryptosuite value MUST be a string.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/35-di-jcs-create.js",
              "parent": "Bcawf-ovY8cisOlug-0dG",
              "ctx": null,
              "_testId": "urn:uuid:1bb9e496-860f-428d-9e81-a71cccd2e7e6",
              "cell": {
                "columnId": "bovine",
                "rowId": "If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified. If specified, its value MUST be a string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "A verification method is the means and information needed to verify the proof. If included, the value MUST be a string that maps to a [URL]",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=A%20verification%20method%20is%20the%20means%20and%20information%20needed%20to%20verify%20the%20proof.%20If%20included%2C%20the%20value%20MUST%20be%20a%20string%20that%20maps%20to%20a%20%5BURL%5D.';\n      for(const proof of proofs) {\n        await shouldMapToUrl({\n          doc: {\n            '@context': data['@context'],\n            ...proof\n          },\n          term: 'https://w3id.org/security#verificationMethod',\n          prop: '@id',\n          documentLoader\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/35-di-jcs-create.js",
              "parent": "Bcawf-ovY8cisOlug-0dG",
              "ctx": null,
              "_testId": "urn:uuid:26cf8a9d-91af-4ece-9c56-4934cc7ee8b7",
              "cell": {
                "columnId": "bovine",
                "rowId": "A verification method is the means and information needed to verify the proof. If included, the value MUST be a string that maps to a [URL]"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=A%20verification%20method%20is%20the%20means%20and%20information%20needed%20to%20verify%20the%20proof.%20If%20included%2C%20the%20value%20MUST%20be%20a%20string%20that%20maps%20to%20a%20%5BURL%5D.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 65335,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The reason the proof was created (\"proof.proofPurpose\") MUST be specified as a string that maps to a URL",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20reason%20the%20proof%20was%20created%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL';\n      for(const proof of proofs) {\n        proof.should.have.property('proofPurpose');\n        proof.proofPurpose.should.be.a('string');\n        await shouldMapToUrl({\n          doc: {\n            '@context': data['@context'],\n            ...proof\n          },\n          term: 'https://w3id.org/security#proofPurpose',\n          prop: '@id',\n          documentLoader\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/35-di-jcs-create.js",
              "parent": "Bcawf-ovY8cisOlug-0dG",
              "ctx": null,
              "_testId": "urn:uuid:9b7642cf-e78d-4456-be35-7c6179a32019",
              "cell": {
                "columnId": "bovine",
                "rowId": "The reason the proof was created (\"proof.proofPurpose\") MUST be specified as a string that maps to a URL"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20reason%20the%20proof%20was%20created%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 65336,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof';\n      for(const proof of proofs) {\n        should.exist(proof, 'Expected proof to exist.');\n        const {\n          prefix: expectedPrefix,\n          name: encodingName\n        } = expectedMultibasePrefix(proof.cryptosuite);\n        shouldHaveProofValue({proof, expectedPrefix, encodingName});\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/35-di-jcs-create.js",
              "parent": "Bcawf-ovY8cisOlug-0dG",
              "ctx": null,
              "_testId": "urn:uuid:d9503fb8-dfa3-4361-a13a-95d9f405039b",
              "cell": {
                "columnId": "bovine",
                "rowId": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.previousProof\" field exists, it MUST be a string.",
              "body": "function() {\n        for(const proof of proofs) {\n          if(proof.previousProof) {\n            proof.previousProof.should.be.a('string', 'Expected ' +\n              '\"proof.previousProof\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/35-di-jcs-create.js",
              "parent": "Bcawf-ovY8cisOlug-0dG",
              "ctx": null,
              "_testId": "urn:uuid:55563530-8bd9-4bdc-98f5-b3ae8730494c",
              "cell": {
                "columnId": "bovine",
                "rowId": "if \"proof.previousProof\" field exists, it MUST be a string."
              },
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "if \"proof.nonce\" field exists, it MUST be a string.",
              "body": "function() {\n        for(const proof of proofs) {\n          if(proof.nonce) {\n            proof.nonce.should.be.a('string', 'Expected \"proof.nonce\" ' +\n              'to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/35-di-jcs-create.js",
              "parent": "Bcawf-ovY8cisOlug-0dG",
              "ctx": null,
              "_testId": "urn:uuid:71941524-b8f4-49b9-8762-5b9446cbdf1f",
              "cell": {
                "columnId": "bovine",
                "rowId": "if \"proof.nonce\" field exists, it MUST be a string."
              },
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Cryptographic suite designers MUST use mandatory proof value properties defined in Section 2.1 Proofs, and MAY define other properties specific to their cryptographic suite.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#add-proof:~:text=MUST%20use%20mandatory%20proof%20value%20properties%20defined';\n      for(const proof of proofs) {\n        shouldBeProof({proof});\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/35-di-jcs-create.js",
              "parent": "Bcawf-ovY8cisOlug-0dG",
              "ctx": null,
              "_testId": "urn:uuid:a7b50582-ccd4-4e32-8c87-70903927db82",
              "cell": {
                "columnId": "bovine",
                "rowId": "Cryptographic suite designers MUST use mandatory proof value properties defined in Section 2.1 Proofs, and MAY define other properties specific to their cryptographic suite."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#add-proof:~:text=MUST%20use%20mandatory%20proof%20value%20properties%20defined",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 65338,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      const undefinedType = structuredClone(credential);\n      undefinedType.type.push('InvalidType');\n      await shouldFailIssuance({\n        credential: undefinedType,\n        issuer,\n        reason: 'Expected issuer to error when VC has an undefined type.'\n      });\n      const undefinedTerm = structuredClone(credential);\n      undefinedTerm.credentialSubject.invalidTerm = 'invalidTerm';\n      await shouldFailIssuance({\n        credential: undefinedTerm,\n        issuer,\n        reason: 'Expected issuer to error when VC has an undefined term.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/35-di-jcs-create.js",
              "parent": "Bcawf-ovY8cisOlug-0dG",
              "ctx": null,
              "_testId": "urn:uuid:aa79f818-3c10-490a-9d22-f372cc234f77",
              "cell": {
                "columnId": "bovine",
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 65338,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 96,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected issuer to error when VC has an undefined type.: expected Response { status: 200, statusText: 'OK', headers: Headers { server: 'nginx/1.18.0 (Ubuntu)', date: 'Sun, 25 Aug 2024 05:06:27 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'content-encoding': 'gzip', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected issuer to error when VC has an undefined type.: expected Response { status: 200, statusText: 'OK', headers: Headers { server: 'nginx/1.18.0 (Ubuntu)', date: 'Sun, 25 Aug 2024 05:06:27 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'content-encoding': 'gzip', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at shouldFailIssuance (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:71:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/suites/create.js:246:7)"
              }
            },
            {
              "type": "test",
              "title": "When an application is securing a document, if an @context property is not provided in the document or the Data Integrity terms used in the document are not mapped by existing values in the @context property, implementations SHOULD inject or append an @context property with a value of https://w3id.org/security/data-integrity/v2 or one or more contexts with at least the same declarations, such as the Verifiable Credential Data Model v2.0 context (https://www.w3.org/ns/credentials/v2).",
              "body": "async function() {\n      if(!issuer) {\n        throw new Error(`Expected ${vendorName} to have an issuer.`);\n      }\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#context-injection:~:text=if%20an%20%40context%20property%20is%20not%20provided%20in%20the%20document%20or%20the%20Data%20Integrity%20terms%20used%20in%20the%20document%20are%20not%20mapped%20by%20existing%20values%20in%20the%20%40context%20property%2C%20implementations%20SHOULD%20inject%20or%20append';\n      if(optionalTests.contextInjection === false) {\n        this.test.cell.skipMessage = 'Optional Test Skipped';\n        this.skip();\n      }\n      const _credential = structuredClone(credential);\n      const expectedContexts = [\n        'https://w3id.org/security/data-integrity/v2',\n        'https://www.w3.org/ns/credentials/v2'\n      ];\n      // remove the vc's context and expect context injection to occur\n      delete _credential['@context'];\n      let err;\n      let data;\n      try {\n        data = await createInitialVc({issuer, credential: _credential});\n      } catch(e) {\n        err = e;\n      }\n      should.not.exist(\n        err,\n        `Expected issuer ${vendorName} to perform context injection on a ` +\n        `VC with out an \"@context\" property`);\n      should.exist(data, `Expected issuer ${vendorName} to return data.`);\n      data.should.be.an('object', 'Expected response data to be an object.');\n      should.exist(data['@context'],\n        'Expected data to have an injected \"@context\" property.');\n      if(Array.isArray(data['@context'])) {\n        const hasExpectedContext = expectedContexts.some(\n          ctx => data['@context'].includes(ctx));\n        return hasExpectedContext.should.equal(true,\n          `Expected injected context to contain one of ${expectedContexts}`);\n      }\n      data['@context'].should.be.oneOf(expectedContexts);\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/35-di-jcs-create.js",
              "parent": "Bcawf-ovY8cisOlug-0dG",
              "ctx": null,
              "_testId": "urn:uuid:be4abfb1-f722-4df7-9685-636760f25657",
              "cell": {
                "columnId": "bovine",
                "rowId": "When an application is securing a document, if an @context property is not provided in the document or the Data Integrity terms used in the document are not mapped by existing values in the @context property, implementations SHOULD inject or append an @context property with a value of https://w3id.org/security/data-integrity/v2 or one or more contexts with at least the same declarations, such as the Verifiable Credential Data Model v2.0 context (https://www.w3.org/ns/credentials/v2)."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#context-injection:~:text=if%20an%20%40context%20property%20is%20not%20provided%20in%20the%20document%20or%20the%20Data%20Integrity%20terms%20used%20in%20the%20document%20are%20not%20mapped%20by%20existing%20values%20in%20the%20%40context%20property%2C%20implementations%20SHOULD%20inject%20or%20append",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 65435,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 93,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The date and time the proof was created is OPTIONAL and, if included, MUST be specified as an [XMLSCHEMA11-2] dateTimeStamp string, either in Universal Coordinated Time (UTC), denoted by a Z at the end of the value, or with a time zone offset relative to UTC.",
              "body": "function() {\n      this.test.link = 'https://www.w3.org/TR/vc-data-integrity/#:~:text=The%20date%20and%20time%20the%20proof%20was%20created%20is%20OPTIONAL%20and%2C%20if%20included%2C%20MUST%20be%20specified%20as%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%2C%20either%20in%20Universal%20Coordinated%20Time%20(UTC)%2C%20denoted%20by%20a%20Z%20at%20the%20end%20of%20the%20value%2C%20or%20with%20a%20time%20zone%20offset%20relative%20to%20UTC.';\n      if(optionalTests.dates === false) {\n        this.test.cell.skipMessage = 'Optional Test Skipped';\n        this.skip();\n      }\n      for(const proof of proofs) {\n        if(proof.created) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.created.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/35-di-jcs-create.js",
              "parent": "Bcawf-ovY8cisOlug-0dG",
              "ctx": null,
              "_testId": "urn:uuid:502d5e0b-858f-4883-aea6-e2fd6839c5d0",
              "cell": {
                "columnId": "bovine",
                "rowId": "The date and time the proof was created is OPTIONAL and, if included, MUST be specified as an [XMLSCHEMA11-2] dateTimeStamp string, either in Universal Coordinated Time (UTC), denoted by a Z at the end of the value, or with a time zone offset relative to UTC."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://www.w3.org/TR/vc-data-integrity/#:~:text=The%20date%20and%20time%20the%20proof%20was%20created%20is%20OPTIONAL%20and%2C%20if%20included%2C%20MUST%20be%20specified%20as%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%2C%20either%20in%20Universal%20Coordinated%20Time%20(UTC)%2C%20denoted%20by%20a%20Z%20at%20the%20end%20of%20the%20value%2C%20or%20with%20a%20time%20zone%20offset%20relative%20to%20UTC.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The expires property is OPTIONAL and, if present, specifies when the proof expires. If present, it MUST be an [XMLSCHEMA11-2] dateTimeStamp string, either in Universal Coordinated Time (UTC), denoted by a Z at the end of the value, or with a time zone offset relative to UTC.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=MUST%20be%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%2C%20either%20in%20Universal%20Coordinated%20Time';\n      if(optionalTests.dates === false) {\n        this.test.cell.skipMessage = 'Optional Test Skipped';\n        this.skip();\n      }\n      for(const proof of proofs) {\n        if(proof.expires) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.expires.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/35-di-jcs-create.js",
              "parent": "Bcawf-ovY8cisOlug-0dG",
              "ctx": null,
              "_testId": "urn:uuid:bb7bf9bf-6cc2-4a07-99b1-822225bbbeda",
              "cell": {
                "columnId": "bovine",
                "rowId": "The expires property is OPTIONAL and, if present, specifies when the proof expires. If present, it MUST be an [XMLSCHEMA11-2] dateTimeStamp string, either in Universal Coordinated Time (UTC), denoted by a Z at the end of the value, or with a time zone offset relative to UTC."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=MUST%20be%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%2C%20either%20in%20Universal%20Coordinated%20Time",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The domain property is OPTIONAL. It conveys one or more security domains in which the proof is meant to be used. If specified, the associated value MUST be either a string, or an unordered set of strings. A verifier SHOULD use the value to ensure that the proof was intended to be used in the security domain in which the verifier is operating.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#verify-proof:~:text=The%20domain%20property%20is%20OPTIONAL.%20It%20conveys%20one%20or%20more%20security%20domains%20in%20which%20the%20proof%20is%20meant%20to%20be%20used.%20If%20specified%2C%20the%20associated%20value%20MUST';\n      if(optionalTests.domain === false) {\n        this.test.cell.skipMessage = 'Optional Test Skipped';\n        this.skip();\n      }\n      for(const proof of proofs) {\n        if(proof.domain) {\n          const validType = isStringOrArrayOfStrings(proof.domain);\n          validType.should.equal(true, 'Expected ' +\n            '\"proof.domain\" to be either a string or an unordered ' +\n            'set of strings.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/35-di-jcs-create.js",
              "parent": "Bcawf-ovY8cisOlug-0dG",
              "ctx": null,
              "_testId": "urn:uuid:bd3c24aa-5dc7-4a63-8aca-48181633bcfb",
              "cell": {
                "columnId": "bovine",
                "rowId": "The domain property is OPTIONAL. It conveys one or more security domains in which the proof is meant to be used. If specified, the associated value MUST be either a string, or an unordered set of strings. A verifier SHOULD use the value to ensure that the proof was intended to be used in the security domain in which the verifier is operating."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#verify-proof:~:text=The%20domain%20property%20is%20OPTIONAL.%20It%20conveys%20one%20or%20more%20security%20domains%20in%20which%20the%20proof%20is%20meant%20to%20be%20used.%20If%20specified%2C%20the%20associated%20value%20MUST",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(challenge) A string value that SHOULD be included in a proof if a domain is specified.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#verify-proof:~:text=A%20string%20value%20that%20SHOULD%20be%20included%20in%20a%20proof%20if%20a%20domain%20is%20specified.';\n      if(optionalTests.domain === false) {\n        this.test.cell.skipMessage = 'Optional Test Skipped';\n        this.skip();\n      }\n      for(const proof of proofs) {\n        if(proof.challenge) {\n          // domain must be specified\n          should.exist(proof.domain, 'Expected \"proof.domain\" ' +\n            'to be specified.');\n          proof.challenge.should.be.a('string', 'Expected ' +\n            '\"proof.challenge\" to be a string.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/35-di-jcs-create.js",
              "parent": "Bcawf-ovY8cisOlug-0dG",
              "ctx": null,
              "_testId": "urn:uuid:d0f53503-a8b9-4416-b59e-fac022617b7b",
              "cell": {
                "columnId": "bovine",
                "rowId": "(challenge) A string value that SHOULD be included in a proof if a domain is specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#verify-proof:~:text=A%20string%20value%20that%20SHOULD%20be%20included%20in%20a%20proof%20if%20a%20domain%20is%20specified.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"bovine\"",
              "body": "function() {\n      this.currentTest.cell = {\n        columnId,\n        rowId: this.currentTest.title\n      };\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "Bcawf-ovY8cisOlug-0dG",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/35-di-jcs-create.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"bovine\"",
              "body": "async function() {\n      if(!issuer) {\n        throw new Error(`Expected ${vendorName} to have an issuer.`);\n      }\n      if(!credential) {\n        throw new Error(`Expected a credential to be passed in ` +\n          `received ${credential}`);\n      }\n      data = await createInitialVc({issuer, credential});\n      proofs = Array.isArray(data.proof) ? data.proof : [data.proof];\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "Bcawf-ovY8cisOlug-0dG",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/35-di-jcs-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 65234,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 99,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "uSeA59PSWEwmCZ3WZqY3g",
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/35-di-jcs-create.js",
          "_testId": "urn:uuid:1d750dff-12a8-4f4a-8a67-7440fd3eb5a7"
        }
      ],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "QTtpw9S7WaqSoh51WrSQz",
      "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/35-di-jcs-create.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Issuer",
      "_testId": "urn:uuid:52263099-e34b-46b8-834c-b5e4cc80dbfb",
      "columns": [
        "Grotto Networking",
        "OpSecId",
        "bovine"
      ],
      "rows": [
        {
          "id": "When expressing a data integrity proof on an object, a proof property MUST be used.",
          "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=When%20expressing%20a%20data%20integrity%20proof%20on%20an%20object%2C%20a%20proof%20property%20MUST%20be%20used",
          "cells": [
            {
              "type": "test",
              "title": "When expressing a data integrity proof on an object, a proof property MUST be used.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=When%20expressing%20a%20data%20integrity%20proof%20on%20an%20object%2C%20a%20proof%20property%20MUST%20be%20used';\n      shouldHaveProof({vc: data});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/35-di-jcs-create.js",
              "parent": "KdN2hm8WrJINf4v5bSYcJ",
              "ctx": null,
              "_testId": "urn:uuid:3d93e302-6016-4524-9989-dce756ee938c",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "When expressing a data integrity proof on an object, a proof property MUST be used."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=When%20expressing%20a%20data%20integrity%20proof%20on%20an%20object%2C%20a%20proof%20property%20MUST%20be%20used",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "cell": {
                "rowId": "When expressing a data integrity proof on an object, a proof property MUST be used.",
                "colId": "OpSecId"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            },
            {
              "type": "test",
              "title": "When expressing a data integrity proof on an object, a proof property MUST be used.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=When%20expressing%20a%20data%20integrity%20proof%20on%20an%20object%2C%20a%20proof%20property%20MUST%20be%20used';\n      shouldHaveProof({vc: data});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/35-di-jcs-create.js",
              "parent": "Bcawf-ovY8cisOlug-0dG",
              "ctx": null,
              "_testId": "urn:uuid:21ba2244-5856-42c4-a050-89f6ab9d49f9",
              "cell": {
                "columnId": "bovine",
                "rowId": "When expressing a data integrity proof on an object, a proof property MUST be used."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=When%20expressing%20a%20data%20integrity%20proof%20on%20an%20object%2C%20a%20proof%20property%20MUST%20be%20used",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "If present (proof), its value MUST be either a single object, or an unordered set of objects",
          "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=If%20present%2C%20its%20value%20MUST%20be%20either%20a%20single%20object%2C%20or%20an%20unordered%20set%20of%20objects",
          "cells": [
            {
              "type": "test",
              "title": "If present (proof), its value MUST be either a single object, or an unordered set of objects",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=If%20present%2C%20its%20value%20MUST%20be%20either%20a%20single%20object%2C%20or%20an%20unordered%20set%20of%20objects';\n      shouldHaveProof({vc: data});\n      const {proof} = data;\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/35-di-jcs-create.js",
              "parent": "KdN2hm8WrJINf4v5bSYcJ",
              "ctx": null,
              "_testId": "urn:uuid:27ce8981-8009-4712-bea2-de29d331f0ac",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If present (proof), its value MUST be either a single object, or an unordered set of objects"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=If%20present%2C%20its%20value%20MUST%20be%20either%20a%20single%20object%2C%20or%20an%20unordered%20set%20of%20objects",
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "cell": {
                "rowId": "If present (proof), its value MUST be either a single object, or an unordered set of objects",
                "colId": "OpSecId"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            },
            {
              "type": "test",
              "title": "If present (proof), its value MUST be either a single object, or an unordered set of objects",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=If%20present%2C%20its%20value%20MUST%20be%20either%20a%20single%20object%2C%20or%20an%20unordered%20set%20of%20objects';\n      shouldHaveProof({vc: data});\n      const {proof} = data;\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/35-di-jcs-create.js",
              "parent": "Bcawf-ovY8cisOlug-0dG",
              "ctx": null,
              "_testId": "urn:uuid:f3f50606-8bc4-4ae8-b3aa-14198cd30215",
              "cell": {
                "columnId": "bovine",
                "rowId": "If present (proof), its value MUST be either a single object, or an unordered set of objects"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=If%20present%2C%20its%20value%20MUST%20be%20either%20a%20single%20object%2C%20or%20an%20unordered%20set%20of%20objects",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "(\"proof.id\") An optional identifier for the proof, which MUST be a URL.",
          "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=An%20optional%20identifier%20for%20the%20proof%2C%20which%20MUST%20be%20a%20URL",
          "cells": [
            {
              "type": "test",
              "title": "(\"proof.id\") An optional identifier for the proof, which MUST be a URL.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=An%20optional%20identifier%20for%20the%20proof%2C%20which%20MUST%20be%20a%20URL';\n      for(const proof of proofs) {\n        if(proof.id) {\n          shouldBeUrl({url: proof.id, prop: 'proof.id'});\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/35-di-jcs-create.js",
              "parent": "KdN2hm8WrJINf4v5bSYcJ",
              "ctx": null,
              "_testId": "urn:uuid:be88b5d1-2a93-4f2a-8eca-f42d1ec25eca",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "(\"proof.id\") An optional identifier for the proof, which MUST be a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=An%20optional%20identifier%20for%20the%20proof%2C%20which%20MUST%20be%20a%20URL",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "cell": {
                "rowId": "(\"proof.id\") An optional identifier for the proof, which MUST be a URL.",
                "colId": "OpSecId"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            },
            {
              "type": "test",
              "title": "(\"proof.id\") An optional identifier for the proof, which MUST be a URL.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=An%20optional%20identifier%20for%20the%20proof%2C%20which%20MUST%20be%20a%20URL';\n      for(const proof of proofs) {\n        if(proof.id) {\n          shouldBeUrl({url: proof.id, prop: 'proof.id'});\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/35-di-jcs-create.js",
              "parent": "Bcawf-ovY8cisOlug-0dG",
              "ctx": null,
              "_testId": "urn:uuid:7fc16c3a-ca9a-43f1-8f3d-29df45d0b0e7",
              "cell": {
                "columnId": "bovine",
                "rowId": "(\"proof.id\") An optional identifier for the proof, which MUST be a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=An%20optional%20identifier%20for%20the%20proof%2C%20which%20MUST%20be%20a%20URL",
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "The specific proof type used for the cryptographic proof MUST be specified as a string that maps to a URL.",
          "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20specific%20proof%20type%20used%20for%20the%20cryptographic%20proof%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL",
          "cells": [
            {
              "type": "test",
              "title": "The specific proof type used for the cryptographic proof MUST be specified as a string that maps to a URL.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20specific%20proof%20type%20used%20for%20the%20cryptographic%20proof%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL';\n      const prop = '@type';\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n        const expanded = await jsonld.expand({\n          '@context': data['@context'],\n          type: proof.type\n        }, {documentLoader});\n        for(const term of expanded) {\n          const types = term[prop];\n          should.exist(types, 'Expected @type to exist.');\n          types.every(url => shouldBeUrl({url, prop}));\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/35-di-jcs-create.js",
              "parent": "KdN2hm8WrJINf4v5bSYcJ",
              "ctx": null,
              "_testId": "urn:uuid:3d91e0f7-18a3-418e-a402-c573537b80b4",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The specific proof type used for the cryptographic proof MUST be specified as a string that maps to a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20specific%20proof%20type%20used%20for%20the%20cryptographic%20proof%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 65058,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "cell": {
                "rowId": "The specific proof type used for the cryptographic proof MUST be specified as a string that maps to a URL.",
                "colId": "OpSecId"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            },
            {
              "type": "test",
              "title": "The specific proof type used for the cryptographic proof MUST be specified as a string that maps to a URL.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20specific%20proof%20type%20used%20for%20the%20cryptographic%20proof%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL';\n      const prop = '@type';\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n        const expanded = await jsonld.expand({\n          '@context': data['@context'],\n          type: proof.type\n        }, {documentLoader});\n        for(const term of expanded) {\n          const types = term[prop];\n          should.exist(types, 'Expected @type to exist.');\n          types.every(url => shouldBeUrl({url, prop}));\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/35-di-jcs-create.js",
              "parent": "Bcawf-ovY8cisOlug-0dG",
              "ctx": null,
              "_testId": "urn:uuid:430b1df8-73cd-4943-9d7c-4db7cd668e46",
              "cell": {
                "columnId": "bovine",
                "rowId": "The specific proof type used for the cryptographic proof MUST be specified as a string that maps to a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20specific%20proof%20type%20used%20for%20the%20cryptographic%20proof%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 65334,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "The type property MUST contain the string DataIntegrityProof.",
          "link": "https://w3c.github.io/vc-data-integrity/#contexts-and-vocabularies:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.",
          "cells": [
            {
              "type": "test",
              "title": "The type property MUST contain the string DataIntegrityProof.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-data-integrity/#contexts-and-vocabularies:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.';\n          for(const proof of proofs) {\n            proof.should.have.property('type');\n            proof.type.should.be.a(\n              'string',\n              'Expected \"proof.type\" to be a string.'\n            );\n            const hasExpectedType = expectedProofTypes.includes(proof.type);\n            hasExpectedType.should.equal(\n              true,\n              `Expected \"proof.type\" to be one of ` +\n              `${expectedProofTypes} Received: ${proof.type}`);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/35-di-jcs-create.js",
              "parent": "KdN2hm8WrJINf4v5bSYcJ",
              "ctx": null,
              "_testId": "urn:uuid:317dcd19-0482-4dc2-a637-83a7df663a08",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The type property MUST contain the string DataIntegrityProof."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#contexts-and-vocabularies:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 65060,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "cell": {
                "rowId": "The type property MUST contain the string DataIntegrityProof.",
                "colId": "OpSecId"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            },
            {
              "type": "test",
              "title": "The type property MUST contain the string DataIntegrityProof.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-data-integrity/#contexts-and-vocabularies:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.';\n          for(const proof of proofs) {\n            proof.should.have.property('type');\n            proof.type.should.be.a(\n              'string',\n              'Expected \"proof.type\" to be a string.'\n            );\n            const hasExpectedType = expectedProofTypes.includes(proof.type);\n            hasExpectedType.should.equal(\n              true,\n              `Expected \"proof.type\" to be one of ` +\n              `${expectedProofTypes} Received: ${proof.type}`);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/35-di-jcs-create.js",
              "parent": "Bcawf-ovY8cisOlug-0dG",
              "ctx": null,
              "_testId": "urn:uuid:e56cf9d7-f1c8-44b9-8a3a-8be423ab1dc1",
              "cell": {
                "columnId": "bovine",
                "rowId": "The type property MUST contain the string DataIntegrityProof."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#contexts-and-vocabularies:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 65335,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
          "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.",
          "cells": [
            {
              "type": "test",
              "title": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
              "body": "function() {\n          this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.';\n          for(const proof of proofs) {\n            should.exist(proof, 'Expected proof to exist.');\n            if(proof.type === 'DataIntegrityProof') {\n              should.exist(proof.cryptosuite,\n                'Expected proof to have property \"cryptosuite\".');\n            }\n            const {\n              prefix: expectedPrefix,\n              name: encodingName\n            } = expectedMultibasePrefix(proof.cryptosuite);\n            shouldHaveProofValue({proof, expectedPrefix, encodingName});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/35-di-jcs-create.js",
              "parent": "KdN2hm8WrJINf4v5bSYcJ",
              "ctx": null,
              "_testId": "urn:uuid:ff86d47f-29fc-4673-b3e7-3ddc98bd8796",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The proofValue property MUST be used, as specified in 2.1 Proofs."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "cell": {
                "rowId": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
                "colId": "OpSecId"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            },
            {
              "type": "test",
              "title": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
              "body": "function() {\n          this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.';\n          for(const proof of proofs) {\n            should.exist(proof, 'Expected proof to exist.');\n            if(proof.type === 'DataIntegrityProof') {\n              should.exist(proof.cryptosuite,\n                'Expected proof to have property \"cryptosuite\".');\n            }\n            const {\n              prefix: expectedPrefix,\n              name: encodingName\n            } = expectedMultibasePrefix(proof.cryptosuite);\n            shouldHaveProofValue({proof, expectedPrefix, encodingName});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/35-di-jcs-create.js",
              "parent": "Bcawf-ovY8cisOlug-0dG",
              "ctx": null,
              "_testId": "urn:uuid:a9d83460-48bd-4329-a421-a375f03c55b3",
              "cell": {
                "columnId": "bovine",
                "rowId": "The proofValue property MUST be used, as specified in 2.1 Proofs."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified. If specified, its value MUST be a string.",
          "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.",
          "cells": [
            {
              "type": "test",
              "title": "If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified. If specified, its value MUST be a string.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.';\n      for(const proof of proofs) {\n        if(proof.type && proof.type === 'DataIntegrityProof') {\n          should.exist(\n            proof.cryptosuite,\n            'If the proof type is DataIntegrityProof, cryptosuite MUST ' +\n            'be specified');\n          proof.cryptosuite.should.be.a(\n            'string',\n            'cryptosuite value MUST be a string.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/35-di-jcs-create.js",
              "parent": "KdN2hm8WrJINf4v5bSYcJ",
              "ctx": null,
              "_testId": "urn:uuid:74509a57-6521-4ac6-9170-6179c153e39e",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified. If specified, its value MUST be a string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "cell": {
                "rowId": "If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified. If specified, its value MUST be a string.",
                "colId": "OpSecId"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            },
            {
              "type": "test",
              "title": "If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified. If specified, its value MUST be a string.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.';\n      for(const proof of proofs) {\n        if(proof.type && proof.type === 'DataIntegrityProof') {\n          should.exist(\n            proof.cryptosuite,\n            'If the proof type is DataIntegrityProof, cryptosuite MUST ' +\n            'be specified');\n          proof.cryptosuite.should.be.a(\n            'string',\n            'cryptosuite value MUST be a string.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/35-di-jcs-create.js",
              "parent": "Bcawf-ovY8cisOlug-0dG",
              "ctx": null,
              "_testId": "urn:uuid:1bb9e496-860f-428d-9e81-a71cccd2e7e6",
              "cell": {
                "columnId": "bovine",
                "rowId": "If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified. If specified, its value MUST be a string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "A verification method is the means and information needed to verify the proof. If included, the value MUST be a string that maps to a [URL]",
          "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=A%20verification%20method%20is%20the%20means%20and%20information%20needed%20to%20verify%20the%20proof.%20If%20included%2C%20the%20value%20MUST%20be%20a%20string%20that%20maps%20to%20a%20%5BURL%5D.",
          "cells": [
            {
              "type": "test",
              "title": "A verification method is the means and information needed to verify the proof. If included, the value MUST be a string that maps to a [URL]",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=A%20verification%20method%20is%20the%20means%20and%20information%20needed%20to%20verify%20the%20proof.%20If%20included%2C%20the%20value%20MUST%20be%20a%20string%20that%20maps%20to%20a%20%5BURL%5D.';\n      for(const proof of proofs) {\n        await shouldMapToUrl({\n          doc: {\n            '@context': data['@context'],\n            ...proof\n          },\n          term: 'https://w3id.org/security#verificationMethod',\n          prop: '@id',\n          documentLoader\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/35-di-jcs-create.js",
              "parent": "KdN2hm8WrJINf4v5bSYcJ",
              "ctx": null,
              "_testId": "urn:uuid:efd41f42-f41d-40a9-b473-8b8d5986b956",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "A verification method is the means and information needed to verify the proof. If included, the value MUST be a string that maps to a [URL]"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=A%20verification%20method%20is%20the%20means%20and%20information%20needed%20to%20verify%20the%20proof.%20If%20included%2C%20the%20value%20MUST%20be%20a%20string%20that%20maps%20to%20a%20%5BURL%5D.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 65060,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "cell": {
                "rowId": "A verification method is the means and information needed to verify the proof. If included, the value MUST be a string that maps to a [URL]",
                "colId": "OpSecId"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            },
            {
              "type": "test",
              "title": "A verification method is the means and information needed to verify the proof. If included, the value MUST be a string that maps to a [URL]",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=A%20verification%20method%20is%20the%20means%20and%20information%20needed%20to%20verify%20the%20proof.%20If%20included%2C%20the%20value%20MUST%20be%20a%20string%20that%20maps%20to%20a%20%5BURL%5D.';\n      for(const proof of proofs) {\n        await shouldMapToUrl({\n          doc: {\n            '@context': data['@context'],\n            ...proof\n          },\n          term: 'https://w3id.org/security#verificationMethod',\n          prop: '@id',\n          documentLoader\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/35-di-jcs-create.js",
              "parent": "Bcawf-ovY8cisOlug-0dG",
              "ctx": null,
              "_testId": "urn:uuid:26cf8a9d-91af-4ece-9c56-4934cc7ee8b7",
              "cell": {
                "columnId": "bovine",
                "rowId": "A verification method is the means and information needed to verify the proof. If included, the value MUST be a string that maps to a [URL]"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=A%20verification%20method%20is%20the%20means%20and%20information%20needed%20to%20verify%20the%20proof.%20If%20included%2C%20the%20value%20MUST%20be%20a%20string%20that%20maps%20to%20a%20%5BURL%5D.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 65335,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "The reason the proof was created (\"proof.proofPurpose\") MUST be specified as a string that maps to a URL",
          "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20reason%20the%20proof%20was%20created%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL",
          "cells": [
            {
              "type": "test",
              "title": "The reason the proof was created (\"proof.proofPurpose\") MUST be specified as a string that maps to a URL",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20reason%20the%20proof%20was%20created%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL';\n      for(const proof of proofs) {\n        proof.should.have.property('proofPurpose');\n        proof.proofPurpose.should.be.a('string');\n        await shouldMapToUrl({\n          doc: {\n            '@context': data['@context'],\n            ...proof\n          },\n          term: 'https://w3id.org/security#proofPurpose',\n          prop: '@id',\n          documentLoader\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/35-di-jcs-create.js",
              "parent": "KdN2hm8WrJINf4v5bSYcJ",
              "ctx": null,
              "_testId": "urn:uuid:4569aea5-80b4-43de-8a0d-f9cf3ba661c9",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The reason the proof was created (\"proof.proofPurpose\") MUST be specified as a string that maps to a URL"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20reason%20the%20proof%20was%20created%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 65061,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "cell": {
                "rowId": "The reason the proof was created (\"proof.proofPurpose\") MUST be specified as a string that maps to a URL",
                "colId": "OpSecId"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            },
            {
              "type": "test",
              "title": "The reason the proof was created (\"proof.proofPurpose\") MUST be specified as a string that maps to a URL",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20reason%20the%20proof%20was%20created%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL';\n      for(const proof of proofs) {\n        proof.should.have.property('proofPurpose');\n        proof.proofPurpose.should.be.a('string');\n        await shouldMapToUrl({\n          doc: {\n            '@context': data['@context'],\n            ...proof\n          },\n          term: 'https://w3id.org/security#proofPurpose',\n          prop: '@id',\n          documentLoader\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/35-di-jcs-create.js",
              "parent": "Bcawf-ovY8cisOlug-0dG",
              "ctx": null,
              "_testId": "urn:uuid:9b7642cf-e78d-4456-be35-7c6179a32019",
              "cell": {
                "columnId": "bovine",
                "rowId": "The reason the proof was created (\"proof.proofPurpose\") MUST be specified as a string that maps to a URL"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20reason%20the%20proof%20was%20created%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 65336,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification.",
          "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof",
          "cells": [
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof';\n      for(const proof of proofs) {\n        should.exist(proof, 'Expected proof to exist.');\n        const {\n          prefix: expectedPrefix,\n          name: encodingName\n        } = expectedMultibasePrefix(proof.cryptosuite);\n        shouldHaveProofValue({proof, expectedPrefix, encodingName});\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/35-di-jcs-create.js",
              "parent": "KdN2hm8WrJINf4v5bSYcJ",
              "ctx": null,
              "_testId": "urn:uuid:36c0fcf9-bd6c-425a-b960-510c05ce29a5",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "cell": {
                "rowId": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification.",
                "colId": "OpSecId"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            },
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof';\n      for(const proof of proofs) {\n        should.exist(proof, 'Expected proof to exist.');\n        const {\n          prefix: expectedPrefix,\n          name: encodingName\n        } = expectedMultibasePrefix(proof.cryptosuite);\n        shouldHaveProofValue({proof, expectedPrefix, encodingName});\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/35-di-jcs-create.js",
              "parent": "Bcawf-ovY8cisOlug-0dG",
              "ctx": null,
              "_testId": "urn:uuid:d9503fb8-dfa3-4361-a13a-95d9f405039b",
              "cell": {
                "columnId": "bovine",
                "rowId": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "if \"proof.previousProof\" field exists, it MUST be a string.",
          "cells": [
            {
              "type": "test",
              "title": "if \"proof.previousProof\" field exists, it MUST be a string.",
              "body": "function() {\n        for(const proof of proofs) {\n          if(proof.previousProof) {\n            proof.previousProof.should.be.a('string', 'Expected ' +\n              '\"proof.previousProof\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/35-di-jcs-create.js",
              "parent": "KdN2hm8WrJINf4v5bSYcJ",
              "ctx": null,
              "_testId": "urn:uuid:925cf34e-7198-40fe-a6e2-58f05b629257",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "if \"proof.previousProof\" field exists, it MUST be a string."
              },
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "cell": {
                "rowId": "if \"proof.previousProof\" field exists, it MUST be a string.",
                "colId": "OpSecId"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            },
            {
              "type": "test",
              "title": "if \"proof.previousProof\" field exists, it MUST be a string.",
              "body": "function() {\n        for(const proof of proofs) {\n          if(proof.previousProof) {\n            proof.previousProof.should.be.a('string', 'Expected ' +\n              '\"proof.previousProof\" to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/35-di-jcs-create.js",
              "parent": "Bcawf-ovY8cisOlug-0dG",
              "ctx": null,
              "_testId": "urn:uuid:55563530-8bd9-4bdc-98f5-b3ae8730494c",
              "cell": {
                "columnId": "bovine",
                "rowId": "if \"proof.previousProof\" field exists, it MUST be a string."
              },
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "if \"proof.nonce\" field exists, it MUST be a string.",
          "cells": [
            {
              "type": "test",
              "title": "if \"proof.nonce\" field exists, it MUST be a string.",
              "body": "function() {\n        for(const proof of proofs) {\n          if(proof.nonce) {\n            proof.nonce.should.be.a('string', 'Expected \"proof.nonce\" ' +\n              'to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/35-di-jcs-create.js",
              "parent": "KdN2hm8WrJINf4v5bSYcJ",
              "ctx": null,
              "_testId": "urn:uuid:006200eb-ca6d-441d-af01-ce7632ea3ddd",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "if \"proof.nonce\" field exists, it MUST be a string."
              },
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "cell": {
                "rowId": "if \"proof.nonce\" field exists, it MUST be a string.",
                "colId": "OpSecId"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            },
            {
              "type": "test",
              "title": "if \"proof.nonce\" field exists, it MUST be a string.",
              "body": "function() {\n        for(const proof of proofs) {\n          if(proof.nonce) {\n            proof.nonce.should.be.a('string', 'Expected \"proof.nonce\" ' +\n              'to be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/35-di-jcs-create.js",
              "parent": "Bcawf-ovY8cisOlug-0dG",
              "ctx": null,
              "_testId": "urn:uuid:71941524-b8f4-49b9-8762-5b9446cbdf1f",
              "cell": {
                "columnId": "bovine",
                "rowId": "if \"proof.nonce\" field exists, it MUST be a string."
              },
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "Cryptographic suite designers MUST use mandatory proof value properties defined in Section 2.1 Proofs, and MAY define other properties specific to their cryptographic suite.",
          "link": "https://w3c.github.io/vc-data-integrity/#add-proof:~:text=MUST%20use%20mandatory%20proof%20value%20properties%20defined",
          "cells": [
            {
              "type": "test",
              "title": "Cryptographic suite designers MUST use mandatory proof value properties defined in Section 2.1 Proofs, and MAY define other properties specific to their cryptographic suite.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#add-proof:~:text=MUST%20use%20mandatory%20proof%20value%20properties%20defined';\n      for(const proof of proofs) {\n        shouldBeProof({proof});\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/35-di-jcs-create.js",
              "parent": "KdN2hm8WrJINf4v5bSYcJ",
              "ctx": null,
              "_testId": "urn:uuid:18161d16-c024-4cdd-808d-dc8aef299302",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "Cryptographic suite designers MUST use mandatory proof value properties defined in Section 2.1 Proofs, and MAY define other properties specific to their cryptographic suite."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#add-proof:~:text=MUST%20use%20mandatory%20proof%20value%20properties%20defined",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 65063,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "cell": {
                "rowId": "Cryptographic suite designers MUST use mandatory proof value properties defined in Section 2.1 Proofs, and MAY define other properties specific to their cryptographic suite.",
                "colId": "OpSecId"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            },
            {
              "type": "test",
              "title": "Cryptographic suite designers MUST use mandatory proof value properties defined in Section 2.1 Proofs, and MAY define other properties specific to their cryptographic suite.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#add-proof:~:text=MUST%20use%20mandatory%20proof%20value%20properties%20defined';\n      for(const proof of proofs) {\n        shouldBeProof({proof});\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/35-di-jcs-create.js",
              "parent": "Bcawf-ovY8cisOlug-0dG",
              "ctx": null,
              "_testId": "urn:uuid:a7b50582-ccd4-4e32-8c87-70903927db82",
              "cell": {
                "columnId": "bovine",
                "rowId": "Cryptographic suite designers MUST use mandatory proof value properties defined in Section 2.1 Proofs, and MAY define other properties specific to their cryptographic suite."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#add-proof:~:text=MUST%20use%20mandatory%20proof%20value%20properties%20defined",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 65338,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
          "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
          "cells": [
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      const undefinedType = structuredClone(credential);\n      undefinedType.type.push('InvalidType');\n      await shouldFailIssuance({\n        credential: undefinedType,\n        issuer,\n        reason: 'Expected issuer to error when VC has an undefined type.'\n      });\n      const undefinedTerm = structuredClone(credential);\n      undefinedTerm.credentialSubject.invalidTerm = 'invalidTerm';\n      await shouldFailIssuance({\n        credential: undefinedTerm,\n        issuer,\n        reason: 'Expected issuer to error when VC has an undefined term.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/35-di-jcs-create.js",
              "parent": "KdN2hm8WrJINf4v5bSYcJ",
              "ctx": null,
              "_testId": "urn:uuid:c2969ada-fc83-4b64-95e0-c64affe0b282",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 65063,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 73,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected issuer to error when VC has an undefined type.: expected Response { status: 201, statusText: 'Created', headers: Headers { server: 'nginx/1.18.0 (Ubuntu)', date: 'Sun, 25 Aug 2024 05:06:27 GMT', 'content-type': 'application/json; charset=utf-8', 'content-length': '869', connection: 'keep-alive', 'x-powered-by': 'Express', etag: 'W/\"365-YeP+bOnf/mVh2Lx6xeDmHSOfsG4\"', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected issuer to error when VC has an undefined type.: expected Response { status: 201, statusText: 'Created', headers: Headers { server: 'nginx/1.18.0 (Ubuntu)', date: 'Sun, 25 Aug 2024 05:06:27 GMT', 'content-type': 'application/json; charset=utf-8', 'content-length': '869', connection: 'keep-alive', 'x-powered-by': 'Express', etag: 'W/\"365-YeP+bOnf/mVh2Lx6xeDmHSOfsG4\"', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at shouldFailIssuance (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:71:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/suites/create.js:246:7)"
              }
            },
            {
              "cell": {
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
                "colId": "OpSecId"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            },
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      const undefinedType = structuredClone(credential);\n      undefinedType.type.push('InvalidType');\n      await shouldFailIssuance({\n        credential: undefinedType,\n        issuer,\n        reason: 'Expected issuer to error when VC has an undefined type.'\n      });\n      const undefinedTerm = structuredClone(credential);\n      undefinedTerm.credentialSubject.invalidTerm = 'invalidTerm';\n      await shouldFailIssuance({\n        credential: undefinedTerm,\n        issuer,\n        reason: 'Expected issuer to error when VC has an undefined term.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/35-di-jcs-create.js",
              "parent": "Bcawf-ovY8cisOlug-0dG",
              "ctx": null,
              "_testId": "urn:uuid:aa79f818-3c10-490a-9d22-f372cc234f77",
              "cell": {
                "columnId": "bovine",
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 65338,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 96,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected issuer to error when VC has an undefined type.: expected Response { status: 200, statusText: 'OK', headers: Headers { server: 'nginx/1.18.0 (Ubuntu)', date: 'Sun, 25 Aug 2024 05:06:27 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'content-encoding': 'gzip', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected issuer to error when VC has an undefined type.: expected Response { status: 200, statusText: 'OK', headers: Headers { server: 'nginx/1.18.0 (Ubuntu)', date: 'Sun, 25 Aug 2024 05:06:27 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'content-encoding': 'gzip', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at shouldFailIssuance (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:71:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/suites/create.js:246:7)"
              }
            }
          ]
        },
        {
          "id": "When an application is securing a document, if an @context property is not provided in the document or the Data Integrity terms used in the document are not mapped by existing values in the @context property, implementations SHOULD inject or append an @context property with a value of https://w3id.org/security/data-integrity/v2 or one or more contexts with at least the same declarations, such as the Verifiable Credential Data Model v2.0 context (https://www.w3.org/ns/credentials/v2).",
          "link": "https://w3c.github.io/vc-data-integrity/#context-injection:~:text=if%20an%20%40context%20property%20is%20not%20provided%20in%20the%20document%20or%20the%20Data%20Integrity%20terms%20used%20in%20the%20document%20are%20not%20mapped%20by%20existing%20values%20in%20the%20%40context%20property%2C%20implementations%20SHOULD%20inject%20or%20append",
          "cells": [
            {
              "type": "test",
              "title": "When an application is securing a document, if an @context property is not provided in the document or the Data Integrity terms used in the document are not mapped by existing values in the @context property, implementations SHOULD inject or append an @context property with a value of https://w3id.org/security/data-integrity/v2 or one or more contexts with at least the same declarations, such as the Verifiable Credential Data Model v2.0 context (https://www.w3.org/ns/credentials/v2).",
              "body": "async function() {\n      if(!issuer) {\n        throw new Error(`Expected ${vendorName} to have an issuer.`);\n      }\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#context-injection:~:text=if%20an%20%40context%20property%20is%20not%20provided%20in%20the%20document%20or%20the%20Data%20Integrity%20terms%20used%20in%20the%20document%20are%20not%20mapped%20by%20existing%20values%20in%20the%20%40context%20property%2C%20implementations%20SHOULD%20inject%20or%20append';\n      if(optionalTests.contextInjection === false) {\n        this.test.cell.skipMessage = 'Optional Test Skipped';\n        this.skip();\n      }\n      const _credential = structuredClone(credential);\n      const expectedContexts = [\n        'https://w3id.org/security/data-integrity/v2',\n        'https://www.w3.org/ns/credentials/v2'\n      ];\n      // remove the vc's context and expect context injection to occur\n      delete _credential['@context'];\n      let err;\n      let data;\n      try {\n        data = await createInitialVc({issuer, credential: _credential});\n      } catch(e) {\n        err = e;\n      }\n      should.not.exist(\n        err,\n        `Expected issuer ${vendorName} to perform context injection on a ` +\n        `VC with out an \"@context\" property`);\n      should.exist(data, `Expected issuer ${vendorName} to return data.`);\n      data.should.be.an('object', 'Expected response data to be an object.');\n      should.exist(data['@context'],\n        'Expected data to have an injected \"@context\" property.');\n      if(Array.isArray(data['@context'])) {\n        const hasExpectedContext = expectedContexts.some(\n          ctx => data['@context'].includes(ctx));\n        return hasExpectedContext.should.equal(true,\n          `Expected injected context to contain one of ${expectedContexts}`);\n      }\n      data['@context'].should.be.oneOf(expectedContexts);\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/35-di-jcs-create.js",
              "parent": "KdN2hm8WrJINf4v5bSYcJ",
              "ctx": null,
              "_testId": "urn:uuid:d751bb28-b892-44c4-b215-1ebfe8f797e8",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "When an application is securing a document, if an @context property is not provided in the document or the Data Integrity terms used in the document are not mapped by existing values in the @context property, implementations SHOULD inject or append an @context property with a value of https://w3id.org/security/data-integrity/v2 or one or more contexts with at least the same declarations, such as the Verifiable Credential Data Model v2.0 context (https://www.w3.org/ns/credentials/v2)."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#context-injection:~:text=if%20an%20%40context%20property%20is%20not%20provided%20in%20the%20document%20or%20the%20Data%20Integrity%20terms%20used%20in%20the%20document%20are%20not%20mapped%20by%20existing%20values%20in%20the%20%40context%20property%2C%20implementations%20SHOULD%20inject%20or%20append",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 65137,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 70,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected issuer Grotto Networking to perform context injection on a VC with out an \"@context\" property: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"credential\":{\"id\":\"urn:uuid:66979021-9f3d-4e87-8bb7-c254a005cbaf\",\"type\":[\"VerifiableCredential\"],\"issuer\":\"did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7\",\"issuanceDate\":\"2020-03-16T22:37:26.544Z\",\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\"}},\"options\":{}}",
                    "method": "POST",
                    "json": {
                      "credential": {
                        "id": "urn:uuid:66979021-9f3d-4e87-8bb7-c254a005cbaf",
                        "type": [
                          "VerifiableCredential"
                        ],
                        "issuer": "did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7",
                        "issuanceDate": "2020-03-16T22:37:26.544Z",
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                        }
                      },
                      "options": {}
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://ecdsa-sd.grotto-networking.com/EdDSA-JCS/credentials/issue",
                  "status": 400,
                  "data": {
                    "errors": [
                      "must have required property '@context'"
                    ]
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected issuer Grotto Networking to perform context injection on a VC with out an \"@context\" property: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/suites/create.js:442:18)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "cell": {
                "rowId": "When an application is securing a document, if an @context property is not provided in the document or the Data Integrity terms used in the document are not mapped by existing values in the @context property, implementations SHOULD inject or append an @context property with a value of https://w3id.org/security/data-integrity/v2 or one or more contexts with at least the same declarations, such as the Verifiable Credential Data Model v2.0 context (https://www.w3.org/ns/credentials/v2).",
                "colId": "OpSecId"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            },
            {
              "type": "test",
              "title": "When an application is securing a document, if an @context property is not provided in the document or the Data Integrity terms used in the document are not mapped by existing values in the @context property, implementations SHOULD inject or append an @context property with a value of https://w3id.org/security/data-integrity/v2 or one or more contexts with at least the same declarations, such as the Verifiable Credential Data Model v2.0 context (https://www.w3.org/ns/credentials/v2).",
              "body": "async function() {\n      if(!issuer) {\n        throw new Error(`Expected ${vendorName} to have an issuer.`);\n      }\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#context-injection:~:text=if%20an%20%40context%20property%20is%20not%20provided%20in%20the%20document%20or%20the%20Data%20Integrity%20terms%20used%20in%20the%20document%20are%20not%20mapped%20by%20existing%20values%20in%20the%20%40context%20property%2C%20implementations%20SHOULD%20inject%20or%20append';\n      if(optionalTests.contextInjection === false) {\n        this.test.cell.skipMessage = 'Optional Test Skipped';\n        this.skip();\n      }\n      const _credential = structuredClone(credential);\n      const expectedContexts = [\n        'https://w3id.org/security/data-integrity/v2',\n        'https://www.w3.org/ns/credentials/v2'\n      ];\n      // remove the vc's context and expect context injection to occur\n      delete _credential['@context'];\n      let err;\n      let data;\n      try {\n        data = await createInitialVc({issuer, credential: _credential});\n      } catch(e) {\n        err = e;\n      }\n      should.not.exist(\n        err,\n        `Expected issuer ${vendorName} to perform context injection on a ` +\n        `VC with out an \"@context\" property`);\n      should.exist(data, `Expected issuer ${vendorName} to return data.`);\n      data.should.be.an('object', 'Expected response data to be an object.');\n      should.exist(data['@context'],\n        'Expected data to have an injected \"@context\" property.');\n      if(Array.isArray(data['@context'])) {\n        const hasExpectedContext = expectedContexts.some(\n          ctx => data['@context'].includes(ctx));\n        return hasExpectedContext.should.equal(true,\n          `Expected injected context to contain one of ${expectedContexts}`);\n      }\n      data['@context'].should.be.oneOf(expectedContexts);\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/35-di-jcs-create.js",
              "parent": "Bcawf-ovY8cisOlug-0dG",
              "ctx": null,
              "_testId": "urn:uuid:be4abfb1-f722-4df7-9685-636760f25657",
              "cell": {
                "columnId": "bovine",
                "rowId": "When an application is securing a document, if an @context property is not provided in the document or the Data Integrity terms used in the document are not mapped by existing values in the @context property, implementations SHOULD inject or append an @context property with a value of https://w3id.org/security/data-integrity/v2 or one or more contexts with at least the same declarations, such as the Verifiable Credential Data Model v2.0 context (https://www.w3.org/ns/credentials/v2)."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#context-injection:~:text=if%20an%20%40context%20property%20is%20not%20provided%20in%20the%20document%20or%20the%20Data%20Integrity%20terms%20used%20in%20the%20document%20are%20not%20mapped%20by%20existing%20values%20in%20the%20%40context%20property%2C%20implementations%20SHOULD%20inject%20or%20append",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 65435,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 93,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "The date and time the proof was created is OPTIONAL and, if included, MUST be specified as an [XMLSCHEMA11-2] dateTimeStamp string, either in Universal Coordinated Time (UTC), denoted by a Z at the end of the value, or with a time zone offset relative to UTC.",
          "link": "https://www.w3.org/TR/vc-data-integrity/#:~:text=The%20date%20and%20time%20the%20proof%20was%20created%20is%20OPTIONAL%20and%2C%20if%20included%2C%20MUST%20be%20specified%20as%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%2C%20either%20in%20Universal%20Coordinated%20Time%20(UTC)%2C%20denoted%20by%20a%20Z%20at%20the%20end%20of%20the%20value%2C%20or%20with%20a%20time%20zone%20offset%20relative%20to%20UTC.",
          "cells": [
            {
              "type": "test",
              "title": "The date and time the proof was created is OPTIONAL and, if included, MUST be specified as an [XMLSCHEMA11-2] dateTimeStamp string, either in Universal Coordinated Time (UTC), denoted by a Z at the end of the value, or with a time zone offset relative to UTC.",
              "body": "function() {\n      this.test.link = 'https://www.w3.org/TR/vc-data-integrity/#:~:text=The%20date%20and%20time%20the%20proof%20was%20created%20is%20OPTIONAL%20and%2C%20if%20included%2C%20MUST%20be%20specified%20as%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%2C%20either%20in%20Universal%20Coordinated%20Time%20(UTC)%2C%20denoted%20by%20a%20Z%20at%20the%20end%20of%20the%20value%2C%20or%20with%20a%20time%20zone%20offset%20relative%20to%20UTC.';\n      if(optionalTests.dates === false) {\n        this.test.cell.skipMessage = 'Optional Test Skipped';\n        this.skip();\n      }\n      for(const proof of proofs) {\n        if(proof.created) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.created.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/35-di-jcs-create.js",
              "parent": "KdN2hm8WrJINf4v5bSYcJ",
              "ctx": null,
              "_testId": "urn:uuid:7e0f4c97-5f0e-43c9-a948-d1acf82b0435",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The date and time the proof was created is OPTIONAL and, if included, MUST be specified as an [XMLSCHEMA11-2] dateTimeStamp string, either in Universal Coordinated Time (UTC), denoted by a Z at the end of the value, or with a time zone offset relative to UTC."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://www.w3.org/TR/vc-data-integrity/#:~:text=The%20date%20and%20time%20the%20proof%20was%20created%20is%20OPTIONAL%20and%2C%20if%20included%2C%20MUST%20be%20specified%20as%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%2C%20either%20in%20Universal%20Coordinated%20Time%20(UTC)%2C%20denoted%20by%20a%20Z%20at%20the%20end%20of%20the%20value%2C%20or%20with%20a%20time%20zone%20offset%20relative%20to%20UTC.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "cell": {
                "rowId": "The date and time the proof was created is OPTIONAL and, if included, MUST be specified as an [XMLSCHEMA11-2] dateTimeStamp string, either in Universal Coordinated Time (UTC), denoted by a Z at the end of the value, or with a time zone offset relative to UTC.",
                "colId": "OpSecId"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            },
            {
              "type": "test",
              "title": "The date and time the proof was created is OPTIONAL and, if included, MUST be specified as an [XMLSCHEMA11-2] dateTimeStamp string, either in Universal Coordinated Time (UTC), denoted by a Z at the end of the value, or with a time zone offset relative to UTC.",
              "body": "function() {\n      this.test.link = 'https://www.w3.org/TR/vc-data-integrity/#:~:text=The%20date%20and%20time%20the%20proof%20was%20created%20is%20OPTIONAL%20and%2C%20if%20included%2C%20MUST%20be%20specified%20as%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%2C%20either%20in%20Universal%20Coordinated%20Time%20(UTC)%2C%20denoted%20by%20a%20Z%20at%20the%20end%20of%20the%20value%2C%20or%20with%20a%20time%20zone%20offset%20relative%20to%20UTC.';\n      if(optionalTests.dates === false) {\n        this.test.cell.skipMessage = 'Optional Test Skipped';\n        this.skip();\n      }\n      for(const proof of proofs) {\n        if(proof.created) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.created.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/35-di-jcs-create.js",
              "parent": "Bcawf-ovY8cisOlug-0dG",
              "ctx": null,
              "_testId": "urn:uuid:502d5e0b-858f-4883-aea6-e2fd6839c5d0",
              "cell": {
                "columnId": "bovine",
                "rowId": "The date and time the proof was created is OPTIONAL and, if included, MUST be specified as an [XMLSCHEMA11-2] dateTimeStamp string, either in Universal Coordinated Time (UTC), denoted by a Z at the end of the value, or with a time zone offset relative to UTC."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://www.w3.org/TR/vc-data-integrity/#:~:text=The%20date%20and%20time%20the%20proof%20was%20created%20is%20OPTIONAL%20and%2C%20if%20included%2C%20MUST%20be%20specified%20as%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%2C%20either%20in%20Universal%20Coordinated%20Time%20(UTC)%2C%20denoted%20by%20a%20Z%20at%20the%20end%20of%20the%20value%2C%20or%20with%20a%20time%20zone%20offset%20relative%20to%20UTC.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "The expires property is OPTIONAL and, if present, specifies when the proof expires. If present, it MUST be an [XMLSCHEMA11-2] dateTimeStamp string, either in Universal Coordinated Time (UTC), denoted by a Z at the end of the value, or with a time zone offset relative to UTC.",
          "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=MUST%20be%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%2C%20either%20in%20Universal%20Coordinated%20Time",
          "cells": [
            {
              "type": "test",
              "title": "The expires property is OPTIONAL and, if present, specifies when the proof expires. If present, it MUST be an [XMLSCHEMA11-2] dateTimeStamp string, either in Universal Coordinated Time (UTC), denoted by a Z at the end of the value, or with a time zone offset relative to UTC.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=MUST%20be%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%2C%20either%20in%20Universal%20Coordinated%20Time';\n      if(optionalTests.dates === false) {\n        this.test.cell.skipMessage = 'Optional Test Skipped';\n        this.skip();\n      }\n      for(const proof of proofs) {\n        if(proof.expires) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.expires.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/35-di-jcs-create.js",
              "parent": "KdN2hm8WrJINf4v5bSYcJ",
              "ctx": null,
              "_testId": "urn:uuid:4c35f926-9aa9-4e19-9eb3-40733d5f31a5",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The expires property is OPTIONAL and, if present, specifies when the proof expires. If present, it MUST be an [XMLSCHEMA11-2] dateTimeStamp string, either in Universal Coordinated Time (UTC), denoted by a Z at the end of the value, or with a time zone offset relative to UTC."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=MUST%20be%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%2C%20either%20in%20Universal%20Coordinated%20Time",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "cell": {
                "rowId": "The expires property is OPTIONAL and, if present, specifies when the proof expires. If present, it MUST be an [XMLSCHEMA11-2] dateTimeStamp string, either in Universal Coordinated Time (UTC), denoted by a Z at the end of the value, or with a time zone offset relative to UTC.",
                "colId": "OpSecId"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            },
            {
              "type": "test",
              "title": "The expires property is OPTIONAL and, if present, specifies when the proof expires. If present, it MUST be an [XMLSCHEMA11-2] dateTimeStamp string, either in Universal Coordinated Time (UTC), denoted by a Z at the end of the value, or with a time zone offset relative to UTC.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=MUST%20be%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%2C%20either%20in%20Universal%20Coordinated%20Time';\n      if(optionalTests.dates === false) {\n        this.test.cell.skipMessage = 'Optional Test Skipped';\n        this.skip();\n      }\n      for(const proof of proofs) {\n        if(proof.expires) {\n          // check if \"created\" is a valid XML Schema 1.1 dateTimeStamp\n          // value\n          proof.expires.should.match(dateRegex);\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/35-di-jcs-create.js",
              "parent": "Bcawf-ovY8cisOlug-0dG",
              "ctx": null,
              "_testId": "urn:uuid:bb7bf9bf-6cc2-4a07-99b1-822225bbbeda",
              "cell": {
                "columnId": "bovine",
                "rowId": "The expires property is OPTIONAL and, if present, specifies when the proof expires. If present, it MUST be an [XMLSCHEMA11-2] dateTimeStamp string, either in Universal Coordinated Time (UTC), denoted by a Z at the end of the value, or with a time zone offset relative to UTC."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=MUST%20be%20an%20%5BXMLSCHEMA11%2D2%5D%20dateTimeStamp%20string%2C%20either%20in%20Universal%20Coordinated%20Time",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "The domain property is OPTIONAL. It conveys one or more security domains in which the proof is meant to be used. If specified, the associated value MUST be either a string, or an unordered set of strings. A verifier SHOULD use the value to ensure that the proof was intended to be used in the security domain in which the verifier is operating.",
          "link": "https://w3c.github.io/vc-data-integrity/#verify-proof:~:text=The%20domain%20property%20is%20OPTIONAL.%20It%20conveys%20one%20or%20more%20security%20domains%20in%20which%20the%20proof%20is%20meant%20to%20be%20used.%20If%20specified%2C%20the%20associated%20value%20MUST",
          "cells": [
            {
              "type": "test",
              "title": "The domain property is OPTIONAL. It conveys one or more security domains in which the proof is meant to be used. If specified, the associated value MUST be either a string, or an unordered set of strings. A verifier SHOULD use the value to ensure that the proof was intended to be used in the security domain in which the verifier is operating.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#verify-proof:~:text=The%20domain%20property%20is%20OPTIONAL.%20It%20conveys%20one%20or%20more%20security%20domains%20in%20which%20the%20proof%20is%20meant%20to%20be%20used.%20If%20specified%2C%20the%20associated%20value%20MUST';\n      if(optionalTests.domain === false) {\n        this.test.cell.skipMessage = 'Optional Test Skipped';\n        this.skip();\n      }\n      for(const proof of proofs) {\n        if(proof.domain) {\n          const validType = isStringOrArrayOfStrings(proof.domain);\n          validType.should.equal(true, 'Expected ' +\n            '\"proof.domain\" to be either a string or an unordered ' +\n            'set of strings.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/35-di-jcs-create.js",
              "parent": "KdN2hm8WrJINf4v5bSYcJ",
              "ctx": null,
              "_testId": "urn:uuid:cf6bd597-1e89-44d6-95f8-828afd56dca2",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The domain property is OPTIONAL. It conveys one or more security domains in which the proof is meant to be used. If specified, the associated value MUST be either a string, or an unordered set of strings. A verifier SHOULD use the value to ensure that the proof was intended to be used in the security domain in which the verifier is operating."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#verify-proof:~:text=The%20domain%20property%20is%20OPTIONAL.%20It%20conveys%20one%20or%20more%20security%20domains%20in%20which%20the%20proof%20is%20meant%20to%20be%20used.%20If%20specified%2C%20the%20associated%20value%20MUST",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "cell": {
                "rowId": "The domain property is OPTIONAL. It conveys one or more security domains in which the proof is meant to be used. If specified, the associated value MUST be either a string, or an unordered set of strings. A verifier SHOULD use the value to ensure that the proof was intended to be used in the security domain in which the verifier is operating.",
                "colId": "OpSecId"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            },
            {
              "type": "test",
              "title": "The domain property is OPTIONAL. It conveys one or more security domains in which the proof is meant to be used. If specified, the associated value MUST be either a string, or an unordered set of strings. A verifier SHOULD use the value to ensure that the proof was intended to be used in the security domain in which the verifier is operating.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#verify-proof:~:text=The%20domain%20property%20is%20OPTIONAL.%20It%20conveys%20one%20or%20more%20security%20domains%20in%20which%20the%20proof%20is%20meant%20to%20be%20used.%20If%20specified%2C%20the%20associated%20value%20MUST';\n      if(optionalTests.domain === false) {\n        this.test.cell.skipMessage = 'Optional Test Skipped';\n        this.skip();\n      }\n      for(const proof of proofs) {\n        if(proof.domain) {\n          const validType = isStringOrArrayOfStrings(proof.domain);\n          validType.should.equal(true, 'Expected ' +\n            '\"proof.domain\" to be either a string or an unordered ' +\n            'set of strings.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/35-di-jcs-create.js",
              "parent": "Bcawf-ovY8cisOlug-0dG",
              "ctx": null,
              "_testId": "urn:uuid:bd3c24aa-5dc7-4a63-8aca-48181633bcfb",
              "cell": {
                "columnId": "bovine",
                "rowId": "The domain property is OPTIONAL. It conveys one or more security domains in which the proof is meant to be used. If specified, the associated value MUST be either a string, or an unordered set of strings. A verifier SHOULD use the value to ensure that the proof was intended to be used in the security domain in which the verifier is operating."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#verify-proof:~:text=The%20domain%20property%20is%20OPTIONAL.%20It%20conveys%20one%20or%20more%20security%20domains%20in%20which%20the%20proof%20is%20meant%20to%20be%20used.%20If%20specified%2C%20the%20associated%20value%20MUST",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "(challenge) A string value that SHOULD be included in a proof if a domain is specified.",
          "link": "https://w3c.github.io/vc-data-integrity/#verify-proof:~:text=A%20string%20value%20that%20SHOULD%20be%20included%20in%20a%20proof%20if%20a%20domain%20is%20specified.",
          "cells": [
            {
              "type": "test",
              "title": "(challenge) A string value that SHOULD be included in a proof if a domain is specified.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#verify-proof:~:text=A%20string%20value%20that%20SHOULD%20be%20included%20in%20a%20proof%20if%20a%20domain%20is%20specified.';\n      if(optionalTests.domain === false) {\n        this.test.cell.skipMessage = 'Optional Test Skipped';\n        this.skip();\n      }\n      for(const proof of proofs) {\n        if(proof.challenge) {\n          // domain must be specified\n          should.exist(proof.domain, 'Expected \"proof.domain\" ' +\n            'to be specified.');\n          proof.challenge.should.be.a('string', 'Expected ' +\n            '\"proof.challenge\" to be a string.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/35-di-jcs-create.js",
              "parent": "KdN2hm8WrJINf4v5bSYcJ",
              "ctx": null,
              "_testId": "urn:uuid:e6697a9c-f212-43e5-aa42-248909583b80",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "(challenge) A string value that SHOULD be included in a proof if a domain is specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#verify-proof:~:text=A%20string%20value%20that%20SHOULD%20be%20included%20in%20a%20proof%20if%20a%20domain%20is%20specified.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "cell": {
                "rowId": "(challenge) A string value that SHOULD be included in a proof if a domain is specified.",
                "colId": "OpSecId"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            },
            {
              "type": "test",
              "title": "(challenge) A string value that SHOULD be included in a proof if a domain is specified.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#verify-proof:~:text=A%20string%20value%20that%20SHOULD%20be%20included%20in%20a%20proof%20if%20a%20domain%20is%20specified.';\n      if(optionalTests.domain === false) {\n        this.test.cell.skipMessage = 'Optional Test Skipped';\n        this.skip();\n      }\n      for(const proof of proofs) {\n        if(proof.challenge) {\n          // domain must be specified\n          should.exist(proof.domain, 'Expected \"proof.domain\" ' +\n            'to be specified.');\n          proof.challenge.should.be.a('string', 'Expected ' +\n            '\"proof.challenge\" to be a string.');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/35-di-jcs-create.js",
              "parent": "Bcawf-ovY8cisOlug-0dG",
              "ctx": null,
              "_testId": "urn:uuid:d0f53503-a8b9-4416-b59e-fac022617b7b",
              "cell": {
                "columnId": "bovine",
                "rowId": "(challenge) A string value that SHOULD be included in a proof if a domain is specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#verify-proof:~:text=A%20string%20value%20that%20SHOULD%20be%20included%20in%20a%20proof%20if%20a%20domain%20is%20specified.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        }
      ]
    },
    {
      "title": "eddsa-jcs-2022 (issuer)",
      "ctx": null,
      "suites": [
        {
          "title": "Grotto Networking",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The field \"cryptosuite\" MUST be \"eddsa-jcs-2022\".",
              "body": "function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          proofs.some(\n            proof => proof?.cryptosuite === cryptosuite\n          ).should.equal(true, 'Expected at least one proof to have ' +\n            '\"cryptosuite\" with the value \"eddsa-jcs-2022\".');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/40-jcs-create.js",
              "parent": "Bk4mlBYdbfP92ELsrEWry",
              "ctx": null,
              "_testId": "urn:uuid:b85c5c46-2935-4224-8325-739d25c7579e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The field \"cryptosuite\" MUST be \"eddsa-jcs-2022\"."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Dereferencing the \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
              "body": "function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          verificationMethodDocuments.some(\n            verificationMethodDocument =>\n              verificationMethodDocument?.type === 'Multikey'\n          ).should.equal(true, 'Expected at least one proof to have \"type\" ' +\n            'property value \"Multikey\".');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/40-jcs-create.js",
              "parent": "Bk4mlBYdbfP92ELsrEWry",
              "ctx": null,
              "_testId": "urn:uuid:325dd1e1-f2f6-4597-bd9d-c06f2dfd068e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "Dereferencing the \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          verificationMethodDocuments.some(\n            verificationMethodDocument =>\n              verificationMethodDocument?.type === 'Multikey'\n          ).should.equal(true, 'Expected at least one proof to have \"type\" ' +\n            'property value \"Multikey\".'\n          );\n          const controllerDocuments = [];\n          for(const verificationMethodDocument of verificationMethodDocuments) {\n            const controllerDocument = await documentLoader({\n              url: verificationMethodDocument.controller\n            });\n            controllerDocuments.push(controllerDocument);\n          }\n          proofs.some(\n            proof => controllerDocuments.some(controllerDocument =>\n              controllerDocument.hasOwnProperty(proof.proofPurpose))\n          ).should.equal(true, 'Expected \"proof.proofPurpose\" field ' +\n             'to match the verification method controller.'\n          );\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/40-jcs-create.js",
              "parent": "Bk4mlBYdbfP92ELsrEWry",
              "ctx": null,
              "_testId": "urn:uuid:190199d4-01ff-4550-9561-3658ac5089f1",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 65607,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"publicKeyMultibase\" value of the verification method MUST be 34 bytes in length and starts with the base-58-btc prefix (z).",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          for(const verificationMethodDocument of verificationMethodDocuments) {\n            const multibase = 'z';\n            const {publicKeyMultibase} = verificationMethodDocument;\n            const isMultibaseEncoded =\n              publicKeyMultibase.startsWith(multibase) &&\n                shouldBeBs58(publicKeyMultibase);\n            isMultibaseEncoded.should.equal(\n              true,\n              'Expected \"publicKeyMultibase\" value of the verification ' +\n              'method to be multibase base58-btc encoded value'\n            );\n            const publicKeyMultibaseBytes = bs58Decode({\n              id: publicKeyMultibase\n            });\n            publicKeyMultibaseBytes.byteLength.should.equal(34, 'Expected ' +\n              '\"publicKeyMultibase\" value of the verification method to ' +\n              'be 34 bytes in length.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/40-jcs-create.js",
              "parent": "Bk4mlBYdbfP92ELsrEWry",
              "ctx": null,
              "_testId": "urn:uuid:97457bec-b23b-4ef0-b81a-1651af16a7ea",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The \"publicKeyMultibase\" value of the verification method MUST be 34 bytes in length and starts with the base-58-btc prefix (z)."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 65607,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proofValue\" field when decoded to raw bytes, MUST be 64 bytes in length if the associated public key is 32 bytes or 114 bytes in length if the public key is 57 bytes.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          should.exist(issuedVc, 'Expected issuer to have issued a ' +\n            'credential.');\n          should.exist(proofs, 'Expected credential to have a proof.');\n          const eddsa2022Proofs = proofs.filter(\n            proof => proof?.cryptosuite === cryptosuite);\n          eddsa2022Proofs.length.should.be.gte(1, 'Expected at least one ' +\n            'eddsa-jcs-2022 cryptosuite.');\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.proofValue, 'Expected a proof value on ' +\n              'the proof.');\n            const valueBytes = bs58Decode({id: proof.proofValue});\n            should.exist(proof.verificationMethod);\n            const vmBytes = await getPublicKeyBytes({\n              did: proof.verificationMethod});\n            vmBytes.byteLength.should.be.oneOf([32, 57], 'Expected public ' +\n              'key length to be either 32 or 57 bytes.');\n            if(vmBytes.byteLength === 32) {\n              valueBytes.byteLength.should.equal(64, 'Expected 64 byte ' +\n                'proofValue for 32 byte key.');\n            } else {\n              valueBytes.byteLength.should.equal(114, 'Expected 114 byte ' +\n                'proofValue for 57 byte key.');\n            }\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/40-jcs-create.js",
              "parent": "Bk4mlBYdbfP92ELsrEWry",
              "ctx": null,
              "_testId": "urn:uuid:fffddb12-ef02-426c-9fef-45e8a70d48b0",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "\"proofValue\" field when decoded to raw bytes, MUST be 64 bytes in length if the associated public key is 32 bytes or 114 bytes in length if the public key is 57 bytes."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 65608,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof\" MUST verify when using a conformant verifier.",
              "body": "async function() {\n            this.test.cell = {columnId, rowId: this.test.title};\n            should.exist(verifier, 'Expected implementation to have a VC ' +\n              'API compatible verifier.');\n            const {result, error} = await verifier.post({json: {\n              verifiableCredential: issuedVc,\n              options: {checks: ['proof']}\n            }});\n            should.not.exist(error, 'Expected verifier to not error.');\n            should.exist(result, 'Expected verifier to return a result.');\n            result.status.should.not.equal(400, 'Expected status code to not ' +\n              'be 400.');\n            result.status.should.equal(200, 'Expected status code to be 200.');\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/40-jcs-create.js",
              "parent": "Bk4mlBYdbfP92ELsrEWry",
              "ctx": null,
              "_testId": "urn:uuid:0488a1c4-a54d-4efa-82c5-19e194c13c6e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "\"proof\" MUST verify when using a conformant verifier."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 65608,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 76,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Grotto Networking\"",
              "body": "async function() {\n          issuedVc = await createInitialVc({issuer, vc: validVc});\n          proofs = Array.isArray(issuedVc?.proof) ?\n            issuedVc.proof : [issuedVc?.proof];\n          const verificationMethods = proofs.map(\n            proof => proof.verificationMethod);\n          for(const verificationMethod of verificationMethods) {\n            const verificationMethodDocument = await documentLoader({\n              url: verificationMethod\n            });\n            verificationMethodDocuments.push(verificationMethodDocument);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "Bk4mlBYdbfP92ELsrEWry",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/40-jcs-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 65530,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 76,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "VDThjmNsuL2H1pHShZ1Sv",
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/40-jcs-create.js",
          "_testId": "urn:uuid:fa9d96a7-5ba3-4f1a-9799-65eb97eb4400"
        },
        {
          "title": "OpSecId",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The field \"cryptosuite\" MUST be \"eddsa-jcs-2022\".",
              "body": "function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          proofs.some(\n            proof => proof?.cryptosuite === cryptosuite\n          ).should.equal(true, 'Expected at least one proof to have ' +\n            '\"cryptosuite\" with the value \"eddsa-jcs-2022\".');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/40-jcs-create.js",
              "parent": "5t6ZhBYrOsZIoopw5DjmA",
              "ctx": null
            },
            {
              "type": "test",
              "title": "Dereferencing the \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
              "body": "function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          verificationMethodDocuments.some(\n            verificationMethodDocument =>\n              verificationMethodDocument?.type === 'Multikey'\n          ).should.equal(true, 'Expected at least one proof to have \"type\" ' +\n            'property value \"Multikey\".');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/40-jcs-create.js",
              "parent": "5t6ZhBYrOsZIoopw5DjmA",
              "ctx": null
            },
            {
              "type": "test",
              "title": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          verificationMethodDocuments.some(\n            verificationMethodDocument =>\n              verificationMethodDocument?.type === 'Multikey'\n          ).should.equal(true, 'Expected at least one proof to have \"type\" ' +\n            'property value \"Multikey\".'\n          );\n          const controllerDocuments = [];\n          for(const verificationMethodDocument of verificationMethodDocuments) {\n            const controllerDocument = await documentLoader({\n              url: verificationMethodDocument.controller\n            });\n            controllerDocuments.push(controllerDocument);\n          }\n          proofs.some(\n            proof => controllerDocuments.some(controllerDocument =>\n              controllerDocument.hasOwnProperty(proof.proofPurpose))\n          ).should.equal(true, 'Expected \"proof.proofPurpose\" field ' +\n             'to match the verification method controller.'\n          );\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/40-jcs-create.js",
              "parent": "5t6ZhBYrOsZIoopw5DjmA",
              "ctx": null
            },
            {
              "type": "test",
              "title": "The \"publicKeyMultibase\" value of the verification method MUST be 34 bytes in length and starts with the base-58-btc prefix (z).",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          for(const verificationMethodDocument of verificationMethodDocuments) {\n            const multibase = 'z';\n            const {publicKeyMultibase} = verificationMethodDocument;\n            const isMultibaseEncoded =\n              publicKeyMultibase.startsWith(multibase) &&\n                shouldBeBs58(publicKeyMultibase);\n            isMultibaseEncoded.should.equal(\n              true,\n              'Expected \"publicKeyMultibase\" value of the verification ' +\n              'method to be multibase base58-btc encoded value'\n            );\n            const publicKeyMultibaseBytes = bs58Decode({\n              id: publicKeyMultibase\n            });\n            publicKeyMultibaseBytes.byteLength.should.equal(34, 'Expected ' +\n              '\"publicKeyMultibase\" value of the verification method to ' +\n              'be 34 bytes in length.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/40-jcs-create.js",
              "parent": "5t6ZhBYrOsZIoopw5DjmA",
              "ctx": null
            },
            {
              "type": "test",
              "title": "\"proofValue\" field when decoded to raw bytes, MUST be 64 bytes in length if the associated public key is 32 bytes or 114 bytes in length if the public key is 57 bytes.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          should.exist(issuedVc, 'Expected issuer to have issued a ' +\n            'credential.');\n          should.exist(proofs, 'Expected credential to have a proof.');\n          const eddsa2022Proofs = proofs.filter(\n            proof => proof?.cryptosuite === cryptosuite);\n          eddsa2022Proofs.length.should.be.gte(1, 'Expected at least one ' +\n            'eddsa-jcs-2022 cryptosuite.');\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.proofValue, 'Expected a proof value on ' +\n              'the proof.');\n            const valueBytes = bs58Decode({id: proof.proofValue});\n            should.exist(proof.verificationMethod);\n            const vmBytes = await getPublicKeyBytes({\n              did: proof.verificationMethod});\n            vmBytes.byteLength.should.be.oneOf([32, 57], 'Expected public ' +\n              'key length to be either 32 or 57 bytes.');\n            if(vmBytes.byteLength === 32) {\n              valueBytes.byteLength.should.equal(64, 'Expected 64 byte ' +\n                'proofValue for 32 byte key.');\n            } else {\n              valueBytes.byteLength.should.equal(114, 'Expected 114 byte ' +\n                'proofValue for 57 byte key.');\n            }\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/40-jcs-create.js",
              "parent": "5t6ZhBYrOsZIoopw5DjmA",
              "ctx": null
            },
            {
              "type": "test",
              "title": "\"proof\" MUST verify when using a conformant verifier.",
              "body": "async function() {\n            this.test.cell = {columnId, rowId: this.test.title};\n            should.exist(verifier, 'Expected implementation to have a VC ' +\n              'API compatible verifier.');\n            const {result, error} = await verifier.post({json: {\n              verifiableCredential: issuedVc,\n              options: {checks: ['proof']}\n            }});\n            should.not.exist(error, 'Expected verifier to not error.');\n            should.exist(result, 'Expected verifier to return a result.');\n            result.status.should.not.equal(400, 'Expected status code to not ' +\n              'be 400.');\n            result.status.should.equal(200, 'Expected status code to be 200.');\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/40-jcs-create.js",
              "parent": "5t6ZhBYrOsZIoopw5DjmA",
              "ctx": null
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook for \"The field \"cryptosuite\" MUST be \"eddsa-jcs-2022\".\"",
              "body": "async function() {\n          issuedVc = await createInitialVc({issuer, vc: validVc});\n          proofs = Array.isArray(issuedVc?.proof) ?\n            issuedVc.proof : [issuedVc?.proof];\n          const verificationMethods = proofs.map(\n            proof => proof.verificationMethod);\n          for(const verificationMethod of verificationMethods) {\n            const verificationMethodDocument = await documentLoader({\n              url: verificationMethod\n            });\n            verificationMethodDocuments.push(verificationMethodDocument);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "5t6ZhBYrOsZIoopw5DjmA",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/40-jcs-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 65685,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 23,
              "_error": null,
              "state": "failed",
              "err": {
                "response": {},
                "request": {},
                "options": {
                  "headers": {},
                  "body": "{\"credential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\"],\"id\":\"urn:uuid:8beb58a2-b973-4088-a65d-5ae195c2e1e4\",\"type\":[\"VerifiableCredential\"],\"issuer\":\"did:key:z6MksCeXh9Jwp4ZTEb5Kei7sJpBLpUyS3oaAib8wbtJQqsQu\",\"issuanceDate\":\"2020-03-16T22:37:26.544Z\",\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\"}},\"options\":{\"type\":\"DataIntegrityProof\",\"cryptosuite\":\"eddsa-jcs-2022\",\"credentialStatus\":{\"type\":\"BitstringStatusListEntry\",\"statusPurpose\":\"suspension\"}}}",
                  "method": "POST",
                  "json": {
                    "credential": {
                      "@context": [
                        "https://www.w3.org/2018/credentials/v1"
                      ],
                      "id": "urn:uuid:8beb58a2-b973-4088-a65d-5ae195c2e1e4",
                      "type": [
                        "VerifiableCredential"
                      ],
                      "issuer": "did:key:z6MksCeXh9Jwp4ZTEb5Kei7sJpBLpUyS3oaAib8wbtJQqsQu",
                      "issuanceDate": "2020-03-16T22:37:26.544Z",
                      "credentialSubject": {
                        "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                      }
                    },
                    "options": {
                      "type": "DataIntegrityProof",
                      "cryptosuite": "eddsa-jcs-2022",
                      "credentialStatus": {
                        "type": "BitstringStatusListEntry",
                        "statusPurpose": "suspension"
                      }
                    }
                  },
                  "agent": {
                    "_events": {},
                    "_eventsCount": 2,
                    "defaultPort": 443,
                    "protocol": "https:",
                    "options": {
                      "rejectUnauthorized": false,
                      "noDelay": true,
                      "path": null
                    },
                    "requests": {},
                    "sockets": {},
                    "freeSockets": {},
                    "keepAliveMsecs": 1000,
                    "keepAlive": false,
                    "maxSockets": null,
                    "maxFreeSockets": 256,
                    "scheduling": "lifo",
                    "maxTotalSockets": null,
                    "totalSocketCount": 0,
                    "maxCachedSessions": 100,
                    "_sessionCache": {
                      "map": {},
                      "list": []
                    }
                  },
                  "hooks": {
                    "beforeRequest": [],
                    "beforeRetry": [],
                    "afterResponse": [],
                    "beforeError": []
                  },
                  "prefixUrl": "",
                  "retry": {
                    "limit": 2,
                    "methods": [
                      "get",
                      "put",
                      "head",
                      "delete",
                      "options",
                      "trace"
                    ],
                    "statusCodes": [
                      408,
                      413,
                      429,
                      500,
                      502,
                      503,
                      504
                    ],
                    "afterStatusCodes": [
                      413,
                      429,
                      503
                    ],
                    "maxRetryAfter": null,
                    "backoffLimit": null
                  },
                  "throwHttpErrors": true,
                  "timeout": 10000,
                  "signal": {},
                  "duplex": "half"
                },
                "name": "HTTPError",
                "requestUrl": "https://agent.opsec.id/vc/credentials/issue",
                "status": 400,
                "data": {
                  "message": "DID not found: did:key:z6MksCeXh9Jwp4ZTEb5Kei7sJpBLpUyS3oaAib8wbtJQqsQu"
                }
              }
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "VDThjmNsuL2H1pHShZ1Sv",
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/40-jcs-create.js",
          "_testId": "urn:uuid:19ea9504-3974-47aa-bd5f-1b7ef21ce922"
        },
        {
          "title": "bovine",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The field \"cryptosuite\" MUST be \"eddsa-jcs-2022\".",
              "body": "function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          proofs.some(\n            proof => proof?.cryptosuite === cryptosuite\n          ).should.equal(true, 'Expected at least one proof to have ' +\n            '\"cryptosuite\" with the value \"eddsa-jcs-2022\".');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/40-jcs-create.js",
              "parent": "FggzBLF1KE0UEcMdE1-el",
              "ctx": null,
              "_testId": "urn:uuid:51186d91-0fb0-4a0a-9266-245cd790dd8c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine",
                "rowId": "The field \"cryptosuite\" MUST be \"eddsa-jcs-2022\"."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Dereferencing the \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
              "body": "function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          verificationMethodDocuments.some(\n            verificationMethodDocument =>\n              verificationMethodDocument?.type === 'Multikey'\n          ).should.equal(true, 'Expected at least one proof to have \"type\" ' +\n            'property value \"Multikey\".');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/40-jcs-create.js",
              "parent": "FggzBLF1KE0UEcMdE1-el",
              "ctx": null,
              "_testId": "urn:uuid:a611f2ce-0517-4537-b168-e4518235708d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine",
                "rowId": "Dereferencing the \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          verificationMethodDocuments.some(\n            verificationMethodDocument =>\n              verificationMethodDocument?.type === 'Multikey'\n          ).should.equal(true, 'Expected at least one proof to have \"type\" ' +\n            'property value \"Multikey\".'\n          );\n          const controllerDocuments = [];\n          for(const verificationMethodDocument of verificationMethodDocuments) {\n            const controllerDocument = await documentLoader({\n              url: verificationMethodDocument.controller\n            });\n            controllerDocuments.push(controllerDocument);\n          }\n          proofs.some(\n            proof => controllerDocuments.some(controllerDocument =>\n              controllerDocument.hasOwnProperty(proof.proofPurpose))\n          ).should.equal(true, 'Expected \"proof.proofPurpose\" field ' +\n             'to match the verification method controller.'\n          );\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/40-jcs-create.js",
              "parent": "FggzBLF1KE0UEcMdE1-el",
              "ctx": null,
              "_testId": "urn:uuid:e7435566-79ed-4440-ba99-4a59ce6e5318",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine",
                "rowId": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 65807,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"publicKeyMultibase\" value of the verification method MUST be 34 bytes in length and starts with the base-58-btc prefix (z).",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          for(const verificationMethodDocument of verificationMethodDocuments) {\n            const multibase = 'z';\n            const {publicKeyMultibase} = verificationMethodDocument;\n            const isMultibaseEncoded =\n              publicKeyMultibase.startsWith(multibase) &&\n                shouldBeBs58(publicKeyMultibase);\n            isMultibaseEncoded.should.equal(\n              true,\n              'Expected \"publicKeyMultibase\" value of the verification ' +\n              'method to be multibase base58-btc encoded value'\n            );\n            const publicKeyMultibaseBytes = bs58Decode({\n              id: publicKeyMultibase\n            });\n            publicKeyMultibaseBytes.byteLength.should.equal(34, 'Expected ' +\n              '\"publicKeyMultibase\" value of the verification method to ' +\n              'be 34 bytes in length.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/40-jcs-create.js",
              "parent": "FggzBLF1KE0UEcMdE1-el",
              "ctx": null,
              "_testId": "urn:uuid:7f496f70-e8db-4ff0-afd0-975144b9c4b5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine",
                "rowId": "The \"publicKeyMultibase\" value of the verification method MUST be 34 bytes in length and starts with the base-58-btc prefix (z)."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 65808,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proofValue\" field when decoded to raw bytes, MUST be 64 bytes in length if the associated public key is 32 bytes or 114 bytes in length if the public key is 57 bytes.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          should.exist(issuedVc, 'Expected issuer to have issued a ' +\n            'credential.');\n          should.exist(proofs, 'Expected credential to have a proof.');\n          const eddsa2022Proofs = proofs.filter(\n            proof => proof?.cryptosuite === cryptosuite);\n          eddsa2022Proofs.length.should.be.gte(1, 'Expected at least one ' +\n            'eddsa-jcs-2022 cryptosuite.');\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.proofValue, 'Expected a proof value on ' +\n              'the proof.');\n            const valueBytes = bs58Decode({id: proof.proofValue});\n            should.exist(proof.verificationMethod);\n            const vmBytes = await getPublicKeyBytes({\n              did: proof.verificationMethod});\n            vmBytes.byteLength.should.be.oneOf([32, 57], 'Expected public ' +\n              'key length to be either 32 or 57 bytes.');\n            if(vmBytes.byteLength === 32) {\n              valueBytes.byteLength.should.equal(64, 'Expected 64 byte ' +\n                'proofValue for 32 byte key.');\n            } else {\n              valueBytes.byteLength.should.equal(114, 'Expected 114 byte ' +\n                'proofValue for 57 byte key.');\n            }\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/40-jcs-create.js",
              "parent": "FggzBLF1KE0UEcMdE1-el",
              "ctx": null,
              "_testId": "urn:uuid:110fa56a-c14b-419f-bff2-7d436d8ac431",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine",
                "rowId": "\"proofValue\" field when decoded to raw bytes, MUST be 64 bytes in length if the associated public key is 32 bytes or 114 bytes in length if the public key is 57 bytes."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 65808,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof\" MUST verify when using a conformant verifier.",
              "body": "async function() {\n            this.test.cell = {columnId, rowId: this.test.title};\n            should.exist(verifier, 'Expected implementation to have a VC ' +\n              'API compatible verifier.');\n            const {result, error} = await verifier.post({json: {\n              verifiableCredential: issuedVc,\n              options: {checks: ['proof']}\n            }});\n            should.not.exist(error, 'Expected verifier to not error.');\n            should.exist(result, 'Expected verifier to return a result.');\n            result.status.should.not.equal(400, 'Expected status code to not ' +\n              'be 400.');\n            result.status.should.equal(200, 'Expected status code to be 200.');\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/40-jcs-create.js",
              "parent": "FggzBLF1KE0UEcMdE1-el",
              "ctx": null,
              "_testId": "urn:uuid:bba906f7-faa0-4e9f-bb5e-78a41c70fd1d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine",
                "rowId": "\"proof\" MUST verify when using a conformant verifier."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 65808,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 92,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"bovine\"",
              "body": "async function() {\n          issuedVc = await createInitialVc({issuer, vc: validVc});\n          proofs = Array.isArray(issuedVc?.proof) ?\n            issuedVc.proof : [issuedVc?.proof];\n          const verificationMethods = proofs.map(\n            proof => proof.verificationMethod);\n          for(const verificationMethod of verificationMethods) {\n            const verificationMethodDocument = await documentLoader({\n              url: verificationMethod\n            });\n            verificationMethodDocuments.push(verificationMethodDocument);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "FggzBLF1KE0UEcMdE1-el",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/40-jcs-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 65709,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 98,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "VDThjmNsuL2H1pHShZ1Sv",
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/40-jcs-create.js",
          "_testId": "urn:uuid:ed1f1e5a-a743-41fc-b752-70e253f4f4a3"
        }
      ],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "T7MuQjLKknNHOCxeoRvDF",
      "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/40-jcs-create.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Implementation",
      "_testId": "urn:uuid:753d4927-2ca0-42ce-9aa9-b3ac24963846",
      "columns": [
        "Grotto Networking",
        "OpSecId",
        "bovine"
      ],
      "rows": [
        {
          "id": "The field \"cryptosuite\" MUST be \"eddsa-jcs-2022\".",
          "cells": [
            {
              "type": "test",
              "title": "The field \"cryptosuite\" MUST be \"eddsa-jcs-2022\".",
              "body": "function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          proofs.some(\n            proof => proof?.cryptosuite === cryptosuite\n          ).should.equal(true, 'Expected at least one proof to have ' +\n            '\"cryptosuite\" with the value \"eddsa-jcs-2022\".');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/40-jcs-create.js",
              "parent": "Bk4mlBYdbfP92ELsrEWry",
              "ctx": null,
              "_testId": "urn:uuid:b85c5c46-2935-4224-8325-739d25c7579e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The field \"cryptosuite\" MUST be \"eddsa-jcs-2022\"."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "cell": {
                "rowId": "The field \"cryptosuite\" MUST be \"eddsa-jcs-2022\".",
                "colId": "OpSecId"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            },
            {
              "type": "test",
              "title": "The field \"cryptosuite\" MUST be \"eddsa-jcs-2022\".",
              "body": "function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          proofs.some(\n            proof => proof?.cryptosuite === cryptosuite\n          ).should.equal(true, 'Expected at least one proof to have ' +\n            '\"cryptosuite\" with the value \"eddsa-jcs-2022\".');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/40-jcs-create.js",
              "parent": "FggzBLF1KE0UEcMdE1-el",
              "ctx": null,
              "_testId": "urn:uuid:51186d91-0fb0-4a0a-9266-245cd790dd8c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine",
                "rowId": "The field \"cryptosuite\" MUST be \"eddsa-jcs-2022\"."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "Dereferencing the \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
          "cells": [
            {
              "type": "test",
              "title": "Dereferencing the \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
              "body": "function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          verificationMethodDocuments.some(\n            verificationMethodDocument =>\n              verificationMethodDocument?.type === 'Multikey'\n          ).should.equal(true, 'Expected at least one proof to have \"type\" ' +\n            'property value \"Multikey\".');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/40-jcs-create.js",
              "parent": "Bk4mlBYdbfP92ELsrEWry",
              "ctx": null,
              "_testId": "urn:uuid:325dd1e1-f2f6-4597-bd9d-c06f2dfd068e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "Dereferencing the \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "cell": {
                "rowId": "Dereferencing the \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
                "colId": "OpSecId"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            },
            {
              "type": "test",
              "title": "Dereferencing the \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
              "body": "function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          verificationMethodDocuments.some(\n            verificationMethodDocument =>\n              verificationMethodDocument?.type === 'Multikey'\n          ).should.equal(true, 'Expected at least one proof to have \"type\" ' +\n            'property value \"Multikey\".');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/40-jcs-create.js",
              "parent": "FggzBLF1KE0UEcMdE1-el",
              "ctx": null,
              "_testId": "urn:uuid:a611f2ce-0517-4537-b168-e4518235708d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine",
                "rowId": "Dereferencing the \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
          "cells": [
            {
              "type": "test",
              "title": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          verificationMethodDocuments.some(\n            verificationMethodDocument =>\n              verificationMethodDocument?.type === 'Multikey'\n          ).should.equal(true, 'Expected at least one proof to have \"type\" ' +\n            'property value \"Multikey\".'\n          );\n          const controllerDocuments = [];\n          for(const verificationMethodDocument of verificationMethodDocuments) {\n            const controllerDocument = await documentLoader({\n              url: verificationMethodDocument.controller\n            });\n            controllerDocuments.push(controllerDocument);\n          }\n          proofs.some(\n            proof => controllerDocuments.some(controllerDocument =>\n              controllerDocument.hasOwnProperty(proof.proofPurpose))\n          ).should.equal(true, 'Expected \"proof.proofPurpose\" field ' +\n             'to match the verification method controller.'\n          );\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/40-jcs-create.js",
              "parent": "Bk4mlBYdbfP92ELsrEWry",
              "ctx": null,
              "_testId": "urn:uuid:190199d4-01ff-4550-9561-3658ac5089f1",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 65607,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "cell": {
                "rowId": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
                "colId": "OpSecId"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            },
            {
              "type": "test",
              "title": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          verificationMethodDocuments.some(\n            verificationMethodDocument =>\n              verificationMethodDocument?.type === 'Multikey'\n          ).should.equal(true, 'Expected at least one proof to have \"type\" ' +\n            'property value \"Multikey\".'\n          );\n          const controllerDocuments = [];\n          for(const verificationMethodDocument of verificationMethodDocuments) {\n            const controllerDocument = await documentLoader({\n              url: verificationMethodDocument.controller\n            });\n            controllerDocuments.push(controllerDocument);\n          }\n          proofs.some(\n            proof => controllerDocuments.some(controllerDocument =>\n              controllerDocument.hasOwnProperty(proof.proofPurpose))\n          ).should.equal(true, 'Expected \"proof.proofPurpose\" field ' +\n             'to match the verification method controller.'\n          );\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/40-jcs-create.js",
              "parent": "FggzBLF1KE0UEcMdE1-el",
              "ctx": null,
              "_testId": "urn:uuid:e7435566-79ed-4440-ba99-4a59ce6e5318",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine",
                "rowId": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 65807,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "The \"publicKeyMultibase\" value of the verification method MUST be 34 bytes in length and starts with the base-58-btc prefix (z).",
          "cells": [
            {
              "type": "test",
              "title": "The \"publicKeyMultibase\" value of the verification method MUST be 34 bytes in length and starts with the base-58-btc prefix (z).",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          for(const verificationMethodDocument of verificationMethodDocuments) {\n            const multibase = 'z';\n            const {publicKeyMultibase} = verificationMethodDocument;\n            const isMultibaseEncoded =\n              publicKeyMultibase.startsWith(multibase) &&\n                shouldBeBs58(publicKeyMultibase);\n            isMultibaseEncoded.should.equal(\n              true,\n              'Expected \"publicKeyMultibase\" value of the verification ' +\n              'method to be multibase base58-btc encoded value'\n            );\n            const publicKeyMultibaseBytes = bs58Decode({\n              id: publicKeyMultibase\n            });\n            publicKeyMultibaseBytes.byteLength.should.equal(34, 'Expected ' +\n              '\"publicKeyMultibase\" value of the verification method to ' +\n              'be 34 bytes in length.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/40-jcs-create.js",
              "parent": "Bk4mlBYdbfP92ELsrEWry",
              "ctx": null,
              "_testId": "urn:uuid:97457bec-b23b-4ef0-b81a-1651af16a7ea",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The \"publicKeyMultibase\" value of the verification method MUST be 34 bytes in length and starts with the base-58-btc prefix (z)."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 65607,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "cell": {
                "rowId": "The \"publicKeyMultibase\" value of the verification method MUST be 34 bytes in length and starts with the base-58-btc prefix (z).",
                "colId": "OpSecId"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            },
            {
              "type": "test",
              "title": "The \"publicKeyMultibase\" value of the verification method MUST be 34 bytes in length and starts with the base-58-btc prefix (z).",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          for(const verificationMethodDocument of verificationMethodDocuments) {\n            const multibase = 'z';\n            const {publicKeyMultibase} = verificationMethodDocument;\n            const isMultibaseEncoded =\n              publicKeyMultibase.startsWith(multibase) &&\n                shouldBeBs58(publicKeyMultibase);\n            isMultibaseEncoded.should.equal(\n              true,\n              'Expected \"publicKeyMultibase\" value of the verification ' +\n              'method to be multibase base58-btc encoded value'\n            );\n            const publicKeyMultibaseBytes = bs58Decode({\n              id: publicKeyMultibase\n            });\n            publicKeyMultibaseBytes.byteLength.should.equal(34, 'Expected ' +\n              '\"publicKeyMultibase\" value of the verification method to ' +\n              'be 34 bytes in length.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/40-jcs-create.js",
              "parent": "FggzBLF1KE0UEcMdE1-el",
              "ctx": null,
              "_testId": "urn:uuid:7f496f70-e8db-4ff0-afd0-975144b9c4b5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine",
                "rowId": "The \"publicKeyMultibase\" value of the verification method MUST be 34 bytes in length and starts with the base-58-btc prefix (z)."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 65808,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "\"proofValue\" field when decoded to raw bytes, MUST be 64 bytes in length if the associated public key is 32 bytes or 114 bytes in length if the public key is 57 bytes.",
          "cells": [
            {
              "type": "test",
              "title": "\"proofValue\" field when decoded to raw bytes, MUST be 64 bytes in length if the associated public key is 32 bytes or 114 bytes in length if the public key is 57 bytes.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          should.exist(issuedVc, 'Expected issuer to have issued a ' +\n            'credential.');\n          should.exist(proofs, 'Expected credential to have a proof.');\n          const eddsa2022Proofs = proofs.filter(\n            proof => proof?.cryptosuite === cryptosuite);\n          eddsa2022Proofs.length.should.be.gte(1, 'Expected at least one ' +\n            'eddsa-jcs-2022 cryptosuite.');\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.proofValue, 'Expected a proof value on ' +\n              'the proof.');\n            const valueBytes = bs58Decode({id: proof.proofValue});\n            should.exist(proof.verificationMethod);\n            const vmBytes = await getPublicKeyBytes({\n              did: proof.verificationMethod});\n            vmBytes.byteLength.should.be.oneOf([32, 57], 'Expected public ' +\n              'key length to be either 32 or 57 bytes.');\n            if(vmBytes.byteLength === 32) {\n              valueBytes.byteLength.should.equal(64, 'Expected 64 byte ' +\n                'proofValue for 32 byte key.');\n            } else {\n              valueBytes.byteLength.should.equal(114, 'Expected 114 byte ' +\n                'proofValue for 57 byte key.');\n            }\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/40-jcs-create.js",
              "parent": "Bk4mlBYdbfP92ELsrEWry",
              "ctx": null,
              "_testId": "urn:uuid:fffddb12-ef02-426c-9fef-45e8a70d48b0",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "\"proofValue\" field when decoded to raw bytes, MUST be 64 bytes in length if the associated public key is 32 bytes or 114 bytes in length if the public key is 57 bytes."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 65608,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "cell": {
                "rowId": "\"proofValue\" field when decoded to raw bytes, MUST be 64 bytes in length if the associated public key is 32 bytes or 114 bytes in length if the public key is 57 bytes.",
                "colId": "OpSecId"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            },
            {
              "type": "test",
              "title": "\"proofValue\" field when decoded to raw bytes, MUST be 64 bytes in length if the associated public key is 32 bytes or 114 bytes in length if the public key is 57 bytes.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          should.exist(issuedVc, 'Expected issuer to have issued a ' +\n            'credential.');\n          should.exist(proofs, 'Expected credential to have a proof.');\n          const eddsa2022Proofs = proofs.filter(\n            proof => proof?.cryptosuite === cryptosuite);\n          eddsa2022Proofs.length.should.be.gte(1, 'Expected at least one ' +\n            'eddsa-jcs-2022 cryptosuite.');\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.proofValue, 'Expected a proof value on ' +\n              'the proof.');\n            const valueBytes = bs58Decode({id: proof.proofValue});\n            should.exist(proof.verificationMethod);\n            const vmBytes = await getPublicKeyBytes({\n              did: proof.verificationMethod});\n            vmBytes.byteLength.should.be.oneOf([32, 57], 'Expected public ' +\n              'key length to be either 32 or 57 bytes.');\n            if(vmBytes.byteLength === 32) {\n              valueBytes.byteLength.should.equal(64, 'Expected 64 byte ' +\n                'proofValue for 32 byte key.');\n            } else {\n              valueBytes.byteLength.should.equal(114, 'Expected 114 byte ' +\n                'proofValue for 57 byte key.');\n            }\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/40-jcs-create.js",
              "parent": "FggzBLF1KE0UEcMdE1-el",
              "ctx": null,
              "_testId": "urn:uuid:110fa56a-c14b-419f-bff2-7d436d8ac431",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine",
                "rowId": "\"proofValue\" field when decoded to raw bytes, MUST be 64 bytes in length if the associated public key is 32 bytes or 114 bytes in length if the public key is 57 bytes."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 65808,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "\"proof\" MUST verify when using a conformant verifier.",
          "cells": [
            {
              "type": "test",
              "title": "\"proof\" MUST verify when using a conformant verifier.",
              "body": "async function() {\n            this.test.cell = {columnId, rowId: this.test.title};\n            should.exist(verifier, 'Expected implementation to have a VC ' +\n              'API compatible verifier.');\n            const {result, error} = await verifier.post({json: {\n              verifiableCredential: issuedVc,\n              options: {checks: ['proof']}\n            }});\n            should.not.exist(error, 'Expected verifier to not error.');\n            should.exist(result, 'Expected verifier to return a result.');\n            result.status.should.not.equal(400, 'Expected status code to not ' +\n              'be 400.');\n            result.status.should.equal(200, 'Expected status code to be 200.');\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/40-jcs-create.js",
              "parent": "Bk4mlBYdbfP92ELsrEWry",
              "ctx": null,
              "_testId": "urn:uuid:0488a1c4-a54d-4efa-82c5-19e194c13c6e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "\"proof\" MUST verify when using a conformant verifier."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 65608,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 76,
              "state": "passed",
              "speed": "slow"
            },
            {
              "cell": {
                "rowId": "\"proof\" MUST verify when using a conformant verifier.",
                "colId": "OpSecId"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            },
            {
              "type": "test",
              "title": "\"proof\" MUST verify when using a conformant verifier.",
              "body": "async function() {\n            this.test.cell = {columnId, rowId: this.test.title};\n            should.exist(verifier, 'Expected implementation to have a VC ' +\n              'API compatible verifier.');\n            const {result, error} = await verifier.post({json: {\n              verifiableCredential: issuedVc,\n              options: {checks: ['proof']}\n            }});\n            should.not.exist(error, 'Expected verifier to not error.');\n            should.exist(result, 'Expected verifier to return a result.');\n            result.status.should.not.equal(400, 'Expected status code to not ' +\n              'be 400.');\n            result.status.should.equal(200, 'Expected status code to be 200.');\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/40-jcs-create.js",
              "parent": "FggzBLF1KE0UEcMdE1-el",
              "ctx": null,
              "_testId": "urn:uuid:bba906f7-faa0-4e9f-bb5e-78a41c70fd1d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine",
                "rowId": "\"proof\" MUST verify when using a conformant verifier."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 65808,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 92,
              "state": "passed",
              "speed": "slow"
            }
          ]
        }
      ]
    },
    {
      "title": "eddsa-jcs-2022 (verifier)",
      "ctx": null,
      "suites": [
        {
          "title": "Grotto Networking",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "verifies a valid eddsa-jcs-2022 proof.",
              "body": "async function() {\n            this.test.cell = {columnId, rowId: this.test.title};\n            await verificationSuccess({credential: issuedVc, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/50-jcs-verify.js",
              "parent": "0Zg4g8ctUeBQJCINCFYPU",
              "ctx": null,
              "_testId": "urn:uuid:a6313f9e-31eb-44aa-9eef-28089d3f4e64",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "verifies a valid eddsa-jcs-2022 proof."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 65998,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 71,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected a result from verifier.: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected a result from verifier.: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at verificationSuccess (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/assertions.js:66:10)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/50-jcs-verify.js:57:13)"
              }
            },
            {
              "type": "test",
              "title": "If the \"proofValue\" field, when decoded to raw bytes, is not 64 bytes in length if the associated public key is 32 bytes in length, or 114 bytes in length if the public key is 57 bytes in length, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const credential = credentials.clone('issuedVc');\n          const proofBytes = bs58Decode({id: credential.proof.proofValue});\n          const randomBytes = new Uint8Array(32).map(\n            () => Math.floor(Math.random() * 255));\n          credential.proof.proofValue = bs58Encode(\n            new Uint8Array([...proofBytes, ...randomBytes]));\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/50-jcs-verify.js",
              "parent": "0Zg4g8ctUeBQJCINCFYPU",
              "ctx": null,
              "_testId": "urn:uuid:b8d35eec-4270-4b05-b3f0-7903b77fbdad",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If the \"proofValue\" field, when decoded to raw bytes, is not 64 bytes in length if the associated public key is 32 bytes in length, or 114 bytes in length if the public key is 57 bytes in length, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 66069,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 71,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "fails verification when credential is not canonicalized correctly.",
              "body": "async function() {\n            this.test.cell = {columnId, rowId: this.test.title};\n            const credential = credentials.clone('canonizeUnknown');\n            await verificationFail({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/50-jcs-verify.js",
              "parent": "0Zg4g8ctUeBQJCINCFYPU",
              "ctx": null,
              "_testId": "urn:uuid:bfe38dc9-a38a-40ef-9330-af7b3f575df6",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "fails verification when credential is not canonicalized correctly."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 66141,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 74,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"eddsa-jcs-2022\", an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const credential = credentials.clone('incorrectCryptosuite');\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/50-jcs-verify.js",
              "parent": "0Zg4g8ctUeBQJCINCFYPU",
              "ctx": null,
              "_testId": "urn:uuid:6ae9e39e-036d-43ee-bfb5-164dc3e46733",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If the \"cryptosuite\" field is not the string \"eddsa-jcs-2022\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 66216,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 71,
              "state": "passed",
              "speed": "medium"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "gyIg21rE7dtBPp-JEWDW3",
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/50-jcs-verify.js",
          "_testId": "urn:uuid:b4542050-c9a1-49e3-9658-e812e62b9147"
        },
        {
          "title": "OpSecId",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "verifies a valid eddsa-jcs-2022 proof.",
              "body": "async function() {\n            this.test.cell = {columnId, rowId: this.test.title};\n            await verificationSuccess({credential: issuedVc, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/50-jcs-verify.js",
              "parent": "5aQw_sDrZPelwGfD-Q6w5",
              "ctx": null,
              "_testId": "urn:uuid:956015ba-1773-46c7-8e01-16fd02d96f49",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "OpSecId",
                "rowId": "verifies a valid eddsa-jcs-2022 proof."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 66287,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 25,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected a result from verifier.: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected a result from verifier.: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at verificationSuccess (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/assertions.js:66:10)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/50-jcs-verify.js:57:13)"
              }
            },
            {
              "type": "test",
              "title": "If the \"proofValue\" field, when decoded to raw bytes, is not 64 bytes in length if the associated public key is 32 bytes in length, or 114 bytes in length if the public key is 57 bytes in length, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const credential = credentials.clone('issuedVc');\n          const proofBytes = bs58Decode({id: credential.proof.proofValue});\n          const randomBytes = new Uint8Array(32).map(\n            () => Math.floor(Math.random() * 255));\n          credential.proof.proofValue = bs58Encode(\n            new Uint8Array([...proofBytes, ...randomBytes]));\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/50-jcs-verify.js",
              "parent": "5aQw_sDrZPelwGfD-Q6w5",
              "ctx": null,
              "_testId": "urn:uuid:d7d03b82-8558-44cb-9b94-6df17aad7a10",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "OpSecId",
                "rowId": "If the \"proofValue\" field, when decoded to raw bytes, is not 64 bytes in length if the associated public key is 32 bytes in length, or 114 bytes in length if the public key is 57 bytes in length, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 66312,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 31,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no result from verifier.: expected Response { status: 200, statusText: 'OK', headers: Headers { 'content-length': '633', 'content-type': 'application/json; charset=utf-8', date: 'Sun, 25 Aug 2024 05:06:28 GMT', server: 'Python/3.12 aiohttp/3.10.5', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no result from verifier.: expected Response { status: 200, statusText: 'OK', headers: Headers { 'content-length': '633', 'content-type': 'application/json; charset=utf-8', date: 'Sun, 25 Aug 2024 05:06:28 GMT', server: 'Python/3.12 aiohttp/3.10.5', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationFail (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/assertions.js:49:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/50-jcs-verify.js:70:11)"
              }
            },
            {
              "type": "test",
              "title": "fails verification when credential is not canonicalized correctly.",
              "body": "async function() {\n            this.test.cell = {columnId, rowId: this.test.title};\n            const credential = credentials.clone('canonizeUnknown');\n            await verificationFail({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/50-jcs-verify.js",
              "parent": "5aQw_sDrZPelwGfD-Q6w5",
              "ctx": null,
              "_testId": "urn:uuid:a0f287f3-61a4-402f-bead-a78be013019e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "OpSecId",
                "rowId": "fails verification when credential is not canonicalized correctly."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 66343,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 38,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no result from verifier.: expected Response { status: 200, statusText: 'OK', headers: Headers { 'content-length': '633', 'content-type': 'application/json; charset=utf-8', date: 'Sun, 25 Aug 2024 05:06:28 GMT', server: 'Python/3.12 aiohttp/3.10.5', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no result from verifier.: expected Response { status: 200, statusText: 'OK', headers: Headers { 'content-length': '633', 'content-type': 'application/json; charset=utf-8', date: 'Sun, 25 Aug 2024 05:06:28 GMT', server: 'Python/3.12 aiohttp/3.10.5', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationFail (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/assertions.js:49:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/50-jcs-verify.js:76:13)"
              }
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"eddsa-jcs-2022\", an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const credential = credentials.clone('incorrectCryptosuite');\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/50-jcs-verify.js",
              "parent": "5aQw_sDrZPelwGfD-Q6w5",
              "ctx": null,
              "_testId": "urn:uuid:38808ef3-bb15-4d6c-a1cd-baadf6785229",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "OpSecId",
                "rowId": "If the \"cryptosuite\" field is not the string \"eddsa-jcs-2022\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 66382,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 30,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "gyIg21rE7dtBPp-JEWDW3",
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/50-jcs-verify.js",
          "_testId": "urn:uuid:1eb3a663-fbda-4b36-8d2e-ce90e239a888"
        },
        {
          "title": "bovine",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "verifies a valid eddsa-jcs-2022 proof.",
              "body": "async function() {\n            this.test.cell = {columnId, rowId: this.test.title};\n            await verificationSuccess({credential: issuedVc, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/50-jcs-verify.js",
              "parent": "OR8Z6QYcuf8Et3MQlioRI",
              "ctx": null,
              "_testId": "urn:uuid:f5e1fa07-c11c-48c5-8c28-79ee63ef0076",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine",
                "rowId": "verifies a valid eddsa-jcs-2022 proof."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 66413,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 92,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proofValue\" field, when decoded to raw bytes, is not 64 bytes in length if the associated public key is 32 bytes in length, or 114 bytes in length if the public key is 57 bytes in length, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const credential = credentials.clone('issuedVc');\n          const proofBytes = bs58Decode({id: credential.proof.proofValue});\n          const randomBytes = new Uint8Array(32).map(\n            () => Math.floor(Math.random() * 255));\n          credential.proof.proofValue = bs58Encode(\n            new Uint8Array([...proofBytes, ...randomBytes]));\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/50-jcs-verify.js",
              "parent": "OR8Z6QYcuf8Et3MQlioRI",
              "ctx": null,
              "_testId": "urn:uuid:2f6afbaa-9061-4491-887f-330ea921758d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine",
                "rowId": "If the \"proofValue\" field, when decoded to raw bytes, is not 64 bytes in length if the associated public key is 32 bytes in length, or 114 bytes in length if the public key is 57 bytes in length, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 66505,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 95,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "fails verification when credential is not canonicalized correctly.",
              "body": "async function() {\n            this.test.cell = {columnId, rowId: this.test.title};\n            const credential = credentials.clone('canonizeUnknown');\n            await verificationFail({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/50-jcs-verify.js",
              "parent": "OR8Z6QYcuf8Et3MQlioRI",
              "ctx": null,
              "_testId": "urn:uuid:dcc5cb16-4ed5-4196-8ea6-3b6ae3b43c76",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine",
                "rowId": "fails verification when credential is not canonicalized correctly."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 66601,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1522,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"eddsa-jcs-2022\", an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const credential = credentials.clone('incorrectCryptosuite');\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/50-jcs-verify.js",
              "parent": "OR8Z6QYcuf8Et3MQlioRI",
              "ctx": null,
              "_testId": "urn:uuid:97ada806-79c8-4d26-a25b-41a65ded22fd",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine",
                "rowId": "If the \"cryptosuite\" field is not the string \"eddsa-jcs-2022\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 68123,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 93,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "gyIg21rE7dtBPp-JEWDW3",
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/50-jcs-verify.js",
          "_testId": "urn:uuid:c54be563-da85-4ef6-a4c6-31403f045d17"
        }
      ],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "lZM0-Rc8zku5J9WSbpaE3",
      "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/50-jcs-verify.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Verifier",
      "_testId": "urn:uuid:a70d80d6-a449-4ee8-bc63-94dd8eb172eb",
      "columns": [
        "Grotto Networking",
        "OpSecId",
        "bovine"
      ],
      "rows": [
        {
          "id": "verifies a valid eddsa-jcs-2022 proof.",
          "cells": [
            {
              "type": "test",
              "title": "verifies a valid eddsa-jcs-2022 proof.",
              "body": "async function() {\n            this.test.cell = {columnId, rowId: this.test.title};\n            await verificationSuccess({credential: issuedVc, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/50-jcs-verify.js",
              "parent": "0Zg4g8ctUeBQJCINCFYPU",
              "ctx": null,
              "_testId": "urn:uuid:a6313f9e-31eb-44aa-9eef-28089d3f4e64",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "verifies a valid eddsa-jcs-2022 proof."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 65998,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 71,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected a result from verifier.: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected a result from verifier.: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at verificationSuccess (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/assertions.js:66:10)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/50-jcs-verify.js:57:13)"
              }
            },
            {
              "type": "test",
              "title": "verifies a valid eddsa-jcs-2022 proof.",
              "body": "async function() {\n            this.test.cell = {columnId, rowId: this.test.title};\n            await verificationSuccess({credential: issuedVc, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/50-jcs-verify.js",
              "parent": "5aQw_sDrZPelwGfD-Q6w5",
              "ctx": null,
              "_testId": "urn:uuid:956015ba-1773-46c7-8e01-16fd02d96f49",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "OpSecId",
                "rowId": "verifies a valid eddsa-jcs-2022 proof."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 66287,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 25,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected a result from verifier.: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected a result from verifier.: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at verificationSuccess (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/assertions.js:66:10)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/50-jcs-verify.js:57:13)"
              }
            },
            {
              "type": "test",
              "title": "verifies a valid eddsa-jcs-2022 proof.",
              "body": "async function() {\n            this.test.cell = {columnId, rowId: this.test.title};\n            await verificationSuccess({credential: issuedVc, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/50-jcs-verify.js",
              "parent": "OR8Z6QYcuf8Et3MQlioRI",
              "ctx": null,
              "_testId": "urn:uuid:f5e1fa07-c11c-48c5-8c28-79ee63ef0076",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine",
                "rowId": "verifies a valid eddsa-jcs-2022 proof."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 66413,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 92,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If the \"proofValue\" field, when decoded to raw bytes, is not 64 bytes in length if the associated public key is 32 bytes in length, or 114 bytes in length if the public key is 57 bytes in length, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proofValue\" field, when decoded to raw bytes, is not 64 bytes in length if the associated public key is 32 bytes in length, or 114 bytes in length if the public key is 57 bytes in length, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const credential = credentials.clone('issuedVc');\n          const proofBytes = bs58Decode({id: credential.proof.proofValue});\n          const randomBytes = new Uint8Array(32).map(\n            () => Math.floor(Math.random() * 255));\n          credential.proof.proofValue = bs58Encode(\n            new Uint8Array([...proofBytes, ...randomBytes]));\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/50-jcs-verify.js",
              "parent": "0Zg4g8ctUeBQJCINCFYPU",
              "ctx": null,
              "_testId": "urn:uuid:b8d35eec-4270-4b05-b3f0-7903b77fbdad",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If the \"proofValue\" field, when decoded to raw bytes, is not 64 bytes in length if the associated public key is 32 bytes in length, or 114 bytes in length if the public key is 57 bytes in length, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 66069,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 71,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proofValue\" field, when decoded to raw bytes, is not 64 bytes in length if the associated public key is 32 bytes in length, or 114 bytes in length if the public key is 57 bytes in length, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const credential = credentials.clone('issuedVc');\n          const proofBytes = bs58Decode({id: credential.proof.proofValue});\n          const randomBytes = new Uint8Array(32).map(\n            () => Math.floor(Math.random() * 255));\n          credential.proof.proofValue = bs58Encode(\n            new Uint8Array([...proofBytes, ...randomBytes]));\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/50-jcs-verify.js",
              "parent": "5aQw_sDrZPelwGfD-Q6w5",
              "ctx": null,
              "_testId": "urn:uuid:d7d03b82-8558-44cb-9b94-6df17aad7a10",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "OpSecId",
                "rowId": "If the \"proofValue\" field, when decoded to raw bytes, is not 64 bytes in length if the associated public key is 32 bytes in length, or 114 bytes in length if the public key is 57 bytes in length, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 66312,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 31,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no result from verifier.: expected Response { status: 200, statusText: 'OK', headers: Headers { 'content-length': '633', 'content-type': 'application/json; charset=utf-8', date: 'Sun, 25 Aug 2024 05:06:28 GMT', server: 'Python/3.12 aiohttp/3.10.5', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no result from verifier.: expected Response { status: 200, statusText: 'OK', headers: Headers { 'content-length': '633', 'content-type': 'application/json; charset=utf-8', date: 'Sun, 25 Aug 2024 05:06:28 GMT', server: 'Python/3.12 aiohttp/3.10.5', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationFail (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/assertions.js:49:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/50-jcs-verify.js:70:11)"
              }
            },
            {
              "type": "test",
              "title": "If the \"proofValue\" field, when decoded to raw bytes, is not 64 bytes in length if the associated public key is 32 bytes in length, or 114 bytes in length if the public key is 57 bytes in length, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const credential = credentials.clone('issuedVc');\n          const proofBytes = bs58Decode({id: credential.proof.proofValue});\n          const randomBytes = new Uint8Array(32).map(\n            () => Math.floor(Math.random() * 255));\n          credential.proof.proofValue = bs58Encode(\n            new Uint8Array([...proofBytes, ...randomBytes]));\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/50-jcs-verify.js",
              "parent": "OR8Z6QYcuf8Et3MQlioRI",
              "ctx": null,
              "_testId": "urn:uuid:2f6afbaa-9061-4491-887f-330ea921758d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine",
                "rowId": "If the \"proofValue\" field, when decoded to raw bytes, is not 64 bytes in length if the associated public key is 32 bytes in length, or 114 bytes in length if the public key is 57 bytes in length, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 66505,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 95,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "fails verification when credential is not canonicalized correctly.",
          "cells": [
            {
              "type": "test",
              "title": "fails verification when credential is not canonicalized correctly.",
              "body": "async function() {\n            this.test.cell = {columnId, rowId: this.test.title};\n            const credential = credentials.clone('canonizeUnknown');\n            await verificationFail({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/50-jcs-verify.js",
              "parent": "0Zg4g8ctUeBQJCINCFYPU",
              "ctx": null,
              "_testId": "urn:uuid:bfe38dc9-a38a-40ef-9330-af7b3f575df6",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "fails verification when credential is not canonicalized correctly."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 66141,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 74,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "fails verification when credential is not canonicalized correctly.",
              "body": "async function() {\n            this.test.cell = {columnId, rowId: this.test.title};\n            const credential = credentials.clone('canonizeUnknown');\n            await verificationFail({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/50-jcs-verify.js",
              "parent": "5aQw_sDrZPelwGfD-Q6w5",
              "ctx": null,
              "_testId": "urn:uuid:a0f287f3-61a4-402f-bead-a78be013019e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "OpSecId",
                "rowId": "fails verification when credential is not canonicalized correctly."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 66343,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 38,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no result from verifier.: expected Response { status: 200, statusText: 'OK', headers: Headers { 'content-length': '633', 'content-type': 'application/json; charset=utf-8', date: 'Sun, 25 Aug 2024 05:06:28 GMT', server: 'Python/3.12 aiohttp/3.10.5', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no result from verifier.: expected Response { status: 200, statusText: 'OK', headers: Headers { 'content-length': '633', 'content-type': 'application/json; charset=utf-8', date: 'Sun, 25 Aug 2024 05:06:28 GMT', server: 'Python/3.12 aiohttp/3.10.5', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationFail (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/assertions.js:49:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/50-jcs-verify.js:76:13)"
              }
            },
            {
              "type": "test",
              "title": "fails verification when credential is not canonicalized correctly.",
              "body": "async function() {\n            this.test.cell = {columnId, rowId: this.test.title};\n            const credential = credentials.clone('canonizeUnknown');\n            await verificationFail({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/50-jcs-verify.js",
              "parent": "OR8Z6QYcuf8Et3MQlioRI",
              "ctx": null,
              "_testId": "urn:uuid:dcc5cb16-4ed5-4196-8ea6-3b6ae3b43c76",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine",
                "rowId": "fails verification when credential is not canonicalized correctly."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 66601,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1522,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If the \"cryptosuite\" field is not the string \"eddsa-jcs-2022\", an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"eddsa-jcs-2022\", an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const credential = credentials.clone('incorrectCryptosuite');\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/50-jcs-verify.js",
              "parent": "0Zg4g8ctUeBQJCINCFYPU",
              "ctx": null,
              "_testId": "urn:uuid:6ae9e39e-036d-43ee-bfb5-164dc3e46733",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If the \"cryptosuite\" field is not the string \"eddsa-jcs-2022\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 66216,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 71,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"eddsa-jcs-2022\", an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const credential = credentials.clone('incorrectCryptosuite');\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/50-jcs-verify.js",
              "parent": "5aQw_sDrZPelwGfD-Q6w5",
              "ctx": null,
              "_testId": "urn:uuid:38808ef3-bb15-4d6c-a1cd-baadf6785229",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "OpSecId",
                "rowId": "If the \"cryptosuite\" field is not the string \"eddsa-jcs-2022\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 66382,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 30,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"eddsa-jcs-2022\", an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const credential = credentials.clone('incorrectCryptosuite');\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/50-jcs-verify.js",
              "parent": "OR8Z6QYcuf8Et3MQlioRI",
              "ctx": null,
              "_testId": "urn:uuid:97ada806-79c8-4d26-a25b-41a65ded22fd",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine",
                "rowId": "If the \"cryptosuite\" field is not the string \"eddsa-jcs-2022\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 68123,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 93,
              "state": "passed",
              "speed": "slow"
            }
          ]
        }
      ]
    },
    {
      "title": "eddsa-jcs-2022 (interop)",
      "ctx": null,
      "suites": [],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [
        {
          "title": "\"before all\" hook in \"eddsa-jcs-2022 (interop)\"",
          "body": "async function() {\n    const credentials = await generateTestData();\n    validVc = credentials.clone('validVc');\n  }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "VC_n3WwYMlagQSe8DN5gk",
          "ctx": null,
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/60-jcs-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 68217,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 1,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"eddsa-jcs-2022 (interop)\"",
          "body": "async function() {\n      const [issuer] = endpoints;\n      try {\n        issuedVc = await createInitialVc({issuer, vc: validVc});\n      } catch(e) {\n        console.error(`issuer ${issuerName} failed to issue interop VC`, e);\n      }\n    }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "VC_n3WwYMlagQSe8DN5gk",
          "ctx": null,
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/60-jcs-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 68218,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 74,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"eddsa-jcs-2022 (interop)\"",
          "body": "async function() {\n      const [issuer] = endpoints;\n      try {\n        issuedVc = await createInitialVc({issuer, vc: validVc});\n      } catch(e) {\n        console.error(`issuer ${issuerName} failed to issue interop VC`, e);\n      }\n    }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "VC_n3WwYMlagQSe8DN5gk",
          "ctx": null,
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/60-jcs-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 68291,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 24,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"eddsa-jcs-2022 (interop)\"",
          "body": "async function() {\n      const [issuer] = endpoints;\n      try {\n        issuedVc = await createInitialVc({issuer, vc: validVc});\n      } catch(e) {\n        console.error(`issuer ${issuerName} failed to issue interop VC`, e);\n      }\n    }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "VC_n3WwYMlagQSe8DN5gk",
          "ctx": null,
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/60-jcs-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 68315,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 95,
          "_error": null
        }
      ],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "QTtpw9S7WaqSoh51WrSQz",
      "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/60-jcs-interop.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Issuer",
      "columnLabel": "Verifier",
      "_testId": "urn:uuid:0e99653f-2114-464f-8c57-9129ad13d7e9",
      "columns": [
        "Grotto Networking",
        "OpSecId",
        "bovine"
      ],
      "rows": [
        {
          "id": "Grotto Networking",
          "cells": [
            {
              "type": "test",
              "title": "Grotto Networking should verify Grotto Networking",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/60-jcs-interop.js",
              "parent": "VC_n3WwYMlagQSe8DN5gk",
              "ctx": null,
              "_testId": "urn:uuid:a275b641-75cd-4bbf-a01a-e88c9dcf5854",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Grotto Networking",
                "columnId": "Grotto Networking"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 68411,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 75,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "OpSecId should verify Grotto Networking",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/60-jcs-interop.js",
              "parent": "VC_n3WwYMlagQSe8DN5gk",
              "ctx": null,
              "_testId": "urn:uuid:9a85d0b6-63d5-4990-8fa9-961bda01c6b1",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Grotto Networking",
                "columnId": "OpSecId"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 68485,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 26,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "bovine should verify Grotto Networking",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/60-jcs-interop.js",
              "parent": "VC_n3WwYMlagQSe8DN5gk",
              "ctx": null,
              "_testId": "urn:uuid:85f3af2d-a944-460a-bf3e-c6fb6c5225a9",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Grotto Networking",
                "columnId": "bovine"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 68511,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 92,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",\"https://w3id.org/security/data-integrity/v2\"],\"id\":\"urn:uuid:dcb59883-c5c7-4d8d-bab5-2ade0de387c4\",\"type\":[\"VerifiableCredential\"],\"issuer\":\"did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7\",\"issuanceDate\":\"2020-03-16T22:37:26.544Z\",\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\"},\"proof\":{\"type\":\"DataIntegrityProof\",\"cryptosuite\":\"eddsa-jcs-2022\",\"created\":\"2024-08-25T05:06:30.424Z\",\"verificationMethod\":\"did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7#z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7\",\"proofPurpose\":\"assertionMethod\",\"@context\":[\"https://www.w3.org/2018/credentials/v1\",\"https://w3id.org/security/data-integrity/v2\"],\"proofValue\":\"z5UHuCQwpnE8pC822AnzGjz5g7MPJ44fsGjwubWAZBpCSSnKFbJpEiyKetobJq8XdMhhShYzE9AKNMnUPRAHo69cM\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          "https://w3id.org/security/data-integrity/v2"
                        ],
                        "id": "urn:uuid:dcb59883-c5c7-4d8d-bab5-2ade0de387c4",
                        "type": [
                          "VerifiableCredential"
                        ],
                        "issuer": "did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7",
                        "issuanceDate": "2020-03-16T22:37:26.544Z",
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                        },
                        "proof": {
                          "type": "DataIntegrityProof",
                          "cryptosuite": "eddsa-jcs-2022",
                          "created": "2024-08-25T05:06:30.424Z",
                          "verificationMethod": "did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7#z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7",
                          "proofPurpose": "assertionMethod",
                          "@context": [
                            "https://www.w3.org/2018/credentials/v1",
                            "https://w3id.org/security/data-integrity/v2"
                          ],
                          "proofValue": "z5UHuCQwpnE8pC822AnzGjz5g7MPJ44fsGjwubWAZBpCSSnKFbJpEiyKetobJq8XdMhhShYzE9AKNMnUPRAHo69cM"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://bovine.social/w3c-di/verify",
                  "status": 400
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/60-jcs-interop.js:56:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            }
          ]
        },
        {
          "id": "OpSecId",
          "cells": [
            {
              "type": "test",
              "title": "Grotto Networking should verify OpSecId",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/60-jcs-interop.js",
              "parent": "VC_n3WwYMlagQSe8DN5gk",
              "ctx": null,
              "_testId": "urn:uuid:61ca66d7-2393-461a-b2d7-3413438c15c6",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "OpSecId",
                "columnId": "Grotto Networking"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 68604,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected issuer: OpSecId to issue a VC: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected issuer: OpSecId to issue a VC: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/60-jcs-interop.js:48:16)\n    at process.processImmediate (node:internal/timers:483:21)"
              }
            },
            {
              "type": "test",
              "title": "OpSecId should verify OpSecId",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/60-jcs-interop.js",
              "parent": "VC_n3WwYMlagQSe8DN5gk",
              "ctx": null,
              "_testId": "urn:uuid:50f2ca3c-fb36-412f-8a99-e79731302f5f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "OpSecId",
                "columnId": "OpSecId"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 68604,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected issuer: OpSecId to issue a VC: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected issuer: OpSecId to issue a VC: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/60-jcs-interop.js:48:16)\n    at process.processImmediate (node:internal/timers:483:21)"
              }
            },
            {
              "type": "test",
              "title": "bovine should verify OpSecId",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/60-jcs-interop.js",
              "parent": "VC_n3WwYMlagQSe8DN5gk",
              "ctx": null,
              "_testId": "urn:uuid:4078befe-6bae-4e8e-8c7c-7148ecb86c1d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "OpSecId",
                "columnId": "bovine"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 68605,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected issuer: OpSecId to issue a VC: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected issuer: OpSecId to issue a VC: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/60-jcs-interop.js:48:16)\n    at process.processImmediate (node:internal/timers:483:21)"
              }
            }
          ]
        },
        {
          "id": "bovine",
          "cells": [
            {
              "type": "test",
              "title": "Grotto Networking should verify bovine",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/60-jcs-interop.js",
              "parent": "VC_n3WwYMlagQSe8DN5gk",
              "ctx": null,
              "_testId": "urn:uuid:3c65563d-b0d1-4751-ac1b-3387c53a6e61",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "bovine",
                "columnId": "Grotto Networking"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 68605,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 71,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",\"https://w3id.org/security/data-integrity/v2\"],\"credentialSubject\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\",\"id\":\"urn:uuid:8c79d13e-bff5-45b4-9b71-b6cde65cd199\",\"issuanceDate\":\"2020-03-16T22:37:26.544Z\",\"issuer\":\"did:key:z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd\",\"proof\":{\"created\":\"2024-08-25T05:06:30Z\",\"cryptosuite\":\"eddsa-jcs-2022\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z3eu2FubVvxLaQFHTwoTmRE9M1PTer5cGmAkJMQjZyt2krXJoiRQVgNDVL8XG148DR7TXT9BtVaCCooevXxUGQrzM\",\"type\":\"DataIntegrityProof\",\"verificationMethod\":\"did:key:z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd#z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd\"},\"type\":\"VerifiableCredential\"},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          "https://w3id.org/security/data-integrity/v2"
                        ],
                        "credentialSubject": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b",
                        "id": "urn:uuid:8c79d13e-bff5-45b4-9b71-b6cde65cd199",
                        "issuanceDate": "2020-03-16T22:37:26.544Z",
                        "issuer": "did:key:z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd",
                        "proof": {
                          "created": "2024-08-25T05:06:30Z",
                          "cryptosuite": "eddsa-jcs-2022",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "z3eu2FubVvxLaQFHTwoTmRE9M1PTer5cGmAkJMQjZyt2krXJoiRQVgNDVL8XG148DR7TXT9BtVaCCooevXxUGQrzM",
                          "type": "DataIntegrityProof",
                          "verificationMethod": "did:key:z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd#z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd"
                        },
                        "type": "VerifiableCredential"
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://ecdsa-sd.grotto-networking.com/EdDSA-JCS/credentials/verify",
                  "status": 400,
                  "data": {
                    "errors": [
                      "proof: must be object,array"
                    ]
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/60-jcs-interop.js:56:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "OpSecId should verify bovine",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/60-jcs-interop.js",
              "parent": "VC_n3WwYMlagQSe8DN5gk",
              "ctx": null,
              "_testId": "urn:uuid:597d4fe1-05d3-4d30-8fc3-63c4a6fa6312",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "bovine",
                "columnId": "OpSecId"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 68677,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 25,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",\"https://w3id.org/security/data-integrity/v2\"],\"credentialSubject\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\",\"id\":\"urn:uuid:8c79d13e-bff5-45b4-9b71-b6cde65cd199\",\"issuanceDate\":\"2020-03-16T22:37:26.544Z\",\"issuer\":\"did:key:z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd\",\"proof\":{\"created\":\"2024-08-25T05:06:30Z\",\"cryptosuite\":\"eddsa-jcs-2022\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z3eu2FubVvxLaQFHTwoTmRE9M1PTer5cGmAkJMQjZyt2krXJoiRQVgNDVL8XG148DR7TXT9BtVaCCooevXxUGQrzM\",\"type\":\"DataIntegrityProof\",\"verificationMethod\":\"did:key:z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd#z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd\"},\"type\":\"VerifiableCredential\"},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          "https://w3id.org/security/data-integrity/v2"
                        ],
                        "credentialSubject": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b",
                        "id": "urn:uuid:8c79d13e-bff5-45b4-9b71-b6cde65cd199",
                        "issuanceDate": "2020-03-16T22:37:26.544Z",
                        "issuer": "did:key:z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd",
                        "proof": {
                          "created": "2024-08-25T05:06:30Z",
                          "cryptosuite": "eddsa-jcs-2022",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "z3eu2FubVvxLaQFHTwoTmRE9M1PTer5cGmAkJMQjZyt2krXJoiRQVgNDVL8XG148DR7TXT9BtVaCCooevXxUGQrzM",
                          "type": "DataIntegrityProof",
                          "verificationMethod": "did:key:z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd#z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd"
                        },
                        "type": "VerifiableCredential"
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://agent.opsec.id/vc/credentials/verify",
                  "status": 422,
                  "data": {
                    "json": {
                      "verifiableCredential": {
                        "type": [
                          "Not a valid list."
                        ],
                        "credentialSubject": [
                          "Field should be dict or list of dicts"
                        ]
                      }
                    }
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/60-jcs-interop.js:56:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "bovine should verify bovine",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/60-jcs-interop.js",
              "parent": "VC_n3WwYMlagQSe8DN5gk",
              "ctx": null,
              "_testId": "urn:uuid:04912200-6df9-4c79-90f4-2ef222e6df73",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "bovine",
                "columnId": "bovine"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 68702,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 92,
              "state": "passed",
              "speed": "slow"
            }
          ]
        }
      ]
    }
  ],
  "tables": [],
  "summary": [],
  "respecConfig": {
    "specStatus": "base",
    "shortName": "vc-di-eddsa-test-suite",
    "subtitle": "Interoperability test suite for EdDSA Data Integrity cryptosuites.",
    "github": "https://github.com/w3c/vc-di-eddsa-test-suite",
    "edDraftURI": "https://w3c.github.io/vc-di-eddsa-test-suite",
    "doJsonLd": true,
    "includePermalinks": false,
    "editors": [
      {
        "name": "Andrew Jones",
        "url": "https://github.com/aljones15",
        "company": "Digital Bazaar",
        "companyURL": "http://digitalbazaar.com/"
      }
    ],
    "authors": [
      {
        "name": "Andrew Jones",
        "url": "https://github.com/aljones15",
        "company": "Digital Bazaar",
        "companyURL": "http://digitalbazaar.com/"
      },
      {
        "name": "Manu Sporny",
        "url": "http://manu.sporny.org/",
        "company": "Digital Bazaar",
        "companyURL": "http://digitalbazaar.com/ "
      }
    ]
  },
  "title": "Data Integrity eddsa 2022 Interoperability Report 1.0",
  "stats": [
    "Tests passed 414/486 85%",
    "Tests failed 76/486 16%",
    "Failures 76",
    "Tests skipped 18",
    "Total tests 504"
  ],
  "statusMarkLabels": {
    "pending": {
      "icon": "🚫",
      "label": "Pending"
    },
    "passed": {
      "icon": "✓",
      "label": "Passed"
    },
    "failed": {
      "icon": "❌",
      "label": "Failed"
    },
    "accessDenied": {
      "icon": "⊘",
      "label": "Access Denied"
    },
    "timeout": {
      "icon": "⏱",
      "label": "Timeout"
    },
    "notImplemented": {
      "icon": "—",
      "label": "Not Implemented"
    }
  }
}