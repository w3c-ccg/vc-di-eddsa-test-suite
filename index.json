{
  "matrices": [
    {
      "title": "Data Integrity (eddsa-rdfc-2022 issuers)",
      "ctx": null,
      "suites": [
        {
          "title": "apicatalog.com",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "When expressing a data integrity proof on an object, a proof property MUST be used.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=When%20expressing%20a%20data%20integrity%20proof%20on%20an%20object%2C%20a%20proof%20property%20MUST%20be%20used';\n      shouldHaveProof({vc: data});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "gW78k1VLW_s9hQ8JUzt1d",
              "ctx": null
            },
            {
              "type": "test",
              "title": "If present (proof), its value MUST be either a single object, or an unordered set of objects.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=If%20present%2C%20its%20value%20MUST%20be%20either%20a%20single%20object%2C%20or%20an%20unordered%20set%20of%20objects';\n      shouldHaveProof({vc: data});\n      const {proof} = data;\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "gW78k1VLW_s9hQ8JUzt1d",
              "ctx": null
            },
            {
              "type": "test",
              "title": "(\"proof.id\") An optional identifier for the proof, which MUST be a URL.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=An%20optional%20identifier%20for%20the%20proof%2C%20which%20MUST%20be%20a%20URL';\n      for(const proof of proofs) {\n        if(proof.id) {\n          shouldBeUrl({url: proof.id, prop: 'proof.id'});\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "gW78k1VLW_s9hQ8JUzt1d",
              "ctx": null
            },
            {
              "type": "test",
              "title": "The specific type of proof MUST be specified as a string that maps to a URL.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=The%20specific%20type%20of%20proof%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL';\n      const prop = '@type';\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n        const expanded = await jsonld.expand({\n          '@context': data['@context'],\n          type: proof.type\n        }, {documentLoader});\n        for(const term of expanded) {\n          const types = term[prop];\n          should.exist(types, 'Expected @type to exist.');\n          types.every(url => shouldBeUrl({url, prop}));\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "gW78k1VLW_s9hQ8JUzt1d",
              "ctx": null
            },
            {
              "type": "test",
              "title": "The type property MUST contain the string DataIntegrityProof.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-data-integrity/#contexts-and-vocabularies:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.';\n          for(const proof of proofs) {\n            proof.should.have.property('type');\n            proof.type.should.be.a(\n              'string',\n              'Expected \"proof.type\" to be a string.'\n            );\n            const hasExpectedType = expectedProofTypes.includes(proof.type);\n            hasExpectedType.should.equal(\n              true,\n              `Expected \"proof.type\" to be one of ` +\n              `${expectedProofTypes} Received: ${proof.type}`);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "gW78k1VLW_s9hQ8JUzt1d",
              "ctx": null
            },
            {
              "type": "test",
              "title": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
              "body": "function() {\n          this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.';\n          for(const proof of proofs) {\n            should.exist(proof, 'Expected proof to exist.');\n            if(proof.type === 'DataIntegrityProof') {\n              should.exist(proof.cryptosuite,\n                'Expected proof to have property \"cryptosuite\".');\n            }\n            const {\n              prefix: expectedPrefix,\n              name: encodingName\n            } = expectedMultibasePrefix(proof.cryptosuite);\n            shouldHaveProofValue({proof, expectedPrefix, encodingName});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "gW78k1VLW_s9hQ8JUzt1d",
              "ctx": null
            },
            {
              "type": "test",
              "title": "If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.';\n      for(const proof of proofs) {\n        if(proof.type && proof.type === 'DataIntegrityProof') {\n          should.exist(\n            proof.cryptosuite,\n            'If the proof type is DataIntegrityProof, cryptosuite MUST ' +\n            'be specified');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "gW78k1VLW_s9hQ8JUzt1d",
              "ctx": null
            },
            {
              "type": "test",
              "title": "If specified (proof.cryptosuite), its value MUST be a string.",
              "body": "function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.';\n        for(const proof of proofs) {\n          if(proof.cryptosuite) {\n            proof.cryptosuite.should.be.a(\n              'string',\n              'cryptosuite value MUST be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "gW78k1VLW_s9hQ8JUzt1d",
              "ctx": null
            },
            {
              "type": "test",
              "title": "A verification method is the means and information needed to verify the proof. If included, the value MUST be a string that maps to a [URL].",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=A%20verification%20method%20is%20the%20means%20and%20information%20needed%20to%20verify%20the%20proof.%20If%20included%2C%20the%20value%20MUST%20be%20a%20string%20that%20maps%20to%20a%20%5BURL%5D.';\n      for(const proof of proofs) {\n        if(!data || !data?.['@context']) {\n          throw new Error(`Expected ${vendorName} to issue a VC.`);\n        }\n        await shouldMapToUrl({\n          doc: {\n            '@context': data['@context'],\n            ...proof\n          },\n          term: 'https://w3id.org/security#verificationMethod',\n          prop: '@id',\n          documentLoader\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "gW78k1VLW_s9hQ8JUzt1d",
              "ctx": null
            },
            {
              "type": "test",
              "title": "The reason the proof was created (\"proof.proofPurpose\") MUST be specified as a string that maps to a URL.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20reason%20the%20proof%20was%20created%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL';\n      for(const proof of proofs) {\n        proof.should.have.property('proofPurpose');\n        proof.proofPurpose.should.be.a('string');\n        await shouldMapToUrl({\n          doc: {\n            '@context': data['@context'],\n            ...proof\n          },\n          term: 'https://w3id.org/security#proofPurpose',\n          prop: '@id',\n          documentLoader\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "gW78k1VLW_s9hQ8JUzt1d",
              "ctx": null
            },
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that expresses base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The value MUST use a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification to express the binary data.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=A%20string%20value%20that%20expresses%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof%20using%20the%20verificationMethod%20specified.%20The%20value%20MUST%20use%20a%20header%20and%20encoding%20as%20described%20in%20Section%202.4%20Multibase%20of%20the%20Controller%20Documents%201.0%20specification%20to%20express%20the%20binary%20data.';\n      for(const proof of proofs) {\n        should.exist(proof, 'Expected proof to exist.');\n        //FIXME the suite should pass in the expectedPrefix and\n        //encodingName or type\n        const {\n          prefix: expectedPrefix,\n          name: encodingName\n        } = expectedMultibasePrefix(proof.cryptosuite);\n        shouldHaveProofValue({proof, expectedPrefix, encodingName});\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "gW78k1VLW_s9hQ8JUzt1d",
              "ctx": null
            },
            {
              "type": "test",
              "title": "Cryptographic suite designers MUST use mandatory proof value properties defined in Section 2.1 Proofs, and MAY define other properties specific to their cryptographic suite.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#add-proof:~:text=MUST%20use%20mandatory%20proof%20value%20properties%20defined';\n      for(const proof of proofs) {\n        shouldBeProof({proof});\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "gW78k1VLW_s9hQ8JUzt1d",
              "ctx": null
            },
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      const undefinedType = structuredClone(credential);\n      undefinedType.type.push('InvalidType');\n      await shouldFailIssuance({\n        credential: undefinedType,\n        issuer,\n        reason: 'Expected issuer to error when VC has an undefined type.'\n      });\n      const undefinedTerm = structuredClone(credential);\n      undefinedTerm.credentialSubject.invalidTerm = 'invalidTerm';\n      await shouldFailIssuance({\n        credential: undefinedTerm,\n        issuer,\n        reason: 'Expected issuer to error when VC has an undefined term.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "gW78k1VLW_s9hQ8JUzt1d",
              "ctx": null
            },
            {
              "type": "test",
              "title": "If the algorithm produces an error, the error MUST be propagated and SHOULD convey the error type.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#dfn-input-document:~:text=If%20the%20algorithm%20produces%20an%20error%2C%20the%20error%20MUST%20be%20propagated%20and%20SHOULD%20convey%20the%20error%20type';\n      const noSubject = structuredClone(credential);\n      delete noSubject.credentialSubject;\n      // FIXME this test should look for a propagated error such as\n      // PROOF_GENERATION_ERROR\n      await shouldFailIssuance({\n        credential: noSubject,\n        issuer,\n        reason: 'Expected issuer to error when VC has no credentialSubject.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "gW78k1VLW_s9hQ8JUzt1d",
              "ctx": null
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n        const hasCryptosuiteName = proofs.some(\n          p => p?.cryptosuite === cryptosuiteName);\n        hasCryptosuiteName.should.equal(\n          true,\n          `Expected at least one proof with cryptosuite ${cryptosuiteName}`);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "gW78k1VLW_s9hQ8JUzt1d",
              "ctx": null
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n        const cryptoProp = 'https://w3id.org/security#cryptosuite';\n        const cryptoType = 'https://w3id.org/security#cryptosuiteString';\n        for(const {cryptosuite, type} of proofs) {\n          should.exist(cryptosuite,\n            'Expected property \"proof.cryptosuite\" to exist.');\n          should.exist(type,\n            'Expected property \"proof.type\" to exist.');\n          should.exist(data['@context'],\n            'Expected VC to have property \"@context\".');\n          const expanded = await jsonld.expand({\n            '@context': data['@context'],\n            cryptosuite,\n            type\n          }, {documentLoader});\n          for(const terms of expanded) {\n            const cryptoProperties = terms[cryptoProp];\n            should.exist(cryptoProperties,\n              `Expected property ${cryptoProp} to exist.`);\n            const hasTypeName = cryptoProperties.some(suite =>\n              suite['@type'] === cryptoType &&\n              suite['@value'] == cryptosuiteName);\n            hasTypeName.should.equal(true,\n              `Expected ${cryptoProp} with @value ${cryptosuiteName} & ` +\n              `@type ${cryptoType}`);\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "gW78k1VLW_s9hQ8JUzt1d",
              "ctx": null
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook",
              "body": "function() {\n      this.currentTest.cell = {\n        columnId,\n        rowId: this.currentTest.title\n      };\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "gW78k1VLW_s9hQ8JUzt1d",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js"
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook for \"When expressing a data integrity proof on an object, a proof property MUST be used.\"",
              "body": "async function() {\n      if(!issuer) {\n        throw new Error(`Expected ${vendorName} to have an issuer.`);\n      }\n      if(!credential) {\n        throw new Error(`Expected a credential to be passed in ` +\n          `received ${credential}`);\n      }\n      data = await createInitialVc({issuer, credential});\n      proofs = Array.isArray(data.proof) ? data.proof : [data.proof];\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "gW78k1VLW_s9hQ8JUzt1d",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 645,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 972,
              "_error": null,
              "state": "failed",
              "err": {
                "response": {},
                "request": {},
                "options": {
                  "headers": {},
                  "body": "{\"credential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\"],\"id\":\"urn:uuid:d2f205a1-f16f-4429-9e3c-89a258d7f83d\",\"type\":[\"VerifiableCredential\"],\"issuer\":\"https://us-central1-api-catalog.cloudfunctions.net/vc-api-issue-eddsa-rdfc-2022\",\"issuanceDate\":\"2020-03-16T22:37:26.544Z\",\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\"}},\"options\":{}}",
                  "method": "POST",
                  "json": {
                    "credential": {
                      "@context": [
                        "https://www.w3.org/2018/credentials/v1"
                      ],
                      "id": "urn:uuid:d2f205a1-f16f-4429-9e3c-89a258d7f83d",
                      "type": [
                        "VerifiableCredential"
                      ],
                      "issuer": "https://us-central1-api-catalog.cloudfunctions.net/vc-api-issue-eddsa-rdfc-2022",
                      "issuanceDate": "2020-03-16T22:37:26.544Z",
                      "credentialSubject": {
                        "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                      }
                    },
                    "options": {}
                  },
                  "agent": {
                    "_events": {},
                    "_eventsCount": 2,
                    "defaultPort": 443,
                    "protocol": "https:",
                    "options": {
                      "rejectUnauthorized": false,
                      "noDelay": true,
                      "path": null
                    },
                    "requests": {},
                    "sockets": {},
                    "freeSockets": {},
                    "keepAliveMsecs": 1000,
                    "keepAlive": false,
                    "maxSockets": null,
                    "maxFreeSockets": 256,
                    "scheduling": "lifo",
                    "maxTotalSockets": null,
                    "totalSocketCount": 0,
                    "maxCachedSessions": 100,
                    "_sessionCache": {
                      "map": {},
                      "list": []
                    }
                  },
                  "hooks": {
                    "beforeRequest": [],
                    "beforeRetry": [],
                    "afterResponse": [],
                    "beforeError": []
                  },
                  "prefixUrl": "",
                  "retry": {
                    "limit": 2,
                    "methods": [
                      "get",
                      "put",
                      "head",
                      "delete",
                      "options",
                      "trace"
                    ],
                    "statusCodes": [
                      408,
                      413,
                      429,
                      500,
                      502,
                      503,
                      504
                    ],
                    "afterStatusCodes": [
                      413,
                      429,
                      503
                    ],
                    "maxRetryAfter": null,
                    "backoffLimit": null
                  },
                  "throwHttpErrors": true,
                  "timeout": 10000,
                  "signal": {},
                  "duplex": "half"
                },
                "name": "HTTPError",
                "requestUrl": "https://us-central1-api-catalog.cloudfunctions.net/vc-api-issue-eddsa-rdfc-2022",
                "status": 400,
                "data": {
                  "message": "InvalidDocument",
                  "code": "INVALID_DOCUMENT"
                }
              }
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "1Y29bIBmPyjmnY08izIlE",
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
          "_testId": "urn:uuid:5691cfa4-fc7a-4ac3-9026-df11b7eec747"
        },
        {
          "title": "Aviary Tech",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "When expressing a data integrity proof on an object, a proof property MUST be used.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=When%20expressing%20a%20data%20integrity%20proof%20on%20an%20object%2C%20a%20proof%20property%20MUST%20be%20used';\n      shouldHaveProof({vc: data});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "WZsrG-ZB-wun3Jr0ffXeG",
              "ctx": null,
              "_testId": "urn:uuid:3929b5ba-604e-4386-b9df-95a9bd14f507",
              "cell": {
                "columnId": "Aviary Tech",
                "rowId": "When expressing a data integrity proof on an object, a proof property MUST be used."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=When%20expressing%20a%20data%20integrity%20proof%20on%20an%20object%2C%20a%20proof%20property%20MUST%20be%20used",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If present (proof), its value MUST be either a single object, or an unordered set of objects.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=If%20present%2C%20its%20value%20MUST%20be%20either%20a%20single%20object%2C%20or%20an%20unordered%20set%20of%20objects';\n      shouldHaveProof({vc: data});\n      const {proof} = data;\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "WZsrG-ZB-wun3Jr0ffXeG",
              "ctx": null,
              "_testId": "urn:uuid:561249da-8777-4d96-a6a4-f3ffb972a464",
              "cell": {
                "columnId": "Aviary Tech",
                "rowId": "If present (proof), its value MUST be either a single object, or an unordered set of objects."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=If%20present%2C%20its%20value%20MUST%20be%20either%20a%20single%20object%2C%20or%20an%20unordered%20set%20of%20objects",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.id\") An optional identifier for the proof, which MUST be a URL.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=An%20optional%20identifier%20for%20the%20proof%2C%20which%20MUST%20be%20a%20URL';\n      for(const proof of proofs) {\n        if(proof.id) {\n          shouldBeUrl({url: proof.id, prop: 'proof.id'});\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "WZsrG-ZB-wun3Jr0ffXeG",
              "ctx": null,
              "_testId": "urn:uuid:0e49b817-1a11-4831-a25d-141821c372c2",
              "cell": {
                "columnId": "Aviary Tech",
                "rowId": "(\"proof.id\") An optional identifier for the proof, which MUST be a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=An%20optional%20identifier%20for%20the%20proof%2C%20which%20MUST%20be%20a%20URL",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The specific type of proof MUST be specified as a string that maps to a URL.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=The%20specific%20type%20of%20proof%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL';\n      const prop = '@type';\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n        const expanded = await jsonld.expand({\n          '@context': data['@context'],\n          type: proof.type\n        }, {documentLoader});\n        for(const term of expanded) {\n          const types = term[prop];\n          should.exist(types, 'Expected @type to exist.');\n          types.every(url => shouldBeUrl({url, prop}));\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "WZsrG-ZB-wun3Jr0ffXeG",
              "ctx": null,
              "_testId": "urn:uuid:8c119bb9-6361-46d2-afe8-aa5bdd29cf6a",
              "cell": {
                "columnId": "Aviary Tech",
                "rowId": "The specific type of proof MUST be specified as a string that maps to a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=The%20specific%20type%20of%20proof%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2372,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 10,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The type property MUST contain the string DataIntegrityProof.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-data-integrity/#contexts-and-vocabularies:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.';\n          for(const proof of proofs) {\n            proof.should.have.property('type');\n            proof.type.should.be.a(\n              'string',\n              'Expected \"proof.type\" to be a string.'\n            );\n            const hasExpectedType = expectedProofTypes.includes(proof.type);\n            hasExpectedType.should.equal(\n              true,\n              `Expected \"proof.type\" to be one of ` +\n              `${expectedProofTypes} Received: ${proof.type}`);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "WZsrG-ZB-wun3Jr0ffXeG",
              "ctx": null,
              "_testId": "urn:uuid:7db9cfec-8d13-4537-a63f-bef3a7f8fe62",
              "cell": {
                "columnId": "Aviary Tech",
                "rowId": "The type property MUST contain the string DataIntegrityProof."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#contexts-and-vocabularies:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2380,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
              "body": "function() {\n          this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.';\n          for(const proof of proofs) {\n            should.exist(proof, 'Expected proof to exist.');\n            if(proof.type === 'DataIntegrityProof') {\n              should.exist(proof.cryptosuite,\n                'Expected proof to have property \"cryptosuite\".');\n            }\n            const {\n              prefix: expectedPrefix,\n              name: encodingName\n            } = expectedMultibasePrefix(proof.cryptosuite);\n            shouldHaveProofValue({proof, expectedPrefix, encodingName});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "WZsrG-ZB-wun3Jr0ffXeG",
              "ctx": null,
              "_testId": "urn:uuid:4e9880c9-cd02-4193-89bf-463aa2d9fe1f",
              "cell": {
                "columnId": "Aviary Tech",
                "rowId": "The proofValue property MUST be used, as specified in 2.1 Proofs."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.';\n      for(const proof of proofs) {\n        if(proof.type && proof.type === 'DataIntegrityProof') {\n          should.exist(\n            proof.cryptosuite,\n            'If the proof type is DataIntegrityProof, cryptosuite MUST ' +\n            'be specified');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "WZsrG-ZB-wun3Jr0ffXeG",
              "ctx": null,
              "_testId": "urn:uuid:724911bc-f224-45f9-816f-ac8124d60d9c",
              "cell": {
                "columnId": "Aviary Tech",
                "rowId": "If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If specified (proof.cryptosuite), its value MUST be a string.",
              "body": "function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.';\n        for(const proof of proofs) {\n          if(proof.cryptosuite) {\n            proof.cryptosuite.should.be.a(\n              'string',\n              'cryptosuite value MUST be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "WZsrG-ZB-wun3Jr0ffXeG",
              "ctx": null,
              "_testId": "urn:uuid:4e95e4c6-a7af-43d3-9f8e-a3b03459fcae",
              "cell": {
                "columnId": "Aviary Tech",
                "rowId": "If specified (proof.cryptosuite), its value MUST be a string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "A verification method is the means and information needed to verify the proof. If included, the value MUST be a string that maps to a [URL].",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=A%20verification%20method%20is%20the%20means%20and%20information%20needed%20to%20verify%20the%20proof.%20If%20included%2C%20the%20value%20MUST%20be%20a%20string%20that%20maps%20to%20a%20%5BURL%5D.';\n      for(const proof of proofs) {\n        if(!data || !data?.['@context']) {\n          throw new Error(`Expected ${vendorName} to issue a VC.`);\n        }\n        await shouldMapToUrl({\n          doc: {\n            '@context': data['@context'],\n            ...proof\n          },\n          term: 'https://w3id.org/security#verificationMethod',\n          prop: '@id',\n          documentLoader\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "WZsrG-ZB-wun3Jr0ffXeG",
              "ctx": null,
              "_testId": "urn:uuid:4801de88-0bba-453e-84bf-08b46a773198",
              "cell": {
                "columnId": "Aviary Tech",
                "rowId": "A verification method is the means and information needed to verify the proof. If included, the value MUST be a string that maps to a [URL]."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=A%20verification%20method%20is%20the%20means%20and%20information%20needed%20to%20verify%20the%20proof.%20If%20included%2C%20the%20value%20MUST%20be%20a%20string%20that%20maps%20to%20a%20%5BURL%5D.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2382,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 2,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The reason the proof was created (\"proof.proofPurpose\") MUST be specified as a string that maps to a URL.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20reason%20the%20proof%20was%20created%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL';\n      for(const proof of proofs) {\n        proof.should.have.property('proofPurpose');\n        proof.proofPurpose.should.be.a('string');\n        await shouldMapToUrl({\n          doc: {\n            '@context': data['@context'],\n            ...proof\n          },\n          term: 'https://w3id.org/security#proofPurpose',\n          prop: '@id',\n          documentLoader\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "WZsrG-ZB-wun3Jr0ffXeG",
              "ctx": null,
              "_testId": "urn:uuid:ceeefb94-da91-4b78-bfb3-80b1960788fb",
              "cell": {
                "columnId": "Aviary Tech",
                "rowId": "The reason the proof was created (\"proof.proofPurpose\") MUST be specified as a string that maps to a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20reason%20the%20proof%20was%20created%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2384,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that expresses base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The value MUST use a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification to express the binary data.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=A%20string%20value%20that%20expresses%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof%20using%20the%20verificationMethod%20specified.%20The%20value%20MUST%20use%20a%20header%20and%20encoding%20as%20described%20in%20Section%202.4%20Multibase%20of%20the%20Controller%20Documents%201.0%20specification%20to%20express%20the%20binary%20data.';\n      for(const proof of proofs) {\n        should.exist(proof, 'Expected proof to exist.');\n        //FIXME the suite should pass in the expectedPrefix and\n        //encodingName or type\n        const {\n          prefix: expectedPrefix,\n          name: encodingName\n        } = expectedMultibasePrefix(proof.cryptosuite);\n        shouldHaveProofValue({proof, expectedPrefix, encodingName});\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "WZsrG-ZB-wun3Jr0ffXeG",
              "ctx": null,
              "_testId": "urn:uuid:58f8f481-3360-4784-9c1b-a3da2f35361a",
              "cell": {
                "columnId": "Aviary Tech",
                "rowId": "(\"proof.proofValue\") A string value that expresses base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The value MUST use a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification to express the binary data."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=A%20string%20value%20that%20expresses%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof%20using%20the%20verificationMethod%20specified.%20The%20value%20MUST%20use%20a%20header%20and%20encoding%20as%20described%20in%20Section%202.4%20Multibase%20of%20the%20Controller%20Documents%201.0%20specification%20to%20express%20the%20binary%20data.",
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Cryptographic suite designers MUST use mandatory proof value properties defined in Section 2.1 Proofs, and MAY define other properties specific to their cryptographic suite.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#add-proof:~:text=MUST%20use%20mandatory%20proof%20value%20properties%20defined';\n      for(const proof of proofs) {\n        shouldBeProof({proof});\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "WZsrG-ZB-wun3Jr0ffXeG",
              "ctx": null,
              "_testId": "urn:uuid:a5888baf-c956-4f54-945f-09c913427e57",
              "cell": {
                "columnId": "Aviary Tech",
                "rowId": "Cryptographic suite designers MUST use mandatory proof value properties defined in Section 2.1 Proofs, and MAY define other properties specific to their cryptographic suite."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#add-proof:~:text=MUST%20use%20mandatory%20proof%20value%20properties%20defined",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2386,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      const undefinedType = structuredClone(credential);\n      undefinedType.type.push('InvalidType');\n      await shouldFailIssuance({\n        credential: undefinedType,\n        issuer,\n        reason: 'Expected issuer to error when VC has an undefined type.'\n      });\n      const undefinedTerm = structuredClone(credential);\n      undefinedTerm.credentialSubject.invalidTerm = 'invalidTerm';\n      await shouldFailIssuance({\n        credential: undefinedTerm,\n        issuer,\n        reason: 'Expected issuer to error when VC has an undefined term.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "WZsrG-ZB-wun3Jr0ffXeG",
              "ctx": null,
              "_testId": "urn:uuid:ac8e7bbc-dc99-4668-bb14-53c14f4ecfbe",
              "cell": {
                "columnId": "Aviary Tech",
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2387,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 219,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the algorithm produces an error, the error MUST be propagated and SHOULD convey the error type.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#dfn-input-document:~:text=If%20the%20algorithm%20produces%20an%20error%2C%20the%20error%20MUST%20be%20propagated%20and%20SHOULD%20convey%20the%20error%20type';\n      const noSubject = structuredClone(credential);\n      delete noSubject.credentialSubject;\n      // FIXME this test should look for a propagated error such as\n      // PROOF_GENERATION_ERROR\n      await shouldFailIssuance({\n        credential: noSubject,\n        issuer,\n        reason: 'Expected issuer to error when VC has no credentialSubject.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "WZsrG-ZB-wun3Jr0ffXeG",
              "ctx": null,
              "_testId": "urn:uuid:dbe6800e-e886-413a-a2bc-68a111a113d6",
              "cell": {
                "columnId": "Aviary Tech",
                "rowId": "If the algorithm produces an error, the error MUST be propagated and SHOULD convey the error type."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#dfn-input-document:~:text=If%20the%20algorithm%20produces%20an%20error%2C%20the%20error%20MUST%20be%20propagated%20and%20SHOULD%20convey%20the%20error%20type",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2606,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 49,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n        const hasCryptosuiteName = proofs.some(\n          p => p?.cryptosuite === cryptosuiteName);\n        hasCryptosuiteName.should.equal(\n          true,\n          `Expected at least one proof with cryptosuite ${cryptosuiteName}`);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "WZsrG-ZB-wun3Jr0ffXeG",
              "ctx": null,
              "_testId": "urn:uuid:1f1c160e-be77-4f49-a9c4-1341dbf95148",
              "cell": {
                "columnId": "Aviary Tech",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2655,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n        const cryptoProp = 'https://w3id.org/security#cryptosuite';\n        const cryptoType = 'https://w3id.org/security#cryptosuiteString';\n        for(const {cryptosuite, type} of proofs) {\n          should.exist(cryptosuite,\n            'Expected property \"proof.cryptosuite\" to exist.');\n          should.exist(type,\n            'Expected property \"proof.type\" to exist.');\n          should.exist(data['@context'],\n            'Expected VC to have property \"@context\".');\n          const expanded = await jsonld.expand({\n            '@context': data['@context'],\n            cryptosuite,\n            type\n          }, {documentLoader});\n          for(const terms of expanded) {\n            const cryptoProperties = terms[cryptoProp];\n            should.exist(cryptoProperties,\n              `Expected property ${cryptoProp} to exist.`);\n            const hasTypeName = cryptoProperties.some(suite =>\n              suite['@type'] === cryptoType &&\n              suite['@value'] == cryptosuiteName);\n            hasTypeName.should.equal(true,\n              `Expected ${cryptoProp} with @value ${cryptosuiteName} & ` +\n              `@type ${cryptoType}`);\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "WZsrG-ZB-wun3Jr0ffXeG",
              "ctx": null,
              "_testId": "urn:uuid:2d09d2e7-baa3-4ac5-9e01-d94f3a3351c5",
              "cell": {
                "columnId": "Aviary Tech",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2655,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"Aviary Tech\"",
              "body": "function() {\n      this.currentTest.cell = {\n        columnId,\n        rowId: this.currentTest.title\n      };\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "WZsrG-ZB-wun3Jr0ffXeG",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Aviary Tech\"",
              "body": "async function() {\n      if(!issuer) {\n        throw new Error(`Expected ${vendorName} to have an issuer.`);\n      }\n      if(!credential) {\n        throw new Error(`Expected a credential to be passed in ` +\n          `received ${credential}`);\n      }\n      data = await createInitialVc({issuer, credential});\n      proofs = Array.isArray(data.proof) ? data.proof : [data.proof];\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "WZsrG-ZB-wun3Jr0ffXeG",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1623,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 744,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "1Y29bIBmPyjmnY08izIlE",
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
          "_testId": "urn:uuid:ca4880c9-00a1-410a-b102-12b06f0df236"
        },
        {
          "title": "Digital Bazaar",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "When expressing a data integrity proof on an object, a proof property MUST be used.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=When%20expressing%20a%20data%20integrity%20proof%20on%20an%20object%2C%20a%20proof%20property%20MUST%20be%20used';\n      shouldHaveProof({vc: data});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "KD39x8W5HyNa6QWjqPKRz",
              "ctx": null,
              "_testId": "urn:uuid:8ac36f2a-c67f-4b23-b33c-d1e5f2876dc9",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "When expressing a data integrity proof on an object, a proof property MUST be used."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=When%20expressing%20a%20data%20integrity%20proof%20on%20an%20object%2C%20a%20proof%20property%20MUST%20be%20used",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If present (proof), its value MUST be either a single object, or an unordered set of objects.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=If%20present%2C%20its%20value%20MUST%20be%20either%20a%20single%20object%2C%20or%20an%20unordered%20set%20of%20objects';\n      shouldHaveProof({vc: data});\n      const {proof} = data;\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "KD39x8W5HyNa6QWjqPKRz",
              "ctx": null,
              "_testId": "urn:uuid:9557aa5c-2883-4262-bef5-4219a0f2c369",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If present (proof), its value MUST be either a single object, or an unordered set of objects."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=If%20present%2C%20its%20value%20MUST%20be%20either%20a%20single%20object%2C%20or%20an%20unordered%20set%20of%20objects",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.id\") An optional identifier for the proof, which MUST be a URL.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=An%20optional%20identifier%20for%20the%20proof%2C%20which%20MUST%20be%20a%20URL';\n      for(const proof of proofs) {\n        if(proof.id) {\n          shouldBeUrl({url: proof.id, prop: 'proof.id'});\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "KD39x8W5HyNa6QWjqPKRz",
              "ctx": null,
              "_testId": "urn:uuid:dab64d67-aa63-4222-b7c0-39f5583ff12c",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "(\"proof.id\") An optional identifier for the proof, which MUST be a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=An%20optional%20identifier%20for%20the%20proof%2C%20which%20MUST%20be%20a%20URL",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The specific type of proof MUST be specified as a string that maps to a URL.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=The%20specific%20type%20of%20proof%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL';\n      const prop = '@type';\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n        const expanded = await jsonld.expand({\n          '@context': data['@context'],\n          type: proof.type\n        }, {documentLoader});\n        for(const term of expanded) {\n          const types = term[prop];\n          should.exist(types, 'Expected @type to exist.');\n          types.every(url => shouldBeUrl({url, prop}));\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "KD39x8W5HyNa6QWjqPKRz",
              "ctx": null,
              "_testId": "urn:uuid:20304d72-c1c7-4935-a6fe-27965eb67b87",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The specific type of proof MUST be specified as a string that maps to a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=The%20specific%20type%20of%20proof%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3123,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The type property MUST contain the string DataIntegrityProof.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-data-integrity/#contexts-and-vocabularies:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.';\n          for(const proof of proofs) {\n            proof.should.have.property('type');\n            proof.type.should.be.a(\n              'string',\n              'Expected \"proof.type\" to be a string.'\n            );\n            const hasExpectedType = expectedProofTypes.includes(proof.type);\n            hasExpectedType.should.equal(\n              true,\n              `Expected \"proof.type\" to be one of ` +\n              `${expectedProofTypes} Received: ${proof.type}`);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "KD39x8W5HyNa6QWjqPKRz",
              "ctx": null,
              "_testId": "urn:uuid:19cf97cd-572e-42b3-b189-5daff2ff8056",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The type property MUST contain the string DataIntegrityProof."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#contexts-and-vocabularies:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3125,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
              "body": "function() {\n          this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.';\n          for(const proof of proofs) {\n            should.exist(proof, 'Expected proof to exist.');\n            if(proof.type === 'DataIntegrityProof') {\n              should.exist(proof.cryptosuite,\n                'Expected proof to have property \"cryptosuite\".');\n            }\n            const {\n              prefix: expectedPrefix,\n              name: encodingName\n            } = expectedMultibasePrefix(proof.cryptosuite);\n            shouldHaveProofValue({proof, expectedPrefix, encodingName});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "KD39x8W5HyNa6QWjqPKRz",
              "ctx": null,
              "_testId": "urn:uuid:591a8fc6-41a1-410c-b77b-7b53147aabb6",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The proofValue property MUST be used, as specified in 2.1 Proofs."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.';\n      for(const proof of proofs) {\n        if(proof.type && proof.type === 'DataIntegrityProof') {\n          should.exist(\n            proof.cryptosuite,\n            'If the proof type is DataIntegrityProof, cryptosuite MUST ' +\n            'be specified');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "KD39x8W5HyNa6QWjqPKRz",
              "ctx": null,
              "_testId": "urn:uuid:7d9b0b45-4677-4637-9fba-6441a6e0f19c",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If specified (proof.cryptosuite), its value MUST be a string.",
              "body": "function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.';\n        for(const proof of proofs) {\n          if(proof.cryptosuite) {\n            proof.cryptosuite.should.be.a(\n              'string',\n              'cryptosuite value MUST be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "KD39x8W5HyNa6QWjqPKRz",
              "ctx": null,
              "_testId": "urn:uuid:65d2c680-d144-4b69-9014-3d5283af603c",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If specified (proof.cryptosuite), its value MUST be a string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "A verification method is the means and information needed to verify the proof. If included, the value MUST be a string that maps to a [URL].",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=A%20verification%20method%20is%20the%20means%20and%20information%20needed%20to%20verify%20the%20proof.%20If%20included%2C%20the%20value%20MUST%20be%20a%20string%20that%20maps%20to%20a%20%5BURL%5D.';\n      for(const proof of proofs) {\n        if(!data || !data?.['@context']) {\n          throw new Error(`Expected ${vendorName} to issue a VC.`);\n        }\n        await shouldMapToUrl({\n          doc: {\n            '@context': data['@context'],\n            ...proof\n          },\n          term: 'https://w3id.org/security#verificationMethod',\n          prop: '@id',\n          documentLoader\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "KD39x8W5HyNa6QWjqPKRz",
              "ctx": null,
              "_testId": "urn:uuid:4d5a2957-d54d-4adb-8ce0-e03f4231fa4e",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "A verification method is the means and information needed to verify the proof. If included, the value MUST be a string that maps to a [URL]."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=A%20verification%20method%20is%20the%20means%20and%20information%20needed%20to%20verify%20the%20proof.%20If%20included%2C%20the%20value%20MUST%20be%20a%20string%20that%20maps%20to%20a%20%5BURL%5D.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3126,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 2,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The reason the proof was created (\"proof.proofPurpose\") MUST be specified as a string that maps to a URL.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20reason%20the%20proof%20was%20created%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL';\n      for(const proof of proofs) {\n        proof.should.have.property('proofPurpose');\n        proof.proofPurpose.should.be.a('string');\n        await shouldMapToUrl({\n          doc: {\n            '@context': data['@context'],\n            ...proof\n          },\n          term: 'https://w3id.org/security#proofPurpose',\n          prop: '@id',\n          documentLoader\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "KD39x8W5HyNa6QWjqPKRz",
              "ctx": null,
              "_testId": "urn:uuid:1721244e-bb10-4c95-8656-3b0ff5a4ae7a",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The reason the proof was created (\"proof.proofPurpose\") MUST be specified as a string that maps to a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20reason%20the%20proof%20was%20created%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3127,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that expresses base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The value MUST use a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification to express the binary data.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=A%20string%20value%20that%20expresses%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof%20using%20the%20verificationMethod%20specified.%20The%20value%20MUST%20use%20a%20header%20and%20encoding%20as%20described%20in%20Section%202.4%20Multibase%20of%20the%20Controller%20Documents%201.0%20specification%20to%20express%20the%20binary%20data.';\n      for(const proof of proofs) {\n        should.exist(proof, 'Expected proof to exist.');\n        //FIXME the suite should pass in the expectedPrefix and\n        //encodingName or type\n        const {\n          prefix: expectedPrefix,\n          name: encodingName\n        } = expectedMultibasePrefix(proof.cryptosuite);\n        shouldHaveProofValue({proof, expectedPrefix, encodingName});\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "KD39x8W5HyNa6QWjqPKRz",
              "ctx": null,
              "_testId": "urn:uuid:a82af823-f3c0-41ff-b2e4-35ec15c3a6ca",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "(\"proof.proofValue\") A string value that expresses base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The value MUST use a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification to express the binary data."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=A%20string%20value%20that%20expresses%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof%20using%20the%20verificationMethod%20specified.%20The%20value%20MUST%20use%20a%20header%20and%20encoding%20as%20described%20in%20Section%202.4%20Multibase%20of%20the%20Controller%20Documents%201.0%20specification%20to%20express%20the%20binary%20data.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Cryptographic suite designers MUST use mandatory proof value properties defined in Section 2.1 Proofs, and MAY define other properties specific to their cryptographic suite.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#add-proof:~:text=MUST%20use%20mandatory%20proof%20value%20properties%20defined';\n      for(const proof of proofs) {\n        shouldBeProof({proof});\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "KD39x8W5HyNa6QWjqPKRz",
              "ctx": null,
              "_testId": "urn:uuid:f555ba43-7c7a-44b0-ab7e-84c6ad0354e1",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "Cryptographic suite designers MUST use mandatory proof value properties defined in Section 2.1 Proofs, and MAY define other properties specific to their cryptographic suite."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#add-proof:~:text=MUST%20use%20mandatory%20proof%20value%20properties%20defined",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3133,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      const undefinedType = structuredClone(credential);\n      undefinedType.type.push('InvalidType');\n      await shouldFailIssuance({\n        credential: undefinedType,\n        issuer,\n        reason: 'Expected issuer to error when VC has an undefined type.'\n      });\n      const undefinedTerm = structuredClone(credential);\n      undefinedTerm.credentialSubject.invalidTerm = 'invalidTerm';\n      await shouldFailIssuance({\n        credential: undefinedTerm,\n        issuer,\n        reason: 'Expected issuer to error when VC has an undefined term.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "KD39x8W5HyNa6QWjqPKRz",
              "ctx": null,
              "_testId": "urn:uuid:2a7a97ba-4c13-4641-82e1-7008c113c0e4",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3133,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 192,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the algorithm produces an error, the error MUST be propagated and SHOULD convey the error type.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#dfn-input-document:~:text=If%20the%20algorithm%20produces%20an%20error%2C%20the%20error%20MUST%20be%20propagated%20and%20SHOULD%20convey%20the%20error%20type';\n      const noSubject = structuredClone(credential);\n      delete noSubject.credentialSubject;\n      // FIXME this test should look for a propagated error such as\n      // PROOF_GENERATION_ERROR\n      await shouldFailIssuance({\n        credential: noSubject,\n        issuer,\n        reason: 'Expected issuer to error when VC has no credentialSubject.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "KD39x8W5HyNa6QWjqPKRz",
              "ctx": null,
              "_testId": "urn:uuid:7ba64e56-d382-41ed-8f38-23017996c33c",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the algorithm produces an error, the error MUST be propagated and SHOULD convey the error type."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#dfn-input-document:~:text=If%20the%20algorithm%20produces%20an%20error%2C%20the%20error%20MUST%20be%20propagated%20and%20SHOULD%20convey%20the%20error%20type",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3326,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 244,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n        const hasCryptosuiteName = proofs.some(\n          p => p?.cryptosuite === cryptosuiteName);\n        hasCryptosuiteName.should.equal(\n          true,\n          `Expected at least one proof with cryptosuite ${cryptosuiteName}`);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "KD39x8W5HyNa6QWjqPKRz",
              "ctx": null,
              "_testId": "urn:uuid:218ab50c-13e3-45f1-b0d9-c3d244ea5af0",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3571,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n        const cryptoProp = 'https://w3id.org/security#cryptosuite';\n        const cryptoType = 'https://w3id.org/security#cryptosuiteString';\n        for(const {cryptosuite, type} of proofs) {\n          should.exist(cryptosuite,\n            'Expected property \"proof.cryptosuite\" to exist.');\n          should.exist(type,\n            'Expected property \"proof.type\" to exist.');\n          should.exist(data['@context'],\n            'Expected VC to have property \"@context\".');\n          const expanded = await jsonld.expand({\n            '@context': data['@context'],\n            cryptosuite,\n            type\n          }, {documentLoader});\n          for(const terms of expanded) {\n            const cryptoProperties = terms[cryptoProp];\n            should.exist(cryptoProperties,\n              `Expected property ${cryptoProp} to exist.`);\n            const hasTypeName = cryptoProperties.some(suite =>\n              suite['@type'] === cryptoType &&\n              suite['@value'] == cryptosuiteName);\n            hasTypeName.should.equal(true,\n              `Expected ${cryptoProp} with @value ${cryptosuiteName} & ` +\n              `@type ${cryptoType}`);\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "KD39x8W5HyNa6QWjqPKRz",
              "ctx": null,
              "_testId": "urn:uuid:a3345116-8934-45c8-9a05-93ea305ac2d1",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3571,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"Digital Bazaar\"",
              "body": "function() {\n      this.currentTest.cell = {\n        columnId,\n        rowId: this.currentTest.title\n      };\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "KD39x8W5HyNa6QWjqPKRz",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Digital Bazaar\"",
              "body": "async function() {\n      if(!issuer) {\n        throw new Error(`Expected ${vendorName} to have an issuer.`);\n      }\n      if(!credential) {\n        throw new Error(`Expected a credential to be passed in ` +\n          `received ${credential}`);\n      }\n      data = await createInitialVc({issuer, credential});\n      proofs = Array.isArray(data.proof) ? data.proof : [data.proof];\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "KD39x8W5HyNa6QWjqPKRz",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2657,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 466,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "1Y29bIBmPyjmnY08izIlE",
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
          "_testId": "urn:uuid:a87260f4-8b56-4170-b0a9-e8f4e64c89ab"
        },
        {
          "title": "Grotto Networking",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "When expressing a data integrity proof on an object, a proof property MUST be used.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=When%20expressing%20a%20data%20integrity%20proof%20on%20an%20object%2C%20a%20proof%20property%20MUST%20be%20used';\n      shouldHaveProof({vc: data});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "xWyqxUYMNP57vQPRlo1lD",
              "ctx": null,
              "_testId": "urn:uuid:72070eed-faf4-4378-8bfb-b2ded7e5ba0d",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "When expressing a data integrity proof on an object, a proof property MUST be used."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=When%20expressing%20a%20data%20integrity%20proof%20on%20an%20object%2C%20a%20proof%20property%20MUST%20be%20used",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If present (proof), its value MUST be either a single object, or an unordered set of objects.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=If%20present%2C%20its%20value%20MUST%20be%20either%20a%20single%20object%2C%20or%20an%20unordered%20set%20of%20objects';\n      shouldHaveProof({vc: data});\n      const {proof} = data;\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "xWyqxUYMNP57vQPRlo1lD",
              "ctx": null,
              "_testId": "urn:uuid:dffc5b86-a8f1-487d-9011-e4925e49d774",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If present (proof), its value MUST be either a single object, or an unordered set of objects."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=If%20present%2C%20its%20value%20MUST%20be%20either%20a%20single%20object%2C%20or%20an%20unordered%20set%20of%20objects",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.id\") An optional identifier for the proof, which MUST be a URL.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=An%20optional%20identifier%20for%20the%20proof%2C%20which%20MUST%20be%20a%20URL';\n      for(const proof of proofs) {\n        if(proof.id) {\n          shouldBeUrl({url: proof.id, prop: 'proof.id'});\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "xWyqxUYMNP57vQPRlo1lD",
              "ctx": null,
              "_testId": "urn:uuid:74692f32-e4d2-4f7d-ba0a-3c36e8243d19",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "(\"proof.id\") An optional identifier for the proof, which MUST be a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=An%20optional%20identifier%20for%20the%20proof%2C%20which%20MUST%20be%20a%20URL",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The specific type of proof MUST be specified as a string that maps to a URL.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=The%20specific%20type%20of%20proof%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL';\n      const prop = '@type';\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n        const expanded = await jsonld.expand({\n          '@context': data['@context'],\n          type: proof.type\n        }, {documentLoader});\n        for(const term of expanded) {\n          const types = term[prop];\n          should.exist(types, 'Expected @type to exist.');\n          types.every(url => shouldBeUrl({url, prop}));\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "xWyqxUYMNP57vQPRlo1lD",
              "ctx": null,
              "_testId": "urn:uuid:a0221874-94a8-472a-8add-6b9e7dd0814a",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The specific type of proof MUST be specified as a string that maps to a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=The%20specific%20type%20of%20proof%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3742,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The type property MUST contain the string DataIntegrityProof.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-data-integrity/#contexts-and-vocabularies:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.';\n          for(const proof of proofs) {\n            proof.should.have.property('type');\n            proof.type.should.be.a(\n              'string',\n              'Expected \"proof.type\" to be a string.'\n            );\n            const hasExpectedType = expectedProofTypes.includes(proof.type);\n            hasExpectedType.should.equal(\n              true,\n              `Expected \"proof.type\" to be one of ` +\n              `${expectedProofTypes} Received: ${proof.type}`);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "xWyqxUYMNP57vQPRlo1lD",
              "ctx": null,
              "_testId": "urn:uuid:956f627c-3a6b-4e28-9722-230fac749eb8",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The type property MUST contain the string DataIntegrityProof."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#contexts-and-vocabularies:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3743,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
              "body": "function() {\n          this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.';\n          for(const proof of proofs) {\n            should.exist(proof, 'Expected proof to exist.');\n            if(proof.type === 'DataIntegrityProof') {\n              should.exist(proof.cryptosuite,\n                'Expected proof to have property \"cryptosuite\".');\n            }\n            const {\n              prefix: expectedPrefix,\n              name: encodingName\n            } = expectedMultibasePrefix(proof.cryptosuite);\n            shouldHaveProofValue({proof, expectedPrefix, encodingName});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "xWyqxUYMNP57vQPRlo1lD",
              "ctx": null,
              "_testId": "urn:uuid:69dd7976-d7e9-4e83-ab0d-74179d4a484f",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The proofValue property MUST be used, as specified in 2.1 Proofs."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.';\n      for(const proof of proofs) {\n        if(proof.type && proof.type === 'DataIntegrityProof') {\n          should.exist(\n            proof.cryptosuite,\n            'If the proof type is DataIntegrityProof, cryptosuite MUST ' +\n            'be specified');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "xWyqxUYMNP57vQPRlo1lD",
              "ctx": null,
              "_testId": "urn:uuid:6b241d70-a528-4784-8c9b-a033ad0f3b7a",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If specified (proof.cryptosuite), its value MUST be a string.",
              "body": "function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.';\n        for(const proof of proofs) {\n          if(proof.cryptosuite) {\n            proof.cryptosuite.should.be.a(\n              'string',\n              'cryptosuite value MUST be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "xWyqxUYMNP57vQPRlo1lD",
              "ctx": null,
              "_testId": "urn:uuid:ab7de0c5-0a94-4408-b42f-535e3cf84f22",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If specified (proof.cryptosuite), its value MUST be a string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.",
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "A verification method is the means and information needed to verify the proof. If included, the value MUST be a string that maps to a [URL].",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=A%20verification%20method%20is%20the%20means%20and%20information%20needed%20to%20verify%20the%20proof.%20If%20included%2C%20the%20value%20MUST%20be%20a%20string%20that%20maps%20to%20a%20%5BURL%5D.';\n      for(const proof of proofs) {\n        if(!data || !data?.['@context']) {\n          throw new Error(`Expected ${vendorName} to issue a VC.`);\n        }\n        await shouldMapToUrl({\n          doc: {\n            '@context': data['@context'],\n            ...proof\n          },\n          term: 'https://w3id.org/security#verificationMethod',\n          prop: '@id',\n          documentLoader\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "xWyqxUYMNP57vQPRlo1lD",
              "ctx": null,
              "_testId": "urn:uuid:bf872802-d8b3-4165-a284-78ebc2e6687d",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "A verification method is the means and information needed to verify the proof. If included, the value MUST be a string that maps to a [URL]."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=A%20verification%20method%20is%20the%20means%20and%20information%20needed%20to%20verify%20the%20proof.%20If%20included%2C%20the%20value%20MUST%20be%20a%20string%20that%20maps%20to%20a%20%5BURL%5D.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3744,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The reason the proof was created (\"proof.proofPurpose\") MUST be specified as a string that maps to a URL.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20reason%20the%20proof%20was%20created%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL';\n      for(const proof of proofs) {\n        proof.should.have.property('proofPurpose');\n        proof.proofPurpose.should.be.a('string');\n        await shouldMapToUrl({\n          doc: {\n            '@context': data['@context'],\n            ...proof\n          },\n          term: 'https://w3id.org/security#proofPurpose',\n          prop: '@id',\n          documentLoader\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "xWyqxUYMNP57vQPRlo1lD",
              "ctx": null,
              "_testId": "urn:uuid:4987115c-6e20-41c4-9673-01aed43160e6",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The reason the proof was created (\"proof.proofPurpose\") MUST be specified as a string that maps to a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20reason%20the%20proof%20was%20created%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3745,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that expresses base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The value MUST use a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification to express the binary data.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=A%20string%20value%20that%20expresses%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof%20using%20the%20verificationMethod%20specified.%20The%20value%20MUST%20use%20a%20header%20and%20encoding%20as%20described%20in%20Section%202.4%20Multibase%20of%20the%20Controller%20Documents%201.0%20specification%20to%20express%20the%20binary%20data.';\n      for(const proof of proofs) {\n        should.exist(proof, 'Expected proof to exist.');\n        //FIXME the suite should pass in the expectedPrefix and\n        //encodingName or type\n        const {\n          prefix: expectedPrefix,\n          name: encodingName\n        } = expectedMultibasePrefix(proof.cryptosuite);\n        shouldHaveProofValue({proof, expectedPrefix, encodingName});\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "xWyqxUYMNP57vQPRlo1lD",
              "ctx": null,
              "_testId": "urn:uuid:44f4e3a5-350f-4440-9044-cbcc6ca43073",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "(\"proof.proofValue\") A string value that expresses base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The value MUST use a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification to express the binary data."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=A%20string%20value%20that%20expresses%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof%20using%20the%20verificationMethod%20specified.%20The%20value%20MUST%20use%20a%20header%20and%20encoding%20as%20described%20in%20Section%202.4%20Multibase%20of%20the%20Controller%20Documents%201.0%20specification%20to%20express%20the%20binary%20data.",
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Cryptographic suite designers MUST use mandatory proof value properties defined in Section 2.1 Proofs, and MAY define other properties specific to their cryptographic suite.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#add-proof:~:text=MUST%20use%20mandatory%20proof%20value%20properties%20defined';\n      for(const proof of proofs) {\n        shouldBeProof({proof});\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "xWyqxUYMNP57vQPRlo1lD",
              "ctx": null,
              "_testId": "urn:uuid:12e30bf4-189b-45ec-b584-367ee535522d",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "Cryptographic suite designers MUST use mandatory proof value properties defined in Section 2.1 Proofs, and MAY define other properties specific to their cryptographic suite."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#add-proof:~:text=MUST%20use%20mandatory%20proof%20value%20properties%20defined",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3747,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      const undefinedType = structuredClone(credential);\n      undefinedType.type.push('InvalidType');\n      await shouldFailIssuance({\n        credential: undefinedType,\n        issuer,\n        reason: 'Expected issuer to error when VC has an undefined type.'\n      });\n      const undefinedTerm = structuredClone(credential);\n      undefinedTerm.credentialSubject.invalidTerm = 'invalidTerm';\n      await shouldFailIssuance({\n        credential: undefinedTerm,\n        issuer,\n        reason: 'Expected issuer to error when VC has an undefined term.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "xWyqxUYMNP57vQPRlo1lD",
              "ctx": null,
              "_testId": "urn:uuid:fe14ef11-630b-4941-baf3-3ab3b88ecc97",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3747,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 178,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the algorithm produces an error, the error MUST be propagated and SHOULD convey the error type.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#dfn-input-document:~:text=If%20the%20algorithm%20produces%20an%20error%2C%20the%20error%20MUST%20be%20propagated%20and%20SHOULD%20convey%20the%20error%20type';\n      const noSubject = structuredClone(credential);\n      delete noSubject.credentialSubject;\n      // FIXME this test should look for a propagated error such as\n      // PROOF_GENERATION_ERROR\n      await shouldFailIssuance({\n        credential: noSubject,\n        issuer,\n        reason: 'Expected issuer to error when VC has no credentialSubject.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "xWyqxUYMNP57vQPRlo1lD",
              "ctx": null,
              "_testId": "urn:uuid:6afef002-4a5a-4f3a-b745-73555df94cc3",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If the algorithm produces an error, the error MUST be propagated and SHOULD convey the error type."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#dfn-input-document:~:text=If%20the%20algorithm%20produces%20an%20error%2C%20the%20error%20MUST%20be%20propagated%20and%20SHOULD%20convey%20the%20error%20type",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3926,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 21,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n        const hasCryptosuiteName = proofs.some(\n          p => p?.cryptosuite === cryptosuiteName);\n        hasCryptosuiteName.should.equal(\n          true,\n          `Expected at least one proof with cryptosuite ${cryptosuiteName}`);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "xWyqxUYMNP57vQPRlo1lD",
              "ctx": null,
              "_testId": "urn:uuid:06c6b9d9-1952-481b-8405-0eedd3cd2a66",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3947,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n        const cryptoProp = 'https://w3id.org/security#cryptosuite';\n        const cryptoType = 'https://w3id.org/security#cryptosuiteString';\n        for(const {cryptosuite, type} of proofs) {\n          should.exist(cryptosuite,\n            'Expected property \"proof.cryptosuite\" to exist.');\n          should.exist(type,\n            'Expected property \"proof.type\" to exist.');\n          should.exist(data['@context'],\n            'Expected VC to have property \"@context\".');\n          const expanded = await jsonld.expand({\n            '@context': data['@context'],\n            cryptosuite,\n            type\n          }, {documentLoader});\n          for(const terms of expanded) {\n            const cryptoProperties = terms[cryptoProp];\n            should.exist(cryptoProperties,\n              `Expected property ${cryptoProp} to exist.`);\n            const hasTypeName = cryptoProperties.some(suite =>\n              suite['@type'] === cryptoType &&\n              suite['@value'] == cryptosuiteName);\n            hasTypeName.should.equal(true,\n              `Expected ${cryptoProp} with @value ${cryptosuiteName} & ` +\n              `@type ${cryptoType}`);\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "xWyqxUYMNP57vQPRlo1lD",
              "ctx": null,
              "_testId": "urn:uuid:18879fe4-d460-4d85-a5f7-f218fe49565f",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3947,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"Grotto Networking\"",
              "body": "function() {\n      this.currentTest.cell = {\n        columnId,\n        rowId: this.currentTest.title\n      };\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "xWyqxUYMNP57vQPRlo1lD",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Grotto Networking\"",
              "body": "async function() {\n      if(!issuer) {\n        throw new Error(`Expected ${vendorName} to have an issuer.`);\n      }\n      if(!credential) {\n        throw new Error(`Expected a credential to be passed in ` +\n          `received ${credential}`);\n      }\n      data = await createInitialVc({issuer, credential});\n      proofs = Array.isArray(data.proof) ? data.proof : [data.proof];\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "xWyqxUYMNP57vQPRlo1lD",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3572,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 169,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "1Y29bIBmPyjmnY08izIlE",
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
          "_testId": "urn:uuid:f319daed-e189-472f-bdcd-f5bd05b1f20c"
        },
        {
          "title": "Procivis One Core",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "When expressing a data integrity proof on an object, a proof property MUST be used.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=When%20expressing%20a%20data%20integrity%20proof%20on%20an%20object%2C%20a%20proof%20property%20MUST%20be%20used';\n      shouldHaveProof({vc: data});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "R_Xkw2KPs1LuVc6k_9HoJ",
              "ctx": null,
              "_testId": "urn:uuid:d44358fb-a0cf-49a4-b652-755bac05c948",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "When expressing a data integrity proof on an object, a proof property MUST be used."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=When%20expressing%20a%20data%20integrity%20proof%20on%20an%20object%2C%20a%20proof%20property%20MUST%20be%20used",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If present (proof), its value MUST be either a single object, or an unordered set of objects.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=If%20present%2C%20its%20value%20MUST%20be%20either%20a%20single%20object%2C%20or%20an%20unordered%20set%20of%20objects';\n      shouldHaveProof({vc: data});\n      const {proof} = data;\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "R_Xkw2KPs1LuVc6k_9HoJ",
              "ctx": null,
              "_testId": "urn:uuid:fd55cbd0-fc7d-458f-a240-4683419b0ddb",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "If present (proof), its value MUST be either a single object, or an unordered set of objects."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=If%20present%2C%20its%20value%20MUST%20be%20either%20a%20single%20object%2C%20or%20an%20unordered%20set%20of%20objects",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.id\") An optional identifier for the proof, which MUST be a URL.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=An%20optional%20identifier%20for%20the%20proof%2C%20which%20MUST%20be%20a%20URL';\n      for(const proof of proofs) {\n        if(proof.id) {\n          shouldBeUrl({url: proof.id, prop: 'proof.id'});\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "R_Xkw2KPs1LuVc6k_9HoJ",
              "ctx": null,
              "_testId": "urn:uuid:a2dc6ec1-ebac-41de-ad0f-3583165aff61",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "(\"proof.id\") An optional identifier for the proof, which MUST be a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=An%20optional%20identifier%20for%20the%20proof%2C%20which%20MUST%20be%20a%20URL",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The specific type of proof MUST be specified as a string that maps to a URL.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=The%20specific%20type%20of%20proof%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL';\n      const prop = '@type';\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n        const expanded = await jsonld.expand({\n          '@context': data['@context'],\n          type: proof.type\n        }, {documentLoader});\n        for(const term of expanded) {\n          const types = term[prop];\n          should.exist(types, 'Expected @type to exist.');\n          types.every(url => shouldBeUrl({url, prop}));\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "R_Xkw2KPs1LuVc6k_9HoJ",
              "ctx": null,
              "_testId": "urn:uuid:b5a96bb6-127e-4237-889c-6b5316467abb",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "The specific type of proof MUST be specified as a string that maps to a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=The%20specific%20type%20of%20proof%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5201,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 2,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected \"@type\" URL to be parsed.: expected TypeError: Invalid URL { …(2) } to not exist",
                "showDiff": false,
                "actual": {
                  "code": "ERR_INVALID_URL",
                  "input": "DataIntegrityProof"
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected \"@type\" URL to be parsed.: expected TypeError: Invalid URL { …(2) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at shouldBeUrl (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:198:14)\n    at file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/suites/create.js:82:30\n    at Array.every (<anonymous>)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/suites/create.js:82:17)"
              }
            },
            {
              "type": "test",
              "title": "The type property MUST contain the string DataIntegrityProof.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-data-integrity/#contexts-and-vocabularies:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.';\n          for(const proof of proofs) {\n            proof.should.have.property('type');\n            proof.type.should.be.a(\n              'string',\n              'Expected \"proof.type\" to be a string.'\n            );\n            const hasExpectedType = expectedProofTypes.includes(proof.type);\n            hasExpectedType.should.equal(\n              true,\n              `Expected \"proof.type\" to be one of ` +\n              `${expectedProofTypes} Received: ${proof.type}`);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "R_Xkw2KPs1LuVc6k_9HoJ",
              "ctx": null,
              "_testId": "urn:uuid:f8878394-9b21-4d01-b6f3-3d54acd4714d",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "The type property MUST contain the string DataIntegrityProof."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#contexts-and-vocabularies:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5203,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
              "body": "function() {\n          this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.';\n          for(const proof of proofs) {\n            should.exist(proof, 'Expected proof to exist.');\n            if(proof.type === 'DataIntegrityProof') {\n              should.exist(proof.cryptosuite,\n                'Expected proof to have property \"cryptosuite\".');\n            }\n            const {\n              prefix: expectedPrefix,\n              name: encodingName\n            } = expectedMultibasePrefix(proof.cryptosuite);\n            shouldHaveProofValue({proof, expectedPrefix, encodingName});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "R_Xkw2KPs1LuVc6k_9HoJ",
              "ctx": null,
              "_testId": "urn:uuid:4203a70e-9679-4890-b2ee-543f71fac9a9",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "The proofValue property MUST be used, as specified in 2.1 Proofs."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.';\n      for(const proof of proofs) {\n        if(proof.type && proof.type === 'DataIntegrityProof') {\n          should.exist(\n            proof.cryptosuite,\n            'If the proof type is DataIntegrityProof, cryptosuite MUST ' +\n            'be specified');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "R_Xkw2KPs1LuVc6k_9HoJ",
              "ctx": null,
              "_testId": "urn:uuid:32632dd0-be89-4fc7-98f4-d8135da0db2c",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If specified (proof.cryptosuite), its value MUST be a string.",
              "body": "function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.';\n        for(const proof of proofs) {\n          if(proof.cryptosuite) {\n            proof.cryptosuite.should.be.a(\n              'string',\n              'cryptosuite value MUST be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "R_Xkw2KPs1LuVc6k_9HoJ",
              "ctx": null,
              "_testId": "urn:uuid:2c5ccdf6-f570-410e-84a5-a8db4e90208a",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "If specified (proof.cryptosuite), its value MUST be a string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "A verification method is the means and information needed to verify the proof. If included, the value MUST be a string that maps to a [URL].",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=A%20verification%20method%20is%20the%20means%20and%20information%20needed%20to%20verify%20the%20proof.%20If%20included%2C%20the%20value%20MUST%20be%20a%20string%20that%20maps%20to%20a%20%5BURL%5D.';\n      for(const proof of proofs) {\n        if(!data || !data?.['@context']) {\n          throw new Error(`Expected ${vendorName} to issue a VC.`);\n        }\n        await shouldMapToUrl({\n          doc: {\n            '@context': data['@context'],\n            ...proof\n          },\n          term: 'https://w3id.org/security#verificationMethod',\n          prop: '@id',\n          documentLoader\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "R_Xkw2KPs1LuVc6k_9HoJ",
              "ctx": null,
              "_testId": "urn:uuid:e576002d-00e1-4042-8d09-bc6e2bfa43ac",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "A verification method is the means and information needed to verify the proof. If included, the value MUST be a string that maps to a [URL]."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=A%20verification%20method%20is%20the%20means%20and%20information%20needed%20to%20verify%20the%20proof.%20If%20included%2C%20the%20value%20MUST%20be%20a%20string%20that%20maps%20to%20a%20%5BURL%5D.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5204,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected property \"https://w3id.org/security#verificationMethod\" to exist.: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected property \"https://w3id.org/security#verificationMethod\" to exist.: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at shouldMapToUrl (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:216:12)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/suites/create.js:174:9)"
              }
            },
            {
              "type": "test",
              "title": "The reason the proof was created (\"proof.proofPurpose\") MUST be specified as a string that maps to a URL.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20reason%20the%20proof%20was%20created%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL';\n      for(const proof of proofs) {\n        proof.should.have.property('proofPurpose');\n        proof.proofPurpose.should.be.a('string');\n        await shouldMapToUrl({\n          doc: {\n            '@context': data['@context'],\n            ...proof\n          },\n          term: 'https://w3id.org/security#proofPurpose',\n          prop: '@id',\n          documentLoader\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "R_Xkw2KPs1LuVc6k_9HoJ",
              "ctx": null,
              "_testId": "urn:uuid:ebf10d3e-3551-4406-86b3-cd7de6576d9f",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "The reason the proof was created (\"proof.proofPurpose\") MUST be specified as a string that maps to a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20reason%20the%20proof%20was%20created%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5205,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected property \"https://w3id.org/security#proofPurpose\" to exist.: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected property \"https://w3id.org/security#proofPurpose\" to exist.: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at shouldMapToUrl (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:216:12)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/suites/create.js:191:9)"
              }
            },
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that expresses base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The value MUST use a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification to express the binary data.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=A%20string%20value%20that%20expresses%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof%20using%20the%20verificationMethod%20specified.%20The%20value%20MUST%20use%20a%20header%20and%20encoding%20as%20described%20in%20Section%202.4%20Multibase%20of%20the%20Controller%20Documents%201.0%20specification%20to%20express%20the%20binary%20data.';\n      for(const proof of proofs) {\n        should.exist(proof, 'Expected proof to exist.');\n        //FIXME the suite should pass in the expectedPrefix and\n        //encodingName or type\n        const {\n          prefix: expectedPrefix,\n          name: encodingName\n        } = expectedMultibasePrefix(proof.cryptosuite);\n        shouldHaveProofValue({proof, expectedPrefix, encodingName});\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "R_Xkw2KPs1LuVc6k_9HoJ",
              "ctx": null,
              "_testId": "urn:uuid:fcbc6965-fd21-4a95-bcbf-81dae43a0ac1",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "(\"proof.proofValue\") A string value that expresses base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The value MUST use a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification to express the binary data."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=A%20string%20value%20that%20expresses%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof%20using%20the%20verificationMethod%20specified.%20The%20value%20MUST%20use%20a%20header%20and%20encoding%20as%20described%20in%20Section%202.4%20Multibase%20of%20the%20Controller%20Documents%201.0%20specification%20to%20express%20the%20binary%20data.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Cryptographic suite designers MUST use mandatory proof value properties defined in Section 2.1 Proofs, and MAY define other properties specific to their cryptographic suite.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#add-proof:~:text=MUST%20use%20mandatory%20proof%20value%20properties%20defined';\n      for(const proof of proofs) {\n        shouldBeProof({proof});\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "R_Xkw2KPs1LuVc6k_9HoJ",
              "ctx": null,
              "_testId": "urn:uuid:06b7452f-0338-4633-814e-1f000f228903",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "Cryptographic suite designers MUST use mandatory proof value properties defined in Section 2.1 Proofs, and MAY define other properties specific to their cryptographic suite."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#add-proof:~:text=MUST%20use%20mandatory%20proof%20value%20properties%20defined",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5207,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      const undefinedType = structuredClone(credential);\n      undefinedType.type.push('InvalidType');\n      await shouldFailIssuance({\n        credential: undefinedType,\n        issuer,\n        reason: 'Expected issuer to error when VC has an undefined type.'\n      });\n      const undefinedTerm = structuredClone(credential);\n      undefinedTerm.credentialSubject.invalidTerm = 'invalidTerm';\n      await shouldFailIssuance({\n        credential: undefinedTerm,\n        issuer,\n        reason: 'Expected issuer to error when VC has an undefined term.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "R_Xkw2KPs1LuVc6k_9HoJ",
              "ctx": null,
              "_testId": "urn:uuid:a2eb5879-f51a-4f47-82fe-7ca3c647cbf2",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5207,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1035,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the algorithm produces an error, the error MUST be propagated and SHOULD convey the error type.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#dfn-input-document:~:text=If%20the%20algorithm%20produces%20an%20error%2C%20the%20error%20MUST%20be%20propagated%20and%20SHOULD%20convey%20the%20error%20type';\n      const noSubject = structuredClone(credential);\n      delete noSubject.credentialSubject;\n      // FIXME this test should look for a propagated error such as\n      // PROOF_GENERATION_ERROR\n      await shouldFailIssuance({\n        credential: noSubject,\n        issuer,\n        reason: 'Expected issuer to error when VC has no credentialSubject.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "R_Xkw2KPs1LuVc6k_9HoJ",
              "ctx": null,
              "_testId": "urn:uuid:de017df3-a4f3-44b4-8f6f-3c69de41ad10",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "If the algorithm produces an error, the error MUST be propagated and SHOULD convey the error type."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#dfn-input-document:~:text=If%20the%20algorithm%20produces%20an%20error%2C%20the%20error%20MUST%20be%20propagated%20and%20SHOULD%20convey%20the%20error%20type",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6243,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 271,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n        const hasCryptosuiteName = proofs.some(\n          p => p?.cryptosuite === cryptosuiteName);\n        hasCryptosuiteName.should.equal(\n          true,\n          `Expected at least one proof with cryptosuite ${cryptosuiteName}`);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "R_Xkw2KPs1LuVc6k_9HoJ",
              "ctx": null,
              "_testId": "urn:uuid:64db0f6f-7a57-44b5-bf20-a758b6e53d83",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6515,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n        const cryptoProp = 'https://w3id.org/security#cryptosuite';\n        const cryptoType = 'https://w3id.org/security#cryptosuiteString';\n        for(const {cryptosuite, type} of proofs) {\n          should.exist(cryptosuite,\n            'Expected property \"proof.cryptosuite\" to exist.');\n          should.exist(type,\n            'Expected property \"proof.type\" to exist.');\n          should.exist(data['@context'],\n            'Expected VC to have property \"@context\".');\n          const expanded = await jsonld.expand({\n            '@context': data['@context'],\n            cryptosuite,\n            type\n          }, {documentLoader});\n          for(const terms of expanded) {\n            const cryptoProperties = terms[cryptoProp];\n            should.exist(cryptoProperties,\n              `Expected property ${cryptoProp} to exist.`);\n            const hasTypeName = cryptoProperties.some(suite =>\n              suite['@type'] === cryptoType &&\n              suite['@value'] == cryptosuiteName);\n            hasTypeName.should.equal(true,\n              `Expected ${cryptoProp} with @value ${cryptosuiteName} & ` +\n              `@type ${cryptoType}`);\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "R_Xkw2KPs1LuVc6k_9HoJ",
              "ctx": null,
              "_testId": "urn:uuid:475ab96a-d31f-43aa-a5f4-17f760a86aff",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6515,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected property https://w3id.org/security#cryptosuite to exist.: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected property https://w3id.org/security#cryptosuite to exist.: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/suites/create.js:293:20)"
              }
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"Procivis One Core\"",
              "body": "function() {\n      this.currentTest.cell = {\n        columnId,\n        rowId: this.currentTest.title\n      };\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "R_Xkw2KPs1LuVc6k_9HoJ",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Procivis One Core\"",
              "body": "async function() {\n      if(!issuer) {\n        throw new Error(`Expected ${vendorName} to have an issuer.`);\n      }\n      if(!credential) {\n        throw new Error(`Expected a credential to be passed in ` +\n          `received ${credential}`);\n      }\n      data = await createInitialVc({issuer, credential});\n      proofs = Array.isArray(data.proof) ? data.proof : [data.proof];\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "R_Xkw2KPs1LuVc6k_9HoJ",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3948,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1252,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "1Y29bIBmPyjmnY08izIlE",
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
          "_testId": "urn:uuid:7dfecaed-9c53-441f-84de-2c5764c95fc8"
        },
        {
          "title": "SpruceID",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "When expressing a data integrity proof on an object, a proof property MUST be used.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=When%20expressing%20a%20data%20integrity%20proof%20on%20an%20object%2C%20a%20proof%20property%20MUST%20be%20used';\n      shouldHaveProof({vc: data});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "lOezDY1VoQtL1FXtONFd9",
              "ctx": null,
              "_testId": "urn:uuid:dd90fe22-13b0-4f44-af3e-8cded0ad8c63",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "When expressing a data integrity proof on an object, a proof property MUST be used."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=When%20expressing%20a%20data%20integrity%20proof%20on%20an%20object%2C%20a%20proof%20property%20MUST%20be%20used",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If present (proof), its value MUST be either a single object, or an unordered set of objects.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=If%20present%2C%20its%20value%20MUST%20be%20either%20a%20single%20object%2C%20or%20an%20unordered%20set%20of%20objects';\n      shouldHaveProof({vc: data});\n      const {proof} = data;\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "lOezDY1VoQtL1FXtONFd9",
              "ctx": null,
              "_testId": "urn:uuid:a13238ac-777f-48b8-b839-348c0362c877",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If present (proof), its value MUST be either a single object, or an unordered set of objects."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=If%20present%2C%20its%20value%20MUST%20be%20either%20a%20single%20object%2C%20or%20an%20unordered%20set%20of%20objects",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.id\") An optional identifier for the proof, which MUST be a URL.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=An%20optional%20identifier%20for%20the%20proof%2C%20which%20MUST%20be%20a%20URL';\n      for(const proof of proofs) {\n        if(proof.id) {\n          shouldBeUrl({url: proof.id, prop: 'proof.id'});\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "lOezDY1VoQtL1FXtONFd9",
              "ctx": null,
              "_testId": "urn:uuid:6b2b99ff-76fd-4f37-95f3-68a8afbbcf08",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "(\"proof.id\") An optional identifier for the proof, which MUST be a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=An%20optional%20identifier%20for%20the%20proof%2C%20which%20MUST%20be%20a%20URL",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The specific type of proof MUST be specified as a string that maps to a URL.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=The%20specific%20type%20of%20proof%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL';\n      const prop = '@type';\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n        const expanded = await jsonld.expand({\n          '@context': data['@context'],\n          type: proof.type\n        }, {documentLoader});\n        for(const term of expanded) {\n          const types = term[prop];\n          should.exist(types, 'Expected @type to exist.');\n          types.every(url => shouldBeUrl({url, prop}));\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "lOezDY1VoQtL1FXtONFd9",
              "ctx": null,
              "_testId": "urn:uuid:7c1f7fd5-7aa4-4133-9117-ea1b7d4674a3",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The specific type of proof MUST be specified as a string that maps to a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=The%20specific%20type%20of%20proof%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6944,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The type property MUST contain the string DataIntegrityProof.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-data-integrity/#contexts-and-vocabularies:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.';\n          for(const proof of proofs) {\n            proof.should.have.property('type');\n            proof.type.should.be.a(\n              'string',\n              'Expected \"proof.type\" to be a string.'\n            );\n            const hasExpectedType = expectedProofTypes.includes(proof.type);\n            hasExpectedType.should.equal(\n              true,\n              `Expected \"proof.type\" to be one of ` +\n              `${expectedProofTypes} Received: ${proof.type}`);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "lOezDY1VoQtL1FXtONFd9",
              "ctx": null,
              "_testId": "urn:uuid:c9b0eec2-73ec-4dc5-862d-3d71545afe65",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The type property MUST contain the string DataIntegrityProof."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#contexts-and-vocabularies:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6945,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
              "body": "function() {\n          this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.';\n          for(const proof of proofs) {\n            should.exist(proof, 'Expected proof to exist.');\n            if(proof.type === 'DataIntegrityProof') {\n              should.exist(proof.cryptosuite,\n                'Expected proof to have property \"cryptosuite\".');\n            }\n            const {\n              prefix: expectedPrefix,\n              name: encodingName\n            } = expectedMultibasePrefix(proof.cryptosuite);\n            shouldHaveProofValue({proof, expectedPrefix, encodingName});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "lOezDY1VoQtL1FXtONFd9",
              "ctx": null,
              "_testId": "urn:uuid:cf95f23c-0db3-4157-ae40-77aab229f770",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The proofValue property MUST be used, as specified in 2.1 Proofs."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.';\n      for(const proof of proofs) {\n        if(proof.type && proof.type === 'DataIntegrityProof') {\n          should.exist(\n            proof.cryptosuite,\n            'If the proof type is DataIntegrityProof, cryptosuite MUST ' +\n            'be specified');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "lOezDY1VoQtL1FXtONFd9",
              "ctx": null,
              "_testId": "urn:uuid:54d9a395-cf26-41db-9550-afe6a92f2df4",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If specified (proof.cryptosuite), its value MUST be a string.",
              "body": "function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.';\n        for(const proof of proofs) {\n          if(proof.cryptosuite) {\n            proof.cryptosuite.should.be.a(\n              'string',\n              'cryptosuite value MUST be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "lOezDY1VoQtL1FXtONFd9",
              "ctx": null,
              "_testId": "urn:uuid:0470c106-03b4-4389-9469-6efc18cd44bb",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If specified (proof.cryptosuite), its value MUST be a string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "A verification method is the means and information needed to verify the proof. If included, the value MUST be a string that maps to a [URL].",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=A%20verification%20method%20is%20the%20means%20and%20information%20needed%20to%20verify%20the%20proof.%20If%20included%2C%20the%20value%20MUST%20be%20a%20string%20that%20maps%20to%20a%20%5BURL%5D.';\n      for(const proof of proofs) {\n        if(!data || !data?.['@context']) {\n          throw new Error(`Expected ${vendorName} to issue a VC.`);\n        }\n        await shouldMapToUrl({\n          doc: {\n            '@context': data['@context'],\n            ...proof\n          },\n          term: 'https://w3id.org/security#verificationMethod',\n          prop: '@id',\n          documentLoader\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "lOezDY1VoQtL1FXtONFd9",
              "ctx": null,
              "_testId": "urn:uuid:2b11270f-738c-4846-a24e-4f31a2b567e5",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "A verification method is the means and information needed to verify the proof. If included, the value MUST be a string that maps to a [URL]."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=A%20verification%20method%20is%20the%20means%20and%20information%20needed%20to%20verify%20the%20proof.%20If%20included%2C%20the%20value%20MUST%20be%20a%20string%20that%20maps%20to%20a%20%5BURL%5D.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6946,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The reason the proof was created (\"proof.proofPurpose\") MUST be specified as a string that maps to a URL.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20reason%20the%20proof%20was%20created%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL';\n      for(const proof of proofs) {\n        proof.should.have.property('proofPurpose');\n        proof.proofPurpose.should.be.a('string');\n        await shouldMapToUrl({\n          doc: {\n            '@context': data['@context'],\n            ...proof\n          },\n          term: 'https://w3id.org/security#proofPurpose',\n          prop: '@id',\n          documentLoader\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "lOezDY1VoQtL1FXtONFd9",
              "ctx": null,
              "_testId": "urn:uuid:c5ce0de5-8b28-4fbd-87f6-a19355685091",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The reason the proof was created (\"proof.proofPurpose\") MUST be specified as a string that maps to a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20reason%20the%20proof%20was%20created%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6947,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that expresses base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The value MUST use a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification to express the binary data.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=A%20string%20value%20that%20expresses%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof%20using%20the%20verificationMethod%20specified.%20The%20value%20MUST%20use%20a%20header%20and%20encoding%20as%20described%20in%20Section%202.4%20Multibase%20of%20the%20Controller%20Documents%201.0%20specification%20to%20express%20the%20binary%20data.';\n      for(const proof of proofs) {\n        should.exist(proof, 'Expected proof to exist.');\n        //FIXME the suite should pass in the expectedPrefix and\n        //encodingName or type\n        const {\n          prefix: expectedPrefix,\n          name: encodingName\n        } = expectedMultibasePrefix(proof.cryptosuite);\n        shouldHaveProofValue({proof, expectedPrefix, encodingName});\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "lOezDY1VoQtL1FXtONFd9",
              "ctx": null,
              "_testId": "urn:uuid:4aad04fe-e45e-4ca5-bf11-09087681443a",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "(\"proof.proofValue\") A string value that expresses base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The value MUST use a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification to express the binary data."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=A%20string%20value%20that%20expresses%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof%20using%20the%20verificationMethod%20specified.%20The%20value%20MUST%20use%20a%20header%20and%20encoding%20as%20described%20in%20Section%202.4%20Multibase%20of%20the%20Controller%20Documents%201.0%20specification%20to%20express%20the%20binary%20data.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Cryptographic suite designers MUST use mandatory proof value properties defined in Section 2.1 Proofs, and MAY define other properties specific to their cryptographic suite.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#add-proof:~:text=MUST%20use%20mandatory%20proof%20value%20properties%20defined';\n      for(const proof of proofs) {\n        shouldBeProof({proof});\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "lOezDY1VoQtL1FXtONFd9",
              "ctx": null,
              "_testId": "urn:uuid:5d1d8f3a-666d-4097-b5ba-38eda72a6a99",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "Cryptographic suite designers MUST use mandatory proof value properties defined in Section 2.1 Proofs, and MAY define other properties specific to their cryptographic suite."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#add-proof:~:text=MUST%20use%20mandatory%20proof%20value%20properties%20defined",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6948,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      const undefinedType = structuredClone(credential);\n      undefinedType.type.push('InvalidType');\n      await shouldFailIssuance({\n        credential: undefinedType,\n        issuer,\n        reason: 'Expected issuer to error when VC has an undefined type.'\n      });\n      const undefinedTerm = structuredClone(credential);\n      undefinedTerm.credentialSubject.invalidTerm = 'invalidTerm';\n      await shouldFailIssuance({\n        credential: undefinedTerm,\n        issuer,\n        reason: 'Expected issuer to error when VC has an undefined term.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "lOezDY1VoQtL1FXtONFd9",
              "ctx": null,
              "_testId": "urn:uuid:d916c568-1a45-4e77-9f84-92b68b928432",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6949,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 514,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the algorithm produces an error, the error MUST be propagated and SHOULD convey the error type.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#dfn-input-document:~:text=If%20the%20algorithm%20produces%20an%20error%2C%20the%20error%20MUST%20be%20propagated%20and%20SHOULD%20convey%20the%20error%20type';\n      const noSubject = structuredClone(credential);\n      delete noSubject.credentialSubject;\n      // FIXME this test should look for a propagated error such as\n      // PROOF_GENERATION_ERROR\n      await shouldFailIssuance({\n        credential: noSubject,\n        issuer,\n        reason: 'Expected issuer to error when VC has no credentialSubject.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "lOezDY1VoQtL1FXtONFd9",
              "ctx": null,
              "_testId": "urn:uuid:2f94bbfd-5d8e-4ec8-9dfa-46d27b8a3dc8",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If the algorithm produces an error, the error MUST be propagated and SHOULD convey the error type."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#dfn-input-document:~:text=If%20the%20algorithm%20produces%20an%20error%2C%20the%20error%20MUST%20be%20propagated%20and%20SHOULD%20convey%20the%20error%20type",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7463,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 119,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n        const hasCryptosuiteName = proofs.some(\n          p => p?.cryptosuite === cryptosuiteName);\n        hasCryptosuiteName.should.equal(\n          true,\n          `Expected at least one proof with cryptosuite ${cryptosuiteName}`);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "lOezDY1VoQtL1FXtONFd9",
              "ctx": null,
              "_testId": "urn:uuid:22ca6583-63fc-4bbc-af30-649f594c3b48",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7582,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n        const cryptoProp = 'https://w3id.org/security#cryptosuite';\n        const cryptoType = 'https://w3id.org/security#cryptosuiteString';\n        for(const {cryptosuite, type} of proofs) {\n          should.exist(cryptosuite,\n            'Expected property \"proof.cryptosuite\" to exist.');\n          should.exist(type,\n            'Expected property \"proof.type\" to exist.');\n          should.exist(data['@context'],\n            'Expected VC to have property \"@context\".');\n          const expanded = await jsonld.expand({\n            '@context': data['@context'],\n            cryptosuite,\n            type\n          }, {documentLoader});\n          for(const terms of expanded) {\n            const cryptoProperties = terms[cryptoProp];\n            should.exist(cryptoProperties,\n              `Expected property ${cryptoProp} to exist.`);\n            const hasTypeName = cryptoProperties.some(suite =>\n              suite['@type'] === cryptoType &&\n              suite['@value'] == cryptosuiteName);\n            hasTypeName.should.equal(true,\n              `Expected ${cryptoProp} with @value ${cryptosuiteName} & ` +\n              `@type ${cryptoType}`);\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "lOezDY1VoQtL1FXtONFd9",
              "ctx": null,
              "_testId": "urn:uuid:f23c6af5-7dfe-4bc9-8ce0-857acf027e7c",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7583,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"SpruceID\"",
              "body": "function() {\n      this.currentTest.cell = {\n        columnId,\n        rowId: this.currentTest.title\n      };\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "lOezDY1VoQtL1FXtONFd9",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"SpruceID\"",
              "body": "async function() {\n      if(!issuer) {\n        throw new Error(`Expected ${vendorName} to have an issuer.`);\n      }\n      if(!credential) {\n        throw new Error(`Expected a credential to be passed in ` +\n          `received ${credential}`);\n      }\n      data = await createInitialVc({issuer, credential});\n      proofs = Array.isArray(data.proof) ? data.proof : [data.proof];\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "lOezDY1VoQtL1FXtONFd9",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6516,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 427,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "1Y29bIBmPyjmnY08izIlE",
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
          "_testId": "urn:uuid:f13d83a2-4105-47d3-bd1b-a6eef76155b4"
        },
        {
          "title": "Trential",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "When expressing a data integrity proof on an object, a proof property MUST be used.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=When%20expressing%20a%20data%20integrity%20proof%20on%20an%20object%2C%20a%20proof%20property%20MUST%20be%20used';\n      shouldHaveProof({vc: data});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "ITYGDAwZUr2tdgN6cZVg4",
              "ctx": null,
              "_testId": "urn:uuid:5e0f8e40-9e30-42dd-995a-8abf8d6121f0",
              "cell": {
                "columnId": "Trential",
                "rowId": "When expressing a data integrity proof on an object, a proof property MUST be used."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=When%20expressing%20a%20data%20integrity%20proof%20on%20an%20object%2C%20a%20proof%20property%20MUST%20be%20used",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If present (proof), its value MUST be either a single object, or an unordered set of objects.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=If%20present%2C%20its%20value%20MUST%20be%20either%20a%20single%20object%2C%20or%20an%20unordered%20set%20of%20objects';\n      shouldHaveProof({vc: data});\n      const {proof} = data;\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "ITYGDAwZUr2tdgN6cZVg4",
              "ctx": null,
              "_testId": "urn:uuid:797df1e0-2ed0-4b09-ace6-6a2870e763fb",
              "cell": {
                "columnId": "Trential",
                "rowId": "If present (proof), its value MUST be either a single object, or an unordered set of objects."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=If%20present%2C%20its%20value%20MUST%20be%20either%20a%20single%20object%2C%20or%20an%20unordered%20set%20of%20objects",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.id\") An optional identifier for the proof, which MUST be a URL.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=An%20optional%20identifier%20for%20the%20proof%2C%20which%20MUST%20be%20a%20URL';\n      for(const proof of proofs) {\n        if(proof.id) {\n          shouldBeUrl({url: proof.id, prop: 'proof.id'});\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "ITYGDAwZUr2tdgN6cZVg4",
              "ctx": null,
              "_testId": "urn:uuid:373ee6ef-c573-4acc-9a07-04cbb49bb08a",
              "cell": {
                "columnId": "Trential",
                "rowId": "(\"proof.id\") An optional identifier for the proof, which MUST be a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=An%20optional%20identifier%20for%20the%20proof%2C%20which%20MUST%20be%20a%20URL",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The specific type of proof MUST be specified as a string that maps to a URL.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=The%20specific%20type%20of%20proof%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL';\n      const prop = '@type';\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n        const expanded = await jsonld.expand({\n          '@context': data['@context'],\n          type: proof.type\n        }, {documentLoader});\n        for(const term of expanded) {\n          const types = term[prop];\n          should.exist(types, 'Expected @type to exist.');\n          types.every(url => shouldBeUrl({url, prop}));\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "ITYGDAwZUr2tdgN6cZVg4",
              "ctx": null,
              "_testId": "urn:uuid:5e2cda30-734b-4bd8-9c29-9ddc71d45a24",
              "cell": {
                "columnId": "Trential",
                "rowId": "The specific type of proof MUST be specified as a string that maps to a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=The%20specific%20type%20of%20proof%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9440,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The type property MUST contain the string DataIntegrityProof.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-data-integrity/#contexts-and-vocabularies:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.';\n          for(const proof of proofs) {\n            proof.should.have.property('type');\n            proof.type.should.be.a(\n              'string',\n              'Expected \"proof.type\" to be a string.'\n            );\n            const hasExpectedType = expectedProofTypes.includes(proof.type);\n            hasExpectedType.should.equal(\n              true,\n              `Expected \"proof.type\" to be one of ` +\n              `${expectedProofTypes} Received: ${proof.type}`);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "ITYGDAwZUr2tdgN6cZVg4",
              "ctx": null,
              "_testId": "urn:uuid:4bd914b1-2578-48ec-b909-f2d9a68b5ce9",
              "cell": {
                "columnId": "Trential",
                "rowId": "The type property MUST contain the string DataIntegrityProof."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#contexts-and-vocabularies:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9441,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
              "body": "function() {\n          this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.';\n          for(const proof of proofs) {\n            should.exist(proof, 'Expected proof to exist.');\n            if(proof.type === 'DataIntegrityProof') {\n              should.exist(proof.cryptosuite,\n                'Expected proof to have property \"cryptosuite\".');\n            }\n            const {\n              prefix: expectedPrefix,\n              name: encodingName\n            } = expectedMultibasePrefix(proof.cryptosuite);\n            shouldHaveProofValue({proof, expectedPrefix, encodingName});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "ITYGDAwZUr2tdgN6cZVg4",
              "ctx": null,
              "_testId": "urn:uuid:40489098-1dac-4d54-9410-2b90d5ff87bc",
              "cell": {
                "columnId": "Trential",
                "rowId": "The proofValue property MUST be used, as specified in 2.1 Proofs."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.';\n      for(const proof of proofs) {\n        if(proof.type && proof.type === 'DataIntegrityProof') {\n          should.exist(\n            proof.cryptosuite,\n            'If the proof type is DataIntegrityProof, cryptosuite MUST ' +\n            'be specified');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "ITYGDAwZUr2tdgN6cZVg4",
              "ctx": null,
              "_testId": "urn:uuid:3a039e53-ddd0-4439-95bc-c289b4717646",
              "cell": {
                "columnId": "Trential",
                "rowId": "If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If specified (proof.cryptosuite), its value MUST be a string.",
              "body": "function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.';\n        for(const proof of proofs) {\n          if(proof.cryptosuite) {\n            proof.cryptosuite.should.be.a(\n              'string',\n              'cryptosuite value MUST be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "ITYGDAwZUr2tdgN6cZVg4",
              "ctx": null,
              "_testId": "urn:uuid:bf538e7e-5d2f-4e22-a335-f396a3cc47bd",
              "cell": {
                "columnId": "Trential",
                "rowId": "If specified (proof.cryptosuite), its value MUST be a string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "A verification method is the means and information needed to verify the proof. If included, the value MUST be a string that maps to a [URL].",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=A%20verification%20method%20is%20the%20means%20and%20information%20needed%20to%20verify%20the%20proof.%20If%20included%2C%20the%20value%20MUST%20be%20a%20string%20that%20maps%20to%20a%20%5BURL%5D.';\n      for(const proof of proofs) {\n        if(!data || !data?.['@context']) {\n          throw new Error(`Expected ${vendorName} to issue a VC.`);\n        }\n        await shouldMapToUrl({\n          doc: {\n            '@context': data['@context'],\n            ...proof\n          },\n          term: 'https://w3id.org/security#verificationMethod',\n          prop: '@id',\n          documentLoader\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "ITYGDAwZUr2tdgN6cZVg4",
              "ctx": null,
              "_testId": "urn:uuid:0dfab051-097b-48a6-a98c-4609eaf05c61",
              "cell": {
                "columnId": "Trential",
                "rowId": "A verification method is the means and information needed to verify the proof. If included, the value MUST be a string that maps to a [URL]."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=A%20verification%20method%20is%20the%20means%20and%20information%20needed%20to%20verify%20the%20proof.%20If%20included%2C%20the%20value%20MUST%20be%20a%20string%20that%20maps%20to%20a%20%5BURL%5D.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9442,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The reason the proof was created (\"proof.proofPurpose\") MUST be specified as a string that maps to a URL.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20reason%20the%20proof%20was%20created%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL';\n      for(const proof of proofs) {\n        proof.should.have.property('proofPurpose');\n        proof.proofPurpose.should.be.a('string');\n        await shouldMapToUrl({\n          doc: {\n            '@context': data['@context'],\n            ...proof\n          },\n          term: 'https://w3id.org/security#proofPurpose',\n          prop: '@id',\n          documentLoader\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "ITYGDAwZUr2tdgN6cZVg4",
              "ctx": null,
              "_testId": "urn:uuid:c675f44d-541c-4666-a1fe-176e248248d9",
              "cell": {
                "columnId": "Trential",
                "rowId": "The reason the proof was created (\"proof.proofPurpose\") MUST be specified as a string that maps to a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20reason%20the%20proof%20was%20created%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9444,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that expresses base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The value MUST use a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification to express the binary data.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=A%20string%20value%20that%20expresses%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof%20using%20the%20verificationMethod%20specified.%20The%20value%20MUST%20use%20a%20header%20and%20encoding%20as%20described%20in%20Section%202.4%20Multibase%20of%20the%20Controller%20Documents%201.0%20specification%20to%20express%20the%20binary%20data.';\n      for(const proof of proofs) {\n        should.exist(proof, 'Expected proof to exist.');\n        //FIXME the suite should pass in the expectedPrefix and\n        //encodingName or type\n        const {\n          prefix: expectedPrefix,\n          name: encodingName\n        } = expectedMultibasePrefix(proof.cryptosuite);\n        shouldHaveProofValue({proof, expectedPrefix, encodingName});\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "ITYGDAwZUr2tdgN6cZVg4",
              "ctx": null,
              "_testId": "urn:uuid:23432841-1756-4f3b-bc77-2fde7787761c",
              "cell": {
                "columnId": "Trential",
                "rowId": "(\"proof.proofValue\") A string value that expresses base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The value MUST use a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification to express the binary data."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=A%20string%20value%20that%20expresses%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof%20using%20the%20verificationMethod%20specified.%20The%20value%20MUST%20use%20a%20header%20and%20encoding%20as%20described%20in%20Section%202.4%20Multibase%20of%20the%20Controller%20Documents%201.0%20specification%20to%20express%20the%20binary%20data.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Cryptographic suite designers MUST use mandatory proof value properties defined in Section 2.1 Proofs, and MAY define other properties specific to their cryptographic suite.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#add-proof:~:text=MUST%20use%20mandatory%20proof%20value%20properties%20defined';\n      for(const proof of proofs) {\n        shouldBeProof({proof});\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "ITYGDAwZUr2tdgN6cZVg4",
              "ctx": null,
              "_testId": "urn:uuid:1e77112e-a8eb-4027-a2df-ef33aea5875e",
              "cell": {
                "columnId": "Trential",
                "rowId": "Cryptographic suite designers MUST use mandatory proof value properties defined in Section 2.1 Proofs, and MAY define other properties specific to their cryptographic suite."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#add-proof:~:text=MUST%20use%20mandatory%20proof%20value%20properties%20defined",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9446,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      const undefinedType = structuredClone(credential);\n      undefinedType.type.push('InvalidType');\n      await shouldFailIssuance({\n        credential: undefinedType,\n        issuer,\n        reason: 'Expected issuer to error when VC has an undefined type.'\n      });\n      const undefinedTerm = structuredClone(credential);\n      undefinedTerm.credentialSubject.invalidTerm = 'invalidTerm';\n      await shouldFailIssuance({\n        credential: undefinedTerm,\n        issuer,\n        reason: 'Expected issuer to error when VC has an undefined term.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "ITYGDAwZUr2tdgN6cZVg4",
              "ctx": null,
              "_testId": "urn:uuid:37d89542-9b4f-41fd-a908-f6b8812b5bd0",
              "cell": {
                "columnId": "Trential",
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9446,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1346,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the algorithm produces an error, the error MUST be propagated and SHOULD convey the error type.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#dfn-input-document:~:text=If%20the%20algorithm%20produces%20an%20error%2C%20the%20error%20MUST%20be%20propagated%20and%20SHOULD%20convey%20the%20error%20type';\n      const noSubject = structuredClone(credential);\n      delete noSubject.credentialSubject;\n      // FIXME this test should look for a propagated error such as\n      // PROOF_GENERATION_ERROR\n      await shouldFailIssuance({\n        credential: noSubject,\n        issuer,\n        reason: 'Expected issuer to error when VC has no credentialSubject.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "ITYGDAwZUr2tdgN6cZVg4",
              "ctx": null,
              "_testId": "urn:uuid:d884e34d-5d2b-4165-90c8-a952e6d2c3e1",
              "cell": {
                "columnId": "Trential",
                "rowId": "If the algorithm produces an error, the error MUST be propagated and SHOULD convey the error type."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#dfn-input-document:~:text=If%20the%20algorithm%20produces%20an%20error%2C%20the%20error%20MUST%20be%20propagated%20and%20SHOULD%20convey%20the%20error%20type",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 10793,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 244,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n        const hasCryptosuiteName = proofs.some(\n          p => p?.cryptosuite === cryptosuiteName);\n        hasCryptosuiteName.should.equal(\n          true,\n          `Expected at least one proof with cryptosuite ${cryptosuiteName}`);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "ITYGDAwZUr2tdgN6cZVg4",
              "ctx": null,
              "_testId": "urn:uuid:0d0d7752-fd8a-4530-b98e-1a1227780568",
              "cell": {
                "columnId": "Trential",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 11036,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n        const cryptoProp = 'https://w3id.org/security#cryptosuite';\n        const cryptoType = 'https://w3id.org/security#cryptosuiteString';\n        for(const {cryptosuite, type} of proofs) {\n          should.exist(cryptosuite,\n            'Expected property \"proof.cryptosuite\" to exist.');\n          should.exist(type,\n            'Expected property \"proof.type\" to exist.');\n          should.exist(data['@context'],\n            'Expected VC to have property \"@context\".');\n          const expanded = await jsonld.expand({\n            '@context': data['@context'],\n            cryptosuite,\n            type\n          }, {documentLoader});\n          for(const terms of expanded) {\n            const cryptoProperties = terms[cryptoProp];\n            should.exist(cryptoProperties,\n              `Expected property ${cryptoProp} to exist.`);\n            const hasTypeName = cryptoProperties.some(suite =>\n              suite['@type'] === cryptoType &&\n              suite['@value'] == cryptosuiteName);\n            hasTypeName.should.equal(true,\n              `Expected ${cryptoProp} with @value ${cryptosuiteName} & ` +\n              `@type ${cryptoType}`);\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "ITYGDAwZUr2tdgN6cZVg4",
              "ctx": null,
              "_testId": "urn:uuid:72fc2407-d781-4974-8520-85a9548d6936",
              "cell": {
                "columnId": "Trential",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 11036,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"Trential\"",
              "body": "function() {\n      this.currentTest.cell = {\n        columnId,\n        rowId: this.currentTest.title\n      };\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "ITYGDAwZUr2tdgN6cZVg4",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Trential\"",
              "body": "async function() {\n      if(!issuer) {\n        throw new Error(`Expected ${vendorName} to have an issuer.`);\n      }\n      if(!credential) {\n        throw new Error(`Expected a credential to be passed in ` +\n          `received ${credential}`);\n      }\n      data = await createInitialVc({issuer, credential});\n      proofs = Array.isArray(data.proof) ? data.proof : [data.proof];\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "ITYGDAwZUr2tdgN6cZVg4",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7584,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1855,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "1Y29bIBmPyjmnY08izIlE",
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
          "_testId": "urn:uuid:0b3d1545-e31d-45a5-98b2-9a02b07779e8"
        },
        {
          "title": "Trinsic",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "When expressing a data integrity proof on an object, a proof property MUST be used.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=When%20expressing%20a%20data%20integrity%20proof%20on%20an%20object%2C%20a%20proof%20property%20MUST%20be%20used';\n      shouldHaveProof({vc: data});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "ZDqBhGRm_WX-GBqUWfUCu",
              "ctx": null
            },
            {
              "type": "test",
              "title": "If present (proof), its value MUST be either a single object, or an unordered set of objects.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=If%20present%2C%20its%20value%20MUST%20be%20either%20a%20single%20object%2C%20or%20an%20unordered%20set%20of%20objects';\n      shouldHaveProof({vc: data});\n      const {proof} = data;\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "ZDqBhGRm_WX-GBqUWfUCu",
              "ctx": null
            },
            {
              "type": "test",
              "title": "(\"proof.id\") An optional identifier for the proof, which MUST be a URL.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=An%20optional%20identifier%20for%20the%20proof%2C%20which%20MUST%20be%20a%20URL';\n      for(const proof of proofs) {\n        if(proof.id) {\n          shouldBeUrl({url: proof.id, prop: 'proof.id'});\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "ZDqBhGRm_WX-GBqUWfUCu",
              "ctx": null
            },
            {
              "type": "test",
              "title": "The specific type of proof MUST be specified as a string that maps to a URL.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=The%20specific%20type%20of%20proof%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL';\n      const prop = '@type';\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n        const expanded = await jsonld.expand({\n          '@context': data['@context'],\n          type: proof.type\n        }, {documentLoader});\n        for(const term of expanded) {\n          const types = term[prop];\n          should.exist(types, 'Expected @type to exist.');\n          types.every(url => shouldBeUrl({url, prop}));\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "ZDqBhGRm_WX-GBqUWfUCu",
              "ctx": null
            },
            {
              "type": "test",
              "title": "The type property MUST contain the string DataIntegrityProof.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-data-integrity/#contexts-and-vocabularies:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.';\n          for(const proof of proofs) {\n            proof.should.have.property('type');\n            proof.type.should.be.a(\n              'string',\n              'Expected \"proof.type\" to be a string.'\n            );\n            const hasExpectedType = expectedProofTypes.includes(proof.type);\n            hasExpectedType.should.equal(\n              true,\n              `Expected \"proof.type\" to be one of ` +\n              `${expectedProofTypes} Received: ${proof.type}`);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "ZDqBhGRm_WX-GBqUWfUCu",
              "ctx": null
            },
            {
              "type": "test",
              "title": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
              "body": "function() {\n          this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.';\n          for(const proof of proofs) {\n            should.exist(proof, 'Expected proof to exist.');\n            if(proof.type === 'DataIntegrityProof') {\n              should.exist(proof.cryptosuite,\n                'Expected proof to have property \"cryptosuite\".');\n            }\n            const {\n              prefix: expectedPrefix,\n              name: encodingName\n            } = expectedMultibasePrefix(proof.cryptosuite);\n            shouldHaveProofValue({proof, expectedPrefix, encodingName});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "ZDqBhGRm_WX-GBqUWfUCu",
              "ctx": null
            },
            {
              "type": "test",
              "title": "If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.';\n      for(const proof of proofs) {\n        if(proof.type && proof.type === 'DataIntegrityProof') {\n          should.exist(\n            proof.cryptosuite,\n            'If the proof type is DataIntegrityProof, cryptosuite MUST ' +\n            'be specified');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "ZDqBhGRm_WX-GBqUWfUCu",
              "ctx": null
            },
            {
              "type": "test",
              "title": "If specified (proof.cryptosuite), its value MUST be a string.",
              "body": "function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.';\n        for(const proof of proofs) {\n          if(proof.cryptosuite) {\n            proof.cryptosuite.should.be.a(\n              'string',\n              'cryptosuite value MUST be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "ZDqBhGRm_WX-GBqUWfUCu",
              "ctx": null
            },
            {
              "type": "test",
              "title": "A verification method is the means and information needed to verify the proof. If included, the value MUST be a string that maps to a [URL].",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=A%20verification%20method%20is%20the%20means%20and%20information%20needed%20to%20verify%20the%20proof.%20If%20included%2C%20the%20value%20MUST%20be%20a%20string%20that%20maps%20to%20a%20%5BURL%5D.';\n      for(const proof of proofs) {\n        if(!data || !data?.['@context']) {\n          throw new Error(`Expected ${vendorName} to issue a VC.`);\n        }\n        await shouldMapToUrl({\n          doc: {\n            '@context': data['@context'],\n            ...proof\n          },\n          term: 'https://w3id.org/security#verificationMethod',\n          prop: '@id',\n          documentLoader\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "ZDqBhGRm_WX-GBqUWfUCu",
              "ctx": null
            },
            {
              "type": "test",
              "title": "The reason the proof was created (\"proof.proofPurpose\") MUST be specified as a string that maps to a URL.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20reason%20the%20proof%20was%20created%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL';\n      for(const proof of proofs) {\n        proof.should.have.property('proofPurpose');\n        proof.proofPurpose.should.be.a('string');\n        await shouldMapToUrl({\n          doc: {\n            '@context': data['@context'],\n            ...proof\n          },\n          term: 'https://w3id.org/security#proofPurpose',\n          prop: '@id',\n          documentLoader\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "ZDqBhGRm_WX-GBqUWfUCu",
              "ctx": null
            },
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that expresses base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The value MUST use a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification to express the binary data.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=A%20string%20value%20that%20expresses%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof%20using%20the%20verificationMethod%20specified.%20The%20value%20MUST%20use%20a%20header%20and%20encoding%20as%20described%20in%20Section%202.4%20Multibase%20of%20the%20Controller%20Documents%201.0%20specification%20to%20express%20the%20binary%20data.';\n      for(const proof of proofs) {\n        should.exist(proof, 'Expected proof to exist.');\n        //FIXME the suite should pass in the expectedPrefix and\n        //encodingName or type\n        const {\n          prefix: expectedPrefix,\n          name: encodingName\n        } = expectedMultibasePrefix(proof.cryptosuite);\n        shouldHaveProofValue({proof, expectedPrefix, encodingName});\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "ZDqBhGRm_WX-GBqUWfUCu",
              "ctx": null
            },
            {
              "type": "test",
              "title": "Cryptographic suite designers MUST use mandatory proof value properties defined in Section 2.1 Proofs, and MAY define other properties specific to their cryptographic suite.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#add-proof:~:text=MUST%20use%20mandatory%20proof%20value%20properties%20defined';\n      for(const proof of proofs) {\n        shouldBeProof({proof});\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "ZDqBhGRm_WX-GBqUWfUCu",
              "ctx": null
            },
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      const undefinedType = structuredClone(credential);\n      undefinedType.type.push('InvalidType');\n      await shouldFailIssuance({\n        credential: undefinedType,\n        issuer,\n        reason: 'Expected issuer to error when VC has an undefined type.'\n      });\n      const undefinedTerm = structuredClone(credential);\n      undefinedTerm.credentialSubject.invalidTerm = 'invalidTerm';\n      await shouldFailIssuance({\n        credential: undefinedTerm,\n        issuer,\n        reason: 'Expected issuer to error when VC has an undefined term.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "ZDqBhGRm_WX-GBqUWfUCu",
              "ctx": null
            },
            {
              "type": "test",
              "title": "If the algorithm produces an error, the error MUST be propagated and SHOULD convey the error type.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#dfn-input-document:~:text=If%20the%20algorithm%20produces%20an%20error%2C%20the%20error%20MUST%20be%20propagated%20and%20SHOULD%20convey%20the%20error%20type';\n      const noSubject = structuredClone(credential);\n      delete noSubject.credentialSubject;\n      // FIXME this test should look for a propagated error such as\n      // PROOF_GENERATION_ERROR\n      await shouldFailIssuance({\n        credential: noSubject,\n        issuer,\n        reason: 'Expected issuer to error when VC has no credentialSubject.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "ZDqBhGRm_WX-GBqUWfUCu",
              "ctx": null
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n        const hasCryptosuiteName = proofs.some(\n          p => p?.cryptosuite === cryptosuiteName);\n        hasCryptosuiteName.should.equal(\n          true,\n          `Expected at least one proof with cryptosuite ${cryptosuiteName}`);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "ZDqBhGRm_WX-GBqUWfUCu",
              "ctx": null
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n        const cryptoProp = 'https://w3id.org/security#cryptosuite';\n        const cryptoType = 'https://w3id.org/security#cryptosuiteString';\n        for(const {cryptosuite, type} of proofs) {\n          should.exist(cryptosuite,\n            'Expected property \"proof.cryptosuite\" to exist.');\n          should.exist(type,\n            'Expected property \"proof.type\" to exist.');\n          should.exist(data['@context'],\n            'Expected VC to have property \"@context\".');\n          const expanded = await jsonld.expand({\n            '@context': data['@context'],\n            cryptosuite,\n            type\n          }, {documentLoader});\n          for(const terms of expanded) {\n            const cryptoProperties = terms[cryptoProp];\n            should.exist(cryptoProperties,\n              `Expected property ${cryptoProp} to exist.`);\n            const hasTypeName = cryptoProperties.some(suite =>\n              suite['@type'] === cryptoType &&\n              suite['@value'] == cryptosuiteName);\n            hasTypeName.should.equal(true,\n              `Expected ${cryptoProp} with @value ${cryptosuiteName} & ` +\n              `@type ${cryptoType}`);\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "ZDqBhGRm_WX-GBqUWfUCu",
              "ctx": null
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook",
              "body": "function() {\n      this.currentTest.cell = {\n        columnId,\n        rowId: this.currentTest.title\n      };\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "ZDqBhGRm_WX-GBqUWfUCu",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js"
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook for \"When expressing a data integrity proof on an object, a proof property MUST be used.\"",
              "body": "async function() {\n      if(!issuer) {\n        throw new Error(`Expected ${vendorName} to have an issuer.`);\n      }\n      if(!credential) {\n        throw new Error(`Expected a credential to be passed in ` +\n          `received ${credential}`);\n      }\n      data = await createInitialVc({issuer, credential});\n      proofs = Array.isArray(data.proof) ? data.proof : [data.proof];\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "ZDqBhGRm_WX-GBqUWfUCu",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 11038,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 441,
              "_error": null,
              "state": "failed",
              "err": {}
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "1Y29bIBmPyjmnY08izIlE",
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
          "_testId": "urn:uuid:db1c00c5-88ae-4e27-8a77-c71417e18529"
        },
        {
          "title": "bovine",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "When expressing a data integrity proof on an object, a proof property MUST be used.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=When%20expressing%20a%20data%20integrity%20proof%20on%20an%20object%2C%20a%20proof%20property%20MUST%20be%20used';\n      shouldHaveProof({vc: data});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "iAuZinUgxmMzzxejDSMww",
              "ctx": null,
              "_testId": "urn:uuid:64c7834c-3e49-44af-ace2-f10d71052c40",
              "cell": {
                "columnId": "bovine",
                "rowId": "When expressing a data integrity proof on an object, a proof property MUST be used."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=When%20expressing%20a%20data%20integrity%20proof%20on%20an%20object%2C%20a%20proof%20property%20MUST%20be%20used",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If present (proof), its value MUST be either a single object, or an unordered set of objects.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=If%20present%2C%20its%20value%20MUST%20be%20either%20a%20single%20object%2C%20or%20an%20unordered%20set%20of%20objects';\n      shouldHaveProof({vc: data});\n      const {proof} = data;\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "iAuZinUgxmMzzxejDSMww",
              "ctx": null,
              "_testId": "urn:uuid:3b90187f-c724-4886-94d2-b733eb49e71c",
              "cell": {
                "columnId": "bovine",
                "rowId": "If present (proof), its value MUST be either a single object, or an unordered set of objects."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=If%20present%2C%20its%20value%20MUST%20be%20either%20a%20single%20object%2C%20or%20an%20unordered%20set%20of%20objects",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.id\") An optional identifier for the proof, which MUST be a URL.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=An%20optional%20identifier%20for%20the%20proof%2C%20which%20MUST%20be%20a%20URL';\n      for(const proof of proofs) {\n        if(proof.id) {\n          shouldBeUrl({url: proof.id, prop: 'proof.id'});\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "iAuZinUgxmMzzxejDSMww",
              "ctx": null,
              "_testId": "urn:uuid:c9eb6a3a-3b7e-4e6d-b0c1-701f631ac039",
              "cell": {
                "columnId": "bovine",
                "rowId": "(\"proof.id\") An optional identifier for the proof, which MUST be a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=An%20optional%20identifier%20for%20the%20proof%2C%20which%20MUST%20be%20a%20URL",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The specific type of proof MUST be specified as a string that maps to a URL.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=The%20specific%20type%20of%20proof%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL';\n      const prop = '@type';\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n        const expanded = await jsonld.expand({\n          '@context': data['@context'],\n          type: proof.type\n        }, {documentLoader});\n        for(const term of expanded) {\n          const types = term[prop];\n          should.exist(types, 'Expected @type to exist.');\n          types.every(url => shouldBeUrl({url, prop}));\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "iAuZinUgxmMzzxejDSMww",
              "ctx": null,
              "_testId": "urn:uuid:6e2e35e8-6755-4368-a015-68a035a3a006",
              "cell": {
                "columnId": "bovine",
                "rowId": "The specific type of proof MUST be specified as a string that maps to a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=The%20specific%20type%20of%20proof%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 13276,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The type property MUST contain the string DataIntegrityProof.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-data-integrity/#contexts-and-vocabularies:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.';\n          for(const proof of proofs) {\n            proof.should.have.property('type');\n            proof.type.should.be.a(\n              'string',\n              'Expected \"proof.type\" to be a string.'\n            );\n            const hasExpectedType = expectedProofTypes.includes(proof.type);\n            hasExpectedType.should.equal(\n              true,\n              `Expected \"proof.type\" to be one of ` +\n              `${expectedProofTypes} Received: ${proof.type}`);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "iAuZinUgxmMzzxejDSMww",
              "ctx": null,
              "_testId": "urn:uuid:b529c5f4-9d71-480f-9f48-e38b989473d4",
              "cell": {
                "columnId": "bovine",
                "rowId": "The type property MUST contain the string DataIntegrityProof."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#contexts-and-vocabularies:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 13277,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
              "body": "function() {\n          this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.';\n          for(const proof of proofs) {\n            should.exist(proof, 'Expected proof to exist.');\n            if(proof.type === 'DataIntegrityProof') {\n              should.exist(proof.cryptosuite,\n                'Expected proof to have property \"cryptosuite\".');\n            }\n            const {\n              prefix: expectedPrefix,\n              name: encodingName\n            } = expectedMultibasePrefix(proof.cryptosuite);\n            shouldHaveProofValue({proof, expectedPrefix, encodingName});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "iAuZinUgxmMzzxejDSMww",
              "ctx": null,
              "_testId": "urn:uuid:266c13c2-1e55-4382-9dbb-4b784cd8907c",
              "cell": {
                "columnId": "bovine",
                "rowId": "The proofValue property MUST be used, as specified in 2.1 Proofs."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.';\n      for(const proof of proofs) {\n        if(proof.type && proof.type === 'DataIntegrityProof') {\n          should.exist(\n            proof.cryptosuite,\n            'If the proof type is DataIntegrityProof, cryptosuite MUST ' +\n            'be specified');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "iAuZinUgxmMzzxejDSMww",
              "ctx": null,
              "_testId": "urn:uuid:db798b8d-e078-4ecc-a521-0198e023ba82",
              "cell": {
                "columnId": "bovine",
                "rowId": "If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If specified (proof.cryptosuite), its value MUST be a string.",
              "body": "function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.';\n        for(const proof of proofs) {\n          if(proof.cryptosuite) {\n            proof.cryptosuite.should.be.a(\n              'string',\n              'cryptosuite value MUST be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "iAuZinUgxmMzzxejDSMww",
              "ctx": null,
              "_testId": "urn:uuid:f0cb9fa6-a8a4-4506-812c-9b964607404d",
              "cell": {
                "columnId": "bovine",
                "rowId": "If specified (proof.cryptosuite), its value MUST be a string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "A verification method is the means and information needed to verify the proof. If included, the value MUST be a string that maps to a [URL].",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=A%20verification%20method%20is%20the%20means%20and%20information%20needed%20to%20verify%20the%20proof.%20If%20included%2C%20the%20value%20MUST%20be%20a%20string%20that%20maps%20to%20a%20%5BURL%5D.';\n      for(const proof of proofs) {\n        if(!data || !data?.['@context']) {\n          throw new Error(`Expected ${vendorName} to issue a VC.`);\n        }\n        await shouldMapToUrl({\n          doc: {\n            '@context': data['@context'],\n            ...proof\n          },\n          term: 'https://w3id.org/security#verificationMethod',\n          prop: '@id',\n          documentLoader\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "iAuZinUgxmMzzxejDSMww",
              "ctx": null,
              "_testId": "urn:uuid:980dd8ae-a678-4158-855b-4974844f9c97",
              "cell": {
                "columnId": "bovine",
                "rowId": "A verification method is the means and information needed to verify the proof. If included, the value MUST be a string that maps to a [URL]."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=A%20verification%20method%20is%20the%20means%20and%20information%20needed%20to%20verify%20the%20proof.%20If%20included%2C%20the%20value%20MUST%20be%20a%20string%20that%20maps%20to%20a%20%5BURL%5D.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 13278,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The reason the proof was created (\"proof.proofPurpose\") MUST be specified as a string that maps to a URL.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20reason%20the%20proof%20was%20created%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL';\n      for(const proof of proofs) {\n        proof.should.have.property('proofPurpose');\n        proof.proofPurpose.should.be.a('string');\n        await shouldMapToUrl({\n          doc: {\n            '@context': data['@context'],\n            ...proof\n          },\n          term: 'https://w3id.org/security#proofPurpose',\n          prop: '@id',\n          documentLoader\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "iAuZinUgxmMzzxejDSMww",
              "ctx": null,
              "_testId": "urn:uuid:bd6361bb-4e3f-455a-bf92-64bc7df0d796",
              "cell": {
                "columnId": "bovine",
                "rowId": "The reason the proof was created (\"proof.proofPurpose\") MUST be specified as a string that maps to a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20reason%20the%20proof%20was%20created%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 13280,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that expresses base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The value MUST use a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification to express the binary data.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=A%20string%20value%20that%20expresses%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof%20using%20the%20verificationMethod%20specified.%20The%20value%20MUST%20use%20a%20header%20and%20encoding%20as%20described%20in%20Section%202.4%20Multibase%20of%20the%20Controller%20Documents%201.0%20specification%20to%20express%20the%20binary%20data.';\n      for(const proof of proofs) {\n        should.exist(proof, 'Expected proof to exist.');\n        //FIXME the suite should pass in the expectedPrefix and\n        //encodingName or type\n        const {\n          prefix: expectedPrefix,\n          name: encodingName\n        } = expectedMultibasePrefix(proof.cryptosuite);\n        shouldHaveProofValue({proof, expectedPrefix, encodingName});\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "iAuZinUgxmMzzxejDSMww",
              "ctx": null,
              "_testId": "urn:uuid:19545ce0-cc48-42e8-8cb8-fa51ce164aba",
              "cell": {
                "columnId": "bovine",
                "rowId": "(\"proof.proofValue\") A string value that expresses base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The value MUST use a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification to express the binary data."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=A%20string%20value%20that%20expresses%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof%20using%20the%20verificationMethod%20specified.%20The%20value%20MUST%20use%20a%20header%20and%20encoding%20as%20described%20in%20Section%202.4%20Multibase%20of%20the%20Controller%20Documents%201.0%20specification%20to%20express%20the%20binary%20data.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Cryptographic suite designers MUST use mandatory proof value properties defined in Section 2.1 Proofs, and MAY define other properties specific to their cryptographic suite.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#add-proof:~:text=MUST%20use%20mandatory%20proof%20value%20properties%20defined';\n      for(const proof of proofs) {\n        shouldBeProof({proof});\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "iAuZinUgxmMzzxejDSMww",
              "ctx": null,
              "_testId": "urn:uuid:b344b55f-5e34-4b52-bce9-e715de21db46",
              "cell": {
                "columnId": "bovine",
                "rowId": "Cryptographic suite designers MUST use mandatory proof value properties defined in Section 2.1 Proofs, and MAY define other properties specific to their cryptographic suite."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#add-proof:~:text=MUST%20use%20mandatory%20proof%20value%20properties%20defined",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 13282,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      const undefinedType = structuredClone(credential);\n      undefinedType.type.push('InvalidType');\n      await shouldFailIssuance({\n        credential: undefinedType,\n        issuer,\n        reason: 'Expected issuer to error when VC has an undefined type.'\n      });\n      const undefinedTerm = structuredClone(credential);\n      undefinedTerm.credentialSubject.invalidTerm = 'invalidTerm';\n      await shouldFailIssuance({\n        credential: undefinedTerm,\n        issuer,\n        reason: 'Expected issuer to error when VC has an undefined term.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "iAuZinUgxmMzzxejDSMww",
              "ctx": null,
              "_testId": "urn:uuid:620ccae4-d7f2-4173-8490-f0af56844b73",
              "cell": {
                "columnId": "bovine",
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 13282,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 155,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected issuer to error when VC has an undefined type.: expected Response { status: 200, statusText: 'OK', headers: Headers { server: 'nginx/1.18.0 (Ubuntu)', date: 'Sun, 26 Jan 2025 05:05:39 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'content-encoding': 'gzip', Authorization: 'sanitized to prevent exposure of secrets' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected issuer to error when VC has an undefined type.: expected Response { status: 200, statusText: 'OK', headers: Headers { server: 'nginx/1.18.0 (Ubuntu)', date: 'Sun, 26 Jan 2025 05:05:39 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'content-encoding': 'gzip', Authorization: 'sanitized to prevent exposure of secrets' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at shouldFailIssuance (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:105:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/suites/create.js:235:7)"
              }
            },
            {
              "type": "test",
              "title": "If the algorithm produces an error, the error MUST be propagated and SHOULD convey the error type.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#dfn-input-document:~:text=If%20the%20algorithm%20produces%20an%20error%2C%20the%20error%20MUST%20be%20propagated%20and%20SHOULD%20convey%20the%20error%20type';\n      const noSubject = structuredClone(credential);\n      delete noSubject.credentialSubject;\n      // FIXME this test should look for a propagated error such as\n      // PROOF_GENERATION_ERROR\n      await shouldFailIssuance({\n        credential: noSubject,\n        issuer,\n        reason: 'Expected issuer to error when VC has no credentialSubject.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "iAuZinUgxmMzzxejDSMww",
              "ctx": null,
              "_testId": "urn:uuid:1d2c2eb0-7f70-4f7a-952d-92e9ae8778cc",
              "cell": {
                "columnId": "bovine",
                "rowId": "If the algorithm produces an error, the error MUST be propagated and SHOULD convey the error type."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#dfn-input-document:~:text=If%20the%20algorithm%20produces%20an%20error%2C%20the%20error%20MUST%20be%20propagated%20and%20SHOULD%20convey%20the%20error%20type",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 13437,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 152,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected issuer to error when VC has no credentialSubject.: expected Response { status: 200, statusText: 'OK', headers: Headers { server: 'nginx/1.18.0 (Ubuntu)', date: 'Sun, 26 Jan 2025 05:05:40 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'content-encoding': 'gzip', Authorization: 'sanitized to prevent exposure of secrets' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected issuer to error when VC has no credentialSubject.: expected Response { status: 200, statusText: 'OK', headers: Headers { server: 'nginx/1.18.0 (Ubuntu)', date: 'Sun, 26 Jan 2025 05:05:40 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'content-encoding': 'gzip', Authorization: 'sanitized to prevent exposure of secrets' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at shouldFailIssuance (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:105:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/suites/create.js:255:7)"
              }
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n        const hasCryptosuiteName = proofs.some(\n          p => p?.cryptosuite === cryptosuiteName);\n        hasCryptosuiteName.should.equal(\n          true,\n          `Expected at least one proof with cryptosuite ${cryptosuiteName}`);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "iAuZinUgxmMzzxejDSMww",
              "ctx": null,
              "_testId": "urn:uuid:fe078923-6762-4bb4-90b3-90b58ea96122",
              "cell": {
                "columnId": "bovine",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 13589,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n        const cryptoProp = 'https://w3id.org/security#cryptosuite';\n        const cryptoType = 'https://w3id.org/security#cryptosuiteString';\n        for(const {cryptosuite, type} of proofs) {\n          should.exist(cryptosuite,\n            'Expected property \"proof.cryptosuite\" to exist.');\n          should.exist(type,\n            'Expected property \"proof.type\" to exist.');\n          should.exist(data['@context'],\n            'Expected VC to have property \"@context\".');\n          const expanded = await jsonld.expand({\n            '@context': data['@context'],\n            cryptosuite,\n            type\n          }, {documentLoader});\n          for(const terms of expanded) {\n            const cryptoProperties = terms[cryptoProp];\n            should.exist(cryptoProperties,\n              `Expected property ${cryptoProp} to exist.`);\n            const hasTypeName = cryptoProperties.some(suite =>\n              suite['@type'] === cryptoType &&\n              suite['@value'] == cryptosuiteName);\n            hasTypeName.should.equal(true,\n              `Expected ${cryptoProp} with @value ${cryptosuiteName} & ` +\n              `@type ${cryptoType}`);\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "iAuZinUgxmMzzxejDSMww",
              "ctx": null,
              "_testId": "urn:uuid:21e88351-321a-4a72-9d72-d12a7b7672a3",
              "cell": {
                "columnId": "bovine",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 13590,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"bovine\"",
              "body": "function() {\n      this.currentTest.cell = {\n        columnId,\n        rowId: this.currentTest.title\n      };\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "iAuZinUgxmMzzxejDSMww",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"bovine\"",
              "body": "async function() {\n      if(!issuer) {\n        throw new Error(`Expected ${vendorName} to have an issuer.`);\n      }\n      if(!credential) {\n        throw new Error(`Expected a credential to be passed in ` +\n          `received ${credential}`);\n      }\n      data = await createInitialVc({issuer, credential});\n      proofs = Array.isArray(data.proof) ? data.proof : [data.proof];\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "iAuZinUgxmMzzxejDSMww",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 11480,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1795,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "1Y29bIBmPyjmnY08izIlE",
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
          "_testId": "urn:uuid:2d49dff7-72aa-4c39-8d03-030f8a213473"
        }
      ],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "Ika60aoT9ncTXtTubybzs",
      "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Issuer",
      "_testId": "urn:uuid:cef8818f-62de-462e-80f7-e9a10e7c0215",
      "columns": [
        "apicatalog.com",
        "Aviary Tech",
        "Digital Bazaar",
        "Grotto Networking",
        "Procivis One Core",
        "SpruceID",
        "Trential",
        "Trinsic",
        "bovine"
      ],
      "rows": [
        {
          "id": "When expressing a data integrity proof on an object, a proof property MUST be used.",
          "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=When%20expressing%20a%20data%20integrity%20proof%20on%20an%20object%2C%20a%20proof%20property%20MUST%20be%20used",
          "cells": [
            {
              "cell": {
                "rowId": "When expressing a data integrity proof on an object, a proof property MUST be used.",
                "colId": "apicatalog.com"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            },
            {
              "type": "test",
              "title": "When expressing a data integrity proof on an object, a proof property MUST be used.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=When%20expressing%20a%20data%20integrity%20proof%20on%20an%20object%2C%20a%20proof%20property%20MUST%20be%20used';\n      shouldHaveProof({vc: data});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "WZsrG-ZB-wun3Jr0ffXeG",
              "ctx": null,
              "_testId": "urn:uuid:3929b5ba-604e-4386-b9df-95a9bd14f507",
              "cell": {
                "columnId": "Aviary Tech",
                "rowId": "When expressing a data integrity proof on an object, a proof property MUST be used."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=When%20expressing%20a%20data%20integrity%20proof%20on%20an%20object%2C%20a%20proof%20property%20MUST%20be%20used",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "When expressing a data integrity proof on an object, a proof property MUST be used.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=When%20expressing%20a%20data%20integrity%20proof%20on%20an%20object%2C%20a%20proof%20property%20MUST%20be%20used';\n      shouldHaveProof({vc: data});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "KD39x8W5HyNa6QWjqPKRz",
              "ctx": null,
              "_testId": "urn:uuid:8ac36f2a-c67f-4b23-b33c-d1e5f2876dc9",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "When expressing a data integrity proof on an object, a proof property MUST be used."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=When%20expressing%20a%20data%20integrity%20proof%20on%20an%20object%2C%20a%20proof%20property%20MUST%20be%20used",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "When expressing a data integrity proof on an object, a proof property MUST be used.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=When%20expressing%20a%20data%20integrity%20proof%20on%20an%20object%2C%20a%20proof%20property%20MUST%20be%20used';\n      shouldHaveProof({vc: data});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "xWyqxUYMNP57vQPRlo1lD",
              "ctx": null,
              "_testId": "urn:uuid:72070eed-faf4-4378-8bfb-b2ded7e5ba0d",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "When expressing a data integrity proof on an object, a proof property MUST be used."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=When%20expressing%20a%20data%20integrity%20proof%20on%20an%20object%2C%20a%20proof%20property%20MUST%20be%20used",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "When expressing a data integrity proof on an object, a proof property MUST be used.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=When%20expressing%20a%20data%20integrity%20proof%20on%20an%20object%2C%20a%20proof%20property%20MUST%20be%20used';\n      shouldHaveProof({vc: data});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "R_Xkw2KPs1LuVc6k_9HoJ",
              "ctx": null,
              "_testId": "urn:uuid:d44358fb-a0cf-49a4-b652-755bac05c948",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "When expressing a data integrity proof on an object, a proof property MUST be used."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=When%20expressing%20a%20data%20integrity%20proof%20on%20an%20object%2C%20a%20proof%20property%20MUST%20be%20used",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "When expressing a data integrity proof on an object, a proof property MUST be used.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=When%20expressing%20a%20data%20integrity%20proof%20on%20an%20object%2C%20a%20proof%20property%20MUST%20be%20used';\n      shouldHaveProof({vc: data});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "lOezDY1VoQtL1FXtONFd9",
              "ctx": null,
              "_testId": "urn:uuid:dd90fe22-13b0-4f44-af3e-8cded0ad8c63",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "When expressing a data integrity proof on an object, a proof property MUST be used."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=When%20expressing%20a%20data%20integrity%20proof%20on%20an%20object%2C%20a%20proof%20property%20MUST%20be%20used",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "When expressing a data integrity proof on an object, a proof property MUST be used.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=When%20expressing%20a%20data%20integrity%20proof%20on%20an%20object%2C%20a%20proof%20property%20MUST%20be%20used';\n      shouldHaveProof({vc: data});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "ITYGDAwZUr2tdgN6cZVg4",
              "ctx": null,
              "_testId": "urn:uuid:5e0f8e40-9e30-42dd-995a-8abf8d6121f0",
              "cell": {
                "columnId": "Trential",
                "rowId": "When expressing a data integrity proof on an object, a proof property MUST be used."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=When%20expressing%20a%20data%20integrity%20proof%20on%20an%20object%2C%20a%20proof%20property%20MUST%20be%20used",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "cell": {
                "rowId": "When expressing a data integrity proof on an object, a proof property MUST be used.",
                "colId": "Trinsic"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            },
            {
              "type": "test",
              "title": "When expressing a data integrity proof on an object, a proof property MUST be used.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=When%20expressing%20a%20data%20integrity%20proof%20on%20an%20object%2C%20a%20proof%20property%20MUST%20be%20used';\n      shouldHaveProof({vc: data});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "iAuZinUgxmMzzxejDSMww",
              "ctx": null,
              "_testId": "urn:uuid:64c7834c-3e49-44af-ace2-f10d71052c40",
              "cell": {
                "columnId": "bovine",
                "rowId": "When expressing a data integrity proof on an object, a proof property MUST be used."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=When%20expressing%20a%20data%20integrity%20proof%20on%20an%20object%2C%20a%20proof%20property%20MUST%20be%20used",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "If present (proof), its value MUST be either a single object, or an unordered set of objects.",
          "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=If%20present%2C%20its%20value%20MUST%20be%20either%20a%20single%20object%2C%20or%20an%20unordered%20set%20of%20objects",
          "cells": [
            {
              "cell": {
                "rowId": "If present (proof), its value MUST be either a single object, or an unordered set of objects.",
                "colId": "apicatalog.com"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            },
            {
              "type": "test",
              "title": "If present (proof), its value MUST be either a single object, or an unordered set of objects.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=If%20present%2C%20its%20value%20MUST%20be%20either%20a%20single%20object%2C%20or%20an%20unordered%20set%20of%20objects';\n      shouldHaveProof({vc: data});\n      const {proof} = data;\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "WZsrG-ZB-wun3Jr0ffXeG",
              "ctx": null,
              "_testId": "urn:uuid:561249da-8777-4d96-a6a4-f3ffb972a464",
              "cell": {
                "columnId": "Aviary Tech",
                "rowId": "If present (proof), its value MUST be either a single object, or an unordered set of objects."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=If%20present%2C%20its%20value%20MUST%20be%20either%20a%20single%20object%2C%20or%20an%20unordered%20set%20of%20objects",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If present (proof), its value MUST be either a single object, or an unordered set of objects.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=If%20present%2C%20its%20value%20MUST%20be%20either%20a%20single%20object%2C%20or%20an%20unordered%20set%20of%20objects';\n      shouldHaveProof({vc: data});\n      const {proof} = data;\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "KD39x8W5HyNa6QWjqPKRz",
              "ctx": null,
              "_testId": "urn:uuid:9557aa5c-2883-4262-bef5-4219a0f2c369",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If present (proof), its value MUST be either a single object, or an unordered set of objects."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=If%20present%2C%20its%20value%20MUST%20be%20either%20a%20single%20object%2C%20or%20an%20unordered%20set%20of%20objects",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If present (proof), its value MUST be either a single object, or an unordered set of objects.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=If%20present%2C%20its%20value%20MUST%20be%20either%20a%20single%20object%2C%20or%20an%20unordered%20set%20of%20objects';\n      shouldHaveProof({vc: data});\n      const {proof} = data;\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "xWyqxUYMNP57vQPRlo1lD",
              "ctx": null,
              "_testId": "urn:uuid:dffc5b86-a8f1-487d-9011-e4925e49d774",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If present (proof), its value MUST be either a single object, or an unordered set of objects."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=If%20present%2C%20its%20value%20MUST%20be%20either%20a%20single%20object%2C%20or%20an%20unordered%20set%20of%20objects",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If present (proof), its value MUST be either a single object, or an unordered set of objects.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=If%20present%2C%20its%20value%20MUST%20be%20either%20a%20single%20object%2C%20or%20an%20unordered%20set%20of%20objects';\n      shouldHaveProof({vc: data});\n      const {proof} = data;\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "R_Xkw2KPs1LuVc6k_9HoJ",
              "ctx": null,
              "_testId": "urn:uuid:fd55cbd0-fc7d-458f-a240-4683419b0ddb",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "If present (proof), its value MUST be either a single object, or an unordered set of objects."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=If%20present%2C%20its%20value%20MUST%20be%20either%20a%20single%20object%2C%20or%20an%20unordered%20set%20of%20objects",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If present (proof), its value MUST be either a single object, or an unordered set of objects.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=If%20present%2C%20its%20value%20MUST%20be%20either%20a%20single%20object%2C%20or%20an%20unordered%20set%20of%20objects';\n      shouldHaveProof({vc: data});\n      const {proof} = data;\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "lOezDY1VoQtL1FXtONFd9",
              "ctx": null,
              "_testId": "urn:uuid:a13238ac-777f-48b8-b839-348c0362c877",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If present (proof), its value MUST be either a single object, or an unordered set of objects."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=If%20present%2C%20its%20value%20MUST%20be%20either%20a%20single%20object%2C%20or%20an%20unordered%20set%20of%20objects",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If present (proof), its value MUST be either a single object, or an unordered set of objects.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=If%20present%2C%20its%20value%20MUST%20be%20either%20a%20single%20object%2C%20or%20an%20unordered%20set%20of%20objects';\n      shouldHaveProof({vc: data});\n      const {proof} = data;\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "ITYGDAwZUr2tdgN6cZVg4",
              "ctx": null,
              "_testId": "urn:uuid:797df1e0-2ed0-4b09-ace6-6a2870e763fb",
              "cell": {
                "columnId": "Trential",
                "rowId": "If present (proof), its value MUST be either a single object, or an unordered set of objects."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=If%20present%2C%20its%20value%20MUST%20be%20either%20a%20single%20object%2C%20or%20an%20unordered%20set%20of%20objects",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "cell": {
                "rowId": "If present (proof), its value MUST be either a single object, or an unordered set of objects.",
                "colId": "Trinsic"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            },
            {
              "type": "test",
              "title": "If present (proof), its value MUST be either a single object, or an unordered set of objects.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=If%20present%2C%20its%20value%20MUST%20be%20either%20a%20single%20object%2C%20or%20an%20unordered%20set%20of%20objects';\n      shouldHaveProof({vc: data});\n      const {proof} = data;\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "iAuZinUgxmMzzxejDSMww",
              "ctx": null,
              "_testId": "urn:uuid:3b90187f-c724-4886-94d2-b733eb49e71c",
              "cell": {
                "columnId": "bovine",
                "rowId": "If present (proof), its value MUST be either a single object, or an unordered set of objects."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=If%20present%2C%20its%20value%20MUST%20be%20either%20a%20single%20object%2C%20or%20an%20unordered%20set%20of%20objects",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "(\"proof.id\") An optional identifier for the proof, which MUST be a URL.",
          "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=An%20optional%20identifier%20for%20the%20proof%2C%20which%20MUST%20be%20a%20URL",
          "cells": [
            {
              "cell": {
                "rowId": "(\"proof.id\") An optional identifier for the proof, which MUST be a URL.",
                "colId": "apicatalog.com"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            },
            {
              "type": "test",
              "title": "(\"proof.id\") An optional identifier for the proof, which MUST be a URL.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=An%20optional%20identifier%20for%20the%20proof%2C%20which%20MUST%20be%20a%20URL';\n      for(const proof of proofs) {\n        if(proof.id) {\n          shouldBeUrl({url: proof.id, prop: 'proof.id'});\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "WZsrG-ZB-wun3Jr0ffXeG",
              "ctx": null,
              "_testId": "urn:uuid:0e49b817-1a11-4831-a25d-141821c372c2",
              "cell": {
                "columnId": "Aviary Tech",
                "rowId": "(\"proof.id\") An optional identifier for the proof, which MUST be a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=An%20optional%20identifier%20for%20the%20proof%2C%20which%20MUST%20be%20a%20URL",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.id\") An optional identifier for the proof, which MUST be a URL.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=An%20optional%20identifier%20for%20the%20proof%2C%20which%20MUST%20be%20a%20URL';\n      for(const proof of proofs) {\n        if(proof.id) {\n          shouldBeUrl({url: proof.id, prop: 'proof.id'});\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "KD39x8W5HyNa6QWjqPKRz",
              "ctx": null,
              "_testId": "urn:uuid:dab64d67-aa63-4222-b7c0-39f5583ff12c",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "(\"proof.id\") An optional identifier for the proof, which MUST be a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=An%20optional%20identifier%20for%20the%20proof%2C%20which%20MUST%20be%20a%20URL",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.id\") An optional identifier for the proof, which MUST be a URL.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=An%20optional%20identifier%20for%20the%20proof%2C%20which%20MUST%20be%20a%20URL';\n      for(const proof of proofs) {\n        if(proof.id) {\n          shouldBeUrl({url: proof.id, prop: 'proof.id'});\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "xWyqxUYMNP57vQPRlo1lD",
              "ctx": null,
              "_testId": "urn:uuid:74692f32-e4d2-4f7d-ba0a-3c36e8243d19",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "(\"proof.id\") An optional identifier for the proof, which MUST be a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=An%20optional%20identifier%20for%20the%20proof%2C%20which%20MUST%20be%20a%20URL",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.id\") An optional identifier for the proof, which MUST be a URL.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=An%20optional%20identifier%20for%20the%20proof%2C%20which%20MUST%20be%20a%20URL';\n      for(const proof of proofs) {\n        if(proof.id) {\n          shouldBeUrl({url: proof.id, prop: 'proof.id'});\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "R_Xkw2KPs1LuVc6k_9HoJ",
              "ctx": null,
              "_testId": "urn:uuid:a2dc6ec1-ebac-41de-ad0f-3583165aff61",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "(\"proof.id\") An optional identifier for the proof, which MUST be a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=An%20optional%20identifier%20for%20the%20proof%2C%20which%20MUST%20be%20a%20URL",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.id\") An optional identifier for the proof, which MUST be a URL.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=An%20optional%20identifier%20for%20the%20proof%2C%20which%20MUST%20be%20a%20URL';\n      for(const proof of proofs) {\n        if(proof.id) {\n          shouldBeUrl({url: proof.id, prop: 'proof.id'});\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "lOezDY1VoQtL1FXtONFd9",
              "ctx": null,
              "_testId": "urn:uuid:6b2b99ff-76fd-4f37-95f3-68a8afbbcf08",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "(\"proof.id\") An optional identifier for the proof, which MUST be a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=An%20optional%20identifier%20for%20the%20proof%2C%20which%20MUST%20be%20a%20URL",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.id\") An optional identifier for the proof, which MUST be a URL.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=An%20optional%20identifier%20for%20the%20proof%2C%20which%20MUST%20be%20a%20URL';\n      for(const proof of proofs) {\n        if(proof.id) {\n          shouldBeUrl({url: proof.id, prop: 'proof.id'});\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "ITYGDAwZUr2tdgN6cZVg4",
              "ctx": null,
              "_testId": "urn:uuid:373ee6ef-c573-4acc-9a07-04cbb49bb08a",
              "cell": {
                "columnId": "Trential",
                "rowId": "(\"proof.id\") An optional identifier for the proof, which MUST be a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=An%20optional%20identifier%20for%20the%20proof%2C%20which%20MUST%20be%20a%20URL",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "cell": {
                "rowId": "(\"proof.id\") An optional identifier for the proof, which MUST be a URL.",
                "colId": "Trinsic"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            },
            {
              "type": "test",
              "title": "(\"proof.id\") An optional identifier for the proof, which MUST be a URL.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=An%20optional%20identifier%20for%20the%20proof%2C%20which%20MUST%20be%20a%20URL';\n      for(const proof of proofs) {\n        if(proof.id) {\n          shouldBeUrl({url: proof.id, prop: 'proof.id'});\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "iAuZinUgxmMzzxejDSMww",
              "ctx": null,
              "_testId": "urn:uuid:c9eb6a3a-3b7e-4e6d-b0c1-701f631ac039",
              "cell": {
                "columnId": "bovine",
                "rowId": "(\"proof.id\") An optional identifier for the proof, which MUST be a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=An%20optional%20identifier%20for%20the%20proof%2C%20which%20MUST%20be%20a%20URL",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "The specific type of proof MUST be specified as a string that maps to a URL.",
          "link": "https://w3c.github.io/vc-data-integrity/#:~:text=The%20specific%20type%20of%20proof%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL",
          "cells": [
            {
              "cell": {
                "rowId": "The specific type of proof MUST be specified as a string that maps to a URL.",
                "colId": "apicatalog.com"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            },
            {
              "type": "test",
              "title": "The specific type of proof MUST be specified as a string that maps to a URL.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=The%20specific%20type%20of%20proof%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL';\n      const prop = '@type';\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n        const expanded = await jsonld.expand({\n          '@context': data['@context'],\n          type: proof.type\n        }, {documentLoader});\n        for(const term of expanded) {\n          const types = term[prop];\n          should.exist(types, 'Expected @type to exist.');\n          types.every(url => shouldBeUrl({url, prop}));\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "WZsrG-ZB-wun3Jr0ffXeG",
              "ctx": null,
              "_testId": "urn:uuid:8c119bb9-6361-46d2-afe8-aa5bdd29cf6a",
              "cell": {
                "columnId": "Aviary Tech",
                "rowId": "The specific type of proof MUST be specified as a string that maps to a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=The%20specific%20type%20of%20proof%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2372,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 10,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The specific type of proof MUST be specified as a string that maps to a URL.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=The%20specific%20type%20of%20proof%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL';\n      const prop = '@type';\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n        const expanded = await jsonld.expand({\n          '@context': data['@context'],\n          type: proof.type\n        }, {documentLoader});\n        for(const term of expanded) {\n          const types = term[prop];\n          should.exist(types, 'Expected @type to exist.');\n          types.every(url => shouldBeUrl({url, prop}));\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "KD39x8W5HyNa6QWjqPKRz",
              "ctx": null,
              "_testId": "urn:uuid:20304d72-c1c7-4935-a6fe-27965eb67b87",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The specific type of proof MUST be specified as a string that maps to a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=The%20specific%20type%20of%20proof%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3123,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The specific type of proof MUST be specified as a string that maps to a URL.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=The%20specific%20type%20of%20proof%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL';\n      const prop = '@type';\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n        const expanded = await jsonld.expand({\n          '@context': data['@context'],\n          type: proof.type\n        }, {documentLoader});\n        for(const term of expanded) {\n          const types = term[prop];\n          should.exist(types, 'Expected @type to exist.');\n          types.every(url => shouldBeUrl({url, prop}));\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "xWyqxUYMNP57vQPRlo1lD",
              "ctx": null,
              "_testId": "urn:uuid:a0221874-94a8-472a-8add-6b9e7dd0814a",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The specific type of proof MUST be specified as a string that maps to a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=The%20specific%20type%20of%20proof%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3742,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The specific type of proof MUST be specified as a string that maps to a URL.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=The%20specific%20type%20of%20proof%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL';\n      const prop = '@type';\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n        const expanded = await jsonld.expand({\n          '@context': data['@context'],\n          type: proof.type\n        }, {documentLoader});\n        for(const term of expanded) {\n          const types = term[prop];\n          should.exist(types, 'Expected @type to exist.');\n          types.every(url => shouldBeUrl({url, prop}));\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "R_Xkw2KPs1LuVc6k_9HoJ",
              "ctx": null,
              "_testId": "urn:uuid:b5a96bb6-127e-4237-889c-6b5316467abb",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "The specific type of proof MUST be specified as a string that maps to a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=The%20specific%20type%20of%20proof%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5201,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 2,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected \"@type\" URL to be parsed.: expected TypeError: Invalid URL { …(2) } to not exist",
                "showDiff": false,
                "actual": {
                  "code": "ERR_INVALID_URL",
                  "input": "DataIntegrityProof"
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected \"@type\" URL to be parsed.: expected TypeError: Invalid URL { …(2) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at shouldBeUrl (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:198:14)\n    at file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/suites/create.js:82:30\n    at Array.every (<anonymous>)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/suites/create.js:82:17)"
              }
            },
            {
              "type": "test",
              "title": "The specific type of proof MUST be specified as a string that maps to a URL.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=The%20specific%20type%20of%20proof%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL';\n      const prop = '@type';\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n        const expanded = await jsonld.expand({\n          '@context': data['@context'],\n          type: proof.type\n        }, {documentLoader});\n        for(const term of expanded) {\n          const types = term[prop];\n          should.exist(types, 'Expected @type to exist.');\n          types.every(url => shouldBeUrl({url, prop}));\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "lOezDY1VoQtL1FXtONFd9",
              "ctx": null,
              "_testId": "urn:uuid:7c1f7fd5-7aa4-4133-9117-ea1b7d4674a3",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The specific type of proof MUST be specified as a string that maps to a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=The%20specific%20type%20of%20proof%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6944,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The specific type of proof MUST be specified as a string that maps to a URL.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=The%20specific%20type%20of%20proof%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL';\n      const prop = '@type';\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n        const expanded = await jsonld.expand({\n          '@context': data['@context'],\n          type: proof.type\n        }, {documentLoader});\n        for(const term of expanded) {\n          const types = term[prop];\n          should.exist(types, 'Expected @type to exist.');\n          types.every(url => shouldBeUrl({url, prop}));\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "ITYGDAwZUr2tdgN6cZVg4",
              "ctx": null,
              "_testId": "urn:uuid:5e2cda30-734b-4bd8-9c29-9ddc71d45a24",
              "cell": {
                "columnId": "Trential",
                "rowId": "The specific type of proof MUST be specified as a string that maps to a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=The%20specific%20type%20of%20proof%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9440,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "cell": {
                "rowId": "The specific type of proof MUST be specified as a string that maps to a URL.",
                "colId": "Trinsic"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            },
            {
              "type": "test",
              "title": "The specific type of proof MUST be specified as a string that maps to a URL.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=The%20specific%20type%20of%20proof%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL';\n      const prop = '@type';\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n        const expanded = await jsonld.expand({\n          '@context': data['@context'],\n          type: proof.type\n        }, {documentLoader});\n        for(const term of expanded) {\n          const types = term[prop];\n          should.exist(types, 'Expected @type to exist.');\n          types.every(url => shouldBeUrl({url, prop}));\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "iAuZinUgxmMzzxejDSMww",
              "ctx": null,
              "_testId": "urn:uuid:6e2e35e8-6755-4368-a015-68a035a3a006",
              "cell": {
                "columnId": "bovine",
                "rowId": "The specific type of proof MUST be specified as a string that maps to a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=The%20specific%20type%20of%20proof%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 13276,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "The type property MUST contain the string DataIntegrityProof.",
          "link": "https://w3c.github.io/vc-data-integrity/#contexts-and-vocabularies:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.",
          "cells": [
            {
              "cell": {
                "rowId": "The type property MUST contain the string DataIntegrityProof.",
                "colId": "apicatalog.com"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            },
            {
              "type": "test",
              "title": "The type property MUST contain the string DataIntegrityProof.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-data-integrity/#contexts-and-vocabularies:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.';\n          for(const proof of proofs) {\n            proof.should.have.property('type');\n            proof.type.should.be.a(\n              'string',\n              'Expected \"proof.type\" to be a string.'\n            );\n            const hasExpectedType = expectedProofTypes.includes(proof.type);\n            hasExpectedType.should.equal(\n              true,\n              `Expected \"proof.type\" to be one of ` +\n              `${expectedProofTypes} Received: ${proof.type}`);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "WZsrG-ZB-wun3Jr0ffXeG",
              "ctx": null,
              "_testId": "urn:uuid:7db9cfec-8d13-4537-a63f-bef3a7f8fe62",
              "cell": {
                "columnId": "Aviary Tech",
                "rowId": "The type property MUST contain the string DataIntegrityProof."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#contexts-and-vocabularies:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2380,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The type property MUST contain the string DataIntegrityProof.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-data-integrity/#contexts-and-vocabularies:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.';\n          for(const proof of proofs) {\n            proof.should.have.property('type');\n            proof.type.should.be.a(\n              'string',\n              'Expected \"proof.type\" to be a string.'\n            );\n            const hasExpectedType = expectedProofTypes.includes(proof.type);\n            hasExpectedType.should.equal(\n              true,\n              `Expected \"proof.type\" to be one of ` +\n              `${expectedProofTypes} Received: ${proof.type}`);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "KD39x8W5HyNa6QWjqPKRz",
              "ctx": null,
              "_testId": "urn:uuid:19cf97cd-572e-42b3-b189-5daff2ff8056",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The type property MUST contain the string DataIntegrityProof."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#contexts-and-vocabularies:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3125,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The type property MUST contain the string DataIntegrityProof.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-data-integrity/#contexts-and-vocabularies:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.';\n          for(const proof of proofs) {\n            proof.should.have.property('type');\n            proof.type.should.be.a(\n              'string',\n              'Expected \"proof.type\" to be a string.'\n            );\n            const hasExpectedType = expectedProofTypes.includes(proof.type);\n            hasExpectedType.should.equal(\n              true,\n              `Expected \"proof.type\" to be one of ` +\n              `${expectedProofTypes} Received: ${proof.type}`);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "xWyqxUYMNP57vQPRlo1lD",
              "ctx": null,
              "_testId": "urn:uuid:956f627c-3a6b-4e28-9722-230fac749eb8",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The type property MUST contain the string DataIntegrityProof."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#contexts-and-vocabularies:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3743,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The type property MUST contain the string DataIntegrityProof.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-data-integrity/#contexts-and-vocabularies:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.';\n          for(const proof of proofs) {\n            proof.should.have.property('type');\n            proof.type.should.be.a(\n              'string',\n              'Expected \"proof.type\" to be a string.'\n            );\n            const hasExpectedType = expectedProofTypes.includes(proof.type);\n            hasExpectedType.should.equal(\n              true,\n              `Expected \"proof.type\" to be one of ` +\n              `${expectedProofTypes} Received: ${proof.type}`);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "R_Xkw2KPs1LuVc6k_9HoJ",
              "ctx": null,
              "_testId": "urn:uuid:f8878394-9b21-4d01-b6f3-3d54acd4714d",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "The type property MUST contain the string DataIntegrityProof."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#contexts-and-vocabularies:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5203,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The type property MUST contain the string DataIntegrityProof.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-data-integrity/#contexts-and-vocabularies:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.';\n          for(const proof of proofs) {\n            proof.should.have.property('type');\n            proof.type.should.be.a(\n              'string',\n              'Expected \"proof.type\" to be a string.'\n            );\n            const hasExpectedType = expectedProofTypes.includes(proof.type);\n            hasExpectedType.should.equal(\n              true,\n              `Expected \"proof.type\" to be one of ` +\n              `${expectedProofTypes} Received: ${proof.type}`);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "lOezDY1VoQtL1FXtONFd9",
              "ctx": null,
              "_testId": "urn:uuid:c9b0eec2-73ec-4dc5-862d-3d71545afe65",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The type property MUST contain the string DataIntegrityProof."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#contexts-and-vocabularies:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6945,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The type property MUST contain the string DataIntegrityProof.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-data-integrity/#contexts-and-vocabularies:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.';\n          for(const proof of proofs) {\n            proof.should.have.property('type');\n            proof.type.should.be.a(\n              'string',\n              'Expected \"proof.type\" to be a string.'\n            );\n            const hasExpectedType = expectedProofTypes.includes(proof.type);\n            hasExpectedType.should.equal(\n              true,\n              `Expected \"proof.type\" to be one of ` +\n              `${expectedProofTypes} Received: ${proof.type}`);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "ITYGDAwZUr2tdgN6cZVg4",
              "ctx": null,
              "_testId": "urn:uuid:4bd914b1-2578-48ec-b909-f2d9a68b5ce9",
              "cell": {
                "columnId": "Trential",
                "rowId": "The type property MUST contain the string DataIntegrityProof."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#contexts-and-vocabularies:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9441,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "cell": {
                "rowId": "The type property MUST contain the string DataIntegrityProof.",
                "colId": "Trinsic"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            },
            {
              "type": "test",
              "title": "The type property MUST contain the string DataIntegrityProof.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-data-integrity/#contexts-and-vocabularies:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.';\n          for(const proof of proofs) {\n            proof.should.have.property('type');\n            proof.type.should.be.a(\n              'string',\n              'Expected \"proof.type\" to be a string.'\n            );\n            const hasExpectedType = expectedProofTypes.includes(proof.type);\n            hasExpectedType.should.equal(\n              true,\n              `Expected \"proof.type\" to be one of ` +\n              `${expectedProofTypes} Received: ${proof.type}`);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "iAuZinUgxmMzzxejDSMww",
              "ctx": null,
              "_testId": "urn:uuid:b529c5f4-9d71-480f-9f48-e38b989473d4",
              "cell": {
                "columnId": "bovine",
                "rowId": "The type property MUST contain the string DataIntegrityProof."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#contexts-and-vocabularies:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 13277,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
          "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.",
          "cells": [
            {
              "cell": {
                "rowId": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
                "colId": "apicatalog.com"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            },
            {
              "type": "test",
              "title": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
              "body": "function() {\n          this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.';\n          for(const proof of proofs) {\n            should.exist(proof, 'Expected proof to exist.');\n            if(proof.type === 'DataIntegrityProof') {\n              should.exist(proof.cryptosuite,\n                'Expected proof to have property \"cryptosuite\".');\n            }\n            const {\n              prefix: expectedPrefix,\n              name: encodingName\n            } = expectedMultibasePrefix(proof.cryptosuite);\n            shouldHaveProofValue({proof, expectedPrefix, encodingName});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "WZsrG-ZB-wun3Jr0ffXeG",
              "ctx": null,
              "_testId": "urn:uuid:4e9880c9-cd02-4193-89bf-463aa2d9fe1f",
              "cell": {
                "columnId": "Aviary Tech",
                "rowId": "The proofValue property MUST be used, as specified in 2.1 Proofs."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
              "body": "function() {\n          this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.';\n          for(const proof of proofs) {\n            should.exist(proof, 'Expected proof to exist.');\n            if(proof.type === 'DataIntegrityProof') {\n              should.exist(proof.cryptosuite,\n                'Expected proof to have property \"cryptosuite\".');\n            }\n            const {\n              prefix: expectedPrefix,\n              name: encodingName\n            } = expectedMultibasePrefix(proof.cryptosuite);\n            shouldHaveProofValue({proof, expectedPrefix, encodingName});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "KD39x8W5HyNa6QWjqPKRz",
              "ctx": null,
              "_testId": "urn:uuid:591a8fc6-41a1-410c-b77b-7b53147aabb6",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The proofValue property MUST be used, as specified in 2.1 Proofs."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
              "body": "function() {\n          this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.';\n          for(const proof of proofs) {\n            should.exist(proof, 'Expected proof to exist.');\n            if(proof.type === 'DataIntegrityProof') {\n              should.exist(proof.cryptosuite,\n                'Expected proof to have property \"cryptosuite\".');\n            }\n            const {\n              prefix: expectedPrefix,\n              name: encodingName\n            } = expectedMultibasePrefix(proof.cryptosuite);\n            shouldHaveProofValue({proof, expectedPrefix, encodingName});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "xWyqxUYMNP57vQPRlo1lD",
              "ctx": null,
              "_testId": "urn:uuid:69dd7976-d7e9-4e83-ab0d-74179d4a484f",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The proofValue property MUST be used, as specified in 2.1 Proofs."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
              "body": "function() {\n          this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.';\n          for(const proof of proofs) {\n            should.exist(proof, 'Expected proof to exist.');\n            if(proof.type === 'DataIntegrityProof') {\n              should.exist(proof.cryptosuite,\n                'Expected proof to have property \"cryptosuite\".');\n            }\n            const {\n              prefix: expectedPrefix,\n              name: encodingName\n            } = expectedMultibasePrefix(proof.cryptosuite);\n            shouldHaveProofValue({proof, expectedPrefix, encodingName});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "R_Xkw2KPs1LuVc6k_9HoJ",
              "ctx": null,
              "_testId": "urn:uuid:4203a70e-9679-4890-b2ee-543f71fac9a9",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "The proofValue property MUST be used, as specified in 2.1 Proofs."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
              "body": "function() {\n          this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.';\n          for(const proof of proofs) {\n            should.exist(proof, 'Expected proof to exist.');\n            if(proof.type === 'DataIntegrityProof') {\n              should.exist(proof.cryptosuite,\n                'Expected proof to have property \"cryptosuite\".');\n            }\n            const {\n              prefix: expectedPrefix,\n              name: encodingName\n            } = expectedMultibasePrefix(proof.cryptosuite);\n            shouldHaveProofValue({proof, expectedPrefix, encodingName});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "lOezDY1VoQtL1FXtONFd9",
              "ctx": null,
              "_testId": "urn:uuid:cf95f23c-0db3-4157-ae40-77aab229f770",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The proofValue property MUST be used, as specified in 2.1 Proofs."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
              "body": "function() {\n          this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.';\n          for(const proof of proofs) {\n            should.exist(proof, 'Expected proof to exist.');\n            if(proof.type === 'DataIntegrityProof') {\n              should.exist(proof.cryptosuite,\n                'Expected proof to have property \"cryptosuite\".');\n            }\n            const {\n              prefix: expectedPrefix,\n              name: encodingName\n            } = expectedMultibasePrefix(proof.cryptosuite);\n            shouldHaveProofValue({proof, expectedPrefix, encodingName});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "ITYGDAwZUr2tdgN6cZVg4",
              "ctx": null,
              "_testId": "urn:uuid:40489098-1dac-4d54-9410-2b90d5ff87bc",
              "cell": {
                "columnId": "Trential",
                "rowId": "The proofValue property MUST be used, as specified in 2.1 Proofs."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "cell": {
                "rowId": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
                "colId": "Trinsic"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            },
            {
              "type": "test",
              "title": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
              "body": "function() {\n          this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.';\n          for(const proof of proofs) {\n            should.exist(proof, 'Expected proof to exist.');\n            if(proof.type === 'DataIntegrityProof') {\n              should.exist(proof.cryptosuite,\n                'Expected proof to have property \"cryptosuite\".');\n            }\n            const {\n              prefix: expectedPrefix,\n              name: encodingName\n            } = expectedMultibasePrefix(proof.cryptosuite);\n            shouldHaveProofValue({proof, expectedPrefix, encodingName});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "iAuZinUgxmMzzxejDSMww",
              "ctx": null,
              "_testId": "urn:uuid:266c13c2-1e55-4382-9dbb-4b784cd8907c",
              "cell": {
                "columnId": "bovine",
                "rowId": "The proofValue property MUST be used, as specified in 2.1 Proofs."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified.",
          "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.",
          "cells": [
            {
              "cell": {
                "rowId": "If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified.",
                "colId": "apicatalog.com"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            },
            {
              "type": "test",
              "title": "If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.';\n      for(const proof of proofs) {\n        if(proof.type && proof.type === 'DataIntegrityProof') {\n          should.exist(\n            proof.cryptosuite,\n            'If the proof type is DataIntegrityProof, cryptosuite MUST ' +\n            'be specified');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "WZsrG-ZB-wun3Jr0ffXeG",
              "ctx": null,
              "_testId": "urn:uuid:724911bc-f224-45f9-816f-ac8124d60d9c",
              "cell": {
                "columnId": "Aviary Tech",
                "rowId": "If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.';\n      for(const proof of proofs) {\n        if(proof.type && proof.type === 'DataIntegrityProof') {\n          should.exist(\n            proof.cryptosuite,\n            'If the proof type is DataIntegrityProof, cryptosuite MUST ' +\n            'be specified');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "KD39x8W5HyNa6QWjqPKRz",
              "ctx": null,
              "_testId": "urn:uuid:7d9b0b45-4677-4637-9fba-6441a6e0f19c",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.';\n      for(const proof of proofs) {\n        if(proof.type && proof.type === 'DataIntegrityProof') {\n          should.exist(\n            proof.cryptosuite,\n            'If the proof type is DataIntegrityProof, cryptosuite MUST ' +\n            'be specified');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "xWyqxUYMNP57vQPRlo1lD",
              "ctx": null,
              "_testId": "urn:uuid:6b241d70-a528-4784-8c9b-a033ad0f3b7a",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.';\n      for(const proof of proofs) {\n        if(proof.type && proof.type === 'DataIntegrityProof') {\n          should.exist(\n            proof.cryptosuite,\n            'If the proof type is DataIntegrityProof, cryptosuite MUST ' +\n            'be specified');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "R_Xkw2KPs1LuVc6k_9HoJ",
              "ctx": null,
              "_testId": "urn:uuid:32632dd0-be89-4fc7-98f4-d8135da0db2c",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.';\n      for(const proof of proofs) {\n        if(proof.type && proof.type === 'DataIntegrityProof') {\n          should.exist(\n            proof.cryptosuite,\n            'If the proof type is DataIntegrityProof, cryptosuite MUST ' +\n            'be specified');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "lOezDY1VoQtL1FXtONFd9",
              "ctx": null,
              "_testId": "urn:uuid:54d9a395-cf26-41db-9550-afe6a92f2df4",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.';\n      for(const proof of proofs) {\n        if(proof.type && proof.type === 'DataIntegrityProof') {\n          should.exist(\n            proof.cryptosuite,\n            'If the proof type is DataIntegrityProof, cryptosuite MUST ' +\n            'be specified');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "ITYGDAwZUr2tdgN6cZVg4",
              "ctx": null,
              "_testId": "urn:uuid:3a039e53-ddd0-4439-95bc-c289b4717646",
              "cell": {
                "columnId": "Trential",
                "rowId": "If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "cell": {
                "rowId": "If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified.",
                "colId": "Trinsic"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            },
            {
              "type": "test",
              "title": "If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.';\n      for(const proof of proofs) {\n        if(proof.type && proof.type === 'DataIntegrityProof') {\n          should.exist(\n            proof.cryptosuite,\n            'If the proof type is DataIntegrityProof, cryptosuite MUST ' +\n            'be specified');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "iAuZinUgxmMzzxejDSMww",
              "ctx": null,
              "_testId": "urn:uuid:db798b8d-e078-4ecc-a521-0198e023ba82",
              "cell": {
                "columnId": "bovine",
                "rowId": "If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "If specified (proof.cryptosuite), its value MUST be a string.",
          "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.",
          "cells": [
            {
              "cell": {
                "rowId": "If specified (proof.cryptosuite), its value MUST be a string.",
                "colId": "apicatalog.com"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            },
            {
              "type": "test",
              "title": "If specified (proof.cryptosuite), its value MUST be a string.",
              "body": "function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.';\n        for(const proof of proofs) {\n          if(proof.cryptosuite) {\n            proof.cryptosuite.should.be.a(\n              'string',\n              'cryptosuite value MUST be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "WZsrG-ZB-wun3Jr0ffXeG",
              "ctx": null,
              "_testId": "urn:uuid:4e95e4c6-a7af-43d3-9f8e-a3b03459fcae",
              "cell": {
                "columnId": "Aviary Tech",
                "rowId": "If specified (proof.cryptosuite), its value MUST be a string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If specified (proof.cryptosuite), its value MUST be a string.",
              "body": "function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.';\n        for(const proof of proofs) {\n          if(proof.cryptosuite) {\n            proof.cryptosuite.should.be.a(\n              'string',\n              'cryptosuite value MUST be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "KD39x8W5HyNa6QWjqPKRz",
              "ctx": null,
              "_testId": "urn:uuid:65d2c680-d144-4b69-9014-3d5283af603c",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If specified (proof.cryptosuite), its value MUST be a string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If specified (proof.cryptosuite), its value MUST be a string.",
              "body": "function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.';\n        for(const proof of proofs) {\n          if(proof.cryptosuite) {\n            proof.cryptosuite.should.be.a(\n              'string',\n              'cryptosuite value MUST be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "xWyqxUYMNP57vQPRlo1lD",
              "ctx": null,
              "_testId": "urn:uuid:ab7de0c5-0a94-4408-b42f-535e3cf84f22",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If specified (proof.cryptosuite), its value MUST be a string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.",
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If specified (proof.cryptosuite), its value MUST be a string.",
              "body": "function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.';\n        for(const proof of proofs) {\n          if(proof.cryptosuite) {\n            proof.cryptosuite.should.be.a(\n              'string',\n              'cryptosuite value MUST be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "R_Xkw2KPs1LuVc6k_9HoJ",
              "ctx": null,
              "_testId": "urn:uuid:2c5ccdf6-f570-410e-84a5-a8db4e90208a",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "If specified (proof.cryptosuite), its value MUST be a string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If specified (proof.cryptosuite), its value MUST be a string.",
              "body": "function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.';\n        for(const proof of proofs) {\n          if(proof.cryptosuite) {\n            proof.cryptosuite.should.be.a(\n              'string',\n              'cryptosuite value MUST be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "lOezDY1VoQtL1FXtONFd9",
              "ctx": null,
              "_testId": "urn:uuid:0470c106-03b4-4389-9469-6efc18cd44bb",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If specified (proof.cryptosuite), its value MUST be a string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If specified (proof.cryptosuite), its value MUST be a string.",
              "body": "function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.';\n        for(const proof of proofs) {\n          if(proof.cryptosuite) {\n            proof.cryptosuite.should.be.a(\n              'string',\n              'cryptosuite value MUST be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "ITYGDAwZUr2tdgN6cZVg4",
              "ctx": null,
              "_testId": "urn:uuid:bf538e7e-5d2f-4e22-a335-f396a3cc47bd",
              "cell": {
                "columnId": "Trential",
                "rowId": "If specified (proof.cryptosuite), its value MUST be a string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "cell": {
                "rowId": "If specified (proof.cryptosuite), its value MUST be a string.",
                "colId": "Trinsic"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            },
            {
              "type": "test",
              "title": "If specified (proof.cryptosuite), its value MUST be a string.",
              "body": "function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.';\n        for(const proof of proofs) {\n          if(proof.cryptosuite) {\n            proof.cryptosuite.should.be.a(\n              'string',\n              'cryptosuite value MUST be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "iAuZinUgxmMzzxejDSMww",
              "ctx": null,
              "_testId": "urn:uuid:f0cb9fa6-a8a4-4506-812c-9b964607404d",
              "cell": {
                "columnId": "bovine",
                "rowId": "If specified (proof.cryptosuite), its value MUST be a string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "A verification method is the means and information needed to verify the proof. If included, the value MUST be a string that maps to a [URL].",
          "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=A%20verification%20method%20is%20the%20means%20and%20information%20needed%20to%20verify%20the%20proof.%20If%20included%2C%20the%20value%20MUST%20be%20a%20string%20that%20maps%20to%20a%20%5BURL%5D.",
          "cells": [
            {
              "cell": {
                "rowId": "A verification method is the means and information needed to verify the proof. If included, the value MUST be a string that maps to a [URL].",
                "colId": "apicatalog.com"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            },
            {
              "type": "test",
              "title": "A verification method is the means and information needed to verify the proof. If included, the value MUST be a string that maps to a [URL].",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=A%20verification%20method%20is%20the%20means%20and%20information%20needed%20to%20verify%20the%20proof.%20If%20included%2C%20the%20value%20MUST%20be%20a%20string%20that%20maps%20to%20a%20%5BURL%5D.';\n      for(const proof of proofs) {\n        if(!data || !data?.['@context']) {\n          throw new Error(`Expected ${vendorName} to issue a VC.`);\n        }\n        await shouldMapToUrl({\n          doc: {\n            '@context': data['@context'],\n            ...proof\n          },\n          term: 'https://w3id.org/security#verificationMethod',\n          prop: '@id',\n          documentLoader\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "WZsrG-ZB-wun3Jr0ffXeG",
              "ctx": null,
              "_testId": "urn:uuid:4801de88-0bba-453e-84bf-08b46a773198",
              "cell": {
                "columnId": "Aviary Tech",
                "rowId": "A verification method is the means and information needed to verify the proof. If included, the value MUST be a string that maps to a [URL]."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=A%20verification%20method%20is%20the%20means%20and%20information%20needed%20to%20verify%20the%20proof.%20If%20included%2C%20the%20value%20MUST%20be%20a%20string%20that%20maps%20to%20a%20%5BURL%5D.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2382,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 2,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "A verification method is the means and information needed to verify the proof. If included, the value MUST be a string that maps to a [URL].",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=A%20verification%20method%20is%20the%20means%20and%20information%20needed%20to%20verify%20the%20proof.%20If%20included%2C%20the%20value%20MUST%20be%20a%20string%20that%20maps%20to%20a%20%5BURL%5D.';\n      for(const proof of proofs) {\n        if(!data || !data?.['@context']) {\n          throw new Error(`Expected ${vendorName} to issue a VC.`);\n        }\n        await shouldMapToUrl({\n          doc: {\n            '@context': data['@context'],\n            ...proof\n          },\n          term: 'https://w3id.org/security#verificationMethod',\n          prop: '@id',\n          documentLoader\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "KD39x8W5HyNa6QWjqPKRz",
              "ctx": null,
              "_testId": "urn:uuid:4d5a2957-d54d-4adb-8ce0-e03f4231fa4e",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "A verification method is the means and information needed to verify the proof. If included, the value MUST be a string that maps to a [URL]."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=A%20verification%20method%20is%20the%20means%20and%20information%20needed%20to%20verify%20the%20proof.%20If%20included%2C%20the%20value%20MUST%20be%20a%20string%20that%20maps%20to%20a%20%5BURL%5D.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3126,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 2,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "A verification method is the means and information needed to verify the proof. If included, the value MUST be a string that maps to a [URL].",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=A%20verification%20method%20is%20the%20means%20and%20information%20needed%20to%20verify%20the%20proof.%20If%20included%2C%20the%20value%20MUST%20be%20a%20string%20that%20maps%20to%20a%20%5BURL%5D.';\n      for(const proof of proofs) {\n        if(!data || !data?.['@context']) {\n          throw new Error(`Expected ${vendorName} to issue a VC.`);\n        }\n        await shouldMapToUrl({\n          doc: {\n            '@context': data['@context'],\n            ...proof\n          },\n          term: 'https://w3id.org/security#verificationMethod',\n          prop: '@id',\n          documentLoader\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "xWyqxUYMNP57vQPRlo1lD",
              "ctx": null,
              "_testId": "urn:uuid:bf872802-d8b3-4165-a284-78ebc2e6687d",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "A verification method is the means and information needed to verify the proof. If included, the value MUST be a string that maps to a [URL]."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=A%20verification%20method%20is%20the%20means%20and%20information%20needed%20to%20verify%20the%20proof.%20If%20included%2C%20the%20value%20MUST%20be%20a%20string%20that%20maps%20to%20a%20%5BURL%5D.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3744,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "A verification method is the means and information needed to verify the proof. If included, the value MUST be a string that maps to a [URL].",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=A%20verification%20method%20is%20the%20means%20and%20information%20needed%20to%20verify%20the%20proof.%20If%20included%2C%20the%20value%20MUST%20be%20a%20string%20that%20maps%20to%20a%20%5BURL%5D.';\n      for(const proof of proofs) {\n        if(!data || !data?.['@context']) {\n          throw new Error(`Expected ${vendorName} to issue a VC.`);\n        }\n        await shouldMapToUrl({\n          doc: {\n            '@context': data['@context'],\n            ...proof\n          },\n          term: 'https://w3id.org/security#verificationMethod',\n          prop: '@id',\n          documentLoader\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "R_Xkw2KPs1LuVc6k_9HoJ",
              "ctx": null,
              "_testId": "urn:uuid:e576002d-00e1-4042-8d09-bc6e2bfa43ac",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "A verification method is the means and information needed to verify the proof. If included, the value MUST be a string that maps to a [URL]."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=A%20verification%20method%20is%20the%20means%20and%20information%20needed%20to%20verify%20the%20proof.%20If%20included%2C%20the%20value%20MUST%20be%20a%20string%20that%20maps%20to%20a%20%5BURL%5D.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5204,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected property \"https://w3id.org/security#verificationMethod\" to exist.: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected property \"https://w3id.org/security#verificationMethod\" to exist.: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at shouldMapToUrl (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:216:12)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/suites/create.js:174:9)"
              }
            },
            {
              "type": "test",
              "title": "A verification method is the means and information needed to verify the proof. If included, the value MUST be a string that maps to a [URL].",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=A%20verification%20method%20is%20the%20means%20and%20information%20needed%20to%20verify%20the%20proof.%20If%20included%2C%20the%20value%20MUST%20be%20a%20string%20that%20maps%20to%20a%20%5BURL%5D.';\n      for(const proof of proofs) {\n        if(!data || !data?.['@context']) {\n          throw new Error(`Expected ${vendorName} to issue a VC.`);\n        }\n        await shouldMapToUrl({\n          doc: {\n            '@context': data['@context'],\n            ...proof\n          },\n          term: 'https://w3id.org/security#verificationMethod',\n          prop: '@id',\n          documentLoader\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "lOezDY1VoQtL1FXtONFd9",
              "ctx": null,
              "_testId": "urn:uuid:2b11270f-738c-4846-a24e-4f31a2b567e5",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "A verification method is the means and information needed to verify the proof. If included, the value MUST be a string that maps to a [URL]."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=A%20verification%20method%20is%20the%20means%20and%20information%20needed%20to%20verify%20the%20proof.%20If%20included%2C%20the%20value%20MUST%20be%20a%20string%20that%20maps%20to%20a%20%5BURL%5D.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6946,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "A verification method is the means and information needed to verify the proof. If included, the value MUST be a string that maps to a [URL].",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=A%20verification%20method%20is%20the%20means%20and%20information%20needed%20to%20verify%20the%20proof.%20If%20included%2C%20the%20value%20MUST%20be%20a%20string%20that%20maps%20to%20a%20%5BURL%5D.';\n      for(const proof of proofs) {\n        if(!data || !data?.['@context']) {\n          throw new Error(`Expected ${vendorName} to issue a VC.`);\n        }\n        await shouldMapToUrl({\n          doc: {\n            '@context': data['@context'],\n            ...proof\n          },\n          term: 'https://w3id.org/security#verificationMethod',\n          prop: '@id',\n          documentLoader\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "ITYGDAwZUr2tdgN6cZVg4",
              "ctx": null,
              "_testId": "urn:uuid:0dfab051-097b-48a6-a98c-4609eaf05c61",
              "cell": {
                "columnId": "Trential",
                "rowId": "A verification method is the means and information needed to verify the proof. If included, the value MUST be a string that maps to a [URL]."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=A%20verification%20method%20is%20the%20means%20and%20information%20needed%20to%20verify%20the%20proof.%20If%20included%2C%20the%20value%20MUST%20be%20a%20string%20that%20maps%20to%20a%20%5BURL%5D.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9442,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "cell": {
                "rowId": "A verification method is the means and information needed to verify the proof. If included, the value MUST be a string that maps to a [URL].",
                "colId": "Trinsic"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            },
            {
              "type": "test",
              "title": "A verification method is the means and information needed to verify the proof. If included, the value MUST be a string that maps to a [URL].",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=A%20verification%20method%20is%20the%20means%20and%20information%20needed%20to%20verify%20the%20proof.%20If%20included%2C%20the%20value%20MUST%20be%20a%20string%20that%20maps%20to%20a%20%5BURL%5D.';\n      for(const proof of proofs) {\n        if(!data || !data?.['@context']) {\n          throw new Error(`Expected ${vendorName} to issue a VC.`);\n        }\n        await shouldMapToUrl({\n          doc: {\n            '@context': data['@context'],\n            ...proof\n          },\n          term: 'https://w3id.org/security#verificationMethod',\n          prop: '@id',\n          documentLoader\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "iAuZinUgxmMzzxejDSMww",
              "ctx": null,
              "_testId": "urn:uuid:980dd8ae-a678-4158-855b-4974844f9c97",
              "cell": {
                "columnId": "bovine",
                "rowId": "A verification method is the means and information needed to verify the proof. If included, the value MUST be a string that maps to a [URL]."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=A%20verification%20method%20is%20the%20means%20and%20information%20needed%20to%20verify%20the%20proof.%20If%20included%2C%20the%20value%20MUST%20be%20a%20string%20that%20maps%20to%20a%20%5BURL%5D.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 13278,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "The reason the proof was created (\"proof.proofPurpose\") MUST be specified as a string that maps to a URL.",
          "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20reason%20the%20proof%20was%20created%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL",
          "cells": [
            {
              "cell": {
                "rowId": "The reason the proof was created (\"proof.proofPurpose\") MUST be specified as a string that maps to a URL.",
                "colId": "apicatalog.com"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            },
            {
              "type": "test",
              "title": "The reason the proof was created (\"proof.proofPurpose\") MUST be specified as a string that maps to a URL.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20reason%20the%20proof%20was%20created%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL';\n      for(const proof of proofs) {\n        proof.should.have.property('proofPurpose');\n        proof.proofPurpose.should.be.a('string');\n        await shouldMapToUrl({\n          doc: {\n            '@context': data['@context'],\n            ...proof\n          },\n          term: 'https://w3id.org/security#proofPurpose',\n          prop: '@id',\n          documentLoader\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "WZsrG-ZB-wun3Jr0ffXeG",
              "ctx": null,
              "_testId": "urn:uuid:ceeefb94-da91-4b78-bfb3-80b1960788fb",
              "cell": {
                "columnId": "Aviary Tech",
                "rowId": "The reason the proof was created (\"proof.proofPurpose\") MUST be specified as a string that maps to a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20reason%20the%20proof%20was%20created%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2384,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The reason the proof was created (\"proof.proofPurpose\") MUST be specified as a string that maps to a URL.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20reason%20the%20proof%20was%20created%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL';\n      for(const proof of proofs) {\n        proof.should.have.property('proofPurpose');\n        proof.proofPurpose.should.be.a('string');\n        await shouldMapToUrl({\n          doc: {\n            '@context': data['@context'],\n            ...proof\n          },\n          term: 'https://w3id.org/security#proofPurpose',\n          prop: '@id',\n          documentLoader\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "KD39x8W5HyNa6QWjqPKRz",
              "ctx": null,
              "_testId": "urn:uuid:1721244e-bb10-4c95-8656-3b0ff5a4ae7a",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The reason the proof was created (\"proof.proofPurpose\") MUST be specified as a string that maps to a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20reason%20the%20proof%20was%20created%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3127,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The reason the proof was created (\"proof.proofPurpose\") MUST be specified as a string that maps to a URL.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20reason%20the%20proof%20was%20created%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL';\n      for(const proof of proofs) {\n        proof.should.have.property('proofPurpose');\n        proof.proofPurpose.should.be.a('string');\n        await shouldMapToUrl({\n          doc: {\n            '@context': data['@context'],\n            ...proof\n          },\n          term: 'https://w3id.org/security#proofPurpose',\n          prop: '@id',\n          documentLoader\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "xWyqxUYMNP57vQPRlo1lD",
              "ctx": null,
              "_testId": "urn:uuid:4987115c-6e20-41c4-9673-01aed43160e6",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The reason the proof was created (\"proof.proofPurpose\") MUST be specified as a string that maps to a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20reason%20the%20proof%20was%20created%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3745,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The reason the proof was created (\"proof.proofPurpose\") MUST be specified as a string that maps to a URL.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20reason%20the%20proof%20was%20created%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL';\n      for(const proof of proofs) {\n        proof.should.have.property('proofPurpose');\n        proof.proofPurpose.should.be.a('string');\n        await shouldMapToUrl({\n          doc: {\n            '@context': data['@context'],\n            ...proof\n          },\n          term: 'https://w3id.org/security#proofPurpose',\n          prop: '@id',\n          documentLoader\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "R_Xkw2KPs1LuVc6k_9HoJ",
              "ctx": null,
              "_testId": "urn:uuid:ebf10d3e-3551-4406-86b3-cd7de6576d9f",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "The reason the proof was created (\"proof.proofPurpose\") MUST be specified as a string that maps to a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20reason%20the%20proof%20was%20created%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5205,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected property \"https://w3id.org/security#proofPurpose\" to exist.: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected property \"https://w3id.org/security#proofPurpose\" to exist.: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at shouldMapToUrl (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:216:12)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/suites/create.js:191:9)"
              }
            },
            {
              "type": "test",
              "title": "The reason the proof was created (\"proof.proofPurpose\") MUST be specified as a string that maps to a URL.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20reason%20the%20proof%20was%20created%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL';\n      for(const proof of proofs) {\n        proof.should.have.property('proofPurpose');\n        proof.proofPurpose.should.be.a('string');\n        await shouldMapToUrl({\n          doc: {\n            '@context': data['@context'],\n            ...proof\n          },\n          term: 'https://w3id.org/security#proofPurpose',\n          prop: '@id',\n          documentLoader\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "lOezDY1VoQtL1FXtONFd9",
              "ctx": null,
              "_testId": "urn:uuid:c5ce0de5-8b28-4fbd-87f6-a19355685091",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The reason the proof was created (\"proof.proofPurpose\") MUST be specified as a string that maps to a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20reason%20the%20proof%20was%20created%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6947,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The reason the proof was created (\"proof.proofPurpose\") MUST be specified as a string that maps to a URL.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20reason%20the%20proof%20was%20created%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL';\n      for(const proof of proofs) {\n        proof.should.have.property('proofPurpose');\n        proof.proofPurpose.should.be.a('string');\n        await shouldMapToUrl({\n          doc: {\n            '@context': data['@context'],\n            ...proof\n          },\n          term: 'https://w3id.org/security#proofPurpose',\n          prop: '@id',\n          documentLoader\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "ITYGDAwZUr2tdgN6cZVg4",
              "ctx": null,
              "_testId": "urn:uuid:c675f44d-541c-4666-a1fe-176e248248d9",
              "cell": {
                "columnId": "Trential",
                "rowId": "The reason the proof was created (\"proof.proofPurpose\") MUST be specified as a string that maps to a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20reason%20the%20proof%20was%20created%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9444,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "cell": {
                "rowId": "The reason the proof was created (\"proof.proofPurpose\") MUST be specified as a string that maps to a URL.",
                "colId": "Trinsic"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            },
            {
              "type": "test",
              "title": "The reason the proof was created (\"proof.proofPurpose\") MUST be specified as a string that maps to a URL.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20reason%20the%20proof%20was%20created%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL';\n      for(const proof of proofs) {\n        proof.should.have.property('proofPurpose');\n        proof.proofPurpose.should.be.a('string');\n        await shouldMapToUrl({\n          doc: {\n            '@context': data['@context'],\n            ...proof\n          },\n          term: 'https://w3id.org/security#proofPurpose',\n          prop: '@id',\n          documentLoader\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "iAuZinUgxmMzzxejDSMww",
              "ctx": null,
              "_testId": "urn:uuid:bd6361bb-4e3f-455a-bf92-64bc7df0d796",
              "cell": {
                "columnId": "bovine",
                "rowId": "The reason the proof was created (\"proof.proofPurpose\") MUST be specified as a string that maps to a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20reason%20the%20proof%20was%20created%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 13280,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "(\"proof.proofValue\") A string value that expresses base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The value MUST use a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification to express the binary data.",
          "link": "https://w3c.github.io/vc-data-integrity/#:~:text=A%20string%20value%20that%20expresses%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof%20using%20the%20verificationMethod%20specified.%20The%20value%20MUST%20use%20a%20header%20and%20encoding%20as%20described%20in%20Section%202.4%20Multibase%20of%20the%20Controller%20Documents%201.0%20specification%20to%20express%20the%20binary%20data.",
          "cells": [
            {
              "cell": {
                "rowId": "(\"proof.proofValue\") A string value that expresses base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The value MUST use a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification to express the binary data.",
                "colId": "apicatalog.com"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            },
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that expresses base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The value MUST use a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification to express the binary data.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=A%20string%20value%20that%20expresses%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof%20using%20the%20verificationMethod%20specified.%20The%20value%20MUST%20use%20a%20header%20and%20encoding%20as%20described%20in%20Section%202.4%20Multibase%20of%20the%20Controller%20Documents%201.0%20specification%20to%20express%20the%20binary%20data.';\n      for(const proof of proofs) {\n        should.exist(proof, 'Expected proof to exist.');\n        //FIXME the suite should pass in the expectedPrefix and\n        //encodingName or type\n        const {\n          prefix: expectedPrefix,\n          name: encodingName\n        } = expectedMultibasePrefix(proof.cryptosuite);\n        shouldHaveProofValue({proof, expectedPrefix, encodingName});\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "WZsrG-ZB-wun3Jr0ffXeG",
              "ctx": null,
              "_testId": "urn:uuid:58f8f481-3360-4784-9c1b-a3da2f35361a",
              "cell": {
                "columnId": "Aviary Tech",
                "rowId": "(\"proof.proofValue\") A string value that expresses base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The value MUST use a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification to express the binary data."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=A%20string%20value%20that%20expresses%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof%20using%20the%20verificationMethod%20specified.%20The%20value%20MUST%20use%20a%20header%20and%20encoding%20as%20described%20in%20Section%202.4%20Multibase%20of%20the%20Controller%20Documents%201.0%20specification%20to%20express%20the%20binary%20data.",
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that expresses base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The value MUST use a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification to express the binary data.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=A%20string%20value%20that%20expresses%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof%20using%20the%20verificationMethod%20specified.%20The%20value%20MUST%20use%20a%20header%20and%20encoding%20as%20described%20in%20Section%202.4%20Multibase%20of%20the%20Controller%20Documents%201.0%20specification%20to%20express%20the%20binary%20data.';\n      for(const proof of proofs) {\n        should.exist(proof, 'Expected proof to exist.');\n        //FIXME the suite should pass in the expectedPrefix and\n        //encodingName or type\n        const {\n          prefix: expectedPrefix,\n          name: encodingName\n        } = expectedMultibasePrefix(proof.cryptosuite);\n        shouldHaveProofValue({proof, expectedPrefix, encodingName});\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "KD39x8W5HyNa6QWjqPKRz",
              "ctx": null,
              "_testId": "urn:uuid:a82af823-f3c0-41ff-b2e4-35ec15c3a6ca",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "(\"proof.proofValue\") A string value that expresses base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The value MUST use a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification to express the binary data."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=A%20string%20value%20that%20expresses%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof%20using%20the%20verificationMethod%20specified.%20The%20value%20MUST%20use%20a%20header%20and%20encoding%20as%20described%20in%20Section%202.4%20Multibase%20of%20the%20Controller%20Documents%201.0%20specification%20to%20express%20the%20binary%20data.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that expresses base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The value MUST use a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification to express the binary data.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=A%20string%20value%20that%20expresses%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof%20using%20the%20verificationMethod%20specified.%20The%20value%20MUST%20use%20a%20header%20and%20encoding%20as%20described%20in%20Section%202.4%20Multibase%20of%20the%20Controller%20Documents%201.0%20specification%20to%20express%20the%20binary%20data.';\n      for(const proof of proofs) {\n        should.exist(proof, 'Expected proof to exist.');\n        //FIXME the suite should pass in the expectedPrefix and\n        //encodingName or type\n        const {\n          prefix: expectedPrefix,\n          name: encodingName\n        } = expectedMultibasePrefix(proof.cryptosuite);\n        shouldHaveProofValue({proof, expectedPrefix, encodingName});\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "xWyqxUYMNP57vQPRlo1lD",
              "ctx": null,
              "_testId": "urn:uuid:44f4e3a5-350f-4440-9044-cbcc6ca43073",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "(\"proof.proofValue\") A string value that expresses base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The value MUST use a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification to express the binary data."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=A%20string%20value%20that%20expresses%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof%20using%20the%20verificationMethod%20specified.%20The%20value%20MUST%20use%20a%20header%20and%20encoding%20as%20described%20in%20Section%202.4%20Multibase%20of%20the%20Controller%20Documents%201.0%20specification%20to%20express%20the%20binary%20data.",
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that expresses base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The value MUST use a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification to express the binary data.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=A%20string%20value%20that%20expresses%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof%20using%20the%20verificationMethod%20specified.%20The%20value%20MUST%20use%20a%20header%20and%20encoding%20as%20described%20in%20Section%202.4%20Multibase%20of%20the%20Controller%20Documents%201.0%20specification%20to%20express%20the%20binary%20data.';\n      for(const proof of proofs) {\n        should.exist(proof, 'Expected proof to exist.');\n        //FIXME the suite should pass in the expectedPrefix and\n        //encodingName or type\n        const {\n          prefix: expectedPrefix,\n          name: encodingName\n        } = expectedMultibasePrefix(proof.cryptosuite);\n        shouldHaveProofValue({proof, expectedPrefix, encodingName});\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "R_Xkw2KPs1LuVc6k_9HoJ",
              "ctx": null,
              "_testId": "urn:uuid:fcbc6965-fd21-4a95-bcbf-81dae43a0ac1",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "(\"proof.proofValue\") A string value that expresses base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The value MUST use a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification to express the binary data."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=A%20string%20value%20that%20expresses%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof%20using%20the%20verificationMethod%20specified.%20The%20value%20MUST%20use%20a%20header%20and%20encoding%20as%20described%20in%20Section%202.4%20Multibase%20of%20the%20Controller%20Documents%201.0%20specification%20to%20express%20the%20binary%20data.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that expresses base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The value MUST use a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification to express the binary data.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=A%20string%20value%20that%20expresses%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof%20using%20the%20verificationMethod%20specified.%20The%20value%20MUST%20use%20a%20header%20and%20encoding%20as%20described%20in%20Section%202.4%20Multibase%20of%20the%20Controller%20Documents%201.0%20specification%20to%20express%20the%20binary%20data.';\n      for(const proof of proofs) {\n        should.exist(proof, 'Expected proof to exist.');\n        //FIXME the suite should pass in the expectedPrefix and\n        //encodingName or type\n        const {\n          prefix: expectedPrefix,\n          name: encodingName\n        } = expectedMultibasePrefix(proof.cryptosuite);\n        shouldHaveProofValue({proof, expectedPrefix, encodingName});\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "lOezDY1VoQtL1FXtONFd9",
              "ctx": null,
              "_testId": "urn:uuid:4aad04fe-e45e-4ca5-bf11-09087681443a",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "(\"proof.proofValue\") A string value that expresses base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The value MUST use a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification to express the binary data."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=A%20string%20value%20that%20expresses%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof%20using%20the%20verificationMethod%20specified.%20The%20value%20MUST%20use%20a%20header%20and%20encoding%20as%20described%20in%20Section%202.4%20Multibase%20of%20the%20Controller%20Documents%201.0%20specification%20to%20express%20the%20binary%20data.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that expresses base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The value MUST use a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification to express the binary data.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=A%20string%20value%20that%20expresses%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof%20using%20the%20verificationMethod%20specified.%20The%20value%20MUST%20use%20a%20header%20and%20encoding%20as%20described%20in%20Section%202.4%20Multibase%20of%20the%20Controller%20Documents%201.0%20specification%20to%20express%20the%20binary%20data.';\n      for(const proof of proofs) {\n        should.exist(proof, 'Expected proof to exist.');\n        //FIXME the suite should pass in the expectedPrefix and\n        //encodingName or type\n        const {\n          prefix: expectedPrefix,\n          name: encodingName\n        } = expectedMultibasePrefix(proof.cryptosuite);\n        shouldHaveProofValue({proof, expectedPrefix, encodingName});\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "ITYGDAwZUr2tdgN6cZVg4",
              "ctx": null,
              "_testId": "urn:uuid:23432841-1756-4f3b-bc77-2fde7787761c",
              "cell": {
                "columnId": "Trential",
                "rowId": "(\"proof.proofValue\") A string value that expresses base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The value MUST use a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification to express the binary data."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=A%20string%20value%20that%20expresses%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof%20using%20the%20verificationMethod%20specified.%20The%20value%20MUST%20use%20a%20header%20and%20encoding%20as%20described%20in%20Section%202.4%20Multibase%20of%20the%20Controller%20Documents%201.0%20specification%20to%20express%20the%20binary%20data.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "cell": {
                "rowId": "(\"proof.proofValue\") A string value that expresses base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The value MUST use a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification to express the binary data.",
                "colId": "Trinsic"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            },
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that expresses base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The value MUST use a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification to express the binary data.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=A%20string%20value%20that%20expresses%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof%20using%20the%20verificationMethod%20specified.%20The%20value%20MUST%20use%20a%20header%20and%20encoding%20as%20described%20in%20Section%202.4%20Multibase%20of%20the%20Controller%20Documents%201.0%20specification%20to%20express%20the%20binary%20data.';\n      for(const proof of proofs) {\n        should.exist(proof, 'Expected proof to exist.');\n        //FIXME the suite should pass in the expectedPrefix and\n        //encodingName or type\n        const {\n          prefix: expectedPrefix,\n          name: encodingName\n        } = expectedMultibasePrefix(proof.cryptosuite);\n        shouldHaveProofValue({proof, expectedPrefix, encodingName});\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "iAuZinUgxmMzzxejDSMww",
              "ctx": null,
              "_testId": "urn:uuid:19545ce0-cc48-42e8-8cb8-fa51ce164aba",
              "cell": {
                "columnId": "bovine",
                "rowId": "(\"proof.proofValue\") A string value that expresses base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The value MUST use a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification to express the binary data."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=A%20string%20value%20that%20expresses%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof%20using%20the%20verificationMethod%20specified.%20The%20value%20MUST%20use%20a%20header%20and%20encoding%20as%20described%20in%20Section%202.4%20Multibase%20of%20the%20Controller%20Documents%201.0%20specification%20to%20express%20the%20binary%20data.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "Cryptographic suite designers MUST use mandatory proof value properties defined in Section 2.1 Proofs, and MAY define other properties specific to their cryptographic suite.",
          "link": "https://w3c.github.io/vc-data-integrity/#add-proof:~:text=MUST%20use%20mandatory%20proof%20value%20properties%20defined",
          "cells": [
            {
              "cell": {
                "rowId": "Cryptographic suite designers MUST use mandatory proof value properties defined in Section 2.1 Proofs, and MAY define other properties specific to their cryptographic suite.",
                "colId": "apicatalog.com"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            },
            {
              "type": "test",
              "title": "Cryptographic suite designers MUST use mandatory proof value properties defined in Section 2.1 Proofs, and MAY define other properties specific to their cryptographic suite.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#add-proof:~:text=MUST%20use%20mandatory%20proof%20value%20properties%20defined';\n      for(const proof of proofs) {\n        shouldBeProof({proof});\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "WZsrG-ZB-wun3Jr0ffXeG",
              "ctx": null,
              "_testId": "urn:uuid:a5888baf-c956-4f54-945f-09c913427e57",
              "cell": {
                "columnId": "Aviary Tech",
                "rowId": "Cryptographic suite designers MUST use mandatory proof value properties defined in Section 2.1 Proofs, and MAY define other properties specific to their cryptographic suite."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#add-proof:~:text=MUST%20use%20mandatory%20proof%20value%20properties%20defined",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2386,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Cryptographic suite designers MUST use mandatory proof value properties defined in Section 2.1 Proofs, and MAY define other properties specific to their cryptographic suite.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#add-proof:~:text=MUST%20use%20mandatory%20proof%20value%20properties%20defined';\n      for(const proof of proofs) {\n        shouldBeProof({proof});\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "KD39x8W5HyNa6QWjqPKRz",
              "ctx": null,
              "_testId": "urn:uuid:f555ba43-7c7a-44b0-ab7e-84c6ad0354e1",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "Cryptographic suite designers MUST use mandatory proof value properties defined in Section 2.1 Proofs, and MAY define other properties specific to their cryptographic suite."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#add-proof:~:text=MUST%20use%20mandatory%20proof%20value%20properties%20defined",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3133,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Cryptographic suite designers MUST use mandatory proof value properties defined in Section 2.1 Proofs, and MAY define other properties specific to their cryptographic suite.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#add-proof:~:text=MUST%20use%20mandatory%20proof%20value%20properties%20defined';\n      for(const proof of proofs) {\n        shouldBeProof({proof});\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "xWyqxUYMNP57vQPRlo1lD",
              "ctx": null,
              "_testId": "urn:uuid:12e30bf4-189b-45ec-b584-367ee535522d",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "Cryptographic suite designers MUST use mandatory proof value properties defined in Section 2.1 Proofs, and MAY define other properties specific to their cryptographic suite."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#add-proof:~:text=MUST%20use%20mandatory%20proof%20value%20properties%20defined",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3747,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Cryptographic suite designers MUST use mandatory proof value properties defined in Section 2.1 Proofs, and MAY define other properties specific to their cryptographic suite.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#add-proof:~:text=MUST%20use%20mandatory%20proof%20value%20properties%20defined';\n      for(const proof of proofs) {\n        shouldBeProof({proof});\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "R_Xkw2KPs1LuVc6k_9HoJ",
              "ctx": null,
              "_testId": "urn:uuid:06b7452f-0338-4633-814e-1f000f228903",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "Cryptographic suite designers MUST use mandatory proof value properties defined in Section 2.1 Proofs, and MAY define other properties specific to their cryptographic suite."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#add-proof:~:text=MUST%20use%20mandatory%20proof%20value%20properties%20defined",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5207,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Cryptographic suite designers MUST use mandatory proof value properties defined in Section 2.1 Proofs, and MAY define other properties specific to their cryptographic suite.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#add-proof:~:text=MUST%20use%20mandatory%20proof%20value%20properties%20defined';\n      for(const proof of proofs) {\n        shouldBeProof({proof});\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "lOezDY1VoQtL1FXtONFd9",
              "ctx": null,
              "_testId": "urn:uuid:5d1d8f3a-666d-4097-b5ba-38eda72a6a99",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "Cryptographic suite designers MUST use mandatory proof value properties defined in Section 2.1 Proofs, and MAY define other properties specific to their cryptographic suite."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#add-proof:~:text=MUST%20use%20mandatory%20proof%20value%20properties%20defined",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6948,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Cryptographic suite designers MUST use mandatory proof value properties defined in Section 2.1 Proofs, and MAY define other properties specific to their cryptographic suite.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#add-proof:~:text=MUST%20use%20mandatory%20proof%20value%20properties%20defined';\n      for(const proof of proofs) {\n        shouldBeProof({proof});\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "ITYGDAwZUr2tdgN6cZVg4",
              "ctx": null,
              "_testId": "urn:uuid:1e77112e-a8eb-4027-a2df-ef33aea5875e",
              "cell": {
                "columnId": "Trential",
                "rowId": "Cryptographic suite designers MUST use mandatory proof value properties defined in Section 2.1 Proofs, and MAY define other properties specific to their cryptographic suite."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#add-proof:~:text=MUST%20use%20mandatory%20proof%20value%20properties%20defined",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9446,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "cell": {
                "rowId": "Cryptographic suite designers MUST use mandatory proof value properties defined in Section 2.1 Proofs, and MAY define other properties specific to their cryptographic suite.",
                "colId": "Trinsic"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            },
            {
              "type": "test",
              "title": "Cryptographic suite designers MUST use mandatory proof value properties defined in Section 2.1 Proofs, and MAY define other properties specific to their cryptographic suite.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#add-proof:~:text=MUST%20use%20mandatory%20proof%20value%20properties%20defined';\n      for(const proof of proofs) {\n        shouldBeProof({proof});\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "iAuZinUgxmMzzxejDSMww",
              "ctx": null,
              "_testId": "urn:uuid:b344b55f-5e34-4b52-bce9-e715de21db46",
              "cell": {
                "columnId": "bovine",
                "rowId": "Cryptographic suite designers MUST use mandatory proof value properties defined in Section 2.1 Proofs, and MAY define other properties specific to their cryptographic suite."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#add-proof:~:text=MUST%20use%20mandatory%20proof%20value%20properties%20defined",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 13282,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
          "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
          "cells": [
            {
              "cell": {
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
                "colId": "apicatalog.com"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            },
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      const undefinedType = structuredClone(credential);\n      undefinedType.type.push('InvalidType');\n      await shouldFailIssuance({\n        credential: undefinedType,\n        issuer,\n        reason: 'Expected issuer to error when VC has an undefined type.'\n      });\n      const undefinedTerm = structuredClone(credential);\n      undefinedTerm.credentialSubject.invalidTerm = 'invalidTerm';\n      await shouldFailIssuance({\n        credential: undefinedTerm,\n        issuer,\n        reason: 'Expected issuer to error when VC has an undefined term.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "WZsrG-ZB-wun3Jr0ffXeG",
              "ctx": null,
              "_testId": "urn:uuid:ac8e7bbc-dc99-4668-bb14-53c14f4ecfbe",
              "cell": {
                "columnId": "Aviary Tech",
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2387,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 219,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      const undefinedType = structuredClone(credential);\n      undefinedType.type.push('InvalidType');\n      await shouldFailIssuance({\n        credential: undefinedType,\n        issuer,\n        reason: 'Expected issuer to error when VC has an undefined type.'\n      });\n      const undefinedTerm = structuredClone(credential);\n      undefinedTerm.credentialSubject.invalidTerm = 'invalidTerm';\n      await shouldFailIssuance({\n        credential: undefinedTerm,\n        issuer,\n        reason: 'Expected issuer to error when VC has an undefined term.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "KD39x8W5HyNa6QWjqPKRz",
              "ctx": null,
              "_testId": "urn:uuid:2a7a97ba-4c13-4641-82e1-7008c113c0e4",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3133,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 192,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      const undefinedType = structuredClone(credential);\n      undefinedType.type.push('InvalidType');\n      await shouldFailIssuance({\n        credential: undefinedType,\n        issuer,\n        reason: 'Expected issuer to error when VC has an undefined type.'\n      });\n      const undefinedTerm = structuredClone(credential);\n      undefinedTerm.credentialSubject.invalidTerm = 'invalidTerm';\n      await shouldFailIssuance({\n        credential: undefinedTerm,\n        issuer,\n        reason: 'Expected issuer to error when VC has an undefined term.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "xWyqxUYMNP57vQPRlo1lD",
              "ctx": null,
              "_testId": "urn:uuid:fe14ef11-630b-4941-baf3-3ab3b88ecc97",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3747,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 178,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      const undefinedType = structuredClone(credential);\n      undefinedType.type.push('InvalidType');\n      await shouldFailIssuance({\n        credential: undefinedType,\n        issuer,\n        reason: 'Expected issuer to error when VC has an undefined type.'\n      });\n      const undefinedTerm = structuredClone(credential);\n      undefinedTerm.credentialSubject.invalidTerm = 'invalidTerm';\n      await shouldFailIssuance({\n        credential: undefinedTerm,\n        issuer,\n        reason: 'Expected issuer to error when VC has an undefined term.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "R_Xkw2KPs1LuVc6k_9HoJ",
              "ctx": null,
              "_testId": "urn:uuid:a2eb5879-f51a-4f47-82fe-7ca3c647cbf2",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5207,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1035,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      const undefinedType = structuredClone(credential);\n      undefinedType.type.push('InvalidType');\n      await shouldFailIssuance({\n        credential: undefinedType,\n        issuer,\n        reason: 'Expected issuer to error when VC has an undefined type.'\n      });\n      const undefinedTerm = structuredClone(credential);\n      undefinedTerm.credentialSubject.invalidTerm = 'invalidTerm';\n      await shouldFailIssuance({\n        credential: undefinedTerm,\n        issuer,\n        reason: 'Expected issuer to error when VC has an undefined term.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "lOezDY1VoQtL1FXtONFd9",
              "ctx": null,
              "_testId": "urn:uuid:d916c568-1a45-4e77-9f84-92b68b928432",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6949,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 514,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      const undefinedType = structuredClone(credential);\n      undefinedType.type.push('InvalidType');\n      await shouldFailIssuance({\n        credential: undefinedType,\n        issuer,\n        reason: 'Expected issuer to error when VC has an undefined type.'\n      });\n      const undefinedTerm = structuredClone(credential);\n      undefinedTerm.credentialSubject.invalidTerm = 'invalidTerm';\n      await shouldFailIssuance({\n        credential: undefinedTerm,\n        issuer,\n        reason: 'Expected issuer to error when VC has an undefined term.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "ITYGDAwZUr2tdgN6cZVg4",
              "ctx": null,
              "_testId": "urn:uuid:37d89542-9b4f-41fd-a908-f6b8812b5bd0",
              "cell": {
                "columnId": "Trential",
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9446,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1346,
              "state": "passed",
              "speed": "slow"
            },
            {
              "cell": {
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
                "colId": "Trinsic"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            },
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      const undefinedType = structuredClone(credential);\n      undefinedType.type.push('InvalidType');\n      await shouldFailIssuance({\n        credential: undefinedType,\n        issuer,\n        reason: 'Expected issuer to error when VC has an undefined type.'\n      });\n      const undefinedTerm = structuredClone(credential);\n      undefinedTerm.credentialSubject.invalidTerm = 'invalidTerm';\n      await shouldFailIssuance({\n        credential: undefinedTerm,\n        issuer,\n        reason: 'Expected issuer to error when VC has an undefined term.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "iAuZinUgxmMzzxejDSMww",
              "ctx": null,
              "_testId": "urn:uuid:620ccae4-d7f2-4173-8490-f0af56844b73",
              "cell": {
                "columnId": "bovine",
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 13282,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 155,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected issuer to error when VC has an undefined type.: expected Response { status: 200, statusText: 'OK', headers: Headers { server: 'nginx/1.18.0 (Ubuntu)', date: 'Sun, 26 Jan 2025 05:05:39 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'content-encoding': 'gzip', Authorization: 'sanitized to prevent exposure of secrets' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected issuer to error when VC has an undefined type.: expected Response { status: 200, statusText: 'OK', headers: Headers { server: 'nginx/1.18.0 (Ubuntu)', date: 'Sun, 26 Jan 2025 05:05:39 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'content-encoding': 'gzip', Authorization: 'sanitized to prevent exposure of secrets' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at shouldFailIssuance (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:105:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/suites/create.js:235:7)"
              }
            }
          ]
        },
        {
          "id": "If the algorithm produces an error, the error MUST be propagated and SHOULD convey the error type.",
          "link": "https://w3c.github.io/vc-data-integrity/#dfn-input-document:~:text=If%20the%20algorithm%20produces%20an%20error%2C%20the%20error%20MUST%20be%20propagated%20and%20SHOULD%20convey%20the%20error%20type",
          "cells": [
            {
              "cell": {
                "rowId": "If the algorithm produces an error, the error MUST be propagated and SHOULD convey the error type.",
                "colId": "apicatalog.com"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            },
            {
              "type": "test",
              "title": "If the algorithm produces an error, the error MUST be propagated and SHOULD convey the error type.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#dfn-input-document:~:text=If%20the%20algorithm%20produces%20an%20error%2C%20the%20error%20MUST%20be%20propagated%20and%20SHOULD%20convey%20the%20error%20type';\n      const noSubject = structuredClone(credential);\n      delete noSubject.credentialSubject;\n      // FIXME this test should look for a propagated error such as\n      // PROOF_GENERATION_ERROR\n      await shouldFailIssuance({\n        credential: noSubject,\n        issuer,\n        reason: 'Expected issuer to error when VC has no credentialSubject.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "WZsrG-ZB-wun3Jr0ffXeG",
              "ctx": null,
              "_testId": "urn:uuid:dbe6800e-e886-413a-a2bc-68a111a113d6",
              "cell": {
                "columnId": "Aviary Tech",
                "rowId": "If the algorithm produces an error, the error MUST be propagated and SHOULD convey the error type."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#dfn-input-document:~:text=If%20the%20algorithm%20produces%20an%20error%2C%20the%20error%20MUST%20be%20propagated%20and%20SHOULD%20convey%20the%20error%20type",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2606,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 49,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the algorithm produces an error, the error MUST be propagated and SHOULD convey the error type.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#dfn-input-document:~:text=If%20the%20algorithm%20produces%20an%20error%2C%20the%20error%20MUST%20be%20propagated%20and%20SHOULD%20convey%20the%20error%20type';\n      const noSubject = structuredClone(credential);\n      delete noSubject.credentialSubject;\n      // FIXME this test should look for a propagated error such as\n      // PROOF_GENERATION_ERROR\n      await shouldFailIssuance({\n        credential: noSubject,\n        issuer,\n        reason: 'Expected issuer to error when VC has no credentialSubject.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "KD39x8W5HyNa6QWjqPKRz",
              "ctx": null,
              "_testId": "urn:uuid:7ba64e56-d382-41ed-8f38-23017996c33c",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the algorithm produces an error, the error MUST be propagated and SHOULD convey the error type."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#dfn-input-document:~:text=If%20the%20algorithm%20produces%20an%20error%2C%20the%20error%20MUST%20be%20propagated%20and%20SHOULD%20convey%20the%20error%20type",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3326,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 244,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the algorithm produces an error, the error MUST be propagated and SHOULD convey the error type.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#dfn-input-document:~:text=If%20the%20algorithm%20produces%20an%20error%2C%20the%20error%20MUST%20be%20propagated%20and%20SHOULD%20convey%20the%20error%20type';\n      const noSubject = structuredClone(credential);\n      delete noSubject.credentialSubject;\n      // FIXME this test should look for a propagated error such as\n      // PROOF_GENERATION_ERROR\n      await shouldFailIssuance({\n        credential: noSubject,\n        issuer,\n        reason: 'Expected issuer to error when VC has no credentialSubject.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "xWyqxUYMNP57vQPRlo1lD",
              "ctx": null,
              "_testId": "urn:uuid:6afef002-4a5a-4f3a-b745-73555df94cc3",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If the algorithm produces an error, the error MUST be propagated and SHOULD convey the error type."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#dfn-input-document:~:text=If%20the%20algorithm%20produces%20an%20error%2C%20the%20error%20MUST%20be%20propagated%20and%20SHOULD%20convey%20the%20error%20type",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3926,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 21,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the algorithm produces an error, the error MUST be propagated and SHOULD convey the error type.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#dfn-input-document:~:text=If%20the%20algorithm%20produces%20an%20error%2C%20the%20error%20MUST%20be%20propagated%20and%20SHOULD%20convey%20the%20error%20type';\n      const noSubject = structuredClone(credential);\n      delete noSubject.credentialSubject;\n      // FIXME this test should look for a propagated error such as\n      // PROOF_GENERATION_ERROR\n      await shouldFailIssuance({\n        credential: noSubject,\n        issuer,\n        reason: 'Expected issuer to error when VC has no credentialSubject.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "R_Xkw2KPs1LuVc6k_9HoJ",
              "ctx": null,
              "_testId": "urn:uuid:de017df3-a4f3-44b4-8f6f-3c69de41ad10",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "If the algorithm produces an error, the error MUST be propagated and SHOULD convey the error type."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#dfn-input-document:~:text=If%20the%20algorithm%20produces%20an%20error%2C%20the%20error%20MUST%20be%20propagated%20and%20SHOULD%20convey%20the%20error%20type",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6243,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 271,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the algorithm produces an error, the error MUST be propagated and SHOULD convey the error type.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#dfn-input-document:~:text=If%20the%20algorithm%20produces%20an%20error%2C%20the%20error%20MUST%20be%20propagated%20and%20SHOULD%20convey%20the%20error%20type';\n      const noSubject = structuredClone(credential);\n      delete noSubject.credentialSubject;\n      // FIXME this test should look for a propagated error such as\n      // PROOF_GENERATION_ERROR\n      await shouldFailIssuance({\n        credential: noSubject,\n        issuer,\n        reason: 'Expected issuer to error when VC has no credentialSubject.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "lOezDY1VoQtL1FXtONFd9",
              "ctx": null,
              "_testId": "urn:uuid:2f94bbfd-5d8e-4ec8-9dfa-46d27b8a3dc8",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If the algorithm produces an error, the error MUST be propagated and SHOULD convey the error type."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#dfn-input-document:~:text=If%20the%20algorithm%20produces%20an%20error%2C%20the%20error%20MUST%20be%20propagated%20and%20SHOULD%20convey%20the%20error%20type",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7463,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 119,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the algorithm produces an error, the error MUST be propagated and SHOULD convey the error type.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#dfn-input-document:~:text=If%20the%20algorithm%20produces%20an%20error%2C%20the%20error%20MUST%20be%20propagated%20and%20SHOULD%20convey%20the%20error%20type';\n      const noSubject = structuredClone(credential);\n      delete noSubject.credentialSubject;\n      // FIXME this test should look for a propagated error such as\n      // PROOF_GENERATION_ERROR\n      await shouldFailIssuance({\n        credential: noSubject,\n        issuer,\n        reason: 'Expected issuer to error when VC has no credentialSubject.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "ITYGDAwZUr2tdgN6cZVg4",
              "ctx": null,
              "_testId": "urn:uuid:d884e34d-5d2b-4165-90c8-a952e6d2c3e1",
              "cell": {
                "columnId": "Trential",
                "rowId": "If the algorithm produces an error, the error MUST be propagated and SHOULD convey the error type."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#dfn-input-document:~:text=If%20the%20algorithm%20produces%20an%20error%2C%20the%20error%20MUST%20be%20propagated%20and%20SHOULD%20convey%20the%20error%20type",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 10793,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 244,
              "state": "passed",
              "speed": "slow"
            },
            {
              "cell": {
                "rowId": "If the algorithm produces an error, the error MUST be propagated and SHOULD convey the error type.",
                "colId": "Trinsic"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            },
            {
              "type": "test",
              "title": "If the algorithm produces an error, the error MUST be propagated and SHOULD convey the error type.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#dfn-input-document:~:text=If%20the%20algorithm%20produces%20an%20error%2C%20the%20error%20MUST%20be%20propagated%20and%20SHOULD%20convey%20the%20error%20type';\n      const noSubject = structuredClone(credential);\n      delete noSubject.credentialSubject;\n      // FIXME this test should look for a propagated error such as\n      // PROOF_GENERATION_ERROR\n      await shouldFailIssuance({\n        credential: noSubject,\n        issuer,\n        reason: 'Expected issuer to error when VC has no credentialSubject.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "iAuZinUgxmMzzxejDSMww",
              "ctx": null,
              "_testId": "urn:uuid:1d2c2eb0-7f70-4f7a-952d-92e9ae8778cc",
              "cell": {
                "columnId": "bovine",
                "rowId": "If the algorithm produces an error, the error MUST be propagated and SHOULD convey the error type."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#dfn-input-document:~:text=If%20the%20algorithm%20produces%20an%20error%2C%20the%20error%20MUST%20be%20propagated%20and%20SHOULD%20convey%20the%20error%20type",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 13437,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 152,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected issuer to error when VC has no credentialSubject.: expected Response { status: 200, statusText: 'OK', headers: Headers { server: 'nginx/1.18.0 (Ubuntu)', date: 'Sun, 26 Jan 2025 05:05:40 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'content-encoding': 'gzip', Authorization: 'sanitized to prevent exposure of secrets' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected issuer to error when VC has no credentialSubject.: expected Response { status: 200, statusText: 'OK', headers: Headers { server: 'nginx/1.18.0 (Ubuntu)', date: 'Sun, 26 Jan 2025 05:05:40 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'content-encoding': 'gzip', Authorization: 'sanitized to prevent exposure of secrets' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at shouldFailIssuance (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:105:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/suites/create.js:255:7)"
              }
            }
          ]
        },
        {
          "id": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite.",
          "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
          "cells": [
            {
              "cell": {
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite.",
                "colId": "apicatalog.com"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n        const hasCryptosuiteName = proofs.some(\n          p => p?.cryptosuite === cryptosuiteName);\n        hasCryptosuiteName.should.equal(\n          true,\n          `Expected at least one proof with cryptosuite ${cryptosuiteName}`);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "WZsrG-ZB-wun3Jr0ffXeG",
              "ctx": null,
              "_testId": "urn:uuid:1f1c160e-be77-4f49-a9c4-1341dbf95148",
              "cell": {
                "columnId": "Aviary Tech",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2655,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n        const hasCryptosuiteName = proofs.some(\n          p => p?.cryptosuite === cryptosuiteName);\n        hasCryptosuiteName.should.equal(\n          true,\n          `Expected at least one proof with cryptosuite ${cryptosuiteName}`);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "KD39x8W5HyNa6QWjqPKRz",
              "ctx": null,
              "_testId": "urn:uuid:218ab50c-13e3-45f1-b0d9-c3d244ea5af0",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3571,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n        const hasCryptosuiteName = proofs.some(\n          p => p?.cryptosuite === cryptosuiteName);\n        hasCryptosuiteName.should.equal(\n          true,\n          `Expected at least one proof with cryptosuite ${cryptosuiteName}`);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "xWyqxUYMNP57vQPRlo1lD",
              "ctx": null,
              "_testId": "urn:uuid:06c6b9d9-1952-481b-8405-0eedd3cd2a66",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3947,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n        const hasCryptosuiteName = proofs.some(\n          p => p?.cryptosuite === cryptosuiteName);\n        hasCryptosuiteName.should.equal(\n          true,\n          `Expected at least one proof with cryptosuite ${cryptosuiteName}`);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "R_Xkw2KPs1LuVc6k_9HoJ",
              "ctx": null,
              "_testId": "urn:uuid:64db0f6f-7a57-44b5-bf20-a758b6e53d83",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6515,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n        const hasCryptosuiteName = proofs.some(\n          p => p?.cryptosuite === cryptosuiteName);\n        hasCryptosuiteName.should.equal(\n          true,\n          `Expected at least one proof with cryptosuite ${cryptosuiteName}`);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "lOezDY1VoQtL1FXtONFd9",
              "ctx": null,
              "_testId": "urn:uuid:22ca6583-63fc-4bbc-af30-649f594c3b48",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7582,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n        const hasCryptosuiteName = proofs.some(\n          p => p?.cryptosuite === cryptosuiteName);\n        hasCryptosuiteName.should.equal(\n          true,\n          `Expected at least one proof with cryptosuite ${cryptosuiteName}`);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "ITYGDAwZUr2tdgN6cZVg4",
              "ctx": null,
              "_testId": "urn:uuid:0d0d7752-fd8a-4530-b98e-1a1227780568",
              "cell": {
                "columnId": "Trential",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 11036,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "cell": {
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite.",
                "colId": "Trinsic"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n        const hasCryptosuiteName = proofs.some(\n          p => p?.cryptosuite === cryptosuiteName);\n        hasCryptosuiteName.should.equal(\n          true,\n          `Expected at least one proof with cryptosuite ${cryptosuiteName}`);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "iAuZinUgxmMzzxejDSMww",
              "ctx": null,
              "_testId": "urn:uuid:fe078923-6762-4bb4-90b3-90b58ea96122",
              "cell": {
                "columnId": "bovine",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 13589,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
          "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
          "cells": [
            {
              "cell": {
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
                "colId": "apicatalog.com"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n        const cryptoProp = 'https://w3id.org/security#cryptosuite';\n        const cryptoType = 'https://w3id.org/security#cryptosuiteString';\n        for(const {cryptosuite, type} of proofs) {\n          should.exist(cryptosuite,\n            'Expected property \"proof.cryptosuite\" to exist.');\n          should.exist(type,\n            'Expected property \"proof.type\" to exist.');\n          should.exist(data['@context'],\n            'Expected VC to have property \"@context\".');\n          const expanded = await jsonld.expand({\n            '@context': data['@context'],\n            cryptosuite,\n            type\n          }, {documentLoader});\n          for(const terms of expanded) {\n            const cryptoProperties = terms[cryptoProp];\n            should.exist(cryptoProperties,\n              `Expected property ${cryptoProp} to exist.`);\n            const hasTypeName = cryptoProperties.some(suite =>\n              suite['@type'] === cryptoType &&\n              suite['@value'] == cryptosuiteName);\n            hasTypeName.should.equal(true,\n              `Expected ${cryptoProp} with @value ${cryptosuiteName} & ` +\n              `@type ${cryptoType}`);\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "WZsrG-ZB-wun3Jr0ffXeG",
              "ctx": null,
              "_testId": "urn:uuid:2d09d2e7-baa3-4ac5-9e01-d94f3a3351c5",
              "cell": {
                "columnId": "Aviary Tech",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2655,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n        const cryptoProp = 'https://w3id.org/security#cryptosuite';\n        const cryptoType = 'https://w3id.org/security#cryptosuiteString';\n        for(const {cryptosuite, type} of proofs) {\n          should.exist(cryptosuite,\n            'Expected property \"proof.cryptosuite\" to exist.');\n          should.exist(type,\n            'Expected property \"proof.type\" to exist.');\n          should.exist(data['@context'],\n            'Expected VC to have property \"@context\".');\n          const expanded = await jsonld.expand({\n            '@context': data['@context'],\n            cryptosuite,\n            type\n          }, {documentLoader});\n          for(const terms of expanded) {\n            const cryptoProperties = terms[cryptoProp];\n            should.exist(cryptoProperties,\n              `Expected property ${cryptoProp} to exist.`);\n            const hasTypeName = cryptoProperties.some(suite =>\n              suite['@type'] === cryptoType &&\n              suite['@value'] == cryptosuiteName);\n            hasTypeName.should.equal(true,\n              `Expected ${cryptoProp} with @value ${cryptosuiteName} & ` +\n              `@type ${cryptoType}`);\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "KD39x8W5HyNa6QWjqPKRz",
              "ctx": null,
              "_testId": "urn:uuid:a3345116-8934-45c8-9a05-93ea305ac2d1",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3571,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n        const cryptoProp = 'https://w3id.org/security#cryptosuite';\n        const cryptoType = 'https://w3id.org/security#cryptosuiteString';\n        for(const {cryptosuite, type} of proofs) {\n          should.exist(cryptosuite,\n            'Expected property \"proof.cryptosuite\" to exist.');\n          should.exist(type,\n            'Expected property \"proof.type\" to exist.');\n          should.exist(data['@context'],\n            'Expected VC to have property \"@context\".');\n          const expanded = await jsonld.expand({\n            '@context': data['@context'],\n            cryptosuite,\n            type\n          }, {documentLoader});\n          for(const terms of expanded) {\n            const cryptoProperties = terms[cryptoProp];\n            should.exist(cryptoProperties,\n              `Expected property ${cryptoProp} to exist.`);\n            const hasTypeName = cryptoProperties.some(suite =>\n              suite['@type'] === cryptoType &&\n              suite['@value'] == cryptosuiteName);\n            hasTypeName.should.equal(true,\n              `Expected ${cryptoProp} with @value ${cryptosuiteName} & ` +\n              `@type ${cryptoType}`);\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "xWyqxUYMNP57vQPRlo1lD",
              "ctx": null,
              "_testId": "urn:uuid:18879fe4-d460-4d85-a5f7-f218fe49565f",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3947,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n        const cryptoProp = 'https://w3id.org/security#cryptosuite';\n        const cryptoType = 'https://w3id.org/security#cryptosuiteString';\n        for(const {cryptosuite, type} of proofs) {\n          should.exist(cryptosuite,\n            'Expected property \"proof.cryptosuite\" to exist.');\n          should.exist(type,\n            'Expected property \"proof.type\" to exist.');\n          should.exist(data['@context'],\n            'Expected VC to have property \"@context\".');\n          const expanded = await jsonld.expand({\n            '@context': data['@context'],\n            cryptosuite,\n            type\n          }, {documentLoader});\n          for(const terms of expanded) {\n            const cryptoProperties = terms[cryptoProp];\n            should.exist(cryptoProperties,\n              `Expected property ${cryptoProp} to exist.`);\n            const hasTypeName = cryptoProperties.some(suite =>\n              suite['@type'] === cryptoType &&\n              suite['@value'] == cryptosuiteName);\n            hasTypeName.should.equal(true,\n              `Expected ${cryptoProp} with @value ${cryptosuiteName} & ` +\n              `@type ${cryptoType}`);\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "R_Xkw2KPs1LuVc6k_9HoJ",
              "ctx": null,
              "_testId": "urn:uuid:475ab96a-d31f-43aa-a5f4-17f760a86aff",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6515,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected property https://w3id.org/security#cryptosuite to exist.: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected property https://w3id.org/security#cryptosuite to exist.: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/suites/create.js:293:20)"
              }
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n        const cryptoProp = 'https://w3id.org/security#cryptosuite';\n        const cryptoType = 'https://w3id.org/security#cryptosuiteString';\n        for(const {cryptosuite, type} of proofs) {\n          should.exist(cryptosuite,\n            'Expected property \"proof.cryptosuite\" to exist.');\n          should.exist(type,\n            'Expected property \"proof.type\" to exist.');\n          should.exist(data['@context'],\n            'Expected VC to have property \"@context\".');\n          const expanded = await jsonld.expand({\n            '@context': data['@context'],\n            cryptosuite,\n            type\n          }, {documentLoader});\n          for(const terms of expanded) {\n            const cryptoProperties = terms[cryptoProp];\n            should.exist(cryptoProperties,\n              `Expected property ${cryptoProp} to exist.`);\n            const hasTypeName = cryptoProperties.some(suite =>\n              suite['@type'] === cryptoType &&\n              suite['@value'] == cryptosuiteName);\n            hasTypeName.should.equal(true,\n              `Expected ${cryptoProp} with @value ${cryptosuiteName} & ` +\n              `@type ${cryptoType}`);\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "lOezDY1VoQtL1FXtONFd9",
              "ctx": null,
              "_testId": "urn:uuid:f23c6af5-7dfe-4bc9-8ce0-857acf027e7c",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7583,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n        const cryptoProp = 'https://w3id.org/security#cryptosuite';\n        const cryptoType = 'https://w3id.org/security#cryptosuiteString';\n        for(const {cryptosuite, type} of proofs) {\n          should.exist(cryptosuite,\n            'Expected property \"proof.cryptosuite\" to exist.');\n          should.exist(type,\n            'Expected property \"proof.type\" to exist.');\n          should.exist(data['@context'],\n            'Expected VC to have property \"@context\".');\n          const expanded = await jsonld.expand({\n            '@context': data['@context'],\n            cryptosuite,\n            type\n          }, {documentLoader});\n          for(const terms of expanded) {\n            const cryptoProperties = terms[cryptoProp];\n            should.exist(cryptoProperties,\n              `Expected property ${cryptoProp} to exist.`);\n            const hasTypeName = cryptoProperties.some(suite =>\n              suite['@type'] === cryptoType &&\n              suite['@value'] == cryptosuiteName);\n            hasTypeName.should.equal(true,\n              `Expected ${cryptoProp} with @value ${cryptosuiteName} & ` +\n              `@type ${cryptoType}`);\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "ITYGDAwZUr2tdgN6cZVg4",
              "ctx": null,
              "_testId": "urn:uuid:72fc2407-d781-4974-8520-85a9548d6936",
              "cell": {
                "columnId": "Trential",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 11036,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "cell": {
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
                "colId": "Trinsic"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n        const cryptoProp = 'https://w3id.org/security#cryptosuite';\n        const cryptoType = 'https://w3id.org/security#cryptosuiteString';\n        for(const {cryptosuite, type} of proofs) {\n          should.exist(cryptosuite,\n            'Expected property \"proof.cryptosuite\" to exist.');\n          should.exist(type,\n            'Expected property \"proof.type\" to exist.');\n          should.exist(data['@context'],\n            'Expected VC to have property \"@context\".');\n          const expanded = await jsonld.expand({\n            '@context': data['@context'],\n            cryptosuite,\n            type\n          }, {documentLoader});\n          for(const terms of expanded) {\n            const cryptoProperties = terms[cryptoProp];\n            should.exist(cryptoProperties,\n              `Expected property ${cryptoProp} to exist.`);\n            const hasTypeName = cryptoProperties.some(suite =>\n              suite['@type'] === cryptoType &&\n              suite['@value'] == cryptosuiteName);\n            hasTypeName.should.equal(true,\n              `Expected ${cryptoProp} with @value ${cryptosuiteName} & ` +\n              `@type ${cryptoType}`);\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "iAuZinUgxmMzzxejDSMww",
              "ctx": null,
              "_testId": "urn:uuid:21e88351-321a-4a72-9d72-d12a7b7672a3",
              "cell": {
                "columnId": "bovine",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 13590,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            }
          ]
        }
      ]
    },
    {
      "title": "Data Integrity (eddsa-rdfc-2022 verifiers)",
      "ctx": null,
      "suites": [
        {
          "title": "apicatalog.com",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.';\n      const credential = credentials.clone('invalidBaseUrl');\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'Should not verify VC with invalid base URL'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "CEAfWLPcxsKJNAj2STIIb",
              "ctx": null,
              "_testId": "urn:uuid:7940d520-85f6-4938-9a12-06d7d377feac",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 13633,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 129,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Conforming processors MUST produce errors when non-conforming documents are consumed.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.';\n      // this could be read as testing all non-confirming docs or just one\n      // for this test only one doc is tested as it should throw for any\n      // non-conforming doc\n      await verificationFail({\n        credential: credentials.clone('invalidProofType'),\n        verifier,\n        reason: 'Should not verify VC with invalid \"proof.type\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "CEAfWLPcxsKJNAj2STIIb",
              "ctx": null,
              "_testId": "urn:uuid:7f95598c-bb09-4f73-b070-0321862bbdc8",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "Conforming processors MUST produce errors when non-conforming documents are consumed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 13762,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 3174,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.';\n      const credential = credentials.clone('issuedVc');\n      credential.proof = null;\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'MUST not verify VC with proof that is not a map.'\n      });\n      await verificationFail({\n        // use a string as the non map representation of a VC\n        credential: JSON.stringify(credentials.clone('issuedVc')),\n        verifier,\n        reason: 'MUST not verify VC that is not a map.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "CEAfWLPcxsKJNAj2STIIb",
              "ctx": null,
              "_testId": "urn:uuid:c6bf0697-5b03-49f1-b196-0635c9132366",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16937,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 125,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof;\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'MUST not verify VC w/o a proof'\n      });\n      const noType = credentials.clone('issuedVc');\n      delete noType.proof.type;\n      await verificationFail({\n        credential: noType,\n        verifier,\n        reason: 'MUST not verify VC w/o a \"proof.type\".'\n      });\n      const noVm = credentials.clone('noVm');\n      await verificationFail({\n        credential: noVm,\n        verifier,\n        reason: 'MUST not verify VC w/o \"proof.verificationMethod\".\"'\n      });\n      const noProofPurpose = credentials.clone('noProofPurpose');\n      await verificationFail({\n        credential: noProofPurpose,\n        verifier,\n        reason: 'MUST not verify VC w/o \"proof.proofPurpose\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "CEAfWLPcxsKJNAj2STIIb",
              "ctx": null,
              "_testId": "urn:uuid:c11edf96-45e1-4a0d-93c5-84f66fcb4056",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 17062,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 394,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The type property MUST contain the string DataIntegrityProof.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.';\n          const credential = credentials.clone('invalidProofType');\n          await verificationFail({\n            credential,\n            verifier,\n            reason: 'Should not verify VC with invalid \"proof.type\"'\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "CEAfWLPcxsKJNAj2STIIb",
              "ctx": null,
              "_testId": "urn:uuid:572e220d-d2f4-471c-a88e-f93982cb5614",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "The type property MUST contain the string DataIntegrityProof."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 17457,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 198,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      // NOTE: expectedProofPurpose should be specified by verifiers internally\n      // it is very unlikely to be invalidProofPurpose\n      await verificationFail({\n        credential: credentials.clone('invalidProofPurpose'),\n        verifier,\n        reason: 'Verifier should reject VC with invalid proof purpose.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "CEAfWLPcxsKJNAj2STIIb",
              "ctx": null,
              "_testId": "urn:uuid:f055206e-8b76-4590-bc23-919cf13ffe83",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 17655,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 100,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.';\n        await proofValueTests;\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "CEAfWLPcxsKJNAj2STIIb",
              "ctx": null,
              "_testId": "urn:uuid:5b5941b3-6a74-438e-80c6-c9f6fa01ac3e",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "The proofValue property MUST be used, as specified in 2.1 Proofs."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 17755,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof';\n      await proofValueTests;\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "CEAfWLPcxsKJNAj2STIIb",
              "ctx": null,
              "_testId": "urn:uuid:a95eab85-29c6-4c22-8543-c3045d1b24fc",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 17755,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      await verificationFail({\n        credential: credentials.clone('undefinedTerm'),\n        verifier,\n        reason: 'Should fail to verify VC when data is dropped by JSON-LD'\n      });\n      const undefinedTerm = credentials.clone('issuedVc');\n      undefinedTerm.credentialSubject.undefinedTerm = 'IfDroppedWillVerify';\n      await verificationFail({\n        credential: undefinedTerm,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined term is added ' +\n          'after issuance.'\n      });\n      const undefinedType = credentials.clone('issuedVc');\n      undefinedType.type.push('UndefinedType');\n      await verificationFail({\n        credential: undefinedType,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined type is added ' +\n          'after issuance.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "CEAfWLPcxsKJNAj2STIIb",
              "ctx": null,
              "_testId": "urn:uuid:55875455-4973-4225-a6f5-c7edc7efd85e",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 17756,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 207,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n      const credential = credentials.clone('invalidCryptosuite');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "CEAfWLPcxsKJNAj2STIIb",
              "ctx": null,
              "_testId": "urn:uuid:cf06dbbf-29da-483e-9e53-adae6db5f097",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 17963,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 92,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "An OPTIONAL string value (proof.previousProof) or unordered list of string values. Each value identifies another data integrity proof that MUST verify before the current proof is processed.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=An%20OPTIONAL%20string%20value%20or%20unordered%20list%20of%20string%20values.%20Each%20value%20identifies%20another%20data%20integrity%20proof%20that%20MUST%20verify%20before%20the%20current%20proof%20is%20processed';\n        await verificationSuccess({\n          credential: credentials.clone('previousProofString'),\n          verifier,\n          reason: 'Should verify VC with a string \"proof.previousProof\".'\n        });\n        await verificationSuccess({\n          credential: credentials.clone('previousProofArray'),\n          verifier,\n          reason: 'Should verify VC with an Array \"proof.previousProof\".'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "CEAfWLPcxsKJNAj2STIIb",
              "ctx": null,
              "_testId": "urn:uuid:d0cc044a-ce28-45a8-a006-30d5763a98d9",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "An OPTIONAL string value (proof.previousProof) or unordered list of string values. Each value identifies another data integrity proof that MUST verify before the current proof is processed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=An%20OPTIONAL%20string%20value%20or%20unordered%20list%20of%20string%20values.%20Each%20value%20identifies%20another%20data%20integrity%20proof%20that%20MUST%20verify%20before%20the%20current%20proof%20is%20processed",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18056,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 100,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Should verify VC with a string \"proof.previousProof\".: expected HTTPError: A non-empty JSON Pointer must … { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",\"https://w3id.org/security/data-integrity/v2\",{\"@context\":{\"AlumniCredential\":\"https://www.example.org/AlumniCredential\",\"alumniOf\":\"https://www.example.org/alumniOf\",\"description\":\"https://schema.org/description\",\"name\":\"https://schema.org/name\"}}],\"id\":\"urn:uuid:58172aac-d8ba-11ed-83dd-0b3aef56cc33\",\"type\":[\"VerifiableCredential\",\"AlumniCredential\"],\"name\":\"Alumni Credential\",\"description\":\"A minimum viable example of a VC 1.1 Alumni Credential.\",\"issuer\":\"did:key:z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E\",\"issuanceDate\":\"2023-01-01T00:00:00Z\",\"credentialSubject\":{\"id\":\"did:example:abcdefgh\",\"alumniOf\":\"The School of Examples\"},\"proof\":[{\"type\":\"DataIntegrityProof\",\"id\":\"urn:uuid:26329423-bec9-4b2e-88cb-a7c7d9dc4544\",\"cryptosuite\":\"eddsa-rdfc-2022\",\"created\":\"2023-02-26T22:06:38Z\",\"verificationMethod\":\"did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7#z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z5gL4Hy8N4B6zr9mQAGqpsry1iTdxEAp4zjqPNQv7iTvgdkMcHKnMALvPwU3YAKZhYn3k3Jmut2TAMxSaHaggFtf4\"},{\"type\":\"DataIntegrityProof\",\"cryptosuite\":\"eddsa-rdfc-2022\",\"created\":\"2023-02-26T22:16:38Z\",\"verificationMethod\":\"did:key:z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E#z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E\",\"proofPurpose\":\"assertionMethod\",\"previousProof\":\"urn:uuid:26329423-bec9-4b2e-88cb-a7c7d9dc4544\",\"proofValue\":\"z2ENoYDUK8cMMJMvwRGyHVX23pPeHaZfCgpbDFs15FXGaeFseeqzZf5nWXF14JPoBcqdr39vVPgrAUbWT2VYYacrG\"}]},\"options\":{}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          "https://w3id.org/security/data-integrity/v2",
                          {
                            "@context": {
                              "AlumniCredential": "https://www.example.org/AlumniCredential",
                              "alumniOf": "https://www.example.org/alumniOf",
                              "description": "https://schema.org/description",
                              "name": "https://schema.org/name"
                            }
                          }
                        ],
                        "id": "urn:uuid:58172aac-d8ba-11ed-83dd-0b3aef56cc33",
                        "type": [
                          "VerifiableCredential",
                          "AlumniCredential"
                        ],
                        "name": "Alumni Credential",
                        "description": "A minimum viable example of a VC 1.1 Alumni Credential.",
                        "issuer": "did:key:z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E",
                        "issuanceDate": "2023-01-01T00:00:00Z",
                        "credentialSubject": {
                          "id": "did:example:abcdefgh",
                          "alumniOf": "The School of Examples"
                        },
                        "proof": [
                          {
                            "type": "DataIntegrityProof",
                            "id": "urn:uuid:26329423-bec9-4b2e-88cb-a7c7d9dc4544",
                            "cryptosuite": "eddsa-rdfc-2022",
                            "created": "2023-02-26T22:06:38Z",
                            "verificationMethod": "did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7#z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7",
                            "proofPurpose": "assertionMethod",
                            "proofValue": "z5gL4Hy8N4B6zr9mQAGqpsry1iTdxEAp4zjqPNQv7iTvgdkMcHKnMALvPwU3YAKZhYn3k3Jmut2TAMxSaHaggFtf4"
                          },
                          {
                            "type": "DataIntegrityProof",
                            "cryptosuite": "eddsa-rdfc-2022",
                            "created": "2023-02-26T22:16:38Z",
                            "verificationMethod": "did:key:z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E#z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E",
                            "proofPurpose": "assertionMethod",
                            "previousProof": "urn:uuid:26329423-bec9-4b2e-88cb-a7c7d9dc4544",
                            "proofValue": "z2ENoYDUK8cMMJMvwRGyHVX23pPeHaZfCgpbDFs15FXGaeFseeqzZf5nWXF14JPoBcqdr39vVPgrAUbWT2VYYacrG"
                          }
                        ]
                      },
                      "options": {}
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://us-central1-api-catalog.cloudfunctions.net/vc-api-verify",
                  "status": 400,
                  "data": {
                    "message": "A non-empty JSON Pointer must begin with a '/'"
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Should verify VC with a string \"proof.previousProof\".: expected HTTPError: A non-empty JSON Pointer must … { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:50:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/suites/verify.js:271:9)"
              }
            },
            {
              "type": "test",
              "title": "If an unordered list (proof), all referenced proofs in the array MUST verify.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=If%20an%20unordered%20list%2C%20all%20referenced%20proofs%20in%20the%20array%20MUST%20verify';\n        await verificationSuccess({\n          credential: credentials.clone('proofSet'),\n          verifier,\n          reason: 'Should verify VC with multiple proofs.'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "CEAfWLPcxsKJNAj2STIIb",
              "ctx": null,
              "_testId": "urn:uuid:2d504550-4d1a-429e-acd1-88b6084fd2b7",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If an unordered list (proof), all referenced proofs in the array MUST verify."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=If%20an%20unordered%20list%2C%20all%20referenced%20proofs%20in%20the%20array%20MUST%20verify",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18157,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 73,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Should verify VC with multiple proofs.: expected HTTPError: A non-empty JSON Pointer must … { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",\"https://w3id.org/security/data-integrity/v2\"],\"id\":\"urn:uuid:86294362-4254-4f36-854f-3952fe42555d\",\"type\":[\"VerifiableCredential\"],\"issuer\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\",\"issuanceDate\":\"2020-03-16T22:37:26.544Z\",\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\"},\"proof\":[{\"type\":\"DataIntegrityProof\",\"created\":\"2025-01-26T05:05:40Z\",\"verificationMethod\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b#z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\",\"cryptosuite\":\"eddsa-rdfc-2022\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z2hoTxSsXuKayiPmKuptT4oEX9xtfvZgdHDSwTDeSC3nm3rUCKtx2ZY35wKBKqg5Li4aSiQ7RaczX8m3Q5xNp5jCx\"},{\"type\":\"DataIntegrityProof\",\"created\":\"2025-01-26T05:05:40Z\",\"verificationMethod\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b#z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\",\"cryptosuite\":\"eddsa-rdfc-2022\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z2hoTxSsXuKayiPmKuptT4oEX9xtfvZgdHDSwTDeSC3nm3rUCKtx2ZY35wKBKqg5Li4aSiQ7RaczX8m3Q5xNp5jCx\"}]},\"options\":{}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          "https://w3id.org/security/data-integrity/v2"
                        ],
                        "id": "urn:uuid:86294362-4254-4f36-854f-3952fe42555d",
                        "type": [
                          "VerifiableCredential"
                        ],
                        "issuer": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b",
                        "issuanceDate": "2020-03-16T22:37:26.544Z",
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                        },
                        "proof": [
                          {
                            "type": "DataIntegrityProof",
                            "created": "2025-01-26T05:05:40Z",
                            "verificationMethod": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b#z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b",
                            "cryptosuite": "eddsa-rdfc-2022",
                            "proofPurpose": "assertionMethod",
                            "proofValue": "z2hoTxSsXuKayiPmKuptT4oEX9xtfvZgdHDSwTDeSC3nm3rUCKtx2ZY35wKBKqg5Li4aSiQ7RaczX8m3Q5xNp5jCx"
                          },
                          {
                            "type": "DataIntegrityProof",
                            "created": "2025-01-26T05:05:40Z",
                            "verificationMethod": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b#z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b",
                            "cryptosuite": "eddsa-rdfc-2022",
                            "proofPurpose": "assertionMethod",
                            "proofValue": "z2hoTxSsXuKayiPmKuptT4oEX9xtfvZgdHDSwTDeSC3nm3rUCKtx2ZY35wKBKqg5Li4aSiQ7RaczX8m3Q5xNp5jCx"
                          }
                        ]
                      },
                      "options": {}
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://us-central1-api-catalog.cloudfunctions.net/vc-api-verify",
                  "status": 400,
                  "data": {
                    "message": "A non-empty JSON Pointer must begin with a '/'"
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Should verify VC with multiple proofs.: expected HTTPError: A non-empty JSON Pointer must … { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:50:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/suites/verify.js:285:9)"
              }
            },
            {
              "type": "test",
              "title": "If a proof with id equal to previousProof does not exist in allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20a%20proof%20with%20id%20equal%20to%20previousProof%20does%20not%20exist%20in%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR';\n        await verificationFail({\n          credential: credentials.clone('missingPreviousProofString'),\n          verifier,\n          reason: 'Should not verify VC with invalid \"proof.previousProof\".'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "CEAfWLPcxsKJNAj2STIIb",
              "ctx": null,
              "_testId": "urn:uuid:a9df9524-c779-44eb-8a5f-11f29b602bd5",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If a proof with id equal to previousProof does not exist in allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20a%20proof%20with%20id%20equal%20to%20previousProof%20does%20not%20exist%20in%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18231,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 66,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If any element of previousProof list has an id attribute that does not match the id attribute of any element of allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20any%20element%20of%20previousProof%20list%20has%20an%20id%20attribute%20that%20does%20not%20match%20the%20id%20attribute%20of%20any%20element%20of%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n        await verificationFail({\n          credential: credentials.clone('missingPreviousProofArray'),\n          verifier,\n          reason: 'Should not verify VC with invalid \"proof.previousProof\".'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "CEAfWLPcxsKJNAj2STIIb",
              "ctx": null,
              "_testId": "urn:uuid:f56b7c9e-205b-4144-b456-6c904ca8342f",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If any element of previousProof list has an id attribute that does not match the id attribute of any element of allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20any%20element%20of%20previousProof%20list%20has%20an%20id%20attribute%20that%20does%20not%20match%20the%20id%20attribute%20of%20any%20element%20of%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18298,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 68,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "Each value identifies another data integrity proof, all of which MUST also verify for the current proof to be considered verified",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=Each%20value%20identifies%20another%20data%20integrity%20proof%2C%20all%20of%20which%20MUST%20also%20verify%20for%20the%20current%20proof%20to%20be%20considered%20verified';\n        await verificationFail({\n          credential: credentials.clone('previousProofFail'),\n          verifier,\n          reason: 'Should not verify VC with a \"previousProof\" that does ' +\n          'not verify.'\n        });\n\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "CEAfWLPcxsKJNAj2STIIb",
              "ctx": null,
              "_testId": "urn:uuid:4c6a5bbf-371c-4993-95bd-60846f01a8e2",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "Each value identifies another data integrity proof, all of which MUST also verify for the current proof to be considered verified"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=Each%20value%20identifies%20another%20data%20integrity%20proof%2C%20all%20of%20which%20MUST%20also%20verify%20for%20the%20current%20proof%20to%20be%20considered%20verified",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18366,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 68,
              "state": "passed",
              "speed": "medium"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"apicatalog.com\"",
              "body": "function() {\n      this.currentTest.cell = {\n        columnId: testDescription,\n        rowId: this.currentTest.title\n      };\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "CEAfWLPcxsKJNAj2STIIb",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"apicatalog.com\"",
              "body": "async function() {\n      proofValueTests = shouldBeProofValue({credentials, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "CEAfWLPcxsKJNAj2STIIb",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 13631,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "IPhqgK04YvYqd94TS-1Z1",
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
          "_testId": "urn:uuid:552969d8-5997-49e5-b62d-d3b653693999"
        },
        {
          "title": "Aviary Tech",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.';\n      const credential = credentials.clone('invalidBaseUrl');\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'Should not verify VC with invalid base URL'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "CtFlPjii4dCwlNLWP7nHR",
              "ctx": null,
              "_testId": "urn:uuid:d1dd2a7d-08bf-4eae-8999-0dbbe5f4703f",
              "cell": {
                "columnId": "Aviary Tech",
                "rowId": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18436,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 148,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Conforming processors MUST produce errors when non-conforming documents are consumed.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.';\n      // this could be read as testing all non-confirming docs or just one\n      // for this test only one doc is tested as it should throw for any\n      // non-conforming doc\n      await verificationFail({\n        credential: credentials.clone('invalidProofType'),\n        verifier,\n        reason: 'Should not verify VC with invalid \"proof.type\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "CtFlPjii4dCwlNLWP7nHR",
              "ctx": null,
              "_testId": "urn:uuid:ebf009e6-4043-490b-b552-ad8ae298e0c8",
              "cell": {
                "columnId": "Aviary Tech",
                "rowId": "Conforming processors MUST produce errors when non-conforming documents are consumed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18585,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 52,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.';\n      const credential = credentials.clone('issuedVc');\n      credential.proof = null;\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'MUST not verify VC with proof that is not a map.'\n      });\n      await verificationFail({\n        // use a string as the non map representation of a VC\n        credential: JSON.stringify(credentials.clone('issuedVc')),\n        verifier,\n        reason: 'MUST not verify VC that is not a map.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "CtFlPjii4dCwlNLWP7nHR",
              "ctx": null,
              "_testId": "urn:uuid:966dfca3-47bb-43a3-b065-fff38cb62064",
              "cell": {
                "columnId": "Aviary Tech",
                "rowId": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18637,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 101,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof;\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'MUST not verify VC w/o a proof'\n      });\n      const noType = credentials.clone('issuedVc');\n      delete noType.proof.type;\n      await verificationFail({\n        credential: noType,\n        verifier,\n        reason: 'MUST not verify VC w/o a \"proof.type\".'\n      });\n      const noVm = credentials.clone('noVm');\n      await verificationFail({\n        credential: noVm,\n        verifier,\n        reason: 'MUST not verify VC w/o \"proof.verificationMethod\".\"'\n      });\n      const noProofPurpose = credentials.clone('noProofPurpose');\n      await verificationFail({\n        credential: noProofPurpose,\n        verifier,\n        reason: 'MUST not verify VC w/o \"proof.proofPurpose\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "CtFlPjii4dCwlNLWP7nHR",
              "ctx": null,
              "_testId": "urn:uuid:466a34df-f2c8-493b-9b7f-173e90cfa62a",
              "cell": {
                "columnId": "Aviary Tech",
                "rowId": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18739,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 173,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The type property MUST contain the string DataIntegrityProof.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.';\n          const credential = credentials.clone('invalidProofType');\n          await verificationFail({\n            credential,\n            verifier,\n            reason: 'Should not verify VC with invalid \"proof.type\"'\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "CtFlPjii4dCwlNLWP7nHR",
              "ctx": null,
              "_testId": "urn:uuid:5eefa7ea-973f-4b60-810d-07393d2f600a",
              "cell": {
                "columnId": "Aviary Tech",
                "rowId": "The type property MUST contain the string DataIntegrityProof."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18912,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 46,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      // NOTE: expectedProofPurpose should be specified by verifiers internally\n      // it is very unlikely to be invalidProofPurpose\n      await verificationFail({\n        credential: credentials.clone('invalidProofPurpose'),\n        verifier,\n        reason: 'Verifier should reject VC with invalid proof purpose.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "CtFlPjii4dCwlNLWP7nHR",
              "ctx": null,
              "_testId": "urn:uuid:006c6c30-5689-404f-ba2e-074b3af28c5b",
              "cell": {
                "columnId": "Aviary Tech",
                "rowId": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18958,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 48,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.';\n        await proofValueTests;\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "CtFlPjii4dCwlNLWP7nHR",
              "ctx": null,
              "_testId": "urn:uuid:61515a58-dd3f-4e67-97bd-e0aa704ba223",
              "cell": {
                "columnId": "Aviary Tech",
                "rowId": "The proofValue property MUST be used, as specified in 2.1 Proofs."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19006,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof';\n      await proofValueTests;\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "CtFlPjii4dCwlNLWP7nHR",
              "ctx": null,
              "_testId": "urn:uuid:cbae4dc7-2c7a-4854-aedc-50c5fd7e1fcf",
              "cell": {
                "columnId": "Aviary Tech",
                "rowId": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19006,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      await verificationFail({\n        credential: credentials.clone('undefinedTerm'),\n        verifier,\n        reason: 'Should fail to verify VC when data is dropped by JSON-LD'\n      });\n      const undefinedTerm = credentials.clone('issuedVc');\n      undefinedTerm.credentialSubject.undefinedTerm = 'IfDroppedWillVerify';\n      await verificationFail({\n        credential: undefinedTerm,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined term is added ' +\n          'after issuance.'\n      });\n      const undefinedType = credentials.clone('issuedVc');\n      undefinedType.type.push('UndefinedType');\n      await verificationFail({\n        credential: undefinedType,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined type is added ' +\n          'after issuance.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "CtFlPjii4dCwlNLWP7nHR",
              "ctx": null,
              "_testId": "urn:uuid:1ac68407-1ac7-402a-86eb-655a80b3ba4d",
              "cell": {
                "columnId": "Aviary Tech",
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19007,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 138,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n      const credential = credentials.clone('invalidCryptosuite');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "CtFlPjii4dCwlNLWP7nHR",
              "ctx": null,
              "_testId": "urn:uuid:24220f29-9e93-4b08-85e4-2b0a427da450",
              "cell": {
                "columnId": "Aviary Tech",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19145,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 44,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "An OPTIONAL string value (proof.previousProof) or unordered list of string values. Each value identifies another data integrity proof that MUST verify before the current proof is processed.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=An%20OPTIONAL%20string%20value%20or%20unordered%20list%20of%20string%20values.%20Each%20value%20identifies%20another%20data%20integrity%20proof%20that%20MUST%20verify%20before%20the%20current%20proof%20is%20processed';\n        await verificationSuccess({\n          credential: credentials.clone('previousProofString'),\n          verifier,\n          reason: 'Should verify VC with a string \"proof.previousProof\".'\n        });\n        await verificationSuccess({\n          credential: credentials.clone('previousProofArray'),\n          verifier,\n          reason: 'Should verify VC with an Array \"proof.previousProof\".'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "CtFlPjii4dCwlNLWP7nHR",
              "ctx": null,
              "_testId": "urn:uuid:cd63b8e1-92ae-4fa5-af5a-5c1511821706",
              "cell": {
                "columnId": "Aviary Tech",
                "rowId": "An OPTIONAL string value (proof.previousProof) or unordered list of string values. Each value identifies another data integrity proof that MUST verify before the current proof is processed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=An%20OPTIONAL%20string%20value%20or%20unordered%20list%20of%20string%20values.%20Each%20value%20identifies%20another%20data%20integrity%20proof%20that%20MUST%20verify%20before%20the%20current%20proof%20is%20processed",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19189,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 146,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Should verify VC with an Array \"proof.previousProof\".: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",\"https://w3id.org/security/data-integrity/v2\",{\"@context\":{\"AlumniCredential\":\"https://www.example.org/AlumniCredential\",\"alumniOf\":\"https://www.example.org/alumniOf\",\"description\":\"https://schema.org/description\",\"name\":\"https://schema.org/name\"}}],\"id\":\"urn:uuid:58172aac-d8ba-11ed-83dd-0b3aef56cc33\",\"type\":[\"VerifiableCredential\",\"AlumniCredential\"],\"name\":\"Alumni Credential\",\"description\":\"A minimum viable example of a VC 1.1 Alumni Credential.\",\"issuer\":\"did:key:z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E\",\"issuanceDate\":\"2023-01-01T00:00:00Z\",\"credentialSubject\":{\"id\":\"did:example:abcdefgh\",\"alumniOf\":\"The School of Examples\"},\"proof\":[{\"type\":\"DataIntegrityProof\",\"id\":\"urn:uuid:26329423-bec9-4b2e-88cb-a7c7d9dc4544\",\"cryptosuite\":\"eddsa-rdfc-2022\",\"created\":\"2023-02-26T22:06:38Z\",\"verificationMethod\":\"did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7#z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z5gL4Hy8N4B6zr9mQAGqpsry1iTdxEAp4zjqPNQv7iTvgdkMcHKnMALvPwU3YAKZhYn3k3Jmut2TAMxSaHaggFtf4\"},{\"type\":\"DataIntegrityProof\",\"cryptosuite\":\"eddsa-rdfc-2022\",\"created\":\"2023-02-26T22:16:38Z\",\"verificationMethod\":\"did:key:z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E#z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E\",\"proofPurpose\":\"assertionMethod\",\"previousProof\":[\"urn:uuid:26329423-bec9-4b2e-88cb-a7c7d9dc4544\"],\"proofValue\":\"z2ENoYDUK8cMMJMvwRGyHVX23pPeHaZfCgpbDFs15FXGaeFseeqzZf5nWXF14JPoBcqdr39vVPgrAUbWT2VYYacrG\"}]},\"options\":{}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          "https://w3id.org/security/data-integrity/v2",
                          {
                            "@context": {
                              "AlumniCredential": "https://www.example.org/AlumniCredential",
                              "alumniOf": "https://www.example.org/alumniOf",
                              "description": "https://schema.org/description",
                              "name": "https://schema.org/name"
                            }
                          }
                        ],
                        "id": "urn:uuid:58172aac-d8ba-11ed-83dd-0b3aef56cc33",
                        "type": [
                          "VerifiableCredential",
                          "AlumniCredential"
                        ],
                        "name": "Alumni Credential",
                        "description": "A minimum viable example of a VC 1.1 Alumni Credential.",
                        "issuer": "did:key:z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E",
                        "issuanceDate": "2023-01-01T00:00:00Z",
                        "credentialSubject": {
                          "id": "did:example:abcdefgh",
                          "alumniOf": "The School of Examples"
                        },
                        "proof": [
                          {
                            "type": "DataIntegrityProof",
                            "id": "urn:uuid:26329423-bec9-4b2e-88cb-a7c7d9dc4544",
                            "cryptosuite": "eddsa-rdfc-2022",
                            "created": "2023-02-26T22:06:38Z",
                            "verificationMethod": "did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7#z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7",
                            "proofPurpose": "assertionMethod",
                            "proofValue": "z5gL4Hy8N4B6zr9mQAGqpsry1iTdxEAp4zjqPNQv7iTvgdkMcHKnMALvPwU3YAKZhYn3k3Jmut2TAMxSaHaggFtf4"
                          },
                          {
                            "type": "DataIntegrityProof",
                            "cryptosuite": "eddsa-rdfc-2022",
                            "created": "2023-02-26T22:16:38Z",
                            "verificationMethod": "did:key:z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E#z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E",
                            "proofPurpose": "assertionMethod",
                            "previousProof": [
                              "urn:uuid:26329423-bec9-4b2e-88cb-a7c7d9dc4544"
                            ],
                            "proofValue": "z2ENoYDUK8cMMJMvwRGyHVX23pPeHaZfCgpbDFs15FXGaeFseeqzZf5nWXF14JPoBcqdr39vVPgrAUbWT2VYYacrG"
                          }
                        ]
                      },
                      "options": {}
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://demo.av1.sh/credentials/verify",
                  "status": 400,
                  "data": {
                    "errors": [
                      "Credential verification failed: [\"One or more proofs failed verification\"]"
                    ]
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Should verify VC with an Array \"proof.previousProof\".: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:50:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/suites/verify.js:276:9)"
              }
            },
            {
              "type": "test",
              "title": "If an unordered list (proof), all referenced proofs in the array MUST verify.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=If%20an%20unordered%20list%2C%20all%20referenced%20proofs%20in%20the%20array%20MUST%20verify';\n        await verificationSuccess({\n          credential: credentials.clone('proofSet'),\n          verifier,\n          reason: 'Should verify VC with multiple proofs.'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "CtFlPjii4dCwlNLWP7nHR",
              "ctx": null,
              "_testId": "urn:uuid:ce17bf09-3d46-4c3a-84b7-ab6e0f0ffc0d",
              "cell": {
                "columnId": "Aviary Tech",
                "rowId": "If an unordered list (proof), all referenced proofs in the array MUST verify."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=If%20an%20unordered%20list%2C%20all%20referenced%20proofs%20in%20the%20array%20MUST%20verify",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19336,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 59,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If a proof with id equal to previousProof does not exist in allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20a%20proof%20with%20id%20equal%20to%20previousProof%20does%20not%20exist%20in%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR';\n        await verificationFail({\n          credential: credentials.clone('missingPreviousProofString'),\n          verifier,\n          reason: 'Should not verify VC with invalid \"proof.previousProof\".'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "CtFlPjii4dCwlNLWP7nHR",
              "ctx": null,
              "_testId": "urn:uuid:cddef008-5cec-4bce-807e-1e6dd7ab69e6",
              "cell": {
                "columnId": "Aviary Tech",
                "rowId": "If a proof with id equal to previousProof does not exist in allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20a%20proof%20with%20id%20equal%20to%20previousProof%20does%20not%20exist%20in%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19395,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 85,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If any element of previousProof list has an id attribute that does not match the id attribute of any element of allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20any%20element%20of%20previousProof%20list%20has%20an%20id%20attribute%20that%20does%20not%20match%20the%20id%20attribute%20of%20any%20element%20of%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n        await verificationFail({\n          credential: credentials.clone('missingPreviousProofArray'),\n          verifier,\n          reason: 'Should not verify VC with invalid \"proof.previousProof\".'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "CtFlPjii4dCwlNLWP7nHR",
              "ctx": null,
              "_testId": "urn:uuid:431fad9d-30a5-4bb0-8e58-a7bff45e0d57",
              "cell": {
                "columnId": "Aviary Tech",
                "rowId": "If any element of previousProof list has an id attribute that does not match the id attribute of any element of allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20any%20element%20of%20previousProof%20list%20has%20an%20id%20attribute%20that%20does%20not%20match%20the%20id%20attribute%20of%20any%20element%20of%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19480,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 123,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Each value identifies another data integrity proof, all of which MUST also verify for the current proof to be considered verified",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=Each%20value%20identifies%20another%20data%20integrity%20proof%2C%20all%20of%20which%20MUST%20also%20verify%20for%20the%20current%20proof%20to%20be%20considered%20verified';\n        await verificationFail({\n          credential: credentials.clone('previousProofFail'),\n          verifier,\n          reason: 'Should not verify VC with a \"previousProof\" that does ' +\n          'not verify.'\n        });\n\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "CtFlPjii4dCwlNLWP7nHR",
              "ctx": null,
              "_testId": "urn:uuid:87898d21-6ecb-481e-8f2b-ee7c8588419f",
              "cell": {
                "columnId": "Aviary Tech",
                "rowId": "Each value identifies another data integrity proof, all of which MUST also verify for the current proof to be considered verified"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=Each%20value%20identifies%20another%20data%20integrity%20proof%2C%20all%20of%20which%20MUST%20also%20verify%20for%20the%20current%20proof%20to%20be%20considered%20verified",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19604,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 60,
              "state": "passed",
              "speed": "medium"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"Aviary Tech\"",
              "body": "function() {\n      this.currentTest.cell = {\n        columnId: testDescription,\n        rowId: this.currentTest.title\n      };\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "CtFlPjii4dCwlNLWP7nHR",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Aviary Tech\"",
              "body": "async function() {\n      proofValueTests = shouldBeProofValue({credentials, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "CtFlPjii4dCwlNLWP7nHR",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18435,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "IPhqgK04YvYqd94TS-1Z1",
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
          "_testId": "urn:uuid:eb4939bf-e7fc-451c-897c-f053685a13ed"
        },
        {
          "title": "Digital Bazaar",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.';\n      const credential = credentials.clone('invalidBaseUrl');\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'Should not verify VC with invalid base URL'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "AaBj6j734Xhrd8pZ6XJAZ",
              "ctx": null,
              "_testId": "urn:uuid:ded32c14-fcdf-4d48-aa8a-177e71aaee95",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19671,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 347,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Conforming processors MUST produce errors when non-conforming documents are consumed.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.';\n      // this could be read as testing all non-confirming docs or just one\n      // for this test only one doc is tested as it should throw for any\n      // non-conforming doc\n      await verificationFail({\n        credential: credentials.clone('invalidProofType'),\n        verifier,\n        reason: 'Should not verify VC with invalid \"proof.type\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "AaBj6j734Xhrd8pZ6XJAZ",
              "ctx": null,
              "_testId": "urn:uuid:7f0c9012-818b-4ce3-8cab-787ca10f039c",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "Conforming processors MUST produce errors when non-conforming documents are consumed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20018,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 86,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.';\n      const credential = credentials.clone('issuedVc');\n      credential.proof = null;\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'MUST not verify VC with proof that is not a map.'\n      });\n      await verificationFail({\n        // use a string as the non map representation of a VC\n        credential: JSON.stringify(credentials.clone('issuedVc')),\n        verifier,\n        reason: 'MUST not verify VC that is not a map.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "AaBj6j734Xhrd8pZ6XJAZ",
              "ctx": null,
              "_testId": "urn:uuid:efad7ed7-14cb-45d0-a404-2e224db60bf2",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20104,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 163,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof;\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'MUST not verify VC w/o a proof'\n      });\n      const noType = credentials.clone('issuedVc');\n      delete noType.proof.type;\n      await verificationFail({\n        credential: noType,\n        verifier,\n        reason: 'MUST not verify VC w/o a \"proof.type\".'\n      });\n      const noVm = credentials.clone('noVm');\n      await verificationFail({\n        credential: noVm,\n        verifier,\n        reason: 'MUST not verify VC w/o \"proof.verificationMethod\".\"'\n      });\n      const noProofPurpose = credentials.clone('noProofPurpose');\n      await verificationFail({\n        credential: noProofPurpose,\n        verifier,\n        reason: 'MUST not verify VC w/o \"proof.proofPurpose\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "AaBj6j734Xhrd8pZ6XJAZ",
              "ctx": null,
              "_testId": "urn:uuid:c92af998-d1a6-4511-85bc-1149da486d99",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20268,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 341,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The type property MUST contain the string DataIntegrityProof.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.';\n          const credential = credentials.clone('invalidProofType');\n          await verificationFail({\n            credential,\n            verifier,\n            reason: 'Should not verify VC with invalid \"proof.type\"'\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "AaBj6j734Xhrd8pZ6XJAZ",
              "ctx": null,
              "_testId": "urn:uuid:ae3a428f-cd8d-4071-a66b-790845686cd5",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The type property MUST contain the string DataIntegrityProof."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20609,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 89,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      // NOTE: expectedProofPurpose should be specified by verifiers internally\n      // it is very unlikely to be invalidProofPurpose\n      await verificationFail({\n        credential: credentials.clone('invalidProofPurpose'),\n        verifier,\n        reason: 'Verifier should reject VC with invalid proof purpose.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "AaBj6j734Xhrd8pZ6XJAZ",
              "ctx": null,
              "_testId": "urn:uuid:970fd533-969f-485d-bc47-82faf9e9094f",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20698,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 86,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.';\n        await proofValueTests;\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "AaBj6j734Xhrd8pZ6XJAZ",
              "ctx": null,
              "_testId": "urn:uuid:af7b4028-d8ba-4268-b9b3-cba0824b31c5",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The proofValue property MUST be used, as specified in 2.1 Proofs."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20784,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof';\n      await proofValueTests;\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "AaBj6j734Xhrd8pZ6XJAZ",
              "ctx": null,
              "_testId": "urn:uuid:3eb07ca5-1130-4a0f-8765-60e0d4247b71",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20785,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      await verificationFail({\n        credential: credentials.clone('undefinedTerm'),\n        verifier,\n        reason: 'Should fail to verify VC when data is dropped by JSON-LD'\n      });\n      const undefinedTerm = credentials.clone('issuedVc');\n      undefinedTerm.credentialSubject.undefinedTerm = 'IfDroppedWillVerify';\n      await verificationFail({\n        credential: undefinedTerm,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined term is added ' +\n          'after issuance.'\n      });\n      const undefinedType = credentials.clone('issuedVc');\n      undefinedType.type.push('UndefinedType');\n      await verificationFail({\n        credential: undefinedType,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined type is added ' +\n          'after issuance.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "AaBj6j734Xhrd8pZ6XJAZ",
              "ctx": null,
              "_testId": "urn:uuid:1c83c2fd-9f19-4fd5-93ed-67aaf7e01b72",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20785,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 302,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n      const credential = credentials.clone('invalidCryptosuite');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "AaBj6j734Xhrd8pZ6XJAZ",
              "ctx": null,
              "_testId": "urn:uuid:d585e1fe-6637-4bfe-9927-e97e1c2cb417",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 21087,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 104,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "An OPTIONAL string value (proof.previousProof) or unordered list of string values. Each value identifies another data integrity proof that MUST verify before the current proof is processed.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=An%20OPTIONAL%20string%20value%20or%20unordered%20list%20of%20string%20values.%20Each%20value%20identifies%20another%20data%20integrity%20proof%20that%20MUST%20verify%20before%20the%20current%20proof%20is%20processed';\n        await verificationSuccess({\n          credential: credentials.clone('previousProofString'),\n          verifier,\n          reason: 'Should verify VC with a string \"proof.previousProof\".'\n        });\n        await verificationSuccess({\n          credential: credentials.clone('previousProofArray'),\n          verifier,\n          reason: 'Should verify VC with an Array \"proof.previousProof\".'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "AaBj6j734Xhrd8pZ6XJAZ",
              "ctx": null,
              "_testId": "urn:uuid:79997f39-d6c7-462d-b0f9-f30278ef2672",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "An OPTIONAL string value (proof.previousProof) or unordered list of string values. Each value identifies another data integrity proof that MUST verify before the current proof is processed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=An%20OPTIONAL%20string%20value%20or%20unordered%20list%20of%20string%20values.%20Each%20value%20identifies%20another%20data%20integrity%20proof%20that%20MUST%20verify%20before%20the%20current%20proof%20is%20processed",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 21192,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 102,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Should verify VC with a string \"proof.previousProof\".: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          "https://w3id.org/security/data-integrity/v2",
                          {
                            "@context": {
                              "AlumniCredential": "https://www.example.org/AlumniCredential",
                              "alumniOf": "https://www.example.org/alumniOf",
                              "description": "https://schema.org/description",
                              "name": "https://schema.org/name"
                            }
                          }
                        ],
                        "id": "urn:uuid:58172aac-d8ba-11ed-83dd-0b3aef56cc33",
                        "type": [
                          "VerifiableCredential",
                          "AlumniCredential"
                        ],
                        "name": "Alumni Credential",
                        "description": "A minimum viable example of a VC 1.1 Alumni Credential.",
                        "issuer": "did:key:z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E",
                        "issuanceDate": "2023-01-01T00:00:00Z",
                        "credentialSubject": {
                          "id": "did:example:abcdefgh",
                          "alumniOf": "The School of Examples"
                        },
                        "proof": [
                          {
                            "type": "DataIntegrityProof",
                            "id": "urn:uuid:26329423-bec9-4b2e-88cb-a7c7d9dc4544",
                            "cryptosuite": "eddsa-rdfc-2022",
                            "created": "2023-02-26T22:06:38Z",
                            "verificationMethod": "did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7#z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7",
                            "proofPurpose": "assertionMethod",
                            "proofValue": "z5gL4Hy8N4B6zr9mQAGqpsry1iTdxEAp4zjqPNQv7iTvgdkMcHKnMALvPwU3YAKZhYn3k3Jmut2TAMxSaHaggFtf4"
                          },
                          {
                            "type": "DataIntegrityProof",
                            "cryptosuite": "eddsa-rdfc-2022",
                            "created": "2023-02-26T22:16:38Z",
                            "verificationMethod": "did:key:z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E#z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E",
                            "proofPurpose": "assertionMethod",
                            "previousProof": "urn:uuid:26329423-bec9-4b2e-88cb-a7c7d9dc4544",
                            "proofValue": "z2ENoYDUK8cMMJMvwRGyHVX23pPeHaZfCgpbDFs15FXGaeFseeqzZf5nWXF14JPoBcqdr39vVPgrAUbWT2VYYacrG"
                          }
                        ]
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half",
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",\"https://w3id.org/security/data-integrity/v2\",{\"@context\":{\"AlumniCredential\":\"https://www.example.org/AlumniCredential\",\"alumniOf\":\"https://www.example.org/alumniOf\",\"description\":\"https://schema.org/description\",\"name\":\"https://schema.org/name\"}}],\"id\":\"urn:uuid:58172aac-d8ba-11ed-83dd-0b3aef56cc33\",\"type\":[\"VerifiableCredential\",\"AlumniCredential\"],\"name\":\"Alumni Credential\",\"description\":\"A minimum viable example of a VC 1.1 Alumni Credential.\",\"issuer\":\"did:key:z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E\",\"issuanceDate\":\"2023-01-01T00:00:00Z\",\"credentialSubject\":{\"id\":\"did:example:abcdefgh\",\"alumniOf\":\"The School of Examples\"},\"proof\":[{\"type\":\"DataIntegrityProof\",\"id\":\"urn:uuid:26329423-bec9-4b2e-88cb-a7c7d9dc4544\",\"cryptosuite\":\"eddsa-rdfc-2022\",\"created\":\"2023-02-26T22:06:38Z\",\"verificationMethod\":\"did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7#z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z5gL4Hy8N4B6zr9mQAGqpsry1iTdxEAp4zjqPNQv7iTvgdkMcHKnMALvPwU3YAKZhYn3k3Jmut2TAMxSaHaggFtf4\"},{\"type\":\"DataIntegrityProof\",\"cryptosuite\":\"eddsa-rdfc-2022\",\"created\":\"2023-02-26T22:16:38Z\",\"verificationMethod\":\"did:key:z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E#z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E\",\"proofPurpose\":\"assertionMethod\",\"previousProof\":\"urn:uuid:26329423-bec9-4b2e-88cb-a7c7d9dc4544\",\"proofValue\":\"z2ENoYDUK8cMMJMvwRGyHVX23pPeHaZfCgpbDFs15FXGaeFseeqzZf5nWXF14JPoBcqdr39vVPgrAUbWT2VYYacrG\"}]},\"options\":{\"checks\":[\"proof\"]}}"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc2.veresverifier.dev/verifiers/z19w7KofwvE2nkJeRVLp8NDxz/credentials/verify",
                  "status": 400,
                  "data": {
                    "verified": false,
                    "results": [
                      {
                        "proof": {
                          "@context": [
                            "https://www.w3.org/2018/credentials/v1",
                            "https://w3id.org/security/data-integrity/v2",
                            {
                              "@context": {
                                "AlumniCredential": "https://www.example.org/AlumniCredential",
                                "alumniOf": "https://www.example.org/alumniOf",
                                "description": "https://schema.org/description",
                                "name": "https://schema.org/name"
                              }
                            }
                          ],
                          "type": "DataIntegrityProof",
                          "id": "urn:uuid:26329423-bec9-4b2e-88cb-a7c7d9dc4544",
                          "cryptosuite": "eddsa-rdfc-2022",
                          "created": "2023-02-26T22:06:38Z",
                          "verificationMethod": "did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7#z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "z5gL4Hy8N4B6zr9mQAGqpsry1iTdxEAp4zjqPNQv7iTvgdkMcHKnMALvPwU3YAKZhYn3k3Jmut2TAMxSaHaggFtf4"
                        },
                        "verified": false,
                        "verificationMethod": {
                          "@context": "https://w3id.org/security/suites/ed25519-2020/v1",
                          "id": "did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7#z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7",
                          "type": "Ed25519VerificationKey2020",
                          "controller": "did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7",
                          "publicKeyMultibase": "z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7"
                        },
                        "error": {
                          "name": "VerificationError",
                          "message": "Credential issuer must match the verification method controller."
                        },
                        "purposeResult": {
                          "valid": false,
                          "error": {
                            "name": "Error",
                            "message": "Credential issuer must match the verification method controller.",
                            "stack": "Error: Credential issuer must match the verification method controller.\n    at CredentialIssuancePurpose.validate (file:///home/node/app/node_modules/@digitalbazaar/vc/lib/CredentialIssuancePurpose.js:70:15)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async /home/node/app/node_modules/jsonld-signatures/lib/ProofSet.js:305:27\n    at async Promise.all (index 0)\n    at async _verify (/home/node/app/node_modules/jsonld-signatures/lib/ProofSet.js:291:3)\n    at async ProofSet.verify (/home/node/app/node_modules/jsonld-signatures/lib/ProofSet.js:191:23)\n    at async Object.verify (/home/node/app/node_modules/jsonld-signatures/lib/jsonld-signatures.js:169:18)\n    at async _verifyCredential (file:///home/node/app/node_modules/@digitalbazaar/vc/lib/index.js:346:18)\n    at async Module.verifyCredential (file:///home/node/app/node_modules/@digitalbazaar/vc/lib/index.js:291:12)\n    at async Module.verifyCredential (file:///home/node/app/node_modules/@bedrock/vc-verifier/lib/di.js:17:18)"
                          }
                        }
                      },
                      {
                        "proof": {
                          "@context": [
                            "https://www.w3.org/2018/credentials/v1",
                            "https://w3id.org/security/data-integrity/v2",
                            {
                              "@context": {
                                "AlumniCredential": "https://www.example.org/AlumniCredential",
                                "alumniOf": "https://www.example.org/alumniOf",
                                "description": "https://schema.org/description",
                                "name": "https://schema.org/name"
                              }
                            }
                          ],
                          "type": "DataIntegrityProof",
                          "cryptosuite": "eddsa-rdfc-2022",
                          "created": "2023-02-26T22:16:38Z",
                          "verificationMethod": "did:key:z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E#z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E",
                          "proofPurpose": "assertionMethod",
                          "previousProof": "urn:uuid:26329423-bec9-4b2e-88cb-a7c7d9dc4544",
                          "proofValue": "z2ENoYDUK8cMMJMvwRGyHVX23pPeHaZfCgpbDFs15FXGaeFseeqzZf5nWXF14JPoBcqdr39vVPgrAUbWT2VYYacrG"
                        },
                        "verified": false,
                        "error": {
                          "name": "VerificationError",
                          "message": "Invalid signature."
                        }
                      }
                    ],
                    "error": {
                      "name": "VerificationError",
                      "errors": [
                        {
                          "name": "Error",
                          "message": "Credential issuer must match the verification method controller.",
                          "stack": "Error: Credential issuer must match the verification method controller.\n    at CredentialIssuancePurpose.validate (file:///home/node/app/node_modules/@digitalbazaar/vc/lib/CredentialIssuancePurpose.js:70:15)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async /home/node/app/node_modules/jsonld-signatures/lib/ProofSet.js:305:27\n    at async Promise.all (index 0)\n    at async _verify (/home/node/app/node_modules/jsonld-signatures/lib/ProofSet.js:291:3)\n    at async ProofSet.verify (/home/node/app/node_modules/jsonld-signatures/lib/ProofSet.js:191:23)\n    at async Object.verify (/home/node/app/node_modules/jsonld-signatures/lib/jsonld-signatures.js:169:18)\n    at async _verifyCredential (file:///home/node/app/node_modules/@digitalbazaar/vc/lib/index.js:346:18)\n    at async Module.verifyCredential (file:///home/node/app/node_modules/@digitalbazaar/vc/lib/index.js:291:12)\n    at async Module.verifyCredential (file:///home/node/app/node_modules/@bedrock/vc-verifier/lib/di.js:17:18)"
                        },
                        {
                          "name": "Error",
                          "message": "Invalid signature.",
                          "stack": "Error: Invalid signature.\n    at DataIntegrityProof.verifyProof (file:///home/node/app/node_modules/@digitalbazaar/data-integrity/lib/DataIntegrityProof.js:303:15)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async /home/node/app/node_modules/jsonld-signatures/lib/ProofSet.js:272:53\n    at async Promise.all (index 1)\n    at async _verify (/home/node/app/node_modules/jsonld-signatures/lib/ProofSet.js:260:3)\n    at async ProofSet.verify (/home/node/app/node_modules/jsonld-signatures/lib/ProofSet.js:191:23)\n    at async Object.verify (/home/node/app/node_modules/jsonld-signatures/lib/jsonld-signatures.js:169:18)\n    at async _verifyCredential (file:///home/node/app/node_modules/@digitalbazaar/vc/lib/index.js:346:18)\n    at async Module.verifyCredential (file:///home/node/app/node_modules/@digitalbazaar/vc/lib/index.js:291:12)\n    at async Module.verifyCredential (file:///home/node/app/node_modules/@bedrock/vc-verifier/lib/di.js:17:18)"
                        }
                      ],
                      "message": "Verification error(s)."
                    },
                    "checks": [
                      {
                        "check": [
                          "proof"
                        ],
                        "id": "urn:uuid:58172aac-d8ba-11ed-83dd-0b3aef56cc33",
                        "error": "Credential issuer must match the verification method controller.",
                        "verificationMethod": "did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7#z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7"
                      }
                    ]
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Should verify VC with a string \"proof.previousProof\".: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:50:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/suites/verify.js:271:9)"
              }
            },
            {
              "type": "test",
              "title": "If an unordered list (proof), all referenced proofs in the array MUST verify.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=If%20an%20unordered%20list%2C%20all%20referenced%20proofs%20in%20the%20array%20MUST%20verify';\n        await verificationSuccess({\n          credential: credentials.clone('proofSet'),\n          verifier,\n          reason: 'Should verify VC with multiple proofs.'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "AaBj6j734Xhrd8pZ6XJAZ",
              "ctx": null,
              "_testId": "urn:uuid:91d2f65a-3401-41f7-8cfb-ea5fb57c92ef",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If an unordered list (proof), all referenced proofs in the array MUST verify."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=If%20an%20unordered%20list%2C%20all%20referenced%20proofs%20in%20the%20array%20MUST%20verify",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 21294,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 89,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If a proof with id equal to previousProof does not exist in allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20a%20proof%20with%20id%20equal%20to%20previousProof%20does%20not%20exist%20in%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR';\n        await verificationFail({\n          credential: credentials.clone('missingPreviousProofString'),\n          verifier,\n          reason: 'Should not verify VC with invalid \"proof.previousProof\".'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "AaBj6j734Xhrd8pZ6XJAZ",
              "ctx": null,
              "_testId": "urn:uuid:38ecd677-f8a0-4379-a4e6-98e80e39f2f0",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If a proof with id equal to previousProof does not exist in allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20a%20proof%20with%20id%20equal%20to%20previousProof%20does%20not%20exist%20in%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 21383,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 94,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If any element of previousProof list has an id attribute that does not match the id attribute of any element of allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20any%20element%20of%20previousProof%20list%20has%20an%20id%20attribute%20that%20does%20not%20match%20the%20id%20attribute%20of%20any%20element%20of%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n        await verificationFail({\n          credential: credentials.clone('missingPreviousProofArray'),\n          verifier,\n          reason: 'Should not verify VC with invalid \"proof.previousProof\".'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "AaBj6j734Xhrd8pZ6XJAZ",
              "ctx": null,
              "_testId": "urn:uuid:3ac40989-e59d-4ce2-aae3-1871335d7f7e",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If any element of previousProof list has an id attribute that does not match the id attribute of any element of allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20any%20element%20of%20previousProof%20list%20has%20an%20id%20attribute%20that%20does%20not%20match%20the%20id%20attribute%20of%20any%20element%20of%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 21477,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 116,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Each value identifies another data integrity proof, all of which MUST also verify for the current proof to be considered verified",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=Each%20value%20identifies%20another%20data%20integrity%20proof%2C%20all%20of%20which%20MUST%20also%20verify%20for%20the%20current%20proof%20to%20be%20considered%20verified';\n        await verificationFail({\n          credential: credentials.clone('previousProofFail'),\n          verifier,\n          reason: 'Should not verify VC with a \"previousProof\" that does ' +\n          'not verify.'\n        });\n\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "AaBj6j734Xhrd8pZ6XJAZ",
              "ctx": null,
              "_testId": "urn:uuid:41c691ed-8927-4a86-8a5d-efb74f16ba7a",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "Each value identifies another data integrity proof, all of which MUST also verify for the current proof to be considered verified"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=Each%20value%20identifies%20another%20data%20integrity%20proof%2C%20all%20of%20which%20MUST%20also%20verify%20for%20the%20current%20proof%20to%20be%20considered%20verified",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 21593,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 96,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"Digital Bazaar\"",
              "body": "function() {\n      this.currentTest.cell = {\n        columnId: testDescription,\n        rowId: this.currentTest.title\n      };\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "AaBj6j734Xhrd8pZ6XJAZ",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Digital Bazaar\"",
              "body": "async function() {\n      proofValueTests = shouldBeProofValue({credentials, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "AaBj6j734Xhrd8pZ6XJAZ",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19665,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "IPhqgK04YvYqd94TS-1Z1",
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
          "_testId": "urn:uuid:321bbf9c-ecba-4029-b812-a8b59ceeec6d"
        },
        {
          "title": "Grotto Networking",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.';\n      const credential = credentials.clone('invalidBaseUrl');\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'Should not verify VC with invalid base URL'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "GR-gSiE-yu7q5QSTZ-vf1",
              "ctx": null,
              "_testId": "urn:uuid:f8509ac1-89d4-49ae-ba4f-6724c801c40a",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 21691,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 833,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Conforming processors MUST produce errors when non-conforming documents are consumed.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.';\n      // this could be read as testing all non-confirming docs or just one\n      // for this test only one doc is tested as it should throw for any\n      // non-conforming doc\n      await verificationFail({\n        credential: credentials.clone('invalidProofType'),\n        verifier,\n        reason: 'Should not verify VC with invalid \"proof.type\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "GR-gSiE-yu7q5QSTZ-vf1",
              "ctx": null,
              "_testId": "urn:uuid:c810a940-c3c8-448d-a556-f50329c85fca",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "Conforming processors MUST produce errors when non-conforming documents are consumed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 22525,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 43,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.';\n      const credential = credentials.clone('issuedVc');\n      credential.proof = null;\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'MUST not verify VC with proof that is not a map.'\n      });\n      await verificationFail({\n        // use a string as the non map representation of a VC\n        credential: JSON.stringify(credentials.clone('issuedVc')),\n        verifier,\n        reason: 'MUST not verify VC that is not a map.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "GR-gSiE-yu7q5QSTZ-vf1",
              "ctx": null,
              "_testId": "urn:uuid:52a10c65-839d-47aa-974c-769ed6de4a53",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 22567,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 41,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof;\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'MUST not verify VC w/o a proof'\n      });\n      const noType = credentials.clone('issuedVc');\n      delete noType.proof.type;\n      await verificationFail({\n        credential: noType,\n        verifier,\n        reason: 'MUST not verify VC w/o a \"proof.type\".'\n      });\n      const noVm = credentials.clone('noVm');\n      await verificationFail({\n        credential: noVm,\n        verifier,\n        reason: 'MUST not verify VC w/o \"proof.verificationMethod\".\"'\n      });\n      const noProofPurpose = credentials.clone('noProofPurpose');\n      await verificationFail({\n        credential: noProofPurpose,\n        verifier,\n        reason: 'MUST not verify VC w/o \"proof.proofPurpose\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "GR-gSiE-yu7q5QSTZ-vf1",
              "ctx": null,
              "_testId": "urn:uuid:d7969724-9b55-4f30-8416-ff7dfeaab11a",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 22608,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 79,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The type property MUST contain the string DataIntegrityProof.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.';\n          const credential = credentials.clone('invalidProofType');\n          await verificationFail({\n            credential,\n            verifier,\n            reason: 'Should not verify VC with invalid \"proof.type\"'\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "GR-gSiE-yu7q5QSTZ-vf1",
              "ctx": null,
              "_testId": "urn:uuid:fd7a90dd-b9f4-4c3b-b859-eca6d4ac351b",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The type property MUST contain the string DataIntegrityProof."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 22688,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 20,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      // NOTE: expectedProofPurpose should be specified by verifiers internally\n      // it is very unlikely to be invalidProofPurpose\n      await verificationFail({\n        credential: credentials.clone('invalidProofPurpose'),\n        verifier,\n        reason: 'Verifier should reject VC with invalid proof purpose.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "GR-gSiE-yu7q5QSTZ-vf1",
              "ctx": null,
              "_testId": "urn:uuid:61d9a595-bc1b-47bb-86d8-669aafcf6607",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 22707,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 596,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.';\n        await proofValueTests;\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "GR-gSiE-yu7q5QSTZ-vf1",
              "ctx": null,
              "_testId": "urn:uuid:12c8e401-2011-4728-9726-e6f92005ed2b",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The proofValue property MUST be used, as specified in 2.1 Proofs."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 23303,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof';\n      await proofValueTests;\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "GR-gSiE-yu7q5QSTZ-vf1",
              "ctx": null,
              "_testId": "urn:uuid:65488243-046e-4bf6-86d4-5e54de21cf56",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 23303,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      await verificationFail({\n        credential: credentials.clone('undefinedTerm'),\n        verifier,\n        reason: 'Should fail to verify VC when data is dropped by JSON-LD'\n      });\n      const undefinedTerm = credentials.clone('issuedVc');\n      undefinedTerm.credentialSubject.undefinedTerm = 'IfDroppedWillVerify';\n      await verificationFail({\n        credential: undefinedTerm,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined term is added ' +\n          'after issuance.'\n      });\n      const undefinedType = credentials.clone('issuedVc');\n      undefinedType.type.push('UndefinedType');\n      await verificationFail({\n        credential: undefinedType,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined type is added ' +\n          'after issuance.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "GR-gSiE-yu7q5QSTZ-vf1",
              "ctx": null,
              "_testId": "urn:uuid:5bd5325c-1914-4ed6-801e-4602fd617940",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 23303,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1072,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n      const credential = credentials.clone('invalidCryptosuite');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "GR-gSiE-yu7q5QSTZ-vf1",
              "ctx": null,
              "_testId": "urn:uuid:f44e70ee-e9e9-4166-baa9-1986e040b0c0",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 24375,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 20,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "An OPTIONAL string value (proof.previousProof) or unordered list of string values. Each value identifies another data integrity proof that MUST verify before the current proof is processed.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=An%20OPTIONAL%20string%20value%20or%20unordered%20list%20of%20string%20values.%20Each%20value%20identifies%20another%20data%20integrity%20proof%20that%20MUST%20verify%20before%20the%20current%20proof%20is%20processed';\n        await verificationSuccess({\n          credential: credentials.clone('previousProofString'),\n          verifier,\n          reason: 'Should verify VC with a string \"proof.previousProof\".'\n        });\n        await verificationSuccess({\n          credential: credentials.clone('previousProofArray'),\n          verifier,\n          reason: 'Should verify VC with an Array \"proof.previousProof\".'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "GR-gSiE-yu7q5QSTZ-vf1",
              "ctx": null,
              "_testId": "urn:uuid:21d31db7-3fd6-41ab-915e-7204cdbe981c",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "An OPTIONAL string value (proof.previousProof) or unordered list of string values. Each value identifies another data integrity proof that MUST verify before the current proof is processed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=An%20OPTIONAL%20string%20value%20or%20unordered%20list%20of%20string%20values.%20Each%20value%20identifies%20another%20data%20integrity%20proof%20that%20MUST%20verify%20before%20the%20current%20proof%20is%20processed",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 24397,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 2666,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If an unordered list (proof), all referenced proofs in the array MUST verify.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=If%20an%20unordered%20list%2C%20all%20referenced%20proofs%20in%20the%20array%20MUST%20verify';\n        await verificationSuccess({\n          credential: credentials.clone('proofSet'),\n          verifier,\n          reason: 'Should verify VC with multiple proofs.'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "GR-gSiE-yu7q5QSTZ-vf1",
              "ctx": null,
              "_testId": "urn:uuid:7e84246b-472c-44be-853c-599985de6646",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If an unordered list (proof), all referenced proofs in the array MUST verify."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=If%20an%20unordered%20list%2C%20all%20referenced%20proofs%20in%20the%20array%20MUST%20verify",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 27064,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1662,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If a proof with id equal to previousProof does not exist in allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20a%20proof%20with%20id%20equal%20to%20previousProof%20does%20not%20exist%20in%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR';\n        await verificationFail({\n          credential: credentials.clone('missingPreviousProofString'),\n          verifier,\n          reason: 'Should not verify VC with invalid \"proof.previousProof\".'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "GR-gSiE-yu7q5QSTZ-vf1",
              "ctx": null,
              "_testId": "urn:uuid:6ae55123-8bd8-4a9c-a951-7f53e6301790",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If a proof with id equal to previousProof does not exist in allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20a%20proof%20with%20id%20equal%20to%20previousProof%20does%20not%20exist%20in%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 28725,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 781,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If any element of previousProof list has an id attribute that does not match the id attribute of any element of allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20any%20element%20of%20previousProof%20list%20has%20an%20id%20attribute%20that%20does%20not%20match%20the%20id%20attribute%20of%20any%20element%20of%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n        await verificationFail({\n          credential: credentials.clone('missingPreviousProofArray'),\n          verifier,\n          reason: 'Should not verify VC with invalid \"proof.previousProof\".'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "GR-gSiE-yu7q5QSTZ-vf1",
              "ctx": null,
              "_testId": "urn:uuid:4599d176-14a4-460d-86b2-aec684044b5e",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If any element of previousProof list has an id attribute that does not match the id attribute of any element of allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20any%20element%20of%20previousProof%20list%20has%20an%20id%20attribute%20that%20does%20not%20match%20the%20id%20attribute%20of%20any%20element%20of%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29506,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 616,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Each value identifies another data integrity proof, all of which MUST also verify for the current proof to be considered verified",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=Each%20value%20identifies%20another%20data%20integrity%20proof%2C%20all%20of%20which%20MUST%20also%20verify%20for%20the%20current%20proof%20to%20be%20considered%20verified';\n        await verificationFail({\n          credential: credentials.clone('previousProofFail'),\n          verifier,\n          reason: 'Should not verify VC with a \"previousProof\" that does ' +\n          'not verify.'\n        });\n\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "GR-gSiE-yu7q5QSTZ-vf1",
              "ctx": null,
              "_testId": "urn:uuid:858ba8d4-e344-4e95-aecc-0c29e909113b",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "Each value identifies another data integrity proof, all of which MUST also verify for the current proof to be considered verified"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=Each%20value%20identifies%20another%20data%20integrity%20proof%2C%20all%20of%20which%20MUST%20also%20verify%20for%20the%20current%20proof%20to%20be%20considered%20verified",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30122,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 21,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"Grotto Networking\"",
              "body": "function() {\n      this.currentTest.cell = {\n        columnId: testDescription,\n        rowId: this.currentTest.title\n      };\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "GR-gSiE-yu7q5QSTZ-vf1",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Grotto Networking\"",
              "body": "async function() {\n      proofValueTests = shouldBeProofValue({credentials, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "GR-gSiE-yu7q5QSTZ-vf1",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 21689,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "IPhqgK04YvYqd94TS-1Z1",
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
          "_testId": "urn:uuid:5299bfc6-fc9a-421d-8dfb-1f2866104635"
        },
        {
          "title": "Netis",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.';\n      const credential = credentials.clone('invalidBaseUrl');\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'Should not verify VC with invalid base URL'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "axNKa1xcoGlQzOQTJcOzF",
              "ctx": null,
              "_testId": "urn:uuid:67f6bad7-90c3-46ea-8c36-e17c554a0747",
              "cell": {
                "columnId": "Netis",
                "rowId": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30145,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 605,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Conforming processors MUST produce errors when non-conforming documents are consumed.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.';\n      // this could be read as testing all non-confirming docs or just one\n      // for this test only one doc is tested as it should throw for any\n      // non-conforming doc\n      await verificationFail({\n        credential: credentials.clone('invalidProofType'),\n        verifier,\n        reason: 'Should not verify VC with invalid \"proof.type\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "axNKa1xcoGlQzOQTJcOzF",
              "ctx": null,
              "_testId": "urn:uuid:feab6119-fb28-4615-86f1-008a652638bf",
              "cell": {
                "columnId": "Netis",
                "rowId": "Conforming processors MUST produce errors when non-conforming documents are consumed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30750,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 165,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.';\n      const credential = credentials.clone('issuedVc');\n      credential.proof = null;\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'MUST not verify VC with proof that is not a map.'\n      });\n      await verificationFail({\n        // use a string as the non map representation of a VC\n        credential: JSON.stringify(credentials.clone('issuedVc')),\n        verifier,\n        reason: 'MUST not verify VC that is not a map.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "axNKa1xcoGlQzOQTJcOzF",
              "ctx": null,
              "_testId": "urn:uuid:1f3572f6-3418-4990-9269-d049dd89a732",
              "cell": {
                "columnId": "Netis",
                "rowId": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30916,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 323,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof;\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'MUST not verify VC w/o a proof'\n      });\n      const noType = credentials.clone('issuedVc');\n      delete noType.proof.type;\n      await verificationFail({\n        credential: noType,\n        verifier,\n        reason: 'MUST not verify VC w/o a \"proof.type\".'\n      });\n      const noVm = credentials.clone('noVm');\n      await verificationFail({\n        credential: noVm,\n        verifier,\n        reason: 'MUST not verify VC w/o \"proof.verificationMethod\".\"'\n      });\n      const noProofPurpose = credentials.clone('noProofPurpose');\n      await verificationFail({\n        credential: noProofPurpose,\n        verifier,\n        reason: 'MUST not verify VC w/o \"proof.proofPurpose\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "axNKa1xcoGlQzOQTJcOzF",
              "ctx": null,
              "_testId": "urn:uuid:b85ab0c9-4744-4969-a431-12cf42edfb70",
              "cell": {
                "columnId": "Netis",
                "rowId": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 31239,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 654,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The type property MUST contain the string DataIntegrityProof.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.';\n          const credential = credentials.clone('invalidProofType');\n          await verificationFail({\n            credential,\n            verifier,\n            reason: 'Should not verify VC with invalid \"proof.type\"'\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "axNKa1xcoGlQzOQTJcOzF",
              "ctx": null,
              "_testId": "urn:uuid:594a0342-b955-4787-b60f-2d9f73a4a682",
              "cell": {
                "columnId": "Netis",
                "rowId": "The type property MUST contain the string DataIntegrityProof."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 31892,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 162,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      // NOTE: expectedProofPurpose should be specified by verifiers internally\n      // it is very unlikely to be invalidProofPurpose\n      await verificationFail({\n        credential: credentials.clone('invalidProofPurpose'),\n        verifier,\n        reason: 'Verifier should reject VC with invalid proof purpose.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "axNKa1xcoGlQzOQTJcOzF",
              "ctx": null,
              "_testId": "urn:uuid:85a66506-30b8-416e-95f3-b78b63567ff2",
              "cell": {
                "columnId": "Netis",
                "rowId": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 32054,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 164,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.';\n        await proofValueTests;\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "axNKa1xcoGlQzOQTJcOzF",
              "ctx": null,
              "_testId": "urn:uuid:df5ffc74-758d-4438-9826-f0fd3ee9b112",
              "cell": {
                "columnId": "Netis",
                "rowId": "The proofValue property MUST be used, as specified in 2.1 Proofs."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 32218,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof';\n      await proofValueTests;\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "axNKa1xcoGlQzOQTJcOzF",
              "ctx": null,
              "_testId": "urn:uuid:197a4715-f9cf-45d8-b9e8-d1e25f91494a",
              "cell": {
                "columnId": "Netis",
                "rowId": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 32219,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      await verificationFail({\n        credential: credentials.clone('undefinedTerm'),\n        verifier,\n        reason: 'Should fail to verify VC when data is dropped by JSON-LD'\n      });\n      const undefinedTerm = credentials.clone('issuedVc');\n      undefinedTerm.credentialSubject.undefinedTerm = 'IfDroppedWillVerify';\n      await verificationFail({\n        credential: undefinedTerm,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined term is added ' +\n          'after issuance.'\n      });\n      const undefinedType = credentials.clone('issuedVc');\n      undefinedType.type.push('UndefinedType');\n      await verificationFail({\n        credential: undefinedType,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined type is added ' +\n          'after issuance.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "axNKa1xcoGlQzOQTJcOzF",
              "ctx": null,
              "_testId": "urn:uuid:88243e23-b7ab-424f-aec1-9486be092fb7",
              "cell": {
                "columnId": "Netis",
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 32219,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 514,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n      const credential = credentials.clone('invalidCryptosuite');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "axNKa1xcoGlQzOQTJcOzF",
              "ctx": null,
              "_testId": "urn:uuid:d403385a-fea7-44b1-ba87-4a304157a47b",
              "cell": {
                "columnId": "Netis",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 32733,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 166,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "An OPTIONAL string value (proof.previousProof) or unordered list of string values. Each value identifies another data integrity proof that MUST verify before the current proof is processed.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=An%20OPTIONAL%20string%20value%20or%20unordered%20list%20of%20string%20values.%20Each%20value%20identifies%20another%20data%20integrity%20proof%20that%20MUST%20verify%20before%20the%20current%20proof%20is%20processed';\n        await verificationSuccess({\n          credential: credentials.clone('previousProofString'),\n          verifier,\n          reason: 'Should verify VC with a string \"proof.previousProof\".'\n        });\n        await verificationSuccess({\n          credential: credentials.clone('previousProofArray'),\n          verifier,\n          reason: 'Should verify VC with an Array \"proof.previousProof\".'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "axNKa1xcoGlQzOQTJcOzF",
              "ctx": null,
              "_testId": "urn:uuid:d1cf8812-90ec-4f87-9f32-dc0cf2a053c0",
              "cell": {
                "columnId": "Netis",
                "rowId": "An OPTIONAL string value (proof.previousProof) or unordered list of string values. Each value identifies another data integrity proof that MUST verify before the current proof is processed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=An%20OPTIONAL%20string%20value%20or%20unordered%20list%20of%20string%20values.%20Each%20value%20identifies%20another%20data%20integrity%20proof%20that%20MUST%20verify%20before%20the%20current%20proof%20is%20processed",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 32899,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 171,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Should verify VC with a string \"proof.previousProof\".: expected HTTPError: Request failed with status cod… { …(5) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",\"https://w3id.org/security/data-integrity/v2\",{\"@context\":{\"AlumniCredential\":\"https://www.example.org/AlumniCredential\",\"alumniOf\":\"https://www.example.org/alumniOf\",\"description\":\"https://schema.org/description\",\"name\":\"https://schema.org/name\"}}],\"id\":\"urn:uuid:58172aac-d8ba-11ed-83dd-0b3aef56cc33\",\"type\":[\"VerifiableCredential\",\"AlumniCredential\"],\"name\":\"Alumni Credential\",\"description\":\"A minimum viable example of a VC 1.1 Alumni Credential.\",\"issuer\":\"did:key:z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E\",\"issuanceDate\":\"2023-01-01T00:00:00Z\",\"credentialSubject\":{\"id\":\"did:example:abcdefgh\",\"alumniOf\":\"The School of Examples\"},\"proof\":[{\"type\":\"DataIntegrityProof\",\"id\":\"urn:uuid:26329423-bec9-4b2e-88cb-a7c7d9dc4544\",\"cryptosuite\":\"eddsa-rdfc-2022\",\"created\":\"2023-02-26T22:06:38Z\",\"verificationMethod\":\"did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7#z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z5gL4Hy8N4B6zr9mQAGqpsry1iTdxEAp4zjqPNQv7iTvgdkMcHKnMALvPwU3YAKZhYn3k3Jmut2TAMxSaHaggFtf4\"},{\"type\":\"DataIntegrityProof\",\"cryptosuite\":\"eddsa-rdfc-2022\",\"created\":\"2023-02-26T22:16:38Z\",\"verificationMethod\":\"did:key:z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E#z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E\",\"proofPurpose\":\"assertionMethod\",\"previousProof\":\"urn:uuid:26329423-bec9-4b2e-88cb-a7c7d9dc4544\",\"proofValue\":\"z2ENoYDUK8cMMJMvwRGyHVX23pPeHaZfCgpbDFs15FXGaeFseeqzZf5nWXF14JPoBcqdr39vVPgrAUbWT2VYYacrG\"}]},\"options\":{}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          "https://w3id.org/security/data-integrity/v2",
                          {
                            "@context": {
                              "AlumniCredential": "https://www.example.org/AlumniCredential",
                              "alumniOf": "https://www.example.org/alumniOf",
                              "description": "https://schema.org/description",
                              "name": "https://schema.org/name"
                            }
                          }
                        ],
                        "id": "urn:uuid:58172aac-d8ba-11ed-83dd-0b3aef56cc33",
                        "type": [
                          "VerifiableCredential",
                          "AlumniCredential"
                        ],
                        "name": "Alumni Credential",
                        "description": "A minimum viable example of a VC 1.1 Alumni Credential.",
                        "issuer": "did:key:z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E",
                        "issuanceDate": "2023-01-01T00:00:00Z",
                        "credentialSubject": {
                          "id": "did:example:abcdefgh",
                          "alumniOf": "The School of Examples"
                        },
                        "proof": [
                          {
                            "type": "DataIntegrityProof",
                            "id": "urn:uuid:26329423-bec9-4b2e-88cb-a7c7d9dc4544",
                            "cryptosuite": "eddsa-rdfc-2022",
                            "created": "2023-02-26T22:06:38Z",
                            "verificationMethod": "did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7#z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7",
                            "proofPurpose": "assertionMethod",
                            "proofValue": "z5gL4Hy8N4B6zr9mQAGqpsry1iTdxEAp4zjqPNQv7iTvgdkMcHKnMALvPwU3YAKZhYn3k3Jmut2TAMxSaHaggFtf4"
                          },
                          {
                            "type": "DataIntegrityProof",
                            "cryptosuite": "eddsa-rdfc-2022",
                            "created": "2023-02-26T22:16:38Z",
                            "verificationMethod": "did:key:z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E#z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E",
                            "proofPurpose": "assertionMethod",
                            "previousProof": "urn:uuid:26329423-bec9-4b2e-88cb-a7c7d9dc4544",
                            "proofValue": "z2ENoYDUK8cMMJMvwRGyHVX23pPeHaZfCgpbDFs15FXGaeFseeqzZf5nWXF14JPoBcqdr39vVPgrAUbWT2VYYacrG"
                          }
                        ]
                      },
                      "options": {}
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://test-api.mynext.id/api/v1/verifier/credential/vc-api/verify",
                  "status": 400
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Should verify VC with a string \"proof.previousProof\".: expected HTTPError: Request failed with status cod… { …(5) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:50:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/suites/verify.js:271:9)"
              }
            },
            {
              "type": "test",
              "title": "If an unordered list (proof), all referenced proofs in the array MUST verify.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=If%20an%20unordered%20list%2C%20all%20referenced%20proofs%20in%20the%20array%20MUST%20verify';\n        await verificationSuccess({\n          credential: credentials.clone('proofSet'),\n          verifier,\n          reason: 'Should verify VC with multiple proofs.'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "axNKa1xcoGlQzOQTJcOzF",
              "ctx": null,
              "_testId": "urn:uuid:e491298e-2745-4f69-8973-70e0acc34086",
              "cell": {
                "columnId": "Netis",
                "rowId": "If an unordered list (proof), all referenced proofs in the array MUST verify."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=If%20an%20unordered%20list%2C%20all%20referenced%20proofs%20in%20the%20array%20MUST%20verify",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 33071,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 178,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If a proof with id equal to previousProof does not exist in allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20a%20proof%20with%20id%20equal%20to%20previousProof%20does%20not%20exist%20in%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR';\n        await verificationFail({\n          credential: credentials.clone('missingPreviousProofString'),\n          verifier,\n          reason: 'Should not verify VC with invalid \"proof.previousProof\".'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "axNKa1xcoGlQzOQTJcOzF",
              "ctx": null,
              "_testId": "urn:uuid:dcb18e9d-c095-4d43-8f08-ce7b565e3477",
              "cell": {
                "columnId": "Netis",
                "rowId": "If a proof with id equal to previousProof does not exist in allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20a%20proof%20with%20id%20equal%20to%20previousProof%20does%20not%20exist%20in%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 33249,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 167,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If any element of previousProof list has an id attribute that does not match the id attribute of any element of allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20any%20element%20of%20previousProof%20list%20has%20an%20id%20attribute%20that%20does%20not%20match%20the%20id%20attribute%20of%20any%20element%20of%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n        await verificationFail({\n          credential: credentials.clone('missingPreviousProofArray'),\n          verifier,\n          reason: 'Should not verify VC with invalid \"proof.previousProof\".'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "axNKa1xcoGlQzOQTJcOzF",
              "ctx": null,
              "_testId": "urn:uuid:0db06918-7d0e-4336-8eb3-419dc6d9daea",
              "cell": {
                "columnId": "Netis",
                "rowId": "If any element of previousProof list has an id attribute that does not match the id attribute of any element of allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20any%20element%20of%20previousProof%20list%20has%20an%20id%20attribute%20that%20does%20not%20match%20the%20id%20attribute%20of%20any%20element%20of%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 33417,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 174,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Each value identifies another data integrity proof, all of which MUST also verify for the current proof to be considered verified",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=Each%20value%20identifies%20another%20data%20integrity%20proof%2C%20all%20of%20which%20MUST%20also%20verify%20for%20the%20current%20proof%20to%20be%20considered%20verified';\n        await verificationFail({\n          credential: credentials.clone('previousProofFail'),\n          verifier,\n          reason: 'Should not verify VC with a \"previousProof\" that does ' +\n          'not verify.'\n        });\n\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "axNKa1xcoGlQzOQTJcOzF",
              "ctx": null,
              "_testId": "urn:uuid:bc13bc91-1708-48f3-badc-eb4b8f207c95",
              "cell": {
                "columnId": "Netis",
                "rowId": "Each value identifies another data integrity proof, all of which MUST also verify for the current proof to be considered verified"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=Each%20value%20identifies%20another%20data%20integrity%20proof%2C%20all%20of%20which%20MUST%20also%20verify%20for%20the%20current%20proof%20to%20be%20considered%20verified",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 33590,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 163,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"Netis\"",
              "body": "function() {\n      this.currentTest.cell = {\n        columnId: testDescription,\n        rowId: this.currentTest.title\n      };\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "axNKa1xcoGlQzOQTJcOzF",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Netis\"",
              "body": "async function() {\n      proofValueTests = shouldBeProofValue({credentials, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "axNKa1xcoGlQzOQTJcOzF",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30143,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "IPhqgK04YvYqd94TS-1Z1",
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
          "_testId": "urn:uuid:e69a247b-417f-4316-9e07-1cfd0810f8b5"
        },
        {
          "title": "Procivis One Core",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.';\n      const credential = credentials.clone('invalidBaseUrl');\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'Should not verify VC with invalid base URL'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "7HtVI6O_1Gd2wEyGqdagm",
              "ctx": null,
              "_testId": "urn:uuid:efc444a4-e548-4551-9925-55aecbdc1e40",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 33755,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 486,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Conforming processors MUST produce errors when non-conforming documents are consumed.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.';\n      // this could be read as testing all non-confirming docs or just one\n      // for this test only one doc is tested as it should throw for any\n      // non-conforming doc\n      await verificationFail({\n        credential: credentials.clone('invalidProofType'),\n        verifier,\n        reason: 'Should not verify VC with invalid \"proof.type\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "7HtVI6O_1Gd2wEyGqdagm",
              "ctx": null,
              "_testId": "urn:uuid:2e992ed7-2db3-4704-a5fd-6cd40c2d04b2",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "Conforming processors MUST produce errors when non-conforming documents are consumed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 34244,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 143,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.';\n      const credential = credentials.clone('issuedVc');\n      credential.proof = null;\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'MUST not verify VC with proof that is not a map.'\n      });\n      await verificationFail({\n        // use a string as the non map representation of a VC\n        credential: JSON.stringify(credentials.clone('issuedVc')),\n        verifier,\n        reason: 'MUST not verify VC that is not a map.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "7HtVI6O_1Gd2wEyGqdagm",
              "ctx": null,
              "_testId": "urn:uuid:d33fccf2-6dfe-4a41-854e-b73b90c837dd",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 34386,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 284,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof;\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'MUST not verify VC w/o a proof'\n      });\n      const noType = credentials.clone('issuedVc');\n      delete noType.proof.type;\n      await verificationFail({\n        credential: noType,\n        verifier,\n        reason: 'MUST not verify VC w/o a \"proof.type\".'\n      });\n      const noVm = credentials.clone('noVm');\n      await verificationFail({\n        credential: noVm,\n        verifier,\n        reason: 'MUST not verify VC w/o \"proof.verificationMethod\".\"'\n      });\n      const noProofPurpose = credentials.clone('noProofPurpose');\n      await verificationFail({\n        credential: noProofPurpose,\n        verifier,\n        reason: 'MUST not verify VC w/o \"proof.proofPurpose\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "7HtVI6O_1Gd2wEyGqdagm",
              "ctx": null,
              "_testId": "urn:uuid:61ade8c4-dedb-4883-9191-c50143b7c14f",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 34671,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 630,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The type property MUST contain the string DataIntegrityProof.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.';\n          const credential = credentials.clone('invalidProofType');\n          await verificationFail({\n            credential,\n            verifier,\n            reason: 'Should not verify VC with invalid \"proof.type\"'\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "7HtVI6O_1Gd2wEyGqdagm",
              "ctx": null,
              "_testId": "urn:uuid:708dfe82-0d2f-42b2-9ee9-61e8b5508483",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "The type property MUST contain the string DataIntegrityProof."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 35301,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 142,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      // NOTE: expectedProofPurpose should be specified by verifiers internally\n      // it is very unlikely to be invalidProofPurpose\n      await verificationFail({\n        credential: credentials.clone('invalidProofPurpose'),\n        verifier,\n        reason: 'Verifier should reject VC with invalid proof purpose.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "7HtVI6O_1Gd2wEyGqdagm",
              "ctx": null,
              "_testId": "urn:uuid:43a0f35e-981a-4ce9-9997-a3bdcfa24af5",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 35443,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 142,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.';\n        await proofValueTests;\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "7HtVI6O_1Gd2wEyGqdagm",
              "ctx": null,
              "_testId": "urn:uuid:9ccfa290-3253-4d41-a6b7-44365c23caab",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "The proofValue property MUST be used, as specified in 2.1 Proofs."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 35586,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof';\n      await proofValueTests;\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "7HtVI6O_1Gd2wEyGqdagm",
              "ctx": null,
              "_testId": "urn:uuid:03dc43cd-99a8-4738-9cd4-b21915959d8e",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 35586,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      await verificationFail({\n        credential: credentials.clone('undefinedTerm'),\n        verifier,\n        reason: 'Should fail to verify VC when data is dropped by JSON-LD'\n      });\n      const undefinedTerm = credentials.clone('issuedVc');\n      undefinedTerm.credentialSubject.undefinedTerm = 'IfDroppedWillVerify';\n      await verificationFail({\n        credential: undefinedTerm,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined term is added ' +\n          'after issuance.'\n      });\n      const undefinedType = credentials.clone('issuedVc');\n      undefinedType.type.push('UndefinedType');\n      await verificationFail({\n        credential: undefinedType,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined type is added ' +\n          'after issuance.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "7HtVI6O_1Gd2wEyGqdagm",
              "ctx": null,
              "_testId": "urn:uuid:739c2b94-6fab-4749-8ecd-651f897b6ef1",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 35586,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 428,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n      const credential = credentials.clone('invalidCryptosuite');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "7HtVI6O_1Gd2wEyGqdagm",
              "ctx": null,
              "_testId": "urn:uuid:d184b6c5-129a-4e34-bc5c-d1869723d9bd",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 36014,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 144,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "An OPTIONAL string value (proof.previousProof) or unordered list of string values. Each value identifies another data integrity proof that MUST verify before the current proof is processed.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=An%20OPTIONAL%20string%20value%20or%20unordered%20list%20of%20string%20values.%20Each%20value%20identifies%20another%20data%20integrity%20proof%20that%20MUST%20verify%20before%20the%20current%20proof%20is%20processed';\n        await verificationSuccess({\n          credential: credentials.clone('previousProofString'),\n          verifier,\n          reason: 'Should verify VC with a string \"proof.previousProof\".'\n        });\n        await verificationSuccess({\n          credential: credentials.clone('previousProofArray'),\n          verifier,\n          reason: 'Should verify VC with an Array \"proof.previousProof\".'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "7HtVI6O_1Gd2wEyGqdagm",
              "ctx": null,
              "_testId": "urn:uuid:090fea04-8a14-483d-b52e-d7d2995926b4",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "An OPTIONAL string value (proof.previousProof) or unordered list of string values. Each value identifies another data integrity proof that MUST verify before the current proof is processed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=An%20OPTIONAL%20string%20value%20or%20unordered%20list%20of%20string%20values.%20Each%20value%20identifies%20another%20data%20integrity%20proof%20that%20MUST%20verify%20before%20the%20current%20proof%20is%20processed",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 36159,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 144,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Should verify VC with a string \"proof.previousProof\".: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",\"https://w3id.org/security/data-integrity/v2\",{\"@context\":{\"AlumniCredential\":\"https://www.example.org/AlumniCredential\",\"alumniOf\":\"https://www.example.org/alumniOf\",\"description\":\"https://schema.org/description\",\"name\":\"https://schema.org/name\"}}],\"id\":\"urn:uuid:58172aac-d8ba-11ed-83dd-0b3aef56cc33\",\"type\":[\"VerifiableCredential\",\"AlumniCredential\"],\"name\":\"Alumni Credential\",\"description\":\"A minimum viable example of a VC 1.1 Alumni Credential.\",\"issuer\":\"did:key:z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E\",\"issuanceDate\":\"2023-01-01T00:00:00Z\",\"credentialSubject\":{\"id\":\"did:example:abcdefgh\",\"alumniOf\":\"The School of Examples\"},\"proof\":[{\"type\":\"DataIntegrityProof\",\"id\":\"urn:uuid:26329423-bec9-4b2e-88cb-a7c7d9dc4544\",\"cryptosuite\":\"eddsa-rdfc-2022\",\"created\":\"2023-02-26T22:06:38Z\",\"verificationMethod\":\"did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7#z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z5gL4Hy8N4B6zr9mQAGqpsry1iTdxEAp4zjqPNQv7iTvgdkMcHKnMALvPwU3YAKZhYn3k3Jmut2TAMxSaHaggFtf4\"},{\"type\":\"DataIntegrityProof\",\"cryptosuite\":\"eddsa-rdfc-2022\",\"created\":\"2023-02-26T22:16:38Z\",\"verificationMethod\":\"did:key:z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E#z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E\",\"proofPurpose\":\"assertionMethod\",\"previousProof\":\"urn:uuid:26329423-bec9-4b2e-88cb-a7c7d9dc4544\",\"proofValue\":\"z2ENoYDUK8cMMJMvwRGyHVX23pPeHaZfCgpbDFs15FXGaeFseeqzZf5nWXF14JPoBcqdr39vVPgrAUbWT2VYYacrG\"}]},\"options\":{\"credentialFormat\":\"JSON_LD_CLASSIC\"}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          "https://w3id.org/security/data-integrity/v2",
                          {
                            "@context": {
                              "AlumniCredential": "https://www.example.org/AlumniCredential",
                              "alumniOf": "https://www.example.org/alumniOf",
                              "description": "https://schema.org/description",
                              "name": "https://schema.org/name"
                            }
                          }
                        ],
                        "id": "urn:uuid:58172aac-d8ba-11ed-83dd-0b3aef56cc33",
                        "type": [
                          "VerifiableCredential",
                          "AlumniCredential"
                        ],
                        "name": "Alumni Credential",
                        "description": "A minimum viable example of a VC 1.1 Alumni Credential.",
                        "issuer": "did:key:z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E",
                        "issuanceDate": "2023-01-01T00:00:00Z",
                        "credentialSubject": {
                          "id": "did:example:abcdefgh",
                          "alumniOf": "The School of Examples"
                        },
                        "proof": [
                          {
                            "type": "DataIntegrityProof",
                            "id": "urn:uuid:26329423-bec9-4b2e-88cb-a7c7d9dc4544",
                            "cryptosuite": "eddsa-rdfc-2022",
                            "created": "2023-02-26T22:06:38Z",
                            "verificationMethod": "did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7#z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7",
                            "proofPurpose": "assertionMethod",
                            "proofValue": "z5gL4Hy8N4B6zr9mQAGqpsry1iTdxEAp4zjqPNQv7iTvgdkMcHKnMALvPwU3YAKZhYn3k3Jmut2TAMxSaHaggFtf4"
                          },
                          {
                            "type": "DataIntegrityProof",
                            "cryptosuite": "eddsa-rdfc-2022",
                            "created": "2023-02-26T22:16:38Z",
                            "verificationMethod": "did:key:z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E#z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E",
                            "proofPurpose": "assertionMethod",
                            "previousProof": "urn:uuid:26329423-bec9-4b2e-88cb-a7c7d9dc4544",
                            "proofValue": "z2ENoYDUK8cMMJMvwRGyHVX23pPeHaZfCgpbDFs15FXGaeFseeqzZf5nWXF14JPoBcqdr39vVPgrAUbWT2VYYacrG"
                          }
                        ]
                      },
                      "options": {
                        "credentialFormat": "JSON_LD_CLASSIC"
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://canivc.core.dev.procivis-one.com/vc-api/credentials/verify",
                  "status": 400,
                  "data": {
                    "errors": [
                      {
                        "status": 400,
                        "title": "Failed to deserialize the JSON body into the target type",
                        "detail": null
                      }
                    ]
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Should verify VC with a string \"proof.previousProof\".: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:50:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/suites/verify.js:271:9)"
              }
            },
            {
              "type": "test",
              "title": "If an unordered list (proof), all referenced proofs in the array MUST verify.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=If%20an%20unordered%20list%2C%20all%20referenced%20proofs%20in%20the%20array%20MUST%20verify';\n        await verificationSuccess({\n          credential: credentials.clone('proofSet'),\n          verifier,\n          reason: 'Should verify VC with multiple proofs.'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "7HtVI6O_1Gd2wEyGqdagm",
              "ctx": null,
              "_testId": "urn:uuid:2c94f830-fc03-4a3a-9355-3ac77d378f88",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "If an unordered list (proof), all referenced proofs in the array MUST verify."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=If%20an%20unordered%20list%2C%20all%20referenced%20proofs%20in%20the%20array%20MUST%20verify",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 36303,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 142,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Should verify VC with multiple proofs.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",\"https://w3id.org/security/data-integrity/v2\"],\"id\":\"urn:uuid:86294362-4254-4f36-854f-3952fe42555d\",\"type\":[\"VerifiableCredential\"],\"issuer\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\",\"issuanceDate\":\"2020-03-16T22:37:26.544Z\",\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\"},\"proof\":[{\"type\":\"DataIntegrityProof\",\"created\":\"2025-01-26T05:05:40Z\",\"verificationMethod\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b#z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\",\"cryptosuite\":\"eddsa-rdfc-2022\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z2hoTxSsXuKayiPmKuptT4oEX9xtfvZgdHDSwTDeSC3nm3rUCKtx2ZY35wKBKqg5Li4aSiQ7RaczX8m3Q5xNp5jCx\"},{\"type\":\"DataIntegrityProof\",\"created\":\"2025-01-26T05:05:40Z\",\"verificationMethod\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b#z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\",\"cryptosuite\":\"eddsa-rdfc-2022\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z2hoTxSsXuKayiPmKuptT4oEX9xtfvZgdHDSwTDeSC3nm3rUCKtx2ZY35wKBKqg5Li4aSiQ7RaczX8m3Q5xNp5jCx\"}]},\"options\":{\"credentialFormat\":\"JSON_LD_CLASSIC\"}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          "https://w3id.org/security/data-integrity/v2"
                        ],
                        "id": "urn:uuid:86294362-4254-4f36-854f-3952fe42555d",
                        "type": [
                          "VerifiableCredential"
                        ],
                        "issuer": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b",
                        "issuanceDate": "2020-03-16T22:37:26.544Z",
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                        },
                        "proof": [
                          {
                            "type": "DataIntegrityProof",
                            "created": "2025-01-26T05:05:40Z",
                            "verificationMethod": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b#z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b",
                            "cryptosuite": "eddsa-rdfc-2022",
                            "proofPurpose": "assertionMethod",
                            "proofValue": "z2hoTxSsXuKayiPmKuptT4oEX9xtfvZgdHDSwTDeSC3nm3rUCKtx2ZY35wKBKqg5Li4aSiQ7RaczX8m3Q5xNp5jCx"
                          },
                          {
                            "type": "DataIntegrityProof",
                            "created": "2025-01-26T05:05:40Z",
                            "verificationMethod": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b#z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b",
                            "cryptosuite": "eddsa-rdfc-2022",
                            "proofPurpose": "assertionMethod",
                            "proofValue": "z2hoTxSsXuKayiPmKuptT4oEX9xtfvZgdHDSwTDeSC3nm3rUCKtx2ZY35wKBKqg5Li4aSiQ7RaczX8m3Q5xNp5jCx"
                          }
                        ]
                      },
                      "options": {
                        "credentialFormat": "JSON_LD_CLASSIC"
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://canivc.core.dev.procivis-one.com/vc-api/credentials/verify",
                  "status": 400,
                  "data": {
                    "errors": [
                      {
                        "status": 400,
                        "title": "Failed to deserialize the JSON body into the target type",
                        "detail": null
                      }
                    ]
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Should verify VC with multiple proofs.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:50:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/suites/verify.js:285:9)"
              }
            },
            {
              "type": "test",
              "title": "If a proof with id equal to previousProof does not exist in allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20a%20proof%20with%20id%20equal%20to%20previousProof%20does%20not%20exist%20in%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR';\n        await verificationFail({\n          credential: credentials.clone('missingPreviousProofString'),\n          verifier,\n          reason: 'Should not verify VC with invalid \"proof.previousProof\".'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "7HtVI6O_1Gd2wEyGqdagm",
              "ctx": null,
              "_testId": "urn:uuid:7c337634-e04d-41f4-a219-09da14faf0c3",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "If a proof with id equal to previousProof does not exist in allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20a%20proof%20with%20id%20equal%20to%20previousProof%20does%20not%20exist%20in%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 36446,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 143,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If any element of previousProof list has an id attribute that does not match the id attribute of any element of allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20any%20element%20of%20previousProof%20list%20has%20an%20id%20attribute%20that%20does%20not%20match%20the%20id%20attribute%20of%20any%20element%20of%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n        await verificationFail({\n          credential: credentials.clone('missingPreviousProofArray'),\n          verifier,\n          reason: 'Should not verify VC with invalid \"proof.previousProof\".'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "7HtVI6O_1Gd2wEyGqdagm",
              "ctx": null,
              "_testId": "urn:uuid:65cdc826-a2ef-48a6-b2ee-1d01ceffb808",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "If any element of previousProof list has an id attribute that does not match the id attribute of any element of allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20any%20element%20of%20previousProof%20list%20has%20an%20id%20attribute%20that%20does%20not%20match%20the%20id%20attribute%20of%20any%20element%20of%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 36589,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 143,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Each value identifies another data integrity proof, all of which MUST also verify for the current proof to be considered verified",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=Each%20value%20identifies%20another%20data%20integrity%20proof%2C%20all%20of%20which%20MUST%20also%20verify%20for%20the%20current%20proof%20to%20be%20considered%20verified';\n        await verificationFail({\n          credential: credentials.clone('previousProofFail'),\n          verifier,\n          reason: 'Should not verify VC with a \"previousProof\" that does ' +\n          'not verify.'\n        });\n\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "7HtVI6O_1Gd2wEyGqdagm",
              "ctx": null,
              "_testId": "urn:uuid:1d0c430a-0638-4220-87c2-f110a57a2c7f",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "Each value identifies another data integrity proof, all of which MUST also verify for the current proof to be considered verified"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=Each%20value%20identifies%20another%20data%20integrity%20proof%2C%20all%20of%20which%20MUST%20also%20verify%20for%20the%20current%20proof%20to%20be%20considered%20verified",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 36732,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 146,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"Procivis One Core\"",
              "body": "function() {\n      this.currentTest.cell = {\n        columnId: testDescription,\n        rowId: this.currentTest.title\n      };\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "7HtVI6O_1Gd2wEyGqdagm",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Procivis One Core\"",
              "body": "async function() {\n      proofValueTests = shouldBeProofValue({credentials, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "7HtVI6O_1Gd2wEyGqdagm",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 33753,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "IPhqgK04YvYqd94TS-1Z1",
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
          "_testId": "urn:uuid:85a97de3-1b66-4bce-b836-79aea965c478"
        },
        {
          "title": "SpruceID",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.';\n      const credential = credentials.clone('invalidBaseUrl');\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'Should not verify VC with invalid base URL'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "YDUokIHMIbQFTHZgMFsnx",
              "ctx": null,
              "_testId": "urn:uuid:858cfef7-eb7e-4d13-a821-f65496df4fb3",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 36881,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 140,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Conforming processors MUST produce errors when non-conforming documents are consumed.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.';\n      // this could be read as testing all non-confirming docs or just one\n      // for this test only one doc is tested as it should throw for any\n      // non-conforming doc\n      await verificationFail({\n        credential: credentials.clone('invalidProofType'),\n        verifier,\n        reason: 'Should not verify VC with invalid \"proof.type\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "YDUokIHMIbQFTHZgMFsnx",
              "ctx": null,
              "_testId": "urn:uuid:0b070561-eab9-4279-adb0-b6a5af3cb339",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "Conforming processors MUST produce errors when non-conforming documents are consumed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 37020,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 92,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.';\n      const credential = credentials.clone('issuedVc');\n      credential.proof = null;\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'MUST not verify VC with proof that is not a map.'\n      });\n      await verificationFail({\n        // use a string as the non map representation of a VC\n        credential: JSON.stringify(credentials.clone('issuedVc')),\n        verifier,\n        reason: 'MUST not verify VC that is not a map.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "YDUokIHMIbQFTHZgMFsnx",
              "ctx": null,
              "_testId": "urn:uuid:93f6a1cd-d3b1-442a-b778-005d5c1d7262",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 37113,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 196,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof;\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'MUST not verify VC w/o a proof'\n      });\n      const noType = credentials.clone('issuedVc');\n      delete noType.proof.type;\n      await verificationFail({\n        credential: noType,\n        verifier,\n        reason: 'MUST not verify VC w/o a \"proof.type\".'\n      });\n      const noVm = credentials.clone('noVm');\n      await verificationFail({\n        credential: noVm,\n        verifier,\n        reason: 'MUST not verify VC w/o \"proof.verificationMethod\".\"'\n      });\n      const noProofPurpose = credentials.clone('noProofPurpose');\n      await verificationFail({\n        credential: noProofPurpose,\n        verifier,\n        reason: 'MUST not verify VC w/o \"proof.proofPurpose\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "YDUokIHMIbQFTHZgMFsnx",
              "ctx": null,
              "_testId": "urn:uuid:89ecb2ef-fffa-40a8-b3a2-52fcc5c1ab7d",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 37310,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 424,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The type property MUST contain the string DataIntegrityProof.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.';\n          const credential = credentials.clone('invalidProofType');\n          await verificationFail({\n            credential,\n            verifier,\n            reason: 'Should not verify VC with invalid \"proof.type\"'\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "YDUokIHMIbQFTHZgMFsnx",
              "ctx": null,
              "_testId": "urn:uuid:e1003b23-c313-49ee-8b89-3d8ee95b78dd",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The type property MUST contain the string DataIntegrityProof."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 37734,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 107,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      // NOTE: expectedProofPurpose should be specified by verifiers internally\n      // it is very unlikely to be invalidProofPurpose\n      await verificationFail({\n        credential: credentials.clone('invalidProofPurpose'),\n        verifier,\n        reason: 'Verifier should reject VC with invalid proof purpose.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "YDUokIHMIbQFTHZgMFsnx",
              "ctx": null,
              "_testId": "urn:uuid:ca561527-7893-45e0-8045-c0d879cdc36c",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 37841,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 96,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.';\n        await proofValueTests;\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "YDUokIHMIbQFTHZgMFsnx",
              "ctx": null,
              "_testId": "urn:uuid:e1a0a3bc-14a9-47c3-b3b0-2dd0d0bea268",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The proofValue property MUST be used, as specified in 2.1 Proofs."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 37938,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof';\n      await proofValueTests;\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "YDUokIHMIbQFTHZgMFsnx",
              "ctx": null,
              "_testId": "urn:uuid:5d7bfb68-e262-417d-b802-987d1053b9ac",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 37938,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      await verificationFail({\n        credential: credentials.clone('undefinedTerm'),\n        verifier,\n        reason: 'Should fail to verify VC when data is dropped by JSON-LD'\n      });\n      const undefinedTerm = credentials.clone('issuedVc');\n      undefinedTerm.credentialSubject.undefinedTerm = 'IfDroppedWillVerify';\n      await verificationFail({\n        credential: undefinedTerm,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined term is added ' +\n          'after issuance.'\n      });\n      const undefinedType = credentials.clone('issuedVc');\n      undefinedType.type.push('UndefinedType');\n      await verificationFail({\n        credential: undefinedType,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined type is added ' +\n          'after issuance.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "YDUokIHMIbQFTHZgMFsnx",
              "ctx": null,
              "_testId": "urn:uuid:157cba99-0ff8-414f-aa0d-7fd17f6e075f",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 37938,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 315,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n      const credential = credentials.clone('invalidCryptosuite');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "YDUokIHMIbQFTHZgMFsnx",
              "ctx": null,
              "_testId": "urn:uuid:945e5692-9402-418f-b33c-729089f05424",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 38253,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 100,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "An OPTIONAL string value (proof.previousProof) or unordered list of string values. Each value identifies another data integrity proof that MUST verify before the current proof is processed.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=An%20OPTIONAL%20string%20value%20or%20unordered%20list%20of%20string%20values.%20Each%20value%20identifies%20another%20data%20integrity%20proof%20that%20MUST%20verify%20before%20the%20current%20proof%20is%20processed';\n        await verificationSuccess({\n          credential: credentials.clone('previousProofString'),\n          verifier,\n          reason: 'Should verify VC with a string \"proof.previousProof\".'\n        });\n        await verificationSuccess({\n          credential: credentials.clone('previousProofArray'),\n          verifier,\n          reason: 'Should verify VC with an Array \"proof.previousProof\".'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "YDUokIHMIbQFTHZgMFsnx",
              "ctx": null,
              "_testId": "urn:uuid:151414ac-45d2-48f6-8fb2-ba2f20e4e720",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "An OPTIONAL string value (proof.previousProof) or unordered list of string values. Each value identifies another data integrity proof that MUST verify before the current proof is processed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=An%20OPTIONAL%20string%20value%20or%20unordered%20list%20of%20string%20values.%20Each%20value%20identifies%20another%20data%20integrity%20proof%20that%20MUST%20verify%20before%20the%20current%20proof%20is%20processed",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 38353,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 116,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Should verify VC with a string \"proof.previousProof\".: expected HTTPError: Request failed with status cod… { …(5) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",\"https://w3id.org/security/data-integrity/v2\",{\"@context\":{\"AlumniCredential\":\"https://www.example.org/AlumniCredential\",\"alumniOf\":\"https://www.example.org/alumniOf\",\"description\":\"https://schema.org/description\",\"name\":\"https://schema.org/name\"}}],\"id\":\"urn:uuid:58172aac-d8ba-11ed-83dd-0b3aef56cc33\",\"type\":[\"VerifiableCredential\",\"AlumniCredential\"],\"name\":\"Alumni Credential\",\"description\":\"A minimum viable example of a VC 1.1 Alumni Credential.\",\"issuer\":\"did:key:z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E\",\"issuanceDate\":\"2023-01-01T00:00:00Z\",\"credentialSubject\":{\"id\":\"did:example:abcdefgh\",\"alumniOf\":\"The School of Examples\"},\"proof\":[{\"type\":\"DataIntegrityProof\",\"id\":\"urn:uuid:26329423-bec9-4b2e-88cb-a7c7d9dc4544\",\"cryptosuite\":\"eddsa-rdfc-2022\",\"created\":\"2023-02-26T22:06:38Z\",\"verificationMethod\":\"did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7#z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z5gL4Hy8N4B6zr9mQAGqpsry1iTdxEAp4zjqPNQv7iTvgdkMcHKnMALvPwU3YAKZhYn3k3Jmut2TAMxSaHaggFtf4\"},{\"type\":\"DataIntegrityProof\",\"cryptosuite\":\"eddsa-rdfc-2022\",\"created\":\"2023-02-26T22:16:38Z\",\"verificationMethod\":\"did:key:z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E#z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E\",\"proofPurpose\":\"assertionMethod\",\"previousProof\":\"urn:uuid:26329423-bec9-4b2e-88cb-a7c7d9dc4544\",\"proofValue\":\"z2ENoYDUK8cMMJMvwRGyHVX23pPeHaZfCgpbDFs15FXGaeFseeqzZf5nWXF14JPoBcqdr39vVPgrAUbWT2VYYacrG\"}]},\"options\":{}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          "https://w3id.org/security/data-integrity/v2",
                          {
                            "@context": {
                              "AlumniCredential": "https://www.example.org/AlumniCredential",
                              "alumniOf": "https://www.example.org/alumniOf",
                              "description": "https://schema.org/description",
                              "name": "https://schema.org/name"
                            }
                          }
                        ],
                        "id": "urn:uuid:58172aac-d8ba-11ed-83dd-0b3aef56cc33",
                        "type": [
                          "VerifiableCredential",
                          "AlumniCredential"
                        ],
                        "name": "Alumni Credential",
                        "description": "A minimum viable example of a VC 1.1 Alumni Credential.",
                        "issuer": "did:key:z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E",
                        "issuanceDate": "2023-01-01T00:00:00Z",
                        "credentialSubject": {
                          "id": "did:example:abcdefgh",
                          "alumniOf": "The School of Examples"
                        },
                        "proof": [
                          {
                            "type": "DataIntegrityProof",
                            "id": "urn:uuid:26329423-bec9-4b2e-88cb-a7c7d9dc4544",
                            "cryptosuite": "eddsa-rdfc-2022",
                            "created": "2023-02-26T22:06:38Z",
                            "verificationMethod": "did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7#z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7",
                            "proofPurpose": "assertionMethod",
                            "proofValue": "z5gL4Hy8N4B6zr9mQAGqpsry1iTdxEAp4zjqPNQv7iTvgdkMcHKnMALvPwU3YAKZhYn3k3Jmut2TAMxSaHaggFtf4"
                          },
                          {
                            "type": "DataIntegrityProof",
                            "cryptosuite": "eddsa-rdfc-2022",
                            "created": "2023-02-26T22:16:38Z",
                            "verificationMethod": "did:key:z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E#z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E",
                            "proofPurpose": "assertionMethod",
                            "previousProof": "urn:uuid:26329423-bec9-4b2e-88cb-a7c7d9dc4544",
                            "proofValue": "z2ENoYDUK8cMMJMvwRGyHVX23pPeHaZfCgpbDFs15FXGaeFseeqzZf5nWXF14JPoBcqdr39vVPgrAUbWT2VYYacrG"
                          }
                        ]
                      },
                      "options": {}
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc.spruceid.xyz/credentials/verify",
                  "status": 400
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Should verify VC with a string \"proof.previousProof\".: expected HTTPError: Request failed with status cod… { …(5) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:50:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/suites/verify.js:271:9)"
              }
            },
            {
              "type": "test",
              "title": "If an unordered list (proof), all referenced proofs in the array MUST verify.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=If%20an%20unordered%20list%2C%20all%20referenced%20proofs%20in%20the%20array%20MUST%20verify';\n        await verificationSuccess({\n          credential: credentials.clone('proofSet'),\n          verifier,\n          reason: 'Should verify VC with multiple proofs.'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "YDUokIHMIbQFTHZgMFsnx",
              "ctx": null,
              "_testId": "urn:uuid:c617efaf-ad16-4344-9cc8-1ba5ed0c931d",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If an unordered list (proof), all referenced proofs in the array MUST verify."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=If%20an%20unordered%20list%2C%20all%20referenced%20proofs%20in%20the%20array%20MUST%20verify",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 38470,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 114,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If a proof with id equal to previousProof does not exist in allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20a%20proof%20with%20id%20equal%20to%20previousProof%20does%20not%20exist%20in%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR';\n        await verificationFail({\n          credential: credentials.clone('missingPreviousProofString'),\n          verifier,\n          reason: 'Should not verify VC with invalid \"proof.previousProof\".'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "YDUokIHMIbQFTHZgMFsnx",
              "ctx": null,
              "_testId": "urn:uuid:2db66734-c150-4466-b584-ef957a191e9b",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If a proof with id equal to previousProof does not exist in allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20a%20proof%20with%20id%20equal%20to%20previousProof%20does%20not%20exist%20in%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 38585,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 104,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If any element of previousProof list has an id attribute that does not match the id attribute of any element of allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20any%20element%20of%20previousProof%20list%20has%20an%20id%20attribute%20that%20does%20not%20match%20the%20id%20attribute%20of%20any%20element%20of%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n        await verificationFail({\n          credential: credentials.clone('missingPreviousProofArray'),\n          verifier,\n          reason: 'Should not verify VC with invalid \"proof.previousProof\".'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "YDUokIHMIbQFTHZgMFsnx",
              "ctx": null,
              "_testId": "urn:uuid:18f42c9a-0a05-446e-a79b-cc6186a16bb7",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If any element of previousProof list has an id attribute that does not match the id attribute of any element of allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20any%20element%20of%20previousProof%20list%20has%20an%20id%20attribute%20that%20does%20not%20match%20the%20id%20attribute%20of%20any%20element%20of%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 38689,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 109,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Each value identifies another data integrity proof, all of which MUST also verify for the current proof to be considered verified",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=Each%20value%20identifies%20another%20data%20integrity%20proof%2C%20all%20of%20which%20MUST%20also%20verify%20for%20the%20current%20proof%20to%20be%20considered%20verified';\n        await verificationFail({\n          credential: credentials.clone('previousProofFail'),\n          verifier,\n          reason: 'Should not verify VC with a \"previousProof\" that does ' +\n          'not verify.'\n        });\n\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "YDUokIHMIbQFTHZgMFsnx",
              "ctx": null,
              "_testId": "urn:uuid:74d2b699-3361-4da2-9adb-1b087440f86a",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "Each value identifies another data integrity proof, all of which MUST also verify for the current proof to be considered verified"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=Each%20value%20identifies%20another%20data%20integrity%20proof%2C%20all%20of%20which%20MUST%20also%20verify%20for%20the%20current%20proof%20to%20be%20considered%20verified",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 38798,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 102,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"SpruceID\"",
              "body": "function() {\n      this.currentTest.cell = {\n        columnId: testDescription,\n        rowId: this.currentTest.title\n      };\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "YDUokIHMIbQFTHZgMFsnx",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"SpruceID\"",
              "body": "async function() {\n      proofValueTests = shouldBeProofValue({credentials, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "YDUokIHMIbQFTHZgMFsnx",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 36878,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "IPhqgK04YvYqd94TS-1Z1",
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
          "_testId": "urn:uuid:9929089b-674d-4ad2-959c-ff49d0de083b"
        },
        {
          "title": "Trential",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.';\n      const credential = credentials.clone('invalidBaseUrl');\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'Should not verify VC with invalid base URL'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "V_bOytb15rSWxo4duA0Vu",
              "ctx": null,
              "_testId": "urn:uuid:7786b74e-8d29-4d05-93d1-fa6d7d61970c",
              "cell": {
                "columnId": "Trential",
                "rowId": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 38902,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 2555,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Conforming processors MUST produce errors when non-conforming documents are consumed.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.';\n      // this could be read as testing all non-confirming docs or just one\n      // for this test only one doc is tested as it should throw for any\n      // non-conforming doc\n      await verificationFail({\n        credential: credentials.clone('invalidProofType'),\n        verifier,\n        reason: 'Should not verify VC with invalid \"proof.type\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "V_bOytb15rSWxo4duA0Vu",
              "ctx": null,
              "_testId": "urn:uuid:7fa23333-ca9e-44c3-ad79-7c516da050cf",
              "cell": {
                "columnId": "Trential",
                "rowId": "Conforming processors MUST produce errors when non-conforming documents are consumed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 41458,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 247,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.';\n      const credential = credentials.clone('issuedVc');\n      credential.proof = null;\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'MUST not verify VC with proof that is not a map.'\n      });\n      await verificationFail({\n        // use a string as the non map representation of a VC\n        credential: JSON.stringify(credentials.clone('issuedVc')),\n        verifier,\n        reason: 'MUST not verify VC that is not a map.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "V_bOytb15rSWxo4duA0Vu",
              "ctx": null,
              "_testId": "urn:uuid:470d2f05-e983-49be-afd6-0540fbe01f48",
              "cell": {
                "columnId": "Trential",
                "rowId": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 41705,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1200,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof;\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'MUST not verify VC w/o a proof'\n      });\n      const noType = credentials.clone('issuedVc');\n      delete noType.proof.type;\n      await verificationFail({\n        credential: noType,\n        verifier,\n        reason: 'MUST not verify VC w/o a \"proof.type\".'\n      });\n      const noVm = credentials.clone('noVm');\n      await verificationFail({\n        credential: noVm,\n        verifier,\n        reason: 'MUST not verify VC w/o \"proof.verificationMethod\".\"'\n      });\n      const noProofPurpose = credentials.clone('noProofPurpose');\n      await verificationFail({\n        credential: noProofPurpose,\n        verifier,\n        reason: 'MUST not verify VC w/o \"proof.proofPurpose\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "V_bOytb15rSWxo4duA0Vu",
              "ctx": null,
              "_testId": "urn:uuid:6d2b7a84-18ad-4b4c-8eb5-3601e58e5490",
              "cell": {
                "columnId": "Trential",
                "rowId": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 42906,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 2545,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The type property MUST contain the string DataIntegrityProof.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.';\n          const credential = credentials.clone('invalidProofType');\n          await verificationFail({\n            credential,\n            verifier,\n            reason: 'Should not verify VC with invalid \"proof.type\"'\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "V_bOytb15rSWxo4duA0Vu",
              "ctx": null,
              "_testId": "urn:uuid:d2660f48-ba23-46a4-be34-07541e740683",
              "cell": {
                "columnId": "Trential",
                "rowId": "The type property MUST contain the string DataIntegrityProof."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 45450,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 257,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      // NOTE: expectedProofPurpose should be specified by verifiers internally\n      // it is very unlikely to be invalidProofPurpose\n      await verificationFail({\n        credential: credentials.clone('invalidProofPurpose'),\n        verifier,\n        reason: 'Verifier should reject VC with invalid proof purpose.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "V_bOytb15rSWxo4duA0Vu",
              "ctx": null,
              "_testId": "urn:uuid:b4c82b48-e235-425b-aba8-65066b5413eb",
              "cell": {
                "columnId": "Trential",
                "rowId": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 45707,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 247,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.';\n        await proofValueTests;\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "V_bOytb15rSWxo4duA0Vu",
              "ctx": null,
              "_testId": "urn:uuid:4a592f67-3386-421c-90dc-fb94186ec974",
              "cell": {
                "columnId": "Trential",
                "rowId": "The proofValue property MUST be used, as specified in 2.1 Proofs."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 45955,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof';\n      await proofValueTests;\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "V_bOytb15rSWxo4duA0Vu",
              "ctx": null,
              "_testId": "urn:uuid:6103bd84-fd29-4c0b-a788-6f41ee4a286a",
              "cell": {
                "columnId": "Trential",
                "rowId": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 45955,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      await verificationFail({\n        credential: credentials.clone('undefinedTerm'),\n        verifier,\n        reason: 'Should fail to verify VC when data is dropped by JSON-LD'\n      });\n      const undefinedTerm = credentials.clone('issuedVc');\n      undefinedTerm.credentialSubject.undefinedTerm = 'IfDroppedWillVerify';\n      await verificationFail({\n        credential: undefinedTerm,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined term is added ' +\n          'after issuance.'\n      });\n      const undefinedType = credentials.clone('issuedVc');\n      undefinedType.type.push('UndefinedType');\n      await verificationFail({\n        credential: undefinedType,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined type is added ' +\n          'after issuance.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "V_bOytb15rSWxo4duA0Vu",
              "ctx": null,
              "_testId": "urn:uuid:67d6a7cf-cb1d-49bc-b038-c15cb28b4ac8",
              "cell": {
                "columnId": "Trential",
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 45955,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 5099,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n      const credential = credentials.clone('invalidCryptosuite');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "V_bOytb15rSWxo4duA0Vu",
              "ctx": null,
              "_testId": "urn:uuid:b43bc81c-6364-4a41-9b5e-acb95477c5bc",
              "cell": {
                "columnId": "Trential",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 51054,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 247,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "An OPTIONAL string value (proof.previousProof) or unordered list of string values. Each value identifies another data integrity proof that MUST verify before the current proof is processed.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=An%20OPTIONAL%20string%20value%20or%20unordered%20list%20of%20string%20values.%20Each%20value%20identifies%20another%20data%20integrity%20proof%20that%20MUST%20verify%20before%20the%20current%20proof%20is%20processed';\n        await verificationSuccess({\n          credential: credentials.clone('previousProofString'),\n          verifier,\n          reason: 'Should verify VC with a string \"proof.previousProof\".'\n        });\n        await verificationSuccess({\n          credential: credentials.clone('previousProofArray'),\n          verifier,\n          reason: 'Should verify VC with an Array \"proof.previousProof\".'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "V_bOytb15rSWxo4duA0Vu",
              "ctx": null,
              "_testId": "urn:uuid:f05067c1-769d-413e-84f2-bd62a091871e",
              "cell": {
                "columnId": "Trential",
                "rowId": "An OPTIONAL string value (proof.previousProof) or unordered list of string values. Each value identifies another data integrity proof that MUST verify before the current proof is processed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=An%20OPTIONAL%20string%20value%20or%20unordered%20list%20of%20string%20values.%20Each%20value%20identifies%20another%20data%20integrity%20proof%20that%20MUST%20verify%20before%20the%20current%20proof%20is%20processed",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 51302,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 2928,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If an unordered list (proof), all referenced proofs in the array MUST verify.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=If%20an%20unordered%20list%2C%20all%20referenced%20proofs%20in%20the%20array%20MUST%20verify';\n        await verificationSuccess({\n          credential: credentials.clone('proofSet'),\n          verifier,\n          reason: 'Should verify VC with multiple proofs.'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "V_bOytb15rSWxo4duA0Vu",
              "ctx": null,
              "_testId": "urn:uuid:d2c507c7-9496-49a0-9349-50d5b49b86f5",
              "cell": {
                "columnId": "Trential",
                "rowId": "If an unordered list (proof), all referenced proofs in the array MUST verify."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=If%20an%20unordered%20list%2C%20all%20referenced%20proofs%20in%20the%20array%20MUST%20verify",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 54231,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 2401,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If a proof with id equal to previousProof does not exist in allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20a%20proof%20with%20id%20equal%20to%20previousProof%20does%20not%20exist%20in%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR';\n        await verificationFail({\n          credential: credentials.clone('missingPreviousProofString'),\n          verifier,\n          reason: 'Should not verify VC with invalid \"proof.previousProof\".'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "V_bOytb15rSWxo4duA0Vu",
              "ctx": null,
              "_testId": "urn:uuid:6f2d540d-e438-4afc-8af6-fa9ab0518bac",
              "cell": {
                "columnId": "Trential",
                "rowId": "If a proof with id equal to previousProof does not exist in allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20a%20proof%20with%20id%20equal%20to%20previousProof%20does%20not%20exist%20in%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 56633,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1700,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If any element of previousProof list has an id attribute that does not match the id attribute of any element of allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20any%20element%20of%20previousProof%20list%20has%20an%20id%20attribute%20that%20does%20not%20match%20the%20id%20attribute%20of%20any%20element%20of%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n        await verificationFail({\n          credential: credentials.clone('missingPreviousProofArray'),\n          verifier,\n          reason: 'Should not verify VC with invalid \"proof.previousProof\".'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "V_bOytb15rSWxo4duA0Vu",
              "ctx": null,
              "_testId": "urn:uuid:b8eb76ac-76d0-421b-8bb6-328054b170d2",
              "cell": {
                "columnId": "Trential",
                "rowId": "If any element of previousProof list has an id attribute that does not match the id attribute of any element of allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20any%20element%20of%20previousProof%20list%20has%20an%20id%20attribute%20that%20does%20not%20match%20the%20id%20attribute%20of%20any%20element%20of%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 58333,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1299,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Each value identifies another data integrity proof, all of which MUST also verify for the current proof to be considered verified",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=Each%20value%20identifies%20another%20data%20integrity%20proof%2C%20all%20of%20which%20MUST%20also%20verify%20for%20the%20current%20proof%20to%20be%20considered%20verified';\n        await verificationFail({\n          credential: credentials.clone('previousProofFail'),\n          verifier,\n          reason: 'Should not verify VC with a \"previousProof\" that does ' +\n          'not verify.'\n        });\n\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "V_bOytb15rSWxo4duA0Vu",
              "ctx": null,
              "_testId": "urn:uuid:19ec4830-9856-4958-b2c3-104aff72aa0e",
              "cell": {
                "columnId": "Trential",
                "rowId": "Each value identifies another data integrity proof, all of which MUST also verify for the current proof to be considered verified"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=Each%20value%20identifies%20another%20data%20integrity%20proof%2C%20all%20of%20which%20MUST%20also%20verify%20for%20the%20current%20proof%20to%20be%20considered%20verified",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 59632,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1716,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"Trential\"",
              "body": "function() {\n      this.currentTest.cell = {\n        columnId: testDescription,\n        rowId: this.currentTest.title\n      };\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "V_bOytb15rSWxo4duA0Vu",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Trential\"",
              "body": "async function() {\n      proofValueTests = shouldBeProofValue({credentials, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "V_bOytb15rSWxo4duA0Vu",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 38900,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "IPhqgK04YvYqd94TS-1Z1",
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
          "_testId": "urn:uuid:1bc5fdc4-6d82-470b-a707-4bf6ea4970ee"
        },
        {
          "title": "Trinsic",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.';\n      const credential = credentials.clone('invalidBaseUrl');\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'Should not verify VC with invalid base URL'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "0ctWYnuH-3ybgeFapgf9R",
              "ctx": null,
              "_testId": "urn:uuid:064a1b88-8a6b-4cab-8042-d6924b4f1e08",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 61350,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 300,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Should not verify VC with invalid base URL: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 26 Jan 2025 05:06:28 GMT', 'content-type': 'text/html; charset=utf-8', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'cache-control': 'no-cache,no-store', expires: '-1', pragma: 'no-cache', 'x-envoy-upstream-service-time': '8', 'cf-cache-status': 'DYNAMIC', 'report-to': '{\"endpoints\":[{\"url\":\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=LV9Ck8D6YZJ645fMc7RVXjUK5VzkZMBec9xdNel51Q2ql4QJ16w4NG4GtuZWMZ5SFEt%2FoQzDeSJLxCi9WNsIF9VR%2Bfik%2BkvzF%2BSKpyNjVaVSGXO3arQv9X8Rkx4H6v76dXsNKzcWwNFqE17pkozO\"}],\"group\":\"cf-nel\",\"max_age\":604800}', nel: '{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}', server: 'cloudflare', 'cf-ray': '907df94cb9c42f3f-LAX', 'content-encoding': 'br', 'server-timing': 'cfL4;desc=\"?proto=TCP&rtt=8615&min_rtt=8605&rtt_var=3234&sent=4&recv=5&lost=0&retrans=0&sent_bytes=2442&recv_bytes=1617&delivery_rate=331900&cwnd=243&unsent_bytes=0&cid=c12b6a59b02d7009&ts=279&x=0\"', Authorization: 'sanitized to prevent exposure of secrets' }, body: null, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Should not verify VC with invalid base URL: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 26 Jan 2025 05:06:28 GMT', 'content-type': 'text/html; charset=utf-8', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'cache-control': 'no-cache,no-store', expires: '-1', pragma: 'no-cache', 'x-envoy-upstream-service-time': '8', 'cf-cache-status': 'DYNAMIC', 'report-to': '{\"endpoints\":[{\"url\":\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=LV9Ck8D6YZJ645fMc7RVXjUK5VzkZMBec9xdNel51Q2ql4QJ16w4NG4GtuZWMZ5SFEt%2FoQzDeSJLxCi9WNsIF9VR%2Bfik%2BkvzF%2BSKpyNjVaVSGXO3arQv9X8Rkx4H6v76dXsNKzcWwNFqE17pkozO\"}],\"group\":\"cf-nel\",\"max_age\":604800}', nel: '{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}', server: 'cloudflare', 'cf-ray': '907df94cb9c42f3f-LAX', 'content-encoding': 'br', 'server-timing': 'cfL4;desc=\"?proto=TCP&rtt=8615&min_rtt=8605&rtt_var=3234&sent=4&recv=5&lost=0&retrans=0&sent_bytes=2442&recv_bytes=1617&delivery_rate=331900&cwnd=243&unsent_bytes=0&cid=c12b6a59b02d7009&ts=279&x=0\"', Authorization: 'sanitized to prevent exposure of secrets' }, body: null, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationFail (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:83:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/suites/verify.js:39:7)"
              }
            },
            {
              "type": "test",
              "title": "Conforming processors MUST produce errors when non-conforming documents are consumed.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.';\n      // this could be read as testing all non-confirming docs or just one\n      // for this test only one doc is tested as it should throw for any\n      // non-conforming doc\n      await verificationFail({\n        credential: credentials.clone('invalidProofType'),\n        verifier,\n        reason: 'Should not verify VC with invalid \"proof.type\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "0ctWYnuH-3ybgeFapgf9R",
              "ctx": null,
              "_testId": "urn:uuid:c1e6e416-cedf-4c08-af68-a21cd08cd3ef",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "Conforming processors MUST produce errors when non-conforming documents are consumed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 61651,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 97,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Should not verify VC with invalid \"proof.type\": expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 26 Jan 2025 05:06:28 GMT', 'content-type': 'text/html; charset=utf-8', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'cache-control': 'no-cache,no-store', expires: '-1', pragma: 'no-cache', 'x-envoy-upstream-service-time': '7', 'cf-cache-status': 'DYNAMIC', 'report-to': '{\"endpoints\":[{\"url\":\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=Hji7sR7CcLPZU%2B6tdFfjAuXmju4UN5T%2Fxg1odavUCsBGG0uYoXpYN2bhOIlOWjO5pTALNqj9npUy%2FUv3%2BsfLrQQN9zSFWed3Dfl1I4%2B3hagK0EYRblEA1pqUoBhY5uQYTx8za3RuisHJeaY3mIDG\"}],\"group\":\"cf-nel\",\"max_age\":604800}', nel: '{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}', server: 'cloudflare', 'cf-ray': '907df94e6e327c50-LAX', 'content-encoding': 'br', 'server-timing': 'cfL4;desc=\"?proto=TCP&rtt=8293&min_rtt=8246&rtt_var=1764&sent=9&recv=8&lost=0&retrans=0&sent_bytes=5646&recv_bytes=2601&delivery_rate=685714&cwnd=250&unsent_bytes=0&cid=2e6e38ba2067fca2&ts=379&x=0\"', Authorization: 'sanitized to prevent exposure of secrets' }, body: null, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Should not verify VC with invalid \"proof.type\": expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 26 Jan 2025 05:06:28 GMT', 'content-type': 'text/html; charset=utf-8', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'cache-control': 'no-cache,no-store', expires: '-1', pragma: 'no-cache', 'x-envoy-upstream-service-time': '7', 'cf-cache-status': 'DYNAMIC', 'report-to': '{\"endpoints\":[{\"url\":\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=Hji7sR7CcLPZU%2B6tdFfjAuXmju4UN5T%2Fxg1odavUCsBGG0uYoXpYN2bhOIlOWjO5pTALNqj9npUy%2FUv3%2BsfLrQQN9zSFWed3Dfl1I4%2B3hagK0EYRblEA1pqUoBhY5uQYTx8za3RuisHJeaY3mIDG\"}],\"group\":\"cf-nel\",\"max_age\":604800}', nel: '{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}', server: 'cloudflare', 'cf-ray': '907df94e6e327c50-LAX', 'content-encoding': 'br', 'server-timing': 'cfL4;desc=\"?proto=TCP&rtt=8293&min_rtt=8246&rtt_var=1764&sent=9&recv=8&lost=0&retrans=0&sent_bytes=5646&recv_bytes=2601&delivery_rate=685714&cwnd=250&unsent_bytes=0&cid=2e6e38ba2067fca2&ts=379&x=0\"', Authorization: 'sanitized to prevent exposure of secrets' }, body: null, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationFail (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:83:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/suites/verify.js:51:7)"
              }
            },
            {
              "type": "test",
              "title": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.';\n      const credential = credentials.clone('issuedVc');\n      credential.proof = null;\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'MUST not verify VC with proof that is not a map.'\n      });\n      await verificationFail({\n        // use a string as the non map representation of a VC\n        credential: JSON.stringify(credentials.clone('issuedVc')),\n        verifier,\n        reason: 'MUST not verify VC that is not a map.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "0ctWYnuH-3ybgeFapgf9R",
              "ctx": null,
              "_testId": "urn:uuid:9209aef6-1e93-4148-9ade-08eb370b82b1",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 61749,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 98,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "MUST not verify VC with proof that is not a map.: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 26 Jan 2025 05:06:28 GMT', 'content-type': 'text/html; charset=utf-8', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'cache-control': 'no-cache,no-store', expires: '-1', pragma: 'no-cache', 'x-envoy-upstream-service-time': '8', 'cf-cache-status': 'DYNAMIC', 'report-to': '{\"endpoints\":[{\"url\":\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=yijpPLkQioFROpFd38OwOKYHeXQdbj713KAacBVhu40UPSzdRjr1ud7ht9EKVtALmKuQWRlfFcxCHawogXZQn%2F%2FLe%2BeAxs9qMVL5XRUQZFvUD75clpqsTzdhEhZ%2F%2F3TgUOuLq%2FN2FCKhlLsHjFZh\"}],\"group\":\"cf-nel\",\"max_age\":604800}', nel: '{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}', server: 'cloudflare', 'cf-ray': '907df94f0ef57c50-LAX', 'content-encoding': 'br', 'server-timing': 'cfL4;desc=\"?proto=TCP&rtt=8282&min_rtt=8155&rtt_var=1345&sent=12&recv=10&lost=0&retrans=0&sent_bytes=8375&recv_bytes=3357&delivery_rate=685714&cwnd=252&unsent_bytes=0&cid=2e6e38ba2067fca2&ts=478&x=0\"', Authorization: 'sanitized to prevent exposure of secrets' }, body: null, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: MUST not verify VC with proof that is not a map.: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 26 Jan 2025 05:06:28 GMT', 'content-type': 'text/html; charset=utf-8', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'cache-control': 'no-cache,no-store', expires: '-1', pragma: 'no-cache', 'x-envoy-upstream-service-time': '8', 'cf-cache-status': 'DYNAMIC', 'report-to': '{\"endpoints\":[{\"url\":\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=yijpPLkQioFROpFd38OwOKYHeXQdbj713KAacBVhu40UPSzdRjr1ud7ht9EKVtALmKuQWRlfFcxCHawogXZQn%2F%2FLe%2BeAxs9qMVL5XRUQZFvUD75clpqsTzdhEhZ%2F%2F3TgUOuLq%2FN2FCKhlLsHjFZh\"}],\"group\":\"cf-nel\",\"max_age\":604800}', nel: '{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}', server: 'cloudflare', 'cf-ray': '907df94f0ef57c50-LAX', 'content-encoding': 'br', 'server-timing': 'cfL4;desc=\"?proto=TCP&rtt=8282&min_rtt=8155&rtt_var=1345&sent=12&recv=10&lost=0&retrans=0&sent_bytes=8375&recv_bytes=3357&delivery_rate=685714&cwnd=252&unsent_bytes=0&cid=2e6e38ba2067fca2&ts=478&x=0\"', Authorization: 'sanitized to prevent exposure of secrets' }, body: null, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationFail (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:83:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/suites/verify.js:63:7)"
              }
            },
            {
              "type": "test",
              "title": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof;\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'MUST not verify VC w/o a proof'\n      });\n      const noType = credentials.clone('issuedVc');\n      delete noType.proof.type;\n      await verificationFail({\n        credential: noType,\n        verifier,\n        reason: 'MUST not verify VC w/o a \"proof.type\".'\n      });\n      const noVm = credentials.clone('noVm');\n      await verificationFail({\n        credential: noVm,\n        verifier,\n        reason: 'MUST not verify VC w/o \"proof.verificationMethod\".\"'\n      });\n      const noProofPurpose = credentials.clone('noProofPurpose');\n      await verificationFail({\n        credential: noProofPurpose,\n        verifier,\n        reason: 'MUST not verify VC w/o \"proof.proofPurpose\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "0ctWYnuH-3ybgeFapgf9R",
              "ctx": null,
              "_testId": "urn:uuid:2c7aa9f9-a440-4ad2-9f5c-ce7e3cb62dcd",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 61848,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 103,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "MUST not verify VC w/o a proof: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 26 Jan 2025 05:06:28 GMT', 'content-type': 'text/html; charset=utf-8', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'cache-control': 'no-cache,no-store', expires: '-1', pragma: 'no-cache', 'x-envoy-upstream-service-time': '8', 'cf-cache-status': 'DYNAMIC', 'report-to': '{\"endpoints\":[{\"url\":\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=ef%2BlYhNMRAxDWKQlzBbQElsGeitFsFJEtT37KibR62uS0MqbBn3U4OF3il%2FxjwQBOe9LvgqPyItTEYEtPnBaof%2FnP5jIfWkkkWRsNG%2FhGZ1YHCcd5BsUhYE9FcJdQwj9pwCfWXLd3%2Brlf6%2BBxFWu\"}],\"group\":\"cf-nel\",\"max_age\":604800}', nel: '{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}', server: 'cloudflare', 'cf-ray': '907df94fafbf7c50-LAX', 'content-encoding': 'br', 'server-timing': 'cfL4;desc=\"?proto=TCP&rtt=8268&min_rtt=8127&rtt_var=1037&sent=15&recv=12&lost=0&retrans=0&sent_bytes=11108&recv_bytes=4100&delivery_rate=685714&cwnd=252&unsent_bytes=0&cid=2e6e38ba2067fca2&ts=581&x=0\"', Authorization: 'sanitized to prevent exposure of secrets' }, body: null, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: MUST not verify VC w/o a proof: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 26 Jan 2025 05:06:28 GMT', 'content-type': 'text/html; charset=utf-8', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'cache-control': 'no-cache,no-store', expires: '-1', pragma: 'no-cache', 'x-envoy-upstream-service-time': '8', 'cf-cache-status': 'DYNAMIC', 'report-to': '{\"endpoints\":[{\"url\":\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=ef%2BlYhNMRAxDWKQlzBbQElsGeitFsFJEtT37KibR62uS0MqbBn3U4OF3il%2FxjwQBOe9LvgqPyItTEYEtPnBaof%2FnP5jIfWkkkWRsNG%2FhGZ1YHCcd5BsUhYE9FcJdQwj9pwCfWXLd3%2Brlf6%2BBxFWu\"}],\"group\":\"cf-nel\",\"max_age\":604800}', nel: '{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}', server: 'cloudflare', 'cf-ray': '907df94fafbf7c50-LAX', 'content-encoding': 'br', 'server-timing': 'cfL4;desc=\"?proto=TCP&rtt=8268&min_rtt=8127&rtt_var=1037&sent=15&recv=12&lost=0&retrans=0&sent_bytes=11108&recv_bytes=4100&delivery_rate=685714&cwnd=252&unsent_bytes=0&cid=2e6e38ba2067fca2&ts=581&x=0\"', Authorization: 'sanitized to prevent exposure of secrets' }, body: null, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationFail (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:83:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/suites/verify.js:82:7)"
              }
            },
            {
              "type": "test",
              "title": "The type property MUST contain the string DataIntegrityProof.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.';\n          const credential = credentials.clone('invalidProofType');\n          await verificationFail({\n            credential,\n            verifier,\n            reason: 'Should not verify VC with invalid \"proof.type\"'\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "0ctWYnuH-3ybgeFapgf9R",
              "ctx": null,
              "_testId": "urn:uuid:82dddded-f1f4-47d4-970f-a4ae751c80fe",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "The type property MUST contain the string DataIntegrityProof."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 61952,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 98,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Should not verify VC with invalid \"proof.type\": expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 26 Jan 2025 05:06:28 GMT', 'content-type': 'text/html; charset=utf-8', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'cache-control': 'no-cache,no-store', expires: '-1', pragma: 'no-cache', 'x-envoy-upstream-service-time': '8', 'cf-cache-status': 'DYNAMIC', 'report-to': '{\"endpoints\":[{\"url\":\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=gO%2FZ3tr9KR6cD8HpBcrfcRI27thHO5zWuQkBuq%2FulGNEdXUunjPFVfgykwOFme%2BMueu1B1lSLO%2F6tM1XzqyNFxlPKu%2BlVuIGod2814fA7prJOBKTn6rVjr%2B%2FNmPxxJWLk%2FktvKhVeHNHMn1a9%2FVS\"}],\"group\":\"cf-nel\",\"max_age\":604800}', nel: '{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}', server: 'cloudflare', 'cf-ray': '907df95058967c50-LAX', 'content-encoding': 'br', 'server-timing': 'cfL4;desc=\"?proto=TCP&rtt=8720&min_rtt=8127&rtt_var=1485&sent=19&recv=14&lost=0&retrans=0&sent_bytes=13842&recv_bytes=5211&delivery_rate=685714&cwnd=252&unsent_bytes=0&cid=2e6e38ba2067fca2&ts=681&x=0\"', Authorization: 'sanitized to prevent exposure of secrets' }, body: null, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Should not verify VC with invalid \"proof.type\": expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 26 Jan 2025 05:06:28 GMT', 'content-type': 'text/html; charset=utf-8', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'cache-control': 'no-cache,no-store', expires: '-1', pragma: 'no-cache', 'x-envoy-upstream-service-time': '8', 'cf-cache-status': 'DYNAMIC', 'report-to': '{\"endpoints\":[{\"url\":\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=gO%2FZ3tr9KR6cD8HpBcrfcRI27thHO5zWuQkBuq%2FulGNEdXUunjPFVfgykwOFme%2BMueu1B1lSLO%2F6tM1XzqyNFxlPKu%2BlVuIGod2814fA7prJOBKTn6rVjr%2B%2FNmPxxJWLk%2FktvKhVeHNHMn1a9%2FVS\"}],\"group\":\"cf-nel\",\"max_age\":604800}', nel: '{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}', server: 'cloudflare', 'cf-ray': '907df95058967c50-LAX', 'content-encoding': 'br', 'server-timing': 'cfL4;desc=\"?proto=TCP&rtt=8720&min_rtt=8127&rtt_var=1485&sent=19&recv=14&lost=0&retrans=0&sent_bytes=13842&recv_bytes=5211&delivery_rate=685714&cwnd=252&unsent_bytes=0&cid=2e6e38ba2067fca2&ts=681&x=0\"', Authorization: 'sanitized to prevent exposure of secrets' }, body: null, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationFail (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:83:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/suites/verify.js:113:11)"
              }
            },
            {
              "type": "test",
              "title": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      // NOTE: expectedProofPurpose should be specified by verifiers internally\n      // it is very unlikely to be invalidProofPurpose\n      await verificationFail({\n        credential: credentials.clone('invalidProofPurpose'),\n        verifier,\n        reason: 'Verifier should reject VC with invalid proof purpose.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "0ctWYnuH-3ybgeFapgf9R",
              "ctx": null,
              "_testId": "urn:uuid:181eda8b-f288-436a-83f7-5d3c7480d282",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 62051,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 96,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Verifier should reject VC with invalid proof purpose.: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 26 Jan 2025 05:06:28 GMT', 'content-type': 'text/html; charset=utf-8', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'cache-control': 'no-cache,no-store', expires: '-1', pragma: 'no-cache', 'x-envoy-upstream-service-time': '8', 'cf-cache-status': 'DYNAMIC', 'report-to': '{\"endpoints\":[{\"url\":\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=00tIB87J%2FQ63a%2FAucBgctdPQCw0hAOjUEgcojBHc6CpSQjlJR41GQrzmbg%2BmviC3Q6Q4BztSz%2BwmMmNQO9KlyNHCP0sxnU62ykNxHR3Jti9cSGaXw3enpm%2FtWYELFHUdi0Pv8OhFedUKtuJ5oBEA\"}],\"group\":\"cf-nel\",\"max_age\":604800}', nel: '{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}', server: 'cloudflare', 'cf-ray': '907df950e96e7c50-LAX', 'content-encoding': 'br', 'server-timing': 'cfL4;desc=\"?proto=TCP&rtt=8674&min_rtt=8127&rtt_var=1205&sent=23&recv=16&lost=0&retrans=0&sent_bytes=16582&recv_bytes=6323&delivery_rate=685714&cwnd=252&unsent_bytes=0&cid=2e6e38ba2067fca2&ts=778&x=0\"', Authorization: 'sanitized to prevent exposure of secrets' }, body: null, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Verifier should reject VC with invalid proof purpose.: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 26 Jan 2025 05:06:28 GMT', 'content-type': 'text/html; charset=utf-8', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'cache-control': 'no-cache,no-store', expires: '-1', pragma: 'no-cache', 'x-envoy-upstream-service-time': '8', 'cf-cache-status': 'DYNAMIC', 'report-to': '{\"endpoints\":[{\"url\":\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=00tIB87J%2FQ63a%2FAucBgctdPQCw0hAOjUEgcojBHc6CpSQjlJR41GQrzmbg%2BmviC3Q6Q4BztSz%2BwmMmNQO9KlyNHCP0sxnU62ykNxHR3Jti9cSGaXw3enpm%2FtWYELFHUdi0Pv8OhFedUKtuJ5oBEA\"}],\"group\":\"cf-nel\",\"max_age\":604800}', nel: '{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}', server: 'cloudflare', 'cf-ray': '907df950e96e7c50-LAX', 'content-encoding': 'br', 'server-timing': 'cfL4;desc=\"?proto=TCP&rtt=8674&min_rtt=8127&rtt_var=1205&sent=23&recv=16&lost=0&retrans=0&sent_bytes=16582&recv_bytes=6323&delivery_rate=685714&cwnd=252&unsent_bytes=0&cid=2e6e38ba2067fca2&ts=778&x=0\"', Authorization: 'sanitized to prevent exposure of secrets' }, body: null, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationFail (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:83:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/suites/verify.js:139:7)"
              }
            },
            {
              "type": "test",
              "title": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.';\n        await proofValueTests;\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "0ctWYnuH-3ybgeFapgf9R",
              "ctx": null,
              "_testId": "urn:uuid:a3bf7f27-df3d-40c3-b177-a88c0ee896d2",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "The proofValue property MUST be used, as specified in 2.1 Proofs."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 62149,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "MUST not verify VC with no \"proofValue\".: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 26 Jan 2025 05:06:28 GMT', 'content-type': 'text/html; charset=utf-8', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'cache-control': 'no-cache,no-store', expires: '-1', pragma: 'no-cache', 'x-envoy-upstream-service-time': '34', 'cf-cache-status': 'DYNAMIC', 'report-to': '{\"endpoints\":[{\"url\":\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=xWuBZ84BpWbu8pfcO6gsfkFjP2wuqLnLKzFaAtEyziwcdTlRtQ8V77lyYl6kJX9rGJhRfiZYbC5axuDH81LHgjwe5UWUqs4%2F6WptN3p9BKfsJ7eOcpLpcPED1jGVge9wtlS0nlUrkuNy4eqPB1WI\"}],\"group\":\"cf-nel\",\"max_age\":604800}', nel: '{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}', server: 'cloudflare', 'cf-ray': '907df94cbc1a7c50-LAX', 'content-encoding': 'br', 'server-timing': 'cfL4;desc=\"?proto=TCP&rtt=8288&min_rtt=8246&rtt_var=3122&sent=4&recv=5&lost=0&retrans=0&sent_bytes=2442&recv_bytes=1490&delivery_rate=346349&cwnd=246&unsent_bytes=0&cid=2e6e38ba2067fca2&ts=143&x=0\"', Authorization: 'sanitized to prevent exposure of secrets' }, body: null, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: MUST not verify VC with no \"proofValue\".: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 26 Jan 2025 05:06:28 GMT', 'content-type': 'text/html; charset=utf-8', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'cache-control': 'no-cache,no-store', expires: '-1', pragma: 'no-cache', 'x-envoy-upstream-service-time': '34', 'cf-cache-status': 'DYNAMIC', 'report-to': '{\"endpoints\":[{\"url\":\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=xWuBZ84BpWbu8pfcO6gsfkFjP2wuqLnLKzFaAtEyziwcdTlRtQ8V77lyYl6kJX9rGJhRfiZYbC5axuDH81LHgjwe5UWUqs4%2F6WptN3p9BKfsJ7eOcpLpcPED1jGVge9wtlS0nlUrkuNy4eqPB1WI\"}],\"group\":\"cf-nel\",\"max_age\":604800}', nel: '{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}', server: 'cloudflare', 'cf-ray': '907df94cbc1a7c50-LAX', 'content-encoding': 'br', 'server-timing': 'cfL4;desc=\"?proto=TCP&rtt=8288&min_rtt=8246&rtt_var=3122&sent=4&recv=5&lost=0&retrans=0&sent_bytes=2442&recv_bytes=1490&delivery_rate=346349&cwnd=246&unsent_bytes=0&cid=2e6e38ba2067fca2&ts=143&x=0\"', Authorization: 'sanitized to prevent exposure of secrets' }, body: null, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationFail (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:83:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async shouldBeProofValue (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:311:3)"
              }
            },
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof';\n      await proofValueTests;\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "0ctWYnuH-3ybgeFapgf9R",
              "ctx": null,
              "_testId": "urn:uuid:3df6006f-faa9-4a97-97d2-3bac0d4e06da",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 62149,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "MUST not verify VC with no \"proofValue\".: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 26 Jan 2025 05:06:28 GMT', 'content-type': 'text/html; charset=utf-8', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'cache-control': 'no-cache,no-store', expires: '-1', pragma: 'no-cache', 'x-envoy-upstream-service-time': '34', 'cf-cache-status': 'DYNAMIC', 'report-to': '{\"endpoints\":[{\"url\":\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=xWuBZ84BpWbu8pfcO6gsfkFjP2wuqLnLKzFaAtEyziwcdTlRtQ8V77lyYl6kJX9rGJhRfiZYbC5axuDH81LHgjwe5UWUqs4%2F6WptN3p9BKfsJ7eOcpLpcPED1jGVge9wtlS0nlUrkuNy4eqPB1WI\"}],\"group\":\"cf-nel\",\"max_age\":604800}', nel: '{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}', server: 'cloudflare', 'cf-ray': '907df94cbc1a7c50-LAX', 'content-encoding': 'br', 'server-timing': 'cfL4;desc=\"?proto=TCP&rtt=8288&min_rtt=8246&rtt_var=3122&sent=4&recv=5&lost=0&retrans=0&sent_bytes=2442&recv_bytes=1490&delivery_rate=346349&cwnd=246&unsent_bytes=0&cid=2e6e38ba2067fca2&ts=143&x=0\"', Authorization: 'sanitized to prevent exposure of secrets' }, body: null, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: MUST not verify VC with no \"proofValue\".: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 26 Jan 2025 05:06:28 GMT', 'content-type': 'text/html; charset=utf-8', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'cache-control': 'no-cache,no-store', expires: '-1', pragma: 'no-cache', 'x-envoy-upstream-service-time': '34', 'cf-cache-status': 'DYNAMIC', 'report-to': '{\"endpoints\":[{\"url\":\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=xWuBZ84BpWbu8pfcO6gsfkFjP2wuqLnLKzFaAtEyziwcdTlRtQ8V77lyYl6kJX9rGJhRfiZYbC5axuDH81LHgjwe5UWUqs4%2F6WptN3p9BKfsJ7eOcpLpcPED1jGVge9wtlS0nlUrkuNy4eqPB1WI\"}],\"group\":\"cf-nel\",\"max_age\":604800}', nel: '{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}', server: 'cloudflare', 'cf-ray': '907df94cbc1a7c50-LAX', 'content-encoding': 'br', 'server-timing': 'cfL4;desc=\"?proto=TCP&rtt=8288&min_rtt=8246&rtt_var=3122&sent=4&recv=5&lost=0&retrans=0&sent_bytes=2442&recv_bytes=1490&delivery_rate=346349&cwnd=246&unsent_bytes=0&cid=2e6e38ba2067fca2&ts=143&x=0\"', Authorization: 'sanitized to prevent exposure of secrets' }, body: null, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationFail (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:83:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async shouldBeProofValue (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:311:3)"
              }
            },
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      await verificationFail({\n        credential: credentials.clone('undefinedTerm'),\n        verifier,\n        reason: 'Should fail to verify VC when data is dropped by JSON-LD'\n      });\n      const undefinedTerm = credentials.clone('issuedVc');\n      undefinedTerm.credentialSubject.undefinedTerm = 'IfDroppedWillVerify';\n      await verificationFail({\n        credential: undefinedTerm,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined term is added ' +\n          'after issuance.'\n      });\n      const undefinedType = credentials.clone('issuedVc');\n      undefinedType.type.push('UndefinedType');\n      await verificationFail({\n        credential: undefinedType,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined type is added ' +\n          'after issuance.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "0ctWYnuH-3ybgeFapgf9R",
              "ctx": null,
              "_testId": "urn:uuid:bbb74559-a109-4c84-8178-a2ff239d2bb2",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 62151,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 109,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Should fail to verify VC when data is dropped by JSON-LD: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 26 Jan 2025 05:06:28 GMT', 'content-type': 'text/html; charset=utf-8', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'cache-control': 'no-cache,no-store', expires: '-1', pragma: 'no-cache', 'x-envoy-upstream-service-time': '8', 'cf-cache-status': 'DYNAMIC', 'report-to': '{\"endpoints\":[{\"url\":\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=hplbTqh%2F3VDZn0fgA7rR0A5MvNSuAmMppKIfy7vtl03gEIPoz6yz5yPTQun6RCcEwEyJid5xR6bOoXiKZpyUwwrV1M6trqsUHibkz%2BM6MPzNxJ0xuwWG%2BHXVF0w0TtF%2FgK6zVCUbZUQUipXJbiYc\"}],\"group\":\"cf-nel\",\"max_age\":604800}', nel: '{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}', server: 'cloudflare', 'cf-ray': '907df9518a9f7c50-LAX', 'content-encoding': 'br', 'server-timing': 'cfL4;desc=\"?proto=TCP&rtt=8640&min_rtt=8127&rtt_var=972&sent=27&recv=18&lost=0&retrans=0&sent_bytes=19314&recv_bytes=7468&delivery_rate=685714&cwnd=252&unsent_bytes=0&cid=2e6e38ba2067fca2&ts=890&x=0\"', Authorization: 'sanitized to prevent exposure of secrets' }, body: null, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Should fail to verify VC when data is dropped by JSON-LD: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 26 Jan 2025 05:06:28 GMT', 'content-type': 'text/html; charset=utf-8', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'cache-control': 'no-cache,no-store', expires: '-1', pragma: 'no-cache', 'x-envoy-upstream-service-time': '8', 'cf-cache-status': 'DYNAMIC', 'report-to': '{\"endpoints\":[{\"url\":\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=hplbTqh%2F3VDZn0fgA7rR0A5MvNSuAmMppKIfy7vtl03gEIPoz6yz5yPTQun6RCcEwEyJid5xR6bOoXiKZpyUwwrV1M6trqsUHibkz%2BM6MPzNxJ0xuwWG%2BHXVF0w0TtF%2FgK6zVCUbZUQUipXJbiYc\"}],\"group\":\"cf-nel\",\"max_age\":604800}', nel: '{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}', server: 'cloudflare', 'cf-ray': '907df9518a9f7c50-LAX', 'content-encoding': 'br', 'server-timing': 'cfL4;desc=\"?proto=TCP&rtt=8640&min_rtt=8127&rtt_var=972&sent=27&recv=18&lost=0&retrans=0&sent_bytes=19314&recv_bytes=7468&delivery_rate=685714&cwnd=252&unsent_bytes=0&cid=2e6e38ba2067fca2&ts=890&x=0\"', Authorization: 'sanitized to prevent exposure of secrets' }, body: null, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationFail (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:83:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/suites/verify.js:165:7)"
              }
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n      const credential = credentials.clone('invalidCryptosuite');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "0ctWYnuH-3ybgeFapgf9R",
              "ctx": null,
              "_testId": "urn:uuid:29120a48-491a-4b6c-b50f-b995eee7bfe3",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 62261,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 98,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no result from verifier.: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 26 Jan 2025 05:06:28 GMT', 'content-type': 'text/html; charset=utf-8', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'cache-control': 'no-cache,no-store', expires: '-1', pragma: 'no-cache', 'x-envoy-upstream-service-time': '7', 'cf-cache-status': 'DYNAMIC', 'report-to': '{\"endpoints\":[{\"url\":\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=c3zYydd3TrgSGqhNpO%2FxECabne9IpPMZeCXh4Q%2BRXpmBwGjM%2FdnYe6GnwK16dswCUdRLx8jSRf6RhHZymMKsQYLSTRlbHWiVFOxN3fsRVfPrG0bRWDCRXulqWt8kOldxv28bNQCJA%2FCrcMNsr0Xj\"}],\"group\":\"cf-nel\",\"max_age\":604800}', nel: '{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}', server: 'cloudflare', 'cf-ray': '907df9523c157c50-LAX', 'content-encoding': 'br', 'server-timing': 'cfL4;desc=\"?proto=TCP&rtt=8974&min_rtt=8127&rtt_var=1367&sent=31&recv=20&lost=0&retrans=0&sent_bytes=22043&recv_bytes=8584&delivery_rate=685714&cwnd=252&unsent_bytes=0&cid=2e6e38ba2067fca2&ts=990&x=0\"', Authorization: 'sanitized to prevent exposure of secrets' }, body: null, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no result from verifier.: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 26 Jan 2025 05:06:28 GMT', 'content-type': 'text/html; charset=utf-8', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'cache-control': 'no-cache,no-store', expires: '-1', pragma: 'no-cache', 'x-envoy-upstream-service-time': '7', 'cf-cache-status': 'DYNAMIC', 'report-to': '{\"endpoints\":[{\"url\":\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=c3zYydd3TrgSGqhNpO%2FxECabne9IpPMZeCXh4Q%2BRXpmBwGjM%2FdnYe6GnwK16dswCUdRLx8jSRf6RhHZymMKsQYLSTRlbHWiVFOxN3fsRVfPrG0bRWDCRXulqWt8kOldxv28bNQCJA%2FCrcMNsr0Xj\"}],\"group\":\"cf-nel\",\"max_age\":604800}', nel: '{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}', server: 'cloudflare', 'cf-ray': '907df9523c157c50-LAX', 'content-encoding': 'br', 'server-timing': 'cfL4;desc=\"?proto=TCP&rtt=8974&min_rtt=8127&rtt_var=1367&sent=31&recv=20&lost=0&retrans=0&sent_bytes=22043&recv_bytes=8584&delivery_rate=685714&cwnd=252&unsent_bytes=0&cid=2e6e38ba2067fca2&ts=990&x=0\"', Authorization: 'sanitized to prevent exposure of secrets' }, body: null, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationFail (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:83:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/suites/verify.js:194:7)"
              }
            },
            {
              "type": "test",
              "title": "An OPTIONAL string value (proof.previousProof) or unordered list of string values. Each value identifies another data integrity proof that MUST verify before the current proof is processed.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=An%20OPTIONAL%20string%20value%20or%20unordered%20list%20of%20string%20values.%20Each%20value%20identifies%20another%20data%20integrity%20proof%20that%20MUST%20verify%20before%20the%20current%20proof%20is%20processed';\n        await verificationSuccess({\n          credential: credentials.clone('previousProofString'),\n          verifier,\n          reason: 'Should verify VC with a string \"proof.previousProof\".'\n        });\n        await verificationSuccess({\n          credential: credentials.clone('previousProofArray'),\n          verifier,\n          reason: 'Should verify VC with an Array \"proof.previousProof\".'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "0ctWYnuH-3ybgeFapgf9R",
              "ctx": null,
              "_testId": "urn:uuid:0db03889-f48f-4fd5-9ff4-79c2e837bc37",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "An OPTIONAL string value (proof.previousProof) or unordered list of string values. Each value identifies another data integrity proof that MUST verify before the current proof is processed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=An%20OPTIONAL%20string%20value%20or%20unordered%20list%20of%20string%20values.%20Each%20value%20identifies%20another%20data%20integrity%20proof%20that%20MUST%20verify%20before%20the%20current%20proof%20is%20processed",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 62360,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 208,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If an unordered list (proof), all referenced proofs in the array MUST verify.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=If%20an%20unordered%20list%2C%20all%20referenced%20proofs%20in%20the%20array%20MUST%20verify';\n        await verificationSuccess({\n          credential: credentials.clone('proofSet'),\n          verifier,\n          reason: 'Should verify VC with multiple proofs.'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "0ctWYnuH-3ybgeFapgf9R",
              "ctx": null,
              "_testId": "urn:uuid:1c87734f-38cd-4170-ac79-48c17372f6c2",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "If an unordered list (proof), all referenced proofs in the array MUST verify."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=If%20an%20unordered%20list%2C%20all%20referenced%20proofs%20in%20the%20array%20MUST%20verify",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 62569,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 99,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If a proof with id equal to previousProof does not exist in allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20a%20proof%20with%20id%20equal%20to%20previousProof%20does%20not%20exist%20in%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR';\n        await verificationFail({\n          credential: credentials.clone('missingPreviousProofString'),\n          verifier,\n          reason: 'Should not verify VC with invalid \"proof.previousProof\".'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "0ctWYnuH-3ybgeFapgf9R",
              "ctx": null,
              "_testId": "urn:uuid:a0593369-5c32-4ce4-a7f0-8b6ed71a100b",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "If a proof with id equal to previousProof does not exist in allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20a%20proof%20with%20id%20equal%20to%20previousProof%20does%20not%20exist%20in%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 62667,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 114,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Should not verify VC with invalid \"proof.previousProof\".: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 26 Jan 2025 05:06:29 GMT', 'content-type': 'text/html; charset=utf-8', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'cache-control': 'no-cache,no-store', expires: '-1', pragma: 'no-cache', 'x-envoy-upstream-service-time': '11', 'cf-cache-status': 'DYNAMIC', 'report-to': '{\"endpoints\":[{\"url\":\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=lFnoPG7859iQ%2FZDONNxXR1wtDU0oECPVAkKpKwa0dv1D4qPA2bFzbQDimwNBQS%2BIcj2LQihj8ICWq0fvQhGP1E6RctxwB1yUMeaAHpFcAqCDF7oPatnWMJbP71YlbsP6dsIeZPZ5fl7pUWJK1lU9\"}],\"group\":\"cf-nel\",\"max_age\":604800}', nel: '{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}', server: 'cloudflare', 'cf-ray': '907df954c8467c50-LAX', 'content-encoding': 'br', 'server-timing': 'cfL4;desc=\"?proto=TCP&rtt=8815&min_rtt=8127&rtt_var=794&sent=43&recv=29&lost=0&retrans=0&sent_bytes=30233&recv_bytes=13886&delivery_rate=685714&cwnd=252&unsent_bytes=0&cid=2e6e38ba2067fca2&ts=1413&x=0\"', Authorization: 'sanitized to prevent exposure of secrets' }, body: null, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Should not verify VC with invalid \"proof.previousProof\".: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 26 Jan 2025 05:06:29 GMT', 'content-type': 'text/html; charset=utf-8', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'cache-control': 'no-cache,no-store', expires: '-1', pragma: 'no-cache', 'x-envoy-upstream-service-time': '11', 'cf-cache-status': 'DYNAMIC', 'report-to': '{\"endpoints\":[{\"url\":\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=lFnoPG7859iQ%2FZDONNxXR1wtDU0oECPVAkKpKwa0dv1D4qPA2bFzbQDimwNBQS%2BIcj2LQihj8ICWq0fvQhGP1E6RctxwB1yUMeaAHpFcAqCDF7oPatnWMJbP71YlbsP6dsIeZPZ5fl7pUWJK1lU9\"}],\"group\":\"cf-nel\",\"max_age\":604800}', nel: '{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}', server: 'cloudflare', 'cf-ray': '907df954c8467c50-LAX', 'content-encoding': 'br', 'server-timing': 'cfL4;desc=\"?proto=TCP&rtt=8815&min_rtt=8127&rtt_var=794&sent=43&recv=29&lost=0&retrans=0&sent_bytes=30233&recv_bytes=13886&delivery_rate=685714&cwnd=252&unsent_bytes=0&cid=2e6e38ba2067fca2&ts=1413&x=0\"', Authorization: 'sanitized to prevent exposure of secrets' }, body: null, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationFail (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:83:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/suites/verify.js:295:9)"
              }
            },
            {
              "type": "test",
              "title": "If any element of previousProof list has an id attribute that does not match the id attribute of any element of allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20any%20element%20of%20previousProof%20list%20has%20an%20id%20attribute%20that%20does%20not%20match%20the%20id%20attribute%20of%20any%20element%20of%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n        await verificationFail({\n          credential: credentials.clone('missingPreviousProofArray'),\n          verifier,\n          reason: 'Should not verify VC with invalid \"proof.previousProof\".'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "0ctWYnuH-3ybgeFapgf9R",
              "ctx": null,
              "_testId": "urn:uuid:e6a40b5a-cd06-48ef-acbc-27305239c100",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "If any element of previousProof list has an id attribute that does not match the id attribute of any element of allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20any%20element%20of%20previousProof%20list%20has%20an%20id%20attribute%20that%20does%20not%20match%20the%20id%20attribute%20of%20any%20element%20of%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 62782,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 105,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Should not verify VC with invalid \"proof.previousProof\".: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 26 Jan 2025 05:06:29 GMT', 'content-type': 'text/html; charset=utf-8', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'cache-control': 'no-cache,no-store', expires: '-1', pragma: 'no-cache', 'x-envoy-upstream-service-time': '8', 'cf-cache-status': 'DYNAMIC', 'report-to': '{\"endpoints\":[{\"url\":\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=zefkVreUOMTwS94bXjzgyc1TDvLNVFo8V8boms1ugIMA1L%2FStEd2nBc5IGuved1fT6vtU9IBLfyFaB8tf8aDkotbOAJY3bk6CWjlYSE7NOpFW4QtqqLR6TMOsOvyfuJyFQiw%2FA7ISQFclS1t6Nup\"}],\"group\":\"cf-nel\",\"max_age\":604800}', nel: '{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}', server: 'cloudflare', 'cf-ray': '907df95589507c50-LAX', 'content-encoding': 'br', 'server-timing': 'cfL4;desc=\"?proto=TCP&rtt=8759&min_rtt=8127&rtt_var=708&sent=47&recv=32&lost=0&retrans=0&sent_bytes=32961&recv_bytes=15800&delivery_rate=685714&cwnd=252&unsent_bytes=0&cid=2e6e38ba2067fca2&ts=1518&x=0\"', Authorization: 'sanitized to prevent exposure of secrets' }, body: null, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Should not verify VC with invalid \"proof.previousProof\".: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 26 Jan 2025 05:06:29 GMT', 'content-type': 'text/html; charset=utf-8', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'cache-control': 'no-cache,no-store', expires: '-1', pragma: 'no-cache', 'x-envoy-upstream-service-time': '8', 'cf-cache-status': 'DYNAMIC', 'report-to': '{\"endpoints\":[{\"url\":\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=zefkVreUOMTwS94bXjzgyc1TDvLNVFo8V8boms1ugIMA1L%2FStEd2nBc5IGuved1fT6vtU9IBLfyFaB8tf8aDkotbOAJY3bk6CWjlYSE7NOpFW4QtqqLR6TMOsOvyfuJyFQiw%2FA7ISQFclS1t6Nup\"}],\"group\":\"cf-nel\",\"max_age\":604800}', nel: '{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}', server: 'cloudflare', 'cf-ray': '907df95589507c50-LAX', 'content-encoding': 'br', 'server-timing': 'cfL4;desc=\"?proto=TCP&rtt=8759&min_rtt=8127&rtt_var=708&sent=47&recv=32&lost=0&retrans=0&sent_bytes=32961&recv_bytes=15800&delivery_rate=685714&cwnd=252&unsent_bytes=0&cid=2e6e38ba2067fca2&ts=1518&x=0\"', Authorization: 'sanitized to prevent exposure of secrets' }, body: null, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationFail (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:83:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/suites/verify.js:306:9)"
              }
            },
            {
              "type": "test",
              "title": "Each value identifies another data integrity proof, all of which MUST also verify for the current proof to be considered verified",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=Each%20value%20identifies%20another%20data%20integrity%20proof%2C%20all%20of%20which%20MUST%20also%20verify%20for%20the%20current%20proof%20to%20be%20considered%20verified';\n        await verificationFail({\n          credential: credentials.clone('previousProofFail'),\n          verifier,\n          reason: 'Should not verify VC with a \"previousProof\" that does ' +\n          'not verify.'\n        });\n\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "0ctWYnuH-3ybgeFapgf9R",
              "ctx": null,
              "_testId": "urn:uuid:f43f6175-c095-4fde-9c63-a3a509ea91b2",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "Each value identifies another data integrity proof, all of which MUST also verify for the current proof to be considered verified"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=Each%20value%20identifies%20another%20data%20integrity%20proof%2C%20all%20of%20which%20MUST%20also%20verify%20for%20the%20current%20proof%20to%20be%20considered%20verified",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 62888,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 98,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Should not verify VC with a \"previousProof\" that does not verify.: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 26 Jan 2025 05:06:29 GMT', 'content-type': 'text/html; charset=utf-8', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'cache-control': 'no-cache,no-store', expires: '-1', pragma: 'no-cache', 'x-envoy-upstream-service-time': '8', 'cf-cache-status': 'DYNAMIC', 'report-to': '{\"endpoints\":[{\"url\":\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=w2VLLFmVg7X2cwMl363TCPjRAu1ZjzqwGFMfeeqqAaJIS9xs8BmgdMkFOC3CHu%2Fz%2FD2qxnbcPuAo%2Fk8dxNfioxUfDR0Gu5HRfGJYBqgAlHaRfrhrX5nuqOfm9MdD5OBezImKQUeHD3GKwW244ZcL\"}],\"group\":\"cf-nel\",\"max_age\":604800}', nel: '{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}', server: 'cloudflare', 'cf-ray': '907df9562a277c50-LAX', 'content-encoding': 'br', 'server-timing': 'cfL4;desc=\"?proto=TCP&rtt=8711&min_rtt=8127&rtt_var=627&sent=51&recv=35&lost=0&retrans=0&sent_bytes=35688&recv_bytes=17631&delivery_rate=685714&cwnd=252&unsent_bytes=0&cid=2e6e38ba2067fca2&ts=1617&x=0\"', Authorization: 'sanitized to prevent exposure of secrets' }, body: null, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Should not verify VC with a \"previousProof\" that does not verify.: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 26 Jan 2025 05:06:29 GMT', 'content-type': 'text/html; charset=utf-8', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'cache-control': 'no-cache,no-store', expires: '-1', pragma: 'no-cache', 'x-envoy-upstream-service-time': '8', 'cf-cache-status': 'DYNAMIC', 'report-to': '{\"endpoints\":[{\"url\":\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=w2VLLFmVg7X2cwMl363TCPjRAu1ZjzqwGFMfeeqqAaJIS9xs8BmgdMkFOC3CHu%2Fz%2FD2qxnbcPuAo%2Fk8dxNfioxUfDR0Gu5HRfGJYBqgAlHaRfrhrX5nuqOfm9MdD5OBezImKQUeHD3GKwW244ZcL\"}],\"group\":\"cf-nel\",\"max_age\":604800}', nel: '{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}', server: 'cloudflare', 'cf-ray': '907df9562a277c50-LAX', 'content-encoding': 'br', 'server-timing': 'cfL4;desc=\"?proto=TCP&rtt=8711&min_rtt=8127&rtt_var=627&sent=51&recv=35&lost=0&retrans=0&sent_bytes=35688&recv_bytes=17631&delivery_rate=685714&cwnd=252&unsent_bytes=0&cid=2e6e38ba2067fca2&ts=1617&x=0\"', Authorization: 'sanitized to prevent exposure of secrets' }, body: null, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationFail (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:83:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/suites/verify.js:316:9)"
              }
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"Trinsic\"",
              "body": "function() {\n      this.currentTest.cell = {\n        columnId: testDescription,\n        rowId: this.currentTest.title\n      };\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "0ctWYnuH-3ybgeFapgf9R",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Trinsic\"",
              "body": "async function() {\n      proofValueTests = shouldBeProofValue({credentials, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "0ctWYnuH-3ybgeFapgf9R",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 61348,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "IPhqgK04YvYqd94TS-1Z1",
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
          "_testId": "urn:uuid:8f63c1d5-56aa-445f-a476-36892d25e0d5"
        },
        {
          "title": "bovine",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.';\n      const credential = credentials.clone('invalidBaseUrl');\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'Should not verify VC with invalid base URL'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "QDCxWQdkgzmaMA2bzyUTX",
              "ctx": null,
              "_testId": "urn:uuid:2e3e023d-71b9-4346-b74d-47156ef400ea",
              "cell": {
                "columnId": "bovine",
                "rowId": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 62989,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1410,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Conforming processors MUST produce errors when non-conforming documents are consumed.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.';\n      // this could be read as testing all non-confirming docs or just one\n      // for this test only one doc is tested as it should throw for any\n      // non-conforming doc\n      await verificationFail({\n        credential: credentials.clone('invalidProofType'),\n        verifier,\n        reason: 'Should not verify VC with invalid \"proof.type\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "QDCxWQdkgzmaMA2bzyUTX",
              "ctx": null,
              "_testId": "urn:uuid:85cd292b-8143-4d38-9cef-52d73c4c0d07",
              "cell": {
                "columnId": "bovine",
                "rowId": "Conforming processors MUST produce errors when non-conforming documents are consumed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 64399,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 145,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.';\n      const credential = credentials.clone('issuedVc');\n      credential.proof = null;\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'MUST not verify VC with proof that is not a map.'\n      });\n      await verificationFail({\n        // use a string as the non map representation of a VC\n        credential: JSON.stringify(credentials.clone('issuedVc')),\n        verifier,\n        reason: 'MUST not verify VC that is not a map.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "QDCxWQdkgzmaMA2bzyUTX",
              "ctx": null,
              "_testId": "urn:uuid:7ed63e90-ca1b-4231-ab8a-b14c36595a07",
              "cell": {
                "columnId": "bovine",
                "rowId": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 64544,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 288,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof;\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'MUST not verify VC w/o a proof'\n      });\n      const noType = credentials.clone('issuedVc');\n      delete noType.proof.type;\n      await verificationFail({\n        credential: noType,\n        verifier,\n        reason: 'MUST not verify VC w/o a \"proof.type\".'\n      });\n      const noVm = credentials.clone('noVm');\n      await verificationFail({\n        credential: noVm,\n        verifier,\n        reason: 'MUST not verify VC w/o \"proof.verificationMethod\".\"'\n      });\n      const noProofPurpose = credentials.clone('noProofPurpose');\n      await verificationFail({\n        credential: noProofPurpose,\n        verifier,\n        reason: 'MUST not verify VC w/o \"proof.proofPurpose\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "QDCxWQdkgzmaMA2bzyUTX",
              "ctx": null,
              "_testId": "urn:uuid:4b69fe20-7a66-4345-b6e1-b02ccc5e596d",
              "cell": {
                "columnId": "bovine",
                "rowId": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 64832,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 578,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The type property MUST contain the string DataIntegrityProof.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.';\n          const credential = credentials.clone('invalidProofType');\n          await verificationFail({\n            credential,\n            verifier,\n            reason: 'Should not verify VC with invalid \"proof.type\"'\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "QDCxWQdkgzmaMA2bzyUTX",
              "ctx": null,
              "_testId": "urn:uuid:c19965c3-7f77-4a91-a506-64396af20062",
              "cell": {
                "columnId": "bovine",
                "rowId": "The type property MUST contain the string DataIntegrityProof."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 65410,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 150,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      // NOTE: expectedProofPurpose should be specified by verifiers internally\n      // it is very unlikely to be invalidProofPurpose\n      await verificationFail({\n        credential: credentials.clone('invalidProofPurpose'),\n        verifier,\n        reason: 'Verifier should reject VC with invalid proof purpose.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "QDCxWQdkgzmaMA2bzyUTX",
              "ctx": null,
              "_testId": "urn:uuid:1e740337-aab6-4026-94f8-29d8accb8cd3",
              "cell": {
                "columnId": "bovine",
                "rowId": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 65561,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 150,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.';\n        await proofValueTests;\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "QDCxWQdkgzmaMA2bzyUTX",
              "ctx": null,
              "_testId": "urn:uuid:10e78c96-dfe9-4a80-a83e-fdcc6f6a3a3e",
              "cell": {
                "columnId": "bovine",
                "rowId": "The proofValue property MUST be used, as specified in 2.1 Proofs."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 65711,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof';\n      await proofValueTests;\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "QDCxWQdkgzmaMA2bzyUTX",
              "ctx": null,
              "_testId": "urn:uuid:6f906c6d-4d85-461d-b587-bb5d2571112e",
              "cell": {
                "columnId": "bovine",
                "rowId": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 65711,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      await verificationFail({\n        credential: credentials.clone('undefinedTerm'),\n        verifier,\n        reason: 'Should fail to verify VC when data is dropped by JSON-LD'\n      });\n      const undefinedTerm = credentials.clone('issuedVc');\n      undefinedTerm.credentialSubject.undefinedTerm = 'IfDroppedWillVerify';\n      await verificationFail({\n        credential: undefinedTerm,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined term is added ' +\n          'after issuance.'\n      });\n      const undefinedType = credentials.clone('issuedVc');\n      undefinedType.type.push('UndefinedType');\n      await verificationFail({\n        credential: undefinedType,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined type is added ' +\n          'after issuance.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "QDCxWQdkgzmaMA2bzyUTX",
              "ctx": null,
              "_testId": "urn:uuid:7b87c8dc-a202-4ce5-a7ef-27ed9ba8e16d",
              "cell": {
                "columnId": "bovine",
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 65711,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 299,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Should fail to verify VC if an undefined term is added after issuance.: expected Response { status: 200, statusText: 'OK', headers: Headers { server: 'nginx/1.18.0 (Ubuntu)', date: 'Sun, 26 Jan 2025 05:06:32 GMT', 'content-type': 'text/html; charset=utf-8', 'content-length': '0', connection: 'keep-alive', Authorization: 'sanitized to prevent exposure of secrets' }, body: null, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Should fail to verify VC if an undefined term is added after issuance.: expected Response { status: 200, statusText: 'OK', headers: Headers { server: 'nginx/1.18.0 (Ubuntu)', date: 'Sun, 26 Jan 2025 05:06:32 GMT', 'content-type': 'text/html; charset=utf-8', 'content-length': '0', connection: 'keep-alive', Authorization: 'sanitized to prevent exposure of secrets' }, body: null, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationFail (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:83:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/suites/verify.js:172:7)"
              }
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n      const credential = credentials.clone('invalidCryptosuite');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "QDCxWQdkgzmaMA2bzyUTX",
              "ctx": null,
              "_testId": "urn:uuid:c4218533-cebe-4e01-b922-980ee6d99144",
              "cell": {
                "columnId": "bovine",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 66011,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 144,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "An OPTIONAL string value (proof.previousProof) or unordered list of string values. Each value identifies another data integrity proof that MUST verify before the current proof is processed.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=An%20OPTIONAL%20string%20value%20or%20unordered%20list%20of%20string%20values.%20Each%20value%20identifies%20another%20data%20integrity%20proof%20that%20MUST%20verify%20before%20the%20current%20proof%20is%20processed';\n        await verificationSuccess({\n          credential: credentials.clone('previousProofString'),\n          verifier,\n          reason: 'Should verify VC with a string \"proof.previousProof\".'\n        });\n        await verificationSuccess({\n          credential: credentials.clone('previousProofArray'),\n          verifier,\n          reason: 'Should verify VC with an Array \"proof.previousProof\".'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "QDCxWQdkgzmaMA2bzyUTX",
              "ctx": null,
              "_testId": "urn:uuid:98751c3c-e54f-480a-8b7b-31b47a1252db",
              "cell": {
                "columnId": "bovine",
                "rowId": "An OPTIONAL string value (proof.previousProof) or unordered list of string values. Each value identifies another data integrity proof that MUST verify before the current proof is processed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=An%20OPTIONAL%20string%20value%20or%20unordered%20list%20of%20string%20values.%20Each%20value%20identifies%20another%20data%20integrity%20proof%20that%20MUST%20verify%20before%20the%20current%20proof%20is%20processed",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 66155,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 143,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Should verify VC with a string \"proof.previousProof\".: expected HTTPError: Request failed with status cod… { …(5) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",\"https://w3id.org/security/data-integrity/v2\",{\"@context\":{\"AlumniCredential\":\"https://www.example.org/AlumniCredential\",\"alumniOf\":\"https://www.example.org/alumniOf\",\"description\":\"https://schema.org/description\",\"name\":\"https://schema.org/name\"}}],\"id\":\"urn:uuid:58172aac-d8ba-11ed-83dd-0b3aef56cc33\",\"type\":[\"VerifiableCredential\",\"AlumniCredential\"],\"name\":\"Alumni Credential\",\"description\":\"A minimum viable example of a VC 1.1 Alumni Credential.\",\"issuer\":\"did:key:z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E\",\"issuanceDate\":\"2023-01-01T00:00:00Z\",\"credentialSubject\":{\"id\":\"did:example:abcdefgh\",\"alumniOf\":\"The School of Examples\"},\"proof\":[{\"type\":\"DataIntegrityProof\",\"id\":\"urn:uuid:26329423-bec9-4b2e-88cb-a7c7d9dc4544\",\"cryptosuite\":\"eddsa-rdfc-2022\",\"created\":\"2023-02-26T22:06:38Z\",\"verificationMethod\":\"did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7#z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z5gL4Hy8N4B6zr9mQAGqpsry1iTdxEAp4zjqPNQv7iTvgdkMcHKnMALvPwU3YAKZhYn3k3Jmut2TAMxSaHaggFtf4\"},{\"type\":\"DataIntegrityProof\",\"cryptosuite\":\"eddsa-rdfc-2022\",\"created\":\"2023-02-26T22:16:38Z\",\"verificationMethod\":\"did:key:z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E#z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E\",\"proofPurpose\":\"assertionMethod\",\"previousProof\":\"urn:uuid:26329423-bec9-4b2e-88cb-a7c7d9dc4544\",\"proofValue\":\"z2ENoYDUK8cMMJMvwRGyHVX23pPeHaZfCgpbDFs15FXGaeFseeqzZf5nWXF14JPoBcqdr39vVPgrAUbWT2VYYacrG\"}]},\"options\":{}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          "https://w3id.org/security/data-integrity/v2",
                          {
                            "@context": {
                              "AlumniCredential": "https://www.example.org/AlumniCredential",
                              "alumniOf": "https://www.example.org/alumniOf",
                              "description": "https://schema.org/description",
                              "name": "https://schema.org/name"
                            }
                          }
                        ],
                        "id": "urn:uuid:58172aac-d8ba-11ed-83dd-0b3aef56cc33",
                        "type": [
                          "VerifiableCredential",
                          "AlumniCredential"
                        ],
                        "name": "Alumni Credential",
                        "description": "A minimum viable example of a VC 1.1 Alumni Credential.",
                        "issuer": "did:key:z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E",
                        "issuanceDate": "2023-01-01T00:00:00Z",
                        "credentialSubject": {
                          "id": "did:example:abcdefgh",
                          "alumniOf": "The School of Examples"
                        },
                        "proof": [
                          {
                            "type": "DataIntegrityProof",
                            "id": "urn:uuid:26329423-bec9-4b2e-88cb-a7c7d9dc4544",
                            "cryptosuite": "eddsa-rdfc-2022",
                            "created": "2023-02-26T22:06:38Z",
                            "verificationMethod": "did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7#z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7",
                            "proofPurpose": "assertionMethod",
                            "proofValue": "z5gL4Hy8N4B6zr9mQAGqpsry1iTdxEAp4zjqPNQv7iTvgdkMcHKnMALvPwU3YAKZhYn3k3Jmut2TAMxSaHaggFtf4"
                          },
                          {
                            "type": "DataIntegrityProof",
                            "cryptosuite": "eddsa-rdfc-2022",
                            "created": "2023-02-26T22:16:38Z",
                            "verificationMethod": "did:key:z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E#z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E",
                            "proofPurpose": "assertionMethod",
                            "previousProof": "urn:uuid:26329423-bec9-4b2e-88cb-a7c7d9dc4544",
                            "proofValue": "z2ENoYDUK8cMMJMvwRGyHVX23pPeHaZfCgpbDFs15FXGaeFseeqzZf5nWXF14JPoBcqdr39vVPgrAUbWT2VYYacrG"
                          }
                        ]
                      },
                      "options": {}
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://bovine.social/w3c-di/verify",
                  "status": 400
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Should verify VC with a string \"proof.previousProof\".: expected HTTPError: Request failed with status cod… { …(5) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:50:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/suites/verify.js:271:9)"
              }
            },
            {
              "type": "test",
              "title": "If an unordered list (proof), all referenced proofs in the array MUST verify.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=If%20an%20unordered%20list%2C%20all%20referenced%20proofs%20in%20the%20array%20MUST%20verify';\n        await verificationSuccess({\n          credential: credentials.clone('proofSet'),\n          verifier,\n          reason: 'Should verify VC with multiple proofs.'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "QDCxWQdkgzmaMA2bzyUTX",
              "ctx": null,
              "_testId": "urn:uuid:aefd4f3a-1e9e-4e0c-adae-bf380b799733",
              "cell": {
                "columnId": "bovine",
                "rowId": "If an unordered list (proof), all referenced proofs in the array MUST verify."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=If%20an%20unordered%20list%2C%20all%20referenced%20proofs%20in%20the%20array%20MUST%20verify",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 66299,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 144,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Should verify VC with multiple proofs.: expected HTTPError: Request failed with status cod… { …(5) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",\"https://w3id.org/security/data-integrity/v2\"],\"id\":\"urn:uuid:86294362-4254-4f36-854f-3952fe42555d\",\"type\":[\"VerifiableCredential\"],\"issuer\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\",\"issuanceDate\":\"2020-03-16T22:37:26.544Z\",\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\"},\"proof\":[{\"type\":\"DataIntegrityProof\",\"created\":\"2025-01-26T05:05:40Z\",\"verificationMethod\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b#z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\",\"cryptosuite\":\"eddsa-rdfc-2022\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z2hoTxSsXuKayiPmKuptT4oEX9xtfvZgdHDSwTDeSC3nm3rUCKtx2ZY35wKBKqg5Li4aSiQ7RaczX8m3Q5xNp5jCx\"},{\"type\":\"DataIntegrityProof\",\"created\":\"2025-01-26T05:05:40Z\",\"verificationMethod\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b#z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\",\"cryptosuite\":\"eddsa-rdfc-2022\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z2hoTxSsXuKayiPmKuptT4oEX9xtfvZgdHDSwTDeSC3nm3rUCKtx2ZY35wKBKqg5Li4aSiQ7RaczX8m3Q5xNp5jCx\"}]},\"options\":{}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          "https://w3id.org/security/data-integrity/v2"
                        ],
                        "id": "urn:uuid:86294362-4254-4f36-854f-3952fe42555d",
                        "type": [
                          "VerifiableCredential"
                        ],
                        "issuer": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b",
                        "issuanceDate": "2020-03-16T22:37:26.544Z",
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                        },
                        "proof": [
                          {
                            "type": "DataIntegrityProof",
                            "created": "2025-01-26T05:05:40Z",
                            "verificationMethod": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b#z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b",
                            "cryptosuite": "eddsa-rdfc-2022",
                            "proofPurpose": "assertionMethod",
                            "proofValue": "z2hoTxSsXuKayiPmKuptT4oEX9xtfvZgdHDSwTDeSC3nm3rUCKtx2ZY35wKBKqg5Li4aSiQ7RaczX8m3Q5xNp5jCx"
                          },
                          {
                            "type": "DataIntegrityProof",
                            "created": "2025-01-26T05:05:40Z",
                            "verificationMethod": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b#z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b",
                            "cryptosuite": "eddsa-rdfc-2022",
                            "proofPurpose": "assertionMethod",
                            "proofValue": "z2hoTxSsXuKayiPmKuptT4oEX9xtfvZgdHDSwTDeSC3nm3rUCKtx2ZY35wKBKqg5Li4aSiQ7RaczX8m3Q5xNp5jCx"
                          }
                        ]
                      },
                      "options": {}
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://bovine.social/w3c-di/verify",
                  "status": 400
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Should verify VC with multiple proofs.: expected HTTPError: Request failed with status cod… { …(5) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:50:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/suites/verify.js:285:9)"
              }
            },
            {
              "type": "test",
              "title": "If a proof with id equal to previousProof does not exist in allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20a%20proof%20with%20id%20equal%20to%20previousProof%20does%20not%20exist%20in%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR';\n        await verificationFail({\n          credential: credentials.clone('missingPreviousProofString'),\n          verifier,\n          reason: 'Should not verify VC with invalid \"proof.previousProof\".'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "QDCxWQdkgzmaMA2bzyUTX",
              "ctx": null,
              "_testId": "urn:uuid:c178b391-3986-4477-b242-6abc22c9106f",
              "cell": {
                "columnId": "bovine",
                "rowId": "If a proof with id equal to previousProof does not exist in allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20a%20proof%20with%20id%20equal%20to%20previousProof%20does%20not%20exist%20in%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 66444,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 145,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If any element of previousProof list has an id attribute that does not match the id attribute of any element of allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20any%20element%20of%20previousProof%20list%20has%20an%20id%20attribute%20that%20does%20not%20match%20the%20id%20attribute%20of%20any%20element%20of%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n        await verificationFail({\n          credential: credentials.clone('missingPreviousProofArray'),\n          verifier,\n          reason: 'Should not verify VC with invalid \"proof.previousProof\".'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "QDCxWQdkgzmaMA2bzyUTX",
              "ctx": null,
              "_testId": "urn:uuid:940ae658-a73e-490d-9f25-db2df45c9b4e",
              "cell": {
                "columnId": "bovine",
                "rowId": "If any element of previousProof list has an id attribute that does not match the id attribute of any element of allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20any%20element%20of%20previousProof%20list%20has%20an%20id%20attribute%20that%20does%20not%20match%20the%20id%20attribute%20of%20any%20element%20of%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 66589,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 144,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Each value identifies another data integrity proof, all of which MUST also verify for the current proof to be considered verified",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=Each%20value%20identifies%20another%20data%20integrity%20proof%2C%20all%20of%20which%20MUST%20also%20verify%20for%20the%20current%20proof%20to%20be%20considered%20verified';\n        await verificationFail({\n          credential: credentials.clone('previousProofFail'),\n          verifier,\n          reason: 'Should not verify VC with a \"previousProof\" that does ' +\n          'not verify.'\n        });\n\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "QDCxWQdkgzmaMA2bzyUTX",
              "ctx": null,
              "_testId": "urn:uuid:74968078-b723-4038-bc51-307e33978eb9",
              "cell": {
                "columnId": "bovine",
                "rowId": "Each value identifies another data integrity proof, all of which MUST also verify for the current proof to be considered verified"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=Each%20value%20identifies%20another%20data%20integrity%20proof%2C%20all%20of%20which%20MUST%20also%20verify%20for%20the%20current%20proof%20to%20be%20considered%20verified",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 66733,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 145,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"bovine\"",
              "body": "function() {\n      this.currentTest.cell = {\n        columnId: testDescription,\n        rowId: this.currentTest.title\n      };\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "QDCxWQdkgzmaMA2bzyUTX",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"bovine\"",
              "body": "async function() {\n      proofValueTests = shouldBeProofValue({credentials, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "QDCxWQdkgzmaMA2bzyUTX",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 62987,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "IPhqgK04YvYqd94TS-1Z1",
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
          "_testId": "urn:uuid:a36e2b0b-5b7e-4404-8ff0-8c1d09240528"
        }
      ],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [
        {
          "title": "\"before all\" hook in \"Data Integrity (eddsa-rdfc-2022 verifiers)\"",
          "body": "async function() {\n      const data = await generateTestData({...testDataOptions, optionalTests});\n      // this might seem weird, but mocha won't wait for credentials to be set\n      // before passing the credentials var to the tests\n      // so we just update the credentials passed to the actual test suite\n      Object.assign(credentials, data);\n    }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "IPhqgK04YvYqd94TS-1Z1",
          "ctx": null,
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 13593,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 39,
          "_error": null
        }
      ],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "Ika60aoT9ncTXtTubybzs",
      "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Verifier",
      "_testId": "urn:uuid:f17b1a27-4007-4924-8b32-3dec5b5fe1a5",
      "columns": [
        "apicatalog.com",
        "Aviary Tech",
        "Digital Bazaar",
        "Grotto Networking",
        "Netis",
        "Procivis One Core",
        "SpruceID",
        "Trential",
        "Trinsic",
        "bovine"
      ],
      "rows": [
        {
          "id": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null.",
          "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.",
          "cells": [
            {
              "type": "test",
              "title": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.';\n      const credential = credentials.clone('invalidBaseUrl');\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'Should not verify VC with invalid base URL'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "CEAfWLPcxsKJNAj2STIIb",
              "ctx": null,
              "_testId": "urn:uuid:7940d520-85f6-4938-9a12-06d7d377feac",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 13633,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 129,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.';\n      const credential = credentials.clone('invalidBaseUrl');\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'Should not verify VC with invalid base URL'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "CtFlPjii4dCwlNLWP7nHR",
              "ctx": null,
              "_testId": "urn:uuid:d1dd2a7d-08bf-4eae-8999-0dbbe5f4703f",
              "cell": {
                "columnId": "Aviary Tech",
                "rowId": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18436,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 148,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.';\n      const credential = credentials.clone('invalidBaseUrl');\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'Should not verify VC with invalid base URL'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "AaBj6j734Xhrd8pZ6XJAZ",
              "ctx": null,
              "_testId": "urn:uuid:ded32c14-fcdf-4d48-aa8a-177e71aaee95",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19671,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 347,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.';\n      const credential = credentials.clone('invalidBaseUrl');\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'Should not verify VC with invalid base URL'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "GR-gSiE-yu7q5QSTZ-vf1",
              "ctx": null,
              "_testId": "urn:uuid:f8509ac1-89d4-49ae-ba4f-6724c801c40a",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 21691,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 833,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.';\n      const credential = credentials.clone('invalidBaseUrl');\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'Should not verify VC with invalid base URL'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "axNKa1xcoGlQzOQTJcOzF",
              "ctx": null,
              "_testId": "urn:uuid:67f6bad7-90c3-46ea-8c36-e17c554a0747",
              "cell": {
                "columnId": "Netis",
                "rowId": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30145,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 605,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.';\n      const credential = credentials.clone('invalidBaseUrl');\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'Should not verify VC with invalid base URL'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "7HtVI6O_1Gd2wEyGqdagm",
              "ctx": null,
              "_testId": "urn:uuid:efc444a4-e548-4551-9925-55aecbdc1e40",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 33755,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 486,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.';\n      const credential = credentials.clone('invalidBaseUrl');\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'Should not verify VC with invalid base URL'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "YDUokIHMIbQFTHZgMFsnx",
              "ctx": null,
              "_testId": "urn:uuid:858cfef7-eb7e-4d13-a821-f65496df4fb3",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 36881,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 140,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.';\n      const credential = credentials.clone('invalidBaseUrl');\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'Should not verify VC with invalid base URL'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "V_bOytb15rSWxo4duA0Vu",
              "ctx": null,
              "_testId": "urn:uuid:7786b74e-8d29-4d05-93d1-fa6d7d61970c",
              "cell": {
                "columnId": "Trential",
                "rowId": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 38902,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 2555,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.';\n      const credential = credentials.clone('invalidBaseUrl');\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'Should not verify VC with invalid base URL'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "0ctWYnuH-3ybgeFapgf9R",
              "ctx": null,
              "_testId": "urn:uuid:064a1b88-8a6b-4cab-8042-d6924b4f1e08",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 61350,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 300,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Should not verify VC with invalid base URL: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 26 Jan 2025 05:06:28 GMT', 'content-type': 'text/html; charset=utf-8', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'cache-control': 'no-cache,no-store', expires: '-1', pragma: 'no-cache', 'x-envoy-upstream-service-time': '8', 'cf-cache-status': 'DYNAMIC', 'report-to': '{\"endpoints\":[{\"url\":\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=LV9Ck8D6YZJ645fMc7RVXjUK5VzkZMBec9xdNel51Q2ql4QJ16w4NG4GtuZWMZ5SFEt%2FoQzDeSJLxCi9WNsIF9VR%2Bfik%2BkvzF%2BSKpyNjVaVSGXO3arQv9X8Rkx4H6v76dXsNKzcWwNFqE17pkozO\"}],\"group\":\"cf-nel\",\"max_age\":604800}', nel: '{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}', server: 'cloudflare', 'cf-ray': '907df94cb9c42f3f-LAX', 'content-encoding': 'br', 'server-timing': 'cfL4;desc=\"?proto=TCP&rtt=8615&min_rtt=8605&rtt_var=3234&sent=4&recv=5&lost=0&retrans=0&sent_bytes=2442&recv_bytes=1617&delivery_rate=331900&cwnd=243&unsent_bytes=0&cid=c12b6a59b02d7009&ts=279&x=0\"', Authorization: 'sanitized to prevent exposure of secrets' }, body: null, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Should not verify VC with invalid base URL: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 26 Jan 2025 05:06:28 GMT', 'content-type': 'text/html; charset=utf-8', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'cache-control': 'no-cache,no-store', expires: '-1', pragma: 'no-cache', 'x-envoy-upstream-service-time': '8', 'cf-cache-status': 'DYNAMIC', 'report-to': '{\"endpoints\":[{\"url\":\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=LV9Ck8D6YZJ645fMc7RVXjUK5VzkZMBec9xdNel51Q2ql4QJ16w4NG4GtuZWMZ5SFEt%2FoQzDeSJLxCi9WNsIF9VR%2Bfik%2BkvzF%2BSKpyNjVaVSGXO3arQv9X8Rkx4H6v76dXsNKzcWwNFqE17pkozO\"}],\"group\":\"cf-nel\",\"max_age\":604800}', nel: '{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}', server: 'cloudflare', 'cf-ray': '907df94cb9c42f3f-LAX', 'content-encoding': 'br', 'server-timing': 'cfL4;desc=\"?proto=TCP&rtt=8615&min_rtt=8605&rtt_var=3234&sent=4&recv=5&lost=0&retrans=0&sent_bytes=2442&recv_bytes=1617&delivery_rate=331900&cwnd=243&unsent_bytes=0&cid=c12b6a59b02d7009&ts=279&x=0\"', Authorization: 'sanitized to prevent exposure of secrets' }, body: null, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationFail (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:83:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/suites/verify.js:39:7)"
              }
            },
            {
              "type": "test",
              "title": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.';\n      const credential = credentials.clone('invalidBaseUrl');\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'Should not verify VC with invalid base URL'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "QDCxWQdkgzmaMA2bzyUTX",
              "ctx": null,
              "_testId": "urn:uuid:2e3e023d-71b9-4346-b74d-47156ef400ea",
              "cell": {
                "columnId": "bovine",
                "rowId": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 62989,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1410,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "Conforming processors MUST produce errors when non-conforming documents are consumed.",
          "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.",
          "cells": [
            {
              "type": "test",
              "title": "Conforming processors MUST produce errors when non-conforming documents are consumed.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.';\n      // this could be read as testing all non-confirming docs or just one\n      // for this test only one doc is tested as it should throw for any\n      // non-conforming doc\n      await verificationFail({\n        credential: credentials.clone('invalidProofType'),\n        verifier,\n        reason: 'Should not verify VC with invalid \"proof.type\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "CEAfWLPcxsKJNAj2STIIb",
              "ctx": null,
              "_testId": "urn:uuid:7f95598c-bb09-4f73-b070-0321862bbdc8",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "Conforming processors MUST produce errors when non-conforming documents are consumed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 13762,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 3174,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Conforming processors MUST produce errors when non-conforming documents are consumed.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.';\n      // this could be read as testing all non-confirming docs or just one\n      // for this test only one doc is tested as it should throw for any\n      // non-conforming doc\n      await verificationFail({\n        credential: credentials.clone('invalidProofType'),\n        verifier,\n        reason: 'Should not verify VC with invalid \"proof.type\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "CtFlPjii4dCwlNLWP7nHR",
              "ctx": null,
              "_testId": "urn:uuid:ebf009e6-4043-490b-b552-ad8ae298e0c8",
              "cell": {
                "columnId": "Aviary Tech",
                "rowId": "Conforming processors MUST produce errors when non-conforming documents are consumed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18585,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 52,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "Conforming processors MUST produce errors when non-conforming documents are consumed.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.';\n      // this could be read as testing all non-confirming docs or just one\n      // for this test only one doc is tested as it should throw for any\n      // non-conforming doc\n      await verificationFail({\n        credential: credentials.clone('invalidProofType'),\n        verifier,\n        reason: 'Should not verify VC with invalid \"proof.type\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "AaBj6j734Xhrd8pZ6XJAZ",
              "ctx": null,
              "_testId": "urn:uuid:7f0c9012-818b-4ce3-8cab-787ca10f039c",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "Conforming processors MUST produce errors when non-conforming documents are consumed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20018,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 86,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Conforming processors MUST produce errors when non-conforming documents are consumed.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.';\n      // this could be read as testing all non-confirming docs or just one\n      // for this test only one doc is tested as it should throw for any\n      // non-conforming doc\n      await verificationFail({\n        credential: credentials.clone('invalidProofType'),\n        verifier,\n        reason: 'Should not verify VC with invalid \"proof.type\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "GR-gSiE-yu7q5QSTZ-vf1",
              "ctx": null,
              "_testId": "urn:uuid:c810a940-c3c8-448d-a556-f50329c85fca",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "Conforming processors MUST produce errors when non-conforming documents are consumed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 22525,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 43,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "Conforming processors MUST produce errors when non-conforming documents are consumed.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.';\n      // this could be read as testing all non-confirming docs or just one\n      // for this test only one doc is tested as it should throw for any\n      // non-conforming doc\n      await verificationFail({\n        credential: credentials.clone('invalidProofType'),\n        verifier,\n        reason: 'Should not verify VC with invalid \"proof.type\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "axNKa1xcoGlQzOQTJcOzF",
              "ctx": null,
              "_testId": "urn:uuid:feab6119-fb28-4615-86f1-008a652638bf",
              "cell": {
                "columnId": "Netis",
                "rowId": "Conforming processors MUST produce errors when non-conforming documents are consumed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30750,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 165,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Conforming processors MUST produce errors when non-conforming documents are consumed.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.';\n      // this could be read as testing all non-confirming docs or just one\n      // for this test only one doc is tested as it should throw for any\n      // non-conforming doc\n      await verificationFail({\n        credential: credentials.clone('invalidProofType'),\n        verifier,\n        reason: 'Should not verify VC with invalid \"proof.type\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "7HtVI6O_1Gd2wEyGqdagm",
              "ctx": null,
              "_testId": "urn:uuid:2e992ed7-2db3-4704-a5fd-6cd40c2d04b2",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "Conforming processors MUST produce errors when non-conforming documents are consumed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 34244,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 143,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Conforming processors MUST produce errors when non-conforming documents are consumed.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.';\n      // this could be read as testing all non-confirming docs or just one\n      // for this test only one doc is tested as it should throw for any\n      // non-conforming doc\n      await verificationFail({\n        credential: credentials.clone('invalidProofType'),\n        verifier,\n        reason: 'Should not verify VC with invalid \"proof.type\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "YDUokIHMIbQFTHZgMFsnx",
              "ctx": null,
              "_testId": "urn:uuid:0b070561-eab9-4279-adb0-b6a5af3cb339",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "Conforming processors MUST produce errors when non-conforming documents are consumed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 37020,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 92,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Conforming processors MUST produce errors when non-conforming documents are consumed.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.';\n      // this could be read as testing all non-confirming docs or just one\n      // for this test only one doc is tested as it should throw for any\n      // non-conforming doc\n      await verificationFail({\n        credential: credentials.clone('invalidProofType'),\n        verifier,\n        reason: 'Should not verify VC with invalid \"proof.type\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "V_bOytb15rSWxo4duA0Vu",
              "ctx": null,
              "_testId": "urn:uuid:7fa23333-ca9e-44c3-ad79-7c516da050cf",
              "cell": {
                "columnId": "Trential",
                "rowId": "Conforming processors MUST produce errors when non-conforming documents are consumed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 41458,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 247,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Conforming processors MUST produce errors when non-conforming documents are consumed.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.';\n      // this could be read as testing all non-confirming docs or just one\n      // for this test only one doc is tested as it should throw for any\n      // non-conforming doc\n      await verificationFail({\n        credential: credentials.clone('invalidProofType'),\n        verifier,\n        reason: 'Should not verify VC with invalid \"proof.type\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "0ctWYnuH-3ybgeFapgf9R",
              "ctx": null,
              "_testId": "urn:uuid:c1e6e416-cedf-4c08-af68-a21cd08cd3ef",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "Conforming processors MUST produce errors when non-conforming documents are consumed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 61651,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 97,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Should not verify VC with invalid \"proof.type\": expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 26 Jan 2025 05:06:28 GMT', 'content-type': 'text/html; charset=utf-8', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'cache-control': 'no-cache,no-store', expires: '-1', pragma: 'no-cache', 'x-envoy-upstream-service-time': '7', 'cf-cache-status': 'DYNAMIC', 'report-to': '{\"endpoints\":[{\"url\":\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=Hji7sR7CcLPZU%2B6tdFfjAuXmju4UN5T%2Fxg1odavUCsBGG0uYoXpYN2bhOIlOWjO5pTALNqj9npUy%2FUv3%2BsfLrQQN9zSFWed3Dfl1I4%2B3hagK0EYRblEA1pqUoBhY5uQYTx8za3RuisHJeaY3mIDG\"}],\"group\":\"cf-nel\",\"max_age\":604800}', nel: '{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}', server: 'cloudflare', 'cf-ray': '907df94e6e327c50-LAX', 'content-encoding': 'br', 'server-timing': 'cfL4;desc=\"?proto=TCP&rtt=8293&min_rtt=8246&rtt_var=1764&sent=9&recv=8&lost=0&retrans=0&sent_bytes=5646&recv_bytes=2601&delivery_rate=685714&cwnd=250&unsent_bytes=0&cid=2e6e38ba2067fca2&ts=379&x=0\"', Authorization: 'sanitized to prevent exposure of secrets' }, body: null, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Should not verify VC with invalid \"proof.type\": expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 26 Jan 2025 05:06:28 GMT', 'content-type': 'text/html; charset=utf-8', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'cache-control': 'no-cache,no-store', expires: '-1', pragma: 'no-cache', 'x-envoy-upstream-service-time': '7', 'cf-cache-status': 'DYNAMIC', 'report-to': '{\"endpoints\":[{\"url\":\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=Hji7sR7CcLPZU%2B6tdFfjAuXmju4UN5T%2Fxg1odavUCsBGG0uYoXpYN2bhOIlOWjO5pTALNqj9npUy%2FUv3%2BsfLrQQN9zSFWed3Dfl1I4%2B3hagK0EYRblEA1pqUoBhY5uQYTx8za3RuisHJeaY3mIDG\"}],\"group\":\"cf-nel\",\"max_age\":604800}', nel: '{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}', server: 'cloudflare', 'cf-ray': '907df94e6e327c50-LAX', 'content-encoding': 'br', 'server-timing': 'cfL4;desc=\"?proto=TCP&rtt=8293&min_rtt=8246&rtt_var=1764&sent=9&recv=8&lost=0&retrans=0&sent_bytes=5646&recv_bytes=2601&delivery_rate=685714&cwnd=250&unsent_bytes=0&cid=2e6e38ba2067fca2&ts=379&x=0\"', Authorization: 'sanitized to prevent exposure of secrets' }, body: null, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationFail (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:83:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/suites/verify.js:51:7)"
              }
            },
            {
              "type": "test",
              "title": "Conforming processors MUST produce errors when non-conforming documents are consumed.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.';\n      // this could be read as testing all non-confirming docs or just one\n      // for this test only one doc is tested as it should throw for any\n      // non-conforming doc\n      await verificationFail({\n        credential: credentials.clone('invalidProofType'),\n        verifier,\n        reason: 'Should not verify VC with invalid \"proof.type\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "QDCxWQdkgzmaMA2bzyUTX",
              "ctx": null,
              "_testId": "urn:uuid:85cd292b-8143-4d38-9cef-52d73c4c0d07",
              "cell": {
                "columnId": "bovine",
                "rowId": "Conforming processors MUST produce errors when non-conforming documents are consumed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 64399,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 145,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR.",
          "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.",
          "cells": [
            {
              "type": "test",
              "title": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.';\n      const credential = credentials.clone('issuedVc');\n      credential.proof = null;\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'MUST not verify VC with proof that is not a map.'\n      });\n      await verificationFail({\n        // use a string as the non map representation of a VC\n        credential: JSON.stringify(credentials.clone('issuedVc')),\n        verifier,\n        reason: 'MUST not verify VC that is not a map.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "CEAfWLPcxsKJNAj2STIIb",
              "ctx": null,
              "_testId": "urn:uuid:c6bf0697-5b03-49f1-b196-0635c9132366",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16937,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 125,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.';\n      const credential = credentials.clone('issuedVc');\n      credential.proof = null;\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'MUST not verify VC with proof that is not a map.'\n      });\n      await verificationFail({\n        // use a string as the non map representation of a VC\n        credential: JSON.stringify(credentials.clone('issuedVc')),\n        verifier,\n        reason: 'MUST not verify VC that is not a map.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "CtFlPjii4dCwlNLWP7nHR",
              "ctx": null,
              "_testId": "urn:uuid:966dfca3-47bb-43a3-b065-fff38cb62064",
              "cell": {
                "columnId": "Aviary Tech",
                "rowId": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18637,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 101,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.';\n      const credential = credentials.clone('issuedVc');\n      credential.proof = null;\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'MUST not verify VC with proof that is not a map.'\n      });\n      await verificationFail({\n        // use a string as the non map representation of a VC\n        credential: JSON.stringify(credentials.clone('issuedVc')),\n        verifier,\n        reason: 'MUST not verify VC that is not a map.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "AaBj6j734Xhrd8pZ6XJAZ",
              "ctx": null,
              "_testId": "urn:uuid:efad7ed7-14cb-45d0-a404-2e224db60bf2",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20104,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 163,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.';\n      const credential = credentials.clone('issuedVc');\n      credential.proof = null;\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'MUST not verify VC with proof that is not a map.'\n      });\n      await verificationFail({\n        // use a string as the non map representation of a VC\n        credential: JSON.stringify(credentials.clone('issuedVc')),\n        verifier,\n        reason: 'MUST not verify VC that is not a map.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "GR-gSiE-yu7q5QSTZ-vf1",
              "ctx": null,
              "_testId": "urn:uuid:52a10c65-839d-47aa-974c-769ed6de4a53",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 22567,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 41,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.';\n      const credential = credentials.clone('issuedVc');\n      credential.proof = null;\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'MUST not verify VC with proof that is not a map.'\n      });\n      await verificationFail({\n        // use a string as the non map representation of a VC\n        credential: JSON.stringify(credentials.clone('issuedVc')),\n        verifier,\n        reason: 'MUST not verify VC that is not a map.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "axNKa1xcoGlQzOQTJcOzF",
              "ctx": null,
              "_testId": "urn:uuid:1f3572f6-3418-4990-9269-d049dd89a732",
              "cell": {
                "columnId": "Netis",
                "rowId": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30916,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 323,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.';\n      const credential = credentials.clone('issuedVc');\n      credential.proof = null;\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'MUST not verify VC with proof that is not a map.'\n      });\n      await verificationFail({\n        // use a string as the non map representation of a VC\n        credential: JSON.stringify(credentials.clone('issuedVc')),\n        verifier,\n        reason: 'MUST not verify VC that is not a map.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "7HtVI6O_1Gd2wEyGqdagm",
              "ctx": null,
              "_testId": "urn:uuid:d33fccf2-6dfe-4a41-854e-b73b90c837dd",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 34386,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 284,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.';\n      const credential = credentials.clone('issuedVc');\n      credential.proof = null;\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'MUST not verify VC with proof that is not a map.'\n      });\n      await verificationFail({\n        // use a string as the non map representation of a VC\n        credential: JSON.stringify(credentials.clone('issuedVc')),\n        verifier,\n        reason: 'MUST not verify VC that is not a map.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "YDUokIHMIbQFTHZgMFsnx",
              "ctx": null,
              "_testId": "urn:uuid:93f6a1cd-d3b1-442a-b778-005d5c1d7262",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 37113,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 196,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.';\n      const credential = credentials.clone('issuedVc');\n      credential.proof = null;\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'MUST not verify VC with proof that is not a map.'\n      });\n      await verificationFail({\n        // use a string as the non map representation of a VC\n        credential: JSON.stringify(credentials.clone('issuedVc')),\n        verifier,\n        reason: 'MUST not verify VC that is not a map.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "V_bOytb15rSWxo4duA0Vu",
              "ctx": null,
              "_testId": "urn:uuid:470d2f05-e983-49be-afd6-0540fbe01f48",
              "cell": {
                "columnId": "Trential",
                "rowId": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 41705,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1200,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.';\n      const credential = credentials.clone('issuedVc');\n      credential.proof = null;\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'MUST not verify VC with proof that is not a map.'\n      });\n      await verificationFail({\n        // use a string as the non map representation of a VC\n        credential: JSON.stringify(credentials.clone('issuedVc')),\n        verifier,\n        reason: 'MUST not verify VC that is not a map.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "0ctWYnuH-3ybgeFapgf9R",
              "ctx": null,
              "_testId": "urn:uuid:9209aef6-1e93-4148-9ade-08eb370b82b1",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 61749,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 98,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "MUST not verify VC with proof that is not a map.: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 26 Jan 2025 05:06:28 GMT', 'content-type': 'text/html; charset=utf-8', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'cache-control': 'no-cache,no-store', expires: '-1', pragma: 'no-cache', 'x-envoy-upstream-service-time': '8', 'cf-cache-status': 'DYNAMIC', 'report-to': '{\"endpoints\":[{\"url\":\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=yijpPLkQioFROpFd38OwOKYHeXQdbj713KAacBVhu40UPSzdRjr1ud7ht9EKVtALmKuQWRlfFcxCHawogXZQn%2F%2FLe%2BeAxs9qMVL5XRUQZFvUD75clpqsTzdhEhZ%2F%2F3TgUOuLq%2FN2FCKhlLsHjFZh\"}],\"group\":\"cf-nel\",\"max_age\":604800}', nel: '{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}', server: 'cloudflare', 'cf-ray': '907df94f0ef57c50-LAX', 'content-encoding': 'br', 'server-timing': 'cfL4;desc=\"?proto=TCP&rtt=8282&min_rtt=8155&rtt_var=1345&sent=12&recv=10&lost=0&retrans=0&sent_bytes=8375&recv_bytes=3357&delivery_rate=685714&cwnd=252&unsent_bytes=0&cid=2e6e38ba2067fca2&ts=478&x=0\"', Authorization: 'sanitized to prevent exposure of secrets' }, body: null, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: MUST not verify VC with proof that is not a map.: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 26 Jan 2025 05:06:28 GMT', 'content-type': 'text/html; charset=utf-8', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'cache-control': 'no-cache,no-store', expires: '-1', pragma: 'no-cache', 'x-envoy-upstream-service-time': '8', 'cf-cache-status': 'DYNAMIC', 'report-to': '{\"endpoints\":[{\"url\":\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=yijpPLkQioFROpFd38OwOKYHeXQdbj713KAacBVhu40UPSzdRjr1ud7ht9EKVtALmKuQWRlfFcxCHawogXZQn%2F%2FLe%2BeAxs9qMVL5XRUQZFvUD75clpqsTzdhEhZ%2F%2F3TgUOuLq%2FN2FCKhlLsHjFZh\"}],\"group\":\"cf-nel\",\"max_age\":604800}', nel: '{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}', server: 'cloudflare', 'cf-ray': '907df94f0ef57c50-LAX', 'content-encoding': 'br', 'server-timing': 'cfL4;desc=\"?proto=TCP&rtt=8282&min_rtt=8155&rtt_var=1345&sent=12&recv=10&lost=0&retrans=0&sent_bytes=8375&recv_bytes=3357&delivery_rate=685714&cwnd=252&unsent_bytes=0&cid=2e6e38ba2067fca2&ts=478&x=0\"', Authorization: 'sanitized to prevent exposure of secrets' }, body: null, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationFail (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:83:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/suites/verify.js:63:7)"
              }
            },
            {
              "type": "test",
              "title": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.';\n      const credential = credentials.clone('issuedVc');\n      credential.proof = null;\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'MUST not verify VC with proof that is not a map.'\n      });\n      await verificationFail({\n        // use a string as the non map representation of a VC\n        credential: JSON.stringify(credentials.clone('issuedVc')),\n        verifier,\n        reason: 'MUST not verify VC that is not a map.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "QDCxWQdkgzmaMA2bzyUTX",
              "ctx": null,
              "_testId": "urn:uuid:7ed63e90-ca1b-4231-ab8a-b14c36595a07",
              "cell": {
                "columnId": "bovine",
                "rowId": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 64544,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 288,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR",
          "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
          "cells": [
            {
              "type": "test",
              "title": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof;\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'MUST not verify VC w/o a proof'\n      });\n      const noType = credentials.clone('issuedVc');\n      delete noType.proof.type;\n      await verificationFail({\n        credential: noType,\n        verifier,\n        reason: 'MUST not verify VC w/o a \"proof.type\".'\n      });\n      const noVm = credentials.clone('noVm');\n      await verificationFail({\n        credential: noVm,\n        verifier,\n        reason: 'MUST not verify VC w/o \"proof.verificationMethod\".\"'\n      });\n      const noProofPurpose = credentials.clone('noProofPurpose');\n      await verificationFail({\n        credential: noProofPurpose,\n        verifier,\n        reason: 'MUST not verify VC w/o \"proof.proofPurpose\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "CEAfWLPcxsKJNAj2STIIb",
              "ctx": null,
              "_testId": "urn:uuid:c11edf96-45e1-4a0d-93c5-84f66fcb4056",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 17062,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 394,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof;\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'MUST not verify VC w/o a proof'\n      });\n      const noType = credentials.clone('issuedVc');\n      delete noType.proof.type;\n      await verificationFail({\n        credential: noType,\n        verifier,\n        reason: 'MUST not verify VC w/o a \"proof.type\".'\n      });\n      const noVm = credentials.clone('noVm');\n      await verificationFail({\n        credential: noVm,\n        verifier,\n        reason: 'MUST not verify VC w/o \"proof.verificationMethod\".\"'\n      });\n      const noProofPurpose = credentials.clone('noProofPurpose');\n      await verificationFail({\n        credential: noProofPurpose,\n        verifier,\n        reason: 'MUST not verify VC w/o \"proof.proofPurpose\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "CtFlPjii4dCwlNLWP7nHR",
              "ctx": null,
              "_testId": "urn:uuid:466a34df-f2c8-493b-9b7f-173e90cfa62a",
              "cell": {
                "columnId": "Aviary Tech",
                "rowId": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18739,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 173,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof;\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'MUST not verify VC w/o a proof'\n      });\n      const noType = credentials.clone('issuedVc');\n      delete noType.proof.type;\n      await verificationFail({\n        credential: noType,\n        verifier,\n        reason: 'MUST not verify VC w/o a \"proof.type\".'\n      });\n      const noVm = credentials.clone('noVm');\n      await verificationFail({\n        credential: noVm,\n        verifier,\n        reason: 'MUST not verify VC w/o \"proof.verificationMethod\".\"'\n      });\n      const noProofPurpose = credentials.clone('noProofPurpose');\n      await verificationFail({\n        credential: noProofPurpose,\n        verifier,\n        reason: 'MUST not verify VC w/o \"proof.proofPurpose\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "AaBj6j734Xhrd8pZ6XJAZ",
              "ctx": null,
              "_testId": "urn:uuid:c92af998-d1a6-4511-85bc-1149da486d99",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20268,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 341,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof;\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'MUST not verify VC w/o a proof'\n      });\n      const noType = credentials.clone('issuedVc');\n      delete noType.proof.type;\n      await verificationFail({\n        credential: noType,\n        verifier,\n        reason: 'MUST not verify VC w/o a \"proof.type\".'\n      });\n      const noVm = credentials.clone('noVm');\n      await verificationFail({\n        credential: noVm,\n        verifier,\n        reason: 'MUST not verify VC w/o \"proof.verificationMethod\".\"'\n      });\n      const noProofPurpose = credentials.clone('noProofPurpose');\n      await verificationFail({\n        credential: noProofPurpose,\n        verifier,\n        reason: 'MUST not verify VC w/o \"proof.proofPurpose\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "GR-gSiE-yu7q5QSTZ-vf1",
              "ctx": null,
              "_testId": "urn:uuid:d7969724-9b55-4f30-8416-ff7dfeaab11a",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 22608,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 79,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof;\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'MUST not verify VC w/o a proof'\n      });\n      const noType = credentials.clone('issuedVc');\n      delete noType.proof.type;\n      await verificationFail({\n        credential: noType,\n        verifier,\n        reason: 'MUST not verify VC w/o a \"proof.type\".'\n      });\n      const noVm = credentials.clone('noVm');\n      await verificationFail({\n        credential: noVm,\n        verifier,\n        reason: 'MUST not verify VC w/o \"proof.verificationMethod\".\"'\n      });\n      const noProofPurpose = credentials.clone('noProofPurpose');\n      await verificationFail({\n        credential: noProofPurpose,\n        verifier,\n        reason: 'MUST not verify VC w/o \"proof.proofPurpose\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "axNKa1xcoGlQzOQTJcOzF",
              "ctx": null,
              "_testId": "urn:uuid:b85ab0c9-4744-4969-a431-12cf42edfb70",
              "cell": {
                "columnId": "Netis",
                "rowId": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 31239,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 654,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof;\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'MUST not verify VC w/o a proof'\n      });\n      const noType = credentials.clone('issuedVc');\n      delete noType.proof.type;\n      await verificationFail({\n        credential: noType,\n        verifier,\n        reason: 'MUST not verify VC w/o a \"proof.type\".'\n      });\n      const noVm = credentials.clone('noVm');\n      await verificationFail({\n        credential: noVm,\n        verifier,\n        reason: 'MUST not verify VC w/o \"proof.verificationMethod\".\"'\n      });\n      const noProofPurpose = credentials.clone('noProofPurpose');\n      await verificationFail({\n        credential: noProofPurpose,\n        verifier,\n        reason: 'MUST not verify VC w/o \"proof.proofPurpose\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "7HtVI6O_1Gd2wEyGqdagm",
              "ctx": null,
              "_testId": "urn:uuid:61ade8c4-dedb-4883-9191-c50143b7c14f",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 34671,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 630,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof;\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'MUST not verify VC w/o a proof'\n      });\n      const noType = credentials.clone('issuedVc');\n      delete noType.proof.type;\n      await verificationFail({\n        credential: noType,\n        verifier,\n        reason: 'MUST not verify VC w/o a \"proof.type\".'\n      });\n      const noVm = credentials.clone('noVm');\n      await verificationFail({\n        credential: noVm,\n        verifier,\n        reason: 'MUST not verify VC w/o \"proof.verificationMethod\".\"'\n      });\n      const noProofPurpose = credentials.clone('noProofPurpose');\n      await verificationFail({\n        credential: noProofPurpose,\n        verifier,\n        reason: 'MUST not verify VC w/o \"proof.proofPurpose\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "YDUokIHMIbQFTHZgMFsnx",
              "ctx": null,
              "_testId": "urn:uuid:89ecb2ef-fffa-40a8-b3a2-52fcc5c1ab7d",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 37310,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 424,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof;\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'MUST not verify VC w/o a proof'\n      });\n      const noType = credentials.clone('issuedVc');\n      delete noType.proof.type;\n      await verificationFail({\n        credential: noType,\n        verifier,\n        reason: 'MUST not verify VC w/o a \"proof.type\".'\n      });\n      const noVm = credentials.clone('noVm');\n      await verificationFail({\n        credential: noVm,\n        verifier,\n        reason: 'MUST not verify VC w/o \"proof.verificationMethod\".\"'\n      });\n      const noProofPurpose = credentials.clone('noProofPurpose');\n      await verificationFail({\n        credential: noProofPurpose,\n        verifier,\n        reason: 'MUST not verify VC w/o \"proof.proofPurpose\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "V_bOytb15rSWxo4duA0Vu",
              "ctx": null,
              "_testId": "urn:uuid:6d2b7a84-18ad-4b4c-8eb5-3601e58e5490",
              "cell": {
                "columnId": "Trential",
                "rowId": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 42906,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 2545,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof;\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'MUST not verify VC w/o a proof'\n      });\n      const noType = credentials.clone('issuedVc');\n      delete noType.proof.type;\n      await verificationFail({\n        credential: noType,\n        verifier,\n        reason: 'MUST not verify VC w/o a \"proof.type\".'\n      });\n      const noVm = credentials.clone('noVm');\n      await verificationFail({\n        credential: noVm,\n        verifier,\n        reason: 'MUST not verify VC w/o \"proof.verificationMethod\".\"'\n      });\n      const noProofPurpose = credentials.clone('noProofPurpose');\n      await verificationFail({\n        credential: noProofPurpose,\n        verifier,\n        reason: 'MUST not verify VC w/o \"proof.proofPurpose\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "0ctWYnuH-3ybgeFapgf9R",
              "ctx": null,
              "_testId": "urn:uuid:2c7aa9f9-a440-4ad2-9f5c-ce7e3cb62dcd",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 61848,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 103,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "MUST not verify VC w/o a proof: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 26 Jan 2025 05:06:28 GMT', 'content-type': 'text/html; charset=utf-8', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'cache-control': 'no-cache,no-store', expires: '-1', pragma: 'no-cache', 'x-envoy-upstream-service-time': '8', 'cf-cache-status': 'DYNAMIC', 'report-to': '{\"endpoints\":[{\"url\":\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=ef%2BlYhNMRAxDWKQlzBbQElsGeitFsFJEtT37KibR62uS0MqbBn3U4OF3il%2FxjwQBOe9LvgqPyItTEYEtPnBaof%2FnP5jIfWkkkWRsNG%2FhGZ1YHCcd5BsUhYE9FcJdQwj9pwCfWXLd3%2Brlf6%2BBxFWu\"}],\"group\":\"cf-nel\",\"max_age\":604800}', nel: '{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}', server: 'cloudflare', 'cf-ray': '907df94fafbf7c50-LAX', 'content-encoding': 'br', 'server-timing': 'cfL4;desc=\"?proto=TCP&rtt=8268&min_rtt=8127&rtt_var=1037&sent=15&recv=12&lost=0&retrans=0&sent_bytes=11108&recv_bytes=4100&delivery_rate=685714&cwnd=252&unsent_bytes=0&cid=2e6e38ba2067fca2&ts=581&x=0\"', Authorization: 'sanitized to prevent exposure of secrets' }, body: null, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: MUST not verify VC w/o a proof: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 26 Jan 2025 05:06:28 GMT', 'content-type': 'text/html; charset=utf-8', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'cache-control': 'no-cache,no-store', expires: '-1', pragma: 'no-cache', 'x-envoy-upstream-service-time': '8', 'cf-cache-status': 'DYNAMIC', 'report-to': '{\"endpoints\":[{\"url\":\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=ef%2BlYhNMRAxDWKQlzBbQElsGeitFsFJEtT37KibR62uS0MqbBn3U4OF3il%2FxjwQBOe9LvgqPyItTEYEtPnBaof%2FnP5jIfWkkkWRsNG%2FhGZ1YHCcd5BsUhYE9FcJdQwj9pwCfWXLd3%2Brlf6%2BBxFWu\"}],\"group\":\"cf-nel\",\"max_age\":604800}', nel: '{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}', server: 'cloudflare', 'cf-ray': '907df94fafbf7c50-LAX', 'content-encoding': 'br', 'server-timing': 'cfL4;desc=\"?proto=TCP&rtt=8268&min_rtt=8127&rtt_var=1037&sent=15&recv=12&lost=0&retrans=0&sent_bytes=11108&recv_bytes=4100&delivery_rate=685714&cwnd=252&unsent_bytes=0&cid=2e6e38ba2067fca2&ts=581&x=0\"', Authorization: 'sanitized to prevent exposure of secrets' }, body: null, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationFail (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:83:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/suites/verify.js:82:7)"
              }
            },
            {
              "type": "test",
              "title": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof;\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'MUST not verify VC w/o a proof'\n      });\n      const noType = credentials.clone('issuedVc');\n      delete noType.proof.type;\n      await verificationFail({\n        credential: noType,\n        verifier,\n        reason: 'MUST not verify VC w/o a \"proof.type\".'\n      });\n      const noVm = credentials.clone('noVm');\n      await verificationFail({\n        credential: noVm,\n        verifier,\n        reason: 'MUST not verify VC w/o \"proof.verificationMethod\".\"'\n      });\n      const noProofPurpose = credentials.clone('noProofPurpose');\n      await verificationFail({\n        credential: noProofPurpose,\n        verifier,\n        reason: 'MUST not verify VC w/o \"proof.proofPurpose\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "QDCxWQdkgzmaMA2bzyUTX",
              "ctx": null,
              "_testId": "urn:uuid:4b69fe20-7a66-4345-b6e1-b02ccc5e596d",
              "cell": {
                "columnId": "bovine",
                "rowId": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 64832,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 578,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "The type property MUST contain the string DataIntegrityProof.",
          "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.",
          "cells": [
            {
              "type": "test",
              "title": "The type property MUST contain the string DataIntegrityProof.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.';\n          const credential = credentials.clone('invalidProofType');\n          await verificationFail({\n            credential,\n            verifier,\n            reason: 'Should not verify VC with invalid \"proof.type\"'\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "CEAfWLPcxsKJNAj2STIIb",
              "ctx": null,
              "_testId": "urn:uuid:572e220d-d2f4-471c-a88e-f93982cb5614",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "The type property MUST contain the string DataIntegrityProof."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 17457,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 198,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The type property MUST contain the string DataIntegrityProof.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.';\n          const credential = credentials.clone('invalidProofType');\n          await verificationFail({\n            credential,\n            verifier,\n            reason: 'Should not verify VC with invalid \"proof.type\"'\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "CtFlPjii4dCwlNLWP7nHR",
              "ctx": null,
              "_testId": "urn:uuid:5eefa7ea-973f-4b60-810d-07393d2f600a",
              "cell": {
                "columnId": "Aviary Tech",
                "rowId": "The type property MUST contain the string DataIntegrityProof."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18912,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 46,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "The type property MUST contain the string DataIntegrityProof.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.';\n          const credential = credentials.clone('invalidProofType');\n          await verificationFail({\n            credential,\n            verifier,\n            reason: 'Should not verify VC with invalid \"proof.type\"'\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "AaBj6j734Xhrd8pZ6XJAZ",
              "ctx": null,
              "_testId": "urn:uuid:ae3a428f-cd8d-4071-a66b-790845686cd5",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The type property MUST contain the string DataIntegrityProof."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20609,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 89,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The type property MUST contain the string DataIntegrityProof.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.';\n          const credential = credentials.clone('invalidProofType');\n          await verificationFail({\n            credential,\n            verifier,\n            reason: 'Should not verify VC with invalid \"proof.type\"'\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "GR-gSiE-yu7q5QSTZ-vf1",
              "ctx": null,
              "_testId": "urn:uuid:fd7a90dd-b9f4-4c3b-b859-eca6d4ac351b",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The type property MUST contain the string DataIntegrityProof."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 22688,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 20,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The type property MUST contain the string DataIntegrityProof.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.';\n          const credential = credentials.clone('invalidProofType');\n          await verificationFail({\n            credential,\n            verifier,\n            reason: 'Should not verify VC with invalid \"proof.type\"'\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "axNKa1xcoGlQzOQTJcOzF",
              "ctx": null,
              "_testId": "urn:uuid:594a0342-b955-4787-b60f-2d9f73a4a682",
              "cell": {
                "columnId": "Netis",
                "rowId": "The type property MUST contain the string DataIntegrityProof."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 31892,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 162,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The type property MUST contain the string DataIntegrityProof.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.';\n          const credential = credentials.clone('invalidProofType');\n          await verificationFail({\n            credential,\n            verifier,\n            reason: 'Should not verify VC with invalid \"proof.type\"'\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "7HtVI6O_1Gd2wEyGqdagm",
              "ctx": null,
              "_testId": "urn:uuid:708dfe82-0d2f-42b2-9ee9-61e8b5508483",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "The type property MUST contain the string DataIntegrityProof."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 35301,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 142,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The type property MUST contain the string DataIntegrityProof.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.';\n          const credential = credentials.clone('invalidProofType');\n          await verificationFail({\n            credential,\n            verifier,\n            reason: 'Should not verify VC with invalid \"proof.type\"'\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "YDUokIHMIbQFTHZgMFsnx",
              "ctx": null,
              "_testId": "urn:uuid:e1003b23-c313-49ee-8b89-3d8ee95b78dd",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The type property MUST contain the string DataIntegrityProof."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 37734,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 107,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The type property MUST contain the string DataIntegrityProof.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.';\n          const credential = credentials.clone('invalidProofType');\n          await verificationFail({\n            credential,\n            verifier,\n            reason: 'Should not verify VC with invalid \"proof.type\"'\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "V_bOytb15rSWxo4duA0Vu",
              "ctx": null,
              "_testId": "urn:uuid:d2660f48-ba23-46a4-be34-07541e740683",
              "cell": {
                "columnId": "Trential",
                "rowId": "The type property MUST contain the string DataIntegrityProof."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 45450,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 257,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The type property MUST contain the string DataIntegrityProof.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.';\n          const credential = credentials.clone('invalidProofType');\n          await verificationFail({\n            credential,\n            verifier,\n            reason: 'Should not verify VC with invalid \"proof.type\"'\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "0ctWYnuH-3ybgeFapgf9R",
              "ctx": null,
              "_testId": "urn:uuid:82dddded-f1f4-47d4-970f-a4ae751c80fe",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "The type property MUST contain the string DataIntegrityProof."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 61952,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 98,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Should not verify VC with invalid \"proof.type\": expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 26 Jan 2025 05:06:28 GMT', 'content-type': 'text/html; charset=utf-8', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'cache-control': 'no-cache,no-store', expires: '-1', pragma: 'no-cache', 'x-envoy-upstream-service-time': '8', 'cf-cache-status': 'DYNAMIC', 'report-to': '{\"endpoints\":[{\"url\":\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=gO%2FZ3tr9KR6cD8HpBcrfcRI27thHO5zWuQkBuq%2FulGNEdXUunjPFVfgykwOFme%2BMueu1B1lSLO%2F6tM1XzqyNFxlPKu%2BlVuIGod2814fA7prJOBKTn6rVjr%2B%2FNmPxxJWLk%2FktvKhVeHNHMn1a9%2FVS\"}],\"group\":\"cf-nel\",\"max_age\":604800}', nel: '{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}', server: 'cloudflare', 'cf-ray': '907df95058967c50-LAX', 'content-encoding': 'br', 'server-timing': 'cfL4;desc=\"?proto=TCP&rtt=8720&min_rtt=8127&rtt_var=1485&sent=19&recv=14&lost=0&retrans=0&sent_bytes=13842&recv_bytes=5211&delivery_rate=685714&cwnd=252&unsent_bytes=0&cid=2e6e38ba2067fca2&ts=681&x=0\"', Authorization: 'sanitized to prevent exposure of secrets' }, body: null, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Should not verify VC with invalid \"proof.type\": expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 26 Jan 2025 05:06:28 GMT', 'content-type': 'text/html; charset=utf-8', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'cache-control': 'no-cache,no-store', expires: '-1', pragma: 'no-cache', 'x-envoy-upstream-service-time': '8', 'cf-cache-status': 'DYNAMIC', 'report-to': '{\"endpoints\":[{\"url\":\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=gO%2FZ3tr9KR6cD8HpBcrfcRI27thHO5zWuQkBuq%2FulGNEdXUunjPFVfgykwOFme%2BMueu1B1lSLO%2F6tM1XzqyNFxlPKu%2BlVuIGod2814fA7prJOBKTn6rVjr%2B%2FNmPxxJWLk%2FktvKhVeHNHMn1a9%2FVS\"}],\"group\":\"cf-nel\",\"max_age\":604800}', nel: '{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}', server: 'cloudflare', 'cf-ray': '907df95058967c50-LAX', 'content-encoding': 'br', 'server-timing': 'cfL4;desc=\"?proto=TCP&rtt=8720&min_rtt=8127&rtt_var=1485&sent=19&recv=14&lost=0&retrans=0&sent_bytes=13842&recv_bytes=5211&delivery_rate=685714&cwnd=252&unsent_bytes=0&cid=2e6e38ba2067fca2&ts=681&x=0\"', Authorization: 'sanitized to prevent exposure of secrets' }, body: null, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationFail (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:83:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/suites/verify.js:113:11)"
              }
            },
            {
              "type": "test",
              "title": "The type property MUST contain the string DataIntegrityProof.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.';\n          const credential = credentials.clone('invalidProofType');\n          await verificationFail({\n            credential,\n            verifier,\n            reason: 'Should not verify VC with invalid \"proof.type\"'\n          });\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "QDCxWQdkgzmaMA2bzyUTX",
              "ctx": null,
              "_testId": "urn:uuid:c19965c3-7f77-4a91-a506-64396af20062",
              "cell": {
                "columnId": "bovine",
                "rowId": "The type property MUST contain the string DataIntegrityProof."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 65410,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 150,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
          "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
          "cells": [
            {
              "type": "test",
              "title": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      // NOTE: expectedProofPurpose should be specified by verifiers internally\n      // it is very unlikely to be invalidProofPurpose\n      await verificationFail({\n        credential: credentials.clone('invalidProofPurpose'),\n        verifier,\n        reason: 'Verifier should reject VC with invalid proof purpose.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "CEAfWLPcxsKJNAj2STIIb",
              "ctx": null,
              "_testId": "urn:uuid:f055206e-8b76-4590-bc23-919cf13ffe83",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 17655,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 100,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      // NOTE: expectedProofPurpose should be specified by verifiers internally\n      // it is very unlikely to be invalidProofPurpose\n      await verificationFail({\n        credential: credentials.clone('invalidProofPurpose'),\n        verifier,\n        reason: 'Verifier should reject VC with invalid proof purpose.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "CtFlPjii4dCwlNLWP7nHR",
              "ctx": null,
              "_testId": "urn:uuid:006c6c30-5689-404f-ba2e-074b3af28c5b",
              "cell": {
                "columnId": "Aviary Tech",
                "rowId": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18958,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 48,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      // NOTE: expectedProofPurpose should be specified by verifiers internally\n      // it is very unlikely to be invalidProofPurpose\n      await verificationFail({\n        credential: credentials.clone('invalidProofPurpose'),\n        verifier,\n        reason: 'Verifier should reject VC with invalid proof purpose.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "AaBj6j734Xhrd8pZ6XJAZ",
              "ctx": null,
              "_testId": "urn:uuid:970fd533-969f-485d-bc47-82faf9e9094f",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20698,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 86,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      // NOTE: expectedProofPurpose should be specified by verifiers internally\n      // it is very unlikely to be invalidProofPurpose\n      await verificationFail({\n        credential: credentials.clone('invalidProofPurpose'),\n        verifier,\n        reason: 'Verifier should reject VC with invalid proof purpose.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "GR-gSiE-yu7q5QSTZ-vf1",
              "ctx": null,
              "_testId": "urn:uuid:61d9a595-bc1b-47bb-86d8-669aafcf6607",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 22707,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 596,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      // NOTE: expectedProofPurpose should be specified by verifiers internally\n      // it is very unlikely to be invalidProofPurpose\n      await verificationFail({\n        credential: credentials.clone('invalidProofPurpose'),\n        verifier,\n        reason: 'Verifier should reject VC with invalid proof purpose.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "axNKa1xcoGlQzOQTJcOzF",
              "ctx": null,
              "_testId": "urn:uuid:85a66506-30b8-416e-95f3-b78b63567ff2",
              "cell": {
                "columnId": "Netis",
                "rowId": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 32054,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 164,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      // NOTE: expectedProofPurpose should be specified by verifiers internally\n      // it is very unlikely to be invalidProofPurpose\n      await verificationFail({\n        credential: credentials.clone('invalidProofPurpose'),\n        verifier,\n        reason: 'Verifier should reject VC with invalid proof purpose.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "7HtVI6O_1Gd2wEyGqdagm",
              "ctx": null,
              "_testId": "urn:uuid:43a0f35e-981a-4ce9-9997-a3bdcfa24af5",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 35443,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 142,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      // NOTE: expectedProofPurpose should be specified by verifiers internally\n      // it is very unlikely to be invalidProofPurpose\n      await verificationFail({\n        credential: credentials.clone('invalidProofPurpose'),\n        verifier,\n        reason: 'Verifier should reject VC with invalid proof purpose.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "YDUokIHMIbQFTHZgMFsnx",
              "ctx": null,
              "_testId": "urn:uuid:ca561527-7893-45e0-8045-c0d879cdc36c",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 37841,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 96,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      // NOTE: expectedProofPurpose should be specified by verifiers internally\n      // it is very unlikely to be invalidProofPurpose\n      await verificationFail({\n        credential: credentials.clone('invalidProofPurpose'),\n        verifier,\n        reason: 'Verifier should reject VC with invalid proof purpose.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "V_bOytb15rSWxo4duA0Vu",
              "ctx": null,
              "_testId": "urn:uuid:b4c82b48-e235-425b-aba8-65066b5413eb",
              "cell": {
                "columnId": "Trential",
                "rowId": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 45707,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 247,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      // NOTE: expectedProofPurpose should be specified by verifiers internally\n      // it is very unlikely to be invalidProofPurpose\n      await verificationFail({\n        credential: credentials.clone('invalidProofPurpose'),\n        verifier,\n        reason: 'Verifier should reject VC with invalid proof purpose.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "0ctWYnuH-3ybgeFapgf9R",
              "ctx": null,
              "_testId": "urn:uuid:181eda8b-f288-436a-83f7-5d3c7480d282",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 62051,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 96,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Verifier should reject VC with invalid proof purpose.: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 26 Jan 2025 05:06:28 GMT', 'content-type': 'text/html; charset=utf-8', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'cache-control': 'no-cache,no-store', expires: '-1', pragma: 'no-cache', 'x-envoy-upstream-service-time': '8', 'cf-cache-status': 'DYNAMIC', 'report-to': '{\"endpoints\":[{\"url\":\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=00tIB87J%2FQ63a%2FAucBgctdPQCw0hAOjUEgcojBHc6CpSQjlJR41GQrzmbg%2BmviC3Q6Q4BztSz%2BwmMmNQO9KlyNHCP0sxnU62ykNxHR3Jti9cSGaXw3enpm%2FtWYELFHUdi0Pv8OhFedUKtuJ5oBEA\"}],\"group\":\"cf-nel\",\"max_age\":604800}', nel: '{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}', server: 'cloudflare', 'cf-ray': '907df950e96e7c50-LAX', 'content-encoding': 'br', 'server-timing': 'cfL4;desc=\"?proto=TCP&rtt=8674&min_rtt=8127&rtt_var=1205&sent=23&recv=16&lost=0&retrans=0&sent_bytes=16582&recv_bytes=6323&delivery_rate=685714&cwnd=252&unsent_bytes=0&cid=2e6e38ba2067fca2&ts=778&x=0\"', Authorization: 'sanitized to prevent exposure of secrets' }, body: null, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Verifier should reject VC with invalid proof purpose.: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 26 Jan 2025 05:06:28 GMT', 'content-type': 'text/html; charset=utf-8', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'cache-control': 'no-cache,no-store', expires: '-1', pragma: 'no-cache', 'x-envoy-upstream-service-time': '8', 'cf-cache-status': 'DYNAMIC', 'report-to': '{\"endpoints\":[{\"url\":\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=00tIB87J%2FQ63a%2FAucBgctdPQCw0hAOjUEgcojBHc6CpSQjlJR41GQrzmbg%2BmviC3Q6Q4BztSz%2BwmMmNQO9KlyNHCP0sxnU62ykNxHR3Jti9cSGaXw3enpm%2FtWYELFHUdi0Pv8OhFedUKtuJ5oBEA\"}],\"group\":\"cf-nel\",\"max_age\":604800}', nel: '{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}', server: 'cloudflare', 'cf-ray': '907df950e96e7c50-LAX', 'content-encoding': 'br', 'server-timing': 'cfL4;desc=\"?proto=TCP&rtt=8674&min_rtt=8127&rtt_var=1205&sent=23&recv=16&lost=0&retrans=0&sent_bytes=16582&recv_bytes=6323&delivery_rate=685714&cwnd=252&unsent_bytes=0&cid=2e6e38ba2067fca2&ts=778&x=0\"', Authorization: 'sanitized to prevent exposure of secrets' }, body: null, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationFail (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:83:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/suites/verify.js:139:7)"
              }
            },
            {
              "type": "test",
              "title": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      // NOTE: expectedProofPurpose should be specified by verifiers internally\n      // it is very unlikely to be invalidProofPurpose\n      await verificationFail({\n        credential: credentials.clone('invalidProofPurpose'),\n        verifier,\n        reason: 'Verifier should reject VC with invalid proof purpose.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "QDCxWQdkgzmaMA2bzyUTX",
              "ctx": null,
              "_testId": "urn:uuid:1e740337-aab6-4026-94f8-29d8accb8cd3",
              "cell": {
                "columnId": "bovine",
                "rowId": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 65561,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 150,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
          "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.",
          "cells": [
            {
              "type": "test",
              "title": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.';\n        await proofValueTests;\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "CEAfWLPcxsKJNAj2STIIb",
              "ctx": null,
              "_testId": "urn:uuid:5b5941b3-6a74-438e-80c6-c9f6fa01ac3e",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "The proofValue property MUST be used, as specified in 2.1 Proofs."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 17755,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.';\n        await proofValueTests;\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "CtFlPjii4dCwlNLWP7nHR",
              "ctx": null,
              "_testId": "urn:uuid:61515a58-dd3f-4e67-97bd-e0aa704ba223",
              "cell": {
                "columnId": "Aviary Tech",
                "rowId": "The proofValue property MUST be used, as specified in 2.1 Proofs."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19006,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.';\n        await proofValueTests;\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "AaBj6j734Xhrd8pZ6XJAZ",
              "ctx": null,
              "_testId": "urn:uuid:af7b4028-d8ba-4268-b9b3-cba0824b31c5",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The proofValue property MUST be used, as specified in 2.1 Proofs."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20784,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.';\n        await proofValueTests;\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "GR-gSiE-yu7q5QSTZ-vf1",
              "ctx": null,
              "_testId": "urn:uuid:12c8e401-2011-4728-9726-e6f92005ed2b",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The proofValue property MUST be used, as specified in 2.1 Proofs."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 23303,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.';\n        await proofValueTests;\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "axNKa1xcoGlQzOQTJcOzF",
              "ctx": null,
              "_testId": "urn:uuid:df5ffc74-758d-4438-9826-f0fd3ee9b112",
              "cell": {
                "columnId": "Netis",
                "rowId": "The proofValue property MUST be used, as specified in 2.1 Proofs."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 32218,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.';\n        await proofValueTests;\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "7HtVI6O_1Gd2wEyGqdagm",
              "ctx": null,
              "_testId": "urn:uuid:9ccfa290-3253-4d41-a6b7-44365c23caab",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "The proofValue property MUST be used, as specified in 2.1 Proofs."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 35586,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.';\n        await proofValueTests;\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "YDUokIHMIbQFTHZgMFsnx",
              "ctx": null,
              "_testId": "urn:uuid:e1a0a3bc-14a9-47c3-b3b0-2dd0d0bea268",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The proofValue property MUST be used, as specified in 2.1 Proofs."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 37938,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.';\n        await proofValueTests;\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "V_bOytb15rSWxo4duA0Vu",
              "ctx": null,
              "_testId": "urn:uuid:4a592f67-3386-421c-90dc-fb94186ec974",
              "cell": {
                "columnId": "Trential",
                "rowId": "The proofValue property MUST be used, as specified in 2.1 Proofs."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 45955,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.';\n        await proofValueTests;\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "0ctWYnuH-3ybgeFapgf9R",
              "ctx": null,
              "_testId": "urn:uuid:a3bf7f27-df3d-40c3-b177-a88c0ee896d2",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "The proofValue property MUST be used, as specified in 2.1 Proofs."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 62149,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "MUST not verify VC with no \"proofValue\".: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 26 Jan 2025 05:06:28 GMT', 'content-type': 'text/html; charset=utf-8', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'cache-control': 'no-cache,no-store', expires: '-1', pragma: 'no-cache', 'x-envoy-upstream-service-time': '34', 'cf-cache-status': 'DYNAMIC', 'report-to': '{\"endpoints\":[{\"url\":\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=xWuBZ84BpWbu8pfcO6gsfkFjP2wuqLnLKzFaAtEyziwcdTlRtQ8V77lyYl6kJX9rGJhRfiZYbC5axuDH81LHgjwe5UWUqs4%2F6WptN3p9BKfsJ7eOcpLpcPED1jGVge9wtlS0nlUrkuNy4eqPB1WI\"}],\"group\":\"cf-nel\",\"max_age\":604800}', nel: '{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}', server: 'cloudflare', 'cf-ray': '907df94cbc1a7c50-LAX', 'content-encoding': 'br', 'server-timing': 'cfL4;desc=\"?proto=TCP&rtt=8288&min_rtt=8246&rtt_var=3122&sent=4&recv=5&lost=0&retrans=0&sent_bytes=2442&recv_bytes=1490&delivery_rate=346349&cwnd=246&unsent_bytes=0&cid=2e6e38ba2067fca2&ts=143&x=0\"', Authorization: 'sanitized to prevent exposure of secrets' }, body: null, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: MUST not verify VC with no \"proofValue\".: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 26 Jan 2025 05:06:28 GMT', 'content-type': 'text/html; charset=utf-8', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'cache-control': 'no-cache,no-store', expires: '-1', pragma: 'no-cache', 'x-envoy-upstream-service-time': '34', 'cf-cache-status': 'DYNAMIC', 'report-to': '{\"endpoints\":[{\"url\":\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=xWuBZ84BpWbu8pfcO6gsfkFjP2wuqLnLKzFaAtEyziwcdTlRtQ8V77lyYl6kJX9rGJhRfiZYbC5axuDH81LHgjwe5UWUqs4%2F6WptN3p9BKfsJ7eOcpLpcPED1jGVge9wtlS0nlUrkuNy4eqPB1WI\"}],\"group\":\"cf-nel\",\"max_age\":604800}', nel: '{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}', server: 'cloudflare', 'cf-ray': '907df94cbc1a7c50-LAX', 'content-encoding': 'br', 'server-timing': 'cfL4;desc=\"?proto=TCP&rtt=8288&min_rtt=8246&rtt_var=3122&sent=4&recv=5&lost=0&retrans=0&sent_bytes=2442&recv_bytes=1490&delivery_rate=346349&cwnd=246&unsent_bytes=0&cid=2e6e38ba2067fca2&ts=143&x=0\"', Authorization: 'sanitized to prevent exposure of secrets' }, body: null, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationFail (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:83:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async shouldBeProofValue (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:311:3)"
              }
            },
            {
              "type": "test",
              "title": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.';\n        await proofValueTests;\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "QDCxWQdkgzmaMA2bzyUTX",
              "ctx": null,
              "_testId": "urn:uuid:10e78c96-dfe9-4a80-a83e-fdcc6f6a3a3e",
              "cell": {
                "columnId": "bovine",
                "rowId": "The proofValue property MUST be used, as specified in 2.1 Proofs."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 65711,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification.",
          "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof",
          "cells": [
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof';\n      await proofValueTests;\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "CEAfWLPcxsKJNAj2STIIb",
              "ctx": null,
              "_testId": "urn:uuid:a95eab85-29c6-4c22-8543-c3045d1b24fc",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 17755,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof';\n      await proofValueTests;\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "CtFlPjii4dCwlNLWP7nHR",
              "ctx": null,
              "_testId": "urn:uuid:cbae4dc7-2c7a-4854-aedc-50c5fd7e1fcf",
              "cell": {
                "columnId": "Aviary Tech",
                "rowId": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19006,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof';\n      await proofValueTests;\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "AaBj6j734Xhrd8pZ6XJAZ",
              "ctx": null,
              "_testId": "urn:uuid:3eb07ca5-1130-4a0f-8765-60e0d4247b71",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20785,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof';\n      await proofValueTests;\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "GR-gSiE-yu7q5QSTZ-vf1",
              "ctx": null,
              "_testId": "urn:uuid:65488243-046e-4bf6-86d4-5e54de21cf56",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 23303,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof';\n      await proofValueTests;\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "axNKa1xcoGlQzOQTJcOzF",
              "ctx": null,
              "_testId": "urn:uuid:197a4715-f9cf-45d8-b9e8-d1e25f91494a",
              "cell": {
                "columnId": "Netis",
                "rowId": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 32219,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof';\n      await proofValueTests;\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "7HtVI6O_1Gd2wEyGqdagm",
              "ctx": null,
              "_testId": "urn:uuid:03dc43cd-99a8-4738-9cd4-b21915959d8e",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 35586,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof';\n      await proofValueTests;\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "YDUokIHMIbQFTHZgMFsnx",
              "ctx": null,
              "_testId": "urn:uuid:5d7bfb68-e262-417d-b802-987d1053b9ac",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 37938,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof';\n      await proofValueTests;\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "V_bOytb15rSWxo4duA0Vu",
              "ctx": null,
              "_testId": "urn:uuid:6103bd84-fd29-4c0b-a788-6f41ee4a286a",
              "cell": {
                "columnId": "Trential",
                "rowId": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 45955,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof';\n      await proofValueTests;\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "0ctWYnuH-3ybgeFapgf9R",
              "ctx": null,
              "_testId": "urn:uuid:3df6006f-faa9-4a97-97d2-3bac0d4e06da",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 62149,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "MUST not verify VC with no \"proofValue\".: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 26 Jan 2025 05:06:28 GMT', 'content-type': 'text/html; charset=utf-8', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'cache-control': 'no-cache,no-store', expires: '-1', pragma: 'no-cache', 'x-envoy-upstream-service-time': '34', 'cf-cache-status': 'DYNAMIC', 'report-to': '{\"endpoints\":[{\"url\":\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=xWuBZ84BpWbu8pfcO6gsfkFjP2wuqLnLKzFaAtEyziwcdTlRtQ8V77lyYl6kJX9rGJhRfiZYbC5axuDH81LHgjwe5UWUqs4%2F6WptN3p9BKfsJ7eOcpLpcPED1jGVge9wtlS0nlUrkuNy4eqPB1WI\"}],\"group\":\"cf-nel\",\"max_age\":604800}', nel: '{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}', server: 'cloudflare', 'cf-ray': '907df94cbc1a7c50-LAX', 'content-encoding': 'br', 'server-timing': 'cfL4;desc=\"?proto=TCP&rtt=8288&min_rtt=8246&rtt_var=3122&sent=4&recv=5&lost=0&retrans=0&sent_bytes=2442&recv_bytes=1490&delivery_rate=346349&cwnd=246&unsent_bytes=0&cid=2e6e38ba2067fca2&ts=143&x=0\"', Authorization: 'sanitized to prevent exposure of secrets' }, body: null, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: MUST not verify VC with no \"proofValue\".: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 26 Jan 2025 05:06:28 GMT', 'content-type': 'text/html; charset=utf-8', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'cache-control': 'no-cache,no-store', expires: '-1', pragma: 'no-cache', 'x-envoy-upstream-service-time': '34', 'cf-cache-status': 'DYNAMIC', 'report-to': '{\"endpoints\":[{\"url\":\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=xWuBZ84BpWbu8pfcO6gsfkFjP2wuqLnLKzFaAtEyziwcdTlRtQ8V77lyYl6kJX9rGJhRfiZYbC5axuDH81LHgjwe5UWUqs4%2F6WptN3p9BKfsJ7eOcpLpcPED1jGVge9wtlS0nlUrkuNy4eqPB1WI\"}],\"group\":\"cf-nel\",\"max_age\":604800}', nel: '{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}', server: 'cloudflare', 'cf-ray': '907df94cbc1a7c50-LAX', 'content-encoding': 'br', 'server-timing': 'cfL4;desc=\"?proto=TCP&rtt=8288&min_rtt=8246&rtt_var=3122&sent=4&recv=5&lost=0&retrans=0&sent_bytes=2442&recv_bytes=1490&delivery_rate=346349&cwnd=246&unsent_bytes=0&cid=2e6e38ba2067fca2&ts=143&x=0\"', Authorization: 'sanitized to prevent exposure of secrets' }, body: null, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationFail (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:83:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async shouldBeProofValue (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:311:3)"
              }
            },
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof';\n      await proofValueTests;\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "QDCxWQdkgzmaMA2bzyUTX",
              "ctx": null,
              "_testId": "urn:uuid:6f906c6d-4d85-461d-b587-bb5d2571112e",
              "cell": {
                "columnId": "bovine",
                "rowId": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 65711,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
          "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
          "cells": [
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      await verificationFail({\n        credential: credentials.clone('undefinedTerm'),\n        verifier,\n        reason: 'Should fail to verify VC when data is dropped by JSON-LD'\n      });\n      const undefinedTerm = credentials.clone('issuedVc');\n      undefinedTerm.credentialSubject.undefinedTerm = 'IfDroppedWillVerify';\n      await verificationFail({\n        credential: undefinedTerm,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined term is added ' +\n          'after issuance.'\n      });\n      const undefinedType = credentials.clone('issuedVc');\n      undefinedType.type.push('UndefinedType');\n      await verificationFail({\n        credential: undefinedType,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined type is added ' +\n          'after issuance.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "CEAfWLPcxsKJNAj2STIIb",
              "ctx": null,
              "_testId": "urn:uuid:55875455-4973-4225-a6f5-c7edc7efd85e",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 17756,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 207,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      await verificationFail({\n        credential: credentials.clone('undefinedTerm'),\n        verifier,\n        reason: 'Should fail to verify VC when data is dropped by JSON-LD'\n      });\n      const undefinedTerm = credentials.clone('issuedVc');\n      undefinedTerm.credentialSubject.undefinedTerm = 'IfDroppedWillVerify';\n      await verificationFail({\n        credential: undefinedTerm,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined term is added ' +\n          'after issuance.'\n      });\n      const undefinedType = credentials.clone('issuedVc');\n      undefinedType.type.push('UndefinedType');\n      await verificationFail({\n        credential: undefinedType,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined type is added ' +\n          'after issuance.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "CtFlPjii4dCwlNLWP7nHR",
              "ctx": null,
              "_testId": "urn:uuid:1ac68407-1ac7-402a-86eb-655a80b3ba4d",
              "cell": {
                "columnId": "Aviary Tech",
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19007,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 138,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      await verificationFail({\n        credential: credentials.clone('undefinedTerm'),\n        verifier,\n        reason: 'Should fail to verify VC when data is dropped by JSON-LD'\n      });\n      const undefinedTerm = credentials.clone('issuedVc');\n      undefinedTerm.credentialSubject.undefinedTerm = 'IfDroppedWillVerify';\n      await verificationFail({\n        credential: undefinedTerm,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined term is added ' +\n          'after issuance.'\n      });\n      const undefinedType = credentials.clone('issuedVc');\n      undefinedType.type.push('UndefinedType');\n      await verificationFail({\n        credential: undefinedType,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined type is added ' +\n          'after issuance.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "AaBj6j734Xhrd8pZ6XJAZ",
              "ctx": null,
              "_testId": "urn:uuid:1c83c2fd-9f19-4fd5-93ed-67aaf7e01b72",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 20785,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 302,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      await verificationFail({\n        credential: credentials.clone('undefinedTerm'),\n        verifier,\n        reason: 'Should fail to verify VC when data is dropped by JSON-LD'\n      });\n      const undefinedTerm = credentials.clone('issuedVc');\n      undefinedTerm.credentialSubject.undefinedTerm = 'IfDroppedWillVerify';\n      await verificationFail({\n        credential: undefinedTerm,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined term is added ' +\n          'after issuance.'\n      });\n      const undefinedType = credentials.clone('issuedVc');\n      undefinedType.type.push('UndefinedType');\n      await verificationFail({\n        credential: undefinedType,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined type is added ' +\n          'after issuance.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "GR-gSiE-yu7q5QSTZ-vf1",
              "ctx": null,
              "_testId": "urn:uuid:5bd5325c-1914-4ed6-801e-4602fd617940",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 23303,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1072,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      await verificationFail({\n        credential: credentials.clone('undefinedTerm'),\n        verifier,\n        reason: 'Should fail to verify VC when data is dropped by JSON-LD'\n      });\n      const undefinedTerm = credentials.clone('issuedVc');\n      undefinedTerm.credentialSubject.undefinedTerm = 'IfDroppedWillVerify';\n      await verificationFail({\n        credential: undefinedTerm,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined term is added ' +\n          'after issuance.'\n      });\n      const undefinedType = credentials.clone('issuedVc');\n      undefinedType.type.push('UndefinedType');\n      await verificationFail({\n        credential: undefinedType,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined type is added ' +\n          'after issuance.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "axNKa1xcoGlQzOQTJcOzF",
              "ctx": null,
              "_testId": "urn:uuid:88243e23-b7ab-424f-aec1-9486be092fb7",
              "cell": {
                "columnId": "Netis",
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 32219,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 514,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      await verificationFail({\n        credential: credentials.clone('undefinedTerm'),\n        verifier,\n        reason: 'Should fail to verify VC when data is dropped by JSON-LD'\n      });\n      const undefinedTerm = credentials.clone('issuedVc');\n      undefinedTerm.credentialSubject.undefinedTerm = 'IfDroppedWillVerify';\n      await verificationFail({\n        credential: undefinedTerm,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined term is added ' +\n          'after issuance.'\n      });\n      const undefinedType = credentials.clone('issuedVc');\n      undefinedType.type.push('UndefinedType');\n      await verificationFail({\n        credential: undefinedType,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined type is added ' +\n          'after issuance.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "7HtVI6O_1Gd2wEyGqdagm",
              "ctx": null,
              "_testId": "urn:uuid:739c2b94-6fab-4749-8ecd-651f897b6ef1",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 35586,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 428,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      await verificationFail({\n        credential: credentials.clone('undefinedTerm'),\n        verifier,\n        reason: 'Should fail to verify VC when data is dropped by JSON-LD'\n      });\n      const undefinedTerm = credentials.clone('issuedVc');\n      undefinedTerm.credentialSubject.undefinedTerm = 'IfDroppedWillVerify';\n      await verificationFail({\n        credential: undefinedTerm,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined term is added ' +\n          'after issuance.'\n      });\n      const undefinedType = credentials.clone('issuedVc');\n      undefinedType.type.push('UndefinedType');\n      await verificationFail({\n        credential: undefinedType,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined type is added ' +\n          'after issuance.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "YDUokIHMIbQFTHZgMFsnx",
              "ctx": null,
              "_testId": "urn:uuid:157cba99-0ff8-414f-aa0d-7fd17f6e075f",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 37938,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 315,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      await verificationFail({\n        credential: credentials.clone('undefinedTerm'),\n        verifier,\n        reason: 'Should fail to verify VC when data is dropped by JSON-LD'\n      });\n      const undefinedTerm = credentials.clone('issuedVc');\n      undefinedTerm.credentialSubject.undefinedTerm = 'IfDroppedWillVerify';\n      await verificationFail({\n        credential: undefinedTerm,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined term is added ' +\n          'after issuance.'\n      });\n      const undefinedType = credentials.clone('issuedVc');\n      undefinedType.type.push('UndefinedType');\n      await verificationFail({\n        credential: undefinedType,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined type is added ' +\n          'after issuance.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "V_bOytb15rSWxo4duA0Vu",
              "ctx": null,
              "_testId": "urn:uuid:67d6a7cf-cb1d-49bc-b038-c15cb28b4ac8",
              "cell": {
                "columnId": "Trential",
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 45955,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 5099,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      await verificationFail({\n        credential: credentials.clone('undefinedTerm'),\n        verifier,\n        reason: 'Should fail to verify VC when data is dropped by JSON-LD'\n      });\n      const undefinedTerm = credentials.clone('issuedVc');\n      undefinedTerm.credentialSubject.undefinedTerm = 'IfDroppedWillVerify';\n      await verificationFail({\n        credential: undefinedTerm,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined term is added ' +\n          'after issuance.'\n      });\n      const undefinedType = credentials.clone('issuedVc');\n      undefinedType.type.push('UndefinedType');\n      await verificationFail({\n        credential: undefinedType,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined type is added ' +\n          'after issuance.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "0ctWYnuH-3ybgeFapgf9R",
              "ctx": null,
              "_testId": "urn:uuid:bbb74559-a109-4c84-8178-a2ff239d2bb2",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 62151,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 109,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Should fail to verify VC when data is dropped by JSON-LD: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 26 Jan 2025 05:06:28 GMT', 'content-type': 'text/html; charset=utf-8', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'cache-control': 'no-cache,no-store', expires: '-1', pragma: 'no-cache', 'x-envoy-upstream-service-time': '8', 'cf-cache-status': 'DYNAMIC', 'report-to': '{\"endpoints\":[{\"url\":\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=hplbTqh%2F3VDZn0fgA7rR0A5MvNSuAmMppKIfy7vtl03gEIPoz6yz5yPTQun6RCcEwEyJid5xR6bOoXiKZpyUwwrV1M6trqsUHibkz%2BM6MPzNxJ0xuwWG%2BHXVF0w0TtF%2FgK6zVCUbZUQUipXJbiYc\"}],\"group\":\"cf-nel\",\"max_age\":604800}', nel: '{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}', server: 'cloudflare', 'cf-ray': '907df9518a9f7c50-LAX', 'content-encoding': 'br', 'server-timing': 'cfL4;desc=\"?proto=TCP&rtt=8640&min_rtt=8127&rtt_var=972&sent=27&recv=18&lost=0&retrans=0&sent_bytes=19314&recv_bytes=7468&delivery_rate=685714&cwnd=252&unsent_bytes=0&cid=2e6e38ba2067fca2&ts=890&x=0\"', Authorization: 'sanitized to prevent exposure of secrets' }, body: null, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Should fail to verify VC when data is dropped by JSON-LD: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 26 Jan 2025 05:06:28 GMT', 'content-type': 'text/html; charset=utf-8', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'cache-control': 'no-cache,no-store', expires: '-1', pragma: 'no-cache', 'x-envoy-upstream-service-time': '8', 'cf-cache-status': 'DYNAMIC', 'report-to': '{\"endpoints\":[{\"url\":\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=hplbTqh%2F3VDZn0fgA7rR0A5MvNSuAmMppKIfy7vtl03gEIPoz6yz5yPTQun6RCcEwEyJid5xR6bOoXiKZpyUwwrV1M6trqsUHibkz%2BM6MPzNxJ0xuwWG%2BHXVF0w0TtF%2FgK6zVCUbZUQUipXJbiYc\"}],\"group\":\"cf-nel\",\"max_age\":604800}', nel: '{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}', server: 'cloudflare', 'cf-ray': '907df9518a9f7c50-LAX', 'content-encoding': 'br', 'server-timing': 'cfL4;desc=\"?proto=TCP&rtt=8640&min_rtt=8127&rtt_var=972&sent=27&recv=18&lost=0&retrans=0&sent_bytes=19314&recv_bytes=7468&delivery_rate=685714&cwnd=252&unsent_bytes=0&cid=2e6e38ba2067fca2&ts=890&x=0\"', Authorization: 'sanitized to prevent exposure of secrets' }, body: null, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationFail (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:83:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/suites/verify.js:165:7)"
              }
            },
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      await verificationFail({\n        credential: credentials.clone('undefinedTerm'),\n        verifier,\n        reason: 'Should fail to verify VC when data is dropped by JSON-LD'\n      });\n      const undefinedTerm = credentials.clone('issuedVc');\n      undefinedTerm.credentialSubject.undefinedTerm = 'IfDroppedWillVerify';\n      await verificationFail({\n        credential: undefinedTerm,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined term is added ' +\n          'after issuance.'\n      });\n      const undefinedType = credentials.clone('issuedVc');\n      undefinedType.type.push('UndefinedType');\n      await verificationFail({\n        credential: undefinedType,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined type is added ' +\n          'after issuance.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "QDCxWQdkgzmaMA2bzyUTX",
              "ctx": null,
              "_testId": "urn:uuid:7b87c8dc-a202-4ce5-a7ef-27ed9ba8e16d",
              "cell": {
                "columnId": "bovine",
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 65711,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 299,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Should fail to verify VC if an undefined term is added after issuance.: expected Response { status: 200, statusText: 'OK', headers: Headers { server: 'nginx/1.18.0 (Ubuntu)', date: 'Sun, 26 Jan 2025 05:06:32 GMT', 'content-type': 'text/html; charset=utf-8', 'content-length': '0', connection: 'keep-alive', Authorization: 'sanitized to prevent exposure of secrets' }, body: null, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Should fail to verify VC if an undefined term is added after issuance.: expected Response { status: 200, statusText: 'OK', headers: Headers { server: 'nginx/1.18.0 (Ubuntu)', date: 'Sun, 26 Jan 2025 05:06:32 GMT', 'content-type': 'text/html; charset=utf-8', 'content-length': '0', connection: 'keep-alive', Authorization: 'sanitized to prevent exposure of secrets' }, body: null, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationFail (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:83:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/suites/verify.js:172:7)"
              }
            }
          ]
        },
        {
          "id": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
          "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
          "cells": [
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n      const credential = credentials.clone('invalidCryptosuite');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "CEAfWLPcxsKJNAj2STIIb",
              "ctx": null,
              "_testId": "urn:uuid:cf06dbbf-29da-483e-9e53-adae6db5f097",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 17963,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 92,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n      const credential = credentials.clone('invalidCryptosuite');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "CtFlPjii4dCwlNLWP7nHR",
              "ctx": null,
              "_testId": "urn:uuid:24220f29-9e93-4b08-85e4-2b0a427da450",
              "cell": {
                "columnId": "Aviary Tech",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19145,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 44,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n      const credential = credentials.clone('invalidCryptosuite');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "AaBj6j734Xhrd8pZ6XJAZ",
              "ctx": null,
              "_testId": "urn:uuid:d585e1fe-6637-4bfe-9927-e97e1c2cb417",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 21087,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 104,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n      const credential = credentials.clone('invalidCryptosuite');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "GR-gSiE-yu7q5QSTZ-vf1",
              "ctx": null,
              "_testId": "urn:uuid:f44e70ee-e9e9-4166-baa9-1986e040b0c0",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 24375,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 20,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n      const credential = credentials.clone('invalidCryptosuite');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "axNKa1xcoGlQzOQTJcOzF",
              "ctx": null,
              "_testId": "urn:uuid:d403385a-fea7-44b1-ba87-4a304157a47b",
              "cell": {
                "columnId": "Netis",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 32733,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 166,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n      const credential = credentials.clone('invalidCryptosuite');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "7HtVI6O_1Gd2wEyGqdagm",
              "ctx": null,
              "_testId": "urn:uuid:d184b6c5-129a-4e34-bc5c-d1869723d9bd",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 36014,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 144,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n      const credential = credentials.clone('invalidCryptosuite');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "YDUokIHMIbQFTHZgMFsnx",
              "ctx": null,
              "_testId": "urn:uuid:945e5692-9402-418f-b33c-729089f05424",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 38253,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 100,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n      const credential = credentials.clone('invalidCryptosuite');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "V_bOytb15rSWxo4duA0Vu",
              "ctx": null,
              "_testId": "urn:uuid:b43bc81c-6364-4a41-9b5e-acb95477c5bc",
              "cell": {
                "columnId": "Trential",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 51054,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 247,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n      const credential = credentials.clone('invalidCryptosuite');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "0ctWYnuH-3ybgeFapgf9R",
              "ctx": null,
              "_testId": "urn:uuid:29120a48-491a-4b6c-b50f-b995eee7bfe3",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 62261,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 98,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no result from verifier.: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 26 Jan 2025 05:06:28 GMT', 'content-type': 'text/html; charset=utf-8', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'cache-control': 'no-cache,no-store', expires: '-1', pragma: 'no-cache', 'x-envoy-upstream-service-time': '7', 'cf-cache-status': 'DYNAMIC', 'report-to': '{\"endpoints\":[{\"url\":\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=c3zYydd3TrgSGqhNpO%2FxECabne9IpPMZeCXh4Q%2BRXpmBwGjM%2FdnYe6GnwK16dswCUdRLx8jSRf6RhHZymMKsQYLSTRlbHWiVFOxN3fsRVfPrG0bRWDCRXulqWt8kOldxv28bNQCJA%2FCrcMNsr0Xj\"}],\"group\":\"cf-nel\",\"max_age\":604800}', nel: '{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}', server: 'cloudflare', 'cf-ray': '907df9523c157c50-LAX', 'content-encoding': 'br', 'server-timing': 'cfL4;desc=\"?proto=TCP&rtt=8974&min_rtt=8127&rtt_var=1367&sent=31&recv=20&lost=0&retrans=0&sent_bytes=22043&recv_bytes=8584&delivery_rate=685714&cwnd=252&unsent_bytes=0&cid=2e6e38ba2067fca2&ts=990&x=0\"', Authorization: 'sanitized to prevent exposure of secrets' }, body: null, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no result from verifier.: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 26 Jan 2025 05:06:28 GMT', 'content-type': 'text/html; charset=utf-8', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'cache-control': 'no-cache,no-store', expires: '-1', pragma: 'no-cache', 'x-envoy-upstream-service-time': '7', 'cf-cache-status': 'DYNAMIC', 'report-to': '{\"endpoints\":[{\"url\":\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=c3zYydd3TrgSGqhNpO%2FxECabne9IpPMZeCXh4Q%2BRXpmBwGjM%2FdnYe6GnwK16dswCUdRLx8jSRf6RhHZymMKsQYLSTRlbHWiVFOxN3fsRVfPrG0bRWDCRXulqWt8kOldxv28bNQCJA%2FCrcMNsr0Xj\"}],\"group\":\"cf-nel\",\"max_age\":604800}', nel: '{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}', server: 'cloudflare', 'cf-ray': '907df9523c157c50-LAX', 'content-encoding': 'br', 'server-timing': 'cfL4;desc=\"?proto=TCP&rtt=8974&min_rtt=8127&rtt_var=1367&sent=31&recv=20&lost=0&retrans=0&sent_bytes=22043&recv_bytes=8584&delivery_rate=685714&cwnd=252&unsent_bytes=0&cid=2e6e38ba2067fca2&ts=990&x=0\"', Authorization: 'sanitized to prevent exposure of secrets' }, body: null, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationFail (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:83:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/suites/verify.js:194:7)"
              }
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n      const credential = credentials.clone('invalidCryptosuite');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "QDCxWQdkgzmaMA2bzyUTX",
              "ctx": null,
              "_testId": "urn:uuid:c4218533-cebe-4e01-b922-980ee6d99144",
              "cell": {
                "columnId": "bovine",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 66011,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 144,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "An OPTIONAL string value (proof.previousProof) or unordered list of string values. Each value identifies another data integrity proof that MUST verify before the current proof is processed.",
          "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=An%20OPTIONAL%20string%20value%20or%20unordered%20list%20of%20string%20values.%20Each%20value%20identifies%20another%20data%20integrity%20proof%20that%20MUST%20verify%20before%20the%20current%20proof%20is%20processed",
          "cells": [
            {
              "type": "test",
              "title": "An OPTIONAL string value (proof.previousProof) or unordered list of string values. Each value identifies another data integrity proof that MUST verify before the current proof is processed.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=An%20OPTIONAL%20string%20value%20or%20unordered%20list%20of%20string%20values.%20Each%20value%20identifies%20another%20data%20integrity%20proof%20that%20MUST%20verify%20before%20the%20current%20proof%20is%20processed';\n        await verificationSuccess({\n          credential: credentials.clone('previousProofString'),\n          verifier,\n          reason: 'Should verify VC with a string \"proof.previousProof\".'\n        });\n        await verificationSuccess({\n          credential: credentials.clone('previousProofArray'),\n          verifier,\n          reason: 'Should verify VC with an Array \"proof.previousProof\".'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "CEAfWLPcxsKJNAj2STIIb",
              "ctx": null,
              "_testId": "urn:uuid:d0cc044a-ce28-45a8-a006-30d5763a98d9",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "An OPTIONAL string value (proof.previousProof) or unordered list of string values. Each value identifies another data integrity proof that MUST verify before the current proof is processed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=An%20OPTIONAL%20string%20value%20or%20unordered%20list%20of%20string%20values.%20Each%20value%20identifies%20another%20data%20integrity%20proof%20that%20MUST%20verify%20before%20the%20current%20proof%20is%20processed",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18056,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 100,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Should verify VC with a string \"proof.previousProof\".: expected HTTPError: A non-empty JSON Pointer must … { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",\"https://w3id.org/security/data-integrity/v2\",{\"@context\":{\"AlumniCredential\":\"https://www.example.org/AlumniCredential\",\"alumniOf\":\"https://www.example.org/alumniOf\",\"description\":\"https://schema.org/description\",\"name\":\"https://schema.org/name\"}}],\"id\":\"urn:uuid:58172aac-d8ba-11ed-83dd-0b3aef56cc33\",\"type\":[\"VerifiableCredential\",\"AlumniCredential\"],\"name\":\"Alumni Credential\",\"description\":\"A minimum viable example of a VC 1.1 Alumni Credential.\",\"issuer\":\"did:key:z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E\",\"issuanceDate\":\"2023-01-01T00:00:00Z\",\"credentialSubject\":{\"id\":\"did:example:abcdefgh\",\"alumniOf\":\"The School of Examples\"},\"proof\":[{\"type\":\"DataIntegrityProof\",\"id\":\"urn:uuid:26329423-bec9-4b2e-88cb-a7c7d9dc4544\",\"cryptosuite\":\"eddsa-rdfc-2022\",\"created\":\"2023-02-26T22:06:38Z\",\"verificationMethod\":\"did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7#z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z5gL4Hy8N4B6zr9mQAGqpsry1iTdxEAp4zjqPNQv7iTvgdkMcHKnMALvPwU3YAKZhYn3k3Jmut2TAMxSaHaggFtf4\"},{\"type\":\"DataIntegrityProof\",\"cryptosuite\":\"eddsa-rdfc-2022\",\"created\":\"2023-02-26T22:16:38Z\",\"verificationMethod\":\"did:key:z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E#z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E\",\"proofPurpose\":\"assertionMethod\",\"previousProof\":\"urn:uuid:26329423-bec9-4b2e-88cb-a7c7d9dc4544\",\"proofValue\":\"z2ENoYDUK8cMMJMvwRGyHVX23pPeHaZfCgpbDFs15FXGaeFseeqzZf5nWXF14JPoBcqdr39vVPgrAUbWT2VYYacrG\"}]},\"options\":{}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          "https://w3id.org/security/data-integrity/v2",
                          {
                            "@context": {
                              "AlumniCredential": "https://www.example.org/AlumniCredential",
                              "alumniOf": "https://www.example.org/alumniOf",
                              "description": "https://schema.org/description",
                              "name": "https://schema.org/name"
                            }
                          }
                        ],
                        "id": "urn:uuid:58172aac-d8ba-11ed-83dd-0b3aef56cc33",
                        "type": [
                          "VerifiableCredential",
                          "AlumniCredential"
                        ],
                        "name": "Alumni Credential",
                        "description": "A minimum viable example of a VC 1.1 Alumni Credential.",
                        "issuer": "did:key:z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E",
                        "issuanceDate": "2023-01-01T00:00:00Z",
                        "credentialSubject": {
                          "id": "did:example:abcdefgh",
                          "alumniOf": "The School of Examples"
                        },
                        "proof": [
                          {
                            "type": "DataIntegrityProof",
                            "id": "urn:uuid:26329423-bec9-4b2e-88cb-a7c7d9dc4544",
                            "cryptosuite": "eddsa-rdfc-2022",
                            "created": "2023-02-26T22:06:38Z",
                            "verificationMethod": "did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7#z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7",
                            "proofPurpose": "assertionMethod",
                            "proofValue": "z5gL4Hy8N4B6zr9mQAGqpsry1iTdxEAp4zjqPNQv7iTvgdkMcHKnMALvPwU3YAKZhYn3k3Jmut2TAMxSaHaggFtf4"
                          },
                          {
                            "type": "DataIntegrityProof",
                            "cryptosuite": "eddsa-rdfc-2022",
                            "created": "2023-02-26T22:16:38Z",
                            "verificationMethod": "did:key:z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E#z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E",
                            "proofPurpose": "assertionMethod",
                            "previousProof": "urn:uuid:26329423-bec9-4b2e-88cb-a7c7d9dc4544",
                            "proofValue": "z2ENoYDUK8cMMJMvwRGyHVX23pPeHaZfCgpbDFs15FXGaeFseeqzZf5nWXF14JPoBcqdr39vVPgrAUbWT2VYYacrG"
                          }
                        ]
                      },
                      "options": {}
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://us-central1-api-catalog.cloudfunctions.net/vc-api-verify",
                  "status": 400,
                  "data": {
                    "message": "A non-empty JSON Pointer must begin with a '/'"
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Should verify VC with a string \"proof.previousProof\".: expected HTTPError: A non-empty JSON Pointer must … { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:50:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/suites/verify.js:271:9)"
              }
            },
            {
              "type": "test",
              "title": "An OPTIONAL string value (proof.previousProof) or unordered list of string values. Each value identifies another data integrity proof that MUST verify before the current proof is processed.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=An%20OPTIONAL%20string%20value%20or%20unordered%20list%20of%20string%20values.%20Each%20value%20identifies%20another%20data%20integrity%20proof%20that%20MUST%20verify%20before%20the%20current%20proof%20is%20processed';\n        await verificationSuccess({\n          credential: credentials.clone('previousProofString'),\n          verifier,\n          reason: 'Should verify VC with a string \"proof.previousProof\".'\n        });\n        await verificationSuccess({\n          credential: credentials.clone('previousProofArray'),\n          verifier,\n          reason: 'Should verify VC with an Array \"proof.previousProof\".'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "CtFlPjii4dCwlNLWP7nHR",
              "ctx": null,
              "_testId": "urn:uuid:cd63b8e1-92ae-4fa5-af5a-5c1511821706",
              "cell": {
                "columnId": "Aviary Tech",
                "rowId": "An OPTIONAL string value (proof.previousProof) or unordered list of string values. Each value identifies another data integrity proof that MUST verify before the current proof is processed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=An%20OPTIONAL%20string%20value%20or%20unordered%20list%20of%20string%20values.%20Each%20value%20identifies%20another%20data%20integrity%20proof%20that%20MUST%20verify%20before%20the%20current%20proof%20is%20processed",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19189,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 146,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Should verify VC with an Array \"proof.previousProof\".: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",\"https://w3id.org/security/data-integrity/v2\",{\"@context\":{\"AlumniCredential\":\"https://www.example.org/AlumniCredential\",\"alumniOf\":\"https://www.example.org/alumniOf\",\"description\":\"https://schema.org/description\",\"name\":\"https://schema.org/name\"}}],\"id\":\"urn:uuid:58172aac-d8ba-11ed-83dd-0b3aef56cc33\",\"type\":[\"VerifiableCredential\",\"AlumniCredential\"],\"name\":\"Alumni Credential\",\"description\":\"A minimum viable example of a VC 1.1 Alumni Credential.\",\"issuer\":\"did:key:z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E\",\"issuanceDate\":\"2023-01-01T00:00:00Z\",\"credentialSubject\":{\"id\":\"did:example:abcdefgh\",\"alumniOf\":\"The School of Examples\"},\"proof\":[{\"type\":\"DataIntegrityProof\",\"id\":\"urn:uuid:26329423-bec9-4b2e-88cb-a7c7d9dc4544\",\"cryptosuite\":\"eddsa-rdfc-2022\",\"created\":\"2023-02-26T22:06:38Z\",\"verificationMethod\":\"did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7#z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z5gL4Hy8N4B6zr9mQAGqpsry1iTdxEAp4zjqPNQv7iTvgdkMcHKnMALvPwU3YAKZhYn3k3Jmut2TAMxSaHaggFtf4\"},{\"type\":\"DataIntegrityProof\",\"cryptosuite\":\"eddsa-rdfc-2022\",\"created\":\"2023-02-26T22:16:38Z\",\"verificationMethod\":\"did:key:z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E#z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E\",\"proofPurpose\":\"assertionMethod\",\"previousProof\":[\"urn:uuid:26329423-bec9-4b2e-88cb-a7c7d9dc4544\"],\"proofValue\":\"z2ENoYDUK8cMMJMvwRGyHVX23pPeHaZfCgpbDFs15FXGaeFseeqzZf5nWXF14JPoBcqdr39vVPgrAUbWT2VYYacrG\"}]},\"options\":{}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          "https://w3id.org/security/data-integrity/v2",
                          {
                            "@context": {
                              "AlumniCredential": "https://www.example.org/AlumniCredential",
                              "alumniOf": "https://www.example.org/alumniOf",
                              "description": "https://schema.org/description",
                              "name": "https://schema.org/name"
                            }
                          }
                        ],
                        "id": "urn:uuid:58172aac-d8ba-11ed-83dd-0b3aef56cc33",
                        "type": [
                          "VerifiableCredential",
                          "AlumniCredential"
                        ],
                        "name": "Alumni Credential",
                        "description": "A minimum viable example of a VC 1.1 Alumni Credential.",
                        "issuer": "did:key:z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E",
                        "issuanceDate": "2023-01-01T00:00:00Z",
                        "credentialSubject": {
                          "id": "did:example:abcdefgh",
                          "alumniOf": "The School of Examples"
                        },
                        "proof": [
                          {
                            "type": "DataIntegrityProof",
                            "id": "urn:uuid:26329423-bec9-4b2e-88cb-a7c7d9dc4544",
                            "cryptosuite": "eddsa-rdfc-2022",
                            "created": "2023-02-26T22:06:38Z",
                            "verificationMethod": "did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7#z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7",
                            "proofPurpose": "assertionMethod",
                            "proofValue": "z5gL4Hy8N4B6zr9mQAGqpsry1iTdxEAp4zjqPNQv7iTvgdkMcHKnMALvPwU3YAKZhYn3k3Jmut2TAMxSaHaggFtf4"
                          },
                          {
                            "type": "DataIntegrityProof",
                            "cryptosuite": "eddsa-rdfc-2022",
                            "created": "2023-02-26T22:16:38Z",
                            "verificationMethod": "did:key:z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E#z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E",
                            "proofPurpose": "assertionMethod",
                            "previousProof": [
                              "urn:uuid:26329423-bec9-4b2e-88cb-a7c7d9dc4544"
                            ],
                            "proofValue": "z2ENoYDUK8cMMJMvwRGyHVX23pPeHaZfCgpbDFs15FXGaeFseeqzZf5nWXF14JPoBcqdr39vVPgrAUbWT2VYYacrG"
                          }
                        ]
                      },
                      "options": {}
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://demo.av1.sh/credentials/verify",
                  "status": 400,
                  "data": {
                    "errors": [
                      "Credential verification failed: [\"One or more proofs failed verification\"]"
                    ]
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Should verify VC with an Array \"proof.previousProof\".: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:50:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/suites/verify.js:276:9)"
              }
            },
            {
              "type": "test",
              "title": "An OPTIONAL string value (proof.previousProof) or unordered list of string values. Each value identifies another data integrity proof that MUST verify before the current proof is processed.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=An%20OPTIONAL%20string%20value%20or%20unordered%20list%20of%20string%20values.%20Each%20value%20identifies%20another%20data%20integrity%20proof%20that%20MUST%20verify%20before%20the%20current%20proof%20is%20processed';\n        await verificationSuccess({\n          credential: credentials.clone('previousProofString'),\n          verifier,\n          reason: 'Should verify VC with a string \"proof.previousProof\".'\n        });\n        await verificationSuccess({\n          credential: credentials.clone('previousProofArray'),\n          verifier,\n          reason: 'Should verify VC with an Array \"proof.previousProof\".'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "AaBj6j734Xhrd8pZ6XJAZ",
              "ctx": null,
              "_testId": "urn:uuid:79997f39-d6c7-462d-b0f9-f30278ef2672",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "An OPTIONAL string value (proof.previousProof) or unordered list of string values. Each value identifies another data integrity proof that MUST verify before the current proof is processed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=An%20OPTIONAL%20string%20value%20or%20unordered%20list%20of%20string%20values.%20Each%20value%20identifies%20another%20data%20integrity%20proof%20that%20MUST%20verify%20before%20the%20current%20proof%20is%20processed",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 21192,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 102,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Should verify VC with a string \"proof.previousProof\".: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          "https://w3id.org/security/data-integrity/v2",
                          {
                            "@context": {
                              "AlumniCredential": "https://www.example.org/AlumniCredential",
                              "alumniOf": "https://www.example.org/alumniOf",
                              "description": "https://schema.org/description",
                              "name": "https://schema.org/name"
                            }
                          }
                        ],
                        "id": "urn:uuid:58172aac-d8ba-11ed-83dd-0b3aef56cc33",
                        "type": [
                          "VerifiableCredential",
                          "AlumniCredential"
                        ],
                        "name": "Alumni Credential",
                        "description": "A minimum viable example of a VC 1.1 Alumni Credential.",
                        "issuer": "did:key:z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E",
                        "issuanceDate": "2023-01-01T00:00:00Z",
                        "credentialSubject": {
                          "id": "did:example:abcdefgh",
                          "alumniOf": "The School of Examples"
                        },
                        "proof": [
                          {
                            "type": "DataIntegrityProof",
                            "id": "urn:uuid:26329423-bec9-4b2e-88cb-a7c7d9dc4544",
                            "cryptosuite": "eddsa-rdfc-2022",
                            "created": "2023-02-26T22:06:38Z",
                            "verificationMethod": "did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7#z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7",
                            "proofPurpose": "assertionMethod",
                            "proofValue": "z5gL4Hy8N4B6zr9mQAGqpsry1iTdxEAp4zjqPNQv7iTvgdkMcHKnMALvPwU3YAKZhYn3k3Jmut2TAMxSaHaggFtf4"
                          },
                          {
                            "type": "DataIntegrityProof",
                            "cryptosuite": "eddsa-rdfc-2022",
                            "created": "2023-02-26T22:16:38Z",
                            "verificationMethod": "did:key:z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E#z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E",
                            "proofPurpose": "assertionMethod",
                            "previousProof": "urn:uuid:26329423-bec9-4b2e-88cb-a7c7d9dc4544",
                            "proofValue": "z2ENoYDUK8cMMJMvwRGyHVX23pPeHaZfCgpbDFs15FXGaeFseeqzZf5nWXF14JPoBcqdr39vVPgrAUbWT2VYYacrG"
                          }
                        ]
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half",
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",\"https://w3id.org/security/data-integrity/v2\",{\"@context\":{\"AlumniCredential\":\"https://www.example.org/AlumniCredential\",\"alumniOf\":\"https://www.example.org/alumniOf\",\"description\":\"https://schema.org/description\",\"name\":\"https://schema.org/name\"}}],\"id\":\"urn:uuid:58172aac-d8ba-11ed-83dd-0b3aef56cc33\",\"type\":[\"VerifiableCredential\",\"AlumniCredential\"],\"name\":\"Alumni Credential\",\"description\":\"A minimum viable example of a VC 1.1 Alumni Credential.\",\"issuer\":\"did:key:z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E\",\"issuanceDate\":\"2023-01-01T00:00:00Z\",\"credentialSubject\":{\"id\":\"did:example:abcdefgh\",\"alumniOf\":\"The School of Examples\"},\"proof\":[{\"type\":\"DataIntegrityProof\",\"id\":\"urn:uuid:26329423-bec9-4b2e-88cb-a7c7d9dc4544\",\"cryptosuite\":\"eddsa-rdfc-2022\",\"created\":\"2023-02-26T22:06:38Z\",\"verificationMethod\":\"did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7#z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z5gL4Hy8N4B6zr9mQAGqpsry1iTdxEAp4zjqPNQv7iTvgdkMcHKnMALvPwU3YAKZhYn3k3Jmut2TAMxSaHaggFtf4\"},{\"type\":\"DataIntegrityProof\",\"cryptosuite\":\"eddsa-rdfc-2022\",\"created\":\"2023-02-26T22:16:38Z\",\"verificationMethod\":\"did:key:z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E#z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E\",\"proofPurpose\":\"assertionMethod\",\"previousProof\":\"urn:uuid:26329423-bec9-4b2e-88cb-a7c7d9dc4544\",\"proofValue\":\"z2ENoYDUK8cMMJMvwRGyHVX23pPeHaZfCgpbDFs15FXGaeFseeqzZf5nWXF14JPoBcqdr39vVPgrAUbWT2VYYacrG\"}]},\"options\":{\"checks\":[\"proof\"]}}"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc2.veresverifier.dev/verifiers/z19w7KofwvE2nkJeRVLp8NDxz/credentials/verify",
                  "status": 400,
                  "data": {
                    "verified": false,
                    "results": [
                      {
                        "proof": {
                          "@context": [
                            "https://www.w3.org/2018/credentials/v1",
                            "https://w3id.org/security/data-integrity/v2",
                            {
                              "@context": {
                                "AlumniCredential": "https://www.example.org/AlumniCredential",
                                "alumniOf": "https://www.example.org/alumniOf",
                                "description": "https://schema.org/description",
                                "name": "https://schema.org/name"
                              }
                            }
                          ],
                          "type": "DataIntegrityProof",
                          "id": "urn:uuid:26329423-bec9-4b2e-88cb-a7c7d9dc4544",
                          "cryptosuite": "eddsa-rdfc-2022",
                          "created": "2023-02-26T22:06:38Z",
                          "verificationMethod": "did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7#z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "z5gL4Hy8N4B6zr9mQAGqpsry1iTdxEAp4zjqPNQv7iTvgdkMcHKnMALvPwU3YAKZhYn3k3Jmut2TAMxSaHaggFtf4"
                        },
                        "verified": false,
                        "verificationMethod": {
                          "@context": "https://w3id.org/security/suites/ed25519-2020/v1",
                          "id": "did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7#z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7",
                          "type": "Ed25519VerificationKey2020",
                          "controller": "did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7",
                          "publicKeyMultibase": "z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7"
                        },
                        "error": {
                          "name": "VerificationError",
                          "message": "Credential issuer must match the verification method controller."
                        },
                        "purposeResult": {
                          "valid": false,
                          "error": {
                            "name": "Error",
                            "message": "Credential issuer must match the verification method controller.",
                            "stack": "Error: Credential issuer must match the verification method controller.\n    at CredentialIssuancePurpose.validate (file:///home/node/app/node_modules/@digitalbazaar/vc/lib/CredentialIssuancePurpose.js:70:15)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async /home/node/app/node_modules/jsonld-signatures/lib/ProofSet.js:305:27\n    at async Promise.all (index 0)\n    at async _verify (/home/node/app/node_modules/jsonld-signatures/lib/ProofSet.js:291:3)\n    at async ProofSet.verify (/home/node/app/node_modules/jsonld-signatures/lib/ProofSet.js:191:23)\n    at async Object.verify (/home/node/app/node_modules/jsonld-signatures/lib/jsonld-signatures.js:169:18)\n    at async _verifyCredential (file:///home/node/app/node_modules/@digitalbazaar/vc/lib/index.js:346:18)\n    at async Module.verifyCredential (file:///home/node/app/node_modules/@digitalbazaar/vc/lib/index.js:291:12)\n    at async Module.verifyCredential (file:///home/node/app/node_modules/@bedrock/vc-verifier/lib/di.js:17:18)"
                          }
                        }
                      },
                      {
                        "proof": {
                          "@context": [
                            "https://www.w3.org/2018/credentials/v1",
                            "https://w3id.org/security/data-integrity/v2",
                            {
                              "@context": {
                                "AlumniCredential": "https://www.example.org/AlumniCredential",
                                "alumniOf": "https://www.example.org/alumniOf",
                                "description": "https://schema.org/description",
                                "name": "https://schema.org/name"
                              }
                            }
                          ],
                          "type": "DataIntegrityProof",
                          "cryptosuite": "eddsa-rdfc-2022",
                          "created": "2023-02-26T22:16:38Z",
                          "verificationMethod": "did:key:z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E#z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E",
                          "proofPurpose": "assertionMethod",
                          "previousProof": "urn:uuid:26329423-bec9-4b2e-88cb-a7c7d9dc4544",
                          "proofValue": "z2ENoYDUK8cMMJMvwRGyHVX23pPeHaZfCgpbDFs15FXGaeFseeqzZf5nWXF14JPoBcqdr39vVPgrAUbWT2VYYacrG"
                        },
                        "verified": false,
                        "error": {
                          "name": "VerificationError",
                          "message": "Invalid signature."
                        }
                      }
                    ],
                    "error": {
                      "name": "VerificationError",
                      "errors": [
                        {
                          "name": "Error",
                          "message": "Credential issuer must match the verification method controller.",
                          "stack": "Error: Credential issuer must match the verification method controller.\n    at CredentialIssuancePurpose.validate (file:///home/node/app/node_modules/@digitalbazaar/vc/lib/CredentialIssuancePurpose.js:70:15)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async /home/node/app/node_modules/jsonld-signatures/lib/ProofSet.js:305:27\n    at async Promise.all (index 0)\n    at async _verify (/home/node/app/node_modules/jsonld-signatures/lib/ProofSet.js:291:3)\n    at async ProofSet.verify (/home/node/app/node_modules/jsonld-signatures/lib/ProofSet.js:191:23)\n    at async Object.verify (/home/node/app/node_modules/jsonld-signatures/lib/jsonld-signatures.js:169:18)\n    at async _verifyCredential (file:///home/node/app/node_modules/@digitalbazaar/vc/lib/index.js:346:18)\n    at async Module.verifyCredential (file:///home/node/app/node_modules/@digitalbazaar/vc/lib/index.js:291:12)\n    at async Module.verifyCredential (file:///home/node/app/node_modules/@bedrock/vc-verifier/lib/di.js:17:18)"
                        },
                        {
                          "name": "Error",
                          "message": "Invalid signature.",
                          "stack": "Error: Invalid signature.\n    at DataIntegrityProof.verifyProof (file:///home/node/app/node_modules/@digitalbazaar/data-integrity/lib/DataIntegrityProof.js:303:15)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async /home/node/app/node_modules/jsonld-signatures/lib/ProofSet.js:272:53\n    at async Promise.all (index 1)\n    at async _verify (/home/node/app/node_modules/jsonld-signatures/lib/ProofSet.js:260:3)\n    at async ProofSet.verify (/home/node/app/node_modules/jsonld-signatures/lib/ProofSet.js:191:23)\n    at async Object.verify (/home/node/app/node_modules/jsonld-signatures/lib/jsonld-signatures.js:169:18)\n    at async _verifyCredential (file:///home/node/app/node_modules/@digitalbazaar/vc/lib/index.js:346:18)\n    at async Module.verifyCredential (file:///home/node/app/node_modules/@digitalbazaar/vc/lib/index.js:291:12)\n    at async Module.verifyCredential (file:///home/node/app/node_modules/@bedrock/vc-verifier/lib/di.js:17:18)"
                        }
                      ],
                      "message": "Verification error(s)."
                    },
                    "checks": [
                      {
                        "check": [
                          "proof"
                        ],
                        "id": "urn:uuid:58172aac-d8ba-11ed-83dd-0b3aef56cc33",
                        "error": "Credential issuer must match the verification method controller.",
                        "verificationMethod": "did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7#z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7"
                      }
                    ]
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Should verify VC with a string \"proof.previousProof\".: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:50:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/suites/verify.js:271:9)"
              }
            },
            {
              "type": "test",
              "title": "An OPTIONAL string value (proof.previousProof) or unordered list of string values. Each value identifies another data integrity proof that MUST verify before the current proof is processed.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=An%20OPTIONAL%20string%20value%20or%20unordered%20list%20of%20string%20values.%20Each%20value%20identifies%20another%20data%20integrity%20proof%20that%20MUST%20verify%20before%20the%20current%20proof%20is%20processed';\n        await verificationSuccess({\n          credential: credentials.clone('previousProofString'),\n          verifier,\n          reason: 'Should verify VC with a string \"proof.previousProof\".'\n        });\n        await verificationSuccess({\n          credential: credentials.clone('previousProofArray'),\n          verifier,\n          reason: 'Should verify VC with an Array \"proof.previousProof\".'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "GR-gSiE-yu7q5QSTZ-vf1",
              "ctx": null,
              "_testId": "urn:uuid:21d31db7-3fd6-41ab-915e-7204cdbe981c",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "An OPTIONAL string value (proof.previousProof) or unordered list of string values. Each value identifies another data integrity proof that MUST verify before the current proof is processed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=An%20OPTIONAL%20string%20value%20or%20unordered%20list%20of%20string%20values.%20Each%20value%20identifies%20another%20data%20integrity%20proof%20that%20MUST%20verify%20before%20the%20current%20proof%20is%20processed",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 24397,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 2666,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "An OPTIONAL string value (proof.previousProof) or unordered list of string values. Each value identifies another data integrity proof that MUST verify before the current proof is processed.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=An%20OPTIONAL%20string%20value%20or%20unordered%20list%20of%20string%20values.%20Each%20value%20identifies%20another%20data%20integrity%20proof%20that%20MUST%20verify%20before%20the%20current%20proof%20is%20processed';\n        await verificationSuccess({\n          credential: credentials.clone('previousProofString'),\n          verifier,\n          reason: 'Should verify VC with a string \"proof.previousProof\".'\n        });\n        await verificationSuccess({\n          credential: credentials.clone('previousProofArray'),\n          verifier,\n          reason: 'Should verify VC with an Array \"proof.previousProof\".'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "axNKa1xcoGlQzOQTJcOzF",
              "ctx": null,
              "_testId": "urn:uuid:d1cf8812-90ec-4f87-9f32-dc0cf2a053c0",
              "cell": {
                "columnId": "Netis",
                "rowId": "An OPTIONAL string value (proof.previousProof) or unordered list of string values. Each value identifies another data integrity proof that MUST verify before the current proof is processed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=An%20OPTIONAL%20string%20value%20or%20unordered%20list%20of%20string%20values.%20Each%20value%20identifies%20another%20data%20integrity%20proof%20that%20MUST%20verify%20before%20the%20current%20proof%20is%20processed",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 32899,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 171,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Should verify VC with a string \"proof.previousProof\".: expected HTTPError: Request failed with status cod… { …(5) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",\"https://w3id.org/security/data-integrity/v2\",{\"@context\":{\"AlumniCredential\":\"https://www.example.org/AlumniCredential\",\"alumniOf\":\"https://www.example.org/alumniOf\",\"description\":\"https://schema.org/description\",\"name\":\"https://schema.org/name\"}}],\"id\":\"urn:uuid:58172aac-d8ba-11ed-83dd-0b3aef56cc33\",\"type\":[\"VerifiableCredential\",\"AlumniCredential\"],\"name\":\"Alumni Credential\",\"description\":\"A minimum viable example of a VC 1.1 Alumni Credential.\",\"issuer\":\"did:key:z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E\",\"issuanceDate\":\"2023-01-01T00:00:00Z\",\"credentialSubject\":{\"id\":\"did:example:abcdefgh\",\"alumniOf\":\"The School of Examples\"},\"proof\":[{\"type\":\"DataIntegrityProof\",\"id\":\"urn:uuid:26329423-bec9-4b2e-88cb-a7c7d9dc4544\",\"cryptosuite\":\"eddsa-rdfc-2022\",\"created\":\"2023-02-26T22:06:38Z\",\"verificationMethod\":\"did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7#z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z5gL4Hy8N4B6zr9mQAGqpsry1iTdxEAp4zjqPNQv7iTvgdkMcHKnMALvPwU3YAKZhYn3k3Jmut2TAMxSaHaggFtf4\"},{\"type\":\"DataIntegrityProof\",\"cryptosuite\":\"eddsa-rdfc-2022\",\"created\":\"2023-02-26T22:16:38Z\",\"verificationMethod\":\"did:key:z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E#z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E\",\"proofPurpose\":\"assertionMethod\",\"previousProof\":\"urn:uuid:26329423-bec9-4b2e-88cb-a7c7d9dc4544\",\"proofValue\":\"z2ENoYDUK8cMMJMvwRGyHVX23pPeHaZfCgpbDFs15FXGaeFseeqzZf5nWXF14JPoBcqdr39vVPgrAUbWT2VYYacrG\"}]},\"options\":{}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          "https://w3id.org/security/data-integrity/v2",
                          {
                            "@context": {
                              "AlumniCredential": "https://www.example.org/AlumniCredential",
                              "alumniOf": "https://www.example.org/alumniOf",
                              "description": "https://schema.org/description",
                              "name": "https://schema.org/name"
                            }
                          }
                        ],
                        "id": "urn:uuid:58172aac-d8ba-11ed-83dd-0b3aef56cc33",
                        "type": [
                          "VerifiableCredential",
                          "AlumniCredential"
                        ],
                        "name": "Alumni Credential",
                        "description": "A minimum viable example of a VC 1.1 Alumni Credential.",
                        "issuer": "did:key:z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E",
                        "issuanceDate": "2023-01-01T00:00:00Z",
                        "credentialSubject": {
                          "id": "did:example:abcdefgh",
                          "alumniOf": "The School of Examples"
                        },
                        "proof": [
                          {
                            "type": "DataIntegrityProof",
                            "id": "urn:uuid:26329423-bec9-4b2e-88cb-a7c7d9dc4544",
                            "cryptosuite": "eddsa-rdfc-2022",
                            "created": "2023-02-26T22:06:38Z",
                            "verificationMethod": "did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7#z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7",
                            "proofPurpose": "assertionMethod",
                            "proofValue": "z5gL4Hy8N4B6zr9mQAGqpsry1iTdxEAp4zjqPNQv7iTvgdkMcHKnMALvPwU3YAKZhYn3k3Jmut2TAMxSaHaggFtf4"
                          },
                          {
                            "type": "DataIntegrityProof",
                            "cryptosuite": "eddsa-rdfc-2022",
                            "created": "2023-02-26T22:16:38Z",
                            "verificationMethod": "did:key:z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E#z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E",
                            "proofPurpose": "assertionMethod",
                            "previousProof": "urn:uuid:26329423-bec9-4b2e-88cb-a7c7d9dc4544",
                            "proofValue": "z2ENoYDUK8cMMJMvwRGyHVX23pPeHaZfCgpbDFs15FXGaeFseeqzZf5nWXF14JPoBcqdr39vVPgrAUbWT2VYYacrG"
                          }
                        ]
                      },
                      "options": {}
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://test-api.mynext.id/api/v1/verifier/credential/vc-api/verify",
                  "status": 400
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Should verify VC with a string \"proof.previousProof\".: expected HTTPError: Request failed with status cod… { …(5) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:50:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/suites/verify.js:271:9)"
              }
            },
            {
              "type": "test",
              "title": "An OPTIONAL string value (proof.previousProof) or unordered list of string values. Each value identifies another data integrity proof that MUST verify before the current proof is processed.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=An%20OPTIONAL%20string%20value%20or%20unordered%20list%20of%20string%20values.%20Each%20value%20identifies%20another%20data%20integrity%20proof%20that%20MUST%20verify%20before%20the%20current%20proof%20is%20processed';\n        await verificationSuccess({\n          credential: credentials.clone('previousProofString'),\n          verifier,\n          reason: 'Should verify VC with a string \"proof.previousProof\".'\n        });\n        await verificationSuccess({\n          credential: credentials.clone('previousProofArray'),\n          verifier,\n          reason: 'Should verify VC with an Array \"proof.previousProof\".'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "7HtVI6O_1Gd2wEyGqdagm",
              "ctx": null,
              "_testId": "urn:uuid:090fea04-8a14-483d-b52e-d7d2995926b4",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "An OPTIONAL string value (proof.previousProof) or unordered list of string values. Each value identifies another data integrity proof that MUST verify before the current proof is processed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=An%20OPTIONAL%20string%20value%20or%20unordered%20list%20of%20string%20values.%20Each%20value%20identifies%20another%20data%20integrity%20proof%20that%20MUST%20verify%20before%20the%20current%20proof%20is%20processed",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 36159,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 144,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Should verify VC with a string \"proof.previousProof\".: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",\"https://w3id.org/security/data-integrity/v2\",{\"@context\":{\"AlumniCredential\":\"https://www.example.org/AlumniCredential\",\"alumniOf\":\"https://www.example.org/alumniOf\",\"description\":\"https://schema.org/description\",\"name\":\"https://schema.org/name\"}}],\"id\":\"urn:uuid:58172aac-d8ba-11ed-83dd-0b3aef56cc33\",\"type\":[\"VerifiableCredential\",\"AlumniCredential\"],\"name\":\"Alumni Credential\",\"description\":\"A minimum viable example of a VC 1.1 Alumni Credential.\",\"issuer\":\"did:key:z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E\",\"issuanceDate\":\"2023-01-01T00:00:00Z\",\"credentialSubject\":{\"id\":\"did:example:abcdefgh\",\"alumniOf\":\"The School of Examples\"},\"proof\":[{\"type\":\"DataIntegrityProof\",\"id\":\"urn:uuid:26329423-bec9-4b2e-88cb-a7c7d9dc4544\",\"cryptosuite\":\"eddsa-rdfc-2022\",\"created\":\"2023-02-26T22:06:38Z\",\"verificationMethod\":\"did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7#z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z5gL4Hy8N4B6zr9mQAGqpsry1iTdxEAp4zjqPNQv7iTvgdkMcHKnMALvPwU3YAKZhYn3k3Jmut2TAMxSaHaggFtf4\"},{\"type\":\"DataIntegrityProof\",\"cryptosuite\":\"eddsa-rdfc-2022\",\"created\":\"2023-02-26T22:16:38Z\",\"verificationMethod\":\"did:key:z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E#z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E\",\"proofPurpose\":\"assertionMethod\",\"previousProof\":\"urn:uuid:26329423-bec9-4b2e-88cb-a7c7d9dc4544\",\"proofValue\":\"z2ENoYDUK8cMMJMvwRGyHVX23pPeHaZfCgpbDFs15FXGaeFseeqzZf5nWXF14JPoBcqdr39vVPgrAUbWT2VYYacrG\"}]},\"options\":{\"credentialFormat\":\"JSON_LD_CLASSIC\"}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          "https://w3id.org/security/data-integrity/v2",
                          {
                            "@context": {
                              "AlumniCredential": "https://www.example.org/AlumniCredential",
                              "alumniOf": "https://www.example.org/alumniOf",
                              "description": "https://schema.org/description",
                              "name": "https://schema.org/name"
                            }
                          }
                        ],
                        "id": "urn:uuid:58172aac-d8ba-11ed-83dd-0b3aef56cc33",
                        "type": [
                          "VerifiableCredential",
                          "AlumniCredential"
                        ],
                        "name": "Alumni Credential",
                        "description": "A minimum viable example of a VC 1.1 Alumni Credential.",
                        "issuer": "did:key:z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E",
                        "issuanceDate": "2023-01-01T00:00:00Z",
                        "credentialSubject": {
                          "id": "did:example:abcdefgh",
                          "alumniOf": "The School of Examples"
                        },
                        "proof": [
                          {
                            "type": "DataIntegrityProof",
                            "id": "urn:uuid:26329423-bec9-4b2e-88cb-a7c7d9dc4544",
                            "cryptosuite": "eddsa-rdfc-2022",
                            "created": "2023-02-26T22:06:38Z",
                            "verificationMethod": "did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7#z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7",
                            "proofPurpose": "assertionMethod",
                            "proofValue": "z5gL4Hy8N4B6zr9mQAGqpsry1iTdxEAp4zjqPNQv7iTvgdkMcHKnMALvPwU3YAKZhYn3k3Jmut2TAMxSaHaggFtf4"
                          },
                          {
                            "type": "DataIntegrityProof",
                            "cryptosuite": "eddsa-rdfc-2022",
                            "created": "2023-02-26T22:16:38Z",
                            "verificationMethod": "did:key:z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E#z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E",
                            "proofPurpose": "assertionMethod",
                            "previousProof": "urn:uuid:26329423-bec9-4b2e-88cb-a7c7d9dc4544",
                            "proofValue": "z2ENoYDUK8cMMJMvwRGyHVX23pPeHaZfCgpbDFs15FXGaeFseeqzZf5nWXF14JPoBcqdr39vVPgrAUbWT2VYYacrG"
                          }
                        ]
                      },
                      "options": {
                        "credentialFormat": "JSON_LD_CLASSIC"
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://canivc.core.dev.procivis-one.com/vc-api/credentials/verify",
                  "status": 400,
                  "data": {
                    "errors": [
                      {
                        "status": 400,
                        "title": "Failed to deserialize the JSON body into the target type",
                        "detail": null
                      }
                    ]
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Should verify VC with a string \"proof.previousProof\".: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:50:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/suites/verify.js:271:9)"
              }
            },
            {
              "type": "test",
              "title": "An OPTIONAL string value (proof.previousProof) or unordered list of string values. Each value identifies another data integrity proof that MUST verify before the current proof is processed.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=An%20OPTIONAL%20string%20value%20or%20unordered%20list%20of%20string%20values.%20Each%20value%20identifies%20another%20data%20integrity%20proof%20that%20MUST%20verify%20before%20the%20current%20proof%20is%20processed';\n        await verificationSuccess({\n          credential: credentials.clone('previousProofString'),\n          verifier,\n          reason: 'Should verify VC with a string \"proof.previousProof\".'\n        });\n        await verificationSuccess({\n          credential: credentials.clone('previousProofArray'),\n          verifier,\n          reason: 'Should verify VC with an Array \"proof.previousProof\".'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "YDUokIHMIbQFTHZgMFsnx",
              "ctx": null,
              "_testId": "urn:uuid:151414ac-45d2-48f6-8fb2-ba2f20e4e720",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "An OPTIONAL string value (proof.previousProof) or unordered list of string values. Each value identifies another data integrity proof that MUST verify before the current proof is processed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=An%20OPTIONAL%20string%20value%20or%20unordered%20list%20of%20string%20values.%20Each%20value%20identifies%20another%20data%20integrity%20proof%20that%20MUST%20verify%20before%20the%20current%20proof%20is%20processed",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 38353,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 116,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Should verify VC with a string \"proof.previousProof\".: expected HTTPError: Request failed with status cod… { …(5) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",\"https://w3id.org/security/data-integrity/v2\",{\"@context\":{\"AlumniCredential\":\"https://www.example.org/AlumniCredential\",\"alumniOf\":\"https://www.example.org/alumniOf\",\"description\":\"https://schema.org/description\",\"name\":\"https://schema.org/name\"}}],\"id\":\"urn:uuid:58172aac-d8ba-11ed-83dd-0b3aef56cc33\",\"type\":[\"VerifiableCredential\",\"AlumniCredential\"],\"name\":\"Alumni Credential\",\"description\":\"A minimum viable example of a VC 1.1 Alumni Credential.\",\"issuer\":\"did:key:z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E\",\"issuanceDate\":\"2023-01-01T00:00:00Z\",\"credentialSubject\":{\"id\":\"did:example:abcdefgh\",\"alumniOf\":\"The School of Examples\"},\"proof\":[{\"type\":\"DataIntegrityProof\",\"id\":\"urn:uuid:26329423-bec9-4b2e-88cb-a7c7d9dc4544\",\"cryptosuite\":\"eddsa-rdfc-2022\",\"created\":\"2023-02-26T22:06:38Z\",\"verificationMethod\":\"did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7#z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z5gL4Hy8N4B6zr9mQAGqpsry1iTdxEAp4zjqPNQv7iTvgdkMcHKnMALvPwU3YAKZhYn3k3Jmut2TAMxSaHaggFtf4\"},{\"type\":\"DataIntegrityProof\",\"cryptosuite\":\"eddsa-rdfc-2022\",\"created\":\"2023-02-26T22:16:38Z\",\"verificationMethod\":\"did:key:z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E#z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E\",\"proofPurpose\":\"assertionMethod\",\"previousProof\":\"urn:uuid:26329423-bec9-4b2e-88cb-a7c7d9dc4544\",\"proofValue\":\"z2ENoYDUK8cMMJMvwRGyHVX23pPeHaZfCgpbDFs15FXGaeFseeqzZf5nWXF14JPoBcqdr39vVPgrAUbWT2VYYacrG\"}]},\"options\":{}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          "https://w3id.org/security/data-integrity/v2",
                          {
                            "@context": {
                              "AlumniCredential": "https://www.example.org/AlumniCredential",
                              "alumniOf": "https://www.example.org/alumniOf",
                              "description": "https://schema.org/description",
                              "name": "https://schema.org/name"
                            }
                          }
                        ],
                        "id": "urn:uuid:58172aac-d8ba-11ed-83dd-0b3aef56cc33",
                        "type": [
                          "VerifiableCredential",
                          "AlumniCredential"
                        ],
                        "name": "Alumni Credential",
                        "description": "A minimum viable example of a VC 1.1 Alumni Credential.",
                        "issuer": "did:key:z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E",
                        "issuanceDate": "2023-01-01T00:00:00Z",
                        "credentialSubject": {
                          "id": "did:example:abcdefgh",
                          "alumniOf": "The School of Examples"
                        },
                        "proof": [
                          {
                            "type": "DataIntegrityProof",
                            "id": "urn:uuid:26329423-bec9-4b2e-88cb-a7c7d9dc4544",
                            "cryptosuite": "eddsa-rdfc-2022",
                            "created": "2023-02-26T22:06:38Z",
                            "verificationMethod": "did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7#z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7",
                            "proofPurpose": "assertionMethod",
                            "proofValue": "z5gL4Hy8N4B6zr9mQAGqpsry1iTdxEAp4zjqPNQv7iTvgdkMcHKnMALvPwU3YAKZhYn3k3Jmut2TAMxSaHaggFtf4"
                          },
                          {
                            "type": "DataIntegrityProof",
                            "cryptosuite": "eddsa-rdfc-2022",
                            "created": "2023-02-26T22:16:38Z",
                            "verificationMethod": "did:key:z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E#z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E",
                            "proofPurpose": "assertionMethod",
                            "previousProof": "urn:uuid:26329423-bec9-4b2e-88cb-a7c7d9dc4544",
                            "proofValue": "z2ENoYDUK8cMMJMvwRGyHVX23pPeHaZfCgpbDFs15FXGaeFseeqzZf5nWXF14JPoBcqdr39vVPgrAUbWT2VYYacrG"
                          }
                        ]
                      },
                      "options": {}
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc.spruceid.xyz/credentials/verify",
                  "status": 400
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Should verify VC with a string \"proof.previousProof\".: expected HTTPError: Request failed with status cod… { …(5) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:50:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/suites/verify.js:271:9)"
              }
            },
            {
              "type": "test",
              "title": "An OPTIONAL string value (proof.previousProof) or unordered list of string values. Each value identifies another data integrity proof that MUST verify before the current proof is processed.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=An%20OPTIONAL%20string%20value%20or%20unordered%20list%20of%20string%20values.%20Each%20value%20identifies%20another%20data%20integrity%20proof%20that%20MUST%20verify%20before%20the%20current%20proof%20is%20processed';\n        await verificationSuccess({\n          credential: credentials.clone('previousProofString'),\n          verifier,\n          reason: 'Should verify VC with a string \"proof.previousProof\".'\n        });\n        await verificationSuccess({\n          credential: credentials.clone('previousProofArray'),\n          verifier,\n          reason: 'Should verify VC with an Array \"proof.previousProof\".'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "V_bOytb15rSWxo4duA0Vu",
              "ctx": null,
              "_testId": "urn:uuid:f05067c1-769d-413e-84f2-bd62a091871e",
              "cell": {
                "columnId": "Trential",
                "rowId": "An OPTIONAL string value (proof.previousProof) or unordered list of string values. Each value identifies another data integrity proof that MUST verify before the current proof is processed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=An%20OPTIONAL%20string%20value%20or%20unordered%20list%20of%20string%20values.%20Each%20value%20identifies%20another%20data%20integrity%20proof%20that%20MUST%20verify%20before%20the%20current%20proof%20is%20processed",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 51302,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 2928,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "An OPTIONAL string value (proof.previousProof) or unordered list of string values. Each value identifies another data integrity proof that MUST verify before the current proof is processed.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=An%20OPTIONAL%20string%20value%20or%20unordered%20list%20of%20string%20values.%20Each%20value%20identifies%20another%20data%20integrity%20proof%20that%20MUST%20verify%20before%20the%20current%20proof%20is%20processed';\n        await verificationSuccess({\n          credential: credentials.clone('previousProofString'),\n          verifier,\n          reason: 'Should verify VC with a string \"proof.previousProof\".'\n        });\n        await verificationSuccess({\n          credential: credentials.clone('previousProofArray'),\n          verifier,\n          reason: 'Should verify VC with an Array \"proof.previousProof\".'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "0ctWYnuH-3ybgeFapgf9R",
              "ctx": null,
              "_testId": "urn:uuid:0db03889-f48f-4fd5-9ff4-79c2e837bc37",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "An OPTIONAL string value (proof.previousProof) or unordered list of string values. Each value identifies another data integrity proof that MUST verify before the current proof is processed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=An%20OPTIONAL%20string%20value%20or%20unordered%20list%20of%20string%20values.%20Each%20value%20identifies%20another%20data%20integrity%20proof%20that%20MUST%20verify%20before%20the%20current%20proof%20is%20processed",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 62360,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 208,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "An OPTIONAL string value (proof.previousProof) or unordered list of string values. Each value identifies another data integrity proof that MUST verify before the current proof is processed.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=An%20OPTIONAL%20string%20value%20or%20unordered%20list%20of%20string%20values.%20Each%20value%20identifies%20another%20data%20integrity%20proof%20that%20MUST%20verify%20before%20the%20current%20proof%20is%20processed';\n        await verificationSuccess({\n          credential: credentials.clone('previousProofString'),\n          verifier,\n          reason: 'Should verify VC with a string \"proof.previousProof\".'\n        });\n        await verificationSuccess({\n          credential: credentials.clone('previousProofArray'),\n          verifier,\n          reason: 'Should verify VC with an Array \"proof.previousProof\".'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "QDCxWQdkgzmaMA2bzyUTX",
              "ctx": null,
              "_testId": "urn:uuid:98751c3c-e54f-480a-8b7b-31b47a1252db",
              "cell": {
                "columnId": "bovine",
                "rowId": "An OPTIONAL string value (proof.previousProof) or unordered list of string values. Each value identifies another data integrity proof that MUST verify before the current proof is processed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=An%20OPTIONAL%20string%20value%20or%20unordered%20list%20of%20string%20values.%20Each%20value%20identifies%20another%20data%20integrity%20proof%20that%20MUST%20verify%20before%20the%20current%20proof%20is%20processed",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 66155,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 143,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Should verify VC with a string \"proof.previousProof\".: expected HTTPError: Request failed with status cod… { …(5) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",\"https://w3id.org/security/data-integrity/v2\",{\"@context\":{\"AlumniCredential\":\"https://www.example.org/AlumniCredential\",\"alumniOf\":\"https://www.example.org/alumniOf\",\"description\":\"https://schema.org/description\",\"name\":\"https://schema.org/name\"}}],\"id\":\"urn:uuid:58172aac-d8ba-11ed-83dd-0b3aef56cc33\",\"type\":[\"VerifiableCredential\",\"AlumniCredential\"],\"name\":\"Alumni Credential\",\"description\":\"A minimum viable example of a VC 1.1 Alumni Credential.\",\"issuer\":\"did:key:z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E\",\"issuanceDate\":\"2023-01-01T00:00:00Z\",\"credentialSubject\":{\"id\":\"did:example:abcdefgh\",\"alumniOf\":\"The School of Examples\"},\"proof\":[{\"type\":\"DataIntegrityProof\",\"id\":\"urn:uuid:26329423-bec9-4b2e-88cb-a7c7d9dc4544\",\"cryptosuite\":\"eddsa-rdfc-2022\",\"created\":\"2023-02-26T22:06:38Z\",\"verificationMethod\":\"did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7#z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z5gL4Hy8N4B6zr9mQAGqpsry1iTdxEAp4zjqPNQv7iTvgdkMcHKnMALvPwU3YAKZhYn3k3Jmut2TAMxSaHaggFtf4\"},{\"type\":\"DataIntegrityProof\",\"cryptosuite\":\"eddsa-rdfc-2022\",\"created\":\"2023-02-26T22:16:38Z\",\"verificationMethod\":\"did:key:z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E#z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E\",\"proofPurpose\":\"assertionMethod\",\"previousProof\":\"urn:uuid:26329423-bec9-4b2e-88cb-a7c7d9dc4544\",\"proofValue\":\"z2ENoYDUK8cMMJMvwRGyHVX23pPeHaZfCgpbDFs15FXGaeFseeqzZf5nWXF14JPoBcqdr39vVPgrAUbWT2VYYacrG\"}]},\"options\":{}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          "https://w3id.org/security/data-integrity/v2",
                          {
                            "@context": {
                              "AlumniCredential": "https://www.example.org/AlumniCredential",
                              "alumniOf": "https://www.example.org/alumniOf",
                              "description": "https://schema.org/description",
                              "name": "https://schema.org/name"
                            }
                          }
                        ],
                        "id": "urn:uuid:58172aac-d8ba-11ed-83dd-0b3aef56cc33",
                        "type": [
                          "VerifiableCredential",
                          "AlumniCredential"
                        ],
                        "name": "Alumni Credential",
                        "description": "A minimum viable example of a VC 1.1 Alumni Credential.",
                        "issuer": "did:key:z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E",
                        "issuanceDate": "2023-01-01T00:00:00Z",
                        "credentialSubject": {
                          "id": "did:example:abcdefgh",
                          "alumniOf": "The School of Examples"
                        },
                        "proof": [
                          {
                            "type": "DataIntegrityProof",
                            "id": "urn:uuid:26329423-bec9-4b2e-88cb-a7c7d9dc4544",
                            "cryptosuite": "eddsa-rdfc-2022",
                            "created": "2023-02-26T22:06:38Z",
                            "verificationMethod": "did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7#z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7",
                            "proofPurpose": "assertionMethod",
                            "proofValue": "z5gL4Hy8N4B6zr9mQAGqpsry1iTdxEAp4zjqPNQv7iTvgdkMcHKnMALvPwU3YAKZhYn3k3Jmut2TAMxSaHaggFtf4"
                          },
                          {
                            "type": "DataIntegrityProof",
                            "cryptosuite": "eddsa-rdfc-2022",
                            "created": "2023-02-26T22:16:38Z",
                            "verificationMethod": "did:key:z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E#z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E",
                            "proofPurpose": "assertionMethod",
                            "previousProof": "urn:uuid:26329423-bec9-4b2e-88cb-a7c7d9dc4544",
                            "proofValue": "z2ENoYDUK8cMMJMvwRGyHVX23pPeHaZfCgpbDFs15FXGaeFseeqzZf5nWXF14JPoBcqdr39vVPgrAUbWT2VYYacrG"
                          }
                        ]
                      },
                      "options": {}
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://bovine.social/w3c-di/verify",
                  "status": 400
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Should verify VC with a string \"proof.previousProof\".: expected HTTPError: Request failed with status cod… { …(5) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:50:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/suites/verify.js:271:9)"
              }
            }
          ]
        },
        {
          "id": "If an unordered list (proof), all referenced proofs in the array MUST verify.",
          "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=If%20an%20unordered%20list%2C%20all%20referenced%20proofs%20in%20the%20array%20MUST%20verify",
          "cells": [
            {
              "type": "test",
              "title": "If an unordered list (proof), all referenced proofs in the array MUST verify.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=If%20an%20unordered%20list%2C%20all%20referenced%20proofs%20in%20the%20array%20MUST%20verify';\n        await verificationSuccess({\n          credential: credentials.clone('proofSet'),\n          verifier,\n          reason: 'Should verify VC with multiple proofs.'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "CEAfWLPcxsKJNAj2STIIb",
              "ctx": null,
              "_testId": "urn:uuid:2d504550-4d1a-429e-acd1-88b6084fd2b7",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If an unordered list (proof), all referenced proofs in the array MUST verify."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=If%20an%20unordered%20list%2C%20all%20referenced%20proofs%20in%20the%20array%20MUST%20verify",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18157,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 73,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Should verify VC with multiple proofs.: expected HTTPError: A non-empty JSON Pointer must … { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",\"https://w3id.org/security/data-integrity/v2\"],\"id\":\"urn:uuid:86294362-4254-4f36-854f-3952fe42555d\",\"type\":[\"VerifiableCredential\"],\"issuer\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\",\"issuanceDate\":\"2020-03-16T22:37:26.544Z\",\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\"},\"proof\":[{\"type\":\"DataIntegrityProof\",\"created\":\"2025-01-26T05:05:40Z\",\"verificationMethod\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b#z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\",\"cryptosuite\":\"eddsa-rdfc-2022\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z2hoTxSsXuKayiPmKuptT4oEX9xtfvZgdHDSwTDeSC3nm3rUCKtx2ZY35wKBKqg5Li4aSiQ7RaczX8m3Q5xNp5jCx\"},{\"type\":\"DataIntegrityProof\",\"created\":\"2025-01-26T05:05:40Z\",\"verificationMethod\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b#z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\",\"cryptosuite\":\"eddsa-rdfc-2022\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z2hoTxSsXuKayiPmKuptT4oEX9xtfvZgdHDSwTDeSC3nm3rUCKtx2ZY35wKBKqg5Li4aSiQ7RaczX8m3Q5xNp5jCx\"}]},\"options\":{}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          "https://w3id.org/security/data-integrity/v2"
                        ],
                        "id": "urn:uuid:86294362-4254-4f36-854f-3952fe42555d",
                        "type": [
                          "VerifiableCredential"
                        ],
                        "issuer": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b",
                        "issuanceDate": "2020-03-16T22:37:26.544Z",
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                        },
                        "proof": [
                          {
                            "type": "DataIntegrityProof",
                            "created": "2025-01-26T05:05:40Z",
                            "verificationMethod": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b#z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b",
                            "cryptosuite": "eddsa-rdfc-2022",
                            "proofPurpose": "assertionMethod",
                            "proofValue": "z2hoTxSsXuKayiPmKuptT4oEX9xtfvZgdHDSwTDeSC3nm3rUCKtx2ZY35wKBKqg5Li4aSiQ7RaczX8m3Q5xNp5jCx"
                          },
                          {
                            "type": "DataIntegrityProof",
                            "created": "2025-01-26T05:05:40Z",
                            "verificationMethod": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b#z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b",
                            "cryptosuite": "eddsa-rdfc-2022",
                            "proofPurpose": "assertionMethod",
                            "proofValue": "z2hoTxSsXuKayiPmKuptT4oEX9xtfvZgdHDSwTDeSC3nm3rUCKtx2ZY35wKBKqg5Li4aSiQ7RaczX8m3Q5xNp5jCx"
                          }
                        ]
                      },
                      "options": {}
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://us-central1-api-catalog.cloudfunctions.net/vc-api-verify",
                  "status": 400,
                  "data": {
                    "message": "A non-empty JSON Pointer must begin with a '/'"
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Should verify VC with multiple proofs.: expected HTTPError: A non-empty JSON Pointer must … { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:50:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/suites/verify.js:285:9)"
              }
            },
            {
              "type": "test",
              "title": "If an unordered list (proof), all referenced proofs in the array MUST verify.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=If%20an%20unordered%20list%2C%20all%20referenced%20proofs%20in%20the%20array%20MUST%20verify';\n        await verificationSuccess({\n          credential: credentials.clone('proofSet'),\n          verifier,\n          reason: 'Should verify VC with multiple proofs.'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "CtFlPjii4dCwlNLWP7nHR",
              "ctx": null,
              "_testId": "urn:uuid:ce17bf09-3d46-4c3a-84b7-ab6e0f0ffc0d",
              "cell": {
                "columnId": "Aviary Tech",
                "rowId": "If an unordered list (proof), all referenced proofs in the array MUST verify."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=If%20an%20unordered%20list%2C%20all%20referenced%20proofs%20in%20the%20array%20MUST%20verify",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19336,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 59,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If an unordered list (proof), all referenced proofs in the array MUST verify.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=If%20an%20unordered%20list%2C%20all%20referenced%20proofs%20in%20the%20array%20MUST%20verify';\n        await verificationSuccess({\n          credential: credentials.clone('proofSet'),\n          verifier,\n          reason: 'Should verify VC with multiple proofs.'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "AaBj6j734Xhrd8pZ6XJAZ",
              "ctx": null,
              "_testId": "urn:uuid:91d2f65a-3401-41f7-8cfb-ea5fb57c92ef",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If an unordered list (proof), all referenced proofs in the array MUST verify."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=If%20an%20unordered%20list%2C%20all%20referenced%20proofs%20in%20the%20array%20MUST%20verify",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 21294,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 89,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If an unordered list (proof), all referenced proofs in the array MUST verify.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=If%20an%20unordered%20list%2C%20all%20referenced%20proofs%20in%20the%20array%20MUST%20verify';\n        await verificationSuccess({\n          credential: credentials.clone('proofSet'),\n          verifier,\n          reason: 'Should verify VC with multiple proofs.'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "GR-gSiE-yu7q5QSTZ-vf1",
              "ctx": null,
              "_testId": "urn:uuid:7e84246b-472c-44be-853c-599985de6646",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If an unordered list (proof), all referenced proofs in the array MUST verify."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=If%20an%20unordered%20list%2C%20all%20referenced%20proofs%20in%20the%20array%20MUST%20verify",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 27064,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1662,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If an unordered list (proof), all referenced proofs in the array MUST verify.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=If%20an%20unordered%20list%2C%20all%20referenced%20proofs%20in%20the%20array%20MUST%20verify';\n        await verificationSuccess({\n          credential: credentials.clone('proofSet'),\n          verifier,\n          reason: 'Should verify VC with multiple proofs.'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "axNKa1xcoGlQzOQTJcOzF",
              "ctx": null,
              "_testId": "urn:uuid:e491298e-2745-4f69-8973-70e0acc34086",
              "cell": {
                "columnId": "Netis",
                "rowId": "If an unordered list (proof), all referenced proofs in the array MUST verify."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=If%20an%20unordered%20list%2C%20all%20referenced%20proofs%20in%20the%20array%20MUST%20verify",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 33071,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 178,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If an unordered list (proof), all referenced proofs in the array MUST verify.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=If%20an%20unordered%20list%2C%20all%20referenced%20proofs%20in%20the%20array%20MUST%20verify';\n        await verificationSuccess({\n          credential: credentials.clone('proofSet'),\n          verifier,\n          reason: 'Should verify VC with multiple proofs.'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "7HtVI6O_1Gd2wEyGqdagm",
              "ctx": null,
              "_testId": "urn:uuid:2c94f830-fc03-4a3a-9355-3ac77d378f88",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "If an unordered list (proof), all referenced proofs in the array MUST verify."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=If%20an%20unordered%20list%2C%20all%20referenced%20proofs%20in%20the%20array%20MUST%20verify",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 36303,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 142,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Should verify VC with multiple proofs.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",\"https://w3id.org/security/data-integrity/v2\"],\"id\":\"urn:uuid:86294362-4254-4f36-854f-3952fe42555d\",\"type\":[\"VerifiableCredential\"],\"issuer\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\",\"issuanceDate\":\"2020-03-16T22:37:26.544Z\",\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\"},\"proof\":[{\"type\":\"DataIntegrityProof\",\"created\":\"2025-01-26T05:05:40Z\",\"verificationMethod\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b#z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\",\"cryptosuite\":\"eddsa-rdfc-2022\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z2hoTxSsXuKayiPmKuptT4oEX9xtfvZgdHDSwTDeSC3nm3rUCKtx2ZY35wKBKqg5Li4aSiQ7RaczX8m3Q5xNp5jCx\"},{\"type\":\"DataIntegrityProof\",\"created\":\"2025-01-26T05:05:40Z\",\"verificationMethod\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b#z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\",\"cryptosuite\":\"eddsa-rdfc-2022\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z2hoTxSsXuKayiPmKuptT4oEX9xtfvZgdHDSwTDeSC3nm3rUCKtx2ZY35wKBKqg5Li4aSiQ7RaczX8m3Q5xNp5jCx\"}]},\"options\":{\"credentialFormat\":\"JSON_LD_CLASSIC\"}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          "https://w3id.org/security/data-integrity/v2"
                        ],
                        "id": "urn:uuid:86294362-4254-4f36-854f-3952fe42555d",
                        "type": [
                          "VerifiableCredential"
                        ],
                        "issuer": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b",
                        "issuanceDate": "2020-03-16T22:37:26.544Z",
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                        },
                        "proof": [
                          {
                            "type": "DataIntegrityProof",
                            "created": "2025-01-26T05:05:40Z",
                            "verificationMethod": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b#z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b",
                            "cryptosuite": "eddsa-rdfc-2022",
                            "proofPurpose": "assertionMethod",
                            "proofValue": "z2hoTxSsXuKayiPmKuptT4oEX9xtfvZgdHDSwTDeSC3nm3rUCKtx2ZY35wKBKqg5Li4aSiQ7RaczX8m3Q5xNp5jCx"
                          },
                          {
                            "type": "DataIntegrityProof",
                            "created": "2025-01-26T05:05:40Z",
                            "verificationMethod": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b#z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b",
                            "cryptosuite": "eddsa-rdfc-2022",
                            "proofPurpose": "assertionMethod",
                            "proofValue": "z2hoTxSsXuKayiPmKuptT4oEX9xtfvZgdHDSwTDeSC3nm3rUCKtx2ZY35wKBKqg5Li4aSiQ7RaczX8m3Q5xNp5jCx"
                          }
                        ]
                      },
                      "options": {
                        "credentialFormat": "JSON_LD_CLASSIC"
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://canivc.core.dev.procivis-one.com/vc-api/credentials/verify",
                  "status": 400,
                  "data": {
                    "errors": [
                      {
                        "status": 400,
                        "title": "Failed to deserialize the JSON body into the target type",
                        "detail": null
                      }
                    ]
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Should verify VC with multiple proofs.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:50:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/suites/verify.js:285:9)"
              }
            },
            {
              "type": "test",
              "title": "If an unordered list (proof), all referenced proofs in the array MUST verify.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=If%20an%20unordered%20list%2C%20all%20referenced%20proofs%20in%20the%20array%20MUST%20verify';\n        await verificationSuccess({\n          credential: credentials.clone('proofSet'),\n          verifier,\n          reason: 'Should verify VC with multiple proofs.'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "YDUokIHMIbQFTHZgMFsnx",
              "ctx": null,
              "_testId": "urn:uuid:c617efaf-ad16-4344-9cc8-1ba5ed0c931d",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If an unordered list (proof), all referenced proofs in the array MUST verify."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=If%20an%20unordered%20list%2C%20all%20referenced%20proofs%20in%20the%20array%20MUST%20verify",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 38470,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 114,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If an unordered list (proof), all referenced proofs in the array MUST verify.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=If%20an%20unordered%20list%2C%20all%20referenced%20proofs%20in%20the%20array%20MUST%20verify';\n        await verificationSuccess({\n          credential: credentials.clone('proofSet'),\n          verifier,\n          reason: 'Should verify VC with multiple proofs.'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "V_bOytb15rSWxo4duA0Vu",
              "ctx": null,
              "_testId": "urn:uuid:d2c507c7-9496-49a0-9349-50d5b49b86f5",
              "cell": {
                "columnId": "Trential",
                "rowId": "If an unordered list (proof), all referenced proofs in the array MUST verify."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=If%20an%20unordered%20list%2C%20all%20referenced%20proofs%20in%20the%20array%20MUST%20verify",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 54231,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 2401,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If an unordered list (proof), all referenced proofs in the array MUST verify.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=If%20an%20unordered%20list%2C%20all%20referenced%20proofs%20in%20the%20array%20MUST%20verify';\n        await verificationSuccess({\n          credential: credentials.clone('proofSet'),\n          verifier,\n          reason: 'Should verify VC with multiple proofs.'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "0ctWYnuH-3ybgeFapgf9R",
              "ctx": null,
              "_testId": "urn:uuid:1c87734f-38cd-4170-ac79-48c17372f6c2",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "If an unordered list (proof), all referenced proofs in the array MUST verify."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=If%20an%20unordered%20list%2C%20all%20referenced%20proofs%20in%20the%20array%20MUST%20verify",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 62569,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 99,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If an unordered list (proof), all referenced proofs in the array MUST verify.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=If%20an%20unordered%20list%2C%20all%20referenced%20proofs%20in%20the%20array%20MUST%20verify';\n        await verificationSuccess({\n          credential: credentials.clone('proofSet'),\n          verifier,\n          reason: 'Should verify VC with multiple proofs.'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "QDCxWQdkgzmaMA2bzyUTX",
              "ctx": null,
              "_testId": "urn:uuid:aefd4f3a-1e9e-4e0c-adae-bf380b799733",
              "cell": {
                "columnId": "bovine",
                "rowId": "If an unordered list (proof), all referenced proofs in the array MUST verify."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=If%20an%20unordered%20list%2C%20all%20referenced%20proofs%20in%20the%20array%20MUST%20verify",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 66299,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 144,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Should verify VC with multiple proofs.: expected HTTPError: Request failed with status cod… { …(5) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",\"https://w3id.org/security/data-integrity/v2\"],\"id\":\"urn:uuid:86294362-4254-4f36-854f-3952fe42555d\",\"type\":[\"VerifiableCredential\"],\"issuer\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\",\"issuanceDate\":\"2020-03-16T22:37:26.544Z\",\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\"},\"proof\":[{\"type\":\"DataIntegrityProof\",\"created\":\"2025-01-26T05:05:40Z\",\"verificationMethod\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b#z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\",\"cryptosuite\":\"eddsa-rdfc-2022\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z2hoTxSsXuKayiPmKuptT4oEX9xtfvZgdHDSwTDeSC3nm3rUCKtx2ZY35wKBKqg5Li4aSiQ7RaczX8m3Q5xNp5jCx\"},{\"type\":\"DataIntegrityProof\",\"created\":\"2025-01-26T05:05:40Z\",\"verificationMethod\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b#z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\",\"cryptosuite\":\"eddsa-rdfc-2022\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z2hoTxSsXuKayiPmKuptT4oEX9xtfvZgdHDSwTDeSC3nm3rUCKtx2ZY35wKBKqg5Li4aSiQ7RaczX8m3Q5xNp5jCx\"}]},\"options\":{}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          "https://w3id.org/security/data-integrity/v2"
                        ],
                        "id": "urn:uuid:86294362-4254-4f36-854f-3952fe42555d",
                        "type": [
                          "VerifiableCredential"
                        ],
                        "issuer": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b",
                        "issuanceDate": "2020-03-16T22:37:26.544Z",
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                        },
                        "proof": [
                          {
                            "type": "DataIntegrityProof",
                            "created": "2025-01-26T05:05:40Z",
                            "verificationMethod": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b#z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b",
                            "cryptosuite": "eddsa-rdfc-2022",
                            "proofPurpose": "assertionMethod",
                            "proofValue": "z2hoTxSsXuKayiPmKuptT4oEX9xtfvZgdHDSwTDeSC3nm3rUCKtx2ZY35wKBKqg5Li4aSiQ7RaczX8m3Q5xNp5jCx"
                          },
                          {
                            "type": "DataIntegrityProof",
                            "created": "2025-01-26T05:05:40Z",
                            "verificationMethod": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b#z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b",
                            "cryptosuite": "eddsa-rdfc-2022",
                            "proofPurpose": "assertionMethod",
                            "proofValue": "z2hoTxSsXuKayiPmKuptT4oEX9xtfvZgdHDSwTDeSC3nm3rUCKtx2ZY35wKBKqg5Li4aSiQ7RaczX8m3Q5xNp5jCx"
                          }
                        ]
                      },
                      "options": {}
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://bovine.social/w3c-di/verify",
                  "status": 400
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Should verify VC with multiple proofs.: expected HTTPError: Request failed with status cod… { …(5) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:50:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/suites/verify.js:285:9)"
              }
            }
          ]
        },
        {
          "id": "If a proof with id equal to previousProof does not exist in allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
          "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20a%20proof%20with%20id%20equal%20to%20previousProof%20does%20not%20exist%20in%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR",
          "cells": [
            {
              "type": "test",
              "title": "If a proof with id equal to previousProof does not exist in allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20a%20proof%20with%20id%20equal%20to%20previousProof%20does%20not%20exist%20in%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR';\n        await verificationFail({\n          credential: credentials.clone('missingPreviousProofString'),\n          verifier,\n          reason: 'Should not verify VC with invalid \"proof.previousProof\".'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "CEAfWLPcxsKJNAj2STIIb",
              "ctx": null,
              "_testId": "urn:uuid:a9df9524-c779-44eb-8a5f-11f29b602bd5",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If a proof with id equal to previousProof does not exist in allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20a%20proof%20with%20id%20equal%20to%20previousProof%20does%20not%20exist%20in%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18231,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 66,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If a proof with id equal to previousProof does not exist in allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20a%20proof%20with%20id%20equal%20to%20previousProof%20does%20not%20exist%20in%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR';\n        await verificationFail({\n          credential: credentials.clone('missingPreviousProofString'),\n          verifier,\n          reason: 'Should not verify VC with invalid \"proof.previousProof\".'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "CtFlPjii4dCwlNLWP7nHR",
              "ctx": null,
              "_testId": "urn:uuid:cddef008-5cec-4bce-807e-1e6dd7ab69e6",
              "cell": {
                "columnId": "Aviary Tech",
                "rowId": "If a proof with id equal to previousProof does not exist in allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20a%20proof%20with%20id%20equal%20to%20previousProof%20does%20not%20exist%20in%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19395,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 85,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If a proof with id equal to previousProof does not exist in allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20a%20proof%20with%20id%20equal%20to%20previousProof%20does%20not%20exist%20in%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR';\n        await verificationFail({\n          credential: credentials.clone('missingPreviousProofString'),\n          verifier,\n          reason: 'Should not verify VC with invalid \"proof.previousProof\".'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "AaBj6j734Xhrd8pZ6XJAZ",
              "ctx": null,
              "_testId": "urn:uuid:38ecd677-f8a0-4379-a4e6-98e80e39f2f0",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If a proof with id equal to previousProof does not exist in allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20a%20proof%20with%20id%20equal%20to%20previousProof%20does%20not%20exist%20in%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 21383,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 94,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If a proof with id equal to previousProof does not exist in allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20a%20proof%20with%20id%20equal%20to%20previousProof%20does%20not%20exist%20in%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR';\n        await verificationFail({\n          credential: credentials.clone('missingPreviousProofString'),\n          verifier,\n          reason: 'Should not verify VC with invalid \"proof.previousProof\".'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "GR-gSiE-yu7q5QSTZ-vf1",
              "ctx": null,
              "_testId": "urn:uuid:6ae55123-8bd8-4a9c-a951-7f53e6301790",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If a proof with id equal to previousProof does not exist in allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20a%20proof%20with%20id%20equal%20to%20previousProof%20does%20not%20exist%20in%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 28725,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 781,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If a proof with id equal to previousProof does not exist in allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20a%20proof%20with%20id%20equal%20to%20previousProof%20does%20not%20exist%20in%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR';\n        await verificationFail({\n          credential: credentials.clone('missingPreviousProofString'),\n          verifier,\n          reason: 'Should not verify VC with invalid \"proof.previousProof\".'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "axNKa1xcoGlQzOQTJcOzF",
              "ctx": null,
              "_testId": "urn:uuid:dcb18e9d-c095-4d43-8f08-ce7b565e3477",
              "cell": {
                "columnId": "Netis",
                "rowId": "If a proof with id equal to previousProof does not exist in allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20a%20proof%20with%20id%20equal%20to%20previousProof%20does%20not%20exist%20in%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 33249,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 167,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If a proof with id equal to previousProof does not exist in allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20a%20proof%20with%20id%20equal%20to%20previousProof%20does%20not%20exist%20in%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR';\n        await verificationFail({\n          credential: credentials.clone('missingPreviousProofString'),\n          verifier,\n          reason: 'Should not verify VC with invalid \"proof.previousProof\".'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "7HtVI6O_1Gd2wEyGqdagm",
              "ctx": null,
              "_testId": "urn:uuid:7c337634-e04d-41f4-a219-09da14faf0c3",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "If a proof with id equal to previousProof does not exist in allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20a%20proof%20with%20id%20equal%20to%20previousProof%20does%20not%20exist%20in%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 36446,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 143,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If a proof with id equal to previousProof does not exist in allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20a%20proof%20with%20id%20equal%20to%20previousProof%20does%20not%20exist%20in%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR';\n        await verificationFail({\n          credential: credentials.clone('missingPreviousProofString'),\n          verifier,\n          reason: 'Should not verify VC with invalid \"proof.previousProof\".'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "YDUokIHMIbQFTHZgMFsnx",
              "ctx": null,
              "_testId": "urn:uuid:2db66734-c150-4466-b584-ef957a191e9b",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If a proof with id equal to previousProof does not exist in allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20a%20proof%20with%20id%20equal%20to%20previousProof%20does%20not%20exist%20in%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 38585,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 104,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If a proof with id equal to previousProof does not exist in allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20a%20proof%20with%20id%20equal%20to%20previousProof%20does%20not%20exist%20in%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR';\n        await verificationFail({\n          credential: credentials.clone('missingPreviousProofString'),\n          verifier,\n          reason: 'Should not verify VC with invalid \"proof.previousProof\".'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "V_bOytb15rSWxo4duA0Vu",
              "ctx": null,
              "_testId": "urn:uuid:6f2d540d-e438-4afc-8af6-fa9ab0518bac",
              "cell": {
                "columnId": "Trential",
                "rowId": "If a proof with id equal to previousProof does not exist in allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20a%20proof%20with%20id%20equal%20to%20previousProof%20does%20not%20exist%20in%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 56633,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1700,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If a proof with id equal to previousProof does not exist in allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20a%20proof%20with%20id%20equal%20to%20previousProof%20does%20not%20exist%20in%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR';\n        await verificationFail({\n          credential: credentials.clone('missingPreviousProofString'),\n          verifier,\n          reason: 'Should not verify VC with invalid \"proof.previousProof\".'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "0ctWYnuH-3ybgeFapgf9R",
              "ctx": null,
              "_testId": "urn:uuid:a0593369-5c32-4ce4-a7f0-8b6ed71a100b",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "If a proof with id equal to previousProof does not exist in allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20a%20proof%20with%20id%20equal%20to%20previousProof%20does%20not%20exist%20in%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 62667,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 114,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Should not verify VC with invalid \"proof.previousProof\".: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 26 Jan 2025 05:06:29 GMT', 'content-type': 'text/html; charset=utf-8', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'cache-control': 'no-cache,no-store', expires: '-1', pragma: 'no-cache', 'x-envoy-upstream-service-time': '11', 'cf-cache-status': 'DYNAMIC', 'report-to': '{\"endpoints\":[{\"url\":\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=lFnoPG7859iQ%2FZDONNxXR1wtDU0oECPVAkKpKwa0dv1D4qPA2bFzbQDimwNBQS%2BIcj2LQihj8ICWq0fvQhGP1E6RctxwB1yUMeaAHpFcAqCDF7oPatnWMJbP71YlbsP6dsIeZPZ5fl7pUWJK1lU9\"}],\"group\":\"cf-nel\",\"max_age\":604800}', nel: '{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}', server: 'cloudflare', 'cf-ray': '907df954c8467c50-LAX', 'content-encoding': 'br', 'server-timing': 'cfL4;desc=\"?proto=TCP&rtt=8815&min_rtt=8127&rtt_var=794&sent=43&recv=29&lost=0&retrans=0&sent_bytes=30233&recv_bytes=13886&delivery_rate=685714&cwnd=252&unsent_bytes=0&cid=2e6e38ba2067fca2&ts=1413&x=0\"', Authorization: 'sanitized to prevent exposure of secrets' }, body: null, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Should not verify VC with invalid \"proof.previousProof\".: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 26 Jan 2025 05:06:29 GMT', 'content-type': 'text/html; charset=utf-8', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'cache-control': 'no-cache,no-store', expires: '-1', pragma: 'no-cache', 'x-envoy-upstream-service-time': '11', 'cf-cache-status': 'DYNAMIC', 'report-to': '{\"endpoints\":[{\"url\":\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=lFnoPG7859iQ%2FZDONNxXR1wtDU0oECPVAkKpKwa0dv1D4qPA2bFzbQDimwNBQS%2BIcj2LQihj8ICWq0fvQhGP1E6RctxwB1yUMeaAHpFcAqCDF7oPatnWMJbP71YlbsP6dsIeZPZ5fl7pUWJK1lU9\"}],\"group\":\"cf-nel\",\"max_age\":604800}', nel: '{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}', server: 'cloudflare', 'cf-ray': '907df954c8467c50-LAX', 'content-encoding': 'br', 'server-timing': 'cfL4;desc=\"?proto=TCP&rtt=8815&min_rtt=8127&rtt_var=794&sent=43&recv=29&lost=0&retrans=0&sent_bytes=30233&recv_bytes=13886&delivery_rate=685714&cwnd=252&unsent_bytes=0&cid=2e6e38ba2067fca2&ts=1413&x=0\"', Authorization: 'sanitized to prevent exposure of secrets' }, body: null, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationFail (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:83:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/suites/verify.js:295:9)"
              }
            },
            {
              "type": "test",
              "title": "If a proof with id equal to previousProof does not exist in allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20a%20proof%20with%20id%20equal%20to%20previousProof%20does%20not%20exist%20in%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR';\n        await verificationFail({\n          credential: credentials.clone('missingPreviousProofString'),\n          verifier,\n          reason: 'Should not verify VC with invalid \"proof.previousProof\".'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "QDCxWQdkgzmaMA2bzyUTX",
              "ctx": null,
              "_testId": "urn:uuid:c178b391-3986-4477-b242-6abc22c9106f",
              "cell": {
                "columnId": "bovine",
                "rowId": "If a proof with id equal to previousProof does not exist in allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20a%20proof%20with%20id%20equal%20to%20previousProof%20does%20not%20exist%20in%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 66444,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 145,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If any element of previousProof list has an id attribute that does not match the id attribute of any element of allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
          "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20any%20element%20of%20previousProof%20list%20has%20an%20id%20attribute%20that%20does%20not%20match%20the%20id%20attribute%20of%20any%20element%20of%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
          "cells": [
            {
              "type": "test",
              "title": "If any element of previousProof list has an id attribute that does not match the id attribute of any element of allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20any%20element%20of%20previousProof%20list%20has%20an%20id%20attribute%20that%20does%20not%20match%20the%20id%20attribute%20of%20any%20element%20of%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n        await verificationFail({\n          credential: credentials.clone('missingPreviousProofArray'),\n          verifier,\n          reason: 'Should not verify VC with invalid \"proof.previousProof\".'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "CEAfWLPcxsKJNAj2STIIb",
              "ctx": null,
              "_testId": "urn:uuid:f56b7c9e-205b-4144-b456-6c904ca8342f",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If any element of previousProof list has an id attribute that does not match the id attribute of any element of allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20any%20element%20of%20previousProof%20list%20has%20an%20id%20attribute%20that%20does%20not%20match%20the%20id%20attribute%20of%20any%20element%20of%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18298,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 68,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If any element of previousProof list has an id attribute that does not match the id attribute of any element of allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20any%20element%20of%20previousProof%20list%20has%20an%20id%20attribute%20that%20does%20not%20match%20the%20id%20attribute%20of%20any%20element%20of%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n        await verificationFail({\n          credential: credentials.clone('missingPreviousProofArray'),\n          verifier,\n          reason: 'Should not verify VC with invalid \"proof.previousProof\".'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "CtFlPjii4dCwlNLWP7nHR",
              "ctx": null,
              "_testId": "urn:uuid:431fad9d-30a5-4bb0-8e58-a7bff45e0d57",
              "cell": {
                "columnId": "Aviary Tech",
                "rowId": "If any element of previousProof list has an id attribute that does not match the id attribute of any element of allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20any%20element%20of%20previousProof%20list%20has%20an%20id%20attribute%20that%20does%20not%20match%20the%20id%20attribute%20of%20any%20element%20of%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19480,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 123,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If any element of previousProof list has an id attribute that does not match the id attribute of any element of allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20any%20element%20of%20previousProof%20list%20has%20an%20id%20attribute%20that%20does%20not%20match%20the%20id%20attribute%20of%20any%20element%20of%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n        await verificationFail({\n          credential: credentials.clone('missingPreviousProofArray'),\n          verifier,\n          reason: 'Should not verify VC with invalid \"proof.previousProof\".'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "AaBj6j734Xhrd8pZ6XJAZ",
              "ctx": null,
              "_testId": "urn:uuid:3ac40989-e59d-4ce2-aae3-1871335d7f7e",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If any element of previousProof list has an id attribute that does not match the id attribute of any element of allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20any%20element%20of%20previousProof%20list%20has%20an%20id%20attribute%20that%20does%20not%20match%20the%20id%20attribute%20of%20any%20element%20of%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 21477,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 116,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If any element of previousProof list has an id attribute that does not match the id attribute of any element of allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20any%20element%20of%20previousProof%20list%20has%20an%20id%20attribute%20that%20does%20not%20match%20the%20id%20attribute%20of%20any%20element%20of%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n        await verificationFail({\n          credential: credentials.clone('missingPreviousProofArray'),\n          verifier,\n          reason: 'Should not verify VC with invalid \"proof.previousProof\".'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "GR-gSiE-yu7q5QSTZ-vf1",
              "ctx": null,
              "_testId": "urn:uuid:4599d176-14a4-460d-86b2-aec684044b5e",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If any element of previousProof list has an id attribute that does not match the id attribute of any element of allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20any%20element%20of%20previousProof%20list%20has%20an%20id%20attribute%20that%20does%20not%20match%20the%20id%20attribute%20of%20any%20element%20of%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29506,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 616,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If any element of previousProof list has an id attribute that does not match the id attribute of any element of allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20any%20element%20of%20previousProof%20list%20has%20an%20id%20attribute%20that%20does%20not%20match%20the%20id%20attribute%20of%20any%20element%20of%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n        await verificationFail({\n          credential: credentials.clone('missingPreviousProofArray'),\n          verifier,\n          reason: 'Should not verify VC with invalid \"proof.previousProof\".'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "axNKa1xcoGlQzOQTJcOzF",
              "ctx": null,
              "_testId": "urn:uuid:0db06918-7d0e-4336-8eb3-419dc6d9daea",
              "cell": {
                "columnId": "Netis",
                "rowId": "If any element of previousProof list has an id attribute that does not match the id attribute of any element of allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20any%20element%20of%20previousProof%20list%20has%20an%20id%20attribute%20that%20does%20not%20match%20the%20id%20attribute%20of%20any%20element%20of%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 33417,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 174,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If any element of previousProof list has an id attribute that does not match the id attribute of any element of allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20any%20element%20of%20previousProof%20list%20has%20an%20id%20attribute%20that%20does%20not%20match%20the%20id%20attribute%20of%20any%20element%20of%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n        await verificationFail({\n          credential: credentials.clone('missingPreviousProofArray'),\n          verifier,\n          reason: 'Should not verify VC with invalid \"proof.previousProof\".'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "7HtVI6O_1Gd2wEyGqdagm",
              "ctx": null,
              "_testId": "urn:uuid:65cdc826-a2ef-48a6-b2ee-1d01ceffb808",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "If any element of previousProof list has an id attribute that does not match the id attribute of any element of allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20any%20element%20of%20previousProof%20list%20has%20an%20id%20attribute%20that%20does%20not%20match%20the%20id%20attribute%20of%20any%20element%20of%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 36589,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 143,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If any element of previousProof list has an id attribute that does not match the id attribute of any element of allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20any%20element%20of%20previousProof%20list%20has%20an%20id%20attribute%20that%20does%20not%20match%20the%20id%20attribute%20of%20any%20element%20of%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n        await verificationFail({\n          credential: credentials.clone('missingPreviousProofArray'),\n          verifier,\n          reason: 'Should not verify VC with invalid \"proof.previousProof\".'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "YDUokIHMIbQFTHZgMFsnx",
              "ctx": null,
              "_testId": "urn:uuid:18f42c9a-0a05-446e-a79b-cc6186a16bb7",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If any element of previousProof list has an id attribute that does not match the id attribute of any element of allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20any%20element%20of%20previousProof%20list%20has%20an%20id%20attribute%20that%20does%20not%20match%20the%20id%20attribute%20of%20any%20element%20of%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 38689,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 109,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If any element of previousProof list has an id attribute that does not match the id attribute of any element of allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20any%20element%20of%20previousProof%20list%20has%20an%20id%20attribute%20that%20does%20not%20match%20the%20id%20attribute%20of%20any%20element%20of%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n        await verificationFail({\n          credential: credentials.clone('missingPreviousProofArray'),\n          verifier,\n          reason: 'Should not verify VC with invalid \"proof.previousProof\".'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "V_bOytb15rSWxo4duA0Vu",
              "ctx": null,
              "_testId": "urn:uuid:b8eb76ac-76d0-421b-8bb6-328054b170d2",
              "cell": {
                "columnId": "Trential",
                "rowId": "If any element of previousProof list has an id attribute that does not match the id attribute of any element of allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20any%20element%20of%20previousProof%20list%20has%20an%20id%20attribute%20that%20does%20not%20match%20the%20id%20attribute%20of%20any%20element%20of%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 58333,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1299,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If any element of previousProof list has an id attribute that does not match the id attribute of any element of allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20any%20element%20of%20previousProof%20list%20has%20an%20id%20attribute%20that%20does%20not%20match%20the%20id%20attribute%20of%20any%20element%20of%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n        await verificationFail({\n          credential: credentials.clone('missingPreviousProofArray'),\n          verifier,\n          reason: 'Should not verify VC with invalid \"proof.previousProof\".'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "0ctWYnuH-3ybgeFapgf9R",
              "ctx": null,
              "_testId": "urn:uuid:e6a40b5a-cd06-48ef-acbc-27305239c100",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "If any element of previousProof list has an id attribute that does not match the id attribute of any element of allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20any%20element%20of%20previousProof%20list%20has%20an%20id%20attribute%20that%20does%20not%20match%20the%20id%20attribute%20of%20any%20element%20of%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 62782,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 105,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Should not verify VC with invalid \"proof.previousProof\".: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 26 Jan 2025 05:06:29 GMT', 'content-type': 'text/html; charset=utf-8', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'cache-control': 'no-cache,no-store', expires: '-1', pragma: 'no-cache', 'x-envoy-upstream-service-time': '8', 'cf-cache-status': 'DYNAMIC', 'report-to': '{\"endpoints\":[{\"url\":\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=zefkVreUOMTwS94bXjzgyc1TDvLNVFo8V8boms1ugIMA1L%2FStEd2nBc5IGuved1fT6vtU9IBLfyFaB8tf8aDkotbOAJY3bk6CWjlYSE7NOpFW4QtqqLR6TMOsOvyfuJyFQiw%2FA7ISQFclS1t6Nup\"}],\"group\":\"cf-nel\",\"max_age\":604800}', nel: '{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}', server: 'cloudflare', 'cf-ray': '907df95589507c50-LAX', 'content-encoding': 'br', 'server-timing': 'cfL4;desc=\"?proto=TCP&rtt=8759&min_rtt=8127&rtt_var=708&sent=47&recv=32&lost=0&retrans=0&sent_bytes=32961&recv_bytes=15800&delivery_rate=685714&cwnd=252&unsent_bytes=0&cid=2e6e38ba2067fca2&ts=1518&x=0\"', Authorization: 'sanitized to prevent exposure of secrets' }, body: null, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Should not verify VC with invalid \"proof.previousProof\".: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 26 Jan 2025 05:06:29 GMT', 'content-type': 'text/html; charset=utf-8', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'cache-control': 'no-cache,no-store', expires: '-1', pragma: 'no-cache', 'x-envoy-upstream-service-time': '8', 'cf-cache-status': 'DYNAMIC', 'report-to': '{\"endpoints\":[{\"url\":\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=zefkVreUOMTwS94bXjzgyc1TDvLNVFo8V8boms1ugIMA1L%2FStEd2nBc5IGuved1fT6vtU9IBLfyFaB8tf8aDkotbOAJY3bk6CWjlYSE7NOpFW4QtqqLR6TMOsOvyfuJyFQiw%2FA7ISQFclS1t6Nup\"}],\"group\":\"cf-nel\",\"max_age\":604800}', nel: '{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}', server: 'cloudflare', 'cf-ray': '907df95589507c50-LAX', 'content-encoding': 'br', 'server-timing': 'cfL4;desc=\"?proto=TCP&rtt=8759&min_rtt=8127&rtt_var=708&sent=47&recv=32&lost=0&retrans=0&sent_bytes=32961&recv_bytes=15800&delivery_rate=685714&cwnd=252&unsent_bytes=0&cid=2e6e38ba2067fca2&ts=1518&x=0\"', Authorization: 'sanitized to prevent exposure of secrets' }, body: null, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationFail (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:83:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/suites/verify.js:306:9)"
              }
            },
            {
              "type": "test",
              "title": "If any element of previousProof list has an id attribute that does not match the id attribute of any element of allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20any%20element%20of%20previousProof%20list%20has%20an%20id%20attribute%20that%20does%20not%20match%20the%20id%20attribute%20of%20any%20element%20of%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n        await verificationFail({\n          credential: credentials.clone('missingPreviousProofArray'),\n          verifier,\n          reason: 'Should not verify VC with invalid \"proof.previousProof\".'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "QDCxWQdkgzmaMA2bzyUTX",
              "ctx": null,
              "_testId": "urn:uuid:940ae658-a73e-490d-9f25-db2df45c9b4e",
              "cell": {
                "columnId": "bovine",
                "rowId": "If any element of previousProof list has an id attribute that does not match the id attribute of any element of allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20any%20element%20of%20previousProof%20list%20has%20an%20id%20attribute%20that%20does%20not%20match%20the%20id%20attribute%20of%20any%20element%20of%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 66589,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 144,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "Each value identifies another data integrity proof, all of which MUST also verify for the current proof to be considered verified",
          "link": "https://w3c.github.io/vc-data-integrity/#:~:text=Each%20value%20identifies%20another%20data%20integrity%20proof%2C%20all%20of%20which%20MUST%20also%20verify%20for%20the%20current%20proof%20to%20be%20considered%20verified",
          "cells": [
            {
              "type": "test",
              "title": "Each value identifies another data integrity proof, all of which MUST also verify for the current proof to be considered verified",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=Each%20value%20identifies%20another%20data%20integrity%20proof%2C%20all%20of%20which%20MUST%20also%20verify%20for%20the%20current%20proof%20to%20be%20considered%20verified';\n        await verificationFail({\n          credential: credentials.clone('previousProofFail'),\n          verifier,\n          reason: 'Should not verify VC with a \"previousProof\" that does ' +\n          'not verify.'\n        });\n\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "CEAfWLPcxsKJNAj2STIIb",
              "ctx": null,
              "_testId": "urn:uuid:4c6a5bbf-371c-4993-95bd-60846f01a8e2",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "Each value identifies another data integrity proof, all of which MUST also verify for the current proof to be considered verified"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=Each%20value%20identifies%20another%20data%20integrity%20proof%2C%20all%20of%20which%20MUST%20also%20verify%20for%20the%20current%20proof%20to%20be%20considered%20verified",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 18366,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 68,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "Each value identifies another data integrity proof, all of which MUST also verify for the current proof to be considered verified",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=Each%20value%20identifies%20another%20data%20integrity%20proof%2C%20all%20of%20which%20MUST%20also%20verify%20for%20the%20current%20proof%20to%20be%20considered%20verified';\n        await verificationFail({\n          credential: credentials.clone('previousProofFail'),\n          verifier,\n          reason: 'Should not verify VC with a \"previousProof\" that does ' +\n          'not verify.'\n        });\n\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "CtFlPjii4dCwlNLWP7nHR",
              "ctx": null,
              "_testId": "urn:uuid:87898d21-6ecb-481e-8f2b-ee7c8588419f",
              "cell": {
                "columnId": "Aviary Tech",
                "rowId": "Each value identifies another data integrity proof, all of which MUST also verify for the current proof to be considered verified"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=Each%20value%20identifies%20another%20data%20integrity%20proof%2C%20all%20of%20which%20MUST%20also%20verify%20for%20the%20current%20proof%20to%20be%20considered%20verified",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19604,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 60,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "Each value identifies another data integrity proof, all of which MUST also verify for the current proof to be considered verified",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=Each%20value%20identifies%20another%20data%20integrity%20proof%2C%20all%20of%20which%20MUST%20also%20verify%20for%20the%20current%20proof%20to%20be%20considered%20verified';\n        await verificationFail({\n          credential: credentials.clone('previousProofFail'),\n          verifier,\n          reason: 'Should not verify VC with a \"previousProof\" that does ' +\n          'not verify.'\n        });\n\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "AaBj6j734Xhrd8pZ6XJAZ",
              "ctx": null,
              "_testId": "urn:uuid:41c691ed-8927-4a86-8a5d-efb74f16ba7a",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "Each value identifies another data integrity proof, all of which MUST also verify for the current proof to be considered verified"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=Each%20value%20identifies%20another%20data%20integrity%20proof%2C%20all%20of%20which%20MUST%20also%20verify%20for%20the%20current%20proof%20to%20be%20considered%20verified",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 21593,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 96,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Each value identifies another data integrity proof, all of which MUST also verify for the current proof to be considered verified",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=Each%20value%20identifies%20another%20data%20integrity%20proof%2C%20all%20of%20which%20MUST%20also%20verify%20for%20the%20current%20proof%20to%20be%20considered%20verified';\n        await verificationFail({\n          credential: credentials.clone('previousProofFail'),\n          verifier,\n          reason: 'Should not verify VC with a \"previousProof\" that does ' +\n          'not verify.'\n        });\n\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "GR-gSiE-yu7q5QSTZ-vf1",
              "ctx": null,
              "_testId": "urn:uuid:858ba8d4-e344-4e95-aecc-0c29e909113b",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "Each value identifies another data integrity proof, all of which MUST also verify for the current proof to be considered verified"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=Each%20value%20identifies%20another%20data%20integrity%20proof%2C%20all%20of%20which%20MUST%20also%20verify%20for%20the%20current%20proof%20to%20be%20considered%20verified",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 30122,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 21,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Each value identifies another data integrity proof, all of which MUST also verify for the current proof to be considered verified",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=Each%20value%20identifies%20another%20data%20integrity%20proof%2C%20all%20of%20which%20MUST%20also%20verify%20for%20the%20current%20proof%20to%20be%20considered%20verified';\n        await verificationFail({\n          credential: credentials.clone('previousProofFail'),\n          verifier,\n          reason: 'Should not verify VC with a \"previousProof\" that does ' +\n          'not verify.'\n        });\n\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "axNKa1xcoGlQzOQTJcOzF",
              "ctx": null,
              "_testId": "urn:uuid:bc13bc91-1708-48f3-badc-eb4b8f207c95",
              "cell": {
                "columnId": "Netis",
                "rowId": "Each value identifies another data integrity proof, all of which MUST also verify for the current proof to be considered verified"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=Each%20value%20identifies%20another%20data%20integrity%20proof%2C%20all%20of%20which%20MUST%20also%20verify%20for%20the%20current%20proof%20to%20be%20considered%20verified",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 33590,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 163,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Each value identifies another data integrity proof, all of which MUST also verify for the current proof to be considered verified",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=Each%20value%20identifies%20another%20data%20integrity%20proof%2C%20all%20of%20which%20MUST%20also%20verify%20for%20the%20current%20proof%20to%20be%20considered%20verified';\n        await verificationFail({\n          credential: credentials.clone('previousProofFail'),\n          verifier,\n          reason: 'Should not verify VC with a \"previousProof\" that does ' +\n          'not verify.'\n        });\n\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "7HtVI6O_1Gd2wEyGqdagm",
              "ctx": null,
              "_testId": "urn:uuid:1d0c430a-0638-4220-87c2-f110a57a2c7f",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "Each value identifies another data integrity proof, all of which MUST also verify for the current proof to be considered verified"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=Each%20value%20identifies%20another%20data%20integrity%20proof%2C%20all%20of%20which%20MUST%20also%20verify%20for%20the%20current%20proof%20to%20be%20considered%20verified",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 36732,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 146,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Each value identifies another data integrity proof, all of which MUST also verify for the current proof to be considered verified",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=Each%20value%20identifies%20another%20data%20integrity%20proof%2C%20all%20of%20which%20MUST%20also%20verify%20for%20the%20current%20proof%20to%20be%20considered%20verified';\n        await verificationFail({\n          credential: credentials.clone('previousProofFail'),\n          verifier,\n          reason: 'Should not verify VC with a \"previousProof\" that does ' +\n          'not verify.'\n        });\n\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "YDUokIHMIbQFTHZgMFsnx",
              "ctx": null,
              "_testId": "urn:uuid:74d2b699-3361-4da2-9adb-1b087440f86a",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "Each value identifies another data integrity proof, all of which MUST also verify for the current proof to be considered verified"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=Each%20value%20identifies%20another%20data%20integrity%20proof%2C%20all%20of%20which%20MUST%20also%20verify%20for%20the%20current%20proof%20to%20be%20considered%20verified",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 38798,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 102,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Each value identifies another data integrity proof, all of which MUST also verify for the current proof to be considered verified",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=Each%20value%20identifies%20another%20data%20integrity%20proof%2C%20all%20of%20which%20MUST%20also%20verify%20for%20the%20current%20proof%20to%20be%20considered%20verified';\n        await verificationFail({\n          credential: credentials.clone('previousProofFail'),\n          verifier,\n          reason: 'Should not verify VC with a \"previousProof\" that does ' +\n          'not verify.'\n        });\n\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "V_bOytb15rSWxo4duA0Vu",
              "ctx": null,
              "_testId": "urn:uuid:19ec4830-9856-4958-b2c3-104aff72aa0e",
              "cell": {
                "columnId": "Trential",
                "rowId": "Each value identifies another data integrity proof, all of which MUST also verify for the current proof to be considered verified"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=Each%20value%20identifies%20another%20data%20integrity%20proof%2C%20all%20of%20which%20MUST%20also%20verify%20for%20the%20current%20proof%20to%20be%20considered%20verified",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 59632,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1716,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Each value identifies another data integrity proof, all of which MUST also verify for the current proof to be considered verified",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=Each%20value%20identifies%20another%20data%20integrity%20proof%2C%20all%20of%20which%20MUST%20also%20verify%20for%20the%20current%20proof%20to%20be%20considered%20verified';\n        await verificationFail({\n          credential: credentials.clone('previousProofFail'),\n          verifier,\n          reason: 'Should not verify VC with a \"previousProof\" that does ' +\n          'not verify.'\n        });\n\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "0ctWYnuH-3ybgeFapgf9R",
              "ctx": null,
              "_testId": "urn:uuid:f43f6175-c095-4fde-9c63-a3a509ea91b2",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "Each value identifies another data integrity proof, all of which MUST also verify for the current proof to be considered verified"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=Each%20value%20identifies%20another%20data%20integrity%20proof%2C%20all%20of%20which%20MUST%20also%20verify%20for%20the%20current%20proof%20to%20be%20considered%20verified",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 62888,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 98,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Should not verify VC with a \"previousProof\" that does not verify.: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 26 Jan 2025 05:06:29 GMT', 'content-type': 'text/html; charset=utf-8', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'cache-control': 'no-cache,no-store', expires: '-1', pragma: 'no-cache', 'x-envoy-upstream-service-time': '8', 'cf-cache-status': 'DYNAMIC', 'report-to': '{\"endpoints\":[{\"url\":\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=w2VLLFmVg7X2cwMl363TCPjRAu1ZjzqwGFMfeeqqAaJIS9xs8BmgdMkFOC3CHu%2Fz%2FD2qxnbcPuAo%2Fk8dxNfioxUfDR0Gu5HRfGJYBqgAlHaRfrhrX5nuqOfm9MdD5OBezImKQUeHD3GKwW244ZcL\"}],\"group\":\"cf-nel\",\"max_age\":604800}', nel: '{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}', server: 'cloudflare', 'cf-ray': '907df9562a277c50-LAX', 'content-encoding': 'br', 'server-timing': 'cfL4;desc=\"?proto=TCP&rtt=8711&min_rtt=8127&rtt_var=627&sent=51&recv=35&lost=0&retrans=0&sent_bytes=35688&recv_bytes=17631&delivery_rate=685714&cwnd=252&unsent_bytes=0&cid=2e6e38ba2067fca2&ts=1617&x=0\"', Authorization: 'sanitized to prevent exposure of secrets' }, body: null, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Should not verify VC with a \"previousProof\" that does not verify.: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 26 Jan 2025 05:06:29 GMT', 'content-type': 'text/html; charset=utf-8', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'cache-control': 'no-cache,no-store', expires: '-1', pragma: 'no-cache', 'x-envoy-upstream-service-time': '8', 'cf-cache-status': 'DYNAMIC', 'report-to': '{\"endpoints\":[{\"url\":\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=w2VLLFmVg7X2cwMl363TCPjRAu1ZjzqwGFMfeeqqAaJIS9xs8BmgdMkFOC3CHu%2Fz%2FD2qxnbcPuAo%2Fk8dxNfioxUfDR0Gu5HRfGJYBqgAlHaRfrhrX5nuqOfm9MdD5OBezImKQUeHD3GKwW244ZcL\"}],\"group\":\"cf-nel\",\"max_age\":604800}', nel: '{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}', server: 'cloudflare', 'cf-ray': '907df9562a277c50-LAX', 'content-encoding': 'br', 'server-timing': 'cfL4;desc=\"?proto=TCP&rtt=8711&min_rtt=8127&rtt_var=627&sent=51&recv=35&lost=0&retrans=0&sent_bytes=35688&recv_bytes=17631&delivery_rate=685714&cwnd=252&unsent_bytes=0&cid=2e6e38ba2067fca2&ts=1617&x=0\"', Authorization: 'sanitized to prevent exposure of secrets' }, body: null, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationFail (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:83:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/suites/verify.js:316:9)"
              }
            },
            {
              "type": "test",
              "title": "Each value identifies another data integrity proof, all of which MUST also verify for the current proof to be considered verified",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=Each%20value%20identifies%20another%20data%20integrity%20proof%2C%20all%20of%20which%20MUST%20also%20verify%20for%20the%20current%20proof%20to%20be%20considered%20verified';\n        await verificationFail({\n          credential: credentials.clone('previousProofFail'),\n          verifier,\n          reason: 'Should not verify VC with a \"previousProof\" that does ' +\n          'not verify.'\n        });\n\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "QDCxWQdkgzmaMA2bzyUTX",
              "ctx": null,
              "_testId": "urn:uuid:74968078-b723-4038-bc51-307e33978eb9",
              "cell": {
                "columnId": "bovine",
                "rowId": "Each value identifies another data integrity proof, all of which MUST also verify for the current proof to be considered verified"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=Each%20value%20identifies%20another%20data%20integrity%20proof%2C%20all%20of%20which%20MUST%20also%20verify%20for%20the%20current%20proof%20to%20be%20considered%20verified",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 66733,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 145,
              "state": "passed",
              "speed": "slow"
            }
          ]
        }
      ]
    },
    {
      "title": "eddsa-rdfc-2022 (interop)",
      "ctx": null,
      "suites": [],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [
        {
          "title": "\"before all\" hook in \"eddsa-rdfc-2022 (interop)\"",
          "body": "async function() {\n    const credentials = await generateTestData();\n    validVc = credentials.clone('validVc');\n  }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "uTvFuKZ94YGr-Ymq8y8Tj",
          "ctx": null,
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 66879,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 27,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"eddsa-rdfc-2022 (interop)\"",
          "body": "async function() {\n      const [issuer] = endpoints;\n      try {\n        issuedVc = await createInitialVc({issuer, vc: validVc});\n      } catch(e) {\n        console.error(`issuer ${issuerName} failed to issue interop VC`, e);\n      }\n    }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "uTvFuKZ94YGr-Ymq8y8Tj",
          "ctx": null,
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 66905,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 1319,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"eddsa-rdfc-2022 (interop)\"",
          "body": "async function() {\n      const [issuer] = endpoints;\n      try {\n        issuedVc = await createInitialVc({issuer, vc: validVc});\n      } catch(e) {\n        console.error(`issuer ${issuerName} failed to issue interop VC`, e);\n      }\n    }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "uTvFuKZ94YGr-Ymq8y8Tj",
          "ctx": null,
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 68224,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 299,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"eddsa-rdfc-2022 (interop)\"",
          "body": "async function() {\n      const [issuer] = endpoints;\n      try {\n        issuedVc = await createInitialVc({issuer, vc: validVc});\n      } catch(e) {\n        console.error(`issuer ${issuerName} failed to issue interop VC`, e);\n      }\n    }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "uTvFuKZ94YGr-Ymq8y8Tj",
          "ctx": null,
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 68524,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 430,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"eddsa-rdfc-2022 (interop)\"",
          "body": "async function() {\n      const [issuer] = endpoints;\n      try {\n        issuedVc = await createInitialVc({issuer, vc: validVc});\n      } catch(e) {\n        console.error(`issuer ${issuerName} failed to issue interop VC`, e);\n      }\n    }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "uTvFuKZ94YGr-Ymq8y8Tj",
          "ctx": null,
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 68954,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 70,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"eddsa-rdfc-2022 (interop)\"",
          "body": "async function() {\n      const [issuer] = endpoints;\n      try {\n        issuedVc = await createInitialVc({issuer, vc: validVc});\n      } catch(e) {\n        console.error(`issuer ${issuerName} failed to issue interop VC`, e);\n      }\n    }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "uTvFuKZ94YGr-Ymq8y8Tj",
          "ctx": null,
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 69024,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 558,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"eddsa-rdfc-2022 (interop)\"",
          "body": "async function() {\n      const [issuer] = endpoints;\n      try {\n        issuedVc = await createInitialVc({issuer, vc: validVc});\n      } catch(e) {\n        console.error(`issuer ${issuerName} failed to issue interop VC`, e);\n      }\n    }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "uTvFuKZ94YGr-Ymq8y8Tj",
          "ctx": null,
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 69582,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 152,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"eddsa-rdfc-2022 (interop)\"",
          "body": "async function() {\n      const [issuer] = endpoints;\n      try {\n        issuedVc = await createInitialVc({issuer, vc: validVc});\n      } catch(e) {\n        console.error(`issuer ${issuerName} failed to issue interop VC`, e);\n      }\n    }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "uTvFuKZ94YGr-Ymq8y8Tj",
          "ctx": null,
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 69734,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 1015,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"eddsa-rdfc-2022 (interop)\"",
          "body": "async function() {\n      const [issuer] = endpoints;\n      try {\n        issuedVc = await createInitialVc({issuer, vc: validVc});\n      } catch(e) {\n        console.error(`issuer ${issuerName} failed to issue interop VC`, e);\n      }\n    }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "uTvFuKZ94YGr-Ymq8y8Tj",
          "ctx": null,
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 70749,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 284,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"eddsa-rdfc-2022 (interop)\"",
          "body": "async function() {\n      const [issuer] = endpoints;\n      try {\n        issuedVc = await createInitialVc({issuer, vc: validVc});\n      } catch(e) {\n        console.error(`issuer ${issuerName} failed to issue interop VC`, e);\n      }\n    }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "uTvFuKZ94YGr-Ymq8y8Tj",
          "ctx": null,
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 71033,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 687,
          "_error": null
        }
      ],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "Ika60aoT9ncTXtTubybzs",
      "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Issuer",
      "columnLabel": "Verifier",
      "_testId": "urn:uuid:e33f3fda-ccb1-4df4-a719-9731a3d9bb81",
      "columns": [
        "apicatalog.com",
        "Aviary Tech",
        "Digital Bazaar",
        "Grotto Networking",
        "Netis",
        "Procivis One Core",
        "SpruceID",
        "Trential",
        "Trinsic",
        "bovine"
      ],
      "rows": [
        {
          "id": "apicatalog.com",
          "cells": [
            {
              "type": "test",
              "title": "apicatalog.com should verify apicatalog.com",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "uTvFuKZ94YGr-Ymq8y8Tj",
              "ctx": null,
              "_testId": "urn:uuid:1d6ff760-5e78-4a79-9e54-4d9d116b174c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "apicatalog.com",
                "columnId": "apicatalog.com"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 71720,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 62,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: A non-empty JSON Pointer must … { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":\"https://www.w3.org/ns/credentials/v2\",\"id\":\"urn:uuid:2f7e3e6a-ef79-4770-88c4-27ddc4b2002f\",\"type\":[\"VerifiableCredential\"],\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\",\"name\":\"ExampleClaim\"},\"issuer\":\"https://us-central1-api-catalog.cloudfunctions.net/vc-api-issue-eddsa-rdfc-2022\",\"credentialStatus\":{\"id\":\"https://iron.apicatalog.com/status/6x9gqgj0GujhrdxGfShY/129554\",\"type\":\"BitstringStatusListEntry\",\"statusPurpose\":\"revocation\",\"statusListIndex\":\"129554\",\"statusListCredential\":\"https://firebasestorage.googleapis.com/v0/b/vc-status/o/6x9gqgj0GujhrdxGfShY?alt=media\"},\"proof\":{\"type\":\"DataIntegrityProof\",\"created\":\"2025-01-26T05:06:33Z\",\"proofPurpose\":\"assertionMethod\",\"cryptosuite\":\"eddsa-rdfc-2022\",\"verificationMethod\":\"did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7#z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7\",\"proofValue\":\"z5HRdz3KBwDaybWtHNxA8qcwcHrnZ8Qxa9RBdRi8inFEY5Vmr3RttThtGKD9CossqWHSG3DDrRpLDeo5Q7Qce3Npn\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": "https://www.w3.org/ns/credentials/v2",
                        "id": "urn:uuid:2f7e3e6a-ef79-4770-88c4-27ddc4b2002f",
                        "type": [
                          "VerifiableCredential"
                        ],
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b",
                          "name": "ExampleClaim"
                        },
                        "issuer": "https://us-central1-api-catalog.cloudfunctions.net/vc-api-issue-eddsa-rdfc-2022",
                        "credentialStatus": {
                          "id": "https://iron.apicatalog.com/status/6x9gqgj0GujhrdxGfShY/129554",
                          "type": "BitstringStatusListEntry",
                          "statusPurpose": "revocation",
                          "statusListIndex": "129554",
                          "statusListCredential": "https://firebasestorage.googleapis.com/v0/b/vc-status/o/6x9gqgj0GujhrdxGfShY?alt=media"
                        },
                        "proof": {
                          "type": "DataIntegrityProof",
                          "created": "2025-01-26T05:06:33Z",
                          "proofPurpose": "assertionMethod",
                          "cryptosuite": "eddsa-rdfc-2022",
                          "verificationMethod": "did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7#z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7",
                          "proofValue": "z5HRdz3KBwDaybWtHNxA8qcwcHrnZ8Qxa9RBdRi8inFEY5Vmr3RttThtGKD9CossqWHSG3DDrRpLDeo5Q7Qce3Npn"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://us-central1-api-catalog.cloudfunctions.net/vc-api-verify",
                  "status": 400,
                  "data": {
                    "message": "A non-empty JSON Pointer must begin with a '/'"
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: A non-empty JSON Pointer must … { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js:56:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "Aviary Tech should verify apicatalog.com",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "uTvFuKZ94YGr-Ymq8y8Tj",
              "ctx": null,
              "_testId": "urn:uuid:2dd7f289-0de4-4338-8fd7-15327748a2c3",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "apicatalog.com",
                "columnId": "Aviary Tech"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 71782,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 51,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "Digital Bazaar should verify apicatalog.com",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "uTvFuKZ94YGr-Ymq8y8Tj",
              "ctx": null,
              "_testId": "urn:uuid:36174372-4fdf-455a-9651-a4ff5dbeae0c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "apicatalog.com",
                "columnId": "Digital Bazaar"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 71833,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 340,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: A validation error occurred in… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": "https://www.w3.org/ns/credentials/v2",
                        "id": "urn:uuid:2f7e3e6a-ef79-4770-88c4-27ddc4b2002f",
                        "type": [
                          "VerifiableCredential"
                        ],
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b",
                          "name": "ExampleClaim"
                        },
                        "issuer": "https://us-central1-api-catalog.cloudfunctions.net/vc-api-issue-eddsa-rdfc-2022",
                        "credentialStatus": {
                          "id": "https://iron.apicatalog.com/status/6x9gqgj0GujhrdxGfShY/129554",
                          "type": "BitstringStatusListEntry",
                          "statusPurpose": "revocation",
                          "statusListIndex": "129554",
                          "statusListCredential": "https://firebasestorage.googleapis.com/v0/b/vc-status/o/6x9gqgj0GujhrdxGfShY?alt=media"
                        },
                        "proof": {
                          "type": "DataIntegrityProof",
                          "created": "2025-01-26T05:06:33Z",
                          "proofPurpose": "assertionMethod",
                          "cryptosuite": "eddsa-rdfc-2022",
                          "verificationMethod": "did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7#z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7",
                          "proofValue": "z5HRdz3KBwDaybWtHNxA8qcwcHrnZ8Qxa9RBdRi8inFEY5Vmr3RttThtGKD9CossqWHSG3DDrRpLDeo5Q7Qce3Npn"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half",
                    "body": "{\"verifiableCredential\":{\"@context\":\"https://www.w3.org/ns/credentials/v2\",\"id\":\"urn:uuid:2f7e3e6a-ef79-4770-88c4-27ddc4b2002f\",\"type\":[\"VerifiableCredential\"],\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\",\"name\":\"ExampleClaim\"},\"issuer\":\"https://us-central1-api-catalog.cloudfunctions.net/vc-api-issue-eddsa-rdfc-2022\",\"credentialStatus\":{\"id\":\"https://iron.apicatalog.com/status/6x9gqgj0GujhrdxGfShY/129554\",\"type\":\"BitstringStatusListEntry\",\"statusPurpose\":\"revocation\",\"statusListIndex\":\"129554\",\"statusListCredential\":\"https://firebasestorage.googleapis.com/v0/b/vc-status/o/6x9gqgj0GujhrdxGfShY?alt=media\"},\"proof\":{\"type\":\"DataIntegrityProof\",\"created\":\"2025-01-26T05:06:33Z\",\"proofPurpose\":\"assertionMethod\",\"cryptosuite\":\"eddsa-rdfc-2022\",\"verificationMethod\":\"did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7#z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7\",\"proofValue\":\"z5HRdz3KBwDaybWtHNxA8qcwcHrnZ8Qxa9RBdRi8inFEY5Vmr3RttThtGKD9CossqWHSG3DDrRpLDeo5Q7Qce3Npn\"}},\"options\":{\"checks\":[\"proof\"]}}"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc2.veresverifier.dev/verifiers/z19w7KofwvE2nkJeRVLp8NDxz/credentials/verify",
                  "status": 400,
                  "data": {
                    "name": "ValidationError",
                    "message": "A validation error occurred in the 'Verify Credential Body' validator.",
                    "details": {
                      "errors": [
                        {
                          "name": "ValidationError",
                          "message": "should be array",
                          "details": {
                            "instance": {
                              "verifiableCredential": {
                                "@context": "https://www.w3.org/ns/credentials/v2",
                                "id": "urn:uuid:2f7e3e6a-ef79-4770-88c4-27ddc4b2002f",
                                "type": [
                                  "VerifiableCredential"
                                ],
                                "credentialSubject": {
                                  "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b",
                                  "name": "ExampleClaim"
                                },
                                "issuer": "https://us-central1-api-catalog.cloudfunctions.net/vc-api-issue-eddsa-rdfc-2022",
                                "credentialStatus": {
                                  "id": "https://iron.apicatalog.com/status/6x9gqgj0GujhrdxGfShY/129554",
                                  "type": "BitstringStatusListEntry",
                                  "statusPurpose": "revocation",
                                  "statusListIndex": "129554",
                                  "statusListCredential": "https://firebasestorage.googleapis.com/v0/b/vc-status/o/6x9gqgj0GujhrdxGfShY?alt=media"
                                },
                                "proof": {
                                  "type": "DataIntegrityProof",
                                  "created": "2025-01-26T05:06:33Z",
                                  "proofPurpose": "assertionMethod",
                                  "cryptosuite": "eddsa-rdfc-2022",
                                  "verificationMethod": "did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7#z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7",
                                  "proofValue": "z5HRdz3KBwDaybWtHNxA8qcwcHrnZ8Qxa9RBdRi8inFEY5Vmr3RttThtGKD9CossqWHSG3DDrRpLDeo5Q7Qce3Npn"
                                }
                              },
                              "options": {
                                "checks": [
                                  "proof"
                                ]
                              }
                            },
                            "params": {
                              "type": "array"
                            },
                            "path": ".verifiableCredential['@context']",
                            "public": true,
                            "schemaPath": "#/properties/verifiableCredential/anyOf/0/properties/%40context/type",
                            "schema": {
                              "description": "",
                              "title": ""
                            },
                            "value": "https://www.w3.org/ns/credentials/v2"
                          },
                          "cause": null,
                          "stack": "ValidationError: should be array\n    at _createError (file:///home/node/app/node_modules/@bedrock/validation/lib/index.js:240:17)\n    at validate (file:///home/node/app/node_modules/@bedrock/validation/lib/index.js:88:14)\n    at validate (file:///home/node/app/node_modules/@bedrock/validation/lib/index.js:181:22)\n    at Layer.handle [as handle_request] (/home/node/app/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/node/app/node_modules/express/lib/router/route.js:149:13)\n    at cors (/home/node/app/node_modules/cors/lib/index.js:188:7)\n    at /home/node/app/node_modules/cors/lib/index.js:224:17\n    at originCallback (/home/node/app/node_modules/cors/lib/index.js:214:15)\n    at /home/node/app/node_modules/cors/lib/index.js:219:13\n    at optionsCallback (/home/node/app/node_modules/cors/lib/index.js:199:9)"
                        },
                        {
                          "name": "ValidationError",
                          "message": "should NOT have additional properties",
                          "details": {
                            "instance": {
                              "verifiableCredential": {
                                "@context": "https://www.w3.org/ns/credentials/v2",
                                "id": "urn:uuid:2f7e3e6a-ef79-4770-88c4-27ddc4b2002f",
                                "type": [
                                  "VerifiableCredential"
                                ],
                                "credentialSubject": {
                                  "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b",
                                  "name": "ExampleClaim"
                                },
                                "issuer": "https://us-central1-api-catalog.cloudfunctions.net/vc-api-issue-eddsa-rdfc-2022",
                                "credentialStatus": {
                                  "id": "https://iron.apicatalog.com/status/6x9gqgj0GujhrdxGfShY/129554",
                                  "type": "BitstringStatusListEntry",
                                  "statusPurpose": "revocation",
                                  "statusListIndex": "129554",
                                  "statusListCredential": "https://firebasestorage.googleapis.com/v0/b/vc-status/o/6x9gqgj0GujhrdxGfShY?alt=media"
                                },
                                "proof": {
                                  "type": "DataIntegrityProof",
                                  "created": "2025-01-26T05:06:33Z",
                                  "proofPurpose": "assertionMethod",
                                  "cryptosuite": "eddsa-rdfc-2022",
                                  "verificationMethod": "did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7#z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7",
                                  "proofValue": "z5HRdz3KBwDaybWtHNxA8qcwcHrnZ8Qxa9RBdRi8inFEY5Vmr3RttThtGKD9CossqWHSG3DDrRpLDeo5Q7Qce3Npn"
                                }
                              },
                              "options": {
                                "checks": [
                                  "proof"
                                ]
                              }
                            },
                            "params": {
                              "additionalProperty": "credentialSubject"
                            },
                            "path": ".verifiableCredential",
                            "public": true,
                            "schemaPath": "#/properties/verifiableCredential/anyOf/1/additionalProperties",
                            "schema": {
                              "description": "",
                              "title": "Enveloped Verifiable Credential"
                            },
                            "value": {
                              "@context": "https://www.w3.org/ns/credentials/v2",
                              "id": "urn:uuid:2f7e3e6a-ef79-4770-88c4-27ddc4b2002f",
                              "type": [
                                "VerifiableCredential"
                              ],
                              "credentialSubject": {
                                "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b",
                                "name": "ExampleClaim"
                              },
                              "issuer": "https://us-central1-api-catalog.cloudfunctions.net/vc-api-issue-eddsa-rdfc-2022",
                              "credentialStatus": {
                                "id": "https://iron.apicatalog.com/status/6x9gqgj0GujhrdxGfShY/129554",
                                "type": "BitstringStatusListEntry",
                                "statusPurpose": "revocation",
                                "statusListIndex": "129554",
                                "statusListCredential": "https://firebasestorage.googleapis.com/v0/b/vc-status/o/6x9gqgj0GujhrdxGfShY?alt=media"
                              },
                              "proof": {
                                "type": "DataIntegrityProof",
                                "created": "2025-01-26T05:06:33Z",
                                "proofPurpose": "assertionMethod",
                                "cryptosuite": "eddsa-rdfc-2022",
                                "verificationMethod": "did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7#z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7",
                                "proofValue": "z5HRdz3KBwDaybWtHNxA8qcwcHrnZ8Qxa9RBdRi8inFEY5Vmr3RttThtGKD9CossqWHSG3DDrRpLDeo5Q7Qce3Npn"
                              }
                            }
                          },
                          "cause": null,
                          "stack": "ValidationError: should NOT have additional properties\n    at _createError (file:///home/node/app/node_modules/@bedrock/validation/lib/index.js:240:17)\n    at validate (file:///home/node/app/node_modules/@bedrock/validation/lib/index.js:88:14)\n    at validate (file:///home/node/app/node_modules/@bedrock/validation/lib/index.js:181:22)\n    at Layer.handle [as handle_request] (/home/node/app/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/node/app/node_modules/express/lib/router/route.js:149:13)\n    at cors (/home/node/app/node_modules/cors/lib/index.js:188:7)\n    at /home/node/app/node_modules/cors/lib/index.js:224:17\n    at originCallback (/home/node/app/node_modules/cors/lib/index.js:214:15)\n    at /home/node/app/node_modules/cors/lib/index.js:219:13\n    at optionsCallback (/home/node/app/node_modules/cors/lib/index.js:199:9)"
                        },
                        {
                          "name": "ValidationError",
                          "message": "should match some schema in anyOf",
                          "details": {
                            "instance": {
                              "verifiableCredential": {
                                "@context": "https://www.w3.org/ns/credentials/v2",
                                "id": "urn:uuid:2f7e3e6a-ef79-4770-88c4-27ddc4b2002f",
                                "type": [
                                  "VerifiableCredential"
                                ],
                                "credentialSubject": {
                                  "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b",
                                  "name": "ExampleClaim"
                                },
                                "issuer": "https://us-central1-api-catalog.cloudfunctions.net/vc-api-issue-eddsa-rdfc-2022",
                                "credentialStatus": {
                                  "id": "https://iron.apicatalog.com/status/6x9gqgj0GujhrdxGfShY/129554",
                                  "type": "BitstringStatusListEntry",
                                  "statusPurpose": "revocation",
                                  "statusListIndex": "129554",
                                  "statusListCredential": "https://firebasestorage.googleapis.com/v0/b/vc-status/o/6x9gqgj0GujhrdxGfShY?alt=media"
                                },
                                "proof": {
                                  "type": "DataIntegrityProof",
                                  "created": "2025-01-26T05:06:33Z",
                                  "proofPurpose": "assertionMethod",
                                  "cryptosuite": "eddsa-rdfc-2022",
                                  "verificationMethod": "did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7#z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7",
                                  "proofValue": "z5HRdz3KBwDaybWtHNxA8qcwcHrnZ8Qxa9RBdRi8inFEY5Vmr3RttThtGKD9CossqWHSG3DDrRpLDeo5Q7Qce3Npn"
                                }
                              },
                              "options": {
                                "checks": [
                                  "proof"
                                ]
                              }
                            },
                            "params": {},
                            "path": ".verifiableCredential",
                            "public": true,
                            "schemaPath": "#/properties/verifiableCredential/anyOf",
                            "schema": {
                              "description": "",
                              "title": {
                                "title": "Verifiable Credential",
                                "type": "object",
                                "required": [
                                  "@context",
                                  "credentialSubject",
                                  "issuer",
                                  "type"
                                ],
                                "additionalProperties": true,
                                "properties": {
                                  "@context": {
                                    "type": "array",
                                    "minItems": 1,
                                    "items": [
                                      {
                                        "oneOf": [
                                          {
                                            "const": "https://www.w3.org/2018/credentials/v1"
                                          },
                                          {
                                            "const": "https://www.w3.org/ns/credentials/v2"
                                          }
                                        ]
                                      }
                                    ],
                                    "additionalItems": {
                                      "anyOf": [
                                        {
                                          "type": "string"
                                        },
                                        {
                                          "type": "object"
                                        }
                                      ]
                                    }
                                  },
                                  "credentialSubject": {
                                    "anyOf": [
                                      {
                                        "type": "object"
                                      },
                                      {
                                        "type": "array",
                                        "minItems": 1,
                                        "items": {
                                          "type": "object"
                                        }
                                      }
                                    ]
                                  },
                                  "id": {
                                    "type": "string"
                                  },
                                  "issuer": {
                                    "title": "identifier or an object with an id",
                                    "anyOf": [
                                      {
                                        "title": "ID",
                                        "description": "A unique identifier.",
                                        "type": "string",
                                        "minLength": 1,
                                        "disallow": {
                                          "type": "string",
                                          "enum": [
                                            "0"
                                          ]
                                        }
                                      },
                                      {
                                        "type": "object",
                                        "required": [
                                          "id"
                                        ],
                                        "additionalProperties": true,
                                        "properties": {
                                          "id": {
                                            "title": "ID",
                                            "description": "A unique identifier.",
                                            "type": "string",
                                            "minLength": 1,
                                            "disallow": {
                                              "type": "string",
                                              "enum": [
                                                "0"
                                              ]
                                            }
                                          }
                                        }
                                      }
                                    ]
                                  },
                                  "type": {
                                    "type": "array",
                                    "minItems": 1,
                                    "items": [
                                      {
                                        "const": "VerifiableCredential"
                                      }
                                    ],
                                    "additionalItems": {
                                      "type": "string"
                                    }
                                  },
                                  "proof": {
                                    "title": "Proof",
                                    "anyOf": [
                                      {
                                        "type": "object"
                                      },
                                      {
                                        "type": "array",
                                        "minItems": 1,
                                        "items": {
                                          "type": "object"
                                        }
                                      }
                                    ]
                                  }
                                }
                              }
                            },
                            "value": {
                              "@context": "https://www.w3.org/ns/credentials/v2",
                              "id": "urn:uuid:2f7e3e6a-ef79-4770-88c4-27ddc4b2002f",
                              "type": [
                                "VerifiableCredential"
                              ],
                              "credentialSubject": {
                                "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b",
                                "name": "ExampleClaim"
                              },
                              "issuer": "https://us-central1-api-catalog.cloudfunctions.net/vc-api-issue-eddsa-rdfc-2022",
                              "credentialStatus": {
                                "id": "https://iron.apicatalog.com/status/6x9gqgj0GujhrdxGfShY/129554",
                                "type": "BitstringStatusListEntry",
                                "statusPurpose": "revocation",
                                "statusListIndex": "129554",
                                "statusListCredential": "https://firebasestorage.googleapis.com/v0/b/vc-status/o/6x9gqgj0GujhrdxGfShY?alt=media"
                              },
                              "proof": {
                                "type": "DataIntegrityProof",
                                "created": "2025-01-26T05:06:33Z",
                                "proofPurpose": "assertionMethod",
                                "cryptosuite": "eddsa-rdfc-2022",
                                "verificationMethod": "did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7#z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7",
                                "proofValue": "z5HRdz3KBwDaybWtHNxA8qcwcHrnZ8Qxa9RBdRi8inFEY5Vmr3RttThtGKD9CossqWHSG3DDrRpLDeo5Q7Qce3Npn"
                              }
                            }
                          },
                          "cause": null,
                          "stack": "ValidationError: should match some schema in anyOf\n    at _createError (file:///home/node/app/node_modules/@bedrock/validation/lib/index.js:240:17)\n    at validate (file:///home/node/app/node_modules/@bedrock/validation/lib/index.js:88:14)\n    at validate (file:///home/node/app/node_modules/@bedrock/validation/lib/index.js:181:22)\n    at Layer.handle [as handle_request] (/home/node/app/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/node/app/node_modules/express/lib/router/route.js:149:13)\n    at cors (/home/node/app/node_modules/cors/lib/index.js:188:7)\n    at /home/node/app/node_modules/cors/lib/index.js:224:17\n    at originCallback (/home/node/app/node_modules/cors/lib/index.js:214:15)\n    at /home/node/app/node_modules/cors/lib/index.js:219:13\n    at optionsCallback (/home/node/app/node_modules/cors/lib/index.js:199:9)"
                        }
                      ],
                      "httpStatusCode": 400
                    },
                    "cause": null,
                    "stack": "ValidationError: A validation error occurred in the 'Verify Credential Body' validator.\n    at _createError (file:///home/node/app/node_modules/@bedrock/validation/lib/index.js:246:17)\n    at validate (file:///home/node/app/node_modules/@bedrock/validation/lib/index.js:88:14)\n    at validate (file:///home/node/app/node_modules/@bedrock/validation/lib/index.js:181:22)\n    at Layer.handle [as handle_request] (/home/node/app/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/node/app/node_modules/express/lib/router/route.js:149:13)\n    at cors (/home/node/app/node_modules/cors/lib/index.js:188:7)\n    at /home/node/app/node_modules/cors/lib/index.js:224:17\n    at originCallback (/home/node/app/node_modules/cors/lib/index.js:214:15)\n    at /home/node/app/node_modules/cors/lib/index.js:219:13\n    at optionsCallback (/home/node/app/node_modules/cors/lib/index.js:199:9)",
                    "type": "ValidationError"
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: A validation error occurred in… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js:56:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "Grotto Networking should verify apicatalog.com",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "uTvFuKZ94YGr-Ymq8y8Tj",
              "ctx": null,
              "_testId": "urn:uuid:19373350-23f2-4787-b3bd-de60c19e1005",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "apicatalog.com",
                "columnId": "Grotto Networking"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 72174,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 21,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":\"https://www.w3.org/ns/credentials/v2\",\"id\":\"urn:uuid:2f7e3e6a-ef79-4770-88c4-27ddc4b2002f\",\"type\":[\"VerifiableCredential\"],\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\",\"name\":\"ExampleClaim\"},\"issuer\":\"https://us-central1-api-catalog.cloudfunctions.net/vc-api-issue-eddsa-rdfc-2022\",\"credentialStatus\":{\"id\":\"https://iron.apicatalog.com/status/6x9gqgj0GujhrdxGfShY/129554\",\"type\":\"BitstringStatusListEntry\",\"statusPurpose\":\"revocation\",\"statusListIndex\":\"129554\",\"statusListCredential\":\"https://firebasestorage.googleapis.com/v0/b/vc-status/o/6x9gqgj0GujhrdxGfShY?alt=media\"},\"proof\":{\"type\":\"DataIntegrityProof\",\"created\":\"2025-01-26T05:06:33Z\",\"proofPurpose\":\"assertionMethod\",\"cryptosuite\":\"eddsa-rdfc-2022\",\"verificationMethod\":\"did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7#z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7\",\"proofValue\":\"z5HRdz3KBwDaybWtHNxA8qcwcHrnZ8Qxa9RBdRi8inFEY5Vmr3RttThtGKD9CossqWHSG3DDrRpLDeo5Q7Qce3Npn\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": "https://www.w3.org/ns/credentials/v2",
                        "id": "urn:uuid:2f7e3e6a-ef79-4770-88c4-27ddc4b2002f",
                        "type": [
                          "VerifiableCredential"
                        ],
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b",
                          "name": "ExampleClaim"
                        },
                        "issuer": "https://us-central1-api-catalog.cloudfunctions.net/vc-api-issue-eddsa-rdfc-2022",
                        "credentialStatus": {
                          "id": "https://iron.apicatalog.com/status/6x9gqgj0GujhrdxGfShY/129554",
                          "type": "BitstringStatusListEntry",
                          "statusPurpose": "revocation",
                          "statusListIndex": "129554",
                          "statusListCredential": "https://firebasestorage.googleapis.com/v0/b/vc-status/o/6x9gqgj0GujhrdxGfShY?alt=media"
                        },
                        "proof": {
                          "type": "DataIntegrityProof",
                          "created": "2025-01-26T05:06:33Z",
                          "proofPurpose": "assertionMethod",
                          "cryptosuite": "eddsa-rdfc-2022",
                          "verificationMethod": "did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7#z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7",
                          "proofValue": "z5HRdz3KBwDaybWtHNxA8qcwcHrnZ8Qxa9RBdRi8inFEY5Vmr3RttThtGKD9CossqWHSG3DDrRpLDeo5Q7Qce3Npn"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://ecdsa-sd.grotto-networking.com/EdDSA-RDFC/credentials/verify",
                  "status": 400,
                  "data": {
                    "errors": [
                      "proof: must be array"
                    ]
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js:56:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "Netis should verify apicatalog.com",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "uTvFuKZ94YGr-Ymq8y8Tj",
              "ctx": null,
              "_testId": "urn:uuid:840a45f0-fc9a-48e5-adc6-f1b21dcd7fa6",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "apicatalog.com",
                "columnId": "Netis"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 72197,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 604,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":\"https://www.w3.org/ns/credentials/v2\",\"id\":\"urn:uuid:2f7e3e6a-ef79-4770-88c4-27ddc4b2002f\",\"type\":[\"VerifiableCredential\"],\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\",\"name\":\"ExampleClaim\"},\"issuer\":\"https://us-central1-api-catalog.cloudfunctions.net/vc-api-issue-eddsa-rdfc-2022\",\"credentialStatus\":{\"id\":\"https://iron.apicatalog.com/status/6x9gqgj0GujhrdxGfShY/129554\",\"type\":\"BitstringStatusListEntry\",\"statusPurpose\":\"revocation\",\"statusListIndex\":\"129554\",\"statusListCredential\":\"https://firebasestorage.googleapis.com/v0/b/vc-status/o/6x9gqgj0GujhrdxGfShY?alt=media\"},\"proof\":{\"type\":\"DataIntegrityProof\",\"created\":\"2025-01-26T05:06:33Z\",\"proofPurpose\":\"assertionMethod\",\"cryptosuite\":\"eddsa-rdfc-2022\",\"verificationMethod\":\"did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7#z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7\",\"proofValue\":\"z5HRdz3KBwDaybWtHNxA8qcwcHrnZ8Qxa9RBdRi8inFEY5Vmr3RttThtGKD9CossqWHSG3DDrRpLDeo5Q7Qce3Npn\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": "https://www.w3.org/ns/credentials/v2",
                        "id": "urn:uuid:2f7e3e6a-ef79-4770-88c4-27ddc4b2002f",
                        "type": [
                          "VerifiableCredential"
                        ],
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b",
                          "name": "ExampleClaim"
                        },
                        "issuer": "https://us-central1-api-catalog.cloudfunctions.net/vc-api-issue-eddsa-rdfc-2022",
                        "credentialStatus": {
                          "id": "https://iron.apicatalog.com/status/6x9gqgj0GujhrdxGfShY/129554",
                          "type": "BitstringStatusListEntry",
                          "statusPurpose": "revocation",
                          "statusListIndex": "129554",
                          "statusListCredential": "https://firebasestorage.googleapis.com/v0/b/vc-status/o/6x9gqgj0GujhrdxGfShY?alt=media"
                        },
                        "proof": {
                          "type": "DataIntegrityProof",
                          "created": "2025-01-26T05:06:33Z",
                          "proofPurpose": "assertionMethod",
                          "cryptosuite": "eddsa-rdfc-2022",
                          "verificationMethod": "did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7#z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7",
                          "proofValue": "z5HRdz3KBwDaybWtHNxA8qcwcHrnZ8Qxa9RBdRi8inFEY5Vmr3RttThtGKD9CossqWHSG3DDrRpLDeo5Q7Qce3Npn"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://test-api.mynext.id/api/v1/verifier/credential/vc-api/verify",
                  "status": 400
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js:56:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "Procivis One Core should verify apicatalog.com",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "uTvFuKZ94YGr-Ymq8y8Tj",
              "ctx": null,
              "_testId": "urn:uuid:de4e02a8-da14-48d6-b639-cead105de80c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "apicatalog.com",
                "columnId": "Procivis One Core"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 72802,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 142,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":\"https://www.w3.org/ns/credentials/v2\",\"id\":\"urn:uuid:2f7e3e6a-ef79-4770-88c4-27ddc4b2002f\",\"type\":[\"VerifiableCredential\"],\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\",\"name\":\"ExampleClaim\"},\"issuer\":\"https://us-central1-api-catalog.cloudfunctions.net/vc-api-issue-eddsa-rdfc-2022\",\"credentialStatus\":{\"id\":\"https://iron.apicatalog.com/status/6x9gqgj0GujhrdxGfShY/129554\",\"type\":\"BitstringStatusListEntry\",\"statusPurpose\":\"revocation\",\"statusListIndex\":\"129554\",\"statusListCredential\":\"https://firebasestorage.googleapis.com/v0/b/vc-status/o/6x9gqgj0GujhrdxGfShY?alt=media\"},\"proof\":{\"type\":\"DataIntegrityProof\",\"created\":\"2025-01-26T05:06:33Z\",\"proofPurpose\":\"assertionMethod\",\"cryptosuite\":\"eddsa-rdfc-2022\",\"verificationMethod\":\"did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7#z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7\",\"proofValue\":\"z5HRdz3KBwDaybWtHNxA8qcwcHrnZ8Qxa9RBdRi8inFEY5Vmr3RttThtGKD9CossqWHSG3DDrRpLDeo5Q7Qce3Npn\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": "https://www.w3.org/ns/credentials/v2",
                        "id": "urn:uuid:2f7e3e6a-ef79-4770-88c4-27ddc4b2002f",
                        "type": [
                          "VerifiableCredential"
                        ],
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b",
                          "name": "ExampleClaim"
                        },
                        "issuer": "https://us-central1-api-catalog.cloudfunctions.net/vc-api-issue-eddsa-rdfc-2022",
                        "credentialStatus": {
                          "id": "https://iron.apicatalog.com/status/6x9gqgj0GujhrdxGfShY/129554",
                          "type": "BitstringStatusListEntry",
                          "statusPurpose": "revocation",
                          "statusListIndex": "129554",
                          "statusListCredential": "https://firebasestorage.googleapis.com/v0/b/vc-status/o/6x9gqgj0GujhrdxGfShY?alt=media"
                        },
                        "proof": {
                          "type": "DataIntegrityProof",
                          "created": "2025-01-26T05:06:33Z",
                          "proofPurpose": "assertionMethod",
                          "cryptosuite": "eddsa-rdfc-2022",
                          "verificationMethod": "did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7#z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7",
                          "proofValue": "z5HRdz3KBwDaybWtHNxA8qcwcHrnZ8Qxa9RBdRi8inFEY5Vmr3RttThtGKD9CossqWHSG3DDrRpLDeo5Q7Qce3Npn"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://canivc.core.dev.procivis-one.com/vc-api/credentials/verify",
                  "status": 400,
                  "data": {
                    "errors": [
                      {
                        "status": 400,
                        "title": "Failed to deserialize the JSON body into the target type",
                        "detail": null
                      }
                    ]
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js:56:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "SpruceID should verify apicatalog.com",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "uTvFuKZ94YGr-Ymq8y8Tj",
              "ctx": null,
              "_testId": "urn:uuid:99ab4363-c0c1-4349-b1ec-78415002895c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "apicatalog.com",
                "columnId": "SpruceID"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 72945,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 111,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Trential should verify apicatalog.com",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "uTvFuKZ94YGr-Ymq8y8Tj",
              "ctx": null,
              "_testId": "urn:uuid:02c7ed46-9d49-4a63-8c1e-524a94909202",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "apicatalog.com",
                "columnId": "Trential"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 73057,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 255,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: \"https://www.w3.org/2018/crede… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":\"https://www.w3.org/ns/credentials/v2\",\"id\":\"urn:uuid:2f7e3e6a-ef79-4770-88c4-27ddc4b2002f\",\"type\":[\"VerifiableCredential\"],\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\",\"name\":\"ExampleClaim\"},\"issuer\":\"https://us-central1-api-catalog.cloudfunctions.net/vc-api-issue-eddsa-rdfc-2022\",\"credentialStatus\":{\"id\":\"https://iron.apicatalog.com/status/6x9gqgj0GujhrdxGfShY/129554\",\"type\":\"BitstringStatusListEntry\",\"statusPurpose\":\"revocation\",\"statusListIndex\":\"129554\",\"statusListCredential\":\"https://firebasestorage.googleapis.com/v0/b/vc-status/o/6x9gqgj0GujhrdxGfShY?alt=media\"},\"proof\":{\"type\":\"DataIntegrityProof\",\"created\":\"2025-01-26T05:06:33Z\",\"proofPurpose\":\"assertionMethod\",\"cryptosuite\":\"eddsa-rdfc-2022\",\"verificationMethod\":\"did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7#z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7\",\"proofValue\":\"z5HRdz3KBwDaybWtHNxA8qcwcHrnZ8Qxa9RBdRi8inFEY5Vmr3RttThtGKD9CossqWHSG3DDrRpLDeo5Q7Qce3Npn\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": "https://www.w3.org/ns/credentials/v2",
                        "id": "urn:uuid:2f7e3e6a-ef79-4770-88c4-27ddc4b2002f",
                        "type": [
                          "VerifiableCredential"
                        ],
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b",
                          "name": "ExampleClaim"
                        },
                        "issuer": "https://us-central1-api-catalog.cloudfunctions.net/vc-api-issue-eddsa-rdfc-2022",
                        "credentialStatus": {
                          "id": "https://iron.apicatalog.com/status/6x9gqgj0GujhrdxGfShY/129554",
                          "type": "BitstringStatusListEntry",
                          "statusPurpose": "revocation",
                          "statusListIndex": "129554",
                          "statusListCredential": "https://firebasestorage.googleapis.com/v0/b/vc-status/o/6x9gqgj0GujhrdxGfShY?alt=media"
                        },
                        "proof": {
                          "type": "DataIntegrityProof",
                          "created": "2025-01-26T05:06:33Z",
                          "proofPurpose": "assertionMethod",
                          "cryptosuite": "eddsa-rdfc-2022",
                          "verificationMethod": "did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7#z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7",
                          "proofValue": "z5HRdz3KBwDaybWtHNxA8qcwcHrnZ8Qxa9RBdRi8inFEY5Vmr3RttThtGKD9CossqWHSG3DDrRpLDeo5Q7Qce3Npn"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://api.trential.dev/indisi-vc/verifier/credentials/verify",
                  "status": 400,
                  "data": {
                    "message": "\"https://www.w3.org/2018/credentials/v1\" or \"https://www.w3.org/ns/credentials/v2\" needs to be first in the list of contexts."
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: \"https://www.w3.org/2018/crede… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js:56:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "Trinsic should verify apicatalog.com",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "uTvFuKZ94YGr-Ymq8y8Tj",
              "ctx": null,
              "_testId": "urn:uuid:d1e24c44-5a34-43eb-b317-d73ea5e0b6dd",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "apicatalog.com",
                "columnId": "Trinsic"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 73314,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 94,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "bovine should verify apicatalog.com",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "uTvFuKZ94YGr-Ymq8y8Tj",
              "ctx": null,
              "_testId": "urn:uuid:7fdf5125-f1a2-455d-9d46-853f0c9b0970",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "apicatalog.com",
                "columnId": "bovine"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 73408,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 151,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "Aviary Tech",
          "cells": [
            {
              "type": "test",
              "title": "apicatalog.com should verify Aviary Tech",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "uTvFuKZ94YGr-Ymq8y8Tj",
              "ctx": null,
              "_testId": "urn:uuid:d8ed1cd2-c30c-4ff0-91ca-e3c802fdda8c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Aviary Tech",
                "columnId": "apicatalog.com"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 73559,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 53,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: A non-empty JSON Pointer must … { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\"],\"id\":\"urn:uuid:f6a381f4-d78c-488f-a35e-41b7bc281a10\",\"type\":[\"VerifiableCredential\"],\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\",\"name\":\"ExampleClaim\"},\"issuer\":\"did:key:z6MkionEHQNFCUtoJDo8PLnqU7NC4qjFRF6vPzA52rVapqLF\",\"proof\":{\"type\":\"DataIntegrityProof\",\"cryptosuite\":\"eddsa-rdfc-2022\",\"created\":\"2025-01-26T05:06:35.068Z\",\"verificationMethod\":\"did:key:z6MkionEHQNFCUtoJDo8PLnqU7NC4qjFRF6vPzA52rVapqLF#z6MkionEHQNFCUtoJDo8PLnqU7NC4qjFRF6vPzA52rVapqLF\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z2QYJhjqmoNsrx4Vt3PFZoYcU2ZY7LSxpRasphsA9WwoipDNsv2qVpwysRMW3gnubBpVAw1ptKfJYnaCGFU7ue1Vk\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2"
                        ],
                        "id": "urn:uuid:f6a381f4-d78c-488f-a35e-41b7bc281a10",
                        "type": [
                          "VerifiableCredential"
                        ],
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b",
                          "name": "ExampleClaim"
                        },
                        "issuer": "did:key:z6MkionEHQNFCUtoJDo8PLnqU7NC4qjFRF6vPzA52rVapqLF",
                        "proof": {
                          "type": "DataIntegrityProof",
                          "cryptosuite": "eddsa-rdfc-2022",
                          "created": "2025-01-26T05:06:35.068Z",
                          "verificationMethod": "did:key:z6MkionEHQNFCUtoJDo8PLnqU7NC4qjFRF6vPzA52rVapqLF#z6MkionEHQNFCUtoJDo8PLnqU7NC4qjFRF6vPzA52rVapqLF",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "z2QYJhjqmoNsrx4Vt3PFZoYcU2ZY7LSxpRasphsA9WwoipDNsv2qVpwysRMW3gnubBpVAw1ptKfJYnaCGFU7ue1Vk"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://us-central1-api-catalog.cloudfunctions.net/vc-api-verify",
                  "status": 400,
                  "data": {
                    "message": "A non-empty JSON Pointer must begin with a '/'"
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: A non-empty JSON Pointer must … { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js:56:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "Aviary Tech should verify Aviary Tech",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "uTvFuKZ94YGr-Ymq8y8Tj",
              "ctx": null,
              "_testId": "urn:uuid:188b6a8c-c696-4e48-9466-c8de8563b34f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Aviary Tech",
                "columnId": "Aviary Tech"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 73612,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 61,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "Digital Bazaar should verify Aviary Tech",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "uTvFuKZ94YGr-Ymq8y8Tj",
              "ctx": null,
              "_testId": "urn:uuid:c3667427-776f-4081-bb75-fa10cabd3da9",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Aviary Tech",
                "columnId": "Digital Bazaar"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 73673,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 89,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Grotto Networking should verify Aviary Tech",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "uTvFuKZ94YGr-Ymq8y8Tj",
              "ctx": null,
              "_testId": "urn:uuid:4ed3ee85-6c88-4402-a156-8482c7e550a3",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Aviary Tech",
                "columnId": "Grotto Networking"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 73762,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 346,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Netis should verify Aviary Tech",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "uTvFuKZ94YGr-Ymq8y8Tj",
              "ctx": null,
              "_testId": "urn:uuid:e5350a47-6b6c-4a9f-8b1a-6a36bf6df6a4",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Aviary Tech",
                "columnId": "Netis"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 74108,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 174,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Procivis One Core should verify Aviary Tech",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "uTvFuKZ94YGr-Ymq8y8Tj",
              "ctx": null,
              "_testId": "urn:uuid:bb3ad65f-8045-4ddf-b9a9-8e0e2fbebf51",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Aviary Tech",
                "columnId": "Procivis One Core"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 74282,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 191,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "SpruceID should verify Aviary Tech",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "uTvFuKZ94YGr-Ymq8y8Tj",
              "ctx": null,
              "_testId": "urn:uuid:38a2dd4b-77db-49eb-8211-4b8079e57fdd",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Aviary Tech",
                "columnId": "SpruceID"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 74473,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 105,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Trential should verify Aviary Tech",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "uTvFuKZ94YGr-Ymq8y8Tj",
              "ctx": null,
              "_testId": "urn:uuid:206deed4-2c43-4a1d-b786-02027a704c2b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Aviary Tech",
                "columnId": "Trential"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 74578,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1108,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Trinsic should verify Aviary Tech",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "uTvFuKZ94YGr-Ymq8y8Tj",
              "ctx": null,
              "_testId": "urn:uuid:bb68eea8-3386-4122-92b3-3b079da82f7b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Aviary Tech",
                "columnId": "Trinsic"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 75686,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 112,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "bovine should verify Aviary Tech",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "uTvFuKZ94YGr-Ymq8y8Tj",
              "ctx": null,
              "_testId": "urn:uuid:923fd2af-6ef3-49c3-a3ca-e57b9055020d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Aviary Tech",
                "columnId": "bovine"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 75798,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 149,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\"],\"id\":\"urn:uuid:f6a381f4-d78c-488f-a35e-41b7bc281a10\",\"type\":[\"VerifiableCredential\"],\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\",\"name\":\"ExampleClaim\"},\"issuer\":\"did:key:z6MkionEHQNFCUtoJDo8PLnqU7NC4qjFRF6vPzA52rVapqLF\",\"proof\":{\"type\":\"DataIntegrityProof\",\"cryptosuite\":\"eddsa-rdfc-2022\",\"created\":\"2025-01-26T05:06:35.068Z\",\"verificationMethod\":\"did:key:z6MkionEHQNFCUtoJDo8PLnqU7NC4qjFRF6vPzA52rVapqLF#z6MkionEHQNFCUtoJDo8PLnqU7NC4qjFRF6vPzA52rVapqLF\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z2QYJhjqmoNsrx4Vt3PFZoYcU2ZY7LSxpRasphsA9WwoipDNsv2qVpwysRMW3gnubBpVAw1ptKfJYnaCGFU7ue1Vk\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2"
                        ],
                        "id": "urn:uuid:f6a381f4-d78c-488f-a35e-41b7bc281a10",
                        "type": [
                          "VerifiableCredential"
                        ],
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b",
                          "name": "ExampleClaim"
                        },
                        "issuer": "did:key:z6MkionEHQNFCUtoJDo8PLnqU7NC4qjFRF6vPzA52rVapqLF",
                        "proof": {
                          "type": "DataIntegrityProof",
                          "cryptosuite": "eddsa-rdfc-2022",
                          "created": "2025-01-26T05:06:35.068Z",
                          "verificationMethod": "did:key:z6MkionEHQNFCUtoJDo8PLnqU7NC4qjFRF6vPzA52rVapqLF#z6MkionEHQNFCUtoJDo8PLnqU7NC4qjFRF6vPzA52rVapqLF",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "z2QYJhjqmoNsrx4Vt3PFZoYcU2ZY7LSxpRasphsA9WwoipDNsv2qVpwysRMW3gnubBpVAw1ptKfJYnaCGFU7ue1Vk"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://bovine.social/w3c-di/verify",
                  "status": 400
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js:56:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            }
          ]
        },
        {
          "id": "Digital Bazaar",
          "cells": [
            {
              "type": "test",
              "title": "apicatalog.com should verify Digital Bazaar",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "uTvFuKZ94YGr-Ymq8y8Tj",
              "ctx": null,
              "_testId": "urn:uuid:5f9ca786-495c-4a14-8dba-8f8125ceda32",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Digital Bazaar",
                "columnId": "apicatalog.com"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 75948,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 61,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: A non-empty JSON Pointer must … { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\"],\"id\":\"urn:uuid:b733a3d0-11d9-493a-bab8-e2bc72379439\",\"type\":[\"VerifiableCredential\"],\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\",\"name\":\"ExampleClaim\"},\"issuer\":\"did:key:z6MkkwVJXDkKXhu2y3E1iF2cbzCUL42veRdzC7FFvNAeJ3Ja\",\"proof\":{\"type\":\"DataIntegrityProof\",\"created\":\"2025-01-26T05:06:35Z\",\"verificationMethod\":\"did:key:z6MkkwVJXDkKXhu2y3E1iF2cbzCUL42veRdzC7FFvNAeJ3Ja#z6MkkwVJXDkKXhu2y3E1iF2cbzCUL42veRdzC7FFvNAeJ3Ja\",\"cryptosuite\":\"eddsa-rdfc-2022\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z23ykQtGVfznQztmtJ6fpYo6NinUh8Dwcc6uYTjPUVAFeHAujRttfRZAQik3LYtPZFh6hPLmixfosVtU2v1jM2mWd\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2"
                        ],
                        "id": "urn:uuid:b733a3d0-11d9-493a-bab8-e2bc72379439",
                        "type": [
                          "VerifiableCredential"
                        ],
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b",
                          "name": "ExampleClaim"
                        },
                        "issuer": "did:key:z6MkkwVJXDkKXhu2y3E1iF2cbzCUL42veRdzC7FFvNAeJ3Ja",
                        "proof": {
                          "type": "DataIntegrityProof",
                          "created": "2025-01-26T05:06:35Z",
                          "verificationMethod": "did:key:z6MkkwVJXDkKXhu2y3E1iF2cbzCUL42veRdzC7FFvNAeJ3Ja#z6MkkwVJXDkKXhu2y3E1iF2cbzCUL42veRdzC7FFvNAeJ3Ja",
                          "cryptosuite": "eddsa-rdfc-2022",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "z23ykQtGVfznQztmtJ6fpYo6NinUh8Dwcc6uYTjPUVAFeHAujRttfRZAQik3LYtPZFh6hPLmixfosVtU2v1jM2mWd"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://us-central1-api-catalog.cloudfunctions.net/vc-api-verify",
                  "status": 400,
                  "data": {
                    "message": "A non-empty JSON Pointer must begin with a '/'"
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: A non-empty JSON Pointer must … { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js:56:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "Aviary Tech should verify Digital Bazaar",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "uTvFuKZ94YGr-Ymq8y8Tj",
              "ctx": null,
              "_testId": "urn:uuid:eaa2e3a8-b8a4-42f1-bb86-4104d2ae01b9",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Digital Bazaar",
                "columnId": "Aviary Tech"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 76010,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 50,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "Digital Bazaar should verify Digital Bazaar",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "uTvFuKZ94YGr-Ymq8y8Tj",
              "ctx": null,
              "_testId": "urn:uuid:04844a21-5b09-4c6e-9b1b-522722d160df",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Digital Bazaar",
                "columnId": "Digital Bazaar"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 76060,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 92,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Grotto Networking should verify Digital Bazaar",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "uTvFuKZ94YGr-Ymq8y8Tj",
              "ctx": null,
              "_testId": "urn:uuid:8ec3f807-1a35-4d20-b4a4-234891373e2b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Digital Bazaar",
                "columnId": "Grotto Networking"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 76152,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 301,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Netis should verify Digital Bazaar",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "uTvFuKZ94YGr-Ymq8y8Tj",
              "ctx": null,
              "_testId": "urn:uuid:fd3aaac7-4863-4870-a4c9-8c57e89a5edd",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Digital Bazaar",
                "columnId": "Netis"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 76454,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 165,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Procivis One Core should verify Digital Bazaar",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "uTvFuKZ94YGr-Ymq8y8Tj",
              "ctx": null,
              "_testId": "urn:uuid:3c9c495e-d2ff-479c-8af4-4ae3691962e6",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Digital Bazaar",
                "columnId": "Procivis One Core"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 76619,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 195,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "SpruceID should verify Digital Bazaar",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "uTvFuKZ94YGr-Ymq8y8Tj",
              "ctx": null,
              "_testId": "urn:uuid:eef3d763-9938-4ae2-a040-9ecc8a640db3",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Digital Bazaar",
                "columnId": "SpruceID"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 76814,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 110,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Trential should verify Digital Bazaar",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "uTvFuKZ94YGr-Ymq8y8Tj",
              "ctx": null,
              "_testId": "urn:uuid:27cb9cfb-2eb6-457a-b5a8-6f1d6a075ed0",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Digital Bazaar",
                "columnId": "Trential"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 76924,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1283,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Trinsic should verify Digital Bazaar",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "uTvFuKZ94YGr-Ymq8y8Tj",
              "ctx": null,
              "_testId": "urn:uuid:f43b8d58-70de-4c42-ad41-617de77665a2",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Digital Bazaar",
                "columnId": "Trinsic"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 78207,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 95,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "bovine should verify Digital Bazaar",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "uTvFuKZ94YGr-Ymq8y8Tj",
              "ctx": null,
              "_testId": "urn:uuid:8f0c7e17-ccea-4675-9086-2924093ae8d0",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Digital Bazaar",
                "columnId": "bovine"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 78302,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 147,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "Grotto Networking",
          "cells": [
            {
              "type": "test",
              "title": "apicatalog.com should verify Grotto Networking",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "uTvFuKZ94YGr-Ymq8y8Tj",
              "ctx": null,
              "_testId": "urn:uuid:731afd87-77a5-4bf3-87f8-5596667d00bc",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Grotto Networking",
                "columnId": "apicatalog.com"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 78449,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 109,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: A non-empty JSON Pointer must … { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\"],\"id\":\"urn:uuid:d58dd986-b7d6-49d2-978e-2384ec810edc\",\"type\":[\"VerifiableCredential\"],\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\",\"name\":\"ExampleClaim\"},\"issuer\":\"did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7\",\"proof\":{\"type\":\"DataIntegrityProof\",\"cryptosuite\":\"eddsa-rdfc-2022\",\"created\":\"2025-01-26T05:06:35.577Z\",\"verificationMethod\":\"did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7#z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z3JNuHfCdyVe2f8JeVwQ5hbPH93DeWqEZJ2Ro7Xcqop7JWqqr7kaRgDrfRqSxrVFMCtXjDjZro9HqRpwqCctaU7Wy\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2"
                        ],
                        "id": "urn:uuid:d58dd986-b7d6-49d2-978e-2384ec810edc",
                        "type": [
                          "VerifiableCredential"
                        ],
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b",
                          "name": "ExampleClaim"
                        },
                        "issuer": "did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7",
                        "proof": {
                          "type": "DataIntegrityProof",
                          "cryptosuite": "eddsa-rdfc-2022",
                          "created": "2025-01-26T05:06:35.577Z",
                          "verificationMethod": "did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7#z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "z3JNuHfCdyVe2f8JeVwQ5hbPH93DeWqEZJ2Ro7Xcqop7JWqqr7kaRgDrfRqSxrVFMCtXjDjZro9HqRpwqCctaU7Wy"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://us-central1-api-catalog.cloudfunctions.net/vc-api-verify",
                  "status": 400,
                  "data": {
                    "message": "A non-empty JSON Pointer must begin with a '/'"
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: A non-empty JSON Pointer must … { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js:56:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "Aviary Tech should verify Grotto Networking",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "uTvFuKZ94YGr-Ymq8y8Tj",
              "ctx": null,
              "_testId": "urn:uuid:a71b4f0f-dda0-4b2e-894f-d7d876a85a48",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Grotto Networking",
                "columnId": "Aviary Tech"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 78559,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 67,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\"],\"id\":\"urn:uuid:d58dd986-b7d6-49d2-978e-2384ec810edc\",\"type\":[\"VerifiableCredential\"],\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\",\"name\":\"ExampleClaim\"},\"issuer\":\"did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7\",\"proof\":{\"type\":\"DataIntegrityProof\",\"cryptosuite\":\"eddsa-rdfc-2022\",\"created\":\"2025-01-26T05:06:35.577Z\",\"verificationMethod\":\"did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7#z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z3JNuHfCdyVe2f8JeVwQ5hbPH93DeWqEZJ2Ro7Xcqop7JWqqr7kaRgDrfRqSxrVFMCtXjDjZro9HqRpwqCctaU7Wy\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2"
                        ],
                        "id": "urn:uuid:d58dd986-b7d6-49d2-978e-2384ec810edc",
                        "type": [
                          "VerifiableCredential"
                        ],
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b",
                          "name": "ExampleClaim"
                        },
                        "issuer": "did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7",
                        "proof": {
                          "type": "DataIntegrityProof",
                          "cryptosuite": "eddsa-rdfc-2022",
                          "created": "2025-01-26T05:06:35.577Z",
                          "verificationMethod": "did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7#z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "z3JNuHfCdyVe2f8JeVwQ5hbPH93DeWqEZJ2Ro7Xcqop7JWqqr7kaRgDrfRqSxrVFMCtXjDjZro9HqRpwqCctaU7Wy"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://demo.av1.sh/credentials/verify",
                  "status": 400,
                  "data": {
                    "verified": false,
                    "errors": [
                      "One or more proofs failed verification"
                    ]
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js:56:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "Digital Bazaar should verify Grotto Networking",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "uTvFuKZ94YGr-Ymq8y8Tj",
              "ctx": null,
              "_testId": "urn:uuid:bb566ad9-2f62-48f7-9273-e1b2b9dc7354",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Grotto Networking",
                "columnId": "Digital Bazaar"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 78626,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 96,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2"
                        ],
                        "id": "urn:uuid:d58dd986-b7d6-49d2-978e-2384ec810edc",
                        "type": [
                          "VerifiableCredential"
                        ],
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b",
                          "name": "ExampleClaim"
                        },
                        "issuer": "did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7",
                        "proof": {
                          "type": "DataIntegrityProof",
                          "cryptosuite": "eddsa-rdfc-2022",
                          "created": "2025-01-26T05:06:35.577Z",
                          "verificationMethod": "did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7#z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "z3JNuHfCdyVe2f8JeVwQ5hbPH93DeWqEZJ2Ro7Xcqop7JWqqr7kaRgDrfRqSxrVFMCtXjDjZro9HqRpwqCctaU7Wy"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half",
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\"],\"id\":\"urn:uuid:d58dd986-b7d6-49d2-978e-2384ec810edc\",\"type\":[\"VerifiableCredential\"],\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\",\"name\":\"ExampleClaim\"},\"issuer\":\"did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7\",\"proof\":{\"type\":\"DataIntegrityProof\",\"cryptosuite\":\"eddsa-rdfc-2022\",\"created\":\"2025-01-26T05:06:35.577Z\",\"verificationMethod\":\"did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7#z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z3JNuHfCdyVe2f8JeVwQ5hbPH93DeWqEZJ2Ro7Xcqop7JWqqr7kaRgDrfRqSxrVFMCtXjDjZro9HqRpwqCctaU7Wy\"}},\"options\":{\"checks\":[\"proof\"]}}"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc2.veresverifier.dev/verifiers/z19w7KofwvE2nkJeRVLp8NDxz/credentials/verify",
                  "status": 400,
                  "data": {
                    "verified": false,
                    "results": [
                      {
                        "proof": {
                          "@context": [
                            "https://www.w3.org/ns/credentials/v2"
                          ],
                          "type": "DataIntegrityProof",
                          "cryptosuite": "eddsa-rdfc-2022",
                          "created": "2025-01-26T05:06:35.577Z",
                          "verificationMethod": "did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7#z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "z3JNuHfCdyVe2f8JeVwQ5hbPH93DeWqEZJ2Ro7Xcqop7JWqqr7kaRgDrfRqSxrVFMCtXjDjZro9HqRpwqCctaU7Wy"
                        },
                        "verified": false,
                        "error": {
                          "name": "VerificationError",
                          "message": "Invalid signature."
                        }
                      }
                    ],
                    "error": {
                      "name": "VerificationError",
                      "errors": [
                        {
                          "name": "Error",
                          "message": "Invalid signature.",
                          "stack": "Error: Invalid signature.\n    at DataIntegrityProof.verifyProof (file:///home/node/app/node_modules/@digitalbazaar/data-integrity/lib/DataIntegrityProof.js:303:15)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async /home/node/app/node_modules/jsonld-signatures/lib/ProofSet.js:272:53\n    at async Promise.all (index 0)\n    at async _verify (/home/node/app/node_modules/jsonld-signatures/lib/ProofSet.js:260:3)\n    at async ProofSet.verify (/home/node/app/node_modules/jsonld-signatures/lib/ProofSet.js:191:23)\n    at async Object.verify (/home/node/app/node_modules/jsonld-signatures/lib/jsonld-signatures.js:169:18)\n    at async _verifyCredential (file:///home/node/app/node_modules/@digitalbazaar/vc/lib/index.js:346:18)\n    at async Module.verifyCredential (file:///home/node/app/node_modules/@digitalbazaar/vc/lib/index.js:291:12)\n    at async Module.verifyCredential (file:///home/node/app/node_modules/@bedrock/vc-verifier/lib/di.js:17:18)"
                        }
                      ],
                      "message": "Verification error(s)."
                    },
                    "checks": [
                      {
                        "check": [
                          "proof"
                        ],
                        "id": "urn:uuid:d58dd986-b7d6-49d2-978e-2384ec810edc",
                        "error": "Invalid signature.",
                        "verificationMethod": "did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7#z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7"
                      }
                    ]
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js:56:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "Grotto Networking should verify Grotto Networking",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "uTvFuKZ94YGr-Ymq8y8Tj",
              "ctx": null,
              "_testId": "urn:uuid:26455dda-6ac9-4bab-b45b-abd650309568",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Grotto Networking",
                "columnId": "Grotto Networking"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 78723,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 283,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\"],\"id\":\"urn:uuid:d58dd986-b7d6-49d2-978e-2384ec810edc\",\"type\":[\"VerifiableCredential\"],\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\",\"name\":\"ExampleClaim\"},\"issuer\":\"did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7\",\"proof\":{\"type\":\"DataIntegrityProof\",\"cryptosuite\":\"eddsa-rdfc-2022\",\"created\":\"2025-01-26T05:06:35.577Z\",\"verificationMethod\":\"did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7#z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z3JNuHfCdyVe2f8JeVwQ5hbPH93DeWqEZJ2Ro7Xcqop7JWqqr7kaRgDrfRqSxrVFMCtXjDjZro9HqRpwqCctaU7Wy\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2"
                        ],
                        "id": "urn:uuid:d58dd986-b7d6-49d2-978e-2384ec810edc",
                        "type": [
                          "VerifiableCredential"
                        ],
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b",
                          "name": "ExampleClaim"
                        },
                        "issuer": "did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7",
                        "proof": {
                          "type": "DataIntegrityProof",
                          "cryptosuite": "eddsa-rdfc-2022",
                          "created": "2025-01-26T05:06:35.577Z",
                          "verificationMethod": "did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7#z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "z3JNuHfCdyVe2f8JeVwQ5hbPH93DeWqEZJ2Ro7Xcqop7JWqqr7kaRgDrfRqSxrVFMCtXjDjZro9HqRpwqCctaU7Wy"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://ecdsa-sd.grotto-networking.com/EdDSA-RDFC/credentials/verify",
                  "status": 400,
                  "data": {
                    "checks": [],
                    "warnings": []
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js:56:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "Netis should verify Grotto Networking",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "uTvFuKZ94YGr-Ymq8y8Tj",
              "ctx": null,
              "_testId": "urn:uuid:86532b5c-a900-44cc-ad0e-52c5d9604973",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Grotto Networking",
                "columnId": "Netis"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 79006,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 172,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\"],\"id\":\"urn:uuid:d58dd986-b7d6-49d2-978e-2384ec810edc\",\"type\":[\"VerifiableCredential\"],\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\",\"name\":\"ExampleClaim\"},\"issuer\":\"did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7\",\"proof\":{\"type\":\"DataIntegrityProof\",\"cryptosuite\":\"eddsa-rdfc-2022\",\"created\":\"2025-01-26T05:06:35.577Z\",\"verificationMethod\":\"did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7#z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z3JNuHfCdyVe2f8JeVwQ5hbPH93DeWqEZJ2Ro7Xcqop7JWqqr7kaRgDrfRqSxrVFMCtXjDjZro9HqRpwqCctaU7Wy\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2"
                        ],
                        "id": "urn:uuid:d58dd986-b7d6-49d2-978e-2384ec810edc",
                        "type": [
                          "VerifiableCredential"
                        ],
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b",
                          "name": "ExampleClaim"
                        },
                        "issuer": "did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7",
                        "proof": {
                          "type": "DataIntegrityProof",
                          "cryptosuite": "eddsa-rdfc-2022",
                          "created": "2025-01-26T05:06:35.577Z",
                          "verificationMethod": "did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7#z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "z3JNuHfCdyVe2f8JeVwQ5hbPH93DeWqEZJ2Ro7Xcqop7JWqqr7kaRgDrfRqSxrVFMCtXjDjZro9HqRpwqCctaU7Wy"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://test-api.mynext.id/api/v1/verifier/credential/vc-api/verify",
                  "status": 400
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js:56:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "Procivis One Core should verify Grotto Networking",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "uTvFuKZ94YGr-Ymq8y8Tj",
              "ctx": null,
              "_testId": "urn:uuid:b04f8d27-9667-4408-913a-bc6e7e4b26a8",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Grotto Networking",
                "columnId": "Procivis One Core"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 79178,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 189,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\"],\"id\":\"urn:uuid:d58dd986-b7d6-49d2-978e-2384ec810edc\",\"type\":[\"VerifiableCredential\"],\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\",\"name\":\"ExampleClaim\"},\"issuer\":\"did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7\",\"proof\":{\"type\":\"DataIntegrityProof\",\"cryptosuite\":\"eddsa-rdfc-2022\",\"created\":\"2025-01-26T05:06:35.577Z\",\"verificationMethod\":\"did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7#z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z3JNuHfCdyVe2f8JeVwQ5hbPH93DeWqEZJ2Ro7Xcqop7JWqqr7kaRgDrfRqSxrVFMCtXjDjZro9HqRpwqCctaU7Wy\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2"
                        ],
                        "id": "urn:uuid:d58dd986-b7d6-49d2-978e-2384ec810edc",
                        "type": [
                          "VerifiableCredential"
                        ],
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b",
                          "name": "ExampleClaim"
                        },
                        "issuer": "did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7",
                        "proof": {
                          "type": "DataIntegrityProof",
                          "cryptosuite": "eddsa-rdfc-2022",
                          "created": "2025-01-26T05:06:35.577Z",
                          "verificationMethod": "did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7#z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "z3JNuHfCdyVe2f8JeVwQ5hbPH93DeWqEZJ2Ro7Xcqop7JWqqr7kaRgDrfRqSxrVFMCtXjDjZro9HqRpwqCctaU7Wy"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://canivc.core.dev.procivis-one.com/vc-api/credentials/verify",
                  "status": 400,
                  "data": {
                    "errors": [
                      {
                        "status": 400,
                        "title": "Formatter error `Could not verify: `Verification error: Invalid signature``",
                        "detail": null
                      }
                    ]
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js:56:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "SpruceID should verify Grotto Networking",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "uTvFuKZ94YGr-Ymq8y8Tj",
              "ctx": null,
              "_testId": "urn:uuid:3305b440-7722-4f34-9f5e-28c93149b058",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Grotto Networking",
                "columnId": "SpruceID"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 79368,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 104,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\"],\"id\":\"urn:uuid:d58dd986-b7d6-49d2-978e-2384ec810edc\",\"type\":[\"VerifiableCredential\"],\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\",\"name\":\"ExampleClaim\"},\"issuer\":\"did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7\",\"proof\":{\"type\":\"DataIntegrityProof\",\"cryptosuite\":\"eddsa-rdfc-2022\",\"created\":\"2025-01-26T05:06:35.577Z\",\"verificationMethod\":\"did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7#z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z3JNuHfCdyVe2f8JeVwQ5hbPH93DeWqEZJ2Ro7Xcqop7JWqqr7kaRgDrfRqSxrVFMCtXjDjZro9HqRpwqCctaU7Wy\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2"
                        ],
                        "id": "urn:uuid:d58dd986-b7d6-49d2-978e-2384ec810edc",
                        "type": [
                          "VerifiableCredential"
                        ],
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b",
                          "name": "ExampleClaim"
                        },
                        "issuer": "did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7",
                        "proof": {
                          "type": "DataIntegrityProof",
                          "cryptosuite": "eddsa-rdfc-2022",
                          "created": "2025-01-26T05:06:35.577Z",
                          "verificationMethod": "did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7#z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "z3JNuHfCdyVe2f8JeVwQ5hbPH93DeWqEZJ2Ro7Xcqop7JWqqr7kaRgDrfRqSxrVFMCtXjDjZro9HqRpwqCctaU7Wy"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc.spruceid.xyz/credentials/verify",
                  "status": 400
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js:56:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "Trential should verify Grotto Networking",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "uTvFuKZ94YGr-Ymq8y8Tj",
              "ctx": null,
              "_testId": "urn:uuid:af4c4ede-a960-434b-9a7e-cf30c61548c4",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Grotto Networking",
                "columnId": "Trential"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 79472,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 557,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: invalid proof { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\"],\"id\":\"urn:uuid:d58dd986-b7d6-49d2-978e-2384ec810edc\",\"type\":[\"VerifiableCredential\"],\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\",\"name\":\"ExampleClaim\"},\"issuer\":\"did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7\",\"proof\":{\"type\":\"DataIntegrityProof\",\"cryptosuite\":\"eddsa-rdfc-2022\",\"created\":\"2025-01-26T05:06:35.577Z\",\"verificationMethod\":\"did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7#z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z3JNuHfCdyVe2f8JeVwQ5hbPH93DeWqEZJ2Ro7Xcqop7JWqqr7kaRgDrfRqSxrVFMCtXjDjZro9HqRpwqCctaU7Wy\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2"
                        ],
                        "id": "urn:uuid:d58dd986-b7d6-49d2-978e-2384ec810edc",
                        "type": [
                          "VerifiableCredential"
                        ],
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b",
                          "name": "ExampleClaim"
                        },
                        "issuer": "did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7",
                        "proof": {
                          "type": "DataIntegrityProof",
                          "cryptosuite": "eddsa-rdfc-2022",
                          "created": "2025-01-26T05:06:35.577Z",
                          "verificationMethod": "did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7#z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "z3JNuHfCdyVe2f8JeVwQ5hbPH93DeWqEZJ2Ro7Xcqop7JWqqr7kaRgDrfRqSxrVFMCtXjDjZro9HqRpwqCctaU7Wy"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://api.trential.dev/indisi-vc/verifier/credentials/verify",
                  "status": 400,
                  "data": {
                    "message": "invalid proof"
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: invalid proof { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js:56:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "Trinsic should verify Grotto Networking",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "uTvFuKZ94YGr-Ymq8y8Tj",
              "ctx": null,
              "_testId": "urn:uuid:daccf107-dd24-4145-82c1-09aea202ada5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Grotto Networking",
                "columnId": "Trinsic"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 80029,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 94,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "bovine should verify Grotto Networking",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "uTvFuKZ94YGr-Ymq8y8Tj",
              "ctx": null,
              "_testId": "urn:uuid:b9281d1e-2474-4a4d-b141-20005a7e5d83",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Grotto Networking",
                "columnId": "bovine"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 80124,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 146,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\"],\"id\":\"urn:uuid:d58dd986-b7d6-49d2-978e-2384ec810edc\",\"type\":[\"VerifiableCredential\"],\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\",\"name\":\"ExampleClaim\"},\"issuer\":\"did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7\",\"proof\":{\"type\":\"DataIntegrityProof\",\"cryptosuite\":\"eddsa-rdfc-2022\",\"created\":\"2025-01-26T05:06:35.577Z\",\"verificationMethod\":\"did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7#z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z3JNuHfCdyVe2f8JeVwQ5hbPH93DeWqEZJ2Ro7Xcqop7JWqqr7kaRgDrfRqSxrVFMCtXjDjZro9HqRpwqCctaU7Wy\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2"
                        ],
                        "id": "urn:uuid:d58dd986-b7d6-49d2-978e-2384ec810edc",
                        "type": [
                          "VerifiableCredential"
                        ],
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b",
                          "name": "ExampleClaim"
                        },
                        "issuer": "did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7",
                        "proof": {
                          "type": "DataIntegrityProof",
                          "cryptosuite": "eddsa-rdfc-2022",
                          "created": "2025-01-26T05:06:35.577Z",
                          "verificationMethod": "did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7#z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "z3JNuHfCdyVe2f8JeVwQ5hbPH93DeWqEZJ2Ro7Xcqop7JWqqr7kaRgDrfRqSxrVFMCtXjDjZro9HqRpwqCctaU7Wy"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://bovine.social/w3c-di/verify",
                  "status": 400
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js:56:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            }
          ]
        },
        {
          "id": "Procivis One Core",
          "cells": [
            {
              "type": "test",
              "title": "apicatalog.com should verify Procivis One Core",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "uTvFuKZ94YGr-Ymq8y8Tj",
              "ctx": null,
              "_testId": "urn:uuid:3c8ea84a-093c-4874-907c-550d8966e41d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Procivis One Core",
                "columnId": "apicatalog.com"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 80272,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 84,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: A non-empty JSON Pointer must … { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\"],\"id\":\"urn:uuid:16b7960d-a14e-42fd-a585-faf1d6e3b209\",\"type\":[\"VerifiableCredential\"],\"issuer\":\"did:key:z6Mkt224NWyb5GLLwWiPcMU88i2zEA9fSy3QQeCRsh7j7WT9\",\"validFrom\":\"2025-01-26T05:06:36.06412934Z\",\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\"},\"credentialStatus\":{\"id\":\"urn:uuid:b5c6159a-63be-437d-ad4a-a0cbdb2809bf\",\"type\":\"BitstringStatusListEntry\",\"statusPurpose\":\"revocation\",\"statusListCredential\":\"https://canivc.core.dev.procivis-one.com/ssi/revocation/v1/list/f965d288-fb2c-4648-b194-235f98be36e7\",\"statusListIndex\":\"0\"},\"proof\":{\"type\":\"DataIntegrityProof\",\"created\":\"2025-01-26T05:06:36.06414153Z\",\"cryptosuite\":\"eddsa-rdfc-2022\",\"verificationMethod\":\"did:key:z6Mkt224NWyb5GLLwWiPcMU88i2zEA9fSy3QQeCRsh7j7WT9#z6Mkt224NWyb5GLLwWiPcMU88i2zEA9fSy3QQeCRsh7j7WT9\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z2z3ZGqJXSfL873ebuxntccKCAdaXoK8CcnJwWUm61X3jRzjxeMTX45ACms87xjoRBPTdn24KGaQWzWh3SdP2sRa9\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2"
                        ],
                        "id": "urn:uuid:16b7960d-a14e-42fd-a585-faf1d6e3b209",
                        "type": [
                          "VerifiableCredential"
                        ],
                        "issuer": "did:key:z6Mkt224NWyb5GLLwWiPcMU88i2zEA9fSy3QQeCRsh7j7WT9",
                        "validFrom": "2025-01-26T05:06:36.06412934Z",
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                        },
                        "credentialStatus": {
                          "id": "urn:uuid:b5c6159a-63be-437d-ad4a-a0cbdb2809bf",
                          "type": "BitstringStatusListEntry",
                          "statusPurpose": "revocation",
                          "statusListCredential": "https://canivc.core.dev.procivis-one.com/ssi/revocation/v1/list/f965d288-fb2c-4648-b194-235f98be36e7",
                          "statusListIndex": "0"
                        },
                        "proof": {
                          "type": "DataIntegrityProof",
                          "created": "2025-01-26T05:06:36.06414153Z",
                          "cryptosuite": "eddsa-rdfc-2022",
                          "verificationMethod": "did:key:z6Mkt224NWyb5GLLwWiPcMU88i2zEA9fSy3QQeCRsh7j7WT9#z6Mkt224NWyb5GLLwWiPcMU88i2zEA9fSy3QQeCRsh7j7WT9",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "z2z3ZGqJXSfL873ebuxntccKCAdaXoK8CcnJwWUm61X3jRzjxeMTX45ACms87xjoRBPTdn24KGaQWzWh3SdP2sRa9"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://us-central1-api-catalog.cloudfunctions.net/vc-api-verify",
                  "status": 400,
                  "data": {
                    "message": "A non-empty JSON Pointer must begin with a '/'"
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: A non-empty JSON Pointer must … { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js:56:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "Aviary Tech should verify Procivis One Core",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "uTvFuKZ94YGr-Ymq8y8Tj",
              "ctx": null,
              "_testId": "urn:uuid:4d942dd2-69a3-4637-ad55-fd553d30780f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Procivis One Core",
                "columnId": "Aviary Tech"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 80357,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 52,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\"],\"id\":\"urn:uuid:16b7960d-a14e-42fd-a585-faf1d6e3b209\",\"type\":[\"VerifiableCredential\"],\"issuer\":\"did:key:z6Mkt224NWyb5GLLwWiPcMU88i2zEA9fSy3QQeCRsh7j7WT9\",\"validFrom\":\"2025-01-26T05:06:36.06412934Z\",\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\"},\"credentialStatus\":{\"id\":\"urn:uuid:b5c6159a-63be-437d-ad4a-a0cbdb2809bf\",\"type\":\"BitstringStatusListEntry\",\"statusPurpose\":\"revocation\",\"statusListCredential\":\"https://canivc.core.dev.procivis-one.com/ssi/revocation/v1/list/f965d288-fb2c-4648-b194-235f98be36e7\",\"statusListIndex\":\"0\"},\"proof\":{\"type\":\"DataIntegrityProof\",\"created\":\"2025-01-26T05:06:36.06414153Z\",\"cryptosuite\":\"eddsa-rdfc-2022\",\"verificationMethod\":\"did:key:z6Mkt224NWyb5GLLwWiPcMU88i2zEA9fSy3QQeCRsh7j7WT9#z6Mkt224NWyb5GLLwWiPcMU88i2zEA9fSy3QQeCRsh7j7WT9\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z2z3ZGqJXSfL873ebuxntccKCAdaXoK8CcnJwWUm61X3jRzjxeMTX45ACms87xjoRBPTdn24KGaQWzWh3SdP2sRa9\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2"
                        ],
                        "id": "urn:uuid:16b7960d-a14e-42fd-a585-faf1d6e3b209",
                        "type": [
                          "VerifiableCredential"
                        ],
                        "issuer": "did:key:z6Mkt224NWyb5GLLwWiPcMU88i2zEA9fSy3QQeCRsh7j7WT9",
                        "validFrom": "2025-01-26T05:06:36.06412934Z",
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                        },
                        "credentialStatus": {
                          "id": "urn:uuid:b5c6159a-63be-437d-ad4a-a0cbdb2809bf",
                          "type": "BitstringStatusListEntry",
                          "statusPurpose": "revocation",
                          "statusListCredential": "https://canivc.core.dev.procivis-one.com/ssi/revocation/v1/list/f965d288-fb2c-4648-b194-235f98be36e7",
                          "statusListIndex": "0"
                        },
                        "proof": {
                          "type": "DataIntegrityProof",
                          "created": "2025-01-26T05:06:36.06414153Z",
                          "cryptosuite": "eddsa-rdfc-2022",
                          "verificationMethod": "did:key:z6Mkt224NWyb5GLLwWiPcMU88i2zEA9fSy3QQeCRsh7j7WT9#z6Mkt224NWyb5GLLwWiPcMU88i2zEA9fSy3QQeCRsh7j7WT9",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "z2z3ZGqJXSfL873ebuxntccKCAdaXoK8CcnJwWUm61X3jRzjxeMTX45ACms87xjoRBPTdn24KGaQWzWh3SdP2sRa9"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://demo.av1.sh/credentials/verify",
                  "status": 400,
                  "data": {
                    "verified": false,
                    "errors": [
                      "One or more proofs failed verification"
                    ]
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js:56:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "Digital Bazaar should verify Procivis One Core",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "uTvFuKZ94YGr-Ymq8y8Tj",
              "ctx": null,
              "_testId": "urn:uuid:8ec6ab73-955e-4cec-a2a3-ac9fa4d78472",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Procivis One Core",
                "columnId": "Digital Bazaar"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 80409,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 96,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2"
                        ],
                        "id": "urn:uuid:16b7960d-a14e-42fd-a585-faf1d6e3b209",
                        "type": [
                          "VerifiableCredential"
                        ],
                        "issuer": "did:key:z6Mkt224NWyb5GLLwWiPcMU88i2zEA9fSy3QQeCRsh7j7WT9",
                        "validFrom": "2025-01-26T05:06:36.06412934Z",
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                        },
                        "credentialStatus": {
                          "id": "urn:uuid:b5c6159a-63be-437d-ad4a-a0cbdb2809bf",
                          "type": "BitstringStatusListEntry",
                          "statusPurpose": "revocation",
                          "statusListCredential": "https://canivc.core.dev.procivis-one.com/ssi/revocation/v1/list/f965d288-fb2c-4648-b194-235f98be36e7",
                          "statusListIndex": "0"
                        },
                        "proof": {
                          "type": "DataIntegrityProof",
                          "created": "2025-01-26T05:06:36.06414153Z",
                          "cryptosuite": "eddsa-rdfc-2022",
                          "verificationMethod": "did:key:z6Mkt224NWyb5GLLwWiPcMU88i2zEA9fSy3QQeCRsh7j7WT9#z6Mkt224NWyb5GLLwWiPcMU88i2zEA9fSy3QQeCRsh7j7WT9",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "z2z3ZGqJXSfL873ebuxntccKCAdaXoK8CcnJwWUm61X3jRzjxeMTX45ACms87xjoRBPTdn24KGaQWzWh3SdP2sRa9"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half",
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\"],\"id\":\"urn:uuid:16b7960d-a14e-42fd-a585-faf1d6e3b209\",\"type\":[\"VerifiableCredential\"],\"issuer\":\"did:key:z6Mkt224NWyb5GLLwWiPcMU88i2zEA9fSy3QQeCRsh7j7WT9\",\"validFrom\":\"2025-01-26T05:06:36.06412934Z\",\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\"},\"credentialStatus\":{\"id\":\"urn:uuid:b5c6159a-63be-437d-ad4a-a0cbdb2809bf\",\"type\":\"BitstringStatusListEntry\",\"statusPurpose\":\"revocation\",\"statusListCredential\":\"https://canivc.core.dev.procivis-one.com/ssi/revocation/v1/list/f965d288-fb2c-4648-b194-235f98be36e7\",\"statusListIndex\":\"0\"},\"proof\":{\"type\":\"DataIntegrityProof\",\"created\":\"2025-01-26T05:06:36.06414153Z\",\"cryptosuite\":\"eddsa-rdfc-2022\",\"verificationMethod\":\"did:key:z6Mkt224NWyb5GLLwWiPcMU88i2zEA9fSy3QQeCRsh7j7WT9#z6Mkt224NWyb5GLLwWiPcMU88i2zEA9fSy3QQeCRsh7j7WT9\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z2z3ZGqJXSfL873ebuxntccKCAdaXoK8CcnJwWUm61X3jRzjxeMTX45ACms87xjoRBPTdn24KGaQWzWh3SdP2sRa9\"}},\"options\":{\"checks\":[\"proof\"]}}"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc2.veresverifier.dev/verifiers/z19w7KofwvE2nkJeRVLp8NDxz/credentials/verify",
                  "status": 400,
                  "data": {
                    "verified": false,
                    "results": [
                      {
                        "proof": {
                          "@context": [
                            "https://www.w3.org/ns/credentials/v2"
                          ],
                          "type": "DataIntegrityProof",
                          "created": "2025-01-26T05:06:36.06414153Z",
                          "cryptosuite": "eddsa-rdfc-2022",
                          "verificationMethod": "did:key:z6Mkt224NWyb5GLLwWiPcMU88i2zEA9fSy3QQeCRsh7j7WT9#z6Mkt224NWyb5GLLwWiPcMU88i2zEA9fSy3QQeCRsh7j7WT9",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "z2z3ZGqJXSfL873ebuxntccKCAdaXoK8CcnJwWUm61X3jRzjxeMTX45ACms87xjoRBPTdn24KGaQWzWh3SdP2sRa9"
                        },
                        "verified": false,
                        "error": {
                          "name": "VerificationError",
                          "message": "Invalid signature."
                        }
                      }
                    ],
                    "error": {
                      "name": "VerificationError",
                      "errors": [
                        {
                          "name": "Error",
                          "message": "Invalid signature.",
                          "stack": "Error: Invalid signature.\n    at DataIntegrityProof.verifyProof (file:///home/node/app/node_modules/@digitalbazaar/data-integrity/lib/DataIntegrityProof.js:303:15)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async /home/node/app/node_modules/jsonld-signatures/lib/ProofSet.js:272:53\n    at async Promise.all (index 0)\n    at async _verify (/home/node/app/node_modules/jsonld-signatures/lib/ProofSet.js:260:3)\n    at async ProofSet.verify (/home/node/app/node_modules/jsonld-signatures/lib/ProofSet.js:191:23)\n    at async Object.verify (/home/node/app/node_modules/jsonld-signatures/lib/jsonld-signatures.js:169:18)\n    at async _verifyCredential (file:///home/node/app/node_modules/@digitalbazaar/vc/lib/index.js:346:18)\n    at async Module.verifyCredential (file:///home/node/app/node_modules/@digitalbazaar/vc/lib/index.js:291:12)\n    at async Module.verifyCredential (file:///home/node/app/node_modules/@bedrock/vc-verifier/lib/di.js:17:18)"
                        }
                      ],
                      "message": "Verification error(s)."
                    },
                    "checks": [
                      {
                        "check": [
                          "proof"
                        ],
                        "id": "urn:uuid:16b7960d-a14e-42fd-a585-faf1d6e3b209",
                        "error": "Invalid signature.",
                        "verificationMethod": "did:key:z6Mkt224NWyb5GLLwWiPcMU88i2zEA9fSy3QQeCRsh7j7WT9#z6Mkt224NWyb5GLLwWiPcMU88i2zEA9fSy3QQeCRsh7j7WT9"
                      }
                    ]
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js:56:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "Grotto Networking should verify Procivis One Core",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "uTvFuKZ94YGr-Ymq8y8Tj",
              "ctx": null,
              "_testId": "urn:uuid:0f3bca2f-3b1d-45c3-9aa9-d3a60e56bd35",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Procivis One Core",
                "columnId": "Grotto Networking"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 80506,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 300,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\"],\"id\":\"urn:uuid:16b7960d-a14e-42fd-a585-faf1d6e3b209\",\"type\":[\"VerifiableCredential\"],\"issuer\":\"did:key:z6Mkt224NWyb5GLLwWiPcMU88i2zEA9fSy3QQeCRsh7j7WT9\",\"validFrom\":\"2025-01-26T05:06:36.06412934Z\",\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\"},\"credentialStatus\":{\"id\":\"urn:uuid:b5c6159a-63be-437d-ad4a-a0cbdb2809bf\",\"type\":\"BitstringStatusListEntry\",\"statusPurpose\":\"revocation\",\"statusListCredential\":\"https://canivc.core.dev.procivis-one.com/ssi/revocation/v1/list/f965d288-fb2c-4648-b194-235f98be36e7\",\"statusListIndex\":\"0\"},\"proof\":{\"type\":\"DataIntegrityProof\",\"created\":\"2025-01-26T05:06:36.06414153Z\",\"cryptosuite\":\"eddsa-rdfc-2022\",\"verificationMethod\":\"did:key:z6Mkt224NWyb5GLLwWiPcMU88i2zEA9fSy3QQeCRsh7j7WT9#z6Mkt224NWyb5GLLwWiPcMU88i2zEA9fSy3QQeCRsh7j7WT9\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z2z3ZGqJXSfL873ebuxntccKCAdaXoK8CcnJwWUm61X3jRzjxeMTX45ACms87xjoRBPTdn24KGaQWzWh3SdP2sRa9\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2"
                        ],
                        "id": "urn:uuid:16b7960d-a14e-42fd-a585-faf1d6e3b209",
                        "type": [
                          "VerifiableCredential"
                        ],
                        "issuer": "did:key:z6Mkt224NWyb5GLLwWiPcMU88i2zEA9fSy3QQeCRsh7j7WT9",
                        "validFrom": "2025-01-26T05:06:36.06412934Z",
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                        },
                        "credentialStatus": {
                          "id": "urn:uuid:b5c6159a-63be-437d-ad4a-a0cbdb2809bf",
                          "type": "BitstringStatusListEntry",
                          "statusPurpose": "revocation",
                          "statusListCredential": "https://canivc.core.dev.procivis-one.com/ssi/revocation/v1/list/f965d288-fb2c-4648-b194-235f98be36e7",
                          "statusListIndex": "0"
                        },
                        "proof": {
                          "type": "DataIntegrityProof",
                          "created": "2025-01-26T05:06:36.06414153Z",
                          "cryptosuite": "eddsa-rdfc-2022",
                          "verificationMethod": "did:key:z6Mkt224NWyb5GLLwWiPcMU88i2zEA9fSy3QQeCRsh7j7WT9#z6Mkt224NWyb5GLLwWiPcMU88i2zEA9fSy3QQeCRsh7j7WT9",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "z2z3ZGqJXSfL873ebuxntccKCAdaXoK8CcnJwWUm61X3jRzjxeMTX45ACms87xjoRBPTdn24KGaQWzWh3SdP2sRa9"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://ecdsa-sd.grotto-networking.com/EdDSA-RDFC/credentials/verify",
                  "status": 400,
                  "data": {
                    "checks": [],
                    "warnings": []
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js:56:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "Netis should verify Procivis One Core",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "uTvFuKZ94YGr-Ymq8y8Tj",
              "ctx": null,
              "_testId": "urn:uuid:44edab69-6bc6-4512-925f-56f2d9c7e25a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Procivis One Core",
                "columnId": "Netis"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 80806,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 174,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\"],\"id\":\"urn:uuid:16b7960d-a14e-42fd-a585-faf1d6e3b209\",\"type\":[\"VerifiableCredential\"],\"issuer\":\"did:key:z6Mkt224NWyb5GLLwWiPcMU88i2zEA9fSy3QQeCRsh7j7WT9\",\"validFrom\":\"2025-01-26T05:06:36.06412934Z\",\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\"},\"credentialStatus\":{\"id\":\"urn:uuid:b5c6159a-63be-437d-ad4a-a0cbdb2809bf\",\"type\":\"BitstringStatusListEntry\",\"statusPurpose\":\"revocation\",\"statusListCredential\":\"https://canivc.core.dev.procivis-one.com/ssi/revocation/v1/list/f965d288-fb2c-4648-b194-235f98be36e7\",\"statusListIndex\":\"0\"},\"proof\":{\"type\":\"DataIntegrityProof\",\"created\":\"2025-01-26T05:06:36.06414153Z\",\"cryptosuite\":\"eddsa-rdfc-2022\",\"verificationMethod\":\"did:key:z6Mkt224NWyb5GLLwWiPcMU88i2zEA9fSy3QQeCRsh7j7WT9#z6Mkt224NWyb5GLLwWiPcMU88i2zEA9fSy3QQeCRsh7j7WT9\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z2z3ZGqJXSfL873ebuxntccKCAdaXoK8CcnJwWUm61X3jRzjxeMTX45ACms87xjoRBPTdn24KGaQWzWh3SdP2sRa9\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2"
                        ],
                        "id": "urn:uuid:16b7960d-a14e-42fd-a585-faf1d6e3b209",
                        "type": [
                          "VerifiableCredential"
                        ],
                        "issuer": "did:key:z6Mkt224NWyb5GLLwWiPcMU88i2zEA9fSy3QQeCRsh7j7WT9",
                        "validFrom": "2025-01-26T05:06:36.06412934Z",
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                        },
                        "credentialStatus": {
                          "id": "urn:uuid:b5c6159a-63be-437d-ad4a-a0cbdb2809bf",
                          "type": "BitstringStatusListEntry",
                          "statusPurpose": "revocation",
                          "statusListCredential": "https://canivc.core.dev.procivis-one.com/ssi/revocation/v1/list/f965d288-fb2c-4648-b194-235f98be36e7",
                          "statusListIndex": "0"
                        },
                        "proof": {
                          "type": "DataIntegrityProof",
                          "created": "2025-01-26T05:06:36.06414153Z",
                          "cryptosuite": "eddsa-rdfc-2022",
                          "verificationMethod": "did:key:z6Mkt224NWyb5GLLwWiPcMU88i2zEA9fSy3QQeCRsh7j7WT9#z6Mkt224NWyb5GLLwWiPcMU88i2zEA9fSy3QQeCRsh7j7WT9",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "z2z3ZGqJXSfL873ebuxntccKCAdaXoK8CcnJwWUm61X3jRzjxeMTX45ACms87xjoRBPTdn24KGaQWzWh3SdP2sRa9"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://test-api.mynext.id/api/v1/verifier/credential/vc-api/verify",
                  "status": 400
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js:56:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "Procivis One Core should verify Procivis One Core",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "uTvFuKZ94YGr-Ymq8y8Tj",
              "ctx": null,
              "_testId": "urn:uuid:78351008-6123-49ed-9cba-e8886fcafb47",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Procivis One Core",
                "columnId": "Procivis One Core"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 80981,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 183,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\"],\"id\":\"urn:uuid:16b7960d-a14e-42fd-a585-faf1d6e3b209\",\"type\":[\"VerifiableCredential\"],\"issuer\":\"did:key:z6Mkt224NWyb5GLLwWiPcMU88i2zEA9fSy3QQeCRsh7j7WT9\",\"validFrom\":\"2025-01-26T05:06:36.06412934Z\",\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\"},\"credentialStatus\":{\"id\":\"urn:uuid:b5c6159a-63be-437d-ad4a-a0cbdb2809bf\",\"type\":\"BitstringStatusListEntry\",\"statusPurpose\":\"revocation\",\"statusListCredential\":\"https://canivc.core.dev.procivis-one.com/ssi/revocation/v1/list/f965d288-fb2c-4648-b194-235f98be36e7\",\"statusListIndex\":\"0\"},\"proof\":{\"type\":\"DataIntegrityProof\",\"created\":\"2025-01-26T05:06:36.06414153Z\",\"cryptosuite\":\"eddsa-rdfc-2022\",\"verificationMethod\":\"did:key:z6Mkt224NWyb5GLLwWiPcMU88i2zEA9fSy3QQeCRsh7j7WT9#z6Mkt224NWyb5GLLwWiPcMU88i2zEA9fSy3QQeCRsh7j7WT9\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z2z3ZGqJXSfL873ebuxntccKCAdaXoK8CcnJwWUm61X3jRzjxeMTX45ACms87xjoRBPTdn24KGaQWzWh3SdP2sRa9\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2"
                        ],
                        "id": "urn:uuid:16b7960d-a14e-42fd-a585-faf1d6e3b209",
                        "type": [
                          "VerifiableCredential"
                        ],
                        "issuer": "did:key:z6Mkt224NWyb5GLLwWiPcMU88i2zEA9fSy3QQeCRsh7j7WT9",
                        "validFrom": "2025-01-26T05:06:36.06412934Z",
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                        },
                        "credentialStatus": {
                          "id": "urn:uuid:b5c6159a-63be-437d-ad4a-a0cbdb2809bf",
                          "type": "BitstringStatusListEntry",
                          "statusPurpose": "revocation",
                          "statusListCredential": "https://canivc.core.dev.procivis-one.com/ssi/revocation/v1/list/f965d288-fb2c-4648-b194-235f98be36e7",
                          "statusListIndex": "0"
                        },
                        "proof": {
                          "type": "DataIntegrityProof",
                          "created": "2025-01-26T05:06:36.06414153Z",
                          "cryptosuite": "eddsa-rdfc-2022",
                          "verificationMethod": "did:key:z6Mkt224NWyb5GLLwWiPcMU88i2zEA9fSy3QQeCRsh7j7WT9#z6Mkt224NWyb5GLLwWiPcMU88i2zEA9fSy3QQeCRsh7j7WT9",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "z2z3ZGqJXSfL873ebuxntccKCAdaXoK8CcnJwWUm61X3jRzjxeMTX45ACms87xjoRBPTdn24KGaQWzWh3SdP2sRa9"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://canivc.core.dev.procivis-one.com/vc-api/credentials/verify",
                  "status": 400,
                  "data": {
                    "errors": [
                      {
                        "status": 400,
                        "title": "Formatter error `Could not verify: `Verification error: Invalid signature``",
                        "detail": null
                      }
                    ]
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js:56:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "SpruceID should verify Procivis One Core",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "uTvFuKZ94YGr-Ymq8y8Tj",
              "ctx": null,
              "_testId": "urn:uuid:0aa9f012-7dfa-4c32-957d-d24c0cc09bd6",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Procivis One Core",
                "columnId": "SpruceID"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 81165,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 97,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\"],\"id\":\"urn:uuid:16b7960d-a14e-42fd-a585-faf1d6e3b209\",\"type\":[\"VerifiableCredential\"],\"issuer\":\"did:key:z6Mkt224NWyb5GLLwWiPcMU88i2zEA9fSy3QQeCRsh7j7WT9\",\"validFrom\":\"2025-01-26T05:06:36.06412934Z\",\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\"},\"credentialStatus\":{\"id\":\"urn:uuid:b5c6159a-63be-437d-ad4a-a0cbdb2809bf\",\"type\":\"BitstringStatusListEntry\",\"statusPurpose\":\"revocation\",\"statusListCredential\":\"https://canivc.core.dev.procivis-one.com/ssi/revocation/v1/list/f965d288-fb2c-4648-b194-235f98be36e7\",\"statusListIndex\":\"0\"},\"proof\":{\"type\":\"DataIntegrityProof\",\"created\":\"2025-01-26T05:06:36.06414153Z\",\"cryptosuite\":\"eddsa-rdfc-2022\",\"verificationMethod\":\"did:key:z6Mkt224NWyb5GLLwWiPcMU88i2zEA9fSy3QQeCRsh7j7WT9#z6Mkt224NWyb5GLLwWiPcMU88i2zEA9fSy3QQeCRsh7j7WT9\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z2z3ZGqJXSfL873ebuxntccKCAdaXoK8CcnJwWUm61X3jRzjxeMTX45ACms87xjoRBPTdn24KGaQWzWh3SdP2sRa9\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2"
                        ],
                        "id": "urn:uuid:16b7960d-a14e-42fd-a585-faf1d6e3b209",
                        "type": [
                          "VerifiableCredential"
                        ],
                        "issuer": "did:key:z6Mkt224NWyb5GLLwWiPcMU88i2zEA9fSy3QQeCRsh7j7WT9",
                        "validFrom": "2025-01-26T05:06:36.06412934Z",
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                        },
                        "credentialStatus": {
                          "id": "urn:uuid:b5c6159a-63be-437d-ad4a-a0cbdb2809bf",
                          "type": "BitstringStatusListEntry",
                          "statusPurpose": "revocation",
                          "statusListCredential": "https://canivc.core.dev.procivis-one.com/ssi/revocation/v1/list/f965d288-fb2c-4648-b194-235f98be36e7",
                          "statusListIndex": "0"
                        },
                        "proof": {
                          "type": "DataIntegrityProof",
                          "created": "2025-01-26T05:06:36.06414153Z",
                          "cryptosuite": "eddsa-rdfc-2022",
                          "verificationMethod": "did:key:z6Mkt224NWyb5GLLwWiPcMU88i2zEA9fSy3QQeCRsh7j7WT9#z6Mkt224NWyb5GLLwWiPcMU88i2zEA9fSy3QQeCRsh7j7WT9",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "z2z3ZGqJXSfL873ebuxntccKCAdaXoK8CcnJwWUm61X3jRzjxeMTX45ACms87xjoRBPTdn24KGaQWzWh3SdP2sRa9"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc.spruceid.xyz/credentials/verify",
                  "status": 400
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js:56:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "Trential should verify Procivis One Core",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "uTvFuKZ94YGr-Ymq8y8Tj",
              "ctx": null,
              "_testId": "urn:uuid:d3177e82-6094-482a-823a-9ae2487b1f73",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Procivis One Core",
                "columnId": "Trential"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 81263,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 546,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: invalid proof { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\"],\"id\":\"urn:uuid:16b7960d-a14e-42fd-a585-faf1d6e3b209\",\"type\":[\"VerifiableCredential\"],\"issuer\":\"did:key:z6Mkt224NWyb5GLLwWiPcMU88i2zEA9fSy3QQeCRsh7j7WT9\",\"validFrom\":\"2025-01-26T05:06:36.06412934Z\",\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\"},\"credentialStatus\":{\"id\":\"urn:uuid:b5c6159a-63be-437d-ad4a-a0cbdb2809bf\",\"type\":\"BitstringStatusListEntry\",\"statusPurpose\":\"revocation\",\"statusListCredential\":\"https://canivc.core.dev.procivis-one.com/ssi/revocation/v1/list/f965d288-fb2c-4648-b194-235f98be36e7\",\"statusListIndex\":\"0\"},\"proof\":{\"type\":\"DataIntegrityProof\",\"created\":\"2025-01-26T05:06:36.06414153Z\",\"cryptosuite\":\"eddsa-rdfc-2022\",\"verificationMethod\":\"did:key:z6Mkt224NWyb5GLLwWiPcMU88i2zEA9fSy3QQeCRsh7j7WT9#z6Mkt224NWyb5GLLwWiPcMU88i2zEA9fSy3QQeCRsh7j7WT9\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z2z3ZGqJXSfL873ebuxntccKCAdaXoK8CcnJwWUm61X3jRzjxeMTX45ACms87xjoRBPTdn24KGaQWzWh3SdP2sRa9\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2"
                        ],
                        "id": "urn:uuid:16b7960d-a14e-42fd-a585-faf1d6e3b209",
                        "type": [
                          "VerifiableCredential"
                        ],
                        "issuer": "did:key:z6Mkt224NWyb5GLLwWiPcMU88i2zEA9fSy3QQeCRsh7j7WT9",
                        "validFrom": "2025-01-26T05:06:36.06412934Z",
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                        },
                        "credentialStatus": {
                          "id": "urn:uuid:b5c6159a-63be-437d-ad4a-a0cbdb2809bf",
                          "type": "BitstringStatusListEntry",
                          "statusPurpose": "revocation",
                          "statusListCredential": "https://canivc.core.dev.procivis-one.com/ssi/revocation/v1/list/f965d288-fb2c-4648-b194-235f98be36e7",
                          "statusListIndex": "0"
                        },
                        "proof": {
                          "type": "DataIntegrityProof",
                          "created": "2025-01-26T05:06:36.06414153Z",
                          "cryptosuite": "eddsa-rdfc-2022",
                          "verificationMethod": "did:key:z6Mkt224NWyb5GLLwWiPcMU88i2zEA9fSy3QQeCRsh7j7WT9#z6Mkt224NWyb5GLLwWiPcMU88i2zEA9fSy3QQeCRsh7j7WT9",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "z2z3ZGqJXSfL873ebuxntccKCAdaXoK8CcnJwWUm61X3jRzjxeMTX45ACms87xjoRBPTdn24KGaQWzWh3SdP2sRa9"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://api.trential.dev/indisi-vc/verifier/credentials/verify",
                  "status": 400,
                  "data": {
                    "message": "invalid proof"
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: invalid proof { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js:56:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "Trinsic should verify Procivis One Core",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "uTvFuKZ94YGr-Ymq8y8Tj",
              "ctx": null,
              "_testId": "urn:uuid:88eb4a92-bc26-4bc0-89f2-3494de75e064",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Procivis One Core",
                "columnId": "Trinsic"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 81810,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 99,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "bovine should verify Procivis One Core",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "uTvFuKZ94YGr-Ymq8y8Tj",
              "ctx": null,
              "_testId": "urn:uuid:fa47f8ba-8edc-4216-9ddc-932f89ac0cab",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Procivis One Core",
                "columnId": "bovine"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 81910,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 154,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\"],\"id\":\"urn:uuid:16b7960d-a14e-42fd-a585-faf1d6e3b209\",\"type\":[\"VerifiableCredential\"],\"issuer\":\"did:key:z6Mkt224NWyb5GLLwWiPcMU88i2zEA9fSy3QQeCRsh7j7WT9\",\"validFrom\":\"2025-01-26T05:06:36.06412934Z\",\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\"},\"credentialStatus\":{\"id\":\"urn:uuid:b5c6159a-63be-437d-ad4a-a0cbdb2809bf\",\"type\":\"BitstringStatusListEntry\",\"statusPurpose\":\"revocation\",\"statusListCredential\":\"https://canivc.core.dev.procivis-one.com/ssi/revocation/v1/list/f965d288-fb2c-4648-b194-235f98be36e7\",\"statusListIndex\":\"0\"},\"proof\":{\"type\":\"DataIntegrityProof\",\"created\":\"2025-01-26T05:06:36.06414153Z\",\"cryptosuite\":\"eddsa-rdfc-2022\",\"verificationMethod\":\"did:key:z6Mkt224NWyb5GLLwWiPcMU88i2zEA9fSy3QQeCRsh7j7WT9#z6Mkt224NWyb5GLLwWiPcMU88i2zEA9fSy3QQeCRsh7j7WT9\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z2z3ZGqJXSfL873ebuxntccKCAdaXoK8CcnJwWUm61X3jRzjxeMTX45ACms87xjoRBPTdn24KGaQWzWh3SdP2sRa9\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2"
                        ],
                        "id": "urn:uuid:16b7960d-a14e-42fd-a585-faf1d6e3b209",
                        "type": [
                          "VerifiableCredential"
                        ],
                        "issuer": "did:key:z6Mkt224NWyb5GLLwWiPcMU88i2zEA9fSy3QQeCRsh7j7WT9",
                        "validFrom": "2025-01-26T05:06:36.06412934Z",
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                        },
                        "credentialStatus": {
                          "id": "urn:uuid:b5c6159a-63be-437d-ad4a-a0cbdb2809bf",
                          "type": "BitstringStatusListEntry",
                          "statusPurpose": "revocation",
                          "statusListCredential": "https://canivc.core.dev.procivis-one.com/ssi/revocation/v1/list/f965d288-fb2c-4648-b194-235f98be36e7",
                          "statusListIndex": "0"
                        },
                        "proof": {
                          "type": "DataIntegrityProof",
                          "created": "2025-01-26T05:06:36.06414153Z",
                          "cryptosuite": "eddsa-rdfc-2022",
                          "verificationMethod": "did:key:z6Mkt224NWyb5GLLwWiPcMU88i2zEA9fSy3QQeCRsh7j7WT9#z6Mkt224NWyb5GLLwWiPcMU88i2zEA9fSy3QQeCRsh7j7WT9",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "z2z3ZGqJXSfL873ebuxntccKCAdaXoK8CcnJwWUm61X3jRzjxeMTX45ACms87xjoRBPTdn24KGaQWzWh3SdP2sRa9"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://bovine.social/w3c-di/verify",
                  "status": 400
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js:56:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            }
          ]
        },
        {
          "id": "SpruceID",
          "cells": [
            {
              "type": "test",
              "title": "apicatalog.com should verify SpruceID",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "uTvFuKZ94YGr-Ymq8y8Tj",
              "ctx": null,
              "_testId": "urn:uuid:e3f54457-244d-4e34-9558-446319bffa3b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "SpruceID",
                "columnId": "apicatalog.com"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 82063,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 54,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: A non-empty JSON Pointer must … { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\"],\"id\":\"urn:uuid:b85279d2-f47e-4c62-9b5d-519562dcbbf4\",\"type\":[\"VerifiableCredential\"],\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\",\"name\":\"ExampleClaim\"},\"issuer\":\"did:key:z6MkgYAGxLBSXa6Ygk1PnUbK2F7zya8juE9nfsZhrvY7c9GD\",\"credentialStatus\":{\"id\":\"https://vc.spruceid.xyz/urn%3Auuid%3Ab85279d2%2Df47e%2D4c62%2D9b5d%2D519562dcbbf4\",\"type\":\"BitstringStatusListEntry\",\"statusListCredential\":\"https://vc.spruceid.xyz/statuslist\",\"statusListIndex\":\"1\",\"statusPurpose\":\"revocation\"},\"proof\":{\"type\":\"DataIntegrityProof\",\"cryptosuite\":\"eddsa-rdfc-2022\",\"verificationMethod\":\"did:key:z6MkgYAGxLBSXa6Ygk1PnUbK2F7zya8juE9nfsZhrvY7c9GD#z6MkgYAGxLBSXa6Ygk1PnUbK2F7zya8juE9nfsZhrvY7c9GD\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z1UMmXwkBvSUEk4k5dpJWazwnbCyUUHY8wLXDp4u1tYuCEy5a5VBeKtqxkHLHy3rAwgsSY6MbBqjDmFUUjs6pV6F\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2"
                        ],
                        "id": "urn:uuid:b85279d2-f47e-4c62-9b5d-519562dcbbf4",
                        "type": [
                          "VerifiableCredential"
                        ],
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b",
                          "name": "ExampleClaim"
                        },
                        "issuer": "did:key:z6MkgYAGxLBSXa6Ygk1PnUbK2F7zya8juE9nfsZhrvY7c9GD",
                        "credentialStatus": {
                          "id": "https://vc.spruceid.xyz/urn%3Auuid%3Ab85279d2%2Df47e%2D4c62%2D9b5d%2D519562dcbbf4",
                          "type": "BitstringStatusListEntry",
                          "statusListCredential": "https://vc.spruceid.xyz/statuslist",
                          "statusListIndex": "1",
                          "statusPurpose": "revocation"
                        },
                        "proof": {
                          "type": "DataIntegrityProof",
                          "cryptosuite": "eddsa-rdfc-2022",
                          "verificationMethod": "did:key:z6MkgYAGxLBSXa6Ygk1PnUbK2F7zya8juE9nfsZhrvY7c9GD#z6MkgYAGxLBSXa6Ygk1PnUbK2F7zya8juE9nfsZhrvY7c9GD",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "z1UMmXwkBvSUEk4k5dpJWazwnbCyUUHY8wLXDp4u1tYuCEy5a5VBeKtqxkHLHy3rAwgsSY6MbBqjDmFUUjs6pV6F"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://us-central1-api-catalog.cloudfunctions.net/vc-api-verify",
                  "status": 400,
                  "data": {
                    "message": "A non-empty JSON Pointer must begin with a '/'"
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: A non-empty JSON Pointer must … { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js:56:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "Aviary Tech should verify SpruceID",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "uTvFuKZ94YGr-Ymq8y8Tj",
              "ctx": null,
              "_testId": "urn:uuid:8eee252d-c391-4c47-8c53-7447ffcbae92",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "SpruceID",
                "columnId": "Aviary Tech"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 82118,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 44,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\"],\"id\":\"urn:uuid:b85279d2-f47e-4c62-9b5d-519562dcbbf4\",\"type\":[\"VerifiableCredential\"],\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\",\"name\":\"ExampleClaim\"},\"issuer\":\"did:key:z6MkgYAGxLBSXa6Ygk1PnUbK2F7zya8juE9nfsZhrvY7c9GD\",\"credentialStatus\":{\"id\":\"https://vc.spruceid.xyz/urn%3Auuid%3Ab85279d2%2Df47e%2D4c62%2D9b5d%2D519562dcbbf4\",\"type\":\"BitstringStatusListEntry\",\"statusListCredential\":\"https://vc.spruceid.xyz/statuslist\",\"statusListIndex\":\"1\",\"statusPurpose\":\"revocation\"},\"proof\":{\"type\":\"DataIntegrityProof\",\"cryptosuite\":\"eddsa-rdfc-2022\",\"verificationMethod\":\"did:key:z6MkgYAGxLBSXa6Ygk1PnUbK2F7zya8juE9nfsZhrvY7c9GD#z6MkgYAGxLBSXa6Ygk1PnUbK2F7zya8juE9nfsZhrvY7c9GD\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z1UMmXwkBvSUEk4k5dpJWazwnbCyUUHY8wLXDp4u1tYuCEy5a5VBeKtqxkHLHy3rAwgsSY6MbBqjDmFUUjs6pV6F\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2"
                        ],
                        "id": "urn:uuid:b85279d2-f47e-4c62-9b5d-519562dcbbf4",
                        "type": [
                          "VerifiableCredential"
                        ],
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b",
                          "name": "ExampleClaim"
                        },
                        "issuer": "did:key:z6MkgYAGxLBSXa6Ygk1PnUbK2F7zya8juE9nfsZhrvY7c9GD",
                        "credentialStatus": {
                          "id": "https://vc.spruceid.xyz/urn%3Auuid%3Ab85279d2%2Df47e%2D4c62%2D9b5d%2D519562dcbbf4",
                          "type": "BitstringStatusListEntry",
                          "statusListCredential": "https://vc.spruceid.xyz/statuslist",
                          "statusListIndex": "1",
                          "statusPurpose": "revocation"
                        },
                        "proof": {
                          "type": "DataIntegrityProof",
                          "cryptosuite": "eddsa-rdfc-2022",
                          "verificationMethod": "did:key:z6MkgYAGxLBSXa6Ygk1PnUbK2F7zya8juE9nfsZhrvY7c9GD#z6MkgYAGxLBSXa6Ygk1PnUbK2F7zya8juE9nfsZhrvY7c9GD",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "z1UMmXwkBvSUEk4k5dpJWazwnbCyUUHY8wLXDp4u1tYuCEy5a5VBeKtqxkHLHy3rAwgsSY6MbBqjDmFUUjs6pV6F"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://demo.av1.sh/credentials/verify",
                  "status": 400,
                  "data": {
                    "verified": false,
                    "errors": [
                      "Required"
                    ]
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js:56:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "Digital Bazaar should verify SpruceID",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "uTvFuKZ94YGr-Ymq8y8Tj",
              "ctx": null,
              "_testId": "urn:uuid:b3eb92b9-dbbf-4768-a8d6-d06b43f60a57",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "SpruceID",
                "columnId": "Digital Bazaar"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 82163,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 89,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Grotto Networking should verify SpruceID",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "uTvFuKZ94YGr-Ymq8y8Tj",
              "ctx": null,
              "_testId": "urn:uuid:c4bdc2c0-e8e0-425b-a668-e407f7f01d0c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "SpruceID",
                "columnId": "Grotto Networking"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 82252,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 331,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Netis should verify SpruceID",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "uTvFuKZ94YGr-Ymq8y8Tj",
              "ctx": null,
              "_testId": "urn:uuid:0ef7640f-24ed-4edb-83fa-1b592d8f5e9a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "SpruceID",
                "columnId": "Netis"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 82584,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 172,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Procivis One Core should verify SpruceID",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "uTvFuKZ94YGr-Ymq8y8Tj",
              "ctx": null,
              "_testId": "urn:uuid:a710724f-fe70-4f30-b53f-62a796c6d711",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "SpruceID",
                "columnId": "Procivis One Core"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 82755,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 194,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "SpruceID should verify SpruceID",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "uTvFuKZ94YGr-Ymq8y8Tj",
              "ctx": null,
              "_testId": "urn:uuid:085d8ec6-8369-4962-bdfb-34bac5d04dfc",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "SpruceID",
                "columnId": "SpruceID"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 82949,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 96,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Trential should verify SpruceID",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "uTvFuKZ94YGr-Ymq8y8Tj",
              "ctx": null,
              "_testId": "urn:uuid:dfeb8834-c37b-44fe-9c1c-49382107a718",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "SpruceID",
                "columnId": "Trential"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 83045,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1009,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Trinsic should verify SpruceID",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "uTvFuKZ94YGr-Ymq8y8Tj",
              "ctx": null,
              "_testId": "urn:uuid:1b308ad4-3054-4a05-9454-23924cf61a1e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "SpruceID",
                "columnId": "Trinsic"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 84055,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 97,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "bovine should verify SpruceID",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "uTvFuKZ94YGr-Ymq8y8Tj",
              "ctx": null,
              "_testId": "urn:uuid:dfd2d16a-5c69-440a-ad67-9f1b1b7d83bd",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "SpruceID",
                "columnId": "bovine"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 84152,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 152,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "Trential",
          "cells": [
            {
              "type": "test",
              "title": "apicatalog.com should verify Trential",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "uTvFuKZ94YGr-Ymq8y8Tj",
              "ctx": null,
              "_testId": "urn:uuid:f040cfe8-7818-4026-b7fc-335e4ca2d6a2",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Trential",
                "columnId": "apicatalog.com"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 84304,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 61,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: A non-empty JSON Pointer must … { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\"],\"id\":\"urn:uuid:4c717339-7eb1-4374-8564-b723a9dd5969\",\"type\":[\"VerifiableCredential\"],\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\",\"name\":\"ExampleClaim\"},\"issuer\":\"did:key:z6Mksp1UFB9CFNSao7BC9gVkHoHidRK8NrZNNLqFDkp5xUXC\",\"proof\":{\"type\":\"DataIntegrityProof\",\"created\":\"2025-01-26T05:06:37Z\",\"verificationMethod\":\"did:key:z6Mksp1UFB9CFNSao7BC9gVkHoHidRK8NrZNNLqFDkp5xUXC#z6Mksp1UFB9CFNSao7BC9gVkHoHidRK8NrZNNLqFDkp5xUXC\",\"cryptosuite\":\"eddsa-rdfc-2022\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z3s1DB7sN5a78sJkJCgXkspSsKCjYvCCxfb6oj2kZuGFeDLAo7PPTrqvztPhz1dA6acUUzzSWg712RaDUM41cRu9r\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2"
                        ],
                        "id": "urn:uuid:4c717339-7eb1-4374-8564-b723a9dd5969",
                        "type": [
                          "VerifiableCredential"
                        ],
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b",
                          "name": "ExampleClaim"
                        },
                        "issuer": "did:key:z6Mksp1UFB9CFNSao7BC9gVkHoHidRK8NrZNNLqFDkp5xUXC",
                        "proof": {
                          "type": "DataIntegrityProof",
                          "created": "2025-01-26T05:06:37Z",
                          "verificationMethod": "did:key:z6Mksp1UFB9CFNSao7BC9gVkHoHidRK8NrZNNLqFDkp5xUXC#z6Mksp1UFB9CFNSao7BC9gVkHoHidRK8NrZNNLqFDkp5xUXC",
                          "cryptosuite": "eddsa-rdfc-2022",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "z3s1DB7sN5a78sJkJCgXkspSsKCjYvCCxfb6oj2kZuGFeDLAo7PPTrqvztPhz1dA6acUUzzSWg712RaDUM41cRu9r"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://us-central1-api-catalog.cloudfunctions.net/vc-api-verify",
                  "status": 400,
                  "data": {
                    "message": "A non-empty JSON Pointer must begin with a '/'"
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: A non-empty JSON Pointer must … { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js:56:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "Aviary Tech should verify Trential",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "uTvFuKZ94YGr-Ymq8y8Tj",
              "ctx": null,
              "_testId": "urn:uuid:9694c12f-c068-4f42-863e-5ba448a94b09",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Trential",
                "columnId": "Aviary Tech"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 84366,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 54,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "Digital Bazaar should verify Trential",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "uTvFuKZ94YGr-Ymq8y8Tj",
              "ctx": null,
              "_testId": "urn:uuid:d0aac4f1-e4f7-4d6c-98bd-104708523454",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Trential",
                "columnId": "Digital Bazaar"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 84421,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 91,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Grotto Networking should verify Trential",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "uTvFuKZ94YGr-Ymq8y8Tj",
              "ctx": null,
              "_testId": "urn:uuid:3371b439-668a-4af9-8e32-4a701de7d4b9",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Trential",
                "columnId": "Grotto Networking"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 84512,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 309,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Netis should verify Trential",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "uTvFuKZ94YGr-Ymq8y8Tj",
              "ctx": null,
              "_testId": "urn:uuid:1442c0d9-25d5-4b58-8889-14511c157694",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Trential",
                "columnId": "Netis"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 84821,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 169,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Procivis One Core should verify Trential",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "uTvFuKZ94YGr-Ymq8y8Tj",
              "ctx": null,
              "_testId": "urn:uuid:d9a31aeb-f8ca-4724-923a-0ade245044be",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Trential",
                "columnId": "Procivis One Core"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 84990,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 206,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "SpruceID should verify Trential",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "uTvFuKZ94YGr-Ymq8y8Tj",
              "ctx": null,
              "_testId": "urn:uuid:b87a603c-2af4-43ae-924b-fa02e08ecd58",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Trential",
                "columnId": "SpruceID"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 85196,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 110,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Trential should verify Trential",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "uTvFuKZ94YGr-Ymq8y8Tj",
              "ctx": null,
              "_testId": "urn:uuid:5d7f9d49-32ab-47ec-8584-dac1b47ad604",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Trential",
                "columnId": "Trential"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 85306,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 548,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Trinsic should verify Trential",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "uTvFuKZ94YGr-Ymq8y8Tj",
              "ctx": null,
              "_testId": "urn:uuid:7764602c-d6c8-454d-83ce-d03c0f02ffca",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Trential",
                "columnId": "Trinsic"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 85855,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 95,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "bovine should verify Trential",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "uTvFuKZ94YGr-Ymq8y8Tj",
              "ctx": null,
              "_testId": "urn:uuid:c16bcff8-1ccd-43b2-8f96-de497ca5910a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Trential",
                "columnId": "bovine"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 85950,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 151,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "Trinsic",
          "cells": [
            {
              "type": "test",
              "title": "apicatalog.com should verify Trinsic",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "uTvFuKZ94YGr-Ymq8y8Tj",
              "ctx": null,
              "_testId": "urn:uuid:0aff053e-4fdf-49a6-9ee5-2f2097fced6b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Trinsic",
                "columnId": "apicatalog.com"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 86101,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected issuer: Trinsic to issue a VC: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected issuer: Trinsic to issue a VC: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js:48:16)\n    at process.processImmediate (node:internal/timers:483:21)"
              }
            },
            {
              "type": "test",
              "title": "Aviary Tech should verify Trinsic",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "uTvFuKZ94YGr-Ymq8y8Tj",
              "ctx": null,
              "_testId": "urn:uuid:c8d4bc08-93cb-494c-bbd1-3affdd25b753",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Trinsic",
                "columnId": "Aviary Tech"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 86101,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected issuer: Trinsic to issue a VC: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected issuer: Trinsic to issue a VC: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js:48:16)\n    at process.processImmediate (node:internal/timers:483:21)"
              }
            },
            {
              "type": "test",
              "title": "Digital Bazaar should verify Trinsic",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "uTvFuKZ94YGr-Ymq8y8Tj",
              "ctx": null,
              "_testId": "urn:uuid:8623d6a0-a5a3-4f66-9198-34635a28ffa6",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Trinsic",
                "columnId": "Digital Bazaar"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 86102,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected issuer: Trinsic to issue a VC: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected issuer: Trinsic to issue a VC: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js:48:16)\n    at process.processImmediate (node:internal/timers:483:21)"
              }
            },
            {
              "type": "test",
              "title": "Grotto Networking should verify Trinsic",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "uTvFuKZ94YGr-Ymq8y8Tj",
              "ctx": null,
              "_testId": "urn:uuid:f3ba2bf8-fa1c-4e96-8ca5-def9e9c1e929",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Trinsic",
                "columnId": "Grotto Networking"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 86102,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected issuer: Trinsic to issue a VC: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected issuer: Trinsic to issue a VC: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js:48:16)\n    at process.processImmediate (node:internal/timers:483:21)"
              }
            },
            {
              "type": "test",
              "title": "Netis should verify Trinsic",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "uTvFuKZ94YGr-Ymq8y8Tj",
              "ctx": null,
              "_testId": "urn:uuid:396d9043-68e5-425e-b95d-f5c0a4fd2e22",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Trinsic",
                "columnId": "Netis"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 86102,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected issuer: Trinsic to issue a VC: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected issuer: Trinsic to issue a VC: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js:48:16)\n    at process.processImmediate (node:internal/timers:483:21)"
              }
            },
            {
              "type": "test",
              "title": "Procivis One Core should verify Trinsic",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "uTvFuKZ94YGr-Ymq8y8Tj",
              "ctx": null,
              "_testId": "urn:uuid:f36a522d-f53d-4e8b-bc5c-4ea30be2ce91",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Trinsic",
                "columnId": "Procivis One Core"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 86102,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected issuer: Trinsic to issue a VC: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected issuer: Trinsic to issue a VC: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js:48:16)\n    at process.processImmediate (node:internal/timers:483:21)"
              }
            },
            {
              "type": "test",
              "title": "SpruceID should verify Trinsic",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "uTvFuKZ94YGr-Ymq8y8Tj",
              "ctx": null,
              "_testId": "urn:uuid:55575aad-a81a-4cc6-8f84-0442494ff8c2",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Trinsic",
                "columnId": "SpruceID"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 86103,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected issuer: Trinsic to issue a VC: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected issuer: Trinsic to issue a VC: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js:48:16)\n    at process.processImmediate (node:internal/timers:483:21)"
              }
            },
            {
              "type": "test",
              "title": "Trential should verify Trinsic",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "uTvFuKZ94YGr-Ymq8y8Tj",
              "ctx": null,
              "_testId": "urn:uuid:cf64a68f-c4ed-481d-92fa-80407830d0a9",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Trinsic",
                "columnId": "Trential"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 86103,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected issuer: Trinsic to issue a VC: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected issuer: Trinsic to issue a VC: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js:48:16)\n    at process.processImmediate (node:internal/timers:483:21)"
              }
            },
            {
              "type": "test",
              "title": "Trinsic should verify Trinsic",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "uTvFuKZ94YGr-Ymq8y8Tj",
              "ctx": null,
              "_testId": "urn:uuid:45882bcd-6160-458f-8be8-e5c83d671bed",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Trinsic",
                "columnId": "Trinsic"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 86103,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected issuer: Trinsic to issue a VC: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected issuer: Trinsic to issue a VC: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js:48:16)\n    at process.processImmediate (node:internal/timers:483:21)"
              }
            },
            {
              "type": "test",
              "title": "bovine should verify Trinsic",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "uTvFuKZ94YGr-Ymq8y8Tj",
              "ctx": null,
              "_testId": "urn:uuid:80ba198a-4286-4f30-9f02-a105d6913b60",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Trinsic",
                "columnId": "bovine"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 86104,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected issuer: Trinsic to issue a VC: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected issuer: Trinsic to issue a VC: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js:48:16)\n    at process.processImmediate (node:internal/timers:483:21)"
              }
            }
          ]
        },
        {
          "id": "bovine",
          "cells": [
            {
              "type": "test",
              "title": "apicatalog.com should verify bovine",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "uTvFuKZ94YGr-Ymq8y8Tj",
              "ctx": null,
              "_testId": "urn:uuid:69df7917-650b-40ce-b614-3e6b9a697cae",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "bovine",
                "columnId": "apicatalog.com"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 86104,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 151,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: A non-empty JSON Pointer must … { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\",\"https://w3id.org/security/data-integrity/v2\"],\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\",\"name\":\"ExampleClaim\"},\"id\":\"urn:uuid:7b94b420-f88e-4949-ba88-6742d2a9c439\",\"issuer\":\"did:key:z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd\",\"proof\":{\"created\":\"2025-01-26T05:06:38Z\",\"cryptosuite\":\"eddsa-rdfc-2022\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z5tw7hr813wPnAc2W2uaNV5u74jb8aZVvyHhavJbakLu6gCm2dSNaejEuHBWPRBvHPRqe55zC3RRYYNJahoKe99xY\",\"type\":\"DataIntegrityProof\",\"verificationMethod\":\"did:key:z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd#z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd\"},\"type\":\"VerifiableCredential\"},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2",
                          "https://w3id.org/security/data-integrity/v2"
                        ],
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b",
                          "name": "ExampleClaim"
                        },
                        "id": "urn:uuid:7b94b420-f88e-4949-ba88-6742d2a9c439",
                        "issuer": "did:key:z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd",
                        "proof": {
                          "created": "2025-01-26T05:06:38Z",
                          "cryptosuite": "eddsa-rdfc-2022",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "z5tw7hr813wPnAc2W2uaNV5u74jb8aZVvyHhavJbakLu6gCm2dSNaejEuHBWPRBvHPRqe55zC3RRYYNJahoKe99xY",
                          "type": "DataIntegrityProof",
                          "verificationMethod": "did:key:z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd#z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd"
                        },
                        "type": "VerifiableCredential"
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://us-central1-api-catalog.cloudfunctions.net/vc-api-verify",
                  "status": 400,
                  "data": {
                    "message": "A non-empty JSON Pointer must begin with a '/'"
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: A non-empty JSON Pointer must … { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js:56:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "Aviary Tech should verify bovine",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "uTvFuKZ94YGr-Ymq8y8Tj",
              "ctx": null,
              "_testId": "urn:uuid:7a111e2f-44c1-4eb6-97b7-bab86ef3b76f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "bovine",
                "columnId": "Aviary Tech"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 86256,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 44,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\",\"https://w3id.org/security/data-integrity/v2\"],\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\",\"name\":\"ExampleClaim\"},\"id\":\"urn:uuid:7b94b420-f88e-4949-ba88-6742d2a9c439\",\"issuer\":\"did:key:z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd\",\"proof\":{\"created\":\"2025-01-26T05:06:38Z\",\"cryptosuite\":\"eddsa-rdfc-2022\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z5tw7hr813wPnAc2W2uaNV5u74jb8aZVvyHhavJbakLu6gCm2dSNaejEuHBWPRBvHPRqe55zC3RRYYNJahoKe99xY\",\"type\":\"DataIntegrityProof\",\"verificationMethod\":\"did:key:z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd#z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd\"},\"type\":\"VerifiableCredential\"},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2",
                          "https://w3id.org/security/data-integrity/v2"
                        ],
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b",
                          "name": "ExampleClaim"
                        },
                        "id": "urn:uuid:7b94b420-f88e-4949-ba88-6742d2a9c439",
                        "issuer": "did:key:z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd",
                        "proof": {
                          "created": "2025-01-26T05:06:38Z",
                          "cryptosuite": "eddsa-rdfc-2022",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "z5tw7hr813wPnAc2W2uaNV5u74jb8aZVvyHhavJbakLu6gCm2dSNaejEuHBWPRBvHPRqe55zC3RRYYNJahoKe99xY",
                          "type": "DataIntegrityProof",
                          "verificationMethod": "did:key:z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd#z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd"
                        },
                        "type": "VerifiableCredential"
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://demo.av1.sh/credentials/verify",
                  "status": 400,
                  "data": {
                    "verified": false,
                    "errors": [
                      "Expected array, received string"
                    ]
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js:56:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "Digital Bazaar should verify bovine",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "uTvFuKZ94YGr-Ymq8y8Tj",
              "ctx": null,
              "_testId": "urn:uuid:7ae2e76b-14c1-4096-ba70-1e3af8a0f2c1",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "bovine",
                "columnId": "Digital Bazaar"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 86300,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 82,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: A validation error occurred in… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2",
                          "https://w3id.org/security/data-integrity/v2"
                        ],
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b",
                          "name": "ExampleClaim"
                        },
                        "id": "urn:uuid:7b94b420-f88e-4949-ba88-6742d2a9c439",
                        "issuer": "did:key:z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd",
                        "proof": {
                          "created": "2025-01-26T05:06:38Z",
                          "cryptosuite": "eddsa-rdfc-2022",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "z5tw7hr813wPnAc2W2uaNV5u74jb8aZVvyHhavJbakLu6gCm2dSNaejEuHBWPRBvHPRqe55zC3RRYYNJahoKe99xY",
                          "type": "DataIntegrityProof",
                          "verificationMethod": "did:key:z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd#z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd"
                        },
                        "type": "VerifiableCredential"
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half",
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\",\"https://w3id.org/security/data-integrity/v2\"],\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\",\"name\":\"ExampleClaim\"},\"id\":\"urn:uuid:7b94b420-f88e-4949-ba88-6742d2a9c439\",\"issuer\":\"did:key:z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd\",\"proof\":{\"created\":\"2025-01-26T05:06:38Z\",\"cryptosuite\":\"eddsa-rdfc-2022\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z5tw7hr813wPnAc2W2uaNV5u74jb8aZVvyHhavJbakLu6gCm2dSNaejEuHBWPRBvHPRqe55zC3RRYYNJahoKe99xY\",\"type\":\"DataIntegrityProof\",\"verificationMethod\":\"did:key:z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd#z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd\"},\"type\":\"VerifiableCredential\"},\"options\":{\"checks\":[\"proof\"]}}"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc2.veresverifier.dev/verifiers/z19w7KofwvE2nkJeRVLp8NDxz/credentials/verify",
                  "status": 400,
                  "data": {
                    "name": "ValidationError",
                    "message": "A validation error occurred in the 'Verify Credential Body' validator.",
                    "details": {
                      "errors": [
                        {
                          "name": "ValidationError",
                          "message": "should be array",
                          "details": {
                            "instance": {
                              "verifiableCredential": {
                                "@context": [
                                  "https://www.w3.org/ns/credentials/v2",
                                  "https://w3id.org/security/data-integrity/v2"
                                ],
                                "credentialSubject": {
                                  "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b",
                                  "name": "ExampleClaim"
                                },
                                "id": "urn:uuid:7b94b420-f88e-4949-ba88-6742d2a9c439",
                                "issuer": "did:key:z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd",
                                "proof": {
                                  "created": "2025-01-26T05:06:38Z",
                                  "cryptosuite": "eddsa-rdfc-2022",
                                  "proofPurpose": "assertionMethod",
                                  "proofValue": "z5tw7hr813wPnAc2W2uaNV5u74jb8aZVvyHhavJbakLu6gCm2dSNaejEuHBWPRBvHPRqe55zC3RRYYNJahoKe99xY",
                                  "type": "DataIntegrityProof",
                                  "verificationMethod": "did:key:z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd#z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd"
                                },
                                "type": "VerifiableCredential"
                              },
                              "options": {
                                "checks": [
                                  "proof"
                                ]
                              }
                            },
                            "params": {
                              "type": "array"
                            },
                            "path": ".verifiableCredential.type",
                            "public": true,
                            "schemaPath": "#/properties/verifiableCredential/anyOf/0/properties/type/type",
                            "schema": {
                              "description": "",
                              "title": ""
                            },
                            "value": "VerifiableCredential"
                          },
                          "cause": null,
                          "stack": "ValidationError: should be array\n    at _createError (file:///home/node/app/node_modules/@bedrock/validation/lib/index.js:240:17)\n    at validate (file:///home/node/app/node_modules/@bedrock/validation/lib/index.js:88:14)\n    at validate (file:///home/node/app/node_modules/@bedrock/validation/lib/index.js:181:22)\n    at Layer.handle [as handle_request] (/home/node/app/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/node/app/node_modules/express/lib/router/route.js:149:13)\n    at cors (/home/node/app/node_modules/cors/lib/index.js:188:7)\n    at /home/node/app/node_modules/cors/lib/index.js:224:17\n    at originCallback (/home/node/app/node_modules/cors/lib/index.js:214:15)\n    at /home/node/app/node_modules/cors/lib/index.js:219:13\n    at optionsCallback (/home/node/app/node_modules/cors/lib/index.js:199:9)"
                        },
                        {
                          "name": "ValidationError",
                          "message": "should NOT have additional properties",
                          "details": {
                            "instance": {
                              "verifiableCredential": {
                                "@context": [
                                  "https://www.w3.org/ns/credentials/v2",
                                  "https://w3id.org/security/data-integrity/v2"
                                ],
                                "credentialSubject": {
                                  "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b",
                                  "name": "ExampleClaim"
                                },
                                "id": "urn:uuid:7b94b420-f88e-4949-ba88-6742d2a9c439",
                                "issuer": "did:key:z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd",
                                "proof": {
                                  "created": "2025-01-26T05:06:38Z",
                                  "cryptosuite": "eddsa-rdfc-2022",
                                  "proofPurpose": "assertionMethod",
                                  "proofValue": "z5tw7hr813wPnAc2W2uaNV5u74jb8aZVvyHhavJbakLu6gCm2dSNaejEuHBWPRBvHPRqe55zC3RRYYNJahoKe99xY",
                                  "type": "DataIntegrityProof",
                                  "verificationMethod": "did:key:z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd#z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd"
                                },
                                "type": "VerifiableCredential"
                              },
                              "options": {
                                "checks": [
                                  "proof"
                                ]
                              }
                            },
                            "params": {
                              "additionalProperty": "credentialSubject"
                            },
                            "path": ".verifiableCredential",
                            "public": true,
                            "schemaPath": "#/properties/verifiableCredential/anyOf/1/additionalProperties",
                            "schema": {
                              "description": "",
                              "title": "Enveloped Verifiable Credential"
                            },
                            "value": {
                              "@context": [
                                "https://www.w3.org/ns/credentials/v2",
                                "https://w3id.org/security/data-integrity/v2"
                              ],
                              "credentialSubject": {
                                "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b",
                                "name": "ExampleClaim"
                              },
                              "id": "urn:uuid:7b94b420-f88e-4949-ba88-6742d2a9c439",
                              "issuer": "did:key:z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd",
                              "proof": {
                                "created": "2025-01-26T05:06:38Z",
                                "cryptosuite": "eddsa-rdfc-2022",
                                "proofPurpose": "assertionMethod",
                                "proofValue": "z5tw7hr813wPnAc2W2uaNV5u74jb8aZVvyHhavJbakLu6gCm2dSNaejEuHBWPRBvHPRqe55zC3RRYYNJahoKe99xY",
                                "type": "DataIntegrityProof",
                                "verificationMethod": "did:key:z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd#z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd"
                              },
                              "type": "VerifiableCredential"
                            }
                          },
                          "cause": null,
                          "stack": "ValidationError: should NOT have additional properties\n    at _createError (file:///home/node/app/node_modules/@bedrock/validation/lib/index.js:240:17)\n    at validate (file:///home/node/app/node_modules/@bedrock/validation/lib/index.js:88:14)\n    at validate (file:///home/node/app/node_modules/@bedrock/validation/lib/index.js:181:22)\n    at Layer.handle [as handle_request] (/home/node/app/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/node/app/node_modules/express/lib/router/route.js:149:13)\n    at cors (/home/node/app/node_modules/cors/lib/index.js:188:7)\n    at /home/node/app/node_modules/cors/lib/index.js:224:17\n    at originCallback (/home/node/app/node_modules/cors/lib/index.js:214:15)\n    at /home/node/app/node_modules/cors/lib/index.js:219:13\n    at optionsCallback (/home/node/app/node_modules/cors/lib/index.js:199:9)"
                        },
                        {
                          "name": "ValidationError",
                          "message": "should match some schema in anyOf",
                          "details": {
                            "instance": {
                              "verifiableCredential": {
                                "@context": [
                                  "https://www.w3.org/ns/credentials/v2",
                                  "https://w3id.org/security/data-integrity/v2"
                                ],
                                "credentialSubject": {
                                  "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b",
                                  "name": "ExampleClaim"
                                },
                                "id": "urn:uuid:7b94b420-f88e-4949-ba88-6742d2a9c439",
                                "issuer": "did:key:z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd",
                                "proof": {
                                  "created": "2025-01-26T05:06:38Z",
                                  "cryptosuite": "eddsa-rdfc-2022",
                                  "proofPurpose": "assertionMethod",
                                  "proofValue": "z5tw7hr813wPnAc2W2uaNV5u74jb8aZVvyHhavJbakLu6gCm2dSNaejEuHBWPRBvHPRqe55zC3RRYYNJahoKe99xY",
                                  "type": "DataIntegrityProof",
                                  "verificationMethod": "did:key:z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd#z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd"
                                },
                                "type": "VerifiableCredential"
                              },
                              "options": {
                                "checks": [
                                  "proof"
                                ]
                              }
                            },
                            "params": {},
                            "path": ".verifiableCredential",
                            "public": true,
                            "schemaPath": "#/properties/verifiableCredential/anyOf",
                            "schema": {
                              "description": "",
                              "title": {
                                "title": "Verifiable Credential",
                                "type": "object",
                                "required": [
                                  "@context",
                                  "credentialSubject",
                                  "issuer",
                                  "type"
                                ],
                                "additionalProperties": true,
                                "properties": {
                                  "@context": {
                                    "type": "array",
                                    "minItems": 1,
                                    "items": [
                                      {
                                        "oneOf": [
                                          {
                                            "const": "https://www.w3.org/2018/credentials/v1"
                                          },
                                          {
                                            "const": "https://www.w3.org/ns/credentials/v2"
                                          }
                                        ]
                                      }
                                    ],
                                    "additionalItems": {
                                      "anyOf": [
                                        {
                                          "type": "string"
                                        },
                                        {
                                          "type": "object"
                                        }
                                      ]
                                    }
                                  },
                                  "credentialSubject": {
                                    "anyOf": [
                                      {
                                        "type": "object"
                                      },
                                      {
                                        "type": "array",
                                        "minItems": 1,
                                        "items": {
                                          "type": "object"
                                        }
                                      }
                                    ]
                                  },
                                  "id": {
                                    "type": "string"
                                  },
                                  "issuer": {
                                    "title": "identifier or an object with an id",
                                    "anyOf": [
                                      {
                                        "title": "ID",
                                        "description": "A unique identifier.",
                                        "type": "string",
                                        "minLength": 1,
                                        "disallow": {
                                          "type": "string",
                                          "enum": [
                                            "0"
                                          ]
                                        }
                                      },
                                      {
                                        "type": "object",
                                        "required": [
                                          "id"
                                        ],
                                        "additionalProperties": true,
                                        "properties": {
                                          "id": {
                                            "title": "ID",
                                            "description": "A unique identifier.",
                                            "type": "string",
                                            "minLength": 1,
                                            "disallow": {
                                              "type": "string",
                                              "enum": [
                                                "0"
                                              ]
                                            }
                                          }
                                        }
                                      }
                                    ]
                                  },
                                  "type": {
                                    "type": "array",
                                    "minItems": 1,
                                    "items": [
                                      {
                                        "const": "VerifiableCredential"
                                      }
                                    ],
                                    "additionalItems": {
                                      "type": "string"
                                    }
                                  },
                                  "proof": {
                                    "title": "Proof",
                                    "anyOf": [
                                      {
                                        "type": "object"
                                      },
                                      {
                                        "type": "array",
                                        "minItems": 1,
                                        "items": {
                                          "type": "object"
                                        }
                                      }
                                    ]
                                  }
                                }
                              }
                            },
                            "value": {
                              "@context": [
                                "https://www.w3.org/ns/credentials/v2",
                                "https://w3id.org/security/data-integrity/v2"
                              ],
                              "credentialSubject": {
                                "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b",
                                "name": "ExampleClaim"
                              },
                              "id": "urn:uuid:7b94b420-f88e-4949-ba88-6742d2a9c439",
                              "issuer": "did:key:z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd",
                              "proof": {
                                "created": "2025-01-26T05:06:38Z",
                                "cryptosuite": "eddsa-rdfc-2022",
                                "proofPurpose": "assertionMethod",
                                "proofValue": "z5tw7hr813wPnAc2W2uaNV5u74jb8aZVvyHhavJbakLu6gCm2dSNaejEuHBWPRBvHPRqe55zC3RRYYNJahoKe99xY",
                                "type": "DataIntegrityProof",
                                "verificationMethod": "did:key:z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd#z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd"
                              },
                              "type": "VerifiableCredential"
                            }
                          },
                          "cause": null,
                          "stack": "ValidationError: should match some schema in anyOf\n    at _createError (file:///home/node/app/node_modules/@bedrock/validation/lib/index.js:240:17)\n    at validate (file:///home/node/app/node_modules/@bedrock/validation/lib/index.js:88:14)\n    at validate (file:///home/node/app/node_modules/@bedrock/validation/lib/index.js:181:22)\n    at Layer.handle [as handle_request] (/home/node/app/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/node/app/node_modules/express/lib/router/route.js:149:13)\n    at cors (/home/node/app/node_modules/cors/lib/index.js:188:7)\n    at /home/node/app/node_modules/cors/lib/index.js:224:17\n    at originCallback (/home/node/app/node_modules/cors/lib/index.js:214:15)\n    at /home/node/app/node_modules/cors/lib/index.js:219:13\n    at optionsCallback (/home/node/app/node_modules/cors/lib/index.js:199:9)"
                        }
                      ],
                      "httpStatusCode": 400
                    },
                    "cause": null,
                    "stack": "ValidationError: A validation error occurred in the 'Verify Credential Body' validator.\n    at _createError (file:///home/node/app/node_modules/@bedrock/validation/lib/index.js:246:17)\n    at validate (file:///home/node/app/node_modules/@bedrock/validation/lib/index.js:88:14)\n    at validate (file:///home/node/app/node_modules/@bedrock/validation/lib/index.js:181:22)\n    at Layer.handle [as handle_request] (/home/node/app/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/node/app/node_modules/express/lib/router/route.js:149:13)\n    at cors (/home/node/app/node_modules/cors/lib/index.js:188:7)\n    at /home/node/app/node_modules/cors/lib/index.js:224:17\n    at originCallback (/home/node/app/node_modules/cors/lib/index.js:214:15)\n    at /home/node/app/node_modules/cors/lib/index.js:219:13\n    at optionsCallback (/home/node/app/node_modules/cors/lib/index.js:199:9)",
                    "type": "ValidationError"
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: A validation error occurred in… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js:56:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "Grotto Networking should verify bovine",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "uTvFuKZ94YGr-Ymq8y8Tj",
              "ctx": null,
              "_testId": "urn:uuid:a5981519-84e4-4248-b280-39421954d8fe",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "bovine",
                "columnId": "Grotto Networking"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 86383,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 806,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Netis should verify bovine",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "uTvFuKZ94YGr-Ymq8y8Tj",
              "ctx": null,
              "_testId": "urn:uuid:a6d4285f-ba26-4416-a3a4-48f5d7c57531",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "bovine",
                "columnId": "Netis"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 87189,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 168,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\",\"https://w3id.org/security/data-integrity/v2\"],\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\",\"name\":\"ExampleClaim\"},\"id\":\"urn:uuid:7b94b420-f88e-4949-ba88-6742d2a9c439\",\"issuer\":\"did:key:z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd\",\"proof\":{\"created\":\"2025-01-26T05:06:38Z\",\"cryptosuite\":\"eddsa-rdfc-2022\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z5tw7hr813wPnAc2W2uaNV5u74jb8aZVvyHhavJbakLu6gCm2dSNaejEuHBWPRBvHPRqe55zC3RRYYNJahoKe99xY\",\"type\":\"DataIntegrityProof\",\"verificationMethod\":\"did:key:z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd#z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd\"},\"type\":\"VerifiableCredential\"},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2",
                          "https://w3id.org/security/data-integrity/v2"
                        ],
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b",
                          "name": "ExampleClaim"
                        },
                        "id": "urn:uuid:7b94b420-f88e-4949-ba88-6742d2a9c439",
                        "issuer": "did:key:z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd",
                        "proof": {
                          "created": "2025-01-26T05:06:38Z",
                          "cryptosuite": "eddsa-rdfc-2022",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "z5tw7hr813wPnAc2W2uaNV5u74jb8aZVvyHhavJbakLu6gCm2dSNaejEuHBWPRBvHPRqe55zC3RRYYNJahoKe99xY",
                          "type": "DataIntegrityProof",
                          "verificationMethod": "did:key:z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd#z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd"
                        },
                        "type": "VerifiableCredential"
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://test-api.mynext.id/api/v1/verifier/credential/vc-api/verify",
                  "status": 400
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js:56:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "Procivis One Core should verify bovine",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "uTvFuKZ94YGr-Ymq8y8Tj",
              "ctx": null,
              "_testId": "urn:uuid:51988f8c-fb30-4924-8f1f-d1f7974c4f30",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "bovine",
                "columnId": "Procivis One Core"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 87358,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 143,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\",\"https://w3id.org/security/data-integrity/v2\"],\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\",\"name\":\"ExampleClaim\"},\"id\":\"urn:uuid:7b94b420-f88e-4949-ba88-6742d2a9c439\",\"issuer\":\"did:key:z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd\",\"proof\":{\"created\":\"2025-01-26T05:06:38Z\",\"cryptosuite\":\"eddsa-rdfc-2022\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z5tw7hr813wPnAc2W2uaNV5u74jb8aZVvyHhavJbakLu6gCm2dSNaejEuHBWPRBvHPRqe55zC3RRYYNJahoKe99xY\",\"type\":\"DataIntegrityProof\",\"verificationMethod\":\"did:key:z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd#z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd\"},\"type\":\"VerifiableCredential\"},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2",
                          "https://w3id.org/security/data-integrity/v2"
                        ],
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b",
                          "name": "ExampleClaim"
                        },
                        "id": "urn:uuid:7b94b420-f88e-4949-ba88-6742d2a9c439",
                        "issuer": "did:key:z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd",
                        "proof": {
                          "created": "2025-01-26T05:06:38Z",
                          "cryptosuite": "eddsa-rdfc-2022",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "z5tw7hr813wPnAc2W2uaNV5u74jb8aZVvyHhavJbakLu6gCm2dSNaejEuHBWPRBvHPRqe55zC3RRYYNJahoKe99xY",
                          "type": "DataIntegrityProof",
                          "verificationMethod": "did:key:z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd#z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd"
                        },
                        "type": "VerifiableCredential"
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://canivc.core.dev.procivis-one.com/vc-api/credentials/verify",
                  "status": 400,
                  "data": {
                    "errors": [
                      {
                        "status": 400,
                        "title": "Failed to deserialize the JSON body into the target type",
                        "detail": null
                      }
                    ]
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js:56:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "SpruceID should verify bovine",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "uTvFuKZ94YGr-Ymq8y8Tj",
              "ctx": null,
              "_testId": "urn:uuid:1b6a76fd-4785-4f4a-866e-e80696b4914a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "bovine",
                "columnId": "SpruceID"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 87502,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 105,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\",\"https://w3id.org/security/data-integrity/v2\"],\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\",\"name\":\"ExampleClaim\"},\"id\":\"urn:uuid:7b94b420-f88e-4949-ba88-6742d2a9c439\",\"issuer\":\"did:key:z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd\",\"proof\":{\"created\":\"2025-01-26T05:06:38Z\",\"cryptosuite\":\"eddsa-rdfc-2022\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z5tw7hr813wPnAc2W2uaNV5u74jb8aZVvyHhavJbakLu6gCm2dSNaejEuHBWPRBvHPRqe55zC3RRYYNJahoKe99xY\",\"type\":\"DataIntegrityProof\",\"verificationMethod\":\"did:key:z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd#z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd\"},\"type\":\"VerifiableCredential\"},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2",
                          "https://w3id.org/security/data-integrity/v2"
                        ],
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b",
                          "name": "ExampleClaim"
                        },
                        "id": "urn:uuid:7b94b420-f88e-4949-ba88-6742d2a9c439",
                        "issuer": "did:key:z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd",
                        "proof": {
                          "created": "2025-01-26T05:06:38Z",
                          "cryptosuite": "eddsa-rdfc-2022",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "z5tw7hr813wPnAc2W2uaNV5u74jb8aZVvyHhavJbakLu6gCm2dSNaejEuHBWPRBvHPRqe55zC3RRYYNJahoKe99xY",
                          "type": "DataIntegrityProof",
                          "verificationMethod": "did:key:z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd#z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd"
                        },
                        "type": "VerifiableCredential"
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc.spruceid.xyz/credentials/verify",
                  "status": 400
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js:56:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "Trential should verify bovine",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "uTvFuKZ94YGr-Ymq8y8Tj",
              "ctx": null,
              "_testId": "urn:uuid:1fbc771f-f2c5-492a-8571-1320d7512a41",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "bovine",
                "columnId": "Trential"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 87607,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1897,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Trinsic should verify bovine",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "uTvFuKZ94YGr-Ymq8y8Tj",
              "ctx": null,
              "_testId": "urn:uuid:db2f85ff-d1f7-4bac-bcaf-daa7ee4ff233",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "bovine",
                "columnId": "Trinsic"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 89505,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 99,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "bovine should verify bovine",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "uTvFuKZ94YGr-Ymq8y8Tj",
              "ctx": null,
              "_testId": "urn:uuid:14202739-1c92-4e3c-953a-ae40129b2436",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "bovine",
                "columnId": "bovine"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 89605,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 146,
              "state": "passed",
              "speed": "slow"
            }
          ]
        }
      ]
    },
    {
      "title": "eddsa-jcs-2022 (interop)",
      "ctx": null,
      "suites": [],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [
        {
          "title": "\"before all\" hook in \"eddsa-jcs-2022 (interop)\"",
          "body": "async function() {\n    const credentials = await generateTestData();\n    validVc = credentials.clone('validVc');\n  }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "90lsCY0tt6-9Q358P09pT",
          "ctx": null,
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/60-jcs-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 89752,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 2,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"eddsa-jcs-2022 (interop)\"",
          "body": "async function() {\n      const [issuer] = endpoints;\n      try {\n        issuedVc = await createInitialVc({issuer, vc: validVc});\n      } catch(e) {\n        console.error(`issuer ${issuerName} failed to issue interop VC`, e);\n      }\n    }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "90lsCY0tt6-9Q358P09pT",
          "ctx": null,
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/60-jcs-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 89753,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 6094,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"eddsa-jcs-2022 (interop)\"",
          "body": "async function() {\n      const [issuer] = endpoints;\n      try {\n        issuedVc = await createInitialVc({issuer, vc: validVc});\n      } catch(e) {\n        console.error(`issuer ${issuerName} failed to issue interop VC`, e);\n      }\n    }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "90lsCY0tt6-9Q358P09pT",
          "ctx": null,
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/60-jcs-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 95847,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 475,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"eddsa-jcs-2022 (interop)\"",
          "body": "async function() {\n      const [issuer] = endpoints;\n      try {\n        issuedVc = await createInitialVc({issuer, vc: validVc});\n      } catch(e) {\n        console.error(`issuer ${issuerName} failed to issue interop VC`, e);\n      }\n    }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "90lsCY0tt6-9Q358P09pT",
          "ctx": null,
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/60-jcs-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 96322,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 65,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"eddsa-jcs-2022 (interop)\"",
          "body": "async function() {\n      const [issuer] = endpoints;\n      try {\n        issuedVc = await createInitialVc({issuer, vc: validVc});\n      } catch(e) {\n        console.error(`issuer ${issuerName} failed to issue interop VC`, e);\n      }\n    }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "90lsCY0tt6-9Q358P09pT",
          "ctx": null,
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/60-jcs-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 96388,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 875,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"eddsa-jcs-2022 (interop)\"",
          "body": "async function() {\n      const [issuer] = endpoints;\n      try {\n        issuedVc = await createInitialVc({issuer, vc: validVc});\n      } catch(e) {\n        console.error(`issuer ${issuerName} failed to issue interop VC`, e);\n      }\n    }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "90lsCY0tt6-9Q358P09pT",
          "ctx": null,
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/60-jcs-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 97262,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 442,
          "_error": null
        }
      ],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "Ika60aoT9ncTXtTubybzs",
      "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/60-jcs-interop.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Issuer",
      "columnLabel": "Verifier",
      "_testId": "urn:uuid:eb0c24d2-ecdb-403e-a77f-ef3acd8c377f",
      "columns": [
        "apicatalog.com",
        "Digital Bazaar",
        "Grotto Networking",
        "OpSecId",
        "bovine"
      ],
      "rows": [
        {
          "id": "apicatalog.com",
          "cells": [
            {
              "type": "test",
              "title": "apicatalog.com should verify apicatalog.com",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/60-jcs-interop.js",
              "parent": "90lsCY0tt6-9Q358P09pT",
              "ctx": null,
              "_testId": "urn:uuid:f10e702c-fa4b-4aa3-bebb-65701edb0685",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "apicatalog.com",
                "columnId": "apicatalog.com"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 97705,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 60,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: A non-empty JSON Pointer must … { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":\"https://www.w3.org/ns/credentials/v2\",\"id\":\"urn:uuid:aa429ebc-f4df-4976-b5c3-762459710d82\",\"type\":[\"VerifiableCredential\"],\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\",\"name\":\"ExampleClaim\"},\"issuer\":\"https://us-central1-api-catalog.cloudfunctions.net/vc-api-issue-eddsa-jcs-2022\",\"credentialStatus\":{\"id\":\"https://iron.apicatalog.com/status/6x9gqgj0GujhrdxGfShY/33216\",\"type\":\"BitstringStatusListEntry\",\"statusPurpose\":\"revocation\",\"statusListIndex\":\"33216\",\"statusListCredential\":\"https://firebasestorage.googleapis.com/v0/b/vc-status/o/6x9gqgj0GujhrdxGfShY?alt=media\"},\"proof\":{\"type\":\"DataIntegrityProof\",\"created\":\"2025-01-26T05:07:00Z\",\"proofPurpose\":\"assertionMethod\",\"cryptosuite\":\"eddsa-jcs-2022\",\"verificationMethod\":\"did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7#z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7\",\"proofValue\":\"z5dK11ZwByEicvYgunJu4hWXFucP83VqWSMWVCmsUzs21c7bJEqrSAs4SnwFcMR889Mzry6STKqya6agET4BQQVK1\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": "https://www.w3.org/ns/credentials/v2",
                        "id": "urn:uuid:aa429ebc-f4df-4976-b5c3-762459710d82",
                        "type": [
                          "VerifiableCredential"
                        ],
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b",
                          "name": "ExampleClaim"
                        },
                        "issuer": "https://us-central1-api-catalog.cloudfunctions.net/vc-api-issue-eddsa-jcs-2022",
                        "credentialStatus": {
                          "id": "https://iron.apicatalog.com/status/6x9gqgj0GujhrdxGfShY/33216",
                          "type": "BitstringStatusListEntry",
                          "statusPurpose": "revocation",
                          "statusListIndex": "33216",
                          "statusListCredential": "https://firebasestorage.googleapis.com/v0/b/vc-status/o/6x9gqgj0GujhrdxGfShY?alt=media"
                        },
                        "proof": {
                          "type": "DataIntegrityProof",
                          "created": "2025-01-26T05:07:00Z",
                          "proofPurpose": "assertionMethod",
                          "cryptosuite": "eddsa-jcs-2022",
                          "verificationMethod": "did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7#z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7",
                          "proofValue": "z5dK11ZwByEicvYgunJu4hWXFucP83VqWSMWVCmsUzs21c7bJEqrSAs4SnwFcMR889Mzry6STKqya6agET4BQQVK1"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://us-central1-api-catalog.cloudfunctions.net/vc-api-verify",
                  "status": 400,
                  "data": {
                    "message": "A non-empty JSON Pointer must begin with a '/'"
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: A non-empty JSON Pointer must … { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/60-jcs-interop.js:56:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "Digital Bazaar should verify apicatalog.com",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/60-jcs-interop.js",
              "parent": "90lsCY0tt6-9Q358P09pT",
              "ctx": null,
              "_testId": "urn:uuid:a416d209-b8eb-496e-ab43-e673ce11b078",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "apicatalog.com",
                "columnId": "Digital Bazaar"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 97766,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 132,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: A validation error occurred in… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": "https://www.w3.org/ns/credentials/v2",
                        "id": "urn:uuid:aa429ebc-f4df-4976-b5c3-762459710d82",
                        "type": [
                          "VerifiableCredential"
                        ],
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b",
                          "name": "ExampleClaim"
                        },
                        "issuer": "https://us-central1-api-catalog.cloudfunctions.net/vc-api-issue-eddsa-jcs-2022",
                        "credentialStatus": {
                          "id": "https://iron.apicatalog.com/status/6x9gqgj0GujhrdxGfShY/33216",
                          "type": "BitstringStatusListEntry",
                          "statusPurpose": "revocation",
                          "statusListIndex": "33216",
                          "statusListCredential": "https://firebasestorage.googleapis.com/v0/b/vc-status/o/6x9gqgj0GujhrdxGfShY?alt=media"
                        },
                        "proof": {
                          "type": "DataIntegrityProof",
                          "created": "2025-01-26T05:07:00Z",
                          "proofPurpose": "assertionMethod",
                          "cryptosuite": "eddsa-jcs-2022",
                          "verificationMethod": "did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7#z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7",
                          "proofValue": "z5dK11ZwByEicvYgunJu4hWXFucP83VqWSMWVCmsUzs21c7bJEqrSAs4SnwFcMR889Mzry6STKqya6agET4BQQVK1"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half",
                    "body": "{\"verifiableCredential\":{\"@context\":\"https://www.w3.org/ns/credentials/v2\",\"id\":\"urn:uuid:aa429ebc-f4df-4976-b5c3-762459710d82\",\"type\":[\"VerifiableCredential\"],\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\",\"name\":\"ExampleClaim\"},\"issuer\":\"https://us-central1-api-catalog.cloudfunctions.net/vc-api-issue-eddsa-jcs-2022\",\"credentialStatus\":{\"id\":\"https://iron.apicatalog.com/status/6x9gqgj0GujhrdxGfShY/33216\",\"type\":\"BitstringStatusListEntry\",\"statusPurpose\":\"revocation\",\"statusListIndex\":\"33216\",\"statusListCredential\":\"https://firebasestorage.googleapis.com/v0/b/vc-status/o/6x9gqgj0GujhrdxGfShY?alt=media\"},\"proof\":{\"type\":\"DataIntegrityProof\",\"created\":\"2025-01-26T05:07:00Z\",\"proofPurpose\":\"assertionMethod\",\"cryptosuite\":\"eddsa-jcs-2022\",\"verificationMethod\":\"did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7#z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7\",\"proofValue\":\"z5dK11ZwByEicvYgunJu4hWXFucP83VqWSMWVCmsUzs21c7bJEqrSAs4SnwFcMR889Mzry6STKqya6agET4BQQVK1\"}},\"options\":{\"checks\":[\"proof\"]}}"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc2.veresverifier.dev/verifiers/z19w7KofwvE2nkJeRVLp8NDxz/credentials/verify",
                  "status": 400,
                  "data": {
                    "name": "ValidationError",
                    "message": "A validation error occurred in the 'Verify Credential Body' validator.",
                    "details": {
                      "errors": [
                        {
                          "name": "ValidationError",
                          "message": "should be array",
                          "details": {
                            "instance": {
                              "verifiableCredential": {
                                "@context": "https://www.w3.org/ns/credentials/v2",
                                "id": "urn:uuid:aa429ebc-f4df-4976-b5c3-762459710d82",
                                "type": [
                                  "VerifiableCredential"
                                ],
                                "credentialSubject": {
                                  "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b",
                                  "name": "ExampleClaim"
                                },
                                "issuer": "https://us-central1-api-catalog.cloudfunctions.net/vc-api-issue-eddsa-jcs-2022",
                                "credentialStatus": {
                                  "id": "https://iron.apicatalog.com/status/6x9gqgj0GujhrdxGfShY/33216",
                                  "type": "BitstringStatusListEntry",
                                  "statusPurpose": "revocation",
                                  "statusListIndex": "33216",
                                  "statusListCredential": "https://firebasestorage.googleapis.com/v0/b/vc-status/o/6x9gqgj0GujhrdxGfShY?alt=media"
                                },
                                "proof": {
                                  "type": "DataIntegrityProof",
                                  "created": "2025-01-26T05:07:00Z",
                                  "proofPurpose": "assertionMethod",
                                  "cryptosuite": "eddsa-jcs-2022",
                                  "verificationMethod": "did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7#z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7",
                                  "proofValue": "z5dK11ZwByEicvYgunJu4hWXFucP83VqWSMWVCmsUzs21c7bJEqrSAs4SnwFcMR889Mzry6STKqya6agET4BQQVK1"
                                }
                              },
                              "options": {
                                "checks": [
                                  "proof"
                                ]
                              }
                            },
                            "params": {
                              "type": "array"
                            },
                            "path": ".verifiableCredential['@context']",
                            "public": true,
                            "schemaPath": "#/properties/verifiableCredential/anyOf/0/properties/%40context/type",
                            "schema": {
                              "description": "",
                              "title": ""
                            },
                            "value": "https://www.w3.org/ns/credentials/v2"
                          },
                          "cause": null,
                          "stack": "ValidationError: should be array\n    at _createError (file:///home/node/app/node_modules/@bedrock/validation/lib/index.js:240:17)\n    at validate (file:///home/node/app/node_modules/@bedrock/validation/lib/index.js:88:14)\n    at validate (file:///home/node/app/node_modules/@bedrock/validation/lib/index.js:181:22)\n    at Layer.handle [as handle_request] (/home/node/app/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/node/app/node_modules/express/lib/router/route.js:149:13)\n    at cors (/home/node/app/node_modules/cors/lib/index.js:188:7)\n    at /home/node/app/node_modules/cors/lib/index.js:224:17\n    at originCallback (/home/node/app/node_modules/cors/lib/index.js:214:15)\n    at /home/node/app/node_modules/cors/lib/index.js:219:13\n    at optionsCallback (/home/node/app/node_modules/cors/lib/index.js:199:9)"
                        },
                        {
                          "name": "ValidationError",
                          "message": "should NOT have additional properties",
                          "details": {
                            "instance": {
                              "verifiableCredential": {
                                "@context": "https://www.w3.org/ns/credentials/v2",
                                "id": "urn:uuid:aa429ebc-f4df-4976-b5c3-762459710d82",
                                "type": [
                                  "VerifiableCredential"
                                ],
                                "credentialSubject": {
                                  "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b",
                                  "name": "ExampleClaim"
                                },
                                "issuer": "https://us-central1-api-catalog.cloudfunctions.net/vc-api-issue-eddsa-jcs-2022",
                                "credentialStatus": {
                                  "id": "https://iron.apicatalog.com/status/6x9gqgj0GujhrdxGfShY/33216",
                                  "type": "BitstringStatusListEntry",
                                  "statusPurpose": "revocation",
                                  "statusListIndex": "33216",
                                  "statusListCredential": "https://firebasestorage.googleapis.com/v0/b/vc-status/o/6x9gqgj0GujhrdxGfShY?alt=media"
                                },
                                "proof": {
                                  "type": "DataIntegrityProof",
                                  "created": "2025-01-26T05:07:00Z",
                                  "proofPurpose": "assertionMethod",
                                  "cryptosuite": "eddsa-jcs-2022",
                                  "verificationMethod": "did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7#z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7",
                                  "proofValue": "z5dK11ZwByEicvYgunJu4hWXFucP83VqWSMWVCmsUzs21c7bJEqrSAs4SnwFcMR889Mzry6STKqya6agET4BQQVK1"
                                }
                              },
                              "options": {
                                "checks": [
                                  "proof"
                                ]
                              }
                            },
                            "params": {
                              "additionalProperty": "credentialSubject"
                            },
                            "path": ".verifiableCredential",
                            "public": true,
                            "schemaPath": "#/properties/verifiableCredential/anyOf/1/additionalProperties",
                            "schema": {
                              "description": "",
                              "title": "Enveloped Verifiable Credential"
                            },
                            "value": {
                              "@context": "https://www.w3.org/ns/credentials/v2",
                              "id": "urn:uuid:aa429ebc-f4df-4976-b5c3-762459710d82",
                              "type": [
                                "VerifiableCredential"
                              ],
                              "credentialSubject": {
                                "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b",
                                "name": "ExampleClaim"
                              },
                              "issuer": "https://us-central1-api-catalog.cloudfunctions.net/vc-api-issue-eddsa-jcs-2022",
                              "credentialStatus": {
                                "id": "https://iron.apicatalog.com/status/6x9gqgj0GujhrdxGfShY/33216",
                                "type": "BitstringStatusListEntry",
                                "statusPurpose": "revocation",
                                "statusListIndex": "33216",
                                "statusListCredential": "https://firebasestorage.googleapis.com/v0/b/vc-status/o/6x9gqgj0GujhrdxGfShY?alt=media"
                              },
                              "proof": {
                                "type": "DataIntegrityProof",
                                "created": "2025-01-26T05:07:00Z",
                                "proofPurpose": "assertionMethod",
                                "cryptosuite": "eddsa-jcs-2022",
                                "verificationMethod": "did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7#z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7",
                                "proofValue": "z5dK11ZwByEicvYgunJu4hWXFucP83VqWSMWVCmsUzs21c7bJEqrSAs4SnwFcMR889Mzry6STKqya6agET4BQQVK1"
                              }
                            }
                          },
                          "cause": null,
                          "stack": "ValidationError: should NOT have additional properties\n    at _createError (file:///home/node/app/node_modules/@bedrock/validation/lib/index.js:240:17)\n    at validate (file:///home/node/app/node_modules/@bedrock/validation/lib/index.js:88:14)\n    at validate (file:///home/node/app/node_modules/@bedrock/validation/lib/index.js:181:22)\n    at Layer.handle [as handle_request] (/home/node/app/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/node/app/node_modules/express/lib/router/route.js:149:13)\n    at cors (/home/node/app/node_modules/cors/lib/index.js:188:7)\n    at /home/node/app/node_modules/cors/lib/index.js:224:17\n    at originCallback (/home/node/app/node_modules/cors/lib/index.js:214:15)\n    at /home/node/app/node_modules/cors/lib/index.js:219:13\n    at optionsCallback (/home/node/app/node_modules/cors/lib/index.js:199:9)"
                        },
                        {
                          "name": "ValidationError",
                          "message": "should match some schema in anyOf",
                          "details": {
                            "instance": {
                              "verifiableCredential": {
                                "@context": "https://www.w3.org/ns/credentials/v2",
                                "id": "urn:uuid:aa429ebc-f4df-4976-b5c3-762459710d82",
                                "type": [
                                  "VerifiableCredential"
                                ],
                                "credentialSubject": {
                                  "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b",
                                  "name": "ExampleClaim"
                                },
                                "issuer": "https://us-central1-api-catalog.cloudfunctions.net/vc-api-issue-eddsa-jcs-2022",
                                "credentialStatus": {
                                  "id": "https://iron.apicatalog.com/status/6x9gqgj0GujhrdxGfShY/33216",
                                  "type": "BitstringStatusListEntry",
                                  "statusPurpose": "revocation",
                                  "statusListIndex": "33216",
                                  "statusListCredential": "https://firebasestorage.googleapis.com/v0/b/vc-status/o/6x9gqgj0GujhrdxGfShY?alt=media"
                                },
                                "proof": {
                                  "type": "DataIntegrityProof",
                                  "created": "2025-01-26T05:07:00Z",
                                  "proofPurpose": "assertionMethod",
                                  "cryptosuite": "eddsa-jcs-2022",
                                  "verificationMethod": "did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7#z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7",
                                  "proofValue": "z5dK11ZwByEicvYgunJu4hWXFucP83VqWSMWVCmsUzs21c7bJEqrSAs4SnwFcMR889Mzry6STKqya6agET4BQQVK1"
                                }
                              },
                              "options": {
                                "checks": [
                                  "proof"
                                ]
                              }
                            },
                            "params": {},
                            "path": ".verifiableCredential",
                            "public": true,
                            "schemaPath": "#/properties/verifiableCredential/anyOf",
                            "schema": {
                              "description": "",
                              "title": {
                                "title": "Verifiable Credential",
                                "type": "object",
                                "required": [
                                  "@context",
                                  "credentialSubject",
                                  "issuer",
                                  "type"
                                ],
                                "additionalProperties": true,
                                "properties": {
                                  "@context": {
                                    "type": "array",
                                    "minItems": 1,
                                    "items": [
                                      {
                                        "oneOf": [
                                          {
                                            "const": "https://www.w3.org/2018/credentials/v1"
                                          },
                                          {
                                            "const": "https://www.w3.org/ns/credentials/v2"
                                          }
                                        ]
                                      }
                                    ],
                                    "additionalItems": {
                                      "anyOf": [
                                        {
                                          "type": "string"
                                        },
                                        {
                                          "type": "object"
                                        }
                                      ]
                                    }
                                  },
                                  "credentialSubject": {
                                    "anyOf": [
                                      {
                                        "type": "object"
                                      },
                                      {
                                        "type": "array",
                                        "minItems": 1,
                                        "items": {
                                          "type": "object"
                                        }
                                      }
                                    ]
                                  },
                                  "id": {
                                    "type": "string"
                                  },
                                  "issuer": {
                                    "title": "identifier or an object with an id",
                                    "anyOf": [
                                      {
                                        "title": "ID",
                                        "description": "A unique identifier.",
                                        "type": "string",
                                        "minLength": 1,
                                        "disallow": {
                                          "type": "string",
                                          "enum": [
                                            "0"
                                          ]
                                        }
                                      },
                                      {
                                        "type": "object",
                                        "required": [
                                          "id"
                                        ],
                                        "additionalProperties": true,
                                        "properties": {
                                          "id": {
                                            "title": "ID",
                                            "description": "A unique identifier.",
                                            "type": "string",
                                            "minLength": 1,
                                            "disallow": {
                                              "type": "string",
                                              "enum": [
                                                "0"
                                              ]
                                            }
                                          }
                                        }
                                      }
                                    ]
                                  },
                                  "type": {
                                    "type": "array",
                                    "minItems": 1,
                                    "items": [
                                      {
                                        "const": "VerifiableCredential"
                                      }
                                    ],
                                    "additionalItems": {
                                      "type": "string"
                                    }
                                  },
                                  "proof": {
                                    "title": "Proof",
                                    "anyOf": [
                                      {
                                        "type": "object"
                                      },
                                      {
                                        "type": "array",
                                        "minItems": 1,
                                        "items": {
                                          "type": "object"
                                        }
                                      }
                                    ]
                                  }
                                }
                              }
                            },
                            "value": {
                              "@context": "https://www.w3.org/ns/credentials/v2",
                              "id": "urn:uuid:aa429ebc-f4df-4976-b5c3-762459710d82",
                              "type": [
                                "VerifiableCredential"
                              ],
                              "credentialSubject": {
                                "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b",
                                "name": "ExampleClaim"
                              },
                              "issuer": "https://us-central1-api-catalog.cloudfunctions.net/vc-api-issue-eddsa-jcs-2022",
                              "credentialStatus": {
                                "id": "https://iron.apicatalog.com/status/6x9gqgj0GujhrdxGfShY/33216",
                                "type": "BitstringStatusListEntry",
                                "statusPurpose": "revocation",
                                "statusListIndex": "33216",
                                "statusListCredential": "https://firebasestorage.googleapis.com/v0/b/vc-status/o/6x9gqgj0GujhrdxGfShY?alt=media"
                              },
                              "proof": {
                                "type": "DataIntegrityProof",
                                "created": "2025-01-26T05:07:00Z",
                                "proofPurpose": "assertionMethod",
                                "cryptosuite": "eddsa-jcs-2022",
                                "verificationMethod": "did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7#z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7",
                                "proofValue": "z5dK11ZwByEicvYgunJu4hWXFucP83VqWSMWVCmsUzs21c7bJEqrSAs4SnwFcMR889Mzry6STKqya6agET4BQQVK1"
                              }
                            }
                          },
                          "cause": null,
                          "stack": "ValidationError: should match some schema in anyOf\n    at _createError (file:///home/node/app/node_modules/@bedrock/validation/lib/index.js:240:17)\n    at validate (file:///home/node/app/node_modules/@bedrock/validation/lib/index.js:88:14)\n    at validate (file:///home/node/app/node_modules/@bedrock/validation/lib/index.js:181:22)\n    at Layer.handle [as handle_request] (/home/node/app/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/node/app/node_modules/express/lib/router/route.js:149:13)\n    at cors (/home/node/app/node_modules/cors/lib/index.js:188:7)\n    at /home/node/app/node_modules/cors/lib/index.js:224:17\n    at originCallback (/home/node/app/node_modules/cors/lib/index.js:214:15)\n    at /home/node/app/node_modules/cors/lib/index.js:219:13\n    at optionsCallback (/home/node/app/node_modules/cors/lib/index.js:199:9)"
                        }
                      ],
                      "httpStatusCode": 400
                    },
                    "cause": null,
                    "stack": "ValidationError: A validation error occurred in the 'Verify Credential Body' validator.\n    at _createError (file:///home/node/app/node_modules/@bedrock/validation/lib/index.js:246:17)\n    at validate (file:///home/node/app/node_modules/@bedrock/validation/lib/index.js:88:14)\n    at validate (file:///home/node/app/node_modules/@bedrock/validation/lib/index.js:181:22)\n    at Layer.handle [as handle_request] (/home/node/app/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/node/app/node_modules/express/lib/router/route.js:149:13)\n    at cors (/home/node/app/node_modules/cors/lib/index.js:188:7)\n    at /home/node/app/node_modules/cors/lib/index.js:224:17\n    at originCallback (/home/node/app/node_modules/cors/lib/index.js:214:15)\n    at /home/node/app/node_modules/cors/lib/index.js:219:13\n    at optionsCallback (/home/node/app/node_modules/cors/lib/index.js:199:9)",
                    "type": "ValidationError"
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: A validation error occurred in… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/60-jcs-interop.js:56:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "Grotto Networking should verify apicatalog.com",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/60-jcs-interop.js",
              "parent": "90lsCY0tt6-9Q358P09pT",
              "ctx": null,
              "_testId": "urn:uuid:c4a2f06c-fc62-4baf-94f3-1476f7b8ec60",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "apicatalog.com",
                "columnId": "Grotto Networking"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 97899,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 23,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":\"https://www.w3.org/ns/credentials/v2\",\"id\":\"urn:uuid:aa429ebc-f4df-4976-b5c3-762459710d82\",\"type\":[\"VerifiableCredential\"],\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\",\"name\":\"ExampleClaim\"},\"issuer\":\"https://us-central1-api-catalog.cloudfunctions.net/vc-api-issue-eddsa-jcs-2022\",\"credentialStatus\":{\"id\":\"https://iron.apicatalog.com/status/6x9gqgj0GujhrdxGfShY/33216\",\"type\":\"BitstringStatusListEntry\",\"statusPurpose\":\"revocation\",\"statusListIndex\":\"33216\",\"statusListCredential\":\"https://firebasestorage.googleapis.com/v0/b/vc-status/o/6x9gqgj0GujhrdxGfShY?alt=media\"},\"proof\":{\"type\":\"DataIntegrityProof\",\"created\":\"2025-01-26T05:07:00Z\",\"proofPurpose\":\"assertionMethod\",\"cryptosuite\":\"eddsa-jcs-2022\",\"verificationMethod\":\"did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7#z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7\",\"proofValue\":\"z5dK11ZwByEicvYgunJu4hWXFucP83VqWSMWVCmsUzs21c7bJEqrSAs4SnwFcMR889Mzry6STKqya6agET4BQQVK1\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": "https://www.w3.org/ns/credentials/v2",
                        "id": "urn:uuid:aa429ebc-f4df-4976-b5c3-762459710d82",
                        "type": [
                          "VerifiableCredential"
                        ],
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b",
                          "name": "ExampleClaim"
                        },
                        "issuer": "https://us-central1-api-catalog.cloudfunctions.net/vc-api-issue-eddsa-jcs-2022",
                        "credentialStatus": {
                          "id": "https://iron.apicatalog.com/status/6x9gqgj0GujhrdxGfShY/33216",
                          "type": "BitstringStatusListEntry",
                          "statusPurpose": "revocation",
                          "statusListIndex": "33216",
                          "statusListCredential": "https://firebasestorage.googleapis.com/v0/b/vc-status/o/6x9gqgj0GujhrdxGfShY?alt=media"
                        },
                        "proof": {
                          "type": "DataIntegrityProof",
                          "created": "2025-01-26T05:07:00Z",
                          "proofPurpose": "assertionMethod",
                          "cryptosuite": "eddsa-jcs-2022",
                          "verificationMethod": "did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7#z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7",
                          "proofValue": "z5dK11ZwByEicvYgunJu4hWXFucP83VqWSMWVCmsUzs21c7bJEqrSAs4SnwFcMR889Mzry6STKqya6agET4BQQVK1"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://ecdsa-sd.grotto-networking.com/EdDSA-JCS/credentials/verify",
                  "status": 400,
                  "data": {
                    "errors": [
                      "proof: must be array"
                    ]
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/60-jcs-interop.js:56:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "OpSecId should verify apicatalog.com",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/60-jcs-interop.js",
              "parent": "90lsCY0tt6-9Q358P09pT",
              "ctx": null,
              "_testId": "urn:uuid:19b9f0a9-4566-4d2d-9221-82e6c23e6ee5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "apicatalog.com",
                "columnId": "OpSecId"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 97923,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 51,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":\"https://www.w3.org/ns/credentials/v2\",\"id\":\"urn:uuid:aa429ebc-f4df-4976-b5c3-762459710d82\",\"type\":[\"VerifiableCredential\"],\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\",\"name\":\"ExampleClaim\"},\"issuer\":\"https://us-central1-api-catalog.cloudfunctions.net/vc-api-issue-eddsa-jcs-2022\",\"credentialStatus\":{\"id\":\"https://iron.apicatalog.com/status/6x9gqgj0GujhrdxGfShY/33216\",\"type\":\"BitstringStatusListEntry\",\"statusPurpose\":\"revocation\",\"statusListIndex\":\"33216\",\"statusListCredential\":\"https://firebasestorage.googleapis.com/v0/b/vc-status/o/6x9gqgj0GujhrdxGfShY?alt=media\"},\"proof\":{\"type\":\"DataIntegrityProof\",\"created\":\"2025-01-26T05:07:00Z\",\"proofPurpose\":\"assertionMethod\",\"cryptosuite\":\"eddsa-jcs-2022\",\"verificationMethod\":\"did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7#z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7\",\"proofValue\":\"z5dK11ZwByEicvYgunJu4hWXFucP83VqWSMWVCmsUzs21c7bJEqrSAs4SnwFcMR889Mzry6STKqya6agET4BQQVK1\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": "https://www.w3.org/ns/credentials/v2",
                        "id": "urn:uuid:aa429ebc-f4df-4976-b5c3-762459710d82",
                        "type": [
                          "VerifiableCredential"
                        ],
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b",
                          "name": "ExampleClaim"
                        },
                        "issuer": "https://us-central1-api-catalog.cloudfunctions.net/vc-api-issue-eddsa-jcs-2022",
                        "credentialStatus": {
                          "id": "https://iron.apicatalog.com/status/6x9gqgj0GujhrdxGfShY/33216",
                          "type": "BitstringStatusListEntry",
                          "statusPurpose": "revocation",
                          "statusListIndex": "33216",
                          "statusListCredential": "https://firebasestorage.googleapis.com/v0/b/vc-status/o/6x9gqgj0GujhrdxGfShY?alt=media"
                        },
                        "proof": {
                          "type": "DataIntegrityProof",
                          "created": "2025-01-26T05:07:00Z",
                          "proofPurpose": "assertionMethod",
                          "cryptosuite": "eddsa-jcs-2022",
                          "verificationMethod": "did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7#z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7",
                          "proofValue": "z5dK11ZwByEicvYgunJu4hWXFucP83VqWSMWVCmsUzs21c7bJEqrSAs4SnwFcMR889Mzry6STKqya6agET4BQQVK1"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc.opsec.id/credentials/verify",
                  "status": 400,
                  "data": {
                    "detail": "Bad Request"
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/60-jcs-interop.js:56:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "bovine should verify apicatalog.com",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/60-jcs-interop.js",
              "parent": "90lsCY0tt6-9Q358P09pT",
              "ctx": null,
              "_testId": "urn:uuid:f5164857-543a-4ef0-bc45-85bbfaadd635",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "apicatalog.com",
                "columnId": "bovine"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 97975,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 146,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":\"https://www.w3.org/ns/credentials/v2\",\"id\":\"urn:uuid:aa429ebc-f4df-4976-b5c3-762459710d82\",\"type\":[\"VerifiableCredential\"],\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\",\"name\":\"ExampleClaim\"},\"issuer\":\"https://us-central1-api-catalog.cloudfunctions.net/vc-api-issue-eddsa-jcs-2022\",\"credentialStatus\":{\"id\":\"https://iron.apicatalog.com/status/6x9gqgj0GujhrdxGfShY/33216\",\"type\":\"BitstringStatusListEntry\",\"statusPurpose\":\"revocation\",\"statusListIndex\":\"33216\",\"statusListCredential\":\"https://firebasestorage.googleapis.com/v0/b/vc-status/o/6x9gqgj0GujhrdxGfShY?alt=media\"},\"proof\":{\"type\":\"DataIntegrityProof\",\"created\":\"2025-01-26T05:07:00Z\",\"proofPurpose\":\"assertionMethod\",\"cryptosuite\":\"eddsa-jcs-2022\",\"verificationMethod\":\"did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7#z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7\",\"proofValue\":\"z5dK11ZwByEicvYgunJu4hWXFucP83VqWSMWVCmsUzs21c7bJEqrSAs4SnwFcMR889Mzry6STKqya6agET4BQQVK1\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": "https://www.w3.org/ns/credentials/v2",
                        "id": "urn:uuid:aa429ebc-f4df-4976-b5c3-762459710d82",
                        "type": [
                          "VerifiableCredential"
                        ],
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b",
                          "name": "ExampleClaim"
                        },
                        "issuer": "https://us-central1-api-catalog.cloudfunctions.net/vc-api-issue-eddsa-jcs-2022",
                        "credentialStatus": {
                          "id": "https://iron.apicatalog.com/status/6x9gqgj0GujhrdxGfShY/33216",
                          "type": "BitstringStatusListEntry",
                          "statusPurpose": "revocation",
                          "statusListIndex": "33216",
                          "statusListCredential": "https://firebasestorage.googleapis.com/v0/b/vc-status/o/6x9gqgj0GujhrdxGfShY?alt=media"
                        },
                        "proof": {
                          "type": "DataIntegrityProof",
                          "created": "2025-01-26T05:07:00Z",
                          "proofPurpose": "assertionMethod",
                          "cryptosuite": "eddsa-jcs-2022",
                          "verificationMethod": "did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7#z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7",
                          "proofValue": "z5dK11ZwByEicvYgunJu4hWXFucP83VqWSMWVCmsUzs21c7bJEqrSAs4SnwFcMR889Mzry6STKqya6agET4BQQVK1"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://bovine.social/w3c-di/verify",
                  "status": 400
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/60-jcs-interop.js:56:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            }
          ]
        },
        {
          "id": "Digital Bazaar",
          "cells": [
            {
              "type": "test",
              "title": "apicatalog.com should verify Digital Bazaar",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/60-jcs-interop.js",
              "parent": "90lsCY0tt6-9Q358P09pT",
              "ctx": null,
              "_testId": "urn:uuid:2bbe59c9-f948-4536-9c30-de7bd010800a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Digital Bazaar",
                "columnId": "apicatalog.com"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 98122,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 133,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: A non-empty JSON Pointer must … { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\"],\"id\":\"urn:uuid:e68aab5c-fa2b-4132-acf7-1cc16fa7e280\",\"type\":[\"VerifiableCredential\"],\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\",\"name\":\"ExampleClaim\"},\"issuer\":\"did:key:z6MkvLVAs9wUcLRfvcvAMywt7NGx4ymVKozLjAYyE8QHeieX\",\"proof\":{\"type\":\"DataIntegrityProof\",\"verificationMethod\":\"did:key:z6MkvLVAs9wUcLRfvcvAMywt7NGx4ymVKozLjAYyE8QHeieX#z6MkvLVAs9wUcLRfvcvAMywt7NGx4ymVKozLjAYyE8QHeieX\",\"cryptosuite\":\"eddsa-jcs-2022\",\"proofPurpose\":\"assertionMethod\",\"@context\":[\"https://www.w3.org/ns/credentials/v2\"],\"proofValue\":\"zNbvZHBJ7e9xwZMMRDZckBzGD1oC4UVcuxmAsX8JcvP4SWMXDDVa12k2DfTxXteGSM3EYSiY3TxaJouw65sC2yaU\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2"
                        ],
                        "id": "urn:uuid:e68aab5c-fa2b-4132-acf7-1cc16fa7e280",
                        "type": [
                          "VerifiableCredential"
                        ],
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b",
                          "name": "ExampleClaim"
                        },
                        "issuer": "did:key:z6MkvLVAs9wUcLRfvcvAMywt7NGx4ymVKozLjAYyE8QHeieX",
                        "proof": {
                          "type": "DataIntegrityProof",
                          "verificationMethod": "did:key:z6MkvLVAs9wUcLRfvcvAMywt7NGx4ymVKozLjAYyE8QHeieX#z6MkvLVAs9wUcLRfvcvAMywt7NGx4ymVKozLjAYyE8QHeieX",
                          "cryptosuite": "eddsa-jcs-2022",
                          "proofPurpose": "assertionMethod",
                          "@context": [
                            "https://www.w3.org/ns/credentials/v2"
                          ],
                          "proofValue": "zNbvZHBJ7e9xwZMMRDZckBzGD1oC4UVcuxmAsX8JcvP4SWMXDDVa12k2DfTxXteGSM3EYSiY3TxaJouw65sC2yaU"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://us-central1-api-catalog.cloudfunctions.net/vc-api-verify",
                  "status": 400,
                  "data": {
                    "message": "A non-empty JSON Pointer must begin with a '/'"
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: A non-empty JSON Pointer must … { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/60-jcs-interop.js:56:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "Digital Bazaar should verify Digital Bazaar",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/60-jcs-interop.js",
              "parent": "90lsCY0tt6-9Q358P09pT",
              "ctx": null,
              "_testId": "urn:uuid:f435f323-adcc-4266-b550-9a4561412d98",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Digital Bazaar",
                "columnId": "Digital Bazaar"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 98256,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 96,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Grotto Networking should verify Digital Bazaar",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/60-jcs-interop.js",
              "parent": "90lsCY0tt6-9Q358P09pT",
              "ctx": null,
              "_testId": "urn:uuid:4d058047-927c-4866-9fc7-7b48cb1b42f1",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Digital Bazaar",
                "columnId": "Grotto Networking"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 98352,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 31,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "OpSecId should verify Digital Bazaar",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/60-jcs-interop.js",
              "parent": "90lsCY0tt6-9Q358P09pT",
              "ctx": null,
              "_testId": "urn:uuid:56f8f1a9-7ab8-43af-90b6-555366d372b8",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Digital Bazaar",
                "columnId": "OpSecId"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 98383,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 227,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\"],\"id\":\"urn:uuid:e68aab5c-fa2b-4132-acf7-1cc16fa7e280\",\"type\":[\"VerifiableCredential\"],\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\",\"name\":\"ExampleClaim\"},\"issuer\":\"did:key:z6MkvLVAs9wUcLRfvcvAMywt7NGx4ymVKozLjAYyE8QHeieX\",\"proof\":{\"type\":\"DataIntegrityProof\",\"verificationMethod\":\"did:key:z6MkvLVAs9wUcLRfvcvAMywt7NGx4ymVKozLjAYyE8QHeieX#z6MkvLVAs9wUcLRfvcvAMywt7NGx4ymVKozLjAYyE8QHeieX\",\"cryptosuite\":\"eddsa-jcs-2022\",\"proofPurpose\":\"assertionMethod\",\"@context\":[\"https://www.w3.org/ns/credentials/v2\"],\"proofValue\":\"zNbvZHBJ7e9xwZMMRDZckBzGD1oC4UVcuxmAsX8JcvP4SWMXDDVa12k2DfTxXteGSM3EYSiY3TxaJouw65sC2yaU\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2"
                        ],
                        "id": "urn:uuid:e68aab5c-fa2b-4132-acf7-1cc16fa7e280",
                        "type": [
                          "VerifiableCredential"
                        ],
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b",
                          "name": "ExampleClaim"
                        },
                        "issuer": "did:key:z6MkvLVAs9wUcLRfvcvAMywt7NGx4ymVKozLjAYyE8QHeieX",
                        "proof": {
                          "type": "DataIntegrityProof",
                          "verificationMethod": "did:key:z6MkvLVAs9wUcLRfvcvAMywt7NGx4ymVKozLjAYyE8QHeieX#z6MkvLVAs9wUcLRfvcvAMywt7NGx4ymVKozLjAYyE8QHeieX",
                          "cryptosuite": "eddsa-jcs-2022",
                          "proofPurpose": "assertionMethod",
                          "@context": [
                            "https://www.w3.org/ns/credentials/v2"
                          ],
                          "proofValue": "zNbvZHBJ7e9xwZMMRDZckBzGD1oC4UVcuxmAsX8JcvP4SWMXDDVa12k2DfTxXteGSM3EYSiY3TxaJouw65sC2yaU"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc.opsec.id/credentials/verify",
                  "status": 400,
                  "data": {
                    "detail": "Bad Request"
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/60-jcs-interop.js:56:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "bovine should verify Digital Bazaar",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/60-jcs-interop.js",
              "parent": "90lsCY0tt6-9Q358P09pT",
              "ctx": null,
              "_testId": "urn:uuid:e1905c8e-4496-47a8-aae9-796d0f1f5123",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Digital Bazaar",
                "columnId": "bovine"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 98611,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 144,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\"],\"id\":\"urn:uuid:e68aab5c-fa2b-4132-acf7-1cc16fa7e280\",\"type\":[\"VerifiableCredential\"],\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\",\"name\":\"ExampleClaim\"},\"issuer\":\"did:key:z6MkvLVAs9wUcLRfvcvAMywt7NGx4ymVKozLjAYyE8QHeieX\",\"proof\":{\"type\":\"DataIntegrityProof\",\"verificationMethod\":\"did:key:z6MkvLVAs9wUcLRfvcvAMywt7NGx4ymVKozLjAYyE8QHeieX#z6MkvLVAs9wUcLRfvcvAMywt7NGx4ymVKozLjAYyE8QHeieX\",\"cryptosuite\":\"eddsa-jcs-2022\",\"proofPurpose\":\"assertionMethod\",\"@context\":[\"https://www.w3.org/ns/credentials/v2\"],\"proofValue\":\"zNbvZHBJ7e9xwZMMRDZckBzGD1oC4UVcuxmAsX8JcvP4SWMXDDVa12k2DfTxXteGSM3EYSiY3TxaJouw65sC2yaU\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2"
                        ],
                        "id": "urn:uuid:e68aab5c-fa2b-4132-acf7-1cc16fa7e280",
                        "type": [
                          "VerifiableCredential"
                        ],
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b",
                          "name": "ExampleClaim"
                        },
                        "issuer": "did:key:z6MkvLVAs9wUcLRfvcvAMywt7NGx4ymVKozLjAYyE8QHeieX",
                        "proof": {
                          "type": "DataIntegrityProof",
                          "verificationMethod": "did:key:z6MkvLVAs9wUcLRfvcvAMywt7NGx4ymVKozLjAYyE8QHeieX#z6MkvLVAs9wUcLRfvcvAMywt7NGx4ymVKozLjAYyE8QHeieX",
                          "cryptosuite": "eddsa-jcs-2022",
                          "proofPurpose": "assertionMethod",
                          "@context": [
                            "https://www.w3.org/ns/credentials/v2"
                          ],
                          "proofValue": "zNbvZHBJ7e9xwZMMRDZckBzGD1oC4UVcuxmAsX8JcvP4SWMXDDVa12k2DfTxXteGSM3EYSiY3TxaJouw65sC2yaU"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://bovine.social/w3c-di/verify",
                  "status": 400
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/60-jcs-interop.js:56:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            }
          ]
        },
        {
          "id": "Grotto Networking",
          "cells": [
            {
              "type": "test",
              "title": "apicatalog.com should verify Grotto Networking",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/60-jcs-interop.js",
              "parent": "90lsCY0tt6-9Q358P09pT",
              "ctx": null,
              "_testId": "urn:uuid:f7e24e7d-ee87-4035-8f92-16eda65b2cd1",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Grotto Networking",
                "columnId": "apicatalog.com"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 98756,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 53,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: A non-empty JSON Pointer must … { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\"],\"id\":\"urn:uuid:18b13643-b0f8-470f-b323-f2b1b39898f4\",\"type\":[\"VerifiableCredential\"],\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\",\"name\":\"ExampleClaim\"},\"issuer\":\"did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7\",\"proof\":{\"type\":\"DataIntegrityProof\",\"cryptosuite\":\"eddsa-jcs-2022\",\"created\":\"2025-01-26T05:07:02.942Z\",\"verificationMethod\":\"did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7#z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7\",\"proofPurpose\":\"assertionMethod\",\"@context\":[\"https://www.w3.org/ns/credentials/v2\"],\"proofValue\":\"z5JTtpoTnRYyKEd2U8kYP6dyv8PjQ2PASiEQ7VuEN9NXEfSEuFT6HJva3mE7ajEmiFwSEenYBjp1yJ26iTZzdxdoG\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2"
                        ],
                        "id": "urn:uuid:18b13643-b0f8-470f-b323-f2b1b39898f4",
                        "type": [
                          "VerifiableCredential"
                        ],
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b",
                          "name": "ExampleClaim"
                        },
                        "issuer": "did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7",
                        "proof": {
                          "type": "DataIntegrityProof",
                          "cryptosuite": "eddsa-jcs-2022",
                          "created": "2025-01-26T05:07:02.942Z",
                          "verificationMethod": "did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7#z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7",
                          "proofPurpose": "assertionMethod",
                          "@context": [
                            "https://www.w3.org/ns/credentials/v2"
                          ],
                          "proofValue": "z5JTtpoTnRYyKEd2U8kYP6dyv8PjQ2PASiEQ7VuEN9NXEfSEuFT6HJva3mE7ajEmiFwSEenYBjp1yJ26iTZzdxdoG"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://us-central1-api-catalog.cloudfunctions.net/vc-api-verify",
                  "status": 400,
                  "data": {
                    "message": "A non-empty JSON Pointer must begin with a '/'"
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: A non-empty JSON Pointer must … { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/60-jcs-interop.js:56:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "Digital Bazaar should verify Grotto Networking",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/60-jcs-interop.js",
              "parent": "90lsCY0tt6-9Q358P09pT",
              "ctx": null,
              "_testId": "urn:uuid:cdddb4f0-0846-401e-b56c-12a6e12ab649",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Grotto Networking",
                "columnId": "Digital Bazaar"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 98809,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 84,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Grotto Networking should verify Grotto Networking",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/60-jcs-interop.js",
              "parent": "90lsCY0tt6-9Q358P09pT",
              "ctx": null,
              "_testId": "urn:uuid:0ef70f84-6837-47c3-8bae-5f609c772e04",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Grotto Networking",
                "columnId": "Grotto Networking"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 98894,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 26,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "OpSecId should verify Grotto Networking",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/60-jcs-interop.js",
              "parent": "90lsCY0tt6-9Q358P09pT",
              "ctx": null,
              "_testId": "urn:uuid:223d74e5-1bc3-4040-870a-ebeb7d733730",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Grotto Networking",
                "columnId": "OpSecId"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 98920,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 242,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\"],\"id\":\"urn:uuid:18b13643-b0f8-470f-b323-f2b1b39898f4\",\"type\":[\"VerifiableCredential\"],\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\",\"name\":\"ExampleClaim\"},\"issuer\":\"did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7\",\"proof\":{\"type\":\"DataIntegrityProof\",\"cryptosuite\":\"eddsa-jcs-2022\",\"created\":\"2025-01-26T05:07:02.942Z\",\"verificationMethod\":\"did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7#z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7\",\"proofPurpose\":\"assertionMethod\",\"@context\":[\"https://www.w3.org/ns/credentials/v2\"],\"proofValue\":\"z5JTtpoTnRYyKEd2U8kYP6dyv8PjQ2PASiEQ7VuEN9NXEfSEuFT6HJva3mE7ajEmiFwSEenYBjp1yJ26iTZzdxdoG\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2"
                        ],
                        "id": "urn:uuid:18b13643-b0f8-470f-b323-f2b1b39898f4",
                        "type": [
                          "VerifiableCredential"
                        ],
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b",
                          "name": "ExampleClaim"
                        },
                        "issuer": "did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7",
                        "proof": {
                          "type": "DataIntegrityProof",
                          "cryptosuite": "eddsa-jcs-2022",
                          "created": "2025-01-26T05:07:02.942Z",
                          "verificationMethod": "did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7#z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7",
                          "proofPurpose": "assertionMethod",
                          "@context": [
                            "https://www.w3.org/ns/credentials/v2"
                          ],
                          "proofValue": "z5JTtpoTnRYyKEd2U8kYP6dyv8PjQ2PASiEQ7VuEN9NXEfSEuFT6HJva3mE7ajEmiFwSEenYBjp1yJ26iTZzdxdoG"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc.opsec.id/credentials/verify",
                  "status": 400,
                  "data": {
                    "detail": "Bad Request"
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/60-jcs-interop.js:56:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "bovine should verify Grotto Networking",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/60-jcs-interop.js",
              "parent": "90lsCY0tt6-9Q358P09pT",
              "ctx": null,
              "_testId": "urn:uuid:c0cbc693-3b02-4ab5-adff-5bb1c48e15df",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Grotto Networking",
                "columnId": "bovine"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 99163,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 144,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\"],\"id\":\"urn:uuid:18b13643-b0f8-470f-b323-f2b1b39898f4\",\"type\":[\"VerifiableCredential\"],\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\",\"name\":\"ExampleClaim\"},\"issuer\":\"did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7\",\"proof\":{\"type\":\"DataIntegrityProof\",\"cryptosuite\":\"eddsa-jcs-2022\",\"created\":\"2025-01-26T05:07:02.942Z\",\"verificationMethod\":\"did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7#z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7\",\"proofPurpose\":\"assertionMethod\",\"@context\":[\"https://www.w3.org/ns/credentials/v2\"],\"proofValue\":\"z5JTtpoTnRYyKEd2U8kYP6dyv8PjQ2PASiEQ7VuEN9NXEfSEuFT6HJva3mE7ajEmiFwSEenYBjp1yJ26iTZzdxdoG\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2"
                        ],
                        "id": "urn:uuid:18b13643-b0f8-470f-b323-f2b1b39898f4",
                        "type": [
                          "VerifiableCredential"
                        ],
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b",
                          "name": "ExampleClaim"
                        },
                        "issuer": "did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7",
                        "proof": {
                          "type": "DataIntegrityProof",
                          "cryptosuite": "eddsa-jcs-2022",
                          "created": "2025-01-26T05:07:02.942Z",
                          "verificationMethod": "did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7#z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7",
                          "proofPurpose": "assertionMethod",
                          "@context": [
                            "https://www.w3.org/ns/credentials/v2"
                          ],
                          "proofValue": "z5JTtpoTnRYyKEd2U8kYP6dyv8PjQ2PASiEQ7VuEN9NXEfSEuFT6HJva3mE7ajEmiFwSEenYBjp1yJ26iTZzdxdoG"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://bovine.social/w3c-di/verify",
                  "status": 400
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/60-jcs-interop.js:56:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            }
          ]
        },
        {
          "id": "OpSecId",
          "cells": [
            {
              "type": "test",
              "title": "apicatalog.com should verify OpSecId",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/60-jcs-interop.js",
              "parent": "90lsCY0tt6-9Q358P09pT",
              "ctx": null,
              "_testId": "urn:uuid:de53512a-56f4-4f2d-b134-3bf562e4de8a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "OpSecId",
                "columnId": "apicatalog.com"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 99308,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 61,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: A non-empty JSON Pointer must … { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\"],\"id\":\"urn:uuid:1353a38e-837a-42a7-bb14-21cacd6f927e\",\"type\":[\"VerifiableCredential\"],\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\",\"name\":\"ExampleClaim\"},\"issuer\":\"did:key:z6MkwMaVueYP9pYSTKxtRSMzgzsSkpx1wrhwdq8MEHFxtHdu\",\"credentialStatus\":{\"id\":\"https://vc.opsec.id/credentials/status/e223eb30-a508-5bfb-912f-2eafe04ab13e#179459\",\"type\":\"BitstringStatusListEntry\",\"statusPurpose\":\"revocation\",\"statusListIndex\":\"179459\",\"statusListCredential\":\"https://vc.opsec.id/credentials/status/e223eb30-a508-5bfb-912f-2eafe04ab13e\"},\"proof\":[{\"type\":\"DataIntegrityProof\",\"cryptosuite\":\"eddsa-jcs-2022\",\"proofPurpose\":\"assertionMethod\",\"verificationMethod\":\"did:key:z6MkwMaVueYP9pYSTKxtRSMzgzsSkpx1wrhwdq8MEHFxtHdu#z6MkwMaVueYP9pYSTKxtRSMzgzsSkpx1wrhwdq8MEHFxtHdu\",\"proofValue\":\"z5y3zRxE8uRwQyxvg9pFfV4qmFXadKgSPBsEyur1HqxCabTeso7trUVupNfTcT3bUtWU9qDWgp7gAu6zSxH44bPK1\"}]},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2"
                        ],
                        "id": "urn:uuid:1353a38e-837a-42a7-bb14-21cacd6f927e",
                        "type": [
                          "VerifiableCredential"
                        ],
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b",
                          "name": "ExampleClaim"
                        },
                        "issuer": "did:key:z6MkwMaVueYP9pYSTKxtRSMzgzsSkpx1wrhwdq8MEHFxtHdu",
                        "credentialStatus": {
                          "id": "https://vc.opsec.id/credentials/status/e223eb30-a508-5bfb-912f-2eafe04ab13e#179459",
                          "type": "BitstringStatusListEntry",
                          "statusPurpose": "revocation",
                          "statusListIndex": "179459",
                          "statusListCredential": "https://vc.opsec.id/credentials/status/e223eb30-a508-5bfb-912f-2eafe04ab13e"
                        },
                        "proof": [
                          {
                            "type": "DataIntegrityProof",
                            "cryptosuite": "eddsa-jcs-2022",
                            "proofPurpose": "assertionMethod",
                            "verificationMethod": "did:key:z6MkwMaVueYP9pYSTKxtRSMzgzsSkpx1wrhwdq8MEHFxtHdu#z6MkwMaVueYP9pYSTKxtRSMzgzsSkpx1wrhwdq8MEHFxtHdu",
                            "proofValue": "z5y3zRxE8uRwQyxvg9pFfV4qmFXadKgSPBsEyur1HqxCabTeso7trUVupNfTcT3bUtWU9qDWgp7gAu6zSxH44bPK1"
                          }
                        ]
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://us-central1-api-catalog.cloudfunctions.net/vc-api-verify",
                  "status": 400,
                  "data": {
                    "message": "A non-empty JSON Pointer must begin with a '/'"
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: A non-empty JSON Pointer must … { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/60-jcs-interop.js:56:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "Digital Bazaar should verify OpSecId",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/60-jcs-interop.js",
              "parent": "90lsCY0tt6-9Q358P09pT",
              "ctx": null,
              "_testId": "urn:uuid:f70fc463-202b-40ff-b2ff-dc5d02cbe016",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "OpSecId",
                "columnId": "Digital Bazaar"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 99370,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 93,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Grotto Networking should verify OpSecId",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/60-jcs-interop.js",
              "parent": "90lsCY0tt6-9Q358P09pT",
              "ctx": null,
              "_testId": "urn:uuid:6e410fa9-1fc3-4a17-8c76-3cd5e2b63c41",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "OpSecId",
                "columnId": "Grotto Networking"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 99463,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 22,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\"],\"id\":\"urn:uuid:1353a38e-837a-42a7-bb14-21cacd6f927e\",\"type\":[\"VerifiableCredential\"],\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\",\"name\":\"ExampleClaim\"},\"issuer\":\"did:key:z6MkwMaVueYP9pYSTKxtRSMzgzsSkpx1wrhwdq8MEHFxtHdu\",\"credentialStatus\":{\"id\":\"https://vc.opsec.id/credentials/status/e223eb30-a508-5bfb-912f-2eafe04ab13e#179459\",\"type\":\"BitstringStatusListEntry\",\"statusPurpose\":\"revocation\",\"statusListIndex\":\"179459\",\"statusListCredential\":\"https://vc.opsec.id/credentials/status/e223eb30-a508-5bfb-912f-2eafe04ab13e\"},\"proof\":[{\"type\":\"DataIntegrityProof\",\"cryptosuite\":\"eddsa-jcs-2022\",\"proofPurpose\":\"assertionMethod\",\"verificationMethod\":\"did:key:z6MkwMaVueYP9pYSTKxtRSMzgzsSkpx1wrhwdq8MEHFxtHdu#z6MkwMaVueYP9pYSTKxtRSMzgzsSkpx1wrhwdq8MEHFxtHdu\",\"proofValue\":\"z5y3zRxE8uRwQyxvg9pFfV4qmFXadKgSPBsEyur1HqxCabTeso7trUVupNfTcT3bUtWU9qDWgp7gAu6zSxH44bPK1\"}]},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2"
                        ],
                        "id": "urn:uuid:1353a38e-837a-42a7-bb14-21cacd6f927e",
                        "type": [
                          "VerifiableCredential"
                        ],
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b",
                          "name": "ExampleClaim"
                        },
                        "issuer": "did:key:z6MkwMaVueYP9pYSTKxtRSMzgzsSkpx1wrhwdq8MEHFxtHdu",
                        "credentialStatus": {
                          "id": "https://vc.opsec.id/credentials/status/e223eb30-a508-5bfb-912f-2eafe04ab13e#179459",
                          "type": "BitstringStatusListEntry",
                          "statusPurpose": "revocation",
                          "statusListIndex": "179459",
                          "statusListCredential": "https://vc.opsec.id/credentials/status/e223eb30-a508-5bfb-912f-2eafe04ab13e"
                        },
                        "proof": [
                          {
                            "type": "DataIntegrityProof",
                            "cryptosuite": "eddsa-jcs-2022",
                            "proofPurpose": "assertionMethod",
                            "verificationMethod": "did:key:z6MkwMaVueYP9pYSTKxtRSMzgzsSkpx1wrhwdq8MEHFxtHdu#z6MkwMaVueYP9pYSTKxtRSMzgzsSkpx1wrhwdq8MEHFxtHdu",
                            "proofValue": "z5y3zRxE8uRwQyxvg9pFfV4qmFXadKgSPBsEyur1HqxCabTeso7trUVupNfTcT3bUtWU9qDWgp7gAu6zSxH44bPK1"
                          }
                        ]
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://ecdsa-sd.grotto-networking.com/EdDSA-JCS/credentials/verify",
                  "status": 400,
                  "data": {
                    "errors": [
                      "proof: invalid"
                    ]
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/60-jcs-interop.js:56:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "OpSecId should verify OpSecId",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/60-jcs-interop.js",
              "parent": "90lsCY0tt6-9Q358P09pT",
              "ctx": null,
              "_testId": "urn:uuid:b2b19cde-175d-49f2-88df-712fbda7a748",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "OpSecId",
                "columnId": "OpSecId"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 99486,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 63,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "bovine should verify OpSecId",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/60-jcs-interop.js",
              "parent": "90lsCY0tt6-9Q358P09pT",
              "ctx": null,
              "_testId": "urn:uuid:e49ff5eb-171d-41e1-84ac-d4c8d7d362ba",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "OpSecId",
                "columnId": "bovine"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 99550,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 145,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\"],\"id\":\"urn:uuid:1353a38e-837a-42a7-bb14-21cacd6f927e\",\"type\":[\"VerifiableCredential\"],\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\",\"name\":\"ExampleClaim\"},\"issuer\":\"did:key:z6MkwMaVueYP9pYSTKxtRSMzgzsSkpx1wrhwdq8MEHFxtHdu\",\"credentialStatus\":{\"id\":\"https://vc.opsec.id/credentials/status/e223eb30-a508-5bfb-912f-2eafe04ab13e#179459\",\"type\":\"BitstringStatusListEntry\",\"statusPurpose\":\"revocation\",\"statusListIndex\":\"179459\",\"statusListCredential\":\"https://vc.opsec.id/credentials/status/e223eb30-a508-5bfb-912f-2eafe04ab13e\"},\"proof\":[{\"type\":\"DataIntegrityProof\",\"cryptosuite\":\"eddsa-jcs-2022\",\"proofPurpose\":\"assertionMethod\",\"verificationMethod\":\"did:key:z6MkwMaVueYP9pYSTKxtRSMzgzsSkpx1wrhwdq8MEHFxtHdu#z6MkwMaVueYP9pYSTKxtRSMzgzsSkpx1wrhwdq8MEHFxtHdu\",\"proofValue\":\"z5y3zRxE8uRwQyxvg9pFfV4qmFXadKgSPBsEyur1HqxCabTeso7trUVupNfTcT3bUtWU9qDWgp7gAu6zSxH44bPK1\"}]},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2"
                        ],
                        "id": "urn:uuid:1353a38e-837a-42a7-bb14-21cacd6f927e",
                        "type": [
                          "VerifiableCredential"
                        ],
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b",
                          "name": "ExampleClaim"
                        },
                        "issuer": "did:key:z6MkwMaVueYP9pYSTKxtRSMzgzsSkpx1wrhwdq8MEHFxtHdu",
                        "credentialStatus": {
                          "id": "https://vc.opsec.id/credentials/status/e223eb30-a508-5bfb-912f-2eafe04ab13e#179459",
                          "type": "BitstringStatusListEntry",
                          "statusPurpose": "revocation",
                          "statusListIndex": "179459",
                          "statusListCredential": "https://vc.opsec.id/credentials/status/e223eb30-a508-5bfb-912f-2eafe04ab13e"
                        },
                        "proof": [
                          {
                            "type": "DataIntegrityProof",
                            "cryptosuite": "eddsa-jcs-2022",
                            "proofPurpose": "assertionMethod",
                            "verificationMethod": "did:key:z6MkwMaVueYP9pYSTKxtRSMzgzsSkpx1wrhwdq8MEHFxtHdu#z6MkwMaVueYP9pYSTKxtRSMzgzsSkpx1wrhwdq8MEHFxtHdu",
                            "proofValue": "z5y3zRxE8uRwQyxvg9pFfV4qmFXadKgSPBsEyur1HqxCabTeso7trUVupNfTcT3bUtWU9qDWgp7gAu6zSxH44bPK1"
                          }
                        ]
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://bovine.social/w3c-di/verify",
                  "status": 400
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/60-jcs-interop.js:56:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            }
          ]
        },
        {
          "id": "bovine",
          "cells": [
            {
              "type": "test",
              "title": "apicatalog.com should verify bovine",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/60-jcs-interop.js",
              "parent": "90lsCY0tt6-9Q358P09pT",
              "ctx": null,
              "_testId": "urn:uuid:c62c1c75-fb2f-4ce5-94cc-027cd107f5b5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "bovine",
                "columnId": "apicatalog.com"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 99694,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 52,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: A non-empty JSON Pointer must … { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\",\"https://w3id.org/security/data-integrity/v2\"],\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\",\"name\":\"ExampleClaim\"},\"id\":\"urn:uuid:5184a393-17da-43e4-a34e-cd69c60aee34\",\"issuer\":\"did:key:z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd\",\"proof\":{\"created\":\"2025-01-26T05:07:04Z\",\"cryptosuite\":\"eddsa-jcs-2022\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z35trzjFSLj3b6QHCwqzZCYffsrEeFQvH8EgLRvvAhqgvzon1PzEXV1crBzT3o2AeGJaR7RyWjmgXMgxTcXPJU2g4\",\"type\":\"DataIntegrityProof\",\"verificationMethod\":\"did:key:z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd#z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd\"},\"type\":\"VerifiableCredential\"},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2",
                          "https://w3id.org/security/data-integrity/v2"
                        ],
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b",
                          "name": "ExampleClaim"
                        },
                        "id": "urn:uuid:5184a393-17da-43e4-a34e-cd69c60aee34",
                        "issuer": "did:key:z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd",
                        "proof": {
                          "created": "2025-01-26T05:07:04Z",
                          "cryptosuite": "eddsa-jcs-2022",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "z35trzjFSLj3b6QHCwqzZCYffsrEeFQvH8EgLRvvAhqgvzon1PzEXV1crBzT3o2AeGJaR7RyWjmgXMgxTcXPJU2g4",
                          "type": "DataIntegrityProof",
                          "verificationMethod": "did:key:z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd#z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd"
                        },
                        "type": "VerifiableCredential"
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://us-central1-api-catalog.cloudfunctions.net/vc-api-verify",
                  "status": 400,
                  "data": {
                    "message": "A non-empty JSON Pointer must begin with a '/'"
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: A non-empty JSON Pointer must … { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/60-jcs-interop.js:56:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "Digital Bazaar should verify bovine",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/60-jcs-interop.js",
              "parent": "90lsCY0tt6-9Q358P09pT",
              "ctx": null,
              "_testId": "urn:uuid:e675baf2-97b2-4965-b3d3-1d5b83449111",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "bovine",
                "columnId": "Digital Bazaar"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 99747,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 79,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: A validation error occurred in… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2",
                          "https://w3id.org/security/data-integrity/v2"
                        ],
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b",
                          "name": "ExampleClaim"
                        },
                        "id": "urn:uuid:5184a393-17da-43e4-a34e-cd69c60aee34",
                        "issuer": "did:key:z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd",
                        "proof": {
                          "created": "2025-01-26T05:07:04Z",
                          "cryptosuite": "eddsa-jcs-2022",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "z35trzjFSLj3b6QHCwqzZCYffsrEeFQvH8EgLRvvAhqgvzon1PzEXV1crBzT3o2AeGJaR7RyWjmgXMgxTcXPJU2g4",
                          "type": "DataIntegrityProof",
                          "verificationMethod": "did:key:z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd#z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd"
                        },
                        "type": "VerifiableCredential"
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half",
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\",\"https://w3id.org/security/data-integrity/v2\"],\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\",\"name\":\"ExampleClaim\"},\"id\":\"urn:uuid:5184a393-17da-43e4-a34e-cd69c60aee34\",\"issuer\":\"did:key:z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd\",\"proof\":{\"created\":\"2025-01-26T05:07:04Z\",\"cryptosuite\":\"eddsa-jcs-2022\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z35trzjFSLj3b6QHCwqzZCYffsrEeFQvH8EgLRvvAhqgvzon1PzEXV1crBzT3o2AeGJaR7RyWjmgXMgxTcXPJU2g4\",\"type\":\"DataIntegrityProof\",\"verificationMethod\":\"did:key:z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd#z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd\"},\"type\":\"VerifiableCredential\"},\"options\":{\"checks\":[\"proof\"]}}"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc2.veresverifier.dev/verifiers/z19w7KofwvE2nkJeRVLp8NDxz/credentials/verify",
                  "status": 400,
                  "data": {
                    "name": "ValidationError",
                    "message": "A validation error occurred in the 'Verify Credential Body' validator.",
                    "details": {
                      "errors": [
                        {
                          "name": "ValidationError",
                          "message": "should be array",
                          "details": {
                            "instance": {
                              "verifiableCredential": {
                                "@context": [
                                  "https://www.w3.org/ns/credentials/v2",
                                  "https://w3id.org/security/data-integrity/v2"
                                ],
                                "credentialSubject": {
                                  "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b",
                                  "name": "ExampleClaim"
                                },
                                "id": "urn:uuid:5184a393-17da-43e4-a34e-cd69c60aee34",
                                "issuer": "did:key:z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd",
                                "proof": {
                                  "created": "2025-01-26T05:07:04Z",
                                  "cryptosuite": "eddsa-jcs-2022",
                                  "proofPurpose": "assertionMethod",
                                  "proofValue": "z35trzjFSLj3b6QHCwqzZCYffsrEeFQvH8EgLRvvAhqgvzon1PzEXV1crBzT3o2AeGJaR7RyWjmgXMgxTcXPJU2g4",
                                  "type": "DataIntegrityProof",
                                  "verificationMethod": "did:key:z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd#z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd"
                                },
                                "type": "VerifiableCredential"
                              },
                              "options": {
                                "checks": [
                                  "proof"
                                ]
                              }
                            },
                            "params": {
                              "type": "array"
                            },
                            "path": ".verifiableCredential.type",
                            "public": true,
                            "schemaPath": "#/properties/verifiableCredential/anyOf/0/properties/type/type",
                            "schema": {
                              "description": "",
                              "title": ""
                            },
                            "value": "VerifiableCredential"
                          },
                          "cause": null,
                          "stack": "ValidationError: should be array\n    at _createError (file:///home/node/app/node_modules/@bedrock/validation/lib/index.js:240:17)\n    at validate (file:///home/node/app/node_modules/@bedrock/validation/lib/index.js:88:14)\n    at validate (file:///home/node/app/node_modules/@bedrock/validation/lib/index.js:181:22)\n    at Layer.handle [as handle_request] (/home/node/app/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/node/app/node_modules/express/lib/router/route.js:149:13)\n    at cors (/home/node/app/node_modules/cors/lib/index.js:188:7)\n    at /home/node/app/node_modules/cors/lib/index.js:224:17\n    at originCallback (/home/node/app/node_modules/cors/lib/index.js:214:15)\n    at /home/node/app/node_modules/cors/lib/index.js:219:13\n    at optionsCallback (/home/node/app/node_modules/cors/lib/index.js:199:9)"
                        },
                        {
                          "name": "ValidationError",
                          "message": "should NOT have additional properties",
                          "details": {
                            "instance": {
                              "verifiableCredential": {
                                "@context": [
                                  "https://www.w3.org/ns/credentials/v2",
                                  "https://w3id.org/security/data-integrity/v2"
                                ],
                                "credentialSubject": {
                                  "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b",
                                  "name": "ExampleClaim"
                                },
                                "id": "urn:uuid:5184a393-17da-43e4-a34e-cd69c60aee34",
                                "issuer": "did:key:z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd",
                                "proof": {
                                  "created": "2025-01-26T05:07:04Z",
                                  "cryptosuite": "eddsa-jcs-2022",
                                  "proofPurpose": "assertionMethod",
                                  "proofValue": "z35trzjFSLj3b6QHCwqzZCYffsrEeFQvH8EgLRvvAhqgvzon1PzEXV1crBzT3o2AeGJaR7RyWjmgXMgxTcXPJU2g4",
                                  "type": "DataIntegrityProof",
                                  "verificationMethod": "did:key:z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd#z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd"
                                },
                                "type": "VerifiableCredential"
                              },
                              "options": {
                                "checks": [
                                  "proof"
                                ]
                              }
                            },
                            "params": {
                              "additionalProperty": "credentialSubject"
                            },
                            "path": ".verifiableCredential",
                            "public": true,
                            "schemaPath": "#/properties/verifiableCredential/anyOf/1/additionalProperties",
                            "schema": {
                              "description": "",
                              "title": "Enveloped Verifiable Credential"
                            },
                            "value": {
                              "@context": [
                                "https://www.w3.org/ns/credentials/v2",
                                "https://w3id.org/security/data-integrity/v2"
                              ],
                              "credentialSubject": {
                                "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b",
                                "name": "ExampleClaim"
                              },
                              "id": "urn:uuid:5184a393-17da-43e4-a34e-cd69c60aee34",
                              "issuer": "did:key:z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd",
                              "proof": {
                                "created": "2025-01-26T05:07:04Z",
                                "cryptosuite": "eddsa-jcs-2022",
                                "proofPurpose": "assertionMethod",
                                "proofValue": "z35trzjFSLj3b6QHCwqzZCYffsrEeFQvH8EgLRvvAhqgvzon1PzEXV1crBzT3o2AeGJaR7RyWjmgXMgxTcXPJU2g4",
                                "type": "DataIntegrityProof",
                                "verificationMethod": "did:key:z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd#z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd"
                              },
                              "type": "VerifiableCredential"
                            }
                          },
                          "cause": null,
                          "stack": "ValidationError: should NOT have additional properties\n    at _createError (file:///home/node/app/node_modules/@bedrock/validation/lib/index.js:240:17)\n    at validate (file:///home/node/app/node_modules/@bedrock/validation/lib/index.js:88:14)\n    at validate (file:///home/node/app/node_modules/@bedrock/validation/lib/index.js:181:22)\n    at Layer.handle [as handle_request] (/home/node/app/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/node/app/node_modules/express/lib/router/route.js:149:13)\n    at cors (/home/node/app/node_modules/cors/lib/index.js:188:7)\n    at /home/node/app/node_modules/cors/lib/index.js:224:17\n    at originCallback (/home/node/app/node_modules/cors/lib/index.js:214:15)\n    at /home/node/app/node_modules/cors/lib/index.js:219:13\n    at optionsCallback (/home/node/app/node_modules/cors/lib/index.js:199:9)"
                        },
                        {
                          "name": "ValidationError",
                          "message": "should match some schema in anyOf",
                          "details": {
                            "instance": {
                              "verifiableCredential": {
                                "@context": [
                                  "https://www.w3.org/ns/credentials/v2",
                                  "https://w3id.org/security/data-integrity/v2"
                                ],
                                "credentialSubject": {
                                  "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b",
                                  "name": "ExampleClaim"
                                },
                                "id": "urn:uuid:5184a393-17da-43e4-a34e-cd69c60aee34",
                                "issuer": "did:key:z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd",
                                "proof": {
                                  "created": "2025-01-26T05:07:04Z",
                                  "cryptosuite": "eddsa-jcs-2022",
                                  "proofPurpose": "assertionMethod",
                                  "proofValue": "z35trzjFSLj3b6QHCwqzZCYffsrEeFQvH8EgLRvvAhqgvzon1PzEXV1crBzT3o2AeGJaR7RyWjmgXMgxTcXPJU2g4",
                                  "type": "DataIntegrityProof",
                                  "verificationMethod": "did:key:z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd#z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd"
                                },
                                "type": "VerifiableCredential"
                              },
                              "options": {
                                "checks": [
                                  "proof"
                                ]
                              }
                            },
                            "params": {},
                            "path": ".verifiableCredential",
                            "public": true,
                            "schemaPath": "#/properties/verifiableCredential/anyOf",
                            "schema": {
                              "description": "",
                              "title": {
                                "title": "Verifiable Credential",
                                "type": "object",
                                "required": [
                                  "@context",
                                  "credentialSubject",
                                  "issuer",
                                  "type"
                                ],
                                "additionalProperties": true,
                                "properties": {
                                  "@context": {
                                    "type": "array",
                                    "minItems": 1,
                                    "items": [
                                      {
                                        "oneOf": [
                                          {
                                            "const": "https://www.w3.org/2018/credentials/v1"
                                          },
                                          {
                                            "const": "https://www.w3.org/ns/credentials/v2"
                                          }
                                        ]
                                      }
                                    ],
                                    "additionalItems": {
                                      "anyOf": [
                                        {
                                          "type": "string"
                                        },
                                        {
                                          "type": "object"
                                        }
                                      ]
                                    }
                                  },
                                  "credentialSubject": {
                                    "anyOf": [
                                      {
                                        "type": "object"
                                      },
                                      {
                                        "type": "array",
                                        "minItems": 1,
                                        "items": {
                                          "type": "object"
                                        }
                                      }
                                    ]
                                  },
                                  "id": {
                                    "type": "string"
                                  },
                                  "issuer": {
                                    "title": "identifier or an object with an id",
                                    "anyOf": [
                                      {
                                        "title": "ID",
                                        "description": "A unique identifier.",
                                        "type": "string",
                                        "minLength": 1,
                                        "disallow": {
                                          "type": "string",
                                          "enum": [
                                            "0"
                                          ]
                                        }
                                      },
                                      {
                                        "type": "object",
                                        "required": [
                                          "id"
                                        ],
                                        "additionalProperties": true,
                                        "properties": {
                                          "id": {
                                            "title": "ID",
                                            "description": "A unique identifier.",
                                            "type": "string",
                                            "minLength": 1,
                                            "disallow": {
                                              "type": "string",
                                              "enum": [
                                                "0"
                                              ]
                                            }
                                          }
                                        }
                                      }
                                    ]
                                  },
                                  "type": {
                                    "type": "array",
                                    "minItems": 1,
                                    "items": [
                                      {
                                        "const": "VerifiableCredential"
                                      }
                                    ],
                                    "additionalItems": {
                                      "type": "string"
                                    }
                                  },
                                  "proof": {
                                    "title": "Proof",
                                    "anyOf": [
                                      {
                                        "type": "object"
                                      },
                                      {
                                        "type": "array",
                                        "minItems": 1,
                                        "items": {
                                          "type": "object"
                                        }
                                      }
                                    ]
                                  }
                                }
                              }
                            },
                            "value": {
                              "@context": [
                                "https://www.w3.org/ns/credentials/v2",
                                "https://w3id.org/security/data-integrity/v2"
                              ],
                              "credentialSubject": {
                                "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b",
                                "name": "ExampleClaim"
                              },
                              "id": "urn:uuid:5184a393-17da-43e4-a34e-cd69c60aee34",
                              "issuer": "did:key:z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd",
                              "proof": {
                                "created": "2025-01-26T05:07:04Z",
                                "cryptosuite": "eddsa-jcs-2022",
                                "proofPurpose": "assertionMethod",
                                "proofValue": "z35trzjFSLj3b6QHCwqzZCYffsrEeFQvH8EgLRvvAhqgvzon1PzEXV1crBzT3o2AeGJaR7RyWjmgXMgxTcXPJU2g4",
                                "type": "DataIntegrityProof",
                                "verificationMethod": "did:key:z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd#z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd"
                              },
                              "type": "VerifiableCredential"
                            }
                          },
                          "cause": null,
                          "stack": "ValidationError: should match some schema in anyOf\n    at _createError (file:///home/node/app/node_modules/@bedrock/validation/lib/index.js:240:17)\n    at validate (file:///home/node/app/node_modules/@bedrock/validation/lib/index.js:88:14)\n    at validate (file:///home/node/app/node_modules/@bedrock/validation/lib/index.js:181:22)\n    at Layer.handle [as handle_request] (/home/node/app/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/node/app/node_modules/express/lib/router/route.js:149:13)\n    at cors (/home/node/app/node_modules/cors/lib/index.js:188:7)\n    at /home/node/app/node_modules/cors/lib/index.js:224:17\n    at originCallback (/home/node/app/node_modules/cors/lib/index.js:214:15)\n    at /home/node/app/node_modules/cors/lib/index.js:219:13\n    at optionsCallback (/home/node/app/node_modules/cors/lib/index.js:199:9)"
                        }
                      ],
                      "httpStatusCode": 400
                    },
                    "cause": null,
                    "stack": "ValidationError: A validation error occurred in the 'Verify Credential Body' validator.\n    at _createError (file:///home/node/app/node_modules/@bedrock/validation/lib/index.js:246:17)\n    at validate (file:///home/node/app/node_modules/@bedrock/validation/lib/index.js:88:14)\n    at validate (file:///home/node/app/node_modules/@bedrock/validation/lib/index.js:181:22)\n    at Layer.handle [as handle_request] (/home/node/app/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/node/app/node_modules/express/lib/router/route.js:149:13)\n    at cors (/home/node/app/node_modules/cors/lib/index.js:188:7)\n    at /home/node/app/node_modules/cors/lib/index.js:224:17\n    at originCallback (/home/node/app/node_modules/cors/lib/index.js:214:15)\n    at /home/node/app/node_modules/cors/lib/index.js:219:13\n    at optionsCallback (/home/node/app/node_modules/cors/lib/index.js:199:9)",
                    "type": "ValidationError"
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: A validation error occurred in… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/60-jcs-interop.js:56:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "Grotto Networking should verify bovine",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/60-jcs-interop.js",
              "parent": "90lsCY0tt6-9Q358P09pT",
              "ctx": null,
              "_testId": "urn:uuid:269203e2-60df-4f91-b029-324b4e287603",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "bovine",
                "columnId": "Grotto Networking"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 99827,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 25,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "OpSecId should verify bovine",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/60-jcs-interop.js",
              "parent": "90lsCY0tt6-9Q358P09pT",
              "ctx": null,
              "_testId": "urn:uuid:c4899879-defd-4770-bef0-89f043e81ee2",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "bovine",
                "columnId": "OpSecId"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 99853,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 44,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/ns/credentials/v2\",\"https://w3id.org/security/data-integrity/v2\"],\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\",\"name\":\"ExampleClaim\"},\"id\":\"urn:uuid:5184a393-17da-43e4-a34e-cd69c60aee34\",\"issuer\":\"did:key:z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd\",\"proof\":{\"created\":\"2025-01-26T05:07:04Z\",\"cryptosuite\":\"eddsa-jcs-2022\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z35trzjFSLj3b6QHCwqzZCYffsrEeFQvH8EgLRvvAhqgvzon1PzEXV1crBzT3o2AeGJaR7RyWjmgXMgxTcXPJU2g4\",\"type\":\"DataIntegrityProof\",\"verificationMethod\":\"did:key:z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd#z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd\"},\"type\":\"VerifiableCredential\"},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/ns/credentials/v2",
                          "https://w3id.org/security/data-integrity/v2"
                        ],
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b",
                          "name": "ExampleClaim"
                        },
                        "id": "urn:uuid:5184a393-17da-43e4-a34e-cd69c60aee34",
                        "issuer": "did:key:z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd",
                        "proof": {
                          "created": "2025-01-26T05:07:04Z",
                          "cryptosuite": "eddsa-jcs-2022",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "z35trzjFSLj3b6QHCwqzZCYffsrEeFQvH8EgLRvvAhqgvzon1PzEXV1crBzT3o2AeGJaR7RyWjmgXMgxTcXPJU2g4",
                          "type": "DataIntegrityProof",
                          "verificationMethod": "did:key:z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd#z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd"
                        },
                        "type": "VerifiableCredential"
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc.opsec.id/credentials/verify",
                  "status": 400,
                  "data": {
                    "detail": "Bad Request"
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/60-jcs-interop.js:56:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "bovine should verify bovine",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/60-jcs-interop.js",
              "parent": "90lsCY0tt6-9Q358P09pT",
              "ctx": null,
              "_testId": "urn:uuid:24b5913e-b9b5-4763-adaf-8d37f3d07467",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "bovine",
                "columnId": "bovine"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 99897,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 146,
              "state": "passed",
              "speed": "slow"
            }
          ]
        }
      ]
    },
    {
      "title": "eddsa-rdfc-2022 - Data Model - Proof Representations",
      "ctx": null,
      "suites": [
        {
          "title": "apicatalog.com",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The type property MUST be DataIntegrityProof.",
              "body": "async function() {\n              this.test.link = 'https://w3c.github.io/vc-di-eddsa/#:~:text=The%20type%20property%20MUST%20be%20DataIntegrityProof';\n              commonAssert();\n              for(const proof of eddsa2022Proofs) {\n                should.exist(proof.type,\n                  'Expected a type identifier on the proof.');\n                proof.type.should.equal('DataIntegrityProof',\n                  'Expected DataIntegrityProof type.');\n              }\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "parent": "LxT3ZgyvHQ3F9xD59Q3xH",
              "ctx": null,
              "_testId": "urn:uuid:339c8062-88db-484d-b901-41d4a5eb658f",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "The type property MUST be DataIntegrityProof."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#:~:text=The%20type%20property%20MUST%20be%20DataIntegrityProof",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 101406,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The cryptosuite property of the proof MUST be eddsa-rdfc-2022 or eddsa-jcs-2022.",
              "body": "async function() {\n            this.test.link = 'https://w3c.github.io/vc-di-eddsa/#:~:text=The%20cryptosuite%20property%20of%20the%20proof%20MUST%20be%20eddsa%2Drdfc%2D2022%20or%20eddsa%2Djcs%2D2022';\n            commonAssert();\n            for(const proof of eddsa2022Proofs) {\n              should.exist(proof.cryptosuite,\n                'Expected a cryptosuite identifier on the proof.');\n              proof.cryptosuite.should.be.oneOf(cryptosuites,\n                'Expected eddsa-rdfc-2022 or eddsa-jcs-2022 cryptosuite.');\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "parent": "LxT3ZgyvHQ3F9xD59Q3xH",
              "ctx": null,
              "_testId": "urn:uuid:04bffe82-7c69-4af4-a960-05c01e687509",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "The cryptosuite property of the proof MUST be eddsa-rdfc-2022 or eddsa-jcs-2022."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#:~:text=The%20cryptosuite%20property%20of%20the%20proof%20MUST%20be%20eddsa%2Drdfc%2D2022%20or%20eddsa%2Djcs%2D2022",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 101407,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The proofValue property of the proof MUST be a detached EdDSA signature produced according to [RFC8032], encoded using the base-58-btc header and alphabet as described in the Multibase section of Controller Documents 1.0.",
              "body": "async function() {\n            this.test.link = 'https://w3c.github.io/vc-di-eddsa/#:~:text=The%20proofValue%20property%20of%20the%20proof%20MUST%20be%20a%20detached%20EdDSA%20signature%20produced%20according%20to%20%5BRFC8032%5D%2C%20encoded%20using%20the%20base%2D58%2Dbtc%20header%20and%20alphabet%20as%20described%20in%20the%20Multibase%20section%20of%20Controller%20Documents%201.0';\n            commonAssert();\n            for(const proof of eddsa2022Proofs) {\n              should.exist(proof.proofValue,\n                'Expected a proof value on the proof.');\n              const valueBytes = bs58Decode({id: proof.proofValue});\n              should.exist(valueBytes,\n                'Expected to have a decoded proofValue.');\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "parent": "LxT3ZgyvHQ3F9xD59Q3xH",
              "ctx": null,
              "_testId": "urn:uuid:6cd5079b-4246-4933-a9f0-a47b53f7d46e",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "The proofValue property of the proof MUST be a detached EdDSA signature produced according to [RFC8032], encoded using the base-58-btc header and alphabet as described in the Multibase section of Controller Documents 1.0."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#:~:text=The%20proofValue%20property%20of%20the%20proof%20MUST%20be%20a%20detached%20EdDSA%20signature%20produced%20according%20to%20%5BRFC8032%5D%2C%20encoded%20using%20the%20base%2D58%2Dbtc%20header%20and%20alphabet%20as%20described%20in%20the%20Multibase%20section%20of%20Controller%20Documents%201.0",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 101407,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: setupRow in \"apicatalog.com\"",
              "body": "function setupRow() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "LxT3ZgyvHQ3F9xD59Q3xH",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "originalTitle": "\"before each\" hook: setupRow",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"apicatalog.com\"",
              "body": "async function() {\n            issuedVc = await createInitialVc({issuer, vc: validVc});\n            proofs = getProofs(issuedVc);\n            if(proofs?.length) {\n              eddsa2022Proofs = proofs.filter(\n                proof => cryptosuites.includes(proof?.cryptosuite));\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "LxT3ZgyvHQ3F9xD59Q3xH",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 100044,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1362,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "KGqxJct4gg4bNFx9Hv2Rc",
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
          "_testId": "urn:uuid:6e33c0c1-dc72-40e5-bbc5-826ab45e6440"
        },
        {
          "title": "Aviary Tech",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The type property MUST be DataIntegrityProof.",
              "body": "async function() {\n              this.test.link = 'https://w3c.github.io/vc-di-eddsa/#:~:text=The%20type%20property%20MUST%20be%20DataIntegrityProof';\n              commonAssert();\n              for(const proof of eddsa2022Proofs) {\n                should.exist(proof.type,\n                  'Expected a type identifier on the proof.');\n                proof.type.should.equal('DataIntegrityProof',\n                  'Expected DataIntegrityProof type.');\n              }\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "parent": "vXZRI7cZB-jCIqNcwXgJD",
              "ctx": null,
              "_testId": "urn:uuid:5682a695-9952-4626-a4c5-20677cbc8582",
              "cell": {
                "columnId": "Aviary Tech",
                "rowId": "The type property MUST be DataIntegrityProof."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#:~:text=The%20type%20property%20MUST%20be%20DataIntegrityProof",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 101562,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The cryptosuite property of the proof MUST be eddsa-rdfc-2022 or eddsa-jcs-2022.",
              "body": "async function() {\n            this.test.link = 'https://w3c.github.io/vc-di-eddsa/#:~:text=The%20cryptosuite%20property%20of%20the%20proof%20MUST%20be%20eddsa%2Drdfc%2D2022%20or%20eddsa%2Djcs%2D2022';\n            commonAssert();\n            for(const proof of eddsa2022Proofs) {\n              should.exist(proof.cryptosuite,\n                'Expected a cryptosuite identifier on the proof.');\n              proof.cryptosuite.should.be.oneOf(cryptosuites,\n                'Expected eddsa-rdfc-2022 or eddsa-jcs-2022 cryptosuite.');\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "parent": "vXZRI7cZB-jCIqNcwXgJD",
              "ctx": null,
              "_testId": "urn:uuid:a4c91205-3799-4e0f-afbd-18f579265e7b",
              "cell": {
                "columnId": "Aviary Tech",
                "rowId": "The cryptosuite property of the proof MUST be eddsa-rdfc-2022 or eddsa-jcs-2022."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#:~:text=The%20cryptosuite%20property%20of%20the%20proof%20MUST%20be%20eddsa%2Drdfc%2D2022%20or%20eddsa%2Djcs%2D2022",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 101562,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The proofValue property of the proof MUST be a detached EdDSA signature produced according to [RFC8032], encoded using the base-58-btc header and alphabet as described in the Multibase section of Controller Documents 1.0.",
              "body": "async function() {\n            this.test.link = 'https://w3c.github.io/vc-di-eddsa/#:~:text=The%20proofValue%20property%20of%20the%20proof%20MUST%20be%20a%20detached%20EdDSA%20signature%20produced%20according%20to%20%5BRFC8032%5D%2C%20encoded%20using%20the%20base%2D58%2Dbtc%20header%20and%20alphabet%20as%20described%20in%20the%20Multibase%20section%20of%20Controller%20Documents%201.0';\n            commonAssert();\n            for(const proof of eddsa2022Proofs) {\n              should.exist(proof.proofValue,\n                'Expected a proof value on the proof.');\n              const valueBytes = bs58Decode({id: proof.proofValue});\n              should.exist(valueBytes,\n                'Expected to have a decoded proofValue.');\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "parent": "vXZRI7cZB-jCIqNcwXgJD",
              "ctx": null,
              "_testId": "urn:uuid:3fc76596-892d-4dca-95dc-26204e78ba7f",
              "cell": {
                "columnId": "Aviary Tech",
                "rowId": "The proofValue property of the proof MUST be a detached EdDSA signature produced according to [RFC8032], encoded using the base-58-btc header and alphabet as described in the Multibase section of Controller Documents 1.0."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#:~:text=The%20proofValue%20property%20of%20the%20proof%20MUST%20be%20a%20detached%20EdDSA%20signature%20produced%20according%20to%20%5BRFC8032%5D%2C%20encoded%20using%20the%20base%2D58%2Dbtc%20header%20and%20alphabet%20as%20described%20in%20the%20Multibase%20section%20of%20Controller%20Documents%201.0",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 101562,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: setupRow in \"Aviary Tech\"",
              "body": "function setupRow() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "vXZRI7cZB-jCIqNcwXgJD",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "originalTitle": "\"before each\" hook: setupRow",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Aviary Tech\"",
              "body": "async function() {\n            issuedVc = await createInitialVc({issuer, vc: validVc});\n            proofs = getProofs(issuedVc);\n            if(proofs?.length) {\n              eddsa2022Proofs = proofs.filter(\n                proof => cryptosuites.includes(proof?.cryptosuite));\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "vXZRI7cZB-jCIqNcwXgJD",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 101407,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 153,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "KGqxJct4gg4bNFx9Hv2Rc",
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
          "_testId": "urn:uuid:d37d6cf5-f2d1-481d-8390-c379c02e1b75"
        },
        {
          "title": "Digital Bazaar",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The type property MUST be DataIntegrityProof.",
              "body": "async function() {\n              this.test.link = 'https://w3c.github.io/vc-di-eddsa/#:~:text=The%20type%20property%20MUST%20be%20DataIntegrityProof';\n              commonAssert();\n              for(const proof of eddsa2022Proofs) {\n                should.exist(proof.type,\n                  'Expected a type identifier on the proof.');\n                proof.type.should.equal('DataIntegrityProof',\n                  'Expected DataIntegrityProof type.');\n              }\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "parent": "dG7TMbo3GfC4oKQjG8R6W",
              "ctx": null,
              "_testId": "urn:uuid:1df393f7-f421-438f-a42e-b45b795005b0",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The type property MUST be DataIntegrityProof."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#:~:text=The%20type%20property%20MUST%20be%20DataIntegrityProof",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 101719,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The cryptosuite property of the proof MUST be eddsa-rdfc-2022 or eddsa-jcs-2022.",
              "body": "async function() {\n            this.test.link = 'https://w3c.github.io/vc-di-eddsa/#:~:text=The%20cryptosuite%20property%20of%20the%20proof%20MUST%20be%20eddsa%2Drdfc%2D2022%20or%20eddsa%2Djcs%2D2022';\n            commonAssert();\n            for(const proof of eddsa2022Proofs) {\n              should.exist(proof.cryptosuite,\n                'Expected a cryptosuite identifier on the proof.');\n              proof.cryptosuite.should.be.oneOf(cryptosuites,\n                'Expected eddsa-rdfc-2022 or eddsa-jcs-2022 cryptosuite.');\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "parent": "dG7TMbo3GfC4oKQjG8R6W",
              "ctx": null,
              "_testId": "urn:uuid:a515f2fa-7149-4cd7-ad91-4272d7b64df7",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The cryptosuite property of the proof MUST be eddsa-rdfc-2022 or eddsa-jcs-2022."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#:~:text=The%20cryptosuite%20property%20of%20the%20proof%20MUST%20be%20eddsa%2Drdfc%2D2022%20or%20eddsa%2Djcs%2D2022",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 101720,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The proofValue property of the proof MUST be a detached EdDSA signature produced according to [RFC8032], encoded using the base-58-btc header and alphabet as described in the Multibase section of Controller Documents 1.0.",
              "body": "async function() {\n            this.test.link = 'https://w3c.github.io/vc-di-eddsa/#:~:text=The%20proofValue%20property%20of%20the%20proof%20MUST%20be%20a%20detached%20EdDSA%20signature%20produced%20according%20to%20%5BRFC8032%5D%2C%20encoded%20using%20the%20base%2D58%2Dbtc%20header%20and%20alphabet%20as%20described%20in%20the%20Multibase%20section%20of%20Controller%20Documents%201.0';\n            commonAssert();\n            for(const proof of eddsa2022Proofs) {\n              should.exist(proof.proofValue,\n                'Expected a proof value on the proof.');\n              const valueBytes = bs58Decode({id: proof.proofValue});\n              should.exist(valueBytes,\n                'Expected to have a decoded proofValue.');\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "parent": "dG7TMbo3GfC4oKQjG8R6W",
              "ctx": null,
              "_testId": "urn:uuid:f98efe62-9a90-46e8-87eb-73d85fef74b0",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The proofValue property of the proof MUST be a detached EdDSA signature produced according to [RFC8032], encoded using the base-58-btc header and alphabet as described in the Multibase section of Controller Documents 1.0."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#:~:text=The%20proofValue%20property%20of%20the%20proof%20MUST%20be%20a%20detached%20EdDSA%20signature%20produced%20according%20to%20%5BRFC8032%5D%2C%20encoded%20using%20the%20base%2D58%2Dbtc%20header%20and%20alphabet%20as%20described%20in%20the%20Multibase%20section%20of%20Controller%20Documents%201.0",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 101720,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: setupRow in \"Digital Bazaar\"",
              "body": "function setupRow() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "dG7TMbo3GfC4oKQjG8R6W",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "originalTitle": "\"before each\" hook: setupRow",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Digital Bazaar\"",
              "body": "async function() {\n            issuedVc = await createInitialVc({issuer, vc: validVc});\n            proofs = getProofs(issuedVc);\n            if(proofs?.length) {\n              eddsa2022Proofs = proofs.filter(\n                proof => cryptosuites.includes(proof?.cryptosuite));\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "dG7TMbo3GfC4oKQjG8R6W",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 101562,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 157,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "KGqxJct4gg4bNFx9Hv2Rc",
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
          "_testId": "urn:uuid:26f7a15e-fbf2-4b59-98ad-5aecd3e51a60"
        },
        {
          "title": "Grotto Networking",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The type property MUST be DataIntegrityProof.",
              "body": "async function() {\n              this.test.link = 'https://w3c.github.io/vc-di-eddsa/#:~:text=The%20type%20property%20MUST%20be%20DataIntegrityProof';\n              commonAssert();\n              for(const proof of eddsa2022Proofs) {\n                should.exist(proof.type,\n                  'Expected a type identifier on the proof.');\n                proof.type.should.equal('DataIntegrityProof',\n                  'Expected DataIntegrityProof type.');\n              }\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "parent": "pj_JcZMEFJRjbda9vN21O",
              "ctx": null,
              "_testId": "urn:uuid:82fb1614-ca04-40fb-bc58-02f56eceb8e8",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The type property MUST be DataIntegrityProof."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#:~:text=The%20type%20property%20MUST%20be%20DataIntegrityProof",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 101749,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The cryptosuite property of the proof MUST be eddsa-rdfc-2022 or eddsa-jcs-2022.",
              "body": "async function() {\n            this.test.link = 'https://w3c.github.io/vc-di-eddsa/#:~:text=The%20cryptosuite%20property%20of%20the%20proof%20MUST%20be%20eddsa%2Drdfc%2D2022%20or%20eddsa%2Djcs%2D2022';\n            commonAssert();\n            for(const proof of eddsa2022Proofs) {\n              should.exist(proof.cryptosuite,\n                'Expected a cryptosuite identifier on the proof.');\n              proof.cryptosuite.should.be.oneOf(cryptosuites,\n                'Expected eddsa-rdfc-2022 or eddsa-jcs-2022 cryptosuite.');\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "parent": "pj_JcZMEFJRjbda9vN21O",
              "ctx": null,
              "_testId": "urn:uuid:8bb6cbd4-f353-46f6-9508-a69344f6acf0",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The cryptosuite property of the proof MUST be eddsa-rdfc-2022 or eddsa-jcs-2022."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#:~:text=The%20cryptosuite%20property%20of%20the%20proof%20MUST%20be%20eddsa%2Drdfc%2D2022%20or%20eddsa%2Djcs%2D2022",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 101750,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The proofValue property of the proof MUST be a detached EdDSA signature produced according to [RFC8032], encoded using the base-58-btc header and alphabet as described in the Multibase section of Controller Documents 1.0.",
              "body": "async function() {\n            this.test.link = 'https://w3c.github.io/vc-di-eddsa/#:~:text=The%20proofValue%20property%20of%20the%20proof%20MUST%20be%20a%20detached%20EdDSA%20signature%20produced%20according%20to%20%5BRFC8032%5D%2C%20encoded%20using%20the%20base%2D58%2Dbtc%20header%20and%20alphabet%20as%20described%20in%20the%20Multibase%20section%20of%20Controller%20Documents%201.0';\n            commonAssert();\n            for(const proof of eddsa2022Proofs) {\n              should.exist(proof.proofValue,\n                'Expected a proof value on the proof.');\n              const valueBytes = bs58Decode({id: proof.proofValue});\n              should.exist(valueBytes,\n                'Expected to have a decoded proofValue.');\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "parent": "pj_JcZMEFJRjbda9vN21O",
              "ctx": null,
              "_testId": "urn:uuid:a861f9cd-b9ff-45eb-8498-477f5e0c8568",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The proofValue property of the proof MUST be a detached EdDSA signature produced according to [RFC8032], encoded using the base-58-btc header and alphabet as described in the Multibase section of Controller Documents 1.0."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#:~:text=The%20proofValue%20property%20of%20the%20proof%20MUST%20be%20a%20detached%20EdDSA%20signature%20produced%20according%20to%20%5BRFC8032%5D%2C%20encoded%20using%20the%20base%2D58%2Dbtc%20header%20and%20alphabet%20as%20described%20in%20the%20Multibase%20section%20of%20Controller%20Documents%201.0",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 101751,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: setupRow in \"Grotto Networking\"",
              "body": "function setupRow() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "pj_JcZMEFJRjbda9vN21O",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "originalTitle": "\"before each\" hook: setupRow",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Grotto Networking\"",
              "body": "async function() {\n            issuedVc = await createInitialVc({issuer, vc: validVc});\n            proofs = getProofs(issuedVc);\n            if(proofs?.length) {\n              eddsa2022Proofs = proofs.filter(\n                proof => cryptosuites.includes(proof?.cryptosuite));\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "pj_JcZMEFJRjbda9vN21O",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 101720,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 29,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "KGqxJct4gg4bNFx9Hv2Rc",
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
          "_testId": "urn:uuid:f262ec64-8568-4c0f-943b-bbc518e2dafa"
        },
        {
          "title": "Procivis One Core",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The type property MUST be DataIntegrityProof.",
              "body": "async function() {\n              this.test.link = 'https://w3c.github.io/vc-di-eddsa/#:~:text=The%20type%20property%20MUST%20be%20DataIntegrityProof';\n              commonAssert();\n              for(const proof of eddsa2022Proofs) {\n                should.exist(proof.type,\n                  'Expected a type identifier on the proof.');\n                proof.type.should.equal('DataIntegrityProof',\n                  'Expected DataIntegrityProof type.');\n              }\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "parent": "w4Kd2QHDmhlohrFkpBF_R",
              "ctx": null,
              "_testId": "urn:uuid:804557b1-c82a-44cd-aa73-8f07e8ca70d5",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "The type property MUST be DataIntegrityProof."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#:~:text=The%20type%20property%20MUST%20be%20DataIntegrityProof",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 102266,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The cryptosuite property of the proof MUST be eddsa-rdfc-2022 or eddsa-jcs-2022.",
              "body": "async function() {\n            this.test.link = 'https://w3c.github.io/vc-di-eddsa/#:~:text=The%20cryptosuite%20property%20of%20the%20proof%20MUST%20be%20eddsa%2Drdfc%2D2022%20or%20eddsa%2Djcs%2D2022';\n            commonAssert();\n            for(const proof of eddsa2022Proofs) {\n              should.exist(proof.cryptosuite,\n                'Expected a cryptosuite identifier on the proof.');\n              proof.cryptosuite.should.be.oneOf(cryptosuites,\n                'Expected eddsa-rdfc-2022 or eddsa-jcs-2022 cryptosuite.');\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "parent": "w4Kd2QHDmhlohrFkpBF_R",
              "ctx": null,
              "_testId": "urn:uuid:1cc77c55-b0e4-412b-86f2-361d91f056b3",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "The cryptosuite property of the proof MUST be eddsa-rdfc-2022 or eddsa-jcs-2022."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#:~:text=The%20cryptosuite%20property%20of%20the%20proof%20MUST%20be%20eddsa%2Drdfc%2D2022%20or%20eddsa%2Djcs%2D2022",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 102267,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The proofValue property of the proof MUST be a detached EdDSA signature produced according to [RFC8032], encoded using the base-58-btc header and alphabet as described in the Multibase section of Controller Documents 1.0.",
              "body": "async function() {\n            this.test.link = 'https://w3c.github.io/vc-di-eddsa/#:~:text=The%20proofValue%20property%20of%20the%20proof%20MUST%20be%20a%20detached%20EdDSA%20signature%20produced%20according%20to%20%5BRFC8032%5D%2C%20encoded%20using%20the%20base%2D58%2Dbtc%20header%20and%20alphabet%20as%20described%20in%20the%20Multibase%20section%20of%20Controller%20Documents%201.0';\n            commonAssert();\n            for(const proof of eddsa2022Proofs) {\n              should.exist(proof.proofValue,\n                'Expected a proof value on the proof.');\n              const valueBytes = bs58Decode({id: proof.proofValue});\n              should.exist(valueBytes,\n                'Expected to have a decoded proofValue.');\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "parent": "w4Kd2QHDmhlohrFkpBF_R",
              "ctx": null,
              "_testId": "urn:uuid:994cfb8a-9ac3-4448-95e8-a01e9956cd8a",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "The proofValue property of the proof MUST be a detached EdDSA signature produced according to [RFC8032], encoded using the base-58-btc header and alphabet as described in the Multibase section of Controller Documents 1.0."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#:~:text=The%20proofValue%20property%20of%20the%20proof%20MUST%20be%20a%20detached%20EdDSA%20signature%20produced%20according%20to%20%5BRFC8032%5D%2C%20encoded%20using%20the%20base%2D58%2Dbtc%20header%20and%20alphabet%20as%20described%20in%20the%20Multibase%20section%20of%20Controller%20Documents%201.0",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 102267,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: setupRow in \"Procivis One Core\"",
              "body": "function setupRow() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "w4Kd2QHDmhlohrFkpBF_R",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "originalTitle": "\"before each\" hook: setupRow",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Procivis One Core\"",
              "body": "async function() {\n            issuedVc = await createInitialVc({issuer, vc: validVc});\n            proofs = getProofs(issuedVc);\n            if(proofs?.length) {\n              eddsa2022Proofs = proofs.filter(\n                proof => cryptosuites.includes(proof?.cryptosuite));\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "w4Kd2QHDmhlohrFkpBF_R",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 101751,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 515,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "KGqxJct4gg4bNFx9Hv2Rc",
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
          "_testId": "urn:uuid:6fdd4b89-b2da-4a8d-a8cd-2b5e41c0833c"
        },
        {
          "title": "SpruceID",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The type property MUST be DataIntegrityProof.",
              "body": "async function() {\n              this.test.link = 'https://w3c.github.io/vc-di-eddsa/#:~:text=The%20type%20property%20MUST%20be%20DataIntegrityProof';\n              commonAssert();\n              for(const proof of eddsa2022Proofs) {\n                should.exist(proof.type,\n                  'Expected a type identifier on the proof.');\n                proof.type.should.equal('DataIntegrityProof',\n                  'Expected DataIntegrityProof type.');\n              }\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "parent": "NNjkmGYTtFI0NH2oLotTy",
              "ctx": null,
              "_testId": "urn:uuid:411a453b-2f44-4984-a399-78113d91fea3",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The type property MUST be DataIntegrityProof."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#:~:text=The%20type%20property%20MUST%20be%20DataIntegrityProof",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 102411,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The cryptosuite property of the proof MUST be eddsa-rdfc-2022 or eddsa-jcs-2022.",
              "body": "async function() {\n            this.test.link = 'https://w3c.github.io/vc-di-eddsa/#:~:text=The%20cryptosuite%20property%20of%20the%20proof%20MUST%20be%20eddsa%2Drdfc%2D2022%20or%20eddsa%2Djcs%2D2022';\n            commonAssert();\n            for(const proof of eddsa2022Proofs) {\n              should.exist(proof.cryptosuite,\n                'Expected a cryptosuite identifier on the proof.');\n              proof.cryptosuite.should.be.oneOf(cryptosuites,\n                'Expected eddsa-rdfc-2022 or eddsa-jcs-2022 cryptosuite.');\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "parent": "NNjkmGYTtFI0NH2oLotTy",
              "ctx": null,
              "_testId": "urn:uuid:1fbca30e-a664-41ac-bdbb-3ff6ed30752f",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The cryptosuite property of the proof MUST be eddsa-rdfc-2022 or eddsa-jcs-2022."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#:~:text=The%20cryptosuite%20property%20of%20the%20proof%20MUST%20be%20eddsa%2Drdfc%2D2022%20or%20eddsa%2Djcs%2D2022",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 102411,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The proofValue property of the proof MUST be a detached EdDSA signature produced according to [RFC8032], encoded using the base-58-btc header and alphabet as described in the Multibase section of Controller Documents 1.0.",
              "body": "async function() {\n            this.test.link = 'https://w3c.github.io/vc-di-eddsa/#:~:text=The%20proofValue%20property%20of%20the%20proof%20MUST%20be%20a%20detached%20EdDSA%20signature%20produced%20according%20to%20%5BRFC8032%5D%2C%20encoded%20using%20the%20base%2D58%2Dbtc%20header%20and%20alphabet%20as%20described%20in%20the%20Multibase%20section%20of%20Controller%20Documents%201.0';\n            commonAssert();\n            for(const proof of eddsa2022Proofs) {\n              should.exist(proof.proofValue,\n                'Expected a proof value on the proof.');\n              const valueBytes = bs58Decode({id: proof.proofValue});\n              should.exist(valueBytes,\n                'Expected to have a decoded proofValue.');\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "parent": "NNjkmGYTtFI0NH2oLotTy",
              "ctx": null,
              "_testId": "urn:uuid:9ff648e4-08ae-4340-95e7-1b4814e05252",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The proofValue property of the proof MUST be a detached EdDSA signature produced according to [RFC8032], encoded using the base-58-btc header and alphabet as described in the Multibase section of Controller Documents 1.0."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#:~:text=The%20proofValue%20property%20of%20the%20proof%20MUST%20be%20a%20detached%20EdDSA%20signature%20produced%20according%20to%20%5BRFC8032%5D%2C%20encoded%20using%20the%20base%2D58%2Dbtc%20header%20and%20alphabet%20as%20described%20in%20the%20Multibase%20section%20of%20Controller%20Documents%201.0",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 102411,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: setupRow in \"SpruceID\"",
              "body": "function setupRow() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "NNjkmGYTtFI0NH2oLotTy",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "originalTitle": "\"before each\" hook: setupRow",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"SpruceID\"",
              "body": "async function() {\n            issuedVc = await createInitialVc({issuer, vc: validVc});\n            proofs = getProofs(issuedVc);\n            if(proofs?.length) {\n              eddsa2022Proofs = proofs.filter(\n                proof => cryptosuites.includes(proof?.cryptosuite));\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "NNjkmGYTtFI0NH2oLotTy",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 102267,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 143,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "KGqxJct4gg4bNFx9Hv2Rc",
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
          "_testId": "urn:uuid:2b3c50e4-cde9-49f7-8ec8-20ae5deeb01f"
        },
        {
          "title": "Trential",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The type property MUST be DataIntegrityProof.",
              "body": "async function() {\n              this.test.link = 'https://w3c.github.io/vc-di-eddsa/#:~:text=The%20type%20property%20MUST%20be%20DataIntegrityProof';\n              commonAssert();\n              for(const proof of eddsa2022Proofs) {\n                should.exist(proof.type,\n                  'Expected a type identifier on the proof.');\n                proof.type.should.equal('DataIntegrityProof',\n                  'Expected DataIntegrityProof type.');\n              }\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "parent": "WZuHm5iX6G8T8hIwCSWiL",
              "ctx": null,
              "_testId": "urn:uuid:9abca61f-e658-4048-a2ae-c0db9037ab33",
              "cell": {
                "columnId": "Trential",
                "rowId": "The type property MUST be DataIntegrityProof."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#:~:text=The%20type%20property%20MUST%20be%20DataIntegrityProof",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 103368,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The cryptosuite property of the proof MUST be eddsa-rdfc-2022 or eddsa-jcs-2022.",
              "body": "async function() {\n            this.test.link = 'https://w3c.github.io/vc-di-eddsa/#:~:text=The%20cryptosuite%20property%20of%20the%20proof%20MUST%20be%20eddsa%2Drdfc%2D2022%20or%20eddsa%2Djcs%2D2022';\n            commonAssert();\n            for(const proof of eddsa2022Proofs) {\n              should.exist(proof.cryptosuite,\n                'Expected a cryptosuite identifier on the proof.');\n              proof.cryptosuite.should.be.oneOf(cryptosuites,\n                'Expected eddsa-rdfc-2022 or eddsa-jcs-2022 cryptosuite.');\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "parent": "WZuHm5iX6G8T8hIwCSWiL",
              "ctx": null,
              "_testId": "urn:uuid:a0701c43-280f-4f20-b23e-bab82b016ea1",
              "cell": {
                "columnId": "Trential",
                "rowId": "The cryptosuite property of the proof MUST be eddsa-rdfc-2022 or eddsa-jcs-2022."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#:~:text=The%20cryptosuite%20property%20of%20the%20proof%20MUST%20be%20eddsa%2Drdfc%2D2022%20or%20eddsa%2Djcs%2D2022",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 103369,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The proofValue property of the proof MUST be a detached EdDSA signature produced according to [RFC8032], encoded using the base-58-btc header and alphabet as described in the Multibase section of Controller Documents 1.0.",
              "body": "async function() {\n            this.test.link = 'https://w3c.github.io/vc-di-eddsa/#:~:text=The%20proofValue%20property%20of%20the%20proof%20MUST%20be%20a%20detached%20EdDSA%20signature%20produced%20according%20to%20%5BRFC8032%5D%2C%20encoded%20using%20the%20base%2D58%2Dbtc%20header%20and%20alphabet%20as%20described%20in%20the%20Multibase%20section%20of%20Controller%20Documents%201.0';\n            commonAssert();\n            for(const proof of eddsa2022Proofs) {\n              should.exist(proof.proofValue,\n                'Expected a proof value on the proof.');\n              const valueBytes = bs58Decode({id: proof.proofValue});\n              should.exist(valueBytes,\n                'Expected to have a decoded proofValue.');\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "parent": "WZuHm5iX6G8T8hIwCSWiL",
              "ctx": null,
              "_testId": "urn:uuid:f1188c7f-a0df-4d44-ac51-772f027e0713",
              "cell": {
                "columnId": "Trential",
                "rowId": "The proofValue property of the proof MUST be a detached EdDSA signature produced according to [RFC8032], encoded using the base-58-btc header and alphabet as described in the Multibase section of Controller Documents 1.0."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#:~:text=The%20proofValue%20property%20of%20the%20proof%20MUST%20be%20a%20detached%20EdDSA%20signature%20produced%20according%20to%20%5BRFC8032%5D%2C%20encoded%20using%20the%20base%2D58%2Dbtc%20header%20and%20alphabet%20as%20described%20in%20the%20Multibase%20section%20of%20Controller%20Documents%201.0",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 103369,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: setupRow in \"Trential\"",
              "body": "function setupRow() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "WZuHm5iX6G8T8hIwCSWiL",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "originalTitle": "\"before each\" hook: setupRow",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Trential\"",
              "body": "async function() {\n            issuedVc = await createInitialVc({issuer, vc: validVc});\n            proofs = getProofs(issuedVc);\n            if(proofs?.length) {\n              eddsa2022Proofs = proofs.filter(\n                proof => cryptosuites.includes(proof?.cryptosuite));\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "WZuHm5iX6G8T8hIwCSWiL",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 102412,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 955,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "KGqxJct4gg4bNFx9Hv2Rc",
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
          "_testId": "urn:uuid:ae109a3b-79cd-4ef7-980d-dffb0a9e41de"
        },
        {
          "title": "Trinsic",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The type property MUST be DataIntegrityProof.",
              "body": "async function() {\n              this.test.link = 'https://w3c.github.io/vc-di-eddsa/#:~:text=The%20type%20property%20MUST%20be%20DataIntegrityProof';\n              commonAssert();\n              for(const proof of eddsa2022Proofs) {\n                should.exist(proof.type,\n                  'Expected a type identifier on the proof.');\n                proof.type.should.equal('DataIntegrityProof',\n                  'Expected DataIntegrityProof type.');\n              }\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "parent": "gq9wrHdeQagU1n6oNKcQF",
              "ctx": null,
              "_testId": "urn:uuid:7b7af177-2a63-4795-a419-96d1f73f5026",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "The type property MUST be DataIntegrityProof."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#:~:text=The%20type%20property%20MUST%20be%20DataIntegrityProof",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 103540,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected issuer to have issued a credential.: expected undefined to exist",
                "showDiff": false,
                "stack": "AssertionError: Expected issuer to have issued a credential.: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at commonAssert (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/suites/data-model.js:140:20)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/suites/data-model.js:150:15)\n    at process.processImmediate (node:internal/timers:483:21)"
              }
            },
            {
              "type": "test",
              "title": "The cryptosuite property of the proof MUST be eddsa-rdfc-2022 or eddsa-jcs-2022.",
              "body": "async function() {\n            this.test.link = 'https://w3c.github.io/vc-di-eddsa/#:~:text=The%20cryptosuite%20property%20of%20the%20proof%20MUST%20be%20eddsa%2Drdfc%2D2022%20or%20eddsa%2Djcs%2D2022';\n            commonAssert();\n            for(const proof of eddsa2022Proofs) {\n              should.exist(proof.cryptosuite,\n                'Expected a cryptosuite identifier on the proof.');\n              proof.cryptosuite.should.be.oneOf(cryptosuites,\n                'Expected eddsa-rdfc-2022 or eddsa-jcs-2022 cryptosuite.');\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "parent": "gq9wrHdeQagU1n6oNKcQF",
              "ctx": null,
              "_testId": "urn:uuid:93f67de4-5880-4410-a224-2d94fe672e08",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "The cryptosuite property of the proof MUST be eddsa-rdfc-2022 or eddsa-jcs-2022."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#:~:text=The%20cryptosuite%20property%20of%20the%20proof%20MUST%20be%20eddsa%2Drdfc%2D2022%20or%20eddsa%2Djcs%2D2022",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 103541,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected issuer to have issued a credential.: expected undefined to exist",
                "showDiff": false,
                "stack": "AssertionError: Expected issuer to have issued a credential.: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at commonAssert (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/suites/data-model.js:140:20)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/suites/data-model.js:162:13)\n    at process.processImmediate (node:internal/timers:483:21)"
              }
            },
            {
              "type": "test",
              "title": "The proofValue property of the proof MUST be a detached EdDSA signature produced according to [RFC8032], encoded using the base-58-btc header and alphabet as described in the Multibase section of Controller Documents 1.0.",
              "body": "async function() {\n            this.test.link = 'https://w3c.github.io/vc-di-eddsa/#:~:text=The%20proofValue%20property%20of%20the%20proof%20MUST%20be%20a%20detached%20EdDSA%20signature%20produced%20according%20to%20%5BRFC8032%5D%2C%20encoded%20using%20the%20base%2D58%2Dbtc%20header%20and%20alphabet%20as%20described%20in%20the%20Multibase%20section%20of%20Controller%20Documents%201.0';\n            commonAssert();\n            for(const proof of eddsa2022Proofs) {\n              should.exist(proof.proofValue,\n                'Expected a proof value on the proof.');\n              const valueBytes = bs58Decode({id: proof.proofValue});\n              should.exist(valueBytes,\n                'Expected to have a decoded proofValue.');\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "parent": "gq9wrHdeQagU1n6oNKcQF",
              "ctx": null,
              "_testId": "urn:uuid:cfa96cba-4b3b-483c-af2b-723dc09036d9",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "The proofValue property of the proof MUST be a detached EdDSA signature produced according to [RFC8032], encoded using the base-58-btc header and alphabet as described in the Multibase section of Controller Documents 1.0."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#:~:text=The%20proofValue%20property%20of%20the%20proof%20MUST%20be%20a%20detached%20EdDSA%20signature%20produced%20according%20to%20%5BRFC8032%5D%2C%20encoded%20using%20the%20base%2D58%2Dbtc%20header%20and%20alphabet%20as%20described%20in%20the%20Multibase%20section%20of%20Controller%20Documents%201.0",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 103541,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected issuer to have issued a credential.: expected undefined to exist",
                "showDiff": false,
                "stack": "AssertionError: Expected issuer to have issued a credential.: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at commonAssert (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/suites/data-model.js:140:20)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/suites/data-model.js:176:13)\n    at process.processImmediate (node:internal/timers:483:21)"
              }
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: setupRow in \"Trinsic\"",
              "body": "function setupRow() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "gq9wrHdeQagU1n6oNKcQF",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "originalTitle": "\"before each\" hook: setupRow",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Trinsic\"",
              "body": "async function() {\n            issuedVc = await createInitialVc({issuer, vc: validVc});\n            proofs = getProofs(issuedVc);\n            if(proofs?.length) {\n              eddsa2022Proofs = proofs.filter(\n                proof => cryptosuites.includes(proof?.cryptosuite));\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "gq9wrHdeQagU1n6oNKcQF",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 103370,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 170,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "KGqxJct4gg4bNFx9Hv2Rc",
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
          "_testId": "urn:uuid:2423d7b5-06be-4ec7-b776-69a300759e62"
        },
        {
          "title": "bovine",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The type property MUST be DataIntegrityProof.",
              "body": "async function() {\n              this.test.link = 'https://w3c.github.io/vc-di-eddsa/#:~:text=The%20type%20property%20MUST%20be%20DataIntegrityProof';\n              commonAssert();\n              for(const proof of eddsa2022Proofs) {\n                should.exist(proof.type,\n                  'Expected a type identifier on the proof.');\n                proof.type.should.equal('DataIntegrityProof',\n                  'Expected DataIntegrityProof type.');\n              }\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "parent": "9nUWoxZNS-mtR_7Z4FMPL",
              "ctx": null,
              "_testId": "urn:uuid:4337b931-f5cd-4989-8405-47055c6be918",
              "cell": {
                "columnId": "bovine",
                "rowId": "The type property MUST be DataIntegrityProof."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#:~:text=The%20type%20property%20MUST%20be%20DataIntegrityProof",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 103691,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The cryptosuite property of the proof MUST be eddsa-rdfc-2022 or eddsa-jcs-2022.",
              "body": "async function() {\n            this.test.link = 'https://w3c.github.io/vc-di-eddsa/#:~:text=The%20cryptosuite%20property%20of%20the%20proof%20MUST%20be%20eddsa%2Drdfc%2D2022%20or%20eddsa%2Djcs%2D2022';\n            commonAssert();\n            for(const proof of eddsa2022Proofs) {\n              should.exist(proof.cryptosuite,\n                'Expected a cryptosuite identifier on the proof.');\n              proof.cryptosuite.should.be.oneOf(cryptosuites,\n                'Expected eddsa-rdfc-2022 or eddsa-jcs-2022 cryptosuite.');\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "parent": "9nUWoxZNS-mtR_7Z4FMPL",
              "ctx": null,
              "_testId": "urn:uuid:c3dcf570-2071-4333-964d-4737735815da",
              "cell": {
                "columnId": "bovine",
                "rowId": "The cryptosuite property of the proof MUST be eddsa-rdfc-2022 or eddsa-jcs-2022."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#:~:text=The%20cryptosuite%20property%20of%20the%20proof%20MUST%20be%20eddsa%2Drdfc%2D2022%20or%20eddsa%2Djcs%2D2022",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 103691,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The proofValue property of the proof MUST be a detached EdDSA signature produced according to [RFC8032], encoded using the base-58-btc header and alphabet as described in the Multibase section of Controller Documents 1.0.",
              "body": "async function() {\n            this.test.link = 'https://w3c.github.io/vc-di-eddsa/#:~:text=The%20proofValue%20property%20of%20the%20proof%20MUST%20be%20a%20detached%20EdDSA%20signature%20produced%20according%20to%20%5BRFC8032%5D%2C%20encoded%20using%20the%20base%2D58%2Dbtc%20header%20and%20alphabet%20as%20described%20in%20the%20Multibase%20section%20of%20Controller%20Documents%201.0';\n            commonAssert();\n            for(const proof of eddsa2022Proofs) {\n              should.exist(proof.proofValue,\n                'Expected a proof value on the proof.');\n              const valueBytes = bs58Decode({id: proof.proofValue});\n              should.exist(valueBytes,\n                'Expected to have a decoded proofValue.');\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "parent": "9nUWoxZNS-mtR_7Z4FMPL",
              "ctx": null,
              "_testId": "urn:uuid:9c10502e-faee-41db-b7bc-8520c6f1b126",
              "cell": {
                "columnId": "bovine",
                "rowId": "The proofValue property of the proof MUST be a detached EdDSA signature produced according to [RFC8032], encoded using the base-58-btc header and alphabet as described in the Multibase section of Controller Documents 1.0."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#:~:text=The%20proofValue%20property%20of%20the%20proof%20MUST%20be%20a%20detached%20EdDSA%20signature%20produced%20according%20to%20%5BRFC8032%5D%2C%20encoded%20using%20the%20base%2D58%2Dbtc%20header%20and%20alphabet%20as%20described%20in%20the%20Multibase%20section%20of%20Controller%20Documents%201.0",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 103691,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: setupRow in \"bovine\"",
              "body": "function setupRow() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "9nUWoxZNS-mtR_7Z4FMPL",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "originalTitle": "\"before each\" hook: setupRow",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"bovine\"",
              "body": "async function() {\n            issuedVc = await createInitialVc({issuer, vc: validVc});\n            proofs = getProofs(issuedVc);\n            if(proofs?.length) {\n              eddsa2022Proofs = proofs.filter(\n                proof => cryptosuites.includes(proof?.cryptosuite));\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "9nUWoxZNS-mtR_7Z4FMPL",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 103542,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 149,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "KGqxJct4gg4bNFx9Hv2Rc",
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
          "_testId": "urn:uuid:55555bc5-1b5a-4bc2-af51-04937be3b08f"
        }
      ],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [
        {
          "title": "\"before all\" hook in \"eddsa-rdfc-2022 - Data Model - Proof Representations\"",
          "body": "async function() {\n        const credentials = await generateTestData();\n        validVc = credentials.clone('validVc');\n      }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "KGqxJct4gg4bNFx9Hv2Rc",
          "ctx": null,
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 100044,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 1,
          "_error": null
        }
      ],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "Ika60aoT9ncTXtTubybzs",
      "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Implementer",
      "_testId": "urn:uuid:df45a227-bcaa-4cc2-85cd-b827651007bd",
      "columns": [
        "apicatalog.com",
        "Aviary Tech",
        "Digital Bazaar",
        "Grotto Networking",
        "Procivis One Core",
        "SpruceID",
        "Trential",
        "Trinsic",
        "bovine"
      ],
      "rows": [
        {
          "id": "The type property MUST be DataIntegrityProof.",
          "link": "https://w3c.github.io/vc-di-eddsa/#:~:text=The%20type%20property%20MUST%20be%20DataIntegrityProof",
          "cells": [
            {
              "type": "test",
              "title": "The type property MUST be DataIntegrityProof.",
              "body": "async function() {\n              this.test.link = 'https://w3c.github.io/vc-di-eddsa/#:~:text=The%20type%20property%20MUST%20be%20DataIntegrityProof';\n              commonAssert();\n              for(const proof of eddsa2022Proofs) {\n                should.exist(proof.type,\n                  'Expected a type identifier on the proof.');\n                proof.type.should.equal('DataIntegrityProof',\n                  'Expected DataIntegrityProof type.');\n              }\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "parent": "LxT3ZgyvHQ3F9xD59Q3xH",
              "ctx": null,
              "_testId": "urn:uuid:339c8062-88db-484d-b901-41d4a5eb658f",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "The type property MUST be DataIntegrityProof."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#:~:text=The%20type%20property%20MUST%20be%20DataIntegrityProof",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 101406,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The type property MUST be DataIntegrityProof.",
              "body": "async function() {\n              this.test.link = 'https://w3c.github.io/vc-di-eddsa/#:~:text=The%20type%20property%20MUST%20be%20DataIntegrityProof';\n              commonAssert();\n              for(const proof of eddsa2022Proofs) {\n                should.exist(proof.type,\n                  'Expected a type identifier on the proof.');\n                proof.type.should.equal('DataIntegrityProof',\n                  'Expected DataIntegrityProof type.');\n              }\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "parent": "vXZRI7cZB-jCIqNcwXgJD",
              "ctx": null,
              "_testId": "urn:uuid:5682a695-9952-4626-a4c5-20677cbc8582",
              "cell": {
                "columnId": "Aviary Tech",
                "rowId": "The type property MUST be DataIntegrityProof."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#:~:text=The%20type%20property%20MUST%20be%20DataIntegrityProof",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 101562,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The type property MUST be DataIntegrityProof.",
              "body": "async function() {\n              this.test.link = 'https://w3c.github.io/vc-di-eddsa/#:~:text=The%20type%20property%20MUST%20be%20DataIntegrityProof';\n              commonAssert();\n              for(const proof of eddsa2022Proofs) {\n                should.exist(proof.type,\n                  'Expected a type identifier on the proof.');\n                proof.type.should.equal('DataIntegrityProof',\n                  'Expected DataIntegrityProof type.');\n              }\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "parent": "dG7TMbo3GfC4oKQjG8R6W",
              "ctx": null,
              "_testId": "urn:uuid:1df393f7-f421-438f-a42e-b45b795005b0",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The type property MUST be DataIntegrityProof."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#:~:text=The%20type%20property%20MUST%20be%20DataIntegrityProof",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 101719,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The type property MUST be DataIntegrityProof.",
              "body": "async function() {\n              this.test.link = 'https://w3c.github.io/vc-di-eddsa/#:~:text=The%20type%20property%20MUST%20be%20DataIntegrityProof';\n              commonAssert();\n              for(const proof of eddsa2022Proofs) {\n                should.exist(proof.type,\n                  'Expected a type identifier on the proof.');\n                proof.type.should.equal('DataIntegrityProof',\n                  'Expected DataIntegrityProof type.');\n              }\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "parent": "pj_JcZMEFJRjbda9vN21O",
              "ctx": null,
              "_testId": "urn:uuid:82fb1614-ca04-40fb-bc58-02f56eceb8e8",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The type property MUST be DataIntegrityProof."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#:~:text=The%20type%20property%20MUST%20be%20DataIntegrityProof",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 101749,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The type property MUST be DataIntegrityProof.",
              "body": "async function() {\n              this.test.link = 'https://w3c.github.io/vc-di-eddsa/#:~:text=The%20type%20property%20MUST%20be%20DataIntegrityProof';\n              commonAssert();\n              for(const proof of eddsa2022Proofs) {\n                should.exist(proof.type,\n                  'Expected a type identifier on the proof.');\n                proof.type.should.equal('DataIntegrityProof',\n                  'Expected DataIntegrityProof type.');\n              }\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "parent": "w4Kd2QHDmhlohrFkpBF_R",
              "ctx": null,
              "_testId": "urn:uuid:804557b1-c82a-44cd-aa73-8f07e8ca70d5",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "The type property MUST be DataIntegrityProof."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#:~:text=The%20type%20property%20MUST%20be%20DataIntegrityProof",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 102266,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The type property MUST be DataIntegrityProof.",
              "body": "async function() {\n              this.test.link = 'https://w3c.github.io/vc-di-eddsa/#:~:text=The%20type%20property%20MUST%20be%20DataIntegrityProof';\n              commonAssert();\n              for(const proof of eddsa2022Proofs) {\n                should.exist(proof.type,\n                  'Expected a type identifier on the proof.');\n                proof.type.should.equal('DataIntegrityProof',\n                  'Expected DataIntegrityProof type.');\n              }\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "parent": "NNjkmGYTtFI0NH2oLotTy",
              "ctx": null,
              "_testId": "urn:uuid:411a453b-2f44-4984-a399-78113d91fea3",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The type property MUST be DataIntegrityProof."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#:~:text=The%20type%20property%20MUST%20be%20DataIntegrityProof",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 102411,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The type property MUST be DataIntegrityProof.",
              "body": "async function() {\n              this.test.link = 'https://w3c.github.io/vc-di-eddsa/#:~:text=The%20type%20property%20MUST%20be%20DataIntegrityProof';\n              commonAssert();\n              for(const proof of eddsa2022Proofs) {\n                should.exist(proof.type,\n                  'Expected a type identifier on the proof.');\n                proof.type.should.equal('DataIntegrityProof',\n                  'Expected DataIntegrityProof type.');\n              }\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "parent": "WZuHm5iX6G8T8hIwCSWiL",
              "ctx": null,
              "_testId": "urn:uuid:9abca61f-e658-4048-a2ae-c0db9037ab33",
              "cell": {
                "columnId": "Trential",
                "rowId": "The type property MUST be DataIntegrityProof."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#:~:text=The%20type%20property%20MUST%20be%20DataIntegrityProof",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 103368,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The type property MUST be DataIntegrityProof.",
              "body": "async function() {\n              this.test.link = 'https://w3c.github.io/vc-di-eddsa/#:~:text=The%20type%20property%20MUST%20be%20DataIntegrityProof';\n              commonAssert();\n              for(const proof of eddsa2022Proofs) {\n                should.exist(proof.type,\n                  'Expected a type identifier on the proof.');\n                proof.type.should.equal('DataIntegrityProof',\n                  'Expected DataIntegrityProof type.');\n              }\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "parent": "gq9wrHdeQagU1n6oNKcQF",
              "ctx": null,
              "_testId": "urn:uuid:7b7af177-2a63-4795-a419-96d1f73f5026",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "The type property MUST be DataIntegrityProof."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#:~:text=The%20type%20property%20MUST%20be%20DataIntegrityProof",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 103540,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected issuer to have issued a credential.: expected undefined to exist",
                "showDiff": false,
                "stack": "AssertionError: Expected issuer to have issued a credential.: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at commonAssert (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/suites/data-model.js:140:20)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/suites/data-model.js:150:15)\n    at process.processImmediate (node:internal/timers:483:21)"
              }
            },
            {
              "type": "test",
              "title": "The type property MUST be DataIntegrityProof.",
              "body": "async function() {\n              this.test.link = 'https://w3c.github.io/vc-di-eddsa/#:~:text=The%20type%20property%20MUST%20be%20DataIntegrityProof';\n              commonAssert();\n              for(const proof of eddsa2022Proofs) {\n                should.exist(proof.type,\n                  'Expected a type identifier on the proof.');\n                proof.type.should.equal('DataIntegrityProof',\n                  'Expected DataIntegrityProof type.');\n              }\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "parent": "9nUWoxZNS-mtR_7Z4FMPL",
              "ctx": null,
              "_testId": "urn:uuid:4337b931-f5cd-4989-8405-47055c6be918",
              "cell": {
                "columnId": "bovine",
                "rowId": "The type property MUST be DataIntegrityProof."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#:~:text=The%20type%20property%20MUST%20be%20DataIntegrityProof",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 103691,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "The cryptosuite property of the proof MUST be eddsa-rdfc-2022 or eddsa-jcs-2022.",
          "link": "https://w3c.github.io/vc-di-eddsa/#:~:text=The%20cryptosuite%20property%20of%20the%20proof%20MUST%20be%20eddsa%2Drdfc%2D2022%20or%20eddsa%2Djcs%2D2022",
          "cells": [
            {
              "type": "test",
              "title": "The cryptosuite property of the proof MUST be eddsa-rdfc-2022 or eddsa-jcs-2022.",
              "body": "async function() {\n            this.test.link = 'https://w3c.github.io/vc-di-eddsa/#:~:text=The%20cryptosuite%20property%20of%20the%20proof%20MUST%20be%20eddsa%2Drdfc%2D2022%20or%20eddsa%2Djcs%2D2022';\n            commonAssert();\n            for(const proof of eddsa2022Proofs) {\n              should.exist(proof.cryptosuite,\n                'Expected a cryptosuite identifier on the proof.');\n              proof.cryptosuite.should.be.oneOf(cryptosuites,\n                'Expected eddsa-rdfc-2022 or eddsa-jcs-2022 cryptosuite.');\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "parent": "LxT3ZgyvHQ3F9xD59Q3xH",
              "ctx": null,
              "_testId": "urn:uuid:04bffe82-7c69-4af4-a960-05c01e687509",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "The cryptosuite property of the proof MUST be eddsa-rdfc-2022 or eddsa-jcs-2022."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#:~:text=The%20cryptosuite%20property%20of%20the%20proof%20MUST%20be%20eddsa%2Drdfc%2D2022%20or%20eddsa%2Djcs%2D2022",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 101407,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The cryptosuite property of the proof MUST be eddsa-rdfc-2022 or eddsa-jcs-2022.",
              "body": "async function() {\n            this.test.link = 'https://w3c.github.io/vc-di-eddsa/#:~:text=The%20cryptosuite%20property%20of%20the%20proof%20MUST%20be%20eddsa%2Drdfc%2D2022%20or%20eddsa%2Djcs%2D2022';\n            commonAssert();\n            for(const proof of eddsa2022Proofs) {\n              should.exist(proof.cryptosuite,\n                'Expected a cryptosuite identifier on the proof.');\n              proof.cryptosuite.should.be.oneOf(cryptosuites,\n                'Expected eddsa-rdfc-2022 or eddsa-jcs-2022 cryptosuite.');\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "parent": "vXZRI7cZB-jCIqNcwXgJD",
              "ctx": null,
              "_testId": "urn:uuid:a4c91205-3799-4e0f-afbd-18f579265e7b",
              "cell": {
                "columnId": "Aviary Tech",
                "rowId": "The cryptosuite property of the proof MUST be eddsa-rdfc-2022 or eddsa-jcs-2022."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#:~:text=The%20cryptosuite%20property%20of%20the%20proof%20MUST%20be%20eddsa%2Drdfc%2D2022%20or%20eddsa%2Djcs%2D2022",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 101562,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The cryptosuite property of the proof MUST be eddsa-rdfc-2022 or eddsa-jcs-2022.",
              "body": "async function() {\n            this.test.link = 'https://w3c.github.io/vc-di-eddsa/#:~:text=The%20cryptosuite%20property%20of%20the%20proof%20MUST%20be%20eddsa%2Drdfc%2D2022%20or%20eddsa%2Djcs%2D2022';\n            commonAssert();\n            for(const proof of eddsa2022Proofs) {\n              should.exist(proof.cryptosuite,\n                'Expected a cryptosuite identifier on the proof.');\n              proof.cryptosuite.should.be.oneOf(cryptosuites,\n                'Expected eddsa-rdfc-2022 or eddsa-jcs-2022 cryptosuite.');\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "parent": "dG7TMbo3GfC4oKQjG8R6W",
              "ctx": null,
              "_testId": "urn:uuid:a515f2fa-7149-4cd7-ad91-4272d7b64df7",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The cryptosuite property of the proof MUST be eddsa-rdfc-2022 or eddsa-jcs-2022."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#:~:text=The%20cryptosuite%20property%20of%20the%20proof%20MUST%20be%20eddsa%2Drdfc%2D2022%20or%20eddsa%2Djcs%2D2022",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 101720,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The cryptosuite property of the proof MUST be eddsa-rdfc-2022 or eddsa-jcs-2022.",
              "body": "async function() {\n            this.test.link = 'https://w3c.github.io/vc-di-eddsa/#:~:text=The%20cryptosuite%20property%20of%20the%20proof%20MUST%20be%20eddsa%2Drdfc%2D2022%20or%20eddsa%2Djcs%2D2022';\n            commonAssert();\n            for(const proof of eddsa2022Proofs) {\n              should.exist(proof.cryptosuite,\n                'Expected a cryptosuite identifier on the proof.');\n              proof.cryptosuite.should.be.oneOf(cryptosuites,\n                'Expected eddsa-rdfc-2022 or eddsa-jcs-2022 cryptosuite.');\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "parent": "pj_JcZMEFJRjbda9vN21O",
              "ctx": null,
              "_testId": "urn:uuid:8bb6cbd4-f353-46f6-9508-a69344f6acf0",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The cryptosuite property of the proof MUST be eddsa-rdfc-2022 or eddsa-jcs-2022."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#:~:text=The%20cryptosuite%20property%20of%20the%20proof%20MUST%20be%20eddsa%2Drdfc%2D2022%20or%20eddsa%2Djcs%2D2022",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 101750,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The cryptosuite property of the proof MUST be eddsa-rdfc-2022 or eddsa-jcs-2022.",
              "body": "async function() {\n            this.test.link = 'https://w3c.github.io/vc-di-eddsa/#:~:text=The%20cryptosuite%20property%20of%20the%20proof%20MUST%20be%20eddsa%2Drdfc%2D2022%20or%20eddsa%2Djcs%2D2022';\n            commonAssert();\n            for(const proof of eddsa2022Proofs) {\n              should.exist(proof.cryptosuite,\n                'Expected a cryptosuite identifier on the proof.');\n              proof.cryptosuite.should.be.oneOf(cryptosuites,\n                'Expected eddsa-rdfc-2022 or eddsa-jcs-2022 cryptosuite.');\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "parent": "w4Kd2QHDmhlohrFkpBF_R",
              "ctx": null,
              "_testId": "urn:uuid:1cc77c55-b0e4-412b-86f2-361d91f056b3",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "The cryptosuite property of the proof MUST be eddsa-rdfc-2022 or eddsa-jcs-2022."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#:~:text=The%20cryptosuite%20property%20of%20the%20proof%20MUST%20be%20eddsa%2Drdfc%2D2022%20or%20eddsa%2Djcs%2D2022",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 102267,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The cryptosuite property of the proof MUST be eddsa-rdfc-2022 or eddsa-jcs-2022.",
              "body": "async function() {\n            this.test.link = 'https://w3c.github.io/vc-di-eddsa/#:~:text=The%20cryptosuite%20property%20of%20the%20proof%20MUST%20be%20eddsa%2Drdfc%2D2022%20or%20eddsa%2Djcs%2D2022';\n            commonAssert();\n            for(const proof of eddsa2022Proofs) {\n              should.exist(proof.cryptosuite,\n                'Expected a cryptosuite identifier on the proof.');\n              proof.cryptosuite.should.be.oneOf(cryptosuites,\n                'Expected eddsa-rdfc-2022 or eddsa-jcs-2022 cryptosuite.');\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "parent": "NNjkmGYTtFI0NH2oLotTy",
              "ctx": null,
              "_testId": "urn:uuid:1fbca30e-a664-41ac-bdbb-3ff6ed30752f",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The cryptosuite property of the proof MUST be eddsa-rdfc-2022 or eddsa-jcs-2022."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#:~:text=The%20cryptosuite%20property%20of%20the%20proof%20MUST%20be%20eddsa%2Drdfc%2D2022%20or%20eddsa%2Djcs%2D2022",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 102411,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The cryptosuite property of the proof MUST be eddsa-rdfc-2022 or eddsa-jcs-2022.",
              "body": "async function() {\n            this.test.link = 'https://w3c.github.io/vc-di-eddsa/#:~:text=The%20cryptosuite%20property%20of%20the%20proof%20MUST%20be%20eddsa%2Drdfc%2D2022%20or%20eddsa%2Djcs%2D2022';\n            commonAssert();\n            for(const proof of eddsa2022Proofs) {\n              should.exist(proof.cryptosuite,\n                'Expected a cryptosuite identifier on the proof.');\n              proof.cryptosuite.should.be.oneOf(cryptosuites,\n                'Expected eddsa-rdfc-2022 or eddsa-jcs-2022 cryptosuite.');\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "parent": "WZuHm5iX6G8T8hIwCSWiL",
              "ctx": null,
              "_testId": "urn:uuid:a0701c43-280f-4f20-b23e-bab82b016ea1",
              "cell": {
                "columnId": "Trential",
                "rowId": "The cryptosuite property of the proof MUST be eddsa-rdfc-2022 or eddsa-jcs-2022."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#:~:text=The%20cryptosuite%20property%20of%20the%20proof%20MUST%20be%20eddsa%2Drdfc%2D2022%20or%20eddsa%2Djcs%2D2022",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 103369,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The cryptosuite property of the proof MUST be eddsa-rdfc-2022 or eddsa-jcs-2022.",
              "body": "async function() {\n            this.test.link = 'https://w3c.github.io/vc-di-eddsa/#:~:text=The%20cryptosuite%20property%20of%20the%20proof%20MUST%20be%20eddsa%2Drdfc%2D2022%20or%20eddsa%2Djcs%2D2022';\n            commonAssert();\n            for(const proof of eddsa2022Proofs) {\n              should.exist(proof.cryptosuite,\n                'Expected a cryptosuite identifier on the proof.');\n              proof.cryptosuite.should.be.oneOf(cryptosuites,\n                'Expected eddsa-rdfc-2022 or eddsa-jcs-2022 cryptosuite.');\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "parent": "gq9wrHdeQagU1n6oNKcQF",
              "ctx": null,
              "_testId": "urn:uuid:93f67de4-5880-4410-a224-2d94fe672e08",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "The cryptosuite property of the proof MUST be eddsa-rdfc-2022 or eddsa-jcs-2022."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#:~:text=The%20cryptosuite%20property%20of%20the%20proof%20MUST%20be%20eddsa%2Drdfc%2D2022%20or%20eddsa%2Djcs%2D2022",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 103541,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected issuer to have issued a credential.: expected undefined to exist",
                "showDiff": false,
                "stack": "AssertionError: Expected issuer to have issued a credential.: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at commonAssert (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/suites/data-model.js:140:20)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/suites/data-model.js:162:13)\n    at process.processImmediate (node:internal/timers:483:21)"
              }
            },
            {
              "type": "test",
              "title": "The cryptosuite property of the proof MUST be eddsa-rdfc-2022 or eddsa-jcs-2022.",
              "body": "async function() {\n            this.test.link = 'https://w3c.github.io/vc-di-eddsa/#:~:text=The%20cryptosuite%20property%20of%20the%20proof%20MUST%20be%20eddsa%2Drdfc%2D2022%20or%20eddsa%2Djcs%2D2022';\n            commonAssert();\n            for(const proof of eddsa2022Proofs) {\n              should.exist(proof.cryptosuite,\n                'Expected a cryptosuite identifier on the proof.');\n              proof.cryptosuite.should.be.oneOf(cryptosuites,\n                'Expected eddsa-rdfc-2022 or eddsa-jcs-2022 cryptosuite.');\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "parent": "9nUWoxZNS-mtR_7Z4FMPL",
              "ctx": null,
              "_testId": "urn:uuid:c3dcf570-2071-4333-964d-4737735815da",
              "cell": {
                "columnId": "bovine",
                "rowId": "The cryptosuite property of the proof MUST be eddsa-rdfc-2022 or eddsa-jcs-2022."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#:~:text=The%20cryptosuite%20property%20of%20the%20proof%20MUST%20be%20eddsa%2Drdfc%2D2022%20or%20eddsa%2Djcs%2D2022",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 103691,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "The proofValue property of the proof MUST be a detached EdDSA signature produced according to [RFC8032], encoded using the base-58-btc header and alphabet as described in the Multibase section of Controller Documents 1.0.",
          "link": "https://w3c.github.io/vc-di-eddsa/#:~:text=The%20proofValue%20property%20of%20the%20proof%20MUST%20be%20a%20detached%20EdDSA%20signature%20produced%20according%20to%20%5BRFC8032%5D%2C%20encoded%20using%20the%20base%2D58%2Dbtc%20header%20and%20alphabet%20as%20described%20in%20the%20Multibase%20section%20of%20Controller%20Documents%201.0",
          "cells": [
            {
              "type": "test",
              "title": "The proofValue property of the proof MUST be a detached EdDSA signature produced according to [RFC8032], encoded using the base-58-btc header and alphabet as described in the Multibase section of Controller Documents 1.0.",
              "body": "async function() {\n            this.test.link = 'https://w3c.github.io/vc-di-eddsa/#:~:text=The%20proofValue%20property%20of%20the%20proof%20MUST%20be%20a%20detached%20EdDSA%20signature%20produced%20according%20to%20%5BRFC8032%5D%2C%20encoded%20using%20the%20base%2D58%2Dbtc%20header%20and%20alphabet%20as%20described%20in%20the%20Multibase%20section%20of%20Controller%20Documents%201.0';\n            commonAssert();\n            for(const proof of eddsa2022Proofs) {\n              should.exist(proof.proofValue,\n                'Expected a proof value on the proof.');\n              const valueBytes = bs58Decode({id: proof.proofValue});\n              should.exist(valueBytes,\n                'Expected to have a decoded proofValue.');\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "parent": "LxT3ZgyvHQ3F9xD59Q3xH",
              "ctx": null,
              "_testId": "urn:uuid:6cd5079b-4246-4933-a9f0-a47b53f7d46e",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "The proofValue property of the proof MUST be a detached EdDSA signature produced according to [RFC8032], encoded using the base-58-btc header and alphabet as described in the Multibase section of Controller Documents 1.0."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#:~:text=The%20proofValue%20property%20of%20the%20proof%20MUST%20be%20a%20detached%20EdDSA%20signature%20produced%20according%20to%20%5BRFC8032%5D%2C%20encoded%20using%20the%20base%2D58%2Dbtc%20header%20and%20alphabet%20as%20described%20in%20the%20Multibase%20section%20of%20Controller%20Documents%201.0",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 101407,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The proofValue property of the proof MUST be a detached EdDSA signature produced according to [RFC8032], encoded using the base-58-btc header and alphabet as described in the Multibase section of Controller Documents 1.0.",
              "body": "async function() {\n            this.test.link = 'https://w3c.github.io/vc-di-eddsa/#:~:text=The%20proofValue%20property%20of%20the%20proof%20MUST%20be%20a%20detached%20EdDSA%20signature%20produced%20according%20to%20%5BRFC8032%5D%2C%20encoded%20using%20the%20base%2D58%2Dbtc%20header%20and%20alphabet%20as%20described%20in%20the%20Multibase%20section%20of%20Controller%20Documents%201.0';\n            commonAssert();\n            for(const proof of eddsa2022Proofs) {\n              should.exist(proof.proofValue,\n                'Expected a proof value on the proof.');\n              const valueBytes = bs58Decode({id: proof.proofValue});\n              should.exist(valueBytes,\n                'Expected to have a decoded proofValue.');\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "parent": "vXZRI7cZB-jCIqNcwXgJD",
              "ctx": null,
              "_testId": "urn:uuid:3fc76596-892d-4dca-95dc-26204e78ba7f",
              "cell": {
                "columnId": "Aviary Tech",
                "rowId": "The proofValue property of the proof MUST be a detached EdDSA signature produced according to [RFC8032], encoded using the base-58-btc header and alphabet as described in the Multibase section of Controller Documents 1.0."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#:~:text=The%20proofValue%20property%20of%20the%20proof%20MUST%20be%20a%20detached%20EdDSA%20signature%20produced%20according%20to%20%5BRFC8032%5D%2C%20encoded%20using%20the%20base%2D58%2Dbtc%20header%20and%20alphabet%20as%20described%20in%20the%20Multibase%20section%20of%20Controller%20Documents%201.0",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 101562,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The proofValue property of the proof MUST be a detached EdDSA signature produced according to [RFC8032], encoded using the base-58-btc header and alphabet as described in the Multibase section of Controller Documents 1.0.",
              "body": "async function() {\n            this.test.link = 'https://w3c.github.io/vc-di-eddsa/#:~:text=The%20proofValue%20property%20of%20the%20proof%20MUST%20be%20a%20detached%20EdDSA%20signature%20produced%20according%20to%20%5BRFC8032%5D%2C%20encoded%20using%20the%20base%2D58%2Dbtc%20header%20and%20alphabet%20as%20described%20in%20the%20Multibase%20section%20of%20Controller%20Documents%201.0';\n            commonAssert();\n            for(const proof of eddsa2022Proofs) {\n              should.exist(proof.proofValue,\n                'Expected a proof value on the proof.');\n              const valueBytes = bs58Decode({id: proof.proofValue});\n              should.exist(valueBytes,\n                'Expected to have a decoded proofValue.');\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "parent": "dG7TMbo3GfC4oKQjG8R6W",
              "ctx": null,
              "_testId": "urn:uuid:f98efe62-9a90-46e8-87eb-73d85fef74b0",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The proofValue property of the proof MUST be a detached EdDSA signature produced according to [RFC8032], encoded using the base-58-btc header and alphabet as described in the Multibase section of Controller Documents 1.0."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#:~:text=The%20proofValue%20property%20of%20the%20proof%20MUST%20be%20a%20detached%20EdDSA%20signature%20produced%20according%20to%20%5BRFC8032%5D%2C%20encoded%20using%20the%20base%2D58%2Dbtc%20header%20and%20alphabet%20as%20described%20in%20the%20Multibase%20section%20of%20Controller%20Documents%201.0",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 101720,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The proofValue property of the proof MUST be a detached EdDSA signature produced according to [RFC8032], encoded using the base-58-btc header and alphabet as described in the Multibase section of Controller Documents 1.0.",
              "body": "async function() {\n            this.test.link = 'https://w3c.github.io/vc-di-eddsa/#:~:text=The%20proofValue%20property%20of%20the%20proof%20MUST%20be%20a%20detached%20EdDSA%20signature%20produced%20according%20to%20%5BRFC8032%5D%2C%20encoded%20using%20the%20base%2D58%2Dbtc%20header%20and%20alphabet%20as%20described%20in%20the%20Multibase%20section%20of%20Controller%20Documents%201.0';\n            commonAssert();\n            for(const proof of eddsa2022Proofs) {\n              should.exist(proof.proofValue,\n                'Expected a proof value on the proof.');\n              const valueBytes = bs58Decode({id: proof.proofValue});\n              should.exist(valueBytes,\n                'Expected to have a decoded proofValue.');\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "parent": "pj_JcZMEFJRjbda9vN21O",
              "ctx": null,
              "_testId": "urn:uuid:a861f9cd-b9ff-45eb-8498-477f5e0c8568",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The proofValue property of the proof MUST be a detached EdDSA signature produced according to [RFC8032], encoded using the base-58-btc header and alphabet as described in the Multibase section of Controller Documents 1.0."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#:~:text=The%20proofValue%20property%20of%20the%20proof%20MUST%20be%20a%20detached%20EdDSA%20signature%20produced%20according%20to%20%5BRFC8032%5D%2C%20encoded%20using%20the%20base%2D58%2Dbtc%20header%20and%20alphabet%20as%20described%20in%20the%20Multibase%20section%20of%20Controller%20Documents%201.0",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 101751,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The proofValue property of the proof MUST be a detached EdDSA signature produced according to [RFC8032], encoded using the base-58-btc header and alphabet as described in the Multibase section of Controller Documents 1.0.",
              "body": "async function() {\n            this.test.link = 'https://w3c.github.io/vc-di-eddsa/#:~:text=The%20proofValue%20property%20of%20the%20proof%20MUST%20be%20a%20detached%20EdDSA%20signature%20produced%20according%20to%20%5BRFC8032%5D%2C%20encoded%20using%20the%20base%2D58%2Dbtc%20header%20and%20alphabet%20as%20described%20in%20the%20Multibase%20section%20of%20Controller%20Documents%201.0';\n            commonAssert();\n            for(const proof of eddsa2022Proofs) {\n              should.exist(proof.proofValue,\n                'Expected a proof value on the proof.');\n              const valueBytes = bs58Decode({id: proof.proofValue});\n              should.exist(valueBytes,\n                'Expected to have a decoded proofValue.');\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "parent": "w4Kd2QHDmhlohrFkpBF_R",
              "ctx": null,
              "_testId": "urn:uuid:994cfb8a-9ac3-4448-95e8-a01e9956cd8a",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "The proofValue property of the proof MUST be a detached EdDSA signature produced according to [RFC8032], encoded using the base-58-btc header and alphabet as described in the Multibase section of Controller Documents 1.0."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#:~:text=The%20proofValue%20property%20of%20the%20proof%20MUST%20be%20a%20detached%20EdDSA%20signature%20produced%20according%20to%20%5BRFC8032%5D%2C%20encoded%20using%20the%20base%2D58%2Dbtc%20header%20and%20alphabet%20as%20described%20in%20the%20Multibase%20section%20of%20Controller%20Documents%201.0",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 102267,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The proofValue property of the proof MUST be a detached EdDSA signature produced according to [RFC8032], encoded using the base-58-btc header and alphabet as described in the Multibase section of Controller Documents 1.0.",
              "body": "async function() {\n            this.test.link = 'https://w3c.github.io/vc-di-eddsa/#:~:text=The%20proofValue%20property%20of%20the%20proof%20MUST%20be%20a%20detached%20EdDSA%20signature%20produced%20according%20to%20%5BRFC8032%5D%2C%20encoded%20using%20the%20base%2D58%2Dbtc%20header%20and%20alphabet%20as%20described%20in%20the%20Multibase%20section%20of%20Controller%20Documents%201.0';\n            commonAssert();\n            for(const proof of eddsa2022Proofs) {\n              should.exist(proof.proofValue,\n                'Expected a proof value on the proof.');\n              const valueBytes = bs58Decode({id: proof.proofValue});\n              should.exist(valueBytes,\n                'Expected to have a decoded proofValue.');\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "parent": "NNjkmGYTtFI0NH2oLotTy",
              "ctx": null,
              "_testId": "urn:uuid:9ff648e4-08ae-4340-95e7-1b4814e05252",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The proofValue property of the proof MUST be a detached EdDSA signature produced according to [RFC8032], encoded using the base-58-btc header and alphabet as described in the Multibase section of Controller Documents 1.0."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#:~:text=The%20proofValue%20property%20of%20the%20proof%20MUST%20be%20a%20detached%20EdDSA%20signature%20produced%20according%20to%20%5BRFC8032%5D%2C%20encoded%20using%20the%20base%2D58%2Dbtc%20header%20and%20alphabet%20as%20described%20in%20the%20Multibase%20section%20of%20Controller%20Documents%201.0",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 102411,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The proofValue property of the proof MUST be a detached EdDSA signature produced according to [RFC8032], encoded using the base-58-btc header and alphabet as described in the Multibase section of Controller Documents 1.0.",
              "body": "async function() {\n            this.test.link = 'https://w3c.github.io/vc-di-eddsa/#:~:text=The%20proofValue%20property%20of%20the%20proof%20MUST%20be%20a%20detached%20EdDSA%20signature%20produced%20according%20to%20%5BRFC8032%5D%2C%20encoded%20using%20the%20base%2D58%2Dbtc%20header%20and%20alphabet%20as%20described%20in%20the%20Multibase%20section%20of%20Controller%20Documents%201.0';\n            commonAssert();\n            for(const proof of eddsa2022Proofs) {\n              should.exist(proof.proofValue,\n                'Expected a proof value on the proof.');\n              const valueBytes = bs58Decode({id: proof.proofValue});\n              should.exist(valueBytes,\n                'Expected to have a decoded proofValue.');\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "parent": "WZuHm5iX6G8T8hIwCSWiL",
              "ctx": null,
              "_testId": "urn:uuid:f1188c7f-a0df-4d44-ac51-772f027e0713",
              "cell": {
                "columnId": "Trential",
                "rowId": "The proofValue property of the proof MUST be a detached EdDSA signature produced according to [RFC8032], encoded using the base-58-btc header and alphabet as described in the Multibase section of Controller Documents 1.0."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#:~:text=The%20proofValue%20property%20of%20the%20proof%20MUST%20be%20a%20detached%20EdDSA%20signature%20produced%20according%20to%20%5BRFC8032%5D%2C%20encoded%20using%20the%20base%2D58%2Dbtc%20header%20and%20alphabet%20as%20described%20in%20the%20Multibase%20section%20of%20Controller%20Documents%201.0",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 103369,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The proofValue property of the proof MUST be a detached EdDSA signature produced according to [RFC8032], encoded using the base-58-btc header and alphabet as described in the Multibase section of Controller Documents 1.0.",
              "body": "async function() {\n            this.test.link = 'https://w3c.github.io/vc-di-eddsa/#:~:text=The%20proofValue%20property%20of%20the%20proof%20MUST%20be%20a%20detached%20EdDSA%20signature%20produced%20according%20to%20%5BRFC8032%5D%2C%20encoded%20using%20the%20base%2D58%2Dbtc%20header%20and%20alphabet%20as%20described%20in%20the%20Multibase%20section%20of%20Controller%20Documents%201.0';\n            commonAssert();\n            for(const proof of eddsa2022Proofs) {\n              should.exist(proof.proofValue,\n                'Expected a proof value on the proof.');\n              const valueBytes = bs58Decode({id: proof.proofValue});\n              should.exist(valueBytes,\n                'Expected to have a decoded proofValue.');\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "parent": "gq9wrHdeQagU1n6oNKcQF",
              "ctx": null,
              "_testId": "urn:uuid:cfa96cba-4b3b-483c-af2b-723dc09036d9",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "The proofValue property of the proof MUST be a detached EdDSA signature produced according to [RFC8032], encoded using the base-58-btc header and alphabet as described in the Multibase section of Controller Documents 1.0."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#:~:text=The%20proofValue%20property%20of%20the%20proof%20MUST%20be%20a%20detached%20EdDSA%20signature%20produced%20according%20to%20%5BRFC8032%5D%2C%20encoded%20using%20the%20base%2D58%2Dbtc%20header%20and%20alphabet%20as%20described%20in%20the%20Multibase%20section%20of%20Controller%20Documents%201.0",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 103541,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected issuer to have issued a credential.: expected undefined to exist",
                "showDiff": false,
                "stack": "AssertionError: Expected issuer to have issued a credential.: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at commonAssert (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/suites/data-model.js:140:20)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/suites/data-model.js:176:13)\n    at process.processImmediate (node:internal/timers:483:21)"
              }
            },
            {
              "type": "test",
              "title": "The proofValue property of the proof MUST be a detached EdDSA signature produced according to [RFC8032], encoded using the base-58-btc header and alphabet as described in the Multibase section of Controller Documents 1.0.",
              "body": "async function() {\n            this.test.link = 'https://w3c.github.io/vc-di-eddsa/#:~:text=The%20proofValue%20property%20of%20the%20proof%20MUST%20be%20a%20detached%20EdDSA%20signature%20produced%20according%20to%20%5BRFC8032%5D%2C%20encoded%20using%20the%20base%2D58%2Dbtc%20header%20and%20alphabet%20as%20described%20in%20the%20Multibase%20section%20of%20Controller%20Documents%201.0';\n            commonAssert();\n            for(const proof of eddsa2022Proofs) {\n              should.exist(proof.proofValue,\n                'Expected a proof value on the proof.');\n              const valueBytes = bs58Decode({id: proof.proofValue});\n              should.exist(valueBytes,\n                'Expected to have a decoded proofValue.');\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "parent": "9nUWoxZNS-mtR_7Z4FMPL",
              "ctx": null,
              "_testId": "urn:uuid:9c10502e-faee-41db-b7bc-8520c6f1b126",
              "cell": {
                "columnId": "bovine",
                "rowId": "The proofValue property of the proof MUST be a detached EdDSA signature produced according to [RFC8032], encoded using the base-58-btc header and alphabet as described in the Multibase section of Controller Documents 1.0."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#:~:text=The%20proofValue%20property%20of%20the%20proof%20MUST%20be%20a%20detached%20EdDSA%20signature%20produced%20according%20to%20%5BRFC8032%5D%2C%20encoded%20using%20the%20base%2D58%2Dbtc%20header%20and%20alphabet%20as%20described%20in%20the%20Multibase%20section%20of%20Controller%20Documents%201.0",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 103691,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        }
      ]
    },
    {
      "title": "eddsa-rdfc-2022 - Data Model - Verification Methods",
      "ctx": null,
      "suites": [
        {
          "title": "apicatalog.com",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The publicKeyMultibase value of the verification method MUST start with the base-58-btc prefix (z), as defined in the Multibase section of Controller Documents 1.0.",
              "body": "async function() {\n            this.test.link = 'https://w3c.github.io/vc-di-eddsa/#:~:text=The%20publicKeyMultibase%20value%20of%20the%20verification%20method%20MUST%20start%20with%20the%20base%2D58%2Dbtc%20prefix%20(z)%2C%20as%20defined%20in%20the%20Multibase%20section%20of%20Controller%20Documents%201.0.';\n            assertBefore();\n            verificationMethodDocuments.should.not.eql([],\n              'Expected at least one \"verificationMethodDocument\".');\n            for(const verificationMethodDocument of\n              verificationMethodDocuments) {\n              const multibase = 'z';\n              const {publicKeyMultibase} = verificationMethodDocument;\n              const isMultibaseEncoded =\n                  publicKeyMultibase.startsWith(multibase) &&\n                  shouldBeBs58(publicKeyMultibase);\n              isMultibaseEncoded.should.equal(\n                true,\n                'Expected \"publicKeyMultibase\" value of the verification ' +\n                  'method to be multibase base58-btc encoded value'\n              );\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "parent": "vo8B3aNg9_Q4WyApxPoeL",
              "ctx": null,
              "_testId": "urn:uuid:eb787733-eb58-46b4-b923-575bf8fc833b",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "The publicKeyMultibase value of the verification method MUST start with the base-58-btc prefix (z), as defined in the Multibase section of Controller Documents 1.0."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#:~:text=The%20publicKeyMultibase%20value%20of%20the%20verification%20method%20MUST%20start%20with%20the%20base%2D58%2Dbtc%20prefix%20(z)%2C%20as%20defined%20in%20the%20Multibase%20section%20of%20Controller%20Documents%201.0.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 104342,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Any other encoding MUST NOT be allowed.",
              "body": "async function() {\n            this.test.link = 'https://w3c.github.io/vc-di-eddsa/#:~:text=of%20Controller%20Documents%201.0.-,Any%20other%20encoding%20MUST%20NOT%20be%20allowed.,-Developers%20are%20advised%20to%20not';\n            assertBefore();\n            verificationMethodDocuments.should.not.eql([],\n              'Expected at least one \"verificationMethodDocument\".');\n            for(const verificationMethodDocument of\n              verificationMethodDocuments) {\n              const multibase = 'z';\n              const {publicKeyMultibase} = verificationMethodDocument;\n              const isMultibaseEncoded =\n                publicKeyMultibase.startsWith(multibase) &&\n                shouldBeBs58(publicKeyMultibase);\n              isMultibaseEncoded.should.equal(\n                true,\n                'Expected \"publicKeyMultibase\" value of the verification ' +\n                'method to be multibase base58-btc encoded value'\n              );\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "parent": "vo8B3aNg9_Q4WyApxPoeL",
              "ctx": null,
              "_testId": "urn:uuid:ee6fff4b-21c8-4bc5-be51-35870d02a970",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "Any other encoding MUST NOT be allowed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#:~:text=of%20Controller%20Documents%201.0.-,Any%20other%20encoding%20MUST%20NOT%20be%20allowed.,-Developers%20are%20advised%20to%20not",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 104342,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: setupRow in \"apicatalog.com\"",
              "body": "function setupRow() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "vo8B3aNg9_Q4WyApxPoeL",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "originalTitle": "\"before each\" hook: setupRow",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"apicatalog.com\"",
              "body": "async function() {\n            issuedVc = await createInitialVc({issuer, vc: validVc});\n            proofs = getProofs(issuedVc);\n            verificationMethodDocuments =\n              await getVerificationMethodDocuments(proofs);\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "vo8B3aNg9_Q4WyApxPoeL",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 103693,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 648,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "LhuBIMLNdk3uEkzQIyuml",
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
          "_testId": "urn:uuid:df311d85-181a-4dca-b145-bb1fe945b429"
        },
        {
          "title": "Aviary Tech",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The publicKeyMultibase value of the verification method MUST start with the base-58-btc prefix (z), as defined in the Multibase section of Controller Documents 1.0.",
              "body": "async function() {\n            this.test.link = 'https://w3c.github.io/vc-di-eddsa/#:~:text=The%20publicKeyMultibase%20value%20of%20the%20verification%20method%20MUST%20start%20with%20the%20base%2D58%2Dbtc%20prefix%20(z)%2C%20as%20defined%20in%20the%20Multibase%20section%20of%20Controller%20Documents%201.0.';\n            assertBefore();\n            verificationMethodDocuments.should.not.eql([],\n              'Expected at least one \"verificationMethodDocument\".');\n            for(const verificationMethodDocument of\n              verificationMethodDocuments) {\n              const multibase = 'z';\n              const {publicKeyMultibase} = verificationMethodDocument;\n              const isMultibaseEncoded =\n                  publicKeyMultibase.startsWith(multibase) &&\n                  shouldBeBs58(publicKeyMultibase);\n              isMultibaseEncoded.should.equal(\n                true,\n                'Expected \"publicKeyMultibase\" value of the verification ' +\n                  'method to be multibase base58-btc encoded value'\n              );\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "parent": "F87ZPvSuSC2jSgbgVKHrG",
              "ctx": null,
              "_testId": "urn:uuid:9bc6a86b-d806-4ea9-92da-942653810068",
              "cell": {
                "columnId": "Aviary Tech",
                "rowId": "The publicKeyMultibase value of the verification method MUST start with the base-58-btc prefix (z), as defined in the Multibase section of Controller Documents 1.0."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#:~:text=The%20publicKeyMultibase%20value%20of%20the%20verification%20method%20MUST%20start%20with%20the%20base%2D58%2Dbtc%20prefix%20(z)%2C%20as%20defined%20in%20the%20Multibase%20section%20of%20Controller%20Documents%201.0.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 104391,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Any other encoding MUST NOT be allowed.",
              "body": "async function() {\n            this.test.link = 'https://w3c.github.io/vc-di-eddsa/#:~:text=of%20Controller%20Documents%201.0.-,Any%20other%20encoding%20MUST%20NOT%20be%20allowed.,-Developers%20are%20advised%20to%20not';\n            assertBefore();\n            verificationMethodDocuments.should.not.eql([],\n              'Expected at least one \"verificationMethodDocument\".');\n            for(const verificationMethodDocument of\n              verificationMethodDocuments) {\n              const multibase = 'z';\n              const {publicKeyMultibase} = verificationMethodDocument;\n              const isMultibaseEncoded =\n                publicKeyMultibase.startsWith(multibase) &&\n                shouldBeBs58(publicKeyMultibase);\n              isMultibaseEncoded.should.equal(\n                true,\n                'Expected \"publicKeyMultibase\" value of the verification ' +\n                'method to be multibase base58-btc encoded value'\n              );\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "parent": "F87ZPvSuSC2jSgbgVKHrG",
              "ctx": null,
              "_testId": "urn:uuid:eda5d978-ae7f-4c12-9989-29984dc08386",
              "cell": {
                "columnId": "Aviary Tech",
                "rowId": "Any other encoding MUST NOT be allowed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#:~:text=of%20Controller%20Documents%201.0.-,Any%20other%20encoding%20MUST%20NOT%20be%20allowed.,-Developers%20are%20advised%20to%20not",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 104391,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: setupRow in \"Aviary Tech\"",
              "body": "function setupRow() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "F87ZPvSuSC2jSgbgVKHrG",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "originalTitle": "\"before each\" hook: setupRow",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Aviary Tech\"",
              "body": "async function() {\n            issuedVc = await createInitialVc({issuer, vc: validVc});\n            proofs = getProofs(issuedVc);\n            verificationMethodDocuments =\n              await getVerificationMethodDocuments(proofs);\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "F87ZPvSuSC2jSgbgVKHrG",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 104342,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 49,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "LhuBIMLNdk3uEkzQIyuml",
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
          "_testId": "urn:uuid:041fcb67-68c1-4c32-902b-4086298299cc"
        },
        {
          "title": "Digital Bazaar",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The publicKeyMultibase value of the verification method MUST start with the base-58-btc prefix (z), as defined in the Multibase section of Controller Documents 1.0.",
              "body": "async function() {\n            this.test.link = 'https://w3c.github.io/vc-di-eddsa/#:~:text=The%20publicKeyMultibase%20value%20of%20the%20verification%20method%20MUST%20start%20with%20the%20base%2D58%2Dbtc%20prefix%20(z)%2C%20as%20defined%20in%20the%20Multibase%20section%20of%20Controller%20Documents%201.0.';\n            assertBefore();\n            verificationMethodDocuments.should.not.eql([],\n              'Expected at least one \"verificationMethodDocument\".');\n            for(const verificationMethodDocument of\n              verificationMethodDocuments) {\n              const multibase = 'z';\n              const {publicKeyMultibase} = verificationMethodDocument;\n              const isMultibaseEncoded =\n                  publicKeyMultibase.startsWith(multibase) &&\n                  shouldBeBs58(publicKeyMultibase);\n              isMultibaseEncoded.should.equal(\n                true,\n                'Expected \"publicKeyMultibase\" value of the verification ' +\n                  'method to be multibase base58-btc encoded value'\n              );\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "parent": "SQQnatXYdEvIMvIkqFCg_",
              "ctx": null,
              "_testId": "urn:uuid:5c415cf5-533a-453f-885a-51f94b71a747",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The publicKeyMultibase value of the verification method MUST start with the base-58-btc prefix (z), as defined in the Multibase section of Controller Documents 1.0."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#:~:text=The%20publicKeyMultibase%20value%20of%20the%20verification%20method%20MUST%20start%20with%20the%20base%2D58%2Dbtc%20prefix%20(z)%2C%20as%20defined%20in%20the%20Multibase%20section%20of%20Controller%20Documents%201.0.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 104523,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Any other encoding MUST NOT be allowed.",
              "body": "async function() {\n            this.test.link = 'https://w3c.github.io/vc-di-eddsa/#:~:text=of%20Controller%20Documents%201.0.-,Any%20other%20encoding%20MUST%20NOT%20be%20allowed.,-Developers%20are%20advised%20to%20not';\n            assertBefore();\n            verificationMethodDocuments.should.not.eql([],\n              'Expected at least one \"verificationMethodDocument\".');\n            for(const verificationMethodDocument of\n              verificationMethodDocuments) {\n              const multibase = 'z';\n              const {publicKeyMultibase} = verificationMethodDocument;\n              const isMultibaseEncoded =\n                publicKeyMultibase.startsWith(multibase) &&\n                shouldBeBs58(publicKeyMultibase);\n              isMultibaseEncoded.should.equal(\n                true,\n                'Expected \"publicKeyMultibase\" value of the verification ' +\n                'method to be multibase base58-btc encoded value'\n              );\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "parent": "SQQnatXYdEvIMvIkqFCg_",
              "ctx": null,
              "_testId": "urn:uuid:ece76901-2df4-4a87-95b9-205c41b2c9e6",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "Any other encoding MUST NOT be allowed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#:~:text=of%20Controller%20Documents%201.0.-,Any%20other%20encoding%20MUST%20NOT%20be%20allowed.,-Developers%20are%20advised%20to%20not",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 104523,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: setupRow in \"Digital Bazaar\"",
              "body": "function setupRow() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "SQQnatXYdEvIMvIkqFCg_",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "originalTitle": "\"before each\" hook: setupRow",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Digital Bazaar\"",
              "body": "async function() {\n            issuedVc = await createInitialVc({issuer, vc: validVc});\n            proofs = getProofs(issuedVc);\n            verificationMethodDocuments =\n              await getVerificationMethodDocuments(proofs);\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "SQQnatXYdEvIMvIkqFCg_",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 104392,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 131,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "LhuBIMLNdk3uEkzQIyuml",
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
          "_testId": "urn:uuid:0ee9774f-d310-495a-b928-fe1036cff56d"
        },
        {
          "title": "Grotto Networking",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The publicKeyMultibase value of the verification method MUST start with the base-58-btc prefix (z), as defined in the Multibase section of Controller Documents 1.0.",
              "body": "async function() {\n            this.test.link = 'https://w3c.github.io/vc-di-eddsa/#:~:text=The%20publicKeyMultibase%20value%20of%20the%20verification%20method%20MUST%20start%20with%20the%20base%2D58%2Dbtc%20prefix%20(z)%2C%20as%20defined%20in%20the%20Multibase%20section%20of%20Controller%20Documents%201.0.';\n            assertBefore();\n            verificationMethodDocuments.should.not.eql([],\n              'Expected at least one \"verificationMethodDocument\".');\n            for(const verificationMethodDocument of\n              verificationMethodDocuments) {\n              const multibase = 'z';\n              const {publicKeyMultibase} = verificationMethodDocument;\n              const isMultibaseEncoded =\n                  publicKeyMultibase.startsWith(multibase) &&\n                  shouldBeBs58(publicKeyMultibase);\n              isMultibaseEncoded.should.equal(\n                true,\n                'Expected \"publicKeyMultibase\" value of the verification ' +\n                  'method to be multibase base58-btc encoded value'\n              );\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "parent": "1DBO8Ns1tOQspx9pptRGU",
              "ctx": null,
              "_testId": "urn:uuid:df59c10f-c9ad-48b7-a55e-3c4477f548eb",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The publicKeyMultibase value of the verification method MUST start with the base-58-btc prefix (z), as defined in the Multibase section of Controller Documents 1.0."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#:~:text=The%20publicKeyMultibase%20value%20of%20the%20verification%20method%20MUST%20start%20with%20the%20base%2D58%2Dbtc%20prefix%20(z)%2C%20as%20defined%20in%20the%20Multibase%20section%20of%20Controller%20Documents%201.0.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 104551,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Any other encoding MUST NOT be allowed.",
              "body": "async function() {\n            this.test.link = 'https://w3c.github.io/vc-di-eddsa/#:~:text=of%20Controller%20Documents%201.0.-,Any%20other%20encoding%20MUST%20NOT%20be%20allowed.,-Developers%20are%20advised%20to%20not';\n            assertBefore();\n            verificationMethodDocuments.should.not.eql([],\n              'Expected at least one \"verificationMethodDocument\".');\n            for(const verificationMethodDocument of\n              verificationMethodDocuments) {\n              const multibase = 'z';\n              const {publicKeyMultibase} = verificationMethodDocument;\n              const isMultibaseEncoded =\n                publicKeyMultibase.startsWith(multibase) &&\n                shouldBeBs58(publicKeyMultibase);\n              isMultibaseEncoded.should.equal(\n                true,\n                'Expected \"publicKeyMultibase\" value of the verification ' +\n                'method to be multibase base58-btc encoded value'\n              );\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "parent": "1DBO8Ns1tOQspx9pptRGU",
              "ctx": null,
              "_testId": "urn:uuid:d9996dfb-4e4c-428f-b903-af22606bf2e7",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "Any other encoding MUST NOT be allowed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#:~:text=of%20Controller%20Documents%201.0.-,Any%20other%20encoding%20MUST%20NOT%20be%20allowed.,-Developers%20are%20advised%20to%20not",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 104552,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: setupRow in \"Grotto Networking\"",
              "body": "function setupRow() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "1DBO8Ns1tOQspx9pptRGU",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "originalTitle": "\"before each\" hook: setupRow",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Grotto Networking\"",
              "body": "async function() {\n            issuedVc = await createInitialVc({issuer, vc: validVc});\n            proofs = getProofs(issuedVc);\n            verificationMethodDocuments =\n              await getVerificationMethodDocuments(proofs);\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "1DBO8Ns1tOQspx9pptRGU",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 104523,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 28,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "LhuBIMLNdk3uEkzQIyuml",
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
          "_testId": "urn:uuid:fdd10e6d-2bcc-43cb-9795-1739f2708dcd"
        },
        {
          "title": "Procivis One Core",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The publicKeyMultibase value of the verification method MUST start with the base-58-btc prefix (z), as defined in the Multibase section of Controller Documents 1.0.",
              "body": "async function() {\n            this.test.link = 'https://w3c.github.io/vc-di-eddsa/#:~:text=The%20publicKeyMultibase%20value%20of%20the%20verification%20method%20MUST%20start%20with%20the%20base%2D58%2Dbtc%20prefix%20(z)%2C%20as%20defined%20in%20the%20Multibase%20section%20of%20Controller%20Documents%201.0.';\n            assertBefore();\n            verificationMethodDocuments.should.not.eql([],\n              'Expected at least one \"verificationMethodDocument\".');\n            for(const verificationMethodDocument of\n              verificationMethodDocuments) {\n              const multibase = 'z';\n              const {publicKeyMultibase} = verificationMethodDocument;\n              const isMultibaseEncoded =\n                  publicKeyMultibase.startsWith(multibase) &&\n                  shouldBeBs58(publicKeyMultibase);\n              isMultibaseEncoded.should.equal(\n                true,\n                'Expected \"publicKeyMultibase\" value of the verification ' +\n                  'method to be multibase base58-btc encoded value'\n              );\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "parent": "POHPuY4fz8qOTwHsUQ6mq",
              "ctx": null,
              "_testId": "urn:uuid:9df29e45-a75b-44fb-8730-ef1012e351f5",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "The publicKeyMultibase value of the verification method MUST start with the base-58-btc prefix (z), as defined in the Multibase section of Controller Documents 1.0."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#:~:text=The%20publicKeyMultibase%20value%20of%20the%20verification%20method%20MUST%20start%20with%20the%20base%2D58%2Dbtc%20prefix%20(z)%2C%20as%20defined%20in%20the%20Multibase%20section%20of%20Controller%20Documents%201.0.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 104746,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Any other encoding MUST NOT be allowed.",
              "body": "async function() {\n            this.test.link = 'https://w3c.github.io/vc-di-eddsa/#:~:text=of%20Controller%20Documents%201.0.-,Any%20other%20encoding%20MUST%20NOT%20be%20allowed.,-Developers%20are%20advised%20to%20not';\n            assertBefore();\n            verificationMethodDocuments.should.not.eql([],\n              'Expected at least one \"verificationMethodDocument\".');\n            for(const verificationMethodDocument of\n              verificationMethodDocuments) {\n              const multibase = 'z';\n              const {publicKeyMultibase} = verificationMethodDocument;\n              const isMultibaseEncoded =\n                publicKeyMultibase.startsWith(multibase) &&\n                shouldBeBs58(publicKeyMultibase);\n              isMultibaseEncoded.should.equal(\n                true,\n                'Expected \"publicKeyMultibase\" value of the verification ' +\n                'method to be multibase base58-btc encoded value'\n              );\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "parent": "POHPuY4fz8qOTwHsUQ6mq",
              "ctx": null,
              "_testId": "urn:uuid:cf3fb1a7-ac2e-4921-8563-31471a5df888",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "Any other encoding MUST NOT be allowed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#:~:text=of%20Controller%20Documents%201.0.-,Any%20other%20encoding%20MUST%20NOT%20be%20allowed.,-Developers%20are%20advised%20to%20not",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 104746,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: setupRow in \"Procivis One Core\"",
              "body": "function setupRow() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "POHPuY4fz8qOTwHsUQ6mq",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "originalTitle": "\"before each\" hook: setupRow",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Procivis One Core\"",
              "body": "async function() {\n            issuedVc = await createInitialVc({issuer, vc: validVc});\n            proofs = getProofs(issuedVc);\n            verificationMethodDocuments =\n              await getVerificationMethodDocuments(proofs);\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "POHPuY4fz8qOTwHsUQ6mq",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 104552,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 194,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "LhuBIMLNdk3uEkzQIyuml",
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
          "_testId": "urn:uuid:b5315acc-6f59-47d3-b335-ce791e0c6cb3"
        },
        {
          "title": "SpruceID",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The publicKeyMultibase value of the verification method MUST start with the base-58-btc prefix (z), as defined in the Multibase section of Controller Documents 1.0.",
              "body": "async function() {\n            this.test.link = 'https://w3c.github.io/vc-di-eddsa/#:~:text=The%20publicKeyMultibase%20value%20of%20the%20verification%20method%20MUST%20start%20with%20the%20base%2D58%2Dbtc%20prefix%20(z)%2C%20as%20defined%20in%20the%20Multibase%20section%20of%20Controller%20Documents%201.0.';\n            assertBefore();\n            verificationMethodDocuments.should.not.eql([],\n              'Expected at least one \"verificationMethodDocument\".');\n            for(const verificationMethodDocument of\n              verificationMethodDocuments) {\n              const multibase = 'z';\n              const {publicKeyMultibase} = verificationMethodDocument;\n              const isMultibaseEncoded =\n                  publicKeyMultibase.startsWith(multibase) &&\n                  shouldBeBs58(publicKeyMultibase);\n              isMultibaseEncoded.should.equal(\n                true,\n                'Expected \"publicKeyMultibase\" value of the verification ' +\n                  'method to be multibase base58-btc encoded value'\n              );\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "parent": "2xtCk0BCyXfRQTrJ7BuhV",
              "ctx": null,
              "_testId": "urn:uuid:121c1dca-365a-45d1-b42f-9ff98e46979f",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The publicKeyMultibase value of the verification method MUST start with the base-58-btc prefix (z), as defined in the Multibase section of Controller Documents 1.0."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#:~:text=The%20publicKeyMultibase%20value%20of%20the%20verification%20method%20MUST%20start%20with%20the%20base%2D58%2Dbtc%20prefix%20(z)%2C%20as%20defined%20in%20the%20Multibase%20section%20of%20Controller%20Documents%201.0.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 104845,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Any other encoding MUST NOT be allowed.",
              "body": "async function() {\n            this.test.link = 'https://w3c.github.io/vc-di-eddsa/#:~:text=of%20Controller%20Documents%201.0.-,Any%20other%20encoding%20MUST%20NOT%20be%20allowed.,-Developers%20are%20advised%20to%20not';\n            assertBefore();\n            verificationMethodDocuments.should.not.eql([],\n              'Expected at least one \"verificationMethodDocument\".');\n            for(const verificationMethodDocument of\n              verificationMethodDocuments) {\n              const multibase = 'z';\n              const {publicKeyMultibase} = verificationMethodDocument;\n              const isMultibaseEncoded =\n                publicKeyMultibase.startsWith(multibase) &&\n                shouldBeBs58(publicKeyMultibase);\n              isMultibaseEncoded.should.equal(\n                true,\n                'Expected \"publicKeyMultibase\" value of the verification ' +\n                'method to be multibase base58-btc encoded value'\n              );\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "parent": "2xtCk0BCyXfRQTrJ7BuhV",
              "ctx": null,
              "_testId": "urn:uuid:a0f3830d-cb4b-407f-a5f7-57cb99aa2308",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "Any other encoding MUST NOT be allowed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#:~:text=of%20Controller%20Documents%201.0.-,Any%20other%20encoding%20MUST%20NOT%20be%20allowed.,-Developers%20are%20advised%20to%20not",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 104846,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: setupRow in \"SpruceID\"",
              "body": "function setupRow() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "2xtCk0BCyXfRQTrJ7BuhV",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "originalTitle": "\"before each\" hook: setupRow",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"SpruceID\"",
              "body": "async function() {\n            issuedVc = await createInitialVc({issuer, vc: validVc});\n            proofs = getProofs(issuedVc);\n            verificationMethodDocuments =\n              await getVerificationMethodDocuments(proofs);\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "2xtCk0BCyXfRQTrJ7BuhV",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 104746,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 99,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "LhuBIMLNdk3uEkzQIyuml",
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
          "_testId": "urn:uuid:fe60ce1c-7f5b-4f51-a3f1-e46feb84390d"
        },
        {
          "title": "Trential",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The publicKeyMultibase value of the verification method MUST start with the base-58-btc prefix (z), as defined in the Multibase section of Controller Documents 1.0.",
              "body": "async function() {\n            this.test.link = 'https://w3c.github.io/vc-di-eddsa/#:~:text=The%20publicKeyMultibase%20value%20of%20the%20verification%20method%20MUST%20start%20with%20the%20base%2D58%2Dbtc%20prefix%20(z)%2C%20as%20defined%20in%20the%20Multibase%20section%20of%20Controller%20Documents%201.0.';\n            assertBefore();\n            verificationMethodDocuments.should.not.eql([],\n              'Expected at least one \"verificationMethodDocument\".');\n            for(const verificationMethodDocument of\n              verificationMethodDocuments) {\n              const multibase = 'z';\n              const {publicKeyMultibase} = verificationMethodDocument;\n              const isMultibaseEncoded =\n                  publicKeyMultibase.startsWith(multibase) &&\n                  shouldBeBs58(publicKeyMultibase);\n              isMultibaseEncoded.should.equal(\n                true,\n                'Expected \"publicKeyMultibase\" value of the verification ' +\n                  'method to be multibase base58-btc encoded value'\n              );\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "parent": "Pwd7JzGDEXAP4CIkUDXBO",
              "ctx": null,
              "_testId": "urn:uuid:5aa4084e-4ccd-45a6-b2e7-118e88eedde1",
              "cell": {
                "columnId": "Trential",
                "rowId": "The publicKeyMultibase value of the verification method MUST start with the base-58-btc prefix (z), as defined in the Multibase section of Controller Documents 1.0."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#:~:text=The%20publicKeyMultibase%20value%20of%20the%20verification%20method%20MUST%20start%20with%20the%20base%2D58%2Dbtc%20prefix%20(z)%2C%20as%20defined%20in%20the%20Multibase%20section%20of%20Controller%20Documents%201.0.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 105826,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Any other encoding MUST NOT be allowed.",
              "body": "async function() {\n            this.test.link = 'https://w3c.github.io/vc-di-eddsa/#:~:text=of%20Controller%20Documents%201.0.-,Any%20other%20encoding%20MUST%20NOT%20be%20allowed.,-Developers%20are%20advised%20to%20not';\n            assertBefore();\n            verificationMethodDocuments.should.not.eql([],\n              'Expected at least one \"verificationMethodDocument\".');\n            for(const verificationMethodDocument of\n              verificationMethodDocuments) {\n              const multibase = 'z';\n              const {publicKeyMultibase} = verificationMethodDocument;\n              const isMultibaseEncoded =\n                publicKeyMultibase.startsWith(multibase) &&\n                shouldBeBs58(publicKeyMultibase);\n              isMultibaseEncoded.should.equal(\n                true,\n                'Expected \"publicKeyMultibase\" value of the verification ' +\n                'method to be multibase base58-btc encoded value'\n              );\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "parent": "Pwd7JzGDEXAP4CIkUDXBO",
              "ctx": null,
              "_testId": "urn:uuid:506ff3e3-ef42-4699-8daa-5880ab5f50cb",
              "cell": {
                "columnId": "Trential",
                "rowId": "Any other encoding MUST NOT be allowed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#:~:text=of%20Controller%20Documents%201.0.-,Any%20other%20encoding%20MUST%20NOT%20be%20allowed.,-Developers%20are%20advised%20to%20not",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 105826,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: setupRow in \"Trential\"",
              "body": "function setupRow() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "Pwd7JzGDEXAP4CIkUDXBO",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "originalTitle": "\"before each\" hook: setupRow",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Trential\"",
              "body": "async function() {\n            issuedVc = await createInitialVc({issuer, vc: validVc});\n            proofs = getProofs(issuedVc);\n            verificationMethodDocuments =\n              await getVerificationMethodDocuments(proofs);\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "Pwd7JzGDEXAP4CIkUDXBO",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 104846,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 979,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "LhuBIMLNdk3uEkzQIyuml",
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
          "_testId": "urn:uuid:2e86aabb-91be-4ff8-ac18-6594bd7705a2"
        },
        {
          "title": "Trinsic",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The publicKeyMultibase value of the verification method MUST start with the base-58-btc prefix (z), as defined in the Multibase section of Controller Documents 1.0.",
              "body": "async function() {\n            this.test.link = 'https://w3c.github.io/vc-di-eddsa/#:~:text=The%20publicKeyMultibase%20value%20of%20the%20verification%20method%20MUST%20start%20with%20the%20base%2D58%2Dbtc%20prefix%20(z)%2C%20as%20defined%20in%20the%20Multibase%20section%20of%20Controller%20Documents%201.0.';\n            assertBefore();\n            verificationMethodDocuments.should.not.eql([],\n              'Expected at least one \"verificationMethodDocument\".');\n            for(const verificationMethodDocument of\n              verificationMethodDocuments) {\n              const multibase = 'z';\n              const {publicKeyMultibase} = verificationMethodDocument;\n              const isMultibaseEncoded =\n                  publicKeyMultibase.startsWith(multibase) &&\n                  shouldBeBs58(publicKeyMultibase);\n              isMultibaseEncoded.should.equal(\n                true,\n                'Expected \"publicKeyMultibase\" value of the verification ' +\n                  'method to be multibase base58-btc encoded value'\n              );\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "parent": "tkF2crwKUUabsaeLwYiU6",
              "ctx": null,
              "_testId": "urn:uuid:dfbee4d5-cc73-48da-8d84-91bacfe79504",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "The publicKeyMultibase value of the verification method MUST start with the base-58-btc prefix (z), as defined in the Multibase section of Controller Documents 1.0."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#:~:text=The%20publicKeyMultibase%20value%20of%20the%20verification%20method%20MUST%20start%20with%20the%20base%2D58%2Dbtc%20prefix%20(z)%2C%20as%20defined%20in%20the%20Multibase%20section%20of%20Controller%20Documents%201.0.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 105949,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Issuer Trinsic failed to issue VC: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Issuer Trinsic failed to issue VC: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at assertBefore (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/suites/data-model.js:42:20)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/suites/data-model.js:56:13)\n    at process.processImmediate (node:internal/timers:483:21)"
              }
            },
            {
              "type": "test",
              "title": "Any other encoding MUST NOT be allowed.",
              "body": "async function() {\n            this.test.link = 'https://w3c.github.io/vc-di-eddsa/#:~:text=of%20Controller%20Documents%201.0.-,Any%20other%20encoding%20MUST%20NOT%20be%20allowed.,-Developers%20are%20advised%20to%20not';\n            assertBefore();\n            verificationMethodDocuments.should.not.eql([],\n              'Expected at least one \"verificationMethodDocument\".');\n            for(const verificationMethodDocument of\n              verificationMethodDocuments) {\n              const multibase = 'z';\n              const {publicKeyMultibase} = verificationMethodDocument;\n              const isMultibaseEncoded =\n                publicKeyMultibase.startsWith(multibase) &&\n                shouldBeBs58(publicKeyMultibase);\n              isMultibaseEncoded.should.equal(\n                true,\n                'Expected \"publicKeyMultibase\" value of the verification ' +\n                'method to be multibase base58-btc encoded value'\n              );\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "parent": "tkF2crwKUUabsaeLwYiU6",
              "ctx": null,
              "_testId": "urn:uuid:200ccec0-be40-4ce4-a745-aca6ab5c2972",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "Any other encoding MUST NOT be allowed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#:~:text=of%20Controller%20Documents%201.0.-,Any%20other%20encoding%20MUST%20NOT%20be%20allowed.,-Developers%20are%20advised%20to%20not",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 105949,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Issuer Trinsic failed to issue VC: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Issuer Trinsic failed to issue VC: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at assertBefore (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/suites/data-model.js:42:20)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/suites/data-model.js:75:13)\n    at process.processImmediate (node:internal/timers:483:21)"
              }
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: setupRow in \"Trinsic\"",
              "body": "function setupRow() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "tkF2crwKUUabsaeLwYiU6",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "originalTitle": "\"before each\" hook: setupRow",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Trinsic\"",
              "body": "async function() {\n            issuedVc = await createInitialVc({issuer, vc: validVc});\n            proofs = getProofs(issuedVc);\n            verificationMethodDocuments =\n              await getVerificationMethodDocuments(proofs);\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "tkF2crwKUUabsaeLwYiU6",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 105826,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 122,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "LhuBIMLNdk3uEkzQIyuml",
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
          "_testId": "urn:uuid:e58729bb-7ab1-4586-bc4a-64b144009c36"
        },
        {
          "title": "bovine",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The publicKeyMultibase value of the verification method MUST start with the base-58-btc prefix (z), as defined in the Multibase section of Controller Documents 1.0.",
              "body": "async function() {\n            this.test.link = 'https://w3c.github.io/vc-di-eddsa/#:~:text=The%20publicKeyMultibase%20value%20of%20the%20verification%20method%20MUST%20start%20with%20the%20base%2D58%2Dbtc%20prefix%20(z)%2C%20as%20defined%20in%20the%20Multibase%20section%20of%20Controller%20Documents%201.0.';\n            assertBefore();\n            verificationMethodDocuments.should.not.eql([],\n              'Expected at least one \"verificationMethodDocument\".');\n            for(const verificationMethodDocument of\n              verificationMethodDocuments) {\n              const multibase = 'z';\n              const {publicKeyMultibase} = verificationMethodDocument;\n              const isMultibaseEncoded =\n                  publicKeyMultibase.startsWith(multibase) &&\n                  shouldBeBs58(publicKeyMultibase);\n              isMultibaseEncoded.should.equal(\n                true,\n                'Expected \"publicKeyMultibase\" value of the verification ' +\n                  'method to be multibase base58-btc encoded value'\n              );\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "parent": "MjDSfFGHVENzOaFraVSY2",
              "ctx": null,
              "_testId": "urn:uuid:4f0faa10-8e51-49c8-8972-629b02f1d357",
              "cell": {
                "columnId": "bovine",
                "rowId": "The publicKeyMultibase value of the verification method MUST start with the base-58-btc prefix (z), as defined in the Multibase section of Controller Documents 1.0."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#:~:text=The%20publicKeyMultibase%20value%20of%20the%20verification%20method%20MUST%20start%20with%20the%20base%2D58%2Dbtc%20prefix%20(z)%2C%20as%20defined%20in%20the%20Multibase%20section%20of%20Controller%20Documents%201.0.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 106107,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Any other encoding MUST NOT be allowed.",
              "body": "async function() {\n            this.test.link = 'https://w3c.github.io/vc-di-eddsa/#:~:text=of%20Controller%20Documents%201.0.-,Any%20other%20encoding%20MUST%20NOT%20be%20allowed.,-Developers%20are%20advised%20to%20not';\n            assertBefore();\n            verificationMethodDocuments.should.not.eql([],\n              'Expected at least one \"verificationMethodDocument\".');\n            for(const verificationMethodDocument of\n              verificationMethodDocuments) {\n              const multibase = 'z';\n              const {publicKeyMultibase} = verificationMethodDocument;\n              const isMultibaseEncoded =\n                publicKeyMultibase.startsWith(multibase) &&\n                shouldBeBs58(publicKeyMultibase);\n              isMultibaseEncoded.should.equal(\n                true,\n                'Expected \"publicKeyMultibase\" value of the verification ' +\n                'method to be multibase base58-btc encoded value'\n              );\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "parent": "MjDSfFGHVENzOaFraVSY2",
              "ctx": null,
              "_testId": "urn:uuid:57c995e2-264e-4175-8420-bf1b99423561",
              "cell": {
                "columnId": "bovine",
                "rowId": "Any other encoding MUST NOT be allowed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#:~:text=of%20Controller%20Documents%201.0.-,Any%20other%20encoding%20MUST%20NOT%20be%20allowed.,-Developers%20are%20advised%20to%20not",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 106107,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: setupRow in \"bovine\"",
              "body": "function setupRow() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "MjDSfFGHVENzOaFraVSY2",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "originalTitle": "\"before each\" hook: setupRow",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"bovine\"",
              "body": "async function() {\n            issuedVc = await createInitialVc({issuer, vc: validVc});\n            proofs = getProofs(issuedVc);\n            verificationMethodDocuments =\n              await getVerificationMethodDocuments(proofs);\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "MjDSfFGHVENzOaFraVSY2",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 105950,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 155,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "LhuBIMLNdk3uEkzQIyuml",
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
          "_testId": "urn:uuid:30d4f03f-fdea-489d-a9a3-8c9473cbe27b"
        }
      ],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [
        {
          "title": "\"before all\" hook in \"eddsa-rdfc-2022 - Data Model - Verification Methods\"",
          "body": "async function() {\n        const credentials = await generateTestData();\n        validVc = credentials.clone('validVc');\n      }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "LhuBIMLNdk3uEkzQIyuml",
          "ctx": null,
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 103693,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 1,
          "_error": null
        }
      ],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "Ika60aoT9ncTXtTubybzs",
      "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Implementer",
      "_testId": "urn:uuid:3ca4725f-41ed-45d9-92fc-bc7b245cde69",
      "columns": [
        "apicatalog.com",
        "Aviary Tech",
        "Digital Bazaar",
        "Grotto Networking",
        "Procivis One Core",
        "SpruceID",
        "Trential",
        "Trinsic",
        "bovine"
      ],
      "rows": [
        {
          "id": "The publicKeyMultibase value of the verification method MUST start with the base-58-btc prefix (z), as defined in the Multibase section of Controller Documents 1.0.",
          "link": "https://w3c.github.io/vc-di-eddsa/#:~:text=The%20publicKeyMultibase%20value%20of%20the%20verification%20method%20MUST%20start%20with%20the%20base%2D58%2Dbtc%20prefix%20(z)%2C%20as%20defined%20in%20the%20Multibase%20section%20of%20Controller%20Documents%201.0.",
          "cells": [
            {
              "type": "test",
              "title": "The publicKeyMultibase value of the verification method MUST start with the base-58-btc prefix (z), as defined in the Multibase section of Controller Documents 1.0.",
              "body": "async function() {\n            this.test.link = 'https://w3c.github.io/vc-di-eddsa/#:~:text=The%20publicKeyMultibase%20value%20of%20the%20verification%20method%20MUST%20start%20with%20the%20base%2D58%2Dbtc%20prefix%20(z)%2C%20as%20defined%20in%20the%20Multibase%20section%20of%20Controller%20Documents%201.0.';\n            assertBefore();\n            verificationMethodDocuments.should.not.eql([],\n              'Expected at least one \"verificationMethodDocument\".');\n            for(const verificationMethodDocument of\n              verificationMethodDocuments) {\n              const multibase = 'z';\n              const {publicKeyMultibase} = verificationMethodDocument;\n              const isMultibaseEncoded =\n                  publicKeyMultibase.startsWith(multibase) &&\n                  shouldBeBs58(publicKeyMultibase);\n              isMultibaseEncoded.should.equal(\n                true,\n                'Expected \"publicKeyMultibase\" value of the verification ' +\n                  'method to be multibase base58-btc encoded value'\n              );\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "parent": "vo8B3aNg9_Q4WyApxPoeL",
              "ctx": null,
              "_testId": "urn:uuid:eb787733-eb58-46b4-b923-575bf8fc833b",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "The publicKeyMultibase value of the verification method MUST start with the base-58-btc prefix (z), as defined in the Multibase section of Controller Documents 1.0."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#:~:text=The%20publicKeyMultibase%20value%20of%20the%20verification%20method%20MUST%20start%20with%20the%20base%2D58%2Dbtc%20prefix%20(z)%2C%20as%20defined%20in%20the%20Multibase%20section%20of%20Controller%20Documents%201.0.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 104342,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The publicKeyMultibase value of the verification method MUST start with the base-58-btc prefix (z), as defined in the Multibase section of Controller Documents 1.0.",
              "body": "async function() {\n            this.test.link = 'https://w3c.github.io/vc-di-eddsa/#:~:text=The%20publicKeyMultibase%20value%20of%20the%20verification%20method%20MUST%20start%20with%20the%20base%2D58%2Dbtc%20prefix%20(z)%2C%20as%20defined%20in%20the%20Multibase%20section%20of%20Controller%20Documents%201.0.';\n            assertBefore();\n            verificationMethodDocuments.should.not.eql([],\n              'Expected at least one \"verificationMethodDocument\".');\n            for(const verificationMethodDocument of\n              verificationMethodDocuments) {\n              const multibase = 'z';\n              const {publicKeyMultibase} = verificationMethodDocument;\n              const isMultibaseEncoded =\n                  publicKeyMultibase.startsWith(multibase) &&\n                  shouldBeBs58(publicKeyMultibase);\n              isMultibaseEncoded.should.equal(\n                true,\n                'Expected \"publicKeyMultibase\" value of the verification ' +\n                  'method to be multibase base58-btc encoded value'\n              );\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "parent": "F87ZPvSuSC2jSgbgVKHrG",
              "ctx": null,
              "_testId": "urn:uuid:9bc6a86b-d806-4ea9-92da-942653810068",
              "cell": {
                "columnId": "Aviary Tech",
                "rowId": "The publicKeyMultibase value of the verification method MUST start with the base-58-btc prefix (z), as defined in the Multibase section of Controller Documents 1.0."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#:~:text=The%20publicKeyMultibase%20value%20of%20the%20verification%20method%20MUST%20start%20with%20the%20base%2D58%2Dbtc%20prefix%20(z)%2C%20as%20defined%20in%20the%20Multibase%20section%20of%20Controller%20Documents%201.0.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 104391,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The publicKeyMultibase value of the verification method MUST start with the base-58-btc prefix (z), as defined in the Multibase section of Controller Documents 1.0.",
              "body": "async function() {\n            this.test.link = 'https://w3c.github.io/vc-di-eddsa/#:~:text=The%20publicKeyMultibase%20value%20of%20the%20verification%20method%20MUST%20start%20with%20the%20base%2D58%2Dbtc%20prefix%20(z)%2C%20as%20defined%20in%20the%20Multibase%20section%20of%20Controller%20Documents%201.0.';\n            assertBefore();\n            verificationMethodDocuments.should.not.eql([],\n              'Expected at least one \"verificationMethodDocument\".');\n            for(const verificationMethodDocument of\n              verificationMethodDocuments) {\n              const multibase = 'z';\n              const {publicKeyMultibase} = verificationMethodDocument;\n              const isMultibaseEncoded =\n                  publicKeyMultibase.startsWith(multibase) &&\n                  shouldBeBs58(publicKeyMultibase);\n              isMultibaseEncoded.should.equal(\n                true,\n                'Expected \"publicKeyMultibase\" value of the verification ' +\n                  'method to be multibase base58-btc encoded value'\n              );\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "parent": "SQQnatXYdEvIMvIkqFCg_",
              "ctx": null,
              "_testId": "urn:uuid:5c415cf5-533a-453f-885a-51f94b71a747",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The publicKeyMultibase value of the verification method MUST start with the base-58-btc prefix (z), as defined in the Multibase section of Controller Documents 1.0."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#:~:text=The%20publicKeyMultibase%20value%20of%20the%20verification%20method%20MUST%20start%20with%20the%20base%2D58%2Dbtc%20prefix%20(z)%2C%20as%20defined%20in%20the%20Multibase%20section%20of%20Controller%20Documents%201.0.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 104523,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The publicKeyMultibase value of the verification method MUST start with the base-58-btc prefix (z), as defined in the Multibase section of Controller Documents 1.0.",
              "body": "async function() {\n            this.test.link = 'https://w3c.github.io/vc-di-eddsa/#:~:text=The%20publicKeyMultibase%20value%20of%20the%20verification%20method%20MUST%20start%20with%20the%20base%2D58%2Dbtc%20prefix%20(z)%2C%20as%20defined%20in%20the%20Multibase%20section%20of%20Controller%20Documents%201.0.';\n            assertBefore();\n            verificationMethodDocuments.should.not.eql([],\n              'Expected at least one \"verificationMethodDocument\".');\n            for(const verificationMethodDocument of\n              verificationMethodDocuments) {\n              const multibase = 'z';\n              const {publicKeyMultibase} = verificationMethodDocument;\n              const isMultibaseEncoded =\n                  publicKeyMultibase.startsWith(multibase) &&\n                  shouldBeBs58(publicKeyMultibase);\n              isMultibaseEncoded.should.equal(\n                true,\n                'Expected \"publicKeyMultibase\" value of the verification ' +\n                  'method to be multibase base58-btc encoded value'\n              );\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "parent": "1DBO8Ns1tOQspx9pptRGU",
              "ctx": null,
              "_testId": "urn:uuid:df59c10f-c9ad-48b7-a55e-3c4477f548eb",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The publicKeyMultibase value of the verification method MUST start with the base-58-btc prefix (z), as defined in the Multibase section of Controller Documents 1.0."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#:~:text=The%20publicKeyMultibase%20value%20of%20the%20verification%20method%20MUST%20start%20with%20the%20base%2D58%2Dbtc%20prefix%20(z)%2C%20as%20defined%20in%20the%20Multibase%20section%20of%20Controller%20Documents%201.0.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 104551,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The publicKeyMultibase value of the verification method MUST start with the base-58-btc prefix (z), as defined in the Multibase section of Controller Documents 1.0.",
              "body": "async function() {\n            this.test.link = 'https://w3c.github.io/vc-di-eddsa/#:~:text=The%20publicKeyMultibase%20value%20of%20the%20verification%20method%20MUST%20start%20with%20the%20base%2D58%2Dbtc%20prefix%20(z)%2C%20as%20defined%20in%20the%20Multibase%20section%20of%20Controller%20Documents%201.0.';\n            assertBefore();\n            verificationMethodDocuments.should.not.eql([],\n              'Expected at least one \"verificationMethodDocument\".');\n            for(const verificationMethodDocument of\n              verificationMethodDocuments) {\n              const multibase = 'z';\n              const {publicKeyMultibase} = verificationMethodDocument;\n              const isMultibaseEncoded =\n                  publicKeyMultibase.startsWith(multibase) &&\n                  shouldBeBs58(publicKeyMultibase);\n              isMultibaseEncoded.should.equal(\n                true,\n                'Expected \"publicKeyMultibase\" value of the verification ' +\n                  'method to be multibase base58-btc encoded value'\n              );\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "parent": "POHPuY4fz8qOTwHsUQ6mq",
              "ctx": null,
              "_testId": "urn:uuid:9df29e45-a75b-44fb-8730-ef1012e351f5",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "The publicKeyMultibase value of the verification method MUST start with the base-58-btc prefix (z), as defined in the Multibase section of Controller Documents 1.0."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#:~:text=The%20publicKeyMultibase%20value%20of%20the%20verification%20method%20MUST%20start%20with%20the%20base%2D58%2Dbtc%20prefix%20(z)%2C%20as%20defined%20in%20the%20Multibase%20section%20of%20Controller%20Documents%201.0.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 104746,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The publicKeyMultibase value of the verification method MUST start with the base-58-btc prefix (z), as defined in the Multibase section of Controller Documents 1.0.",
              "body": "async function() {\n            this.test.link = 'https://w3c.github.io/vc-di-eddsa/#:~:text=The%20publicKeyMultibase%20value%20of%20the%20verification%20method%20MUST%20start%20with%20the%20base%2D58%2Dbtc%20prefix%20(z)%2C%20as%20defined%20in%20the%20Multibase%20section%20of%20Controller%20Documents%201.0.';\n            assertBefore();\n            verificationMethodDocuments.should.not.eql([],\n              'Expected at least one \"verificationMethodDocument\".');\n            for(const verificationMethodDocument of\n              verificationMethodDocuments) {\n              const multibase = 'z';\n              const {publicKeyMultibase} = verificationMethodDocument;\n              const isMultibaseEncoded =\n                  publicKeyMultibase.startsWith(multibase) &&\n                  shouldBeBs58(publicKeyMultibase);\n              isMultibaseEncoded.should.equal(\n                true,\n                'Expected \"publicKeyMultibase\" value of the verification ' +\n                  'method to be multibase base58-btc encoded value'\n              );\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "parent": "2xtCk0BCyXfRQTrJ7BuhV",
              "ctx": null,
              "_testId": "urn:uuid:121c1dca-365a-45d1-b42f-9ff98e46979f",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The publicKeyMultibase value of the verification method MUST start with the base-58-btc prefix (z), as defined in the Multibase section of Controller Documents 1.0."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#:~:text=The%20publicKeyMultibase%20value%20of%20the%20verification%20method%20MUST%20start%20with%20the%20base%2D58%2Dbtc%20prefix%20(z)%2C%20as%20defined%20in%20the%20Multibase%20section%20of%20Controller%20Documents%201.0.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 104845,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The publicKeyMultibase value of the verification method MUST start with the base-58-btc prefix (z), as defined in the Multibase section of Controller Documents 1.0.",
              "body": "async function() {\n            this.test.link = 'https://w3c.github.io/vc-di-eddsa/#:~:text=The%20publicKeyMultibase%20value%20of%20the%20verification%20method%20MUST%20start%20with%20the%20base%2D58%2Dbtc%20prefix%20(z)%2C%20as%20defined%20in%20the%20Multibase%20section%20of%20Controller%20Documents%201.0.';\n            assertBefore();\n            verificationMethodDocuments.should.not.eql([],\n              'Expected at least one \"verificationMethodDocument\".');\n            for(const verificationMethodDocument of\n              verificationMethodDocuments) {\n              const multibase = 'z';\n              const {publicKeyMultibase} = verificationMethodDocument;\n              const isMultibaseEncoded =\n                  publicKeyMultibase.startsWith(multibase) &&\n                  shouldBeBs58(publicKeyMultibase);\n              isMultibaseEncoded.should.equal(\n                true,\n                'Expected \"publicKeyMultibase\" value of the verification ' +\n                  'method to be multibase base58-btc encoded value'\n              );\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "parent": "Pwd7JzGDEXAP4CIkUDXBO",
              "ctx": null,
              "_testId": "urn:uuid:5aa4084e-4ccd-45a6-b2e7-118e88eedde1",
              "cell": {
                "columnId": "Trential",
                "rowId": "The publicKeyMultibase value of the verification method MUST start with the base-58-btc prefix (z), as defined in the Multibase section of Controller Documents 1.0."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#:~:text=The%20publicKeyMultibase%20value%20of%20the%20verification%20method%20MUST%20start%20with%20the%20base%2D58%2Dbtc%20prefix%20(z)%2C%20as%20defined%20in%20the%20Multibase%20section%20of%20Controller%20Documents%201.0.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 105826,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The publicKeyMultibase value of the verification method MUST start with the base-58-btc prefix (z), as defined in the Multibase section of Controller Documents 1.0.",
              "body": "async function() {\n            this.test.link = 'https://w3c.github.io/vc-di-eddsa/#:~:text=The%20publicKeyMultibase%20value%20of%20the%20verification%20method%20MUST%20start%20with%20the%20base%2D58%2Dbtc%20prefix%20(z)%2C%20as%20defined%20in%20the%20Multibase%20section%20of%20Controller%20Documents%201.0.';\n            assertBefore();\n            verificationMethodDocuments.should.not.eql([],\n              'Expected at least one \"verificationMethodDocument\".');\n            for(const verificationMethodDocument of\n              verificationMethodDocuments) {\n              const multibase = 'z';\n              const {publicKeyMultibase} = verificationMethodDocument;\n              const isMultibaseEncoded =\n                  publicKeyMultibase.startsWith(multibase) &&\n                  shouldBeBs58(publicKeyMultibase);\n              isMultibaseEncoded.should.equal(\n                true,\n                'Expected \"publicKeyMultibase\" value of the verification ' +\n                  'method to be multibase base58-btc encoded value'\n              );\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "parent": "tkF2crwKUUabsaeLwYiU6",
              "ctx": null,
              "_testId": "urn:uuid:dfbee4d5-cc73-48da-8d84-91bacfe79504",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "The publicKeyMultibase value of the verification method MUST start with the base-58-btc prefix (z), as defined in the Multibase section of Controller Documents 1.0."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#:~:text=The%20publicKeyMultibase%20value%20of%20the%20verification%20method%20MUST%20start%20with%20the%20base%2D58%2Dbtc%20prefix%20(z)%2C%20as%20defined%20in%20the%20Multibase%20section%20of%20Controller%20Documents%201.0.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 105949,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Issuer Trinsic failed to issue VC: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Issuer Trinsic failed to issue VC: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at assertBefore (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/suites/data-model.js:42:20)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/suites/data-model.js:56:13)\n    at process.processImmediate (node:internal/timers:483:21)"
              }
            },
            {
              "type": "test",
              "title": "The publicKeyMultibase value of the verification method MUST start with the base-58-btc prefix (z), as defined in the Multibase section of Controller Documents 1.0.",
              "body": "async function() {\n            this.test.link = 'https://w3c.github.io/vc-di-eddsa/#:~:text=The%20publicKeyMultibase%20value%20of%20the%20verification%20method%20MUST%20start%20with%20the%20base%2D58%2Dbtc%20prefix%20(z)%2C%20as%20defined%20in%20the%20Multibase%20section%20of%20Controller%20Documents%201.0.';\n            assertBefore();\n            verificationMethodDocuments.should.not.eql([],\n              'Expected at least one \"verificationMethodDocument\".');\n            for(const verificationMethodDocument of\n              verificationMethodDocuments) {\n              const multibase = 'z';\n              const {publicKeyMultibase} = verificationMethodDocument;\n              const isMultibaseEncoded =\n                  publicKeyMultibase.startsWith(multibase) &&\n                  shouldBeBs58(publicKeyMultibase);\n              isMultibaseEncoded.should.equal(\n                true,\n                'Expected \"publicKeyMultibase\" value of the verification ' +\n                  'method to be multibase base58-btc encoded value'\n              );\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "parent": "MjDSfFGHVENzOaFraVSY2",
              "ctx": null,
              "_testId": "urn:uuid:4f0faa10-8e51-49c8-8972-629b02f1d357",
              "cell": {
                "columnId": "bovine",
                "rowId": "The publicKeyMultibase value of the verification method MUST start with the base-58-btc prefix (z), as defined in the Multibase section of Controller Documents 1.0."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#:~:text=The%20publicKeyMultibase%20value%20of%20the%20verification%20method%20MUST%20start%20with%20the%20base%2D58%2Dbtc%20prefix%20(z)%2C%20as%20defined%20in%20the%20Multibase%20section%20of%20Controller%20Documents%201.0.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 106107,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "Any other encoding MUST NOT be allowed.",
          "link": "https://w3c.github.io/vc-di-eddsa/#:~:text=of%20Controller%20Documents%201.0.-,Any%20other%20encoding%20MUST%20NOT%20be%20allowed.,-Developers%20are%20advised%20to%20not",
          "cells": [
            {
              "type": "test",
              "title": "Any other encoding MUST NOT be allowed.",
              "body": "async function() {\n            this.test.link = 'https://w3c.github.io/vc-di-eddsa/#:~:text=of%20Controller%20Documents%201.0.-,Any%20other%20encoding%20MUST%20NOT%20be%20allowed.,-Developers%20are%20advised%20to%20not';\n            assertBefore();\n            verificationMethodDocuments.should.not.eql([],\n              'Expected at least one \"verificationMethodDocument\".');\n            for(const verificationMethodDocument of\n              verificationMethodDocuments) {\n              const multibase = 'z';\n              const {publicKeyMultibase} = verificationMethodDocument;\n              const isMultibaseEncoded =\n                publicKeyMultibase.startsWith(multibase) &&\n                shouldBeBs58(publicKeyMultibase);\n              isMultibaseEncoded.should.equal(\n                true,\n                'Expected \"publicKeyMultibase\" value of the verification ' +\n                'method to be multibase base58-btc encoded value'\n              );\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "parent": "vo8B3aNg9_Q4WyApxPoeL",
              "ctx": null,
              "_testId": "urn:uuid:ee6fff4b-21c8-4bc5-be51-35870d02a970",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "Any other encoding MUST NOT be allowed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#:~:text=of%20Controller%20Documents%201.0.-,Any%20other%20encoding%20MUST%20NOT%20be%20allowed.,-Developers%20are%20advised%20to%20not",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 104342,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Any other encoding MUST NOT be allowed.",
              "body": "async function() {\n            this.test.link = 'https://w3c.github.io/vc-di-eddsa/#:~:text=of%20Controller%20Documents%201.0.-,Any%20other%20encoding%20MUST%20NOT%20be%20allowed.,-Developers%20are%20advised%20to%20not';\n            assertBefore();\n            verificationMethodDocuments.should.not.eql([],\n              'Expected at least one \"verificationMethodDocument\".');\n            for(const verificationMethodDocument of\n              verificationMethodDocuments) {\n              const multibase = 'z';\n              const {publicKeyMultibase} = verificationMethodDocument;\n              const isMultibaseEncoded =\n                publicKeyMultibase.startsWith(multibase) &&\n                shouldBeBs58(publicKeyMultibase);\n              isMultibaseEncoded.should.equal(\n                true,\n                'Expected \"publicKeyMultibase\" value of the verification ' +\n                'method to be multibase base58-btc encoded value'\n              );\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "parent": "F87ZPvSuSC2jSgbgVKHrG",
              "ctx": null,
              "_testId": "urn:uuid:eda5d978-ae7f-4c12-9989-29984dc08386",
              "cell": {
                "columnId": "Aviary Tech",
                "rowId": "Any other encoding MUST NOT be allowed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#:~:text=of%20Controller%20Documents%201.0.-,Any%20other%20encoding%20MUST%20NOT%20be%20allowed.,-Developers%20are%20advised%20to%20not",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 104391,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Any other encoding MUST NOT be allowed.",
              "body": "async function() {\n            this.test.link = 'https://w3c.github.io/vc-di-eddsa/#:~:text=of%20Controller%20Documents%201.0.-,Any%20other%20encoding%20MUST%20NOT%20be%20allowed.,-Developers%20are%20advised%20to%20not';\n            assertBefore();\n            verificationMethodDocuments.should.not.eql([],\n              'Expected at least one \"verificationMethodDocument\".');\n            for(const verificationMethodDocument of\n              verificationMethodDocuments) {\n              const multibase = 'z';\n              const {publicKeyMultibase} = verificationMethodDocument;\n              const isMultibaseEncoded =\n                publicKeyMultibase.startsWith(multibase) &&\n                shouldBeBs58(publicKeyMultibase);\n              isMultibaseEncoded.should.equal(\n                true,\n                'Expected \"publicKeyMultibase\" value of the verification ' +\n                'method to be multibase base58-btc encoded value'\n              );\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "parent": "SQQnatXYdEvIMvIkqFCg_",
              "ctx": null,
              "_testId": "urn:uuid:ece76901-2df4-4a87-95b9-205c41b2c9e6",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "Any other encoding MUST NOT be allowed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#:~:text=of%20Controller%20Documents%201.0.-,Any%20other%20encoding%20MUST%20NOT%20be%20allowed.,-Developers%20are%20advised%20to%20not",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 104523,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Any other encoding MUST NOT be allowed.",
              "body": "async function() {\n            this.test.link = 'https://w3c.github.io/vc-di-eddsa/#:~:text=of%20Controller%20Documents%201.0.-,Any%20other%20encoding%20MUST%20NOT%20be%20allowed.,-Developers%20are%20advised%20to%20not';\n            assertBefore();\n            verificationMethodDocuments.should.not.eql([],\n              'Expected at least one \"verificationMethodDocument\".');\n            for(const verificationMethodDocument of\n              verificationMethodDocuments) {\n              const multibase = 'z';\n              const {publicKeyMultibase} = verificationMethodDocument;\n              const isMultibaseEncoded =\n                publicKeyMultibase.startsWith(multibase) &&\n                shouldBeBs58(publicKeyMultibase);\n              isMultibaseEncoded.should.equal(\n                true,\n                'Expected \"publicKeyMultibase\" value of the verification ' +\n                'method to be multibase base58-btc encoded value'\n              );\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "parent": "1DBO8Ns1tOQspx9pptRGU",
              "ctx": null,
              "_testId": "urn:uuid:d9996dfb-4e4c-428f-b903-af22606bf2e7",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "Any other encoding MUST NOT be allowed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#:~:text=of%20Controller%20Documents%201.0.-,Any%20other%20encoding%20MUST%20NOT%20be%20allowed.,-Developers%20are%20advised%20to%20not",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 104552,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Any other encoding MUST NOT be allowed.",
              "body": "async function() {\n            this.test.link = 'https://w3c.github.io/vc-di-eddsa/#:~:text=of%20Controller%20Documents%201.0.-,Any%20other%20encoding%20MUST%20NOT%20be%20allowed.,-Developers%20are%20advised%20to%20not';\n            assertBefore();\n            verificationMethodDocuments.should.not.eql([],\n              'Expected at least one \"verificationMethodDocument\".');\n            for(const verificationMethodDocument of\n              verificationMethodDocuments) {\n              const multibase = 'z';\n              const {publicKeyMultibase} = verificationMethodDocument;\n              const isMultibaseEncoded =\n                publicKeyMultibase.startsWith(multibase) &&\n                shouldBeBs58(publicKeyMultibase);\n              isMultibaseEncoded.should.equal(\n                true,\n                'Expected \"publicKeyMultibase\" value of the verification ' +\n                'method to be multibase base58-btc encoded value'\n              );\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "parent": "POHPuY4fz8qOTwHsUQ6mq",
              "ctx": null,
              "_testId": "urn:uuid:cf3fb1a7-ac2e-4921-8563-31471a5df888",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "Any other encoding MUST NOT be allowed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#:~:text=of%20Controller%20Documents%201.0.-,Any%20other%20encoding%20MUST%20NOT%20be%20allowed.,-Developers%20are%20advised%20to%20not",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 104746,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Any other encoding MUST NOT be allowed.",
              "body": "async function() {\n            this.test.link = 'https://w3c.github.io/vc-di-eddsa/#:~:text=of%20Controller%20Documents%201.0.-,Any%20other%20encoding%20MUST%20NOT%20be%20allowed.,-Developers%20are%20advised%20to%20not';\n            assertBefore();\n            verificationMethodDocuments.should.not.eql([],\n              'Expected at least one \"verificationMethodDocument\".');\n            for(const verificationMethodDocument of\n              verificationMethodDocuments) {\n              const multibase = 'z';\n              const {publicKeyMultibase} = verificationMethodDocument;\n              const isMultibaseEncoded =\n                publicKeyMultibase.startsWith(multibase) &&\n                shouldBeBs58(publicKeyMultibase);\n              isMultibaseEncoded.should.equal(\n                true,\n                'Expected \"publicKeyMultibase\" value of the verification ' +\n                'method to be multibase base58-btc encoded value'\n              );\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "parent": "2xtCk0BCyXfRQTrJ7BuhV",
              "ctx": null,
              "_testId": "urn:uuid:a0f3830d-cb4b-407f-a5f7-57cb99aa2308",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "Any other encoding MUST NOT be allowed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#:~:text=of%20Controller%20Documents%201.0.-,Any%20other%20encoding%20MUST%20NOT%20be%20allowed.,-Developers%20are%20advised%20to%20not",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 104846,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Any other encoding MUST NOT be allowed.",
              "body": "async function() {\n            this.test.link = 'https://w3c.github.io/vc-di-eddsa/#:~:text=of%20Controller%20Documents%201.0.-,Any%20other%20encoding%20MUST%20NOT%20be%20allowed.,-Developers%20are%20advised%20to%20not';\n            assertBefore();\n            verificationMethodDocuments.should.not.eql([],\n              'Expected at least one \"verificationMethodDocument\".');\n            for(const verificationMethodDocument of\n              verificationMethodDocuments) {\n              const multibase = 'z';\n              const {publicKeyMultibase} = verificationMethodDocument;\n              const isMultibaseEncoded =\n                publicKeyMultibase.startsWith(multibase) &&\n                shouldBeBs58(publicKeyMultibase);\n              isMultibaseEncoded.should.equal(\n                true,\n                'Expected \"publicKeyMultibase\" value of the verification ' +\n                'method to be multibase base58-btc encoded value'\n              );\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "parent": "Pwd7JzGDEXAP4CIkUDXBO",
              "ctx": null,
              "_testId": "urn:uuid:506ff3e3-ef42-4699-8daa-5880ab5f50cb",
              "cell": {
                "columnId": "Trential",
                "rowId": "Any other encoding MUST NOT be allowed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#:~:text=of%20Controller%20Documents%201.0.-,Any%20other%20encoding%20MUST%20NOT%20be%20allowed.,-Developers%20are%20advised%20to%20not",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 105826,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Any other encoding MUST NOT be allowed.",
              "body": "async function() {\n            this.test.link = 'https://w3c.github.io/vc-di-eddsa/#:~:text=of%20Controller%20Documents%201.0.-,Any%20other%20encoding%20MUST%20NOT%20be%20allowed.,-Developers%20are%20advised%20to%20not';\n            assertBefore();\n            verificationMethodDocuments.should.not.eql([],\n              'Expected at least one \"verificationMethodDocument\".');\n            for(const verificationMethodDocument of\n              verificationMethodDocuments) {\n              const multibase = 'z';\n              const {publicKeyMultibase} = verificationMethodDocument;\n              const isMultibaseEncoded =\n                publicKeyMultibase.startsWith(multibase) &&\n                shouldBeBs58(publicKeyMultibase);\n              isMultibaseEncoded.should.equal(\n                true,\n                'Expected \"publicKeyMultibase\" value of the verification ' +\n                'method to be multibase base58-btc encoded value'\n              );\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "parent": "tkF2crwKUUabsaeLwYiU6",
              "ctx": null,
              "_testId": "urn:uuid:200ccec0-be40-4ce4-a745-aca6ab5c2972",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "Any other encoding MUST NOT be allowed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#:~:text=of%20Controller%20Documents%201.0.-,Any%20other%20encoding%20MUST%20NOT%20be%20allowed.,-Developers%20are%20advised%20to%20not",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 105949,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Issuer Trinsic failed to issue VC: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Issuer Trinsic failed to issue VC: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at assertBefore (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/suites/data-model.js:42:20)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/suites/data-model.js:75:13)\n    at process.processImmediate (node:internal/timers:483:21)"
              }
            },
            {
              "type": "test",
              "title": "Any other encoding MUST NOT be allowed.",
              "body": "async function() {\n            this.test.link = 'https://w3c.github.io/vc-di-eddsa/#:~:text=of%20Controller%20Documents%201.0.-,Any%20other%20encoding%20MUST%20NOT%20be%20allowed.,-Developers%20are%20advised%20to%20not';\n            assertBefore();\n            verificationMethodDocuments.should.not.eql([],\n              'Expected at least one \"verificationMethodDocument\".');\n            for(const verificationMethodDocument of\n              verificationMethodDocuments) {\n              const multibase = 'z';\n              const {publicKeyMultibase} = verificationMethodDocument;\n              const isMultibaseEncoded =\n                publicKeyMultibase.startsWith(multibase) &&\n                shouldBeBs58(publicKeyMultibase);\n              isMultibaseEncoded.should.equal(\n                true,\n                'Expected \"publicKeyMultibase\" value of the verification ' +\n                'method to be multibase base58-btc encoded value'\n              );\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "parent": "MjDSfFGHVENzOaFraVSY2",
              "ctx": null,
              "_testId": "urn:uuid:57c995e2-264e-4175-8420-bf1b99423561",
              "cell": {
                "columnId": "bovine",
                "rowId": "Any other encoding MUST NOT be allowed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#:~:text=of%20Controller%20Documents%201.0.-,Any%20other%20encoding%20MUST%20NOT%20be%20allowed.,-Developers%20are%20advised%20to%20not",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 106107,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        }
      ]
    },
    {
      "title": "eddsa-jcs-2022 - Data Model - Proof Representations",
      "ctx": null,
      "suites": [
        {
          "title": "apicatalog.com",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The type property MUST be DataIntegrityProof.",
              "body": "async function() {\n              this.test.link = 'https://w3c.github.io/vc-di-eddsa/#:~:text=The%20type%20property%20MUST%20be%20DataIntegrityProof';\n              commonAssert();\n              for(const proof of eddsa2022Proofs) {\n                should.exist(proof.type,\n                  'Expected a type identifier on the proof.');\n                proof.type.should.equal('DataIntegrityProof',\n                  'Expected DataIntegrityProof type.');\n              }\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "parent": "TqM57OsAiIwcSjscreGOB",
              "ctx": null,
              "_testId": "urn:uuid:7418652d-e610-4071-bd03-8b1036902fa0",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "The type property MUST be DataIntegrityProof."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#:~:text=The%20type%20property%20MUST%20be%20DataIntegrityProof",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 107536,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The cryptosuite property of the proof MUST be eddsa-rdfc-2022 or eddsa-jcs-2022.",
              "body": "async function() {\n            this.test.link = 'https://w3c.github.io/vc-di-eddsa/#:~:text=The%20cryptosuite%20property%20of%20the%20proof%20MUST%20be%20eddsa%2Drdfc%2D2022%20or%20eddsa%2Djcs%2D2022';\n            commonAssert();\n            for(const proof of eddsa2022Proofs) {\n              should.exist(proof.cryptosuite,\n                'Expected a cryptosuite identifier on the proof.');\n              proof.cryptosuite.should.be.oneOf(cryptosuites,\n                'Expected eddsa-rdfc-2022 or eddsa-jcs-2022 cryptosuite.');\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "parent": "TqM57OsAiIwcSjscreGOB",
              "ctx": null,
              "_testId": "urn:uuid:c20e299a-1d38-4659-925b-52b34b91f311",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "The cryptosuite property of the proof MUST be eddsa-rdfc-2022 or eddsa-jcs-2022."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#:~:text=The%20cryptosuite%20property%20of%20the%20proof%20MUST%20be%20eddsa%2Drdfc%2D2022%20or%20eddsa%2Djcs%2D2022",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 107536,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The proofValue property of the proof MUST be a detached EdDSA signature produced according to [RFC8032], encoded using the base-58-btc header and alphabet as described in the Multibase section of Controller Documents 1.0.",
              "body": "async function() {\n            this.test.link = 'https://w3c.github.io/vc-di-eddsa/#:~:text=The%20proofValue%20property%20of%20the%20proof%20MUST%20be%20a%20detached%20EdDSA%20signature%20produced%20according%20to%20%5BRFC8032%5D%2C%20encoded%20using%20the%20base%2D58%2Dbtc%20header%20and%20alphabet%20as%20described%20in%20the%20Multibase%20section%20of%20Controller%20Documents%201.0';\n            commonAssert();\n            for(const proof of eddsa2022Proofs) {\n              should.exist(proof.proofValue,\n                'Expected a proof value on the proof.');\n              const valueBytes = bs58Decode({id: proof.proofValue});\n              should.exist(valueBytes,\n                'Expected to have a decoded proofValue.');\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "parent": "TqM57OsAiIwcSjscreGOB",
              "ctx": null,
              "_testId": "urn:uuid:8522b180-c382-43ca-a4e9-e6c70e31ae5c",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "The proofValue property of the proof MUST be a detached EdDSA signature produced according to [RFC8032], encoded using the base-58-btc header and alphabet as described in the Multibase section of Controller Documents 1.0."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#:~:text=The%20proofValue%20property%20of%20the%20proof%20MUST%20be%20a%20detached%20EdDSA%20signature%20produced%20according%20to%20%5BRFC8032%5D%2C%20encoded%20using%20the%20base%2D58%2Dbtc%20header%20and%20alphabet%20as%20described%20in%20the%20Multibase%20section%20of%20Controller%20Documents%201.0",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 107537,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: setupRow in \"apicatalog.com\"",
              "body": "function setupRow() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "TqM57OsAiIwcSjscreGOB",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "originalTitle": "\"before each\" hook: setupRow",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"apicatalog.com\"",
              "body": "async function() {\n            issuedVc = await createInitialVc({issuer, vc: validVc});\n            proofs = getProofs(issuedVc);\n            if(proofs?.length) {\n              eddsa2022Proofs = proofs.filter(\n                proof => cryptosuites.includes(proof?.cryptosuite));\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "TqM57OsAiIwcSjscreGOB",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 106108,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1428,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "JcNAhLRfoLe9Henh3K4DN",
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
          "_testId": "urn:uuid:9889a5e8-0755-4a35-befa-6e79a949fa78"
        },
        {
          "title": "Digital Bazaar",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The type property MUST be DataIntegrityProof.",
              "body": "async function() {\n              this.test.link = 'https://w3c.github.io/vc-di-eddsa/#:~:text=The%20type%20property%20MUST%20be%20DataIntegrityProof';\n              commonAssert();\n              for(const proof of eddsa2022Proofs) {\n                should.exist(proof.type,\n                  'Expected a type identifier on the proof.');\n                proof.type.should.equal('DataIntegrityProof',\n                  'Expected DataIntegrityProof type.');\n              }\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "parent": "QEPzEBcmuqymJ5BnnqZwl",
              "ctx": null,
              "_testId": "urn:uuid:4e3e0902-4eff-4c47-a4f1-79bebf489337",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The type property MUST be DataIntegrityProof."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#:~:text=The%20type%20property%20MUST%20be%20DataIntegrityProof",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 107845,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The cryptosuite property of the proof MUST be eddsa-rdfc-2022 or eddsa-jcs-2022.",
              "body": "async function() {\n            this.test.link = 'https://w3c.github.io/vc-di-eddsa/#:~:text=The%20cryptosuite%20property%20of%20the%20proof%20MUST%20be%20eddsa%2Drdfc%2D2022%20or%20eddsa%2Djcs%2D2022';\n            commonAssert();\n            for(const proof of eddsa2022Proofs) {\n              should.exist(proof.cryptosuite,\n                'Expected a cryptosuite identifier on the proof.');\n              proof.cryptosuite.should.be.oneOf(cryptosuites,\n                'Expected eddsa-rdfc-2022 or eddsa-jcs-2022 cryptosuite.');\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "parent": "QEPzEBcmuqymJ5BnnqZwl",
              "ctx": null,
              "_testId": "urn:uuid:5bf4af1b-56df-4719-b552-9a48f3ef8275",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The cryptosuite property of the proof MUST be eddsa-rdfc-2022 or eddsa-jcs-2022."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#:~:text=The%20cryptosuite%20property%20of%20the%20proof%20MUST%20be%20eddsa%2Drdfc%2D2022%20or%20eddsa%2Djcs%2D2022",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 107845,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The proofValue property of the proof MUST be a detached EdDSA signature produced according to [RFC8032], encoded using the base-58-btc header and alphabet as described in the Multibase section of Controller Documents 1.0.",
              "body": "async function() {\n            this.test.link = 'https://w3c.github.io/vc-di-eddsa/#:~:text=The%20proofValue%20property%20of%20the%20proof%20MUST%20be%20a%20detached%20EdDSA%20signature%20produced%20according%20to%20%5BRFC8032%5D%2C%20encoded%20using%20the%20base%2D58%2Dbtc%20header%20and%20alphabet%20as%20described%20in%20the%20Multibase%20section%20of%20Controller%20Documents%201.0';\n            commonAssert();\n            for(const proof of eddsa2022Proofs) {\n              should.exist(proof.proofValue,\n                'Expected a proof value on the proof.');\n              const valueBytes = bs58Decode({id: proof.proofValue});\n              should.exist(valueBytes,\n                'Expected to have a decoded proofValue.');\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "parent": "QEPzEBcmuqymJ5BnnqZwl",
              "ctx": null,
              "_testId": "urn:uuid:b6c4ba82-5810-408a-a492-e03f82f1e3e2",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The proofValue property of the proof MUST be a detached EdDSA signature produced according to [RFC8032], encoded using the base-58-btc header and alphabet as described in the Multibase section of Controller Documents 1.0."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#:~:text=The%20proofValue%20property%20of%20the%20proof%20MUST%20be%20a%20detached%20EdDSA%20signature%20produced%20according%20to%20%5BRFC8032%5D%2C%20encoded%20using%20the%20base%2D58%2Dbtc%20header%20and%20alphabet%20as%20described%20in%20the%20Multibase%20section%20of%20Controller%20Documents%201.0",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 107845,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: setupRow in \"Digital Bazaar\"",
              "body": "function setupRow() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "QEPzEBcmuqymJ5BnnqZwl",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "originalTitle": "\"before each\" hook: setupRow",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Digital Bazaar\"",
              "body": "async function() {\n            issuedVc = await createInitialVc({issuer, vc: validVc});\n            proofs = getProofs(issuedVc);\n            if(proofs?.length) {\n              eddsa2022Proofs = proofs.filter(\n                proof => cryptosuites.includes(proof?.cryptosuite));\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "QEPzEBcmuqymJ5BnnqZwl",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 107537,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 307,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "JcNAhLRfoLe9Henh3K4DN",
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
          "_testId": "urn:uuid:7cfc3ccd-3447-4f61-b21e-1dad8ef4195a"
        },
        {
          "title": "Grotto Networking",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The type property MUST be DataIntegrityProof.",
              "body": "async function() {\n              this.test.link = 'https://w3c.github.io/vc-di-eddsa/#:~:text=The%20type%20property%20MUST%20be%20DataIntegrityProof';\n              commonAssert();\n              for(const proof of eddsa2022Proofs) {\n                should.exist(proof.type,\n                  'Expected a type identifier on the proof.');\n                proof.type.should.equal('DataIntegrityProof',\n                  'Expected DataIntegrityProof type.');\n              }\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "parent": "hWgqH1zzbjLu6KPRRp-tP",
              "ctx": null,
              "_testId": "urn:uuid:826e66c2-4f84-4c64-b017-01926852c5e3",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The type property MUST be DataIntegrityProof."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#:~:text=The%20type%20property%20MUST%20be%20DataIntegrityProof",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 107872,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The cryptosuite property of the proof MUST be eddsa-rdfc-2022 or eddsa-jcs-2022.",
              "body": "async function() {\n            this.test.link = 'https://w3c.github.io/vc-di-eddsa/#:~:text=The%20cryptosuite%20property%20of%20the%20proof%20MUST%20be%20eddsa%2Drdfc%2D2022%20or%20eddsa%2Djcs%2D2022';\n            commonAssert();\n            for(const proof of eddsa2022Proofs) {\n              should.exist(proof.cryptosuite,\n                'Expected a cryptosuite identifier on the proof.');\n              proof.cryptosuite.should.be.oneOf(cryptosuites,\n                'Expected eddsa-rdfc-2022 or eddsa-jcs-2022 cryptosuite.');\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "parent": "hWgqH1zzbjLu6KPRRp-tP",
              "ctx": null,
              "_testId": "urn:uuid:95eb3f6d-f275-4d15-913c-f2aabd57521e",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The cryptosuite property of the proof MUST be eddsa-rdfc-2022 or eddsa-jcs-2022."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#:~:text=The%20cryptosuite%20property%20of%20the%20proof%20MUST%20be%20eddsa%2Drdfc%2D2022%20or%20eddsa%2Djcs%2D2022",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 107872,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The proofValue property of the proof MUST be a detached EdDSA signature produced according to [RFC8032], encoded using the base-58-btc header and alphabet as described in the Multibase section of Controller Documents 1.0.",
              "body": "async function() {\n            this.test.link = 'https://w3c.github.io/vc-di-eddsa/#:~:text=The%20proofValue%20property%20of%20the%20proof%20MUST%20be%20a%20detached%20EdDSA%20signature%20produced%20according%20to%20%5BRFC8032%5D%2C%20encoded%20using%20the%20base%2D58%2Dbtc%20header%20and%20alphabet%20as%20described%20in%20the%20Multibase%20section%20of%20Controller%20Documents%201.0';\n            commonAssert();\n            for(const proof of eddsa2022Proofs) {\n              should.exist(proof.proofValue,\n                'Expected a proof value on the proof.');\n              const valueBytes = bs58Decode({id: proof.proofValue});\n              should.exist(valueBytes,\n                'Expected to have a decoded proofValue.');\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "parent": "hWgqH1zzbjLu6KPRRp-tP",
              "ctx": null,
              "_testId": "urn:uuid:4422bb4b-8532-4874-93d3-79bd33066eaf",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The proofValue property of the proof MUST be a detached EdDSA signature produced according to [RFC8032], encoded using the base-58-btc header and alphabet as described in the Multibase section of Controller Documents 1.0."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#:~:text=The%20proofValue%20property%20of%20the%20proof%20MUST%20be%20a%20detached%20EdDSA%20signature%20produced%20according%20to%20%5BRFC8032%5D%2C%20encoded%20using%20the%20base%2D58%2Dbtc%20header%20and%20alphabet%20as%20described%20in%20the%20Multibase%20section%20of%20Controller%20Documents%201.0",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 107872,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: setupRow in \"Grotto Networking\"",
              "body": "function setupRow() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "hWgqH1zzbjLu6KPRRp-tP",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "originalTitle": "\"before each\" hook: setupRow",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Grotto Networking\"",
              "body": "async function() {\n            issuedVc = await createInitialVc({issuer, vc: validVc});\n            proofs = getProofs(issuedVc);\n            if(proofs?.length) {\n              eddsa2022Proofs = proofs.filter(\n                proof => cryptosuites.includes(proof?.cryptosuite));\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "hWgqH1zzbjLu6KPRRp-tP",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 107845,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 27,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "JcNAhLRfoLe9Henh3K4DN",
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
          "_testId": "urn:uuid:2d278443-d8ec-4d4d-a5f4-a65df4e9ff4d"
        },
        {
          "title": "OpSecId",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The type property MUST be DataIntegrityProof.",
              "body": "async function() {\n              this.test.link = 'https://w3c.github.io/vc-di-eddsa/#:~:text=The%20type%20property%20MUST%20be%20DataIntegrityProof';\n              commonAssert();\n              for(const proof of eddsa2022Proofs) {\n                should.exist(proof.type,\n                  'Expected a type identifier on the proof.');\n                proof.type.should.equal('DataIntegrityProof',\n                  'Expected DataIntegrityProof type.');\n              }\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "parent": "vCuBvQByi4gpnAQO-b1-e",
              "ctx": null,
              "_testId": "urn:uuid:e5d42bc3-73a2-4c3c-a6f9-e6b94aa43957",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "The type property MUST be DataIntegrityProof."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#:~:text=The%20type%20property%20MUST%20be%20DataIntegrityProof",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 108847,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The cryptosuite property of the proof MUST be eddsa-rdfc-2022 or eddsa-jcs-2022.",
              "body": "async function() {\n            this.test.link = 'https://w3c.github.io/vc-di-eddsa/#:~:text=The%20cryptosuite%20property%20of%20the%20proof%20MUST%20be%20eddsa%2Drdfc%2D2022%20or%20eddsa%2Djcs%2D2022';\n            commonAssert();\n            for(const proof of eddsa2022Proofs) {\n              should.exist(proof.cryptosuite,\n                'Expected a cryptosuite identifier on the proof.');\n              proof.cryptosuite.should.be.oneOf(cryptosuites,\n                'Expected eddsa-rdfc-2022 or eddsa-jcs-2022 cryptosuite.');\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "parent": "vCuBvQByi4gpnAQO-b1-e",
              "ctx": null,
              "_testId": "urn:uuid:2b082ace-0dbb-41f9-aae4-24551c028e45",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "The cryptosuite property of the proof MUST be eddsa-rdfc-2022 or eddsa-jcs-2022."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#:~:text=The%20cryptosuite%20property%20of%20the%20proof%20MUST%20be%20eddsa%2Drdfc%2D2022%20or%20eddsa%2Djcs%2D2022",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 108848,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The proofValue property of the proof MUST be a detached EdDSA signature produced according to [RFC8032], encoded using the base-58-btc header and alphabet as described in the Multibase section of Controller Documents 1.0.",
              "body": "async function() {\n            this.test.link = 'https://w3c.github.io/vc-di-eddsa/#:~:text=The%20proofValue%20property%20of%20the%20proof%20MUST%20be%20a%20detached%20EdDSA%20signature%20produced%20according%20to%20%5BRFC8032%5D%2C%20encoded%20using%20the%20base%2D58%2Dbtc%20header%20and%20alphabet%20as%20described%20in%20the%20Multibase%20section%20of%20Controller%20Documents%201.0';\n            commonAssert();\n            for(const proof of eddsa2022Proofs) {\n              should.exist(proof.proofValue,\n                'Expected a proof value on the proof.');\n              const valueBytes = bs58Decode({id: proof.proofValue});\n              should.exist(valueBytes,\n                'Expected to have a decoded proofValue.');\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "parent": "vCuBvQByi4gpnAQO-b1-e",
              "ctx": null,
              "_testId": "urn:uuid:0f186f5c-1b1b-4dec-b1c3-6f4289bcdbee",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "The proofValue property of the proof MUST be a detached EdDSA signature produced according to [RFC8032], encoded using the base-58-btc header and alphabet as described in the Multibase section of Controller Documents 1.0."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#:~:text=The%20proofValue%20property%20of%20the%20proof%20MUST%20be%20a%20detached%20EdDSA%20signature%20produced%20according%20to%20%5BRFC8032%5D%2C%20encoded%20using%20the%20base%2D58%2Dbtc%20header%20and%20alphabet%20as%20described%20in%20the%20Multibase%20section%20of%20Controller%20Documents%201.0",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 108848,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: setupRow in \"OpSecId\"",
              "body": "function setupRow() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "vCuBvQByi4gpnAQO-b1-e",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "originalTitle": "\"before each\" hook: setupRow",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"OpSecId\"",
              "body": "async function() {\n            issuedVc = await createInitialVc({issuer, vc: validVc});\n            proofs = getProofs(issuedVc);\n            if(proofs?.length) {\n              eddsa2022Proofs = proofs.filter(\n                proof => cryptosuites.includes(proof?.cryptosuite));\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "vCuBvQByi4gpnAQO-b1-e",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 107872,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 974,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "JcNAhLRfoLe9Henh3K4DN",
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
          "_testId": "urn:uuid:5a4beba1-ed97-4410-ae4f-667eae11a7da"
        },
        {
          "title": "bovine",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The type property MUST be DataIntegrityProof.",
              "body": "async function() {\n              this.test.link = 'https://w3c.github.io/vc-di-eddsa/#:~:text=The%20type%20property%20MUST%20be%20DataIntegrityProof';\n              commonAssert();\n              for(const proof of eddsa2022Proofs) {\n                should.exist(proof.type,\n                  'Expected a type identifier on the proof.');\n                proof.type.should.equal('DataIntegrityProof',\n                  'Expected DataIntegrityProof type.');\n              }\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "parent": "Sa3WkRiEm53gUJOGht4YG",
              "ctx": null,
              "_testId": "urn:uuid:1b95b131-5f7c-48fb-8cd0-6d2541b1276d",
              "cell": {
                "columnId": "bovine",
                "rowId": "The type property MUST be DataIntegrityProof."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#:~:text=The%20type%20property%20MUST%20be%20DataIntegrityProof",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 108996,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The cryptosuite property of the proof MUST be eddsa-rdfc-2022 or eddsa-jcs-2022.",
              "body": "async function() {\n            this.test.link = 'https://w3c.github.io/vc-di-eddsa/#:~:text=The%20cryptosuite%20property%20of%20the%20proof%20MUST%20be%20eddsa%2Drdfc%2D2022%20or%20eddsa%2Djcs%2D2022';\n            commonAssert();\n            for(const proof of eddsa2022Proofs) {\n              should.exist(proof.cryptosuite,\n                'Expected a cryptosuite identifier on the proof.');\n              proof.cryptosuite.should.be.oneOf(cryptosuites,\n                'Expected eddsa-rdfc-2022 or eddsa-jcs-2022 cryptosuite.');\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "parent": "Sa3WkRiEm53gUJOGht4YG",
              "ctx": null,
              "_testId": "urn:uuid:c49971ad-77b6-4c8a-acd3-927904d87764",
              "cell": {
                "columnId": "bovine",
                "rowId": "The cryptosuite property of the proof MUST be eddsa-rdfc-2022 or eddsa-jcs-2022."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#:~:text=The%20cryptosuite%20property%20of%20the%20proof%20MUST%20be%20eddsa%2Drdfc%2D2022%20or%20eddsa%2Djcs%2D2022",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 108996,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The proofValue property of the proof MUST be a detached EdDSA signature produced according to [RFC8032], encoded using the base-58-btc header and alphabet as described in the Multibase section of Controller Documents 1.0.",
              "body": "async function() {\n            this.test.link = 'https://w3c.github.io/vc-di-eddsa/#:~:text=The%20proofValue%20property%20of%20the%20proof%20MUST%20be%20a%20detached%20EdDSA%20signature%20produced%20according%20to%20%5BRFC8032%5D%2C%20encoded%20using%20the%20base%2D58%2Dbtc%20header%20and%20alphabet%20as%20described%20in%20the%20Multibase%20section%20of%20Controller%20Documents%201.0';\n            commonAssert();\n            for(const proof of eddsa2022Proofs) {\n              should.exist(proof.proofValue,\n                'Expected a proof value on the proof.');\n              const valueBytes = bs58Decode({id: proof.proofValue});\n              should.exist(valueBytes,\n                'Expected to have a decoded proofValue.');\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "parent": "Sa3WkRiEm53gUJOGht4YG",
              "ctx": null,
              "_testId": "urn:uuid:c765d3ae-7c1c-4d31-aa73-64bd67f7e728",
              "cell": {
                "columnId": "bovine",
                "rowId": "The proofValue property of the proof MUST be a detached EdDSA signature produced according to [RFC8032], encoded using the base-58-btc header and alphabet as described in the Multibase section of Controller Documents 1.0."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#:~:text=The%20proofValue%20property%20of%20the%20proof%20MUST%20be%20a%20detached%20EdDSA%20signature%20produced%20according%20to%20%5BRFC8032%5D%2C%20encoded%20using%20the%20base%2D58%2Dbtc%20header%20and%20alphabet%20as%20described%20in%20the%20Multibase%20section%20of%20Controller%20Documents%201.0",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 108997,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: setupRow in \"bovine\"",
              "body": "function setupRow() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "Sa3WkRiEm53gUJOGht4YG",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "originalTitle": "\"before each\" hook: setupRow",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"bovine\"",
              "body": "async function() {\n            issuedVc = await createInitialVc({issuer, vc: validVc});\n            proofs = getProofs(issuedVc);\n            if(proofs?.length) {\n              eddsa2022Proofs = proofs.filter(\n                proof => cryptosuites.includes(proof?.cryptosuite));\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "Sa3WkRiEm53gUJOGht4YG",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 108848,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 148,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "JcNAhLRfoLe9Henh3K4DN",
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
          "_testId": "urn:uuid:53458c0f-cb65-4ad4-a358-1a4cfa56bda8"
        }
      ],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [
        {
          "title": "\"before all\" hook in \"eddsa-jcs-2022 - Data Model - Proof Representations\"",
          "body": "async function() {\n        const credentials = await generateTestData();\n        validVc = credentials.clone('validVc');\n      }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "JcNAhLRfoLe9Henh3K4DN",
          "ctx": null,
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 106108,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 1,
          "_error": null
        }
      ],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "Ika60aoT9ncTXtTubybzs",
      "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Implementer",
      "_testId": "urn:uuid:b154098c-e5f9-4d2d-bdb6-b71c36da0d3e",
      "columns": [
        "apicatalog.com",
        "Digital Bazaar",
        "Grotto Networking",
        "OpSecId",
        "bovine"
      ],
      "rows": [
        {
          "id": "The type property MUST be DataIntegrityProof.",
          "link": "https://w3c.github.io/vc-di-eddsa/#:~:text=The%20type%20property%20MUST%20be%20DataIntegrityProof",
          "cells": [
            {
              "type": "test",
              "title": "The type property MUST be DataIntegrityProof.",
              "body": "async function() {\n              this.test.link = 'https://w3c.github.io/vc-di-eddsa/#:~:text=The%20type%20property%20MUST%20be%20DataIntegrityProof';\n              commonAssert();\n              for(const proof of eddsa2022Proofs) {\n                should.exist(proof.type,\n                  'Expected a type identifier on the proof.');\n                proof.type.should.equal('DataIntegrityProof',\n                  'Expected DataIntegrityProof type.');\n              }\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "parent": "TqM57OsAiIwcSjscreGOB",
              "ctx": null,
              "_testId": "urn:uuid:7418652d-e610-4071-bd03-8b1036902fa0",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "The type property MUST be DataIntegrityProof."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#:~:text=The%20type%20property%20MUST%20be%20DataIntegrityProof",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 107536,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The type property MUST be DataIntegrityProof.",
              "body": "async function() {\n              this.test.link = 'https://w3c.github.io/vc-di-eddsa/#:~:text=The%20type%20property%20MUST%20be%20DataIntegrityProof';\n              commonAssert();\n              for(const proof of eddsa2022Proofs) {\n                should.exist(proof.type,\n                  'Expected a type identifier on the proof.');\n                proof.type.should.equal('DataIntegrityProof',\n                  'Expected DataIntegrityProof type.');\n              }\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "parent": "QEPzEBcmuqymJ5BnnqZwl",
              "ctx": null,
              "_testId": "urn:uuid:4e3e0902-4eff-4c47-a4f1-79bebf489337",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The type property MUST be DataIntegrityProof."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#:~:text=The%20type%20property%20MUST%20be%20DataIntegrityProof",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 107845,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The type property MUST be DataIntegrityProof.",
              "body": "async function() {\n              this.test.link = 'https://w3c.github.io/vc-di-eddsa/#:~:text=The%20type%20property%20MUST%20be%20DataIntegrityProof';\n              commonAssert();\n              for(const proof of eddsa2022Proofs) {\n                should.exist(proof.type,\n                  'Expected a type identifier on the proof.');\n                proof.type.should.equal('DataIntegrityProof',\n                  'Expected DataIntegrityProof type.');\n              }\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "parent": "hWgqH1zzbjLu6KPRRp-tP",
              "ctx": null,
              "_testId": "urn:uuid:826e66c2-4f84-4c64-b017-01926852c5e3",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The type property MUST be DataIntegrityProof."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#:~:text=The%20type%20property%20MUST%20be%20DataIntegrityProof",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 107872,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The type property MUST be DataIntegrityProof.",
              "body": "async function() {\n              this.test.link = 'https://w3c.github.io/vc-di-eddsa/#:~:text=The%20type%20property%20MUST%20be%20DataIntegrityProof';\n              commonAssert();\n              for(const proof of eddsa2022Proofs) {\n                should.exist(proof.type,\n                  'Expected a type identifier on the proof.');\n                proof.type.should.equal('DataIntegrityProof',\n                  'Expected DataIntegrityProof type.');\n              }\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "parent": "vCuBvQByi4gpnAQO-b1-e",
              "ctx": null,
              "_testId": "urn:uuid:e5d42bc3-73a2-4c3c-a6f9-e6b94aa43957",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "The type property MUST be DataIntegrityProof."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#:~:text=The%20type%20property%20MUST%20be%20DataIntegrityProof",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 108847,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The type property MUST be DataIntegrityProof.",
              "body": "async function() {\n              this.test.link = 'https://w3c.github.io/vc-di-eddsa/#:~:text=The%20type%20property%20MUST%20be%20DataIntegrityProof';\n              commonAssert();\n              for(const proof of eddsa2022Proofs) {\n                should.exist(proof.type,\n                  'Expected a type identifier on the proof.');\n                proof.type.should.equal('DataIntegrityProof',\n                  'Expected DataIntegrityProof type.');\n              }\n            }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "parent": "Sa3WkRiEm53gUJOGht4YG",
              "ctx": null,
              "_testId": "urn:uuid:1b95b131-5f7c-48fb-8cd0-6d2541b1276d",
              "cell": {
                "columnId": "bovine",
                "rowId": "The type property MUST be DataIntegrityProof."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#:~:text=The%20type%20property%20MUST%20be%20DataIntegrityProof",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 108996,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "The cryptosuite property of the proof MUST be eddsa-rdfc-2022 or eddsa-jcs-2022.",
          "link": "https://w3c.github.io/vc-di-eddsa/#:~:text=The%20cryptosuite%20property%20of%20the%20proof%20MUST%20be%20eddsa%2Drdfc%2D2022%20or%20eddsa%2Djcs%2D2022",
          "cells": [
            {
              "type": "test",
              "title": "The cryptosuite property of the proof MUST be eddsa-rdfc-2022 or eddsa-jcs-2022.",
              "body": "async function() {\n            this.test.link = 'https://w3c.github.io/vc-di-eddsa/#:~:text=The%20cryptosuite%20property%20of%20the%20proof%20MUST%20be%20eddsa%2Drdfc%2D2022%20or%20eddsa%2Djcs%2D2022';\n            commonAssert();\n            for(const proof of eddsa2022Proofs) {\n              should.exist(proof.cryptosuite,\n                'Expected a cryptosuite identifier on the proof.');\n              proof.cryptosuite.should.be.oneOf(cryptosuites,\n                'Expected eddsa-rdfc-2022 or eddsa-jcs-2022 cryptosuite.');\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "parent": "TqM57OsAiIwcSjscreGOB",
              "ctx": null,
              "_testId": "urn:uuid:c20e299a-1d38-4659-925b-52b34b91f311",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "The cryptosuite property of the proof MUST be eddsa-rdfc-2022 or eddsa-jcs-2022."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#:~:text=The%20cryptosuite%20property%20of%20the%20proof%20MUST%20be%20eddsa%2Drdfc%2D2022%20or%20eddsa%2Djcs%2D2022",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 107536,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The cryptosuite property of the proof MUST be eddsa-rdfc-2022 or eddsa-jcs-2022.",
              "body": "async function() {\n            this.test.link = 'https://w3c.github.io/vc-di-eddsa/#:~:text=The%20cryptosuite%20property%20of%20the%20proof%20MUST%20be%20eddsa%2Drdfc%2D2022%20or%20eddsa%2Djcs%2D2022';\n            commonAssert();\n            for(const proof of eddsa2022Proofs) {\n              should.exist(proof.cryptosuite,\n                'Expected a cryptosuite identifier on the proof.');\n              proof.cryptosuite.should.be.oneOf(cryptosuites,\n                'Expected eddsa-rdfc-2022 or eddsa-jcs-2022 cryptosuite.');\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "parent": "QEPzEBcmuqymJ5BnnqZwl",
              "ctx": null,
              "_testId": "urn:uuid:5bf4af1b-56df-4719-b552-9a48f3ef8275",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The cryptosuite property of the proof MUST be eddsa-rdfc-2022 or eddsa-jcs-2022."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#:~:text=The%20cryptosuite%20property%20of%20the%20proof%20MUST%20be%20eddsa%2Drdfc%2D2022%20or%20eddsa%2Djcs%2D2022",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 107845,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The cryptosuite property of the proof MUST be eddsa-rdfc-2022 or eddsa-jcs-2022.",
              "body": "async function() {\n            this.test.link = 'https://w3c.github.io/vc-di-eddsa/#:~:text=The%20cryptosuite%20property%20of%20the%20proof%20MUST%20be%20eddsa%2Drdfc%2D2022%20or%20eddsa%2Djcs%2D2022';\n            commonAssert();\n            for(const proof of eddsa2022Proofs) {\n              should.exist(proof.cryptosuite,\n                'Expected a cryptosuite identifier on the proof.');\n              proof.cryptosuite.should.be.oneOf(cryptosuites,\n                'Expected eddsa-rdfc-2022 or eddsa-jcs-2022 cryptosuite.');\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "parent": "hWgqH1zzbjLu6KPRRp-tP",
              "ctx": null,
              "_testId": "urn:uuid:95eb3f6d-f275-4d15-913c-f2aabd57521e",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The cryptosuite property of the proof MUST be eddsa-rdfc-2022 or eddsa-jcs-2022."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#:~:text=The%20cryptosuite%20property%20of%20the%20proof%20MUST%20be%20eddsa%2Drdfc%2D2022%20or%20eddsa%2Djcs%2D2022",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 107872,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The cryptosuite property of the proof MUST be eddsa-rdfc-2022 or eddsa-jcs-2022.",
              "body": "async function() {\n            this.test.link = 'https://w3c.github.io/vc-di-eddsa/#:~:text=The%20cryptosuite%20property%20of%20the%20proof%20MUST%20be%20eddsa%2Drdfc%2D2022%20or%20eddsa%2Djcs%2D2022';\n            commonAssert();\n            for(const proof of eddsa2022Proofs) {\n              should.exist(proof.cryptosuite,\n                'Expected a cryptosuite identifier on the proof.');\n              proof.cryptosuite.should.be.oneOf(cryptosuites,\n                'Expected eddsa-rdfc-2022 or eddsa-jcs-2022 cryptosuite.');\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "parent": "vCuBvQByi4gpnAQO-b1-e",
              "ctx": null,
              "_testId": "urn:uuid:2b082ace-0dbb-41f9-aae4-24551c028e45",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "The cryptosuite property of the proof MUST be eddsa-rdfc-2022 or eddsa-jcs-2022."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#:~:text=The%20cryptosuite%20property%20of%20the%20proof%20MUST%20be%20eddsa%2Drdfc%2D2022%20or%20eddsa%2Djcs%2D2022",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 108848,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The cryptosuite property of the proof MUST be eddsa-rdfc-2022 or eddsa-jcs-2022.",
              "body": "async function() {\n            this.test.link = 'https://w3c.github.io/vc-di-eddsa/#:~:text=The%20cryptosuite%20property%20of%20the%20proof%20MUST%20be%20eddsa%2Drdfc%2D2022%20or%20eddsa%2Djcs%2D2022';\n            commonAssert();\n            for(const proof of eddsa2022Proofs) {\n              should.exist(proof.cryptosuite,\n                'Expected a cryptosuite identifier on the proof.');\n              proof.cryptosuite.should.be.oneOf(cryptosuites,\n                'Expected eddsa-rdfc-2022 or eddsa-jcs-2022 cryptosuite.');\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "parent": "Sa3WkRiEm53gUJOGht4YG",
              "ctx": null,
              "_testId": "urn:uuid:c49971ad-77b6-4c8a-acd3-927904d87764",
              "cell": {
                "columnId": "bovine",
                "rowId": "The cryptosuite property of the proof MUST be eddsa-rdfc-2022 or eddsa-jcs-2022."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#:~:text=The%20cryptosuite%20property%20of%20the%20proof%20MUST%20be%20eddsa%2Drdfc%2D2022%20or%20eddsa%2Djcs%2D2022",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 108996,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "The proofValue property of the proof MUST be a detached EdDSA signature produced according to [RFC8032], encoded using the base-58-btc header and alphabet as described in the Multibase section of Controller Documents 1.0.",
          "link": "https://w3c.github.io/vc-di-eddsa/#:~:text=The%20proofValue%20property%20of%20the%20proof%20MUST%20be%20a%20detached%20EdDSA%20signature%20produced%20according%20to%20%5BRFC8032%5D%2C%20encoded%20using%20the%20base%2D58%2Dbtc%20header%20and%20alphabet%20as%20described%20in%20the%20Multibase%20section%20of%20Controller%20Documents%201.0",
          "cells": [
            {
              "type": "test",
              "title": "The proofValue property of the proof MUST be a detached EdDSA signature produced according to [RFC8032], encoded using the base-58-btc header and alphabet as described in the Multibase section of Controller Documents 1.0.",
              "body": "async function() {\n            this.test.link = 'https://w3c.github.io/vc-di-eddsa/#:~:text=The%20proofValue%20property%20of%20the%20proof%20MUST%20be%20a%20detached%20EdDSA%20signature%20produced%20according%20to%20%5BRFC8032%5D%2C%20encoded%20using%20the%20base%2D58%2Dbtc%20header%20and%20alphabet%20as%20described%20in%20the%20Multibase%20section%20of%20Controller%20Documents%201.0';\n            commonAssert();\n            for(const proof of eddsa2022Proofs) {\n              should.exist(proof.proofValue,\n                'Expected a proof value on the proof.');\n              const valueBytes = bs58Decode({id: proof.proofValue});\n              should.exist(valueBytes,\n                'Expected to have a decoded proofValue.');\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "parent": "TqM57OsAiIwcSjscreGOB",
              "ctx": null,
              "_testId": "urn:uuid:8522b180-c382-43ca-a4e9-e6c70e31ae5c",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "The proofValue property of the proof MUST be a detached EdDSA signature produced according to [RFC8032], encoded using the base-58-btc header and alphabet as described in the Multibase section of Controller Documents 1.0."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#:~:text=The%20proofValue%20property%20of%20the%20proof%20MUST%20be%20a%20detached%20EdDSA%20signature%20produced%20according%20to%20%5BRFC8032%5D%2C%20encoded%20using%20the%20base%2D58%2Dbtc%20header%20and%20alphabet%20as%20described%20in%20the%20Multibase%20section%20of%20Controller%20Documents%201.0",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 107537,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The proofValue property of the proof MUST be a detached EdDSA signature produced according to [RFC8032], encoded using the base-58-btc header and alphabet as described in the Multibase section of Controller Documents 1.0.",
              "body": "async function() {\n            this.test.link = 'https://w3c.github.io/vc-di-eddsa/#:~:text=The%20proofValue%20property%20of%20the%20proof%20MUST%20be%20a%20detached%20EdDSA%20signature%20produced%20according%20to%20%5BRFC8032%5D%2C%20encoded%20using%20the%20base%2D58%2Dbtc%20header%20and%20alphabet%20as%20described%20in%20the%20Multibase%20section%20of%20Controller%20Documents%201.0';\n            commonAssert();\n            for(const proof of eddsa2022Proofs) {\n              should.exist(proof.proofValue,\n                'Expected a proof value on the proof.');\n              const valueBytes = bs58Decode({id: proof.proofValue});\n              should.exist(valueBytes,\n                'Expected to have a decoded proofValue.');\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "parent": "QEPzEBcmuqymJ5BnnqZwl",
              "ctx": null,
              "_testId": "urn:uuid:b6c4ba82-5810-408a-a492-e03f82f1e3e2",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The proofValue property of the proof MUST be a detached EdDSA signature produced according to [RFC8032], encoded using the base-58-btc header and alphabet as described in the Multibase section of Controller Documents 1.0."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#:~:text=The%20proofValue%20property%20of%20the%20proof%20MUST%20be%20a%20detached%20EdDSA%20signature%20produced%20according%20to%20%5BRFC8032%5D%2C%20encoded%20using%20the%20base%2D58%2Dbtc%20header%20and%20alphabet%20as%20described%20in%20the%20Multibase%20section%20of%20Controller%20Documents%201.0",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 107845,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The proofValue property of the proof MUST be a detached EdDSA signature produced according to [RFC8032], encoded using the base-58-btc header and alphabet as described in the Multibase section of Controller Documents 1.0.",
              "body": "async function() {\n            this.test.link = 'https://w3c.github.io/vc-di-eddsa/#:~:text=The%20proofValue%20property%20of%20the%20proof%20MUST%20be%20a%20detached%20EdDSA%20signature%20produced%20according%20to%20%5BRFC8032%5D%2C%20encoded%20using%20the%20base%2D58%2Dbtc%20header%20and%20alphabet%20as%20described%20in%20the%20Multibase%20section%20of%20Controller%20Documents%201.0';\n            commonAssert();\n            for(const proof of eddsa2022Proofs) {\n              should.exist(proof.proofValue,\n                'Expected a proof value on the proof.');\n              const valueBytes = bs58Decode({id: proof.proofValue});\n              should.exist(valueBytes,\n                'Expected to have a decoded proofValue.');\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "parent": "hWgqH1zzbjLu6KPRRp-tP",
              "ctx": null,
              "_testId": "urn:uuid:4422bb4b-8532-4874-93d3-79bd33066eaf",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The proofValue property of the proof MUST be a detached EdDSA signature produced according to [RFC8032], encoded using the base-58-btc header and alphabet as described in the Multibase section of Controller Documents 1.0."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#:~:text=The%20proofValue%20property%20of%20the%20proof%20MUST%20be%20a%20detached%20EdDSA%20signature%20produced%20according%20to%20%5BRFC8032%5D%2C%20encoded%20using%20the%20base%2D58%2Dbtc%20header%20and%20alphabet%20as%20described%20in%20the%20Multibase%20section%20of%20Controller%20Documents%201.0",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 107872,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The proofValue property of the proof MUST be a detached EdDSA signature produced according to [RFC8032], encoded using the base-58-btc header and alphabet as described in the Multibase section of Controller Documents 1.0.",
              "body": "async function() {\n            this.test.link = 'https://w3c.github.io/vc-di-eddsa/#:~:text=The%20proofValue%20property%20of%20the%20proof%20MUST%20be%20a%20detached%20EdDSA%20signature%20produced%20according%20to%20%5BRFC8032%5D%2C%20encoded%20using%20the%20base%2D58%2Dbtc%20header%20and%20alphabet%20as%20described%20in%20the%20Multibase%20section%20of%20Controller%20Documents%201.0';\n            commonAssert();\n            for(const proof of eddsa2022Proofs) {\n              should.exist(proof.proofValue,\n                'Expected a proof value on the proof.');\n              const valueBytes = bs58Decode({id: proof.proofValue});\n              should.exist(valueBytes,\n                'Expected to have a decoded proofValue.');\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "parent": "vCuBvQByi4gpnAQO-b1-e",
              "ctx": null,
              "_testId": "urn:uuid:0f186f5c-1b1b-4dec-b1c3-6f4289bcdbee",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "The proofValue property of the proof MUST be a detached EdDSA signature produced according to [RFC8032], encoded using the base-58-btc header and alphabet as described in the Multibase section of Controller Documents 1.0."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#:~:text=The%20proofValue%20property%20of%20the%20proof%20MUST%20be%20a%20detached%20EdDSA%20signature%20produced%20according%20to%20%5BRFC8032%5D%2C%20encoded%20using%20the%20base%2D58%2Dbtc%20header%20and%20alphabet%20as%20described%20in%20the%20Multibase%20section%20of%20Controller%20Documents%201.0",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 108848,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The proofValue property of the proof MUST be a detached EdDSA signature produced according to [RFC8032], encoded using the base-58-btc header and alphabet as described in the Multibase section of Controller Documents 1.0.",
              "body": "async function() {\n            this.test.link = 'https://w3c.github.io/vc-di-eddsa/#:~:text=The%20proofValue%20property%20of%20the%20proof%20MUST%20be%20a%20detached%20EdDSA%20signature%20produced%20according%20to%20%5BRFC8032%5D%2C%20encoded%20using%20the%20base%2D58%2Dbtc%20header%20and%20alphabet%20as%20described%20in%20the%20Multibase%20section%20of%20Controller%20Documents%201.0';\n            commonAssert();\n            for(const proof of eddsa2022Proofs) {\n              should.exist(proof.proofValue,\n                'Expected a proof value on the proof.');\n              const valueBytes = bs58Decode({id: proof.proofValue});\n              should.exist(valueBytes,\n                'Expected to have a decoded proofValue.');\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "parent": "Sa3WkRiEm53gUJOGht4YG",
              "ctx": null,
              "_testId": "urn:uuid:c765d3ae-7c1c-4d31-aa73-64bd67f7e728",
              "cell": {
                "columnId": "bovine",
                "rowId": "The proofValue property of the proof MUST be a detached EdDSA signature produced according to [RFC8032], encoded using the base-58-btc header and alphabet as described in the Multibase section of Controller Documents 1.0."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#:~:text=The%20proofValue%20property%20of%20the%20proof%20MUST%20be%20a%20detached%20EdDSA%20signature%20produced%20according%20to%20%5BRFC8032%5D%2C%20encoded%20using%20the%20base%2D58%2Dbtc%20header%20and%20alphabet%20as%20described%20in%20the%20Multibase%20section%20of%20Controller%20Documents%201.0",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 108997,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            }
          ]
        }
      ]
    },
    {
      "title": "eddsa-jcs-2022 - Data Model - Verification Methods",
      "ctx": null,
      "suites": [
        {
          "title": "apicatalog.com",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The publicKeyMultibase value of the verification method MUST start with the base-58-btc prefix (z), as defined in the Multibase section of Controller Documents 1.0.",
              "body": "async function() {\n            this.test.link = 'https://w3c.github.io/vc-di-eddsa/#:~:text=The%20publicKeyMultibase%20value%20of%20the%20verification%20method%20MUST%20start%20with%20the%20base%2D58%2Dbtc%20prefix%20(z)%2C%20as%20defined%20in%20the%20Multibase%20section%20of%20Controller%20Documents%201.0.';\n            assertBefore();\n            verificationMethodDocuments.should.not.eql([],\n              'Expected at least one \"verificationMethodDocument\".');\n            for(const verificationMethodDocument of\n              verificationMethodDocuments) {\n              const multibase = 'z';\n              const {publicKeyMultibase} = verificationMethodDocument;\n              const isMultibaseEncoded =\n                  publicKeyMultibase.startsWith(multibase) &&\n                  shouldBeBs58(publicKeyMultibase);\n              isMultibaseEncoded.should.equal(\n                true,\n                'Expected \"publicKeyMultibase\" value of the verification ' +\n                  'method to be multibase base58-btc encoded value'\n              );\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "parent": "pjPfNlgNlFqIOjsTvIFrw",
              "ctx": null,
              "_testId": "urn:uuid:ee8c58ae-9cd3-4035-ad18-03b01a33ad87",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "The publicKeyMultibase value of the verification method MUST start with the base-58-btc prefix (z), as defined in the Multibase section of Controller Documents 1.0."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#:~:text=The%20publicKeyMultibase%20value%20of%20the%20verification%20method%20MUST%20start%20with%20the%20base%2D58%2Dbtc%20prefix%20(z)%2C%20as%20defined%20in%20the%20Multibase%20section%20of%20Controller%20Documents%201.0.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 109940,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Any other encoding MUST NOT be allowed.",
              "body": "async function() {\n            this.test.link = 'https://w3c.github.io/vc-di-eddsa/#:~:text=of%20Controller%20Documents%201.0.-,Any%20other%20encoding%20MUST%20NOT%20be%20allowed.,-Developers%20are%20advised%20to%20not';\n            assertBefore();\n            verificationMethodDocuments.should.not.eql([],\n              'Expected at least one \"verificationMethodDocument\".');\n            for(const verificationMethodDocument of\n              verificationMethodDocuments) {\n              const multibase = 'z';\n              const {publicKeyMultibase} = verificationMethodDocument;\n              const isMultibaseEncoded =\n                publicKeyMultibase.startsWith(multibase) &&\n                shouldBeBs58(publicKeyMultibase);\n              isMultibaseEncoded.should.equal(\n                true,\n                'Expected \"publicKeyMultibase\" value of the verification ' +\n                'method to be multibase base58-btc encoded value'\n              );\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "parent": "pjPfNlgNlFqIOjsTvIFrw",
              "ctx": null,
              "_testId": "urn:uuid:3896c6f4-7e51-48b0-bde8-7c4a1feb5aec",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "Any other encoding MUST NOT be allowed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#:~:text=of%20Controller%20Documents%201.0.-,Any%20other%20encoding%20MUST%20NOT%20be%20allowed.,-Developers%20are%20advised%20to%20not",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 109940,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: setupRow in \"apicatalog.com\"",
              "body": "function setupRow() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "pjPfNlgNlFqIOjsTvIFrw",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "originalTitle": "\"before each\" hook: setupRow",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"apicatalog.com\"",
              "body": "async function() {\n            issuedVc = await createInitialVc({issuer, vc: validVc});\n            proofs = getProofs(issuedVc);\n            verificationMethodDocuments =\n              await getVerificationMethodDocuments(proofs);\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "pjPfNlgNlFqIOjsTvIFrw",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 108998,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 942,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "UzK3aVdhy2q-RgKdRAU4x",
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
          "_testId": "urn:uuid:7f490366-dd1a-4978-b729-0d90366358d7"
        },
        {
          "title": "Digital Bazaar",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The publicKeyMultibase value of the verification method MUST start with the base-58-btc prefix (z), as defined in the Multibase section of Controller Documents 1.0.",
              "body": "async function() {\n            this.test.link = 'https://w3c.github.io/vc-di-eddsa/#:~:text=The%20publicKeyMultibase%20value%20of%20the%20verification%20method%20MUST%20start%20with%20the%20base%2D58%2Dbtc%20prefix%20(z)%2C%20as%20defined%20in%20the%20Multibase%20section%20of%20Controller%20Documents%201.0.';\n            assertBefore();\n            verificationMethodDocuments.should.not.eql([],\n              'Expected at least one \"verificationMethodDocument\".');\n            for(const verificationMethodDocument of\n              verificationMethodDocuments) {\n              const multibase = 'z';\n              const {publicKeyMultibase} = verificationMethodDocument;\n              const isMultibaseEncoded =\n                  publicKeyMultibase.startsWith(multibase) &&\n                  shouldBeBs58(publicKeyMultibase);\n              isMultibaseEncoded.should.equal(\n                true,\n                'Expected \"publicKeyMultibase\" value of the verification ' +\n                  'method to be multibase base58-btc encoded value'\n              );\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "parent": "Nxcx3VWy0lJDD93-zee9B",
              "ctx": null,
              "_testId": "urn:uuid:12649820-6135-4824-bae8-bb9817c88219",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The publicKeyMultibase value of the verification method MUST start with the base-58-btc prefix (z), as defined in the Multibase section of Controller Documents 1.0."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#:~:text=The%20publicKeyMultibase%20value%20of%20the%20verification%20method%20MUST%20start%20with%20the%20base%2D58%2Dbtc%20prefix%20(z)%2C%20as%20defined%20in%20the%20Multibase%20section%20of%20Controller%20Documents%201.0.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 110190,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Any other encoding MUST NOT be allowed.",
              "body": "async function() {\n            this.test.link = 'https://w3c.github.io/vc-di-eddsa/#:~:text=of%20Controller%20Documents%201.0.-,Any%20other%20encoding%20MUST%20NOT%20be%20allowed.,-Developers%20are%20advised%20to%20not';\n            assertBefore();\n            verificationMethodDocuments.should.not.eql([],\n              'Expected at least one \"verificationMethodDocument\".');\n            for(const verificationMethodDocument of\n              verificationMethodDocuments) {\n              const multibase = 'z';\n              const {publicKeyMultibase} = verificationMethodDocument;\n              const isMultibaseEncoded =\n                publicKeyMultibase.startsWith(multibase) &&\n                shouldBeBs58(publicKeyMultibase);\n              isMultibaseEncoded.should.equal(\n                true,\n                'Expected \"publicKeyMultibase\" value of the verification ' +\n                'method to be multibase base58-btc encoded value'\n              );\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "parent": "Nxcx3VWy0lJDD93-zee9B",
              "ctx": null,
              "_testId": "urn:uuid:9f21c16c-8f3f-4d9e-8a98-49067fc0242b",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "Any other encoding MUST NOT be allowed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#:~:text=of%20Controller%20Documents%201.0.-,Any%20other%20encoding%20MUST%20NOT%20be%20allowed.,-Developers%20are%20advised%20to%20not",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 110191,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: setupRow in \"Digital Bazaar\"",
              "body": "function setupRow() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "Nxcx3VWy0lJDD93-zee9B",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "originalTitle": "\"before each\" hook: setupRow",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Digital Bazaar\"",
              "body": "async function() {\n            issuedVc = await createInitialVc({issuer, vc: validVc});\n            proofs = getProofs(issuedVc);\n            verificationMethodDocuments =\n              await getVerificationMethodDocuments(proofs);\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "Nxcx3VWy0lJDD93-zee9B",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 109941,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 250,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "UzK3aVdhy2q-RgKdRAU4x",
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
          "_testId": "urn:uuid:5406d61c-17f6-4d93-8de9-90a304d70160"
        },
        {
          "title": "Grotto Networking",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The publicKeyMultibase value of the verification method MUST start with the base-58-btc prefix (z), as defined in the Multibase section of Controller Documents 1.0.",
              "body": "async function() {\n            this.test.link = 'https://w3c.github.io/vc-di-eddsa/#:~:text=The%20publicKeyMultibase%20value%20of%20the%20verification%20method%20MUST%20start%20with%20the%20base%2D58%2Dbtc%20prefix%20(z)%2C%20as%20defined%20in%20the%20Multibase%20section%20of%20Controller%20Documents%201.0.';\n            assertBefore();\n            verificationMethodDocuments.should.not.eql([],\n              'Expected at least one \"verificationMethodDocument\".');\n            for(const verificationMethodDocument of\n              verificationMethodDocuments) {\n              const multibase = 'z';\n              const {publicKeyMultibase} = verificationMethodDocument;\n              const isMultibaseEncoded =\n                  publicKeyMultibase.startsWith(multibase) &&\n                  shouldBeBs58(publicKeyMultibase);\n              isMultibaseEncoded.should.equal(\n                true,\n                'Expected \"publicKeyMultibase\" value of the verification ' +\n                  'method to be multibase base58-btc encoded value'\n              );\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "parent": "2NG-96JZfgTFYfLQ6Krxx",
              "ctx": null,
              "_testId": "urn:uuid:c298f7ab-2d49-4a88-9c7a-62fbf2c77e4d",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The publicKeyMultibase value of the verification method MUST start with the base-58-btc prefix (z), as defined in the Multibase section of Controller Documents 1.0."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#:~:text=The%20publicKeyMultibase%20value%20of%20the%20verification%20method%20MUST%20start%20with%20the%20base%2D58%2Dbtc%20prefix%20(z)%2C%20as%20defined%20in%20the%20Multibase%20section%20of%20Controller%20Documents%201.0.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 110214,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Any other encoding MUST NOT be allowed.",
              "body": "async function() {\n            this.test.link = 'https://w3c.github.io/vc-di-eddsa/#:~:text=of%20Controller%20Documents%201.0.-,Any%20other%20encoding%20MUST%20NOT%20be%20allowed.,-Developers%20are%20advised%20to%20not';\n            assertBefore();\n            verificationMethodDocuments.should.not.eql([],\n              'Expected at least one \"verificationMethodDocument\".');\n            for(const verificationMethodDocument of\n              verificationMethodDocuments) {\n              const multibase = 'z';\n              const {publicKeyMultibase} = verificationMethodDocument;\n              const isMultibaseEncoded =\n                publicKeyMultibase.startsWith(multibase) &&\n                shouldBeBs58(publicKeyMultibase);\n              isMultibaseEncoded.should.equal(\n                true,\n                'Expected \"publicKeyMultibase\" value of the verification ' +\n                'method to be multibase base58-btc encoded value'\n              );\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "parent": "2NG-96JZfgTFYfLQ6Krxx",
              "ctx": null,
              "_testId": "urn:uuid:469e4ca8-661e-4e04-86df-8f3b9d7a159f",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "Any other encoding MUST NOT be allowed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#:~:text=of%20Controller%20Documents%201.0.-,Any%20other%20encoding%20MUST%20NOT%20be%20allowed.,-Developers%20are%20advised%20to%20not",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 110214,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: setupRow in \"Grotto Networking\"",
              "body": "function setupRow() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "2NG-96JZfgTFYfLQ6Krxx",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "originalTitle": "\"before each\" hook: setupRow",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Grotto Networking\"",
              "body": "async function() {\n            issuedVc = await createInitialVc({issuer, vc: validVc});\n            proofs = getProofs(issuedVc);\n            verificationMethodDocuments =\n              await getVerificationMethodDocuments(proofs);\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "2NG-96JZfgTFYfLQ6Krxx",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 110191,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 23,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "UzK3aVdhy2q-RgKdRAU4x",
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
          "_testId": "urn:uuid:6e24fb9d-c229-43ee-a682-9568ef42250f"
        },
        {
          "title": "OpSecId",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The publicKeyMultibase value of the verification method MUST start with the base-58-btc prefix (z), as defined in the Multibase section of Controller Documents 1.0.",
              "body": "async function() {\n            this.test.link = 'https://w3c.github.io/vc-di-eddsa/#:~:text=The%20publicKeyMultibase%20value%20of%20the%20verification%20method%20MUST%20start%20with%20the%20base%2D58%2Dbtc%20prefix%20(z)%2C%20as%20defined%20in%20the%20Multibase%20section%20of%20Controller%20Documents%201.0.';\n            assertBefore();\n            verificationMethodDocuments.should.not.eql([],\n              'Expected at least one \"verificationMethodDocument\".');\n            for(const verificationMethodDocument of\n              verificationMethodDocuments) {\n              const multibase = 'z';\n              const {publicKeyMultibase} = verificationMethodDocument;\n              const isMultibaseEncoded =\n                  publicKeyMultibase.startsWith(multibase) &&\n                  shouldBeBs58(publicKeyMultibase);\n              isMultibaseEncoded.should.equal(\n                true,\n                'Expected \"publicKeyMultibase\" value of the verification ' +\n                  'method to be multibase base58-btc encoded value'\n              );\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "parent": "gHMwVCm3FhXkIZtTk5g8a",
              "ctx": null,
              "_testId": "urn:uuid:9f003962-f38e-4584-88b4-aa18af7508b9",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "The publicKeyMultibase value of the verification method MUST start with the base-58-btc prefix (z), as defined in the Multibase section of Controller Documents 1.0."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#:~:text=The%20publicKeyMultibase%20value%20of%20the%20verification%20method%20MUST%20start%20with%20the%20base%2D58%2Dbtc%20prefix%20(z)%2C%20as%20defined%20in%20the%20Multibase%20section%20of%20Controller%20Documents%201.0.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 111125,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Any other encoding MUST NOT be allowed.",
              "body": "async function() {\n            this.test.link = 'https://w3c.github.io/vc-di-eddsa/#:~:text=of%20Controller%20Documents%201.0.-,Any%20other%20encoding%20MUST%20NOT%20be%20allowed.,-Developers%20are%20advised%20to%20not';\n            assertBefore();\n            verificationMethodDocuments.should.not.eql([],\n              'Expected at least one \"verificationMethodDocument\".');\n            for(const verificationMethodDocument of\n              verificationMethodDocuments) {\n              const multibase = 'z';\n              const {publicKeyMultibase} = verificationMethodDocument;\n              const isMultibaseEncoded =\n                publicKeyMultibase.startsWith(multibase) &&\n                shouldBeBs58(publicKeyMultibase);\n              isMultibaseEncoded.should.equal(\n                true,\n                'Expected \"publicKeyMultibase\" value of the verification ' +\n                'method to be multibase base58-btc encoded value'\n              );\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "parent": "gHMwVCm3FhXkIZtTk5g8a",
              "ctx": null,
              "_testId": "urn:uuid:a5e29157-52b0-4728-bd7f-e5795427b978",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "Any other encoding MUST NOT be allowed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#:~:text=of%20Controller%20Documents%201.0.-,Any%20other%20encoding%20MUST%20NOT%20be%20allowed.,-Developers%20are%20advised%20to%20not",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 111125,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: setupRow in \"OpSecId\"",
              "body": "function setupRow() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "gHMwVCm3FhXkIZtTk5g8a",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "originalTitle": "\"before each\" hook: setupRow",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"OpSecId\"",
              "body": "async function() {\n            issuedVc = await createInitialVc({issuer, vc: validVc});\n            proofs = getProofs(issuedVc);\n            verificationMethodDocuments =\n              await getVerificationMethodDocuments(proofs);\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "gHMwVCm3FhXkIZtTk5g8a",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 110214,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 911,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "UzK3aVdhy2q-RgKdRAU4x",
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
          "_testId": "urn:uuid:804488aa-099b-49de-ab30-5e17dbb62f21"
        },
        {
          "title": "bovine",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The publicKeyMultibase value of the verification method MUST start with the base-58-btc prefix (z), as defined in the Multibase section of Controller Documents 1.0.",
              "body": "async function() {\n            this.test.link = 'https://w3c.github.io/vc-di-eddsa/#:~:text=The%20publicKeyMultibase%20value%20of%20the%20verification%20method%20MUST%20start%20with%20the%20base%2D58%2Dbtc%20prefix%20(z)%2C%20as%20defined%20in%20the%20Multibase%20section%20of%20Controller%20Documents%201.0.';\n            assertBefore();\n            verificationMethodDocuments.should.not.eql([],\n              'Expected at least one \"verificationMethodDocument\".');\n            for(const verificationMethodDocument of\n              verificationMethodDocuments) {\n              const multibase = 'z';\n              const {publicKeyMultibase} = verificationMethodDocument;\n              const isMultibaseEncoded =\n                  publicKeyMultibase.startsWith(multibase) &&\n                  shouldBeBs58(publicKeyMultibase);\n              isMultibaseEncoded.should.equal(\n                true,\n                'Expected \"publicKeyMultibase\" value of the verification ' +\n                  'method to be multibase base58-btc encoded value'\n              );\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "parent": "HOMOSVHkD-U_ThPU-ewLN",
              "ctx": null,
              "_testId": "urn:uuid:13957ce6-f01b-424a-8d25-4cfd0803d270",
              "cell": {
                "columnId": "bovine",
                "rowId": "The publicKeyMultibase value of the verification method MUST start with the base-58-btc prefix (z), as defined in the Multibase section of Controller Documents 1.0."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#:~:text=The%20publicKeyMultibase%20value%20of%20the%20verification%20method%20MUST%20start%20with%20the%20base%2D58%2Dbtc%20prefix%20(z)%2C%20as%20defined%20in%20the%20Multibase%20section%20of%20Controller%20Documents%201.0.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 111273,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Any other encoding MUST NOT be allowed.",
              "body": "async function() {\n            this.test.link = 'https://w3c.github.io/vc-di-eddsa/#:~:text=of%20Controller%20Documents%201.0.-,Any%20other%20encoding%20MUST%20NOT%20be%20allowed.,-Developers%20are%20advised%20to%20not';\n            assertBefore();\n            verificationMethodDocuments.should.not.eql([],\n              'Expected at least one \"verificationMethodDocument\".');\n            for(const verificationMethodDocument of\n              verificationMethodDocuments) {\n              const multibase = 'z';\n              const {publicKeyMultibase} = verificationMethodDocument;\n              const isMultibaseEncoded =\n                publicKeyMultibase.startsWith(multibase) &&\n                shouldBeBs58(publicKeyMultibase);\n              isMultibaseEncoded.should.equal(\n                true,\n                'Expected \"publicKeyMultibase\" value of the verification ' +\n                'method to be multibase base58-btc encoded value'\n              );\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "parent": "HOMOSVHkD-U_ThPU-ewLN",
              "ctx": null,
              "_testId": "urn:uuid:40cac3b1-15e1-4c73-9735-bf560c05bec2",
              "cell": {
                "columnId": "bovine",
                "rowId": "Any other encoding MUST NOT be allowed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#:~:text=of%20Controller%20Documents%201.0.-,Any%20other%20encoding%20MUST%20NOT%20be%20allowed.,-Developers%20are%20advised%20to%20not",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 111273,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: setupRow in \"bovine\"",
              "body": "function setupRow() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "HOMOSVHkD-U_ThPU-ewLN",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "originalTitle": "\"before each\" hook: setupRow",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"bovine\"",
              "body": "async function() {\n            issuedVc = await createInitialVc({issuer, vc: validVc});\n            proofs = getProofs(issuedVc);\n            verificationMethodDocuments =\n              await getVerificationMethodDocuments(proofs);\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "HOMOSVHkD-U_ThPU-ewLN",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 111126,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 147,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "UzK3aVdhy2q-RgKdRAU4x",
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
          "_testId": "urn:uuid:390a0184-5d63-47fa-93dd-13753304f895"
        }
      ],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [
        {
          "title": "\"before all\" hook in \"eddsa-jcs-2022 - Data Model - Verification Methods\"",
          "body": "async function() {\n        const credentials = await generateTestData();\n        validVc = credentials.clone('validVc');\n      }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "UzK3aVdhy2q-RgKdRAU4x",
          "ctx": null,
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 108998,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 1,
          "_error": null
        }
      ],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "Ika60aoT9ncTXtTubybzs",
      "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Implementer",
      "_testId": "urn:uuid:a71c5d57-f1aa-468f-89ec-d9ef434bd436",
      "columns": [
        "apicatalog.com",
        "Digital Bazaar",
        "Grotto Networking",
        "OpSecId",
        "bovine"
      ],
      "rows": [
        {
          "id": "The publicKeyMultibase value of the verification method MUST start with the base-58-btc prefix (z), as defined in the Multibase section of Controller Documents 1.0.",
          "link": "https://w3c.github.io/vc-di-eddsa/#:~:text=The%20publicKeyMultibase%20value%20of%20the%20verification%20method%20MUST%20start%20with%20the%20base%2D58%2Dbtc%20prefix%20(z)%2C%20as%20defined%20in%20the%20Multibase%20section%20of%20Controller%20Documents%201.0.",
          "cells": [
            {
              "type": "test",
              "title": "The publicKeyMultibase value of the verification method MUST start with the base-58-btc prefix (z), as defined in the Multibase section of Controller Documents 1.0.",
              "body": "async function() {\n            this.test.link = 'https://w3c.github.io/vc-di-eddsa/#:~:text=The%20publicKeyMultibase%20value%20of%20the%20verification%20method%20MUST%20start%20with%20the%20base%2D58%2Dbtc%20prefix%20(z)%2C%20as%20defined%20in%20the%20Multibase%20section%20of%20Controller%20Documents%201.0.';\n            assertBefore();\n            verificationMethodDocuments.should.not.eql([],\n              'Expected at least one \"verificationMethodDocument\".');\n            for(const verificationMethodDocument of\n              verificationMethodDocuments) {\n              const multibase = 'z';\n              const {publicKeyMultibase} = verificationMethodDocument;\n              const isMultibaseEncoded =\n                  publicKeyMultibase.startsWith(multibase) &&\n                  shouldBeBs58(publicKeyMultibase);\n              isMultibaseEncoded.should.equal(\n                true,\n                'Expected \"publicKeyMultibase\" value of the verification ' +\n                  'method to be multibase base58-btc encoded value'\n              );\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "parent": "pjPfNlgNlFqIOjsTvIFrw",
              "ctx": null,
              "_testId": "urn:uuid:ee8c58ae-9cd3-4035-ad18-03b01a33ad87",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "The publicKeyMultibase value of the verification method MUST start with the base-58-btc prefix (z), as defined in the Multibase section of Controller Documents 1.0."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#:~:text=The%20publicKeyMultibase%20value%20of%20the%20verification%20method%20MUST%20start%20with%20the%20base%2D58%2Dbtc%20prefix%20(z)%2C%20as%20defined%20in%20the%20Multibase%20section%20of%20Controller%20Documents%201.0.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 109940,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The publicKeyMultibase value of the verification method MUST start with the base-58-btc prefix (z), as defined in the Multibase section of Controller Documents 1.0.",
              "body": "async function() {\n            this.test.link = 'https://w3c.github.io/vc-di-eddsa/#:~:text=The%20publicKeyMultibase%20value%20of%20the%20verification%20method%20MUST%20start%20with%20the%20base%2D58%2Dbtc%20prefix%20(z)%2C%20as%20defined%20in%20the%20Multibase%20section%20of%20Controller%20Documents%201.0.';\n            assertBefore();\n            verificationMethodDocuments.should.not.eql([],\n              'Expected at least one \"verificationMethodDocument\".');\n            for(const verificationMethodDocument of\n              verificationMethodDocuments) {\n              const multibase = 'z';\n              const {publicKeyMultibase} = verificationMethodDocument;\n              const isMultibaseEncoded =\n                  publicKeyMultibase.startsWith(multibase) &&\n                  shouldBeBs58(publicKeyMultibase);\n              isMultibaseEncoded.should.equal(\n                true,\n                'Expected \"publicKeyMultibase\" value of the verification ' +\n                  'method to be multibase base58-btc encoded value'\n              );\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "parent": "Nxcx3VWy0lJDD93-zee9B",
              "ctx": null,
              "_testId": "urn:uuid:12649820-6135-4824-bae8-bb9817c88219",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The publicKeyMultibase value of the verification method MUST start with the base-58-btc prefix (z), as defined in the Multibase section of Controller Documents 1.0."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#:~:text=The%20publicKeyMultibase%20value%20of%20the%20verification%20method%20MUST%20start%20with%20the%20base%2D58%2Dbtc%20prefix%20(z)%2C%20as%20defined%20in%20the%20Multibase%20section%20of%20Controller%20Documents%201.0.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 110190,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The publicKeyMultibase value of the verification method MUST start with the base-58-btc prefix (z), as defined in the Multibase section of Controller Documents 1.0.",
              "body": "async function() {\n            this.test.link = 'https://w3c.github.io/vc-di-eddsa/#:~:text=The%20publicKeyMultibase%20value%20of%20the%20verification%20method%20MUST%20start%20with%20the%20base%2D58%2Dbtc%20prefix%20(z)%2C%20as%20defined%20in%20the%20Multibase%20section%20of%20Controller%20Documents%201.0.';\n            assertBefore();\n            verificationMethodDocuments.should.not.eql([],\n              'Expected at least one \"verificationMethodDocument\".');\n            for(const verificationMethodDocument of\n              verificationMethodDocuments) {\n              const multibase = 'z';\n              const {publicKeyMultibase} = verificationMethodDocument;\n              const isMultibaseEncoded =\n                  publicKeyMultibase.startsWith(multibase) &&\n                  shouldBeBs58(publicKeyMultibase);\n              isMultibaseEncoded.should.equal(\n                true,\n                'Expected \"publicKeyMultibase\" value of the verification ' +\n                  'method to be multibase base58-btc encoded value'\n              );\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "parent": "2NG-96JZfgTFYfLQ6Krxx",
              "ctx": null,
              "_testId": "urn:uuid:c298f7ab-2d49-4a88-9c7a-62fbf2c77e4d",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The publicKeyMultibase value of the verification method MUST start with the base-58-btc prefix (z), as defined in the Multibase section of Controller Documents 1.0."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#:~:text=The%20publicKeyMultibase%20value%20of%20the%20verification%20method%20MUST%20start%20with%20the%20base%2D58%2Dbtc%20prefix%20(z)%2C%20as%20defined%20in%20the%20Multibase%20section%20of%20Controller%20Documents%201.0.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 110214,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The publicKeyMultibase value of the verification method MUST start with the base-58-btc prefix (z), as defined in the Multibase section of Controller Documents 1.0.",
              "body": "async function() {\n            this.test.link = 'https://w3c.github.io/vc-di-eddsa/#:~:text=The%20publicKeyMultibase%20value%20of%20the%20verification%20method%20MUST%20start%20with%20the%20base%2D58%2Dbtc%20prefix%20(z)%2C%20as%20defined%20in%20the%20Multibase%20section%20of%20Controller%20Documents%201.0.';\n            assertBefore();\n            verificationMethodDocuments.should.not.eql([],\n              'Expected at least one \"verificationMethodDocument\".');\n            for(const verificationMethodDocument of\n              verificationMethodDocuments) {\n              const multibase = 'z';\n              const {publicKeyMultibase} = verificationMethodDocument;\n              const isMultibaseEncoded =\n                  publicKeyMultibase.startsWith(multibase) &&\n                  shouldBeBs58(publicKeyMultibase);\n              isMultibaseEncoded.should.equal(\n                true,\n                'Expected \"publicKeyMultibase\" value of the verification ' +\n                  'method to be multibase base58-btc encoded value'\n              );\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "parent": "gHMwVCm3FhXkIZtTk5g8a",
              "ctx": null,
              "_testId": "urn:uuid:9f003962-f38e-4584-88b4-aa18af7508b9",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "The publicKeyMultibase value of the verification method MUST start with the base-58-btc prefix (z), as defined in the Multibase section of Controller Documents 1.0."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#:~:text=The%20publicKeyMultibase%20value%20of%20the%20verification%20method%20MUST%20start%20with%20the%20base%2D58%2Dbtc%20prefix%20(z)%2C%20as%20defined%20in%20the%20Multibase%20section%20of%20Controller%20Documents%201.0.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 111125,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The publicKeyMultibase value of the verification method MUST start with the base-58-btc prefix (z), as defined in the Multibase section of Controller Documents 1.0.",
              "body": "async function() {\n            this.test.link = 'https://w3c.github.io/vc-di-eddsa/#:~:text=The%20publicKeyMultibase%20value%20of%20the%20verification%20method%20MUST%20start%20with%20the%20base%2D58%2Dbtc%20prefix%20(z)%2C%20as%20defined%20in%20the%20Multibase%20section%20of%20Controller%20Documents%201.0.';\n            assertBefore();\n            verificationMethodDocuments.should.not.eql([],\n              'Expected at least one \"verificationMethodDocument\".');\n            for(const verificationMethodDocument of\n              verificationMethodDocuments) {\n              const multibase = 'z';\n              const {publicKeyMultibase} = verificationMethodDocument;\n              const isMultibaseEncoded =\n                  publicKeyMultibase.startsWith(multibase) &&\n                  shouldBeBs58(publicKeyMultibase);\n              isMultibaseEncoded.should.equal(\n                true,\n                'Expected \"publicKeyMultibase\" value of the verification ' +\n                  'method to be multibase base58-btc encoded value'\n              );\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "parent": "HOMOSVHkD-U_ThPU-ewLN",
              "ctx": null,
              "_testId": "urn:uuid:13957ce6-f01b-424a-8d25-4cfd0803d270",
              "cell": {
                "columnId": "bovine",
                "rowId": "The publicKeyMultibase value of the verification method MUST start with the base-58-btc prefix (z), as defined in the Multibase section of Controller Documents 1.0."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#:~:text=The%20publicKeyMultibase%20value%20of%20the%20verification%20method%20MUST%20start%20with%20the%20base%2D58%2Dbtc%20prefix%20(z)%2C%20as%20defined%20in%20the%20Multibase%20section%20of%20Controller%20Documents%201.0.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 111273,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "Any other encoding MUST NOT be allowed.",
          "link": "https://w3c.github.io/vc-di-eddsa/#:~:text=of%20Controller%20Documents%201.0.-,Any%20other%20encoding%20MUST%20NOT%20be%20allowed.,-Developers%20are%20advised%20to%20not",
          "cells": [
            {
              "type": "test",
              "title": "Any other encoding MUST NOT be allowed.",
              "body": "async function() {\n            this.test.link = 'https://w3c.github.io/vc-di-eddsa/#:~:text=of%20Controller%20Documents%201.0.-,Any%20other%20encoding%20MUST%20NOT%20be%20allowed.,-Developers%20are%20advised%20to%20not';\n            assertBefore();\n            verificationMethodDocuments.should.not.eql([],\n              'Expected at least one \"verificationMethodDocument\".');\n            for(const verificationMethodDocument of\n              verificationMethodDocuments) {\n              const multibase = 'z';\n              const {publicKeyMultibase} = verificationMethodDocument;\n              const isMultibaseEncoded =\n                publicKeyMultibase.startsWith(multibase) &&\n                shouldBeBs58(publicKeyMultibase);\n              isMultibaseEncoded.should.equal(\n                true,\n                'Expected \"publicKeyMultibase\" value of the verification ' +\n                'method to be multibase base58-btc encoded value'\n              );\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "parent": "pjPfNlgNlFqIOjsTvIFrw",
              "ctx": null,
              "_testId": "urn:uuid:3896c6f4-7e51-48b0-bde8-7c4a1feb5aec",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "Any other encoding MUST NOT be allowed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#:~:text=of%20Controller%20Documents%201.0.-,Any%20other%20encoding%20MUST%20NOT%20be%20allowed.,-Developers%20are%20advised%20to%20not",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 109940,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Any other encoding MUST NOT be allowed.",
              "body": "async function() {\n            this.test.link = 'https://w3c.github.io/vc-di-eddsa/#:~:text=of%20Controller%20Documents%201.0.-,Any%20other%20encoding%20MUST%20NOT%20be%20allowed.,-Developers%20are%20advised%20to%20not';\n            assertBefore();\n            verificationMethodDocuments.should.not.eql([],\n              'Expected at least one \"verificationMethodDocument\".');\n            for(const verificationMethodDocument of\n              verificationMethodDocuments) {\n              const multibase = 'z';\n              const {publicKeyMultibase} = verificationMethodDocument;\n              const isMultibaseEncoded =\n                publicKeyMultibase.startsWith(multibase) &&\n                shouldBeBs58(publicKeyMultibase);\n              isMultibaseEncoded.should.equal(\n                true,\n                'Expected \"publicKeyMultibase\" value of the verification ' +\n                'method to be multibase base58-btc encoded value'\n              );\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "parent": "Nxcx3VWy0lJDD93-zee9B",
              "ctx": null,
              "_testId": "urn:uuid:9f21c16c-8f3f-4d9e-8a98-49067fc0242b",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "Any other encoding MUST NOT be allowed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#:~:text=of%20Controller%20Documents%201.0.-,Any%20other%20encoding%20MUST%20NOT%20be%20allowed.,-Developers%20are%20advised%20to%20not",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 110191,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Any other encoding MUST NOT be allowed.",
              "body": "async function() {\n            this.test.link = 'https://w3c.github.io/vc-di-eddsa/#:~:text=of%20Controller%20Documents%201.0.-,Any%20other%20encoding%20MUST%20NOT%20be%20allowed.,-Developers%20are%20advised%20to%20not';\n            assertBefore();\n            verificationMethodDocuments.should.not.eql([],\n              'Expected at least one \"verificationMethodDocument\".');\n            for(const verificationMethodDocument of\n              verificationMethodDocuments) {\n              const multibase = 'z';\n              const {publicKeyMultibase} = verificationMethodDocument;\n              const isMultibaseEncoded =\n                publicKeyMultibase.startsWith(multibase) &&\n                shouldBeBs58(publicKeyMultibase);\n              isMultibaseEncoded.should.equal(\n                true,\n                'Expected \"publicKeyMultibase\" value of the verification ' +\n                'method to be multibase base58-btc encoded value'\n              );\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "parent": "2NG-96JZfgTFYfLQ6Krxx",
              "ctx": null,
              "_testId": "urn:uuid:469e4ca8-661e-4e04-86df-8f3b9d7a159f",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "Any other encoding MUST NOT be allowed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#:~:text=of%20Controller%20Documents%201.0.-,Any%20other%20encoding%20MUST%20NOT%20be%20allowed.,-Developers%20are%20advised%20to%20not",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 110214,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Any other encoding MUST NOT be allowed.",
              "body": "async function() {\n            this.test.link = 'https://w3c.github.io/vc-di-eddsa/#:~:text=of%20Controller%20Documents%201.0.-,Any%20other%20encoding%20MUST%20NOT%20be%20allowed.,-Developers%20are%20advised%20to%20not';\n            assertBefore();\n            verificationMethodDocuments.should.not.eql([],\n              'Expected at least one \"verificationMethodDocument\".');\n            for(const verificationMethodDocument of\n              verificationMethodDocuments) {\n              const multibase = 'z';\n              const {publicKeyMultibase} = verificationMethodDocument;\n              const isMultibaseEncoded =\n                publicKeyMultibase.startsWith(multibase) &&\n                shouldBeBs58(publicKeyMultibase);\n              isMultibaseEncoded.should.equal(\n                true,\n                'Expected \"publicKeyMultibase\" value of the verification ' +\n                'method to be multibase base58-btc encoded value'\n              );\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "parent": "gHMwVCm3FhXkIZtTk5g8a",
              "ctx": null,
              "_testId": "urn:uuid:a5e29157-52b0-4728-bd7f-e5795427b978",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "Any other encoding MUST NOT be allowed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#:~:text=of%20Controller%20Documents%201.0.-,Any%20other%20encoding%20MUST%20NOT%20be%20allowed.,-Developers%20are%20advised%20to%20not",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 111125,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Any other encoding MUST NOT be allowed.",
              "body": "async function() {\n            this.test.link = 'https://w3c.github.io/vc-di-eddsa/#:~:text=of%20Controller%20Documents%201.0.-,Any%20other%20encoding%20MUST%20NOT%20be%20allowed.,-Developers%20are%20advised%20to%20not';\n            assertBefore();\n            verificationMethodDocuments.should.not.eql([],\n              'Expected at least one \"verificationMethodDocument\".');\n            for(const verificationMethodDocument of\n              verificationMethodDocuments) {\n              const multibase = 'z';\n              const {publicKeyMultibase} = verificationMethodDocument;\n              const isMultibaseEncoded =\n                publicKeyMultibase.startsWith(multibase) &&\n                shouldBeBs58(publicKeyMultibase);\n              isMultibaseEncoded.should.equal(\n                true,\n                'Expected \"publicKeyMultibase\" value of the verification ' +\n                'method to be multibase base58-btc encoded value'\n              );\n            }\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/70-data-model.js",
              "parent": "HOMOSVHkD-U_ThPU-ewLN",
              "ctx": null,
              "_testId": "urn:uuid:40cac3b1-15e1-4c73-9735-bf560c05bec2",
              "cell": {
                "columnId": "bovine",
                "rowId": "Any other encoding MUST NOT be allowed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#:~:text=of%20Controller%20Documents%201.0.-,Any%20other%20encoding%20MUST%20NOT%20be%20allowed.,-Developers%20are%20advised%20to%20not",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 111273,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        }
      ]
    },
    {
      "title": "eddsa-jcs-2022 - Algorithms - Transformation",
      "ctx": null,
      "suites": [
        {
          "title": "apicatalog.com",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The transformation options MUST contain a type identifier for the cryptographic suite (type) and a cryptosuite identifier (cryptosuite).",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-jcs-2022';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.type, 'Expected a type identifier on ' +\n                              'the proof.');\n            should.exist(proof.cryptosuite,\n              'Expected a cryptosuite identifier on the proof.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "ZCALI31uHwJM-IgNS3hY4",
              "ctx": null,
              "_testId": "urn:uuid:6bfa59ba-9543-4776-b339-99644783c533",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "The transformation options MUST contain a type identifier for the cryptographic suite (type) and a cryptosuite identifier (cryptosuite)."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-jcs-2022",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 116628,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Whenever this algorithm encodes strings, it MUST use UTF-8 encoding.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-jcs-2022';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof?.proofValue,\n              'Expected proofValue to exist.');\n            isValidUtf8(proof.proofValue).should.equal(\n              true,\n              'Expected proofValue value to be a valid UTF-8 encoded string.'\n            );\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "ZCALI31uHwJM-IgNS3hY4",
              "ctx": null,
              "_testId": "urn:uuid:115e3a55-4f61-4c8a-9426-544836126b1f",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "Whenever this algorithm encodes strings, it MUST use UTF-8 encoding."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-jcs-2022",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 116629,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If options.type is not set to the string DataIntegrityProof and options.cryptosuite is not set to the string eddsa-jcs-2022, an error MUST be raised that SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-jcs-2022:~:text=If%20options.type%20is%20not%20set%20to%20the%20string%20DataIntegrityProof%20and%20options.cryptosuite%20is%20not%20set%20to%20the%20string%20eddsa%2Djcs%2D2022%2C%20an%20error%20MUST%20be%20raised%20that%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.type,\n              'Expected a type identifier on the proof.');\n            should.exist(proof.cryptosuite,\n              'Expected a cryptosuite identifier on the proof.');\n            proof.type.should.equal('DataIntegrityProof',\n              'Expected DataIntegrityProof type.');\n            proof.cryptosuite.should.equal('eddsa-jcs-2022',\n              'Expected eddsa-jcs-2022 cryptosuite.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "ZCALI31uHwJM-IgNS3hY4",
              "ctx": null,
              "_testId": "urn:uuid:949d43f8-7114-4986-808f-6d351a3ee6b8",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If options.type is not set to the string DataIntegrityProof and options.cryptosuite is not set to the string eddsa-jcs-2022, an error MUST be raised that SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-jcs-2022:~:text=If%20options.type%20is%20not%20set%20to%20the%20string%20DataIntegrityProof%20and%20options.cryptosuite%20is%20not%20set%20to%20the%20string%20eddsa%2Djcs%2D2022%2C%20an%20error%20MUST%20be%20raised%20that%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 116629,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: setupRow in \"apicatalog.com\"",
              "body": "function setupRow() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "ZCALI31uHwJM-IgNS3hY4",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "originalTitle": "\"before each\" hook: setupRow",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"apicatalog.com\"",
              "body": "async function() {\n          issuedVc = await createInitialVc({issuer, vc: validVc});\n          proofs = getProofs(issuedVc);\n          if(proofs?.length) {\n            eddsa2022Proofs = proofs.filter(\n              proof => proof?.cryptosuite === cryptosuite);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "ZCALI31uHwJM-IgNS3hY4",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 111275,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 5353,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "qpRDD_oeclGmEOR6xt4Pj",
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
          "_testId": "urn:uuid:03bb0389-5fbf-4a55-a6d4-77a819438774"
        },
        {
          "title": "Digital Bazaar",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The transformation options MUST contain a type identifier for the cryptographic suite (type) and a cryptosuite identifier (cryptosuite).",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-jcs-2022';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.type, 'Expected a type identifier on ' +\n                              'the proof.');\n            should.exist(proof.cryptosuite,\n              'Expected a cryptosuite identifier on the proof.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "tFm0Y1RTFCUmAeF-uVnTK",
              "ctx": null,
              "_testId": "urn:uuid:540627a3-ada0-4859-bd00-1eeab5192526",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The transformation options MUST contain a type identifier for the cryptographic suite (type) and a cryptosuite identifier (cryptosuite)."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-jcs-2022",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 116788,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Whenever this algorithm encodes strings, it MUST use UTF-8 encoding.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-jcs-2022';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof?.proofValue,\n              'Expected proofValue to exist.');\n            isValidUtf8(proof.proofValue).should.equal(\n              true,\n              'Expected proofValue value to be a valid UTF-8 encoded string.'\n            );\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "tFm0Y1RTFCUmAeF-uVnTK",
              "ctx": null,
              "_testId": "urn:uuid:7bc14a86-6272-4065-b92e-6ab91db86004",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "Whenever this algorithm encodes strings, it MUST use UTF-8 encoding."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-jcs-2022",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 116789,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If options.type is not set to the string DataIntegrityProof and options.cryptosuite is not set to the string eddsa-jcs-2022, an error MUST be raised that SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-jcs-2022:~:text=If%20options.type%20is%20not%20set%20to%20the%20string%20DataIntegrityProof%20and%20options.cryptosuite%20is%20not%20set%20to%20the%20string%20eddsa%2Djcs%2D2022%2C%20an%20error%20MUST%20be%20raised%20that%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.type,\n              'Expected a type identifier on the proof.');\n            should.exist(proof.cryptosuite,\n              'Expected a cryptosuite identifier on the proof.');\n            proof.type.should.equal('DataIntegrityProof',\n              'Expected DataIntegrityProof type.');\n            proof.cryptosuite.should.equal('eddsa-jcs-2022',\n              'Expected eddsa-jcs-2022 cryptosuite.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "tFm0Y1RTFCUmAeF-uVnTK",
              "ctx": null,
              "_testId": "urn:uuid:add017d6-1bf8-4a85-b3cd-1ff16d588947",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If options.type is not set to the string DataIntegrityProof and options.cryptosuite is not set to the string eddsa-jcs-2022, an error MUST be raised that SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-jcs-2022:~:text=If%20options.type%20is%20not%20set%20to%20the%20string%20DataIntegrityProof%20and%20options.cryptosuite%20is%20not%20set%20to%20the%20string%20eddsa%2Djcs%2D2022%2C%20an%20error%20MUST%20be%20raised%20that%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 116789,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: setupRow in \"Digital Bazaar\"",
              "body": "function setupRow() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "tFm0Y1RTFCUmAeF-uVnTK",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "originalTitle": "\"before each\" hook: setupRow",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Digital Bazaar\"",
              "body": "async function() {\n          issuedVc = await createInitialVc({issuer, vc: validVc});\n          proofs = getProofs(issuedVc);\n          if(proofs?.length) {\n            eddsa2022Proofs = proofs.filter(\n              proof => proof?.cryptosuite === cryptosuite);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "tFm0Y1RTFCUmAeF-uVnTK",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 116629,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 159,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "qpRDD_oeclGmEOR6xt4Pj",
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
          "_testId": "urn:uuid:630c3fc1-dc43-4ab3-8592-fd44141d7308"
        },
        {
          "title": "Grotto Networking",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The transformation options MUST contain a type identifier for the cryptographic suite (type) and a cryptosuite identifier (cryptosuite).",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-jcs-2022';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.type, 'Expected a type identifier on ' +\n                              'the proof.');\n            should.exist(proof.cryptosuite,\n              'Expected a cryptosuite identifier on the proof.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "S2KVNeCbTwrbJHem-vZCj",
              "ctx": null,
              "_testId": "urn:uuid:c8acfd52-27e5-4afc-83d2-d5b89c1e7bcd",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The transformation options MUST contain a type identifier for the cryptographic suite (type) and a cryptosuite identifier (cryptosuite)."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-jcs-2022",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 116850,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Whenever this algorithm encodes strings, it MUST use UTF-8 encoding.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-jcs-2022';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof?.proofValue,\n              'Expected proofValue to exist.');\n            isValidUtf8(proof.proofValue).should.equal(\n              true,\n              'Expected proofValue value to be a valid UTF-8 encoded string.'\n            );\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "S2KVNeCbTwrbJHem-vZCj",
              "ctx": null,
              "_testId": "urn:uuid:491a5822-9612-4eae-bd4f-17bb092b1042",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "Whenever this algorithm encodes strings, it MUST use UTF-8 encoding."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-jcs-2022",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 116851,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If options.type is not set to the string DataIntegrityProof and options.cryptosuite is not set to the string eddsa-jcs-2022, an error MUST be raised that SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-jcs-2022:~:text=If%20options.type%20is%20not%20set%20to%20the%20string%20DataIntegrityProof%20and%20options.cryptosuite%20is%20not%20set%20to%20the%20string%20eddsa%2Djcs%2D2022%2C%20an%20error%20MUST%20be%20raised%20that%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.type,\n              'Expected a type identifier on the proof.');\n            should.exist(proof.cryptosuite,\n              'Expected a cryptosuite identifier on the proof.');\n            proof.type.should.equal('DataIntegrityProof',\n              'Expected DataIntegrityProof type.');\n            proof.cryptosuite.should.equal('eddsa-jcs-2022',\n              'Expected eddsa-jcs-2022 cryptosuite.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "S2KVNeCbTwrbJHem-vZCj",
              "ctx": null,
              "_testId": "urn:uuid:677cfb1c-81d5-49ef-8ec7-82a31f2461a9",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If options.type is not set to the string DataIntegrityProof and options.cryptosuite is not set to the string eddsa-jcs-2022, an error MUST be raised that SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-jcs-2022:~:text=If%20options.type%20is%20not%20set%20to%20the%20string%20DataIntegrityProof%20and%20options.cryptosuite%20is%20not%20set%20to%20the%20string%20eddsa%2Djcs%2D2022%2C%20an%20error%20MUST%20be%20raised%20that%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 116852,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: setupRow in \"Grotto Networking\"",
              "body": "function setupRow() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "S2KVNeCbTwrbJHem-vZCj",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "originalTitle": "\"before each\" hook: setupRow",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Grotto Networking\"",
              "body": "async function() {\n          issuedVc = await createInitialVc({issuer, vc: validVc});\n          proofs = getProofs(issuedVc);\n          if(proofs?.length) {\n            eddsa2022Proofs = proofs.filter(\n              proof => proof?.cryptosuite === cryptosuite);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "S2KVNeCbTwrbJHem-vZCj",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 116789,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 61,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "qpRDD_oeclGmEOR6xt4Pj",
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
          "_testId": "urn:uuid:3ae735e5-36e9-42a0-b944-f5235d872174"
        },
        {
          "title": "OpSecId",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The transformation options MUST contain a type identifier for the cryptographic suite (type) and a cryptosuite identifier (cryptosuite).",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-jcs-2022';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.type, 'Expected a type identifier on ' +\n                              'the proof.');\n            should.exist(proof.cryptosuite,\n              'Expected a cryptosuite identifier on the proof.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "86kLqOwRoY9wxHiLjlsIr",
              "ctx": null,
              "_testId": "urn:uuid:7d3a06b5-daed-46af-b8eb-1f34430ebaed",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "The transformation options MUST contain a type identifier for the cryptographic suite (type) and a cryptosuite identifier (cryptosuite)."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-jcs-2022",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 117496,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Whenever this algorithm encodes strings, it MUST use UTF-8 encoding.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-jcs-2022';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof?.proofValue,\n              'Expected proofValue to exist.');\n            isValidUtf8(proof.proofValue).should.equal(\n              true,\n              'Expected proofValue value to be a valid UTF-8 encoded string.'\n            );\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "86kLqOwRoY9wxHiLjlsIr",
              "ctx": null,
              "_testId": "urn:uuid:2e5208e9-2560-463b-a7ba-4f483ed34a46",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "Whenever this algorithm encodes strings, it MUST use UTF-8 encoding."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-jcs-2022",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 117497,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If options.type is not set to the string DataIntegrityProof and options.cryptosuite is not set to the string eddsa-jcs-2022, an error MUST be raised that SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-jcs-2022:~:text=If%20options.type%20is%20not%20set%20to%20the%20string%20DataIntegrityProof%20and%20options.cryptosuite%20is%20not%20set%20to%20the%20string%20eddsa%2Djcs%2D2022%2C%20an%20error%20MUST%20be%20raised%20that%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.type,\n              'Expected a type identifier on the proof.');\n            should.exist(proof.cryptosuite,\n              'Expected a cryptosuite identifier on the proof.');\n            proof.type.should.equal('DataIntegrityProof',\n              'Expected DataIntegrityProof type.');\n            proof.cryptosuite.should.equal('eddsa-jcs-2022',\n              'Expected eddsa-jcs-2022 cryptosuite.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "86kLqOwRoY9wxHiLjlsIr",
              "ctx": null,
              "_testId": "urn:uuid:f515f246-fef0-4ced-80d7-aad8f11c825e",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "If options.type is not set to the string DataIntegrityProof and options.cryptosuite is not set to the string eddsa-jcs-2022, an error MUST be raised that SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-jcs-2022:~:text=If%20options.type%20is%20not%20set%20to%20the%20string%20DataIntegrityProof%20and%20options.cryptosuite%20is%20not%20set%20to%20the%20string%20eddsa%2Djcs%2D2022%2C%20an%20error%20MUST%20be%20raised%20that%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 117497,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: setupRow in \"OpSecId\"",
              "body": "function setupRow() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "86kLqOwRoY9wxHiLjlsIr",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "originalTitle": "\"before each\" hook: setupRow",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"OpSecId\"",
              "body": "async function() {\n          issuedVc = await createInitialVc({issuer, vc: validVc});\n          proofs = getProofs(issuedVc);\n          if(proofs?.length) {\n            eddsa2022Proofs = proofs.filter(\n              proof => proof?.cryptosuite === cryptosuite);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "86kLqOwRoY9wxHiLjlsIr",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 116852,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 644,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "qpRDD_oeclGmEOR6xt4Pj",
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
          "_testId": "urn:uuid:b2b96ebd-fcf0-44e0-9a90-da37fbbacff0"
        },
        {
          "title": "bovine",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The transformation options MUST contain a type identifier for the cryptographic suite (type) and a cryptosuite identifier (cryptosuite).",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-jcs-2022';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.type, 'Expected a type identifier on ' +\n                              'the proof.');\n            should.exist(proof.cryptosuite,\n              'Expected a cryptosuite identifier on the proof.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "G3hPeZQ4EarvjWgep-8sQ",
              "ctx": null,
              "_testId": "urn:uuid:a9806595-65bf-4ee7-b441-14ed7824aecb",
              "cell": {
                "columnId": "bovine",
                "rowId": "The transformation options MUST contain a type identifier for the cryptographic suite (type) and a cryptosuite identifier (cryptosuite)."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-jcs-2022",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 118107,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Whenever this algorithm encodes strings, it MUST use UTF-8 encoding.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-jcs-2022';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof?.proofValue,\n              'Expected proofValue to exist.');\n            isValidUtf8(proof.proofValue).should.equal(\n              true,\n              'Expected proofValue value to be a valid UTF-8 encoded string.'\n            );\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "G3hPeZQ4EarvjWgep-8sQ",
              "ctx": null,
              "_testId": "urn:uuid:e2afe702-48d7-429d-a7bd-07e6fa9e4645",
              "cell": {
                "columnId": "bovine",
                "rowId": "Whenever this algorithm encodes strings, it MUST use UTF-8 encoding."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-jcs-2022",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 118108,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If options.type is not set to the string DataIntegrityProof and options.cryptosuite is not set to the string eddsa-jcs-2022, an error MUST be raised that SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-jcs-2022:~:text=If%20options.type%20is%20not%20set%20to%20the%20string%20DataIntegrityProof%20and%20options.cryptosuite%20is%20not%20set%20to%20the%20string%20eddsa%2Djcs%2D2022%2C%20an%20error%20MUST%20be%20raised%20that%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.type,\n              'Expected a type identifier on the proof.');\n            should.exist(proof.cryptosuite,\n              'Expected a cryptosuite identifier on the proof.');\n            proof.type.should.equal('DataIntegrityProof',\n              'Expected DataIntegrityProof type.');\n            proof.cryptosuite.should.equal('eddsa-jcs-2022',\n              'Expected eddsa-jcs-2022 cryptosuite.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "G3hPeZQ4EarvjWgep-8sQ",
              "ctx": null,
              "_testId": "urn:uuid:c06d0606-3381-4c6e-81d3-a3ba8d8171eb",
              "cell": {
                "columnId": "bovine",
                "rowId": "If options.type is not set to the string DataIntegrityProof and options.cryptosuite is not set to the string eddsa-jcs-2022, an error MUST be raised that SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-jcs-2022:~:text=If%20options.type%20is%20not%20set%20to%20the%20string%20DataIntegrityProof%20and%20options.cryptosuite%20is%20not%20set%20to%20the%20string%20eddsa%2Djcs%2D2022%2C%20an%20error%20MUST%20be%20raised%20that%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 118108,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: setupRow in \"bovine\"",
              "body": "function setupRow() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "G3hPeZQ4EarvjWgep-8sQ",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "originalTitle": "\"before each\" hook: setupRow",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"bovine\"",
              "body": "async function() {\n          issuedVc = await createInitialVc({issuer, vc: validVc});\n          proofs = getProofs(issuedVc);\n          if(proofs?.length) {\n            eddsa2022Proofs = proofs.filter(\n              proof => proof?.cryptosuite === cryptosuite);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "G3hPeZQ4EarvjWgep-8sQ",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 117497,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 610,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "qpRDD_oeclGmEOR6xt4Pj",
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
          "_testId": "urn:uuid:03778a95-7ac7-463c-b716-b97fa99d05da"
        }
      ],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [
        {
          "title": "\"before all\" hook in \"eddsa-jcs-2022 - Algorithms - Transformation\"",
          "body": "async function() {\n      const credentials = await generateTestData();\n      validVc = credentials.clone('validVc');\n    }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "qpRDD_oeclGmEOR6xt4Pj",
          "ctx": null,
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 111274,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 1,
          "_error": null
        }
      ],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "Ika60aoT9ncTXtTubybzs",
      "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Implementer",
      "_testId": "urn:uuid:b1d6e724-7e6e-43e3-8aeb-28db9c7b9429",
      "columns": [
        "apicatalog.com",
        "Digital Bazaar",
        "Grotto Networking",
        "OpSecId",
        "bovine"
      ],
      "rows": [
        {
          "id": "The transformation options MUST contain a type identifier for the cryptographic suite (type) and a cryptosuite identifier (cryptosuite).",
          "link": "https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-jcs-2022",
          "cells": [
            {
              "type": "test",
              "title": "The transformation options MUST contain a type identifier for the cryptographic suite (type) and a cryptosuite identifier (cryptosuite).",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-jcs-2022';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.type, 'Expected a type identifier on ' +\n                              'the proof.');\n            should.exist(proof.cryptosuite,\n              'Expected a cryptosuite identifier on the proof.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "ZCALI31uHwJM-IgNS3hY4",
              "ctx": null,
              "_testId": "urn:uuid:6bfa59ba-9543-4776-b339-99644783c533",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "The transformation options MUST contain a type identifier for the cryptographic suite (type) and a cryptosuite identifier (cryptosuite)."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-jcs-2022",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 116628,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The transformation options MUST contain a type identifier for the cryptographic suite (type) and a cryptosuite identifier (cryptosuite).",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-jcs-2022';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.type, 'Expected a type identifier on ' +\n                              'the proof.');\n            should.exist(proof.cryptosuite,\n              'Expected a cryptosuite identifier on the proof.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "tFm0Y1RTFCUmAeF-uVnTK",
              "ctx": null,
              "_testId": "urn:uuid:540627a3-ada0-4859-bd00-1eeab5192526",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The transformation options MUST contain a type identifier for the cryptographic suite (type) and a cryptosuite identifier (cryptosuite)."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-jcs-2022",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 116788,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The transformation options MUST contain a type identifier for the cryptographic suite (type) and a cryptosuite identifier (cryptosuite).",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-jcs-2022';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.type, 'Expected a type identifier on ' +\n                              'the proof.');\n            should.exist(proof.cryptosuite,\n              'Expected a cryptosuite identifier on the proof.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "S2KVNeCbTwrbJHem-vZCj",
              "ctx": null,
              "_testId": "urn:uuid:c8acfd52-27e5-4afc-83d2-d5b89c1e7bcd",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The transformation options MUST contain a type identifier for the cryptographic suite (type) and a cryptosuite identifier (cryptosuite)."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-jcs-2022",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 116850,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The transformation options MUST contain a type identifier for the cryptographic suite (type) and a cryptosuite identifier (cryptosuite).",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-jcs-2022';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.type, 'Expected a type identifier on ' +\n                              'the proof.');\n            should.exist(proof.cryptosuite,\n              'Expected a cryptosuite identifier on the proof.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "86kLqOwRoY9wxHiLjlsIr",
              "ctx": null,
              "_testId": "urn:uuid:7d3a06b5-daed-46af-b8eb-1f34430ebaed",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "The transformation options MUST contain a type identifier for the cryptographic suite (type) and a cryptosuite identifier (cryptosuite)."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-jcs-2022",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 117496,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The transformation options MUST contain a type identifier for the cryptographic suite (type) and a cryptosuite identifier (cryptosuite).",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-jcs-2022';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.type, 'Expected a type identifier on ' +\n                              'the proof.');\n            should.exist(proof.cryptosuite,\n              'Expected a cryptosuite identifier on the proof.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "G3hPeZQ4EarvjWgep-8sQ",
              "ctx": null,
              "_testId": "urn:uuid:a9806595-65bf-4ee7-b441-14ed7824aecb",
              "cell": {
                "columnId": "bovine",
                "rowId": "The transformation options MUST contain a type identifier for the cryptographic suite (type) and a cryptosuite identifier (cryptosuite)."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-jcs-2022",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 118107,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "Whenever this algorithm encodes strings, it MUST use UTF-8 encoding.",
          "link": "https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-jcs-2022",
          "cells": [
            {
              "type": "test",
              "title": "Whenever this algorithm encodes strings, it MUST use UTF-8 encoding.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-jcs-2022';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof?.proofValue,\n              'Expected proofValue to exist.');\n            isValidUtf8(proof.proofValue).should.equal(\n              true,\n              'Expected proofValue value to be a valid UTF-8 encoded string.'\n            );\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "ZCALI31uHwJM-IgNS3hY4",
              "ctx": null,
              "_testId": "urn:uuid:115e3a55-4f61-4c8a-9426-544836126b1f",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "Whenever this algorithm encodes strings, it MUST use UTF-8 encoding."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-jcs-2022",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 116629,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Whenever this algorithm encodes strings, it MUST use UTF-8 encoding.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-jcs-2022';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof?.proofValue,\n              'Expected proofValue to exist.');\n            isValidUtf8(proof.proofValue).should.equal(\n              true,\n              'Expected proofValue value to be a valid UTF-8 encoded string.'\n            );\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "tFm0Y1RTFCUmAeF-uVnTK",
              "ctx": null,
              "_testId": "urn:uuid:7bc14a86-6272-4065-b92e-6ab91db86004",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "Whenever this algorithm encodes strings, it MUST use UTF-8 encoding."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-jcs-2022",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 116789,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Whenever this algorithm encodes strings, it MUST use UTF-8 encoding.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-jcs-2022';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof?.proofValue,\n              'Expected proofValue to exist.');\n            isValidUtf8(proof.proofValue).should.equal(\n              true,\n              'Expected proofValue value to be a valid UTF-8 encoded string.'\n            );\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "S2KVNeCbTwrbJHem-vZCj",
              "ctx": null,
              "_testId": "urn:uuid:491a5822-9612-4eae-bd4f-17bb092b1042",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "Whenever this algorithm encodes strings, it MUST use UTF-8 encoding."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-jcs-2022",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 116851,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Whenever this algorithm encodes strings, it MUST use UTF-8 encoding.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-jcs-2022';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof?.proofValue,\n              'Expected proofValue to exist.');\n            isValidUtf8(proof.proofValue).should.equal(\n              true,\n              'Expected proofValue value to be a valid UTF-8 encoded string.'\n            );\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "86kLqOwRoY9wxHiLjlsIr",
              "ctx": null,
              "_testId": "urn:uuid:2e5208e9-2560-463b-a7ba-4f483ed34a46",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "Whenever this algorithm encodes strings, it MUST use UTF-8 encoding."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-jcs-2022",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 117497,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Whenever this algorithm encodes strings, it MUST use UTF-8 encoding.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-jcs-2022';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof?.proofValue,\n              'Expected proofValue to exist.');\n            isValidUtf8(proof.proofValue).should.equal(\n              true,\n              'Expected proofValue value to be a valid UTF-8 encoded string.'\n            );\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "G3hPeZQ4EarvjWgep-8sQ",
              "ctx": null,
              "_testId": "urn:uuid:e2afe702-48d7-429d-a7bd-07e6fa9e4645",
              "cell": {
                "columnId": "bovine",
                "rowId": "Whenever this algorithm encodes strings, it MUST use UTF-8 encoding."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-jcs-2022",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 118108,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "If options.type is not set to the string DataIntegrityProof and options.cryptosuite is not set to the string eddsa-jcs-2022, an error MUST be raised that SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
          "link": "https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-jcs-2022:~:text=If%20options.type%20is%20not%20set%20to%20the%20string%20DataIntegrityProof%20and%20options.cryptosuite%20is%20not%20set%20to%20the%20string%20eddsa%2Djcs%2D2022%2C%20an%20error%20MUST%20be%20raised%20that%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
          "cells": [
            {
              "type": "test",
              "title": "If options.type is not set to the string DataIntegrityProof and options.cryptosuite is not set to the string eddsa-jcs-2022, an error MUST be raised that SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-jcs-2022:~:text=If%20options.type%20is%20not%20set%20to%20the%20string%20DataIntegrityProof%20and%20options.cryptosuite%20is%20not%20set%20to%20the%20string%20eddsa%2Djcs%2D2022%2C%20an%20error%20MUST%20be%20raised%20that%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.type,\n              'Expected a type identifier on the proof.');\n            should.exist(proof.cryptosuite,\n              'Expected a cryptosuite identifier on the proof.');\n            proof.type.should.equal('DataIntegrityProof',\n              'Expected DataIntegrityProof type.');\n            proof.cryptosuite.should.equal('eddsa-jcs-2022',\n              'Expected eddsa-jcs-2022 cryptosuite.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "ZCALI31uHwJM-IgNS3hY4",
              "ctx": null,
              "_testId": "urn:uuid:949d43f8-7114-4986-808f-6d351a3ee6b8",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If options.type is not set to the string DataIntegrityProof and options.cryptosuite is not set to the string eddsa-jcs-2022, an error MUST be raised that SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-jcs-2022:~:text=If%20options.type%20is%20not%20set%20to%20the%20string%20DataIntegrityProof%20and%20options.cryptosuite%20is%20not%20set%20to%20the%20string%20eddsa%2Djcs%2D2022%2C%20an%20error%20MUST%20be%20raised%20that%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 116629,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If options.type is not set to the string DataIntegrityProof and options.cryptosuite is not set to the string eddsa-jcs-2022, an error MUST be raised that SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-jcs-2022:~:text=If%20options.type%20is%20not%20set%20to%20the%20string%20DataIntegrityProof%20and%20options.cryptosuite%20is%20not%20set%20to%20the%20string%20eddsa%2Djcs%2D2022%2C%20an%20error%20MUST%20be%20raised%20that%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.type,\n              'Expected a type identifier on the proof.');\n            should.exist(proof.cryptosuite,\n              'Expected a cryptosuite identifier on the proof.');\n            proof.type.should.equal('DataIntegrityProof',\n              'Expected DataIntegrityProof type.');\n            proof.cryptosuite.should.equal('eddsa-jcs-2022',\n              'Expected eddsa-jcs-2022 cryptosuite.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "tFm0Y1RTFCUmAeF-uVnTK",
              "ctx": null,
              "_testId": "urn:uuid:add017d6-1bf8-4a85-b3cd-1ff16d588947",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If options.type is not set to the string DataIntegrityProof and options.cryptosuite is not set to the string eddsa-jcs-2022, an error MUST be raised that SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-jcs-2022:~:text=If%20options.type%20is%20not%20set%20to%20the%20string%20DataIntegrityProof%20and%20options.cryptosuite%20is%20not%20set%20to%20the%20string%20eddsa%2Djcs%2D2022%2C%20an%20error%20MUST%20be%20raised%20that%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 116789,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If options.type is not set to the string DataIntegrityProof and options.cryptosuite is not set to the string eddsa-jcs-2022, an error MUST be raised that SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-jcs-2022:~:text=If%20options.type%20is%20not%20set%20to%20the%20string%20DataIntegrityProof%20and%20options.cryptosuite%20is%20not%20set%20to%20the%20string%20eddsa%2Djcs%2D2022%2C%20an%20error%20MUST%20be%20raised%20that%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.type,\n              'Expected a type identifier on the proof.');\n            should.exist(proof.cryptosuite,\n              'Expected a cryptosuite identifier on the proof.');\n            proof.type.should.equal('DataIntegrityProof',\n              'Expected DataIntegrityProof type.');\n            proof.cryptosuite.should.equal('eddsa-jcs-2022',\n              'Expected eddsa-jcs-2022 cryptosuite.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "S2KVNeCbTwrbJHem-vZCj",
              "ctx": null,
              "_testId": "urn:uuid:677cfb1c-81d5-49ef-8ec7-82a31f2461a9",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If options.type is not set to the string DataIntegrityProof and options.cryptosuite is not set to the string eddsa-jcs-2022, an error MUST be raised that SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-jcs-2022:~:text=If%20options.type%20is%20not%20set%20to%20the%20string%20DataIntegrityProof%20and%20options.cryptosuite%20is%20not%20set%20to%20the%20string%20eddsa%2Djcs%2D2022%2C%20an%20error%20MUST%20be%20raised%20that%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 116852,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If options.type is not set to the string DataIntegrityProof and options.cryptosuite is not set to the string eddsa-jcs-2022, an error MUST be raised that SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-jcs-2022:~:text=If%20options.type%20is%20not%20set%20to%20the%20string%20DataIntegrityProof%20and%20options.cryptosuite%20is%20not%20set%20to%20the%20string%20eddsa%2Djcs%2D2022%2C%20an%20error%20MUST%20be%20raised%20that%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.type,\n              'Expected a type identifier on the proof.');\n            should.exist(proof.cryptosuite,\n              'Expected a cryptosuite identifier on the proof.');\n            proof.type.should.equal('DataIntegrityProof',\n              'Expected DataIntegrityProof type.');\n            proof.cryptosuite.should.equal('eddsa-jcs-2022',\n              'Expected eddsa-jcs-2022 cryptosuite.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "86kLqOwRoY9wxHiLjlsIr",
              "ctx": null,
              "_testId": "urn:uuid:f515f246-fef0-4ced-80d7-aad8f11c825e",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "If options.type is not set to the string DataIntegrityProof and options.cryptosuite is not set to the string eddsa-jcs-2022, an error MUST be raised that SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-jcs-2022:~:text=If%20options.type%20is%20not%20set%20to%20the%20string%20DataIntegrityProof%20and%20options.cryptosuite%20is%20not%20set%20to%20the%20string%20eddsa%2Djcs%2D2022%2C%20an%20error%20MUST%20be%20raised%20that%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 117497,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If options.type is not set to the string DataIntegrityProof and options.cryptosuite is not set to the string eddsa-jcs-2022, an error MUST be raised that SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-jcs-2022:~:text=If%20options.type%20is%20not%20set%20to%20the%20string%20DataIntegrityProof%20and%20options.cryptosuite%20is%20not%20set%20to%20the%20string%20eddsa%2Djcs%2D2022%2C%20an%20error%20MUST%20be%20raised%20that%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.type,\n              'Expected a type identifier on the proof.');\n            should.exist(proof.cryptosuite,\n              'Expected a cryptosuite identifier on the proof.');\n            proof.type.should.equal('DataIntegrityProof',\n              'Expected DataIntegrityProof type.');\n            proof.cryptosuite.should.equal('eddsa-jcs-2022',\n              'Expected eddsa-jcs-2022 cryptosuite.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "G3hPeZQ4EarvjWgep-8sQ",
              "ctx": null,
              "_testId": "urn:uuid:c06d0606-3381-4c6e-81d3-a3ba8d8171eb",
              "cell": {
                "columnId": "bovine",
                "rowId": "If options.type is not set to the string DataIntegrityProof and options.cryptosuite is not set to the string eddsa-jcs-2022, an error MUST be raised that SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-jcs-2022:~:text=If%20options.type%20is%20not%20set%20to%20the%20string%20DataIntegrityProof%20and%20options.cryptosuite%20is%20not%20set%20to%20the%20string%20eddsa%2Djcs%2D2022%2C%20an%20error%20MUST%20be%20raised%20that%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 118108,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        }
      ]
    },
    {
      "title": "eddsa-jcs-2022 - Algorithms - Proof Configuration",
      "ctx": null,
      "suites": [
        {
          "title": "apicatalog.com",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MUST contain a cryptosuite identifier (cryptosuite).",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-jcs-2022';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.type,\n              'Expected a type identifier on the proof.');\n            should.exist(proof.cryptosuite,\n              'Expected a cryptosuite identifier on the proof.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "68njafNR93jtZrTuC95ar",
              "ctx": null,
              "_testId": "urn:uuid:fff28a3f-5a20-49b9-9960-210ee8e85d47",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MUST contain a cryptosuite identifier (cryptosuite)."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-jcs-2022",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 118501,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If proofConfig.type is not set to DataIntegrityProof or proofConfig.cryptosuite is not set to eddsa-jcs-2022, an error MUST be raised that SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-jcs-2022:~:text=If%20proofConfig.type%20is%20not%20set%20to%20DataIntegrityProof%20or%20proofConfig.cryptosuite%20is%20not%20set%20to%20eddsa%2Djcs%2D2022%2C%20an%20error%20MUST%20be%20raised';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.type,\n              'Expected a type identifier on the proof.');\n            should.exist(proof.cryptosuite,\n              'Expected a cryptosuite identifier on the proof.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "68njafNR93jtZrTuC95ar",
              "ctx": null,
              "_testId": "urn:uuid:f8956000-0dc4-41b8-92c2-0ae723782d91",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If proofConfig.type is not set to DataIntegrityProof or proofConfig.cryptosuite is not set to eddsa-jcs-2022, an error MUST be raised that SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-jcs-2022:~:text=If%20proofConfig.type%20is%20not%20set%20to%20DataIntegrityProof%20or%20proofConfig.cryptosuite%20is%20not%20set%20to%20eddsa%2Djcs%2D2022%2C%20an%20error%20MUST%20be%20raised",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 118502,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If proofConfig.created is set to a value that is not a valid [XMLSCHEMA11-2] datetime, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-jcs-2022:~:text=If%20proofConfig.created%20is%20set%20to%20a%20value%20that%20is%20not%20a%20valid%20%5BXMLSCHEMA11%2D2%5D%20datetime%2C%20an%20error%20MUST%20be%20raised';\n          for(const proof of eddsa2022Proofs) {\n            if(proof?.created) {\n              isValidDatetime(proof.created).should.equal(\n                true,\n                'Expected created value to be a valid datetime string.'\n              );\n            }\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "68njafNR93jtZrTuC95ar",
              "ctx": null,
              "_testId": "urn:uuid:35ba8361-6a12-412e-ba93-e05a2f77f78e",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If proofConfig.created is set to a value that is not a valid [XMLSCHEMA11-2] datetime, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-jcs-2022:~:text=If%20proofConfig.created%20is%20set%20to%20a%20value%20that%20is%20not%20a%20valid%20%5BXMLSCHEMA11%2D2%5D%20datetime%2C%20an%20error%20MUST%20be%20raised",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 118502,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: setupRow in \"apicatalog.com\"",
              "body": "function setupRow() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "68njafNR93jtZrTuC95ar",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "originalTitle": "\"before each\" hook: setupRow",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"apicatalog.com\"",
              "body": "async function() {\n          issuedVc = await createInitialVc({issuer, vc: validVc});\n          proofs = getProofs(issuedVc);\n          if(proofs?.length) {\n            eddsa2022Proofs = proofs.filter(\n              proof => proof?.cryptosuite === cryptosuite);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "68njafNR93jtZrTuC95ar",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 118110,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 391,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "od9peXOvBj2uYdrnpx3YX",
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
          "_testId": "urn:uuid:784f95bc-8ea4-4357-81fe-d74973952ede"
        },
        {
          "title": "Digital Bazaar",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MUST contain a cryptosuite identifier (cryptosuite).",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-jcs-2022';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.type,\n              'Expected a type identifier on the proof.');\n            should.exist(proof.cryptosuite,\n              'Expected a cryptosuite identifier on the proof.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "poaXhaN2jVW8rPUWSzDc8",
              "ctx": null,
              "_testId": "urn:uuid:d18e878e-e74d-4b73-88db-855f863e494f",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MUST contain a cryptosuite identifier (cryptosuite)."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-jcs-2022",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 118629,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If proofConfig.type is not set to DataIntegrityProof or proofConfig.cryptosuite is not set to eddsa-jcs-2022, an error MUST be raised that SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-jcs-2022:~:text=If%20proofConfig.type%20is%20not%20set%20to%20DataIntegrityProof%20or%20proofConfig.cryptosuite%20is%20not%20set%20to%20eddsa%2Djcs%2D2022%2C%20an%20error%20MUST%20be%20raised';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.type,\n              'Expected a type identifier on the proof.');\n            should.exist(proof.cryptosuite,\n              'Expected a cryptosuite identifier on the proof.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "poaXhaN2jVW8rPUWSzDc8",
              "ctx": null,
              "_testId": "urn:uuid:68011dde-0610-4005-a722-00ed4e4c371a",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If proofConfig.type is not set to DataIntegrityProof or proofConfig.cryptosuite is not set to eddsa-jcs-2022, an error MUST be raised that SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-jcs-2022:~:text=If%20proofConfig.type%20is%20not%20set%20to%20DataIntegrityProof%20or%20proofConfig.cryptosuite%20is%20not%20set%20to%20eddsa%2Djcs%2D2022%2C%20an%20error%20MUST%20be%20raised",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 118629,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If proofConfig.created is set to a value that is not a valid [XMLSCHEMA11-2] datetime, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-jcs-2022:~:text=If%20proofConfig.created%20is%20set%20to%20a%20value%20that%20is%20not%20a%20valid%20%5BXMLSCHEMA11%2D2%5D%20datetime%2C%20an%20error%20MUST%20be%20raised';\n          for(const proof of eddsa2022Proofs) {\n            if(proof?.created) {\n              isValidDatetime(proof.created).should.equal(\n                true,\n                'Expected created value to be a valid datetime string.'\n              );\n            }\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "poaXhaN2jVW8rPUWSzDc8",
              "ctx": null,
              "_testId": "urn:uuid:a12a7946-fae7-4e2a-b8f3-63c126a75a7b",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If proofConfig.created is set to a value that is not a valid [XMLSCHEMA11-2] datetime, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-jcs-2022:~:text=If%20proofConfig.created%20is%20set%20to%20a%20value%20that%20is%20not%20a%20valid%20%5BXMLSCHEMA11%2D2%5D%20datetime%2C%20an%20error%20MUST%20be%20raised",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 118630,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: setupRow in \"Digital Bazaar\"",
              "body": "function setupRow() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "poaXhaN2jVW8rPUWSzDc8",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "originalTitle": "\"before each\" hook: setupRow",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Digital Bazaar\"",
              "body": "async function() {\n          issuedVc = await createInitialVc({issuer, vc: validVc});\n          proofs = getProofs(issuedVc);\n          if(proofs?.length) {\n            eddsa2022Proofs = proofs.filter(\n              proof => proof?.cryptosuite === cryptosuite);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "poaXhaN2jVW8rPUWSzDc8",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 118502,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 127,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "od9peXOvBj2uYdrnpx3YX",
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
          "_testId": "urn:uuid:75b19838-a189-46fa-9ddb-72567b3b913d"
        },
        {
          "title": "Grotto Networking",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MUST contain a cryptosuite identifier (cryptosuite).",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-jcs-2022';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.type,\n              'Expected a type identifier on the proof.');\n            should.exist(proof.cryptosuite,\n              'Expected a cryptosuite identifier on the proof.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "8hJ-M18LgyhQBeya8DbgE",
              "ctx": null,
              "_testId": "urn:uuid:f8f60862-cb00-44e0-b01a-1114b1f1e969",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MUST contain a cryptosuite identifier (cryptosuite)."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-jcs-2022",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 118654,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If proofConfig.type is not set to DataIntegrityProof or proofConfig.cryptosuite is not set to eddsa-jcs-2022, an error MUST be raised that SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-jcs-2022:~:text=If%20proofConfig.type%20is%20not%20set%20to%20DataIntegrityProof%20or%20proofConfig.cryptosuite%20is%20not%20set%20to%20eddsa%2Djcs%2D2022%2C%20an%20error%20MUST%20be%20raised';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.type,\n              'Expected a type identifier on the proof.');\n            should.exist(proof.cryptosuite,\n              'Expected a cryptosuite identifier on the proof.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "8hJ-M18LgyhQBeya8DbgE",
              "ctx": null,
              "_testId": "urn:uuid:983fa767-59f9-462b-a356-883f21bbdcc4",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If proofConfig.type is not set to DataIntegrityProof or proofConfig.cryptosuite is not set to eddsa-jcs-2022, an error MUST be raised that SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-jcs-2022:~:text=If%20proofConfig.type%20is%20not%20set%20to%20DataIntegrityProof%20or%20proofConfig.cryptosuite%20is%20not%20set%20to%20eddsa%2Djcs%2D2022%2C%20an%20error%20MUST%20be%20raised",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 118654,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If proofConfig.created is set to a value that is not a valid [XMLSCHEMA11-2] datetime, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-jcs-2022:~:text=If%20proofConfig.created%20is%20set%20to%20a%20value%20that%20is%20not%20a%20valid%20%5BXMLSCHEMA11%2D2%5D%20datetime%2C%20an%20error%20MUST%20be%20raised';\n          for(const proof of eddsa2022Proofs) {\n            if(proof?.created) {\n              isValidDatetime(proof.created).should.equal(\n                true,\n                'Expected created value to be a valid datetime string.'\n              );\n            }\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "8hJ-M18LgyhQBeya8DbgE",
              "ctx": null,
              "_testId": "urn:uuid:b39655b0-475a-4856-ac1b-a2a0d5f54739",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If proofConfig.created is set to a value that is not a valid [XMLSCHEMA11-2] datetime, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-jcs-2022:~:text=If%20proofConfig.created%20is%20set%20to%20a%20value%20that%20is%20not%20a%20valid%20%5BXMLSCHEMA11%2D2%5D%20datetime%2C%20an%20error%20MUST%20be%20raised",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 118654,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: setupRow in \"Grotto Networking\"",
              "body": "function setupRow() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "8hJ-M18LgyhQBeya8DbgE",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "originalTitle": "\"before each\" hook: setupRow",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Grotto Networking\"",
              "body": "async function() {\n          issuedVc = await createInitialVc({issuer, vc: validVc});\n          proofs = getProofs(issuedVc);\n          if(proofs?.length) {\n            eddsa2022Proofs = proofs.filter(\n              proof => proof?.cryptosuite === cryptosuite);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "8hJ-M18LgyhQBeya8DbgE",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 118630,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 24,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "od9peXOvBj2uYdrnpx3YX",
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
          "_testId": "urn:uuid:58ee15de-0667-4bb2-af8a-fdd324ca1ae8"
        },
        {
          "title": "OpSecId",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MUST contain a cryptosuite identifier (cryptosuite).",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-jcs-2022';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.type,\n              'Expected a type identifier on the proof.');\n            should.exist(proof.cryptosuite,\n              'Expected a cryptosuite identifier on the proof.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "7Pn4gLxIo8CIcMad1FKxx",
              "ctx": null,
              "_testId": "urn:uuid:4774c67c-8892-40a2-a77d-510fd8cf1590",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MUST contain a cryptosuite identifier (cryptosuite)."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-jcs-2022",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 119252,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If proofConfig.type is not set to DataIntegrityProof or proofConfig.cryptosuite is not set to eddsa-jcs-2022, an error MUST be raised that SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-jcs-2022:~:text=If%20proofConfig.type%20is%20not%20set%20to%20DataIntegrityProof%20or%20proofConfig.cryptosuite%20is%20not%20set%20to%20eddsa%2Djcs%2D2022%2C%20an%20error%20MUST%20be%20raised';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.type,\n              'Expected a type identifier on the proof.');\n            should.exist(proof.cryptosuite,\n              'Expected a cryptosuite identifier on the proof.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "7Pn4gLxIo8CIcMad1FKxx",
              "ctx": null,
              "_testId": "urn:uuid:0a6ad4d7-e53a-4dde-bc8e-05ebfb352c10",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "If proofConfig.type is not set to DataIntegrityProof or proofConfig.cryptosuite is not set to eddsa-jcs-2022, an error MUST be raised that SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-jcs-2022:~:text=If%20proofConfig.type%20is%20not%20set%20to%20DataIntegrityProof%20or%20proofConfig.cryptosuite%20is%20not%20set%20to%20eddsa%2Djcs%2D2022%2C%20an%20error%20MUST%20be%20raised",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 119252,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If proofConfig.created is set to a value that is not a valid [XMLSCHEMA11-2] datetime, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-jcs-2022:~:text=If%20proofConfig.created%20is%20set%20to%20a%20value%20that%20is%20not%20a%20valid%20%5BXMLSCHEMA11%2D2%5D%20datetime%2C%20an%20error%20MUST%20be%20raised';\n          for(const proof of eddsa2022Proofs) {\n            if(proof?.created) {\n              isValidDatetime(proof.created).should.equal(\n                true,\n                'Expected created value to be a valid datetime string.'\n              );\n            }\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "7Pn4gLxIo8CIcMad1FKxx",
              "ctx": null,
              "_testId": "urn:uuid:e8ad9c9a-d245-4e5e-8baa-8ce30f5236c7",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "If proofConfig.created is set to a value that is not a valid [XMLSCHEMA11-2] datetime, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-jcs-2022:~:text=If%20proofConfig.created%20is%20set%20to%20a%20value%20that%20is%20not%20a%20valid%20%5BXMLSCHEMA11%2D2%5D%20datetime%2C%20an%20error%20MUST%20be%20raised",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 119252,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: setupRow in \"OpSecId\"",
              "body": "function setupRow() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "7Pn4gLxIo8CIcMad1FKxx",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "originalTitle": "\"before each\" hook: setupRow",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"OpSecId\"",
              "body": "async function() {\n          issuedVc = await createInitialVc({issuer, vc: validVc});\n          proofs = getProofs(issuedVc);\n          if(proofs?.length) {\n            eddsa2022Proofs = proofs.filter(\n              proof => proof?.cryptosuite === cryptosuite);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "7Pn4gLxIo8CIcMad1FKxx",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 118655,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 597,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "od9peXOvBj2uYdrnpx3YX",
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
          "_testId": "urn:uuid:738725db-3619-4456-8cfe-1d36bc030ce7"
        },
        {
          "title": "bovine",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MUST contain a cryptosuite identifier (cryptosuite).",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-jcs-2022';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.type,\n              'Expected a type identifier on the proof.');\n            should.exist(proof.cryptosuite,\n              'Expected a cryptosuite identifier on the proof.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "Er_JGv8OqIsri1owhuwOZ",
              "ctx": null,
              "_testId": "urn:uuid:a3dc1f57-e715-48a9-9a0e-4c1f2b3b7472",
              "cell": {
                "columnId": "bovine",
                "rowId": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MUST contain a cryptosuite identifier (cryptosuite)."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-jcs-2022",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 119402,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If proofConfig.type is not set to DataIntegrityProof or proofConfig.cryptosuite is not set to eddsa-jcs-2022, an error MUST be raised that SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-jcs-2022:~:text=If%20proofConfig.type%20is%20not%20set%20to%20DataIntegrityProof%20or%20proofConfig.cryptosuite%20is%20not%20set%20to%20eddsa%2Djcs%2D2022%2C%20an%20error%20MUST%20be%20raised';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.type,\n              'Expected a type identifier on the proof.');\n            should.exist(proof.cryptosuite,\n              'Expected a cryptosuite identifier on the proof.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "Er_JGv8OqIsri1owhuwOZ",
              "ctx": null,
              "_testId": "urn:uuid:0edd5860-b837-4155-8aeb-e346cf2ce255",
              "cell": {
                "columnId": "bovine",
                "rowId": "If proofConfig.type is not set to DataIntegrityProof or proofConfig.cryptosuite is not set to eddsa-jcs-2022, an error MUST be raised that SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-jcs-2022:~:text=If%20proofConfig.type%20is%20not%20set%20to%20DataIntegrityProof%20or%20proofConfig.cryptosuite%20is%20not%20set%20to%20eddsa%2Djcs%2D2022%2C%20an%20error%20MUST%20be%20raised",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 119402,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If proofConfig.created is set to a value that is not a valid [XMLSCHEMA11-2] datetime, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-jcs-2022:~:text=If%20proofConfig.created%20is%20set%20to%20a%20value%20that%20is%20not%20a%20valid%20%5BXMLSCHEMA11%2D2%5D%20datetime%2C%20an%20error%20MUST%20be%20raised';\n          for(const proof of eddsa2022Proofs) {\n            if(proof?.created) {\n              isValidDatetime(proof.created).should.equal(\n                true,\n                'Expected created value to be a valid datetime string.'\n              );\n            }\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "Er_JGv8OqIsri1owhuwOZ",
              "ctx": null,
              "_testId": "urn:uuid:5d438d69-e474-4c17-95c7-3694fc3c8531",
              "cell": {
                "columnId": "bovine",
                "rowId": "If proofConfig.created is set to a value that is not a valid [XMLSCHEMA11-2] datetime, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-jcs-2022:~:text=If%20proofConfig.created%20is%20set%20to%20a%20value%20that%20is%20not%20a%20valid%20%5BXMLSCHEMA11%2D2%5D%20datetime%2C%20an%20error%20MUST%20be%20raised",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 119402,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: setupRow in \"bovine\"",
              "body": "function setupRow() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "Er_JGv8OqIsri1owhuwOZ",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "originalTitle": "\"before each\" hook: setupRow",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"bovine\"",
              "body": "async function() {\n          issuedVc = await createInitialVc({issuer, vc: validVc});\n          proofs = getProofs(issuedVc);\n          if(proofs?.length) {\n            eddsa2022Proofs = proofs.filter(\n              proof => proof?.cryptosuite === cryptosuite);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "Er_JGv8OqIsri1owhuwOZ",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 119253,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 149,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "od9peXOvBj2uYdrnpx3YX",
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
          "_testId": "urn:uuid:ee7b559f-4665-48c8-b98e-525c740ad7ca"
        }
      ],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [
        {
          "title": "\"before all\" hook in \"eddsa-jcs-2022 - Algorithms - Proof Configuration\"",
          "body": "async function() {\n      const credentials = await generateTestData();\n      validVc = credentials.clone('validVc');\n    }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "od9peXOvBj2uYdrnpx3YX",
          "ctx": null,
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 118109,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 1,
          "_error": null
        }
      ],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "Ika60aoT9ncTXtTubybzs",
      "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Implementer",
      "_testId": "urn:uuid:b737188b-87c0-49d6-a3ef-4eb63aea13ff",
      "columns": [
        "apicatalog.com",
        "Digital Bazaar",
        "Grotto Networking",
        "OpSecId",
        "bovine"
      ],
      "rows": [
        {
          "id": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MUST contain a cryptosuite identifier (cryptosuite).",
          "link": "https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-jcs-2022",
          "cells": [
            {
              "type": "test",
              "title": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MUST contain a cryptosuite identifier (cryptosuite).",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-jcs-2022';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.type,\n              'Expected a type identifier on the proof.');\n            should.exist(proof.cryptosuite,\n              'Expected a cryptosuite identifier on the proof.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "68njafNR93jtZrTuC95ar",
              "ctx": null,
              "_testId": "urn:uuid:fff28a3f-5a20-49b9-9960-210ee8e85d47",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MUST contain a cryptosuite identifier (cryptosuite)."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-jcs-2022",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 118501,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MUST contain a cryptosuite identifier (cryptosuite).",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-jcs-2022';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.type,\n              'Expected a type identifier on the proof.');\n            should.exist(proof.cryptosuite,\n              'Expected a cryptosuite identifier on the proof.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "poaXhaN2jVW8rPUWSzDc8",
              "ctx": null,
              "_testId": "urn:uuid:d18e878e-e74d-4b73-88db-855f863e494f",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MUST contain a cryptosuite identifier (cryptosuite)."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-jcs-2022",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 118629,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MUST contain a cryptosuite identifier (cryptosuite).",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-jcs-2022';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.type,\n              'Expected a type identifier on the proof.');\n            should.exist(proof.cryptosuite,\n              'Expected a cryptosuite identifier on the proof.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "8hJ-M18LgyhQBeya8DbgE",
              "ctx": null,
              "_testId": "urn:uuid:f8f60862-cb00-44e0-b01a-1114b1f1e969",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MUST contain a cryptosuite identifier (cryptosuite)."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-jcs-2022",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 118654,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MUST contain a cryptosuite identifier (cryptosuite).",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-jcs-2022';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.type,\n              'Expected a type identifier on the proof.');\n            should.exist(proof.cryptosuite,\n              'Expected a cryptosuite identifier on the proof.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "7Pn4gLxIo8CIcMad1FKxx",
              "ctx": null,
              "_testId": "urn:uuid:4774c67c-8892-40a2-a77d-510fd8cf1590",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MUST contain a cryptosuite identifier (cryptosuite)."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-jcs-2022",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 119252,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MUST contain a cryptosuite identifier (cryptosuite).",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-jcs-2022';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.type,\n              'Expected a type identifier on the proof.');\n            should.exist(proof.cryptosuite,\n              'Expected a cryptosuite identifier on the proof.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "Er_JGv8OqIsri1owhuwOZ",
              "ctx": null,
              "_testId": "urn:uuid:a3dc1f57-e715-48a9-9a0e-4c1f2b3b7472",
              "cell": {
                "columnId": "bovine",
                "rowId": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MUST contain a cryptosuite identifier (cryptosuite)."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-jcs-2022",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 119402,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "If proofConfig.type is not set to DataIntegrityProof or proofConfig.cryptosuite is not set to eddsa-jcs-2022, an error MUST be raised that SHOULD convey an error type of PROOF_GENERATION_ERROR.",
          "link": "https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-jcs-2022:~:text=If%20proofConfig.type%20is%20not%20set%20to%20DataIntegrityProof%20or%20proofConfig.cryptosuite%20is%20not%20set%20to%20eddsa%2Djcs%2D2022%2C%20an%20error%20MUST%20be%20raised",
          "cells": [
            {
              "type": "test",
              "title": "If proofConfig.type is not set to DataIntegrityProof or proofConfig.cryptosuite is not set to eddsa-jcs-2022, an error MUST be raised that SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-jcs-2022:~:text=If%20proofConfig.type%20is%20not%20set%20to%20DataIntegrityProof%20or%20proofConfig.cryptosuite%20is%20not%20set%20to%20eddsa%2Djcs%2D2022%2C%20an%20error%20MUST%20be%20raised';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.type,\n              'Expected a type identifier on the proof.');\n            should.exist(proof.cryptosuite,\n              'Expected a cryptosuite identifier on the proof.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "68njafNR93jtZrTuC95ar",
              "ctx": null,
              "_testId": "urn:uuid:f8956000-0dc4-41b8-92c2-0ae723782d91",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If proofConfig.type is not set to DataIntegrityProof or proofConfig.cryptosuite is not set to eddsa-jcs-2022, an error MUST be raised that SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-jcs-2022:~:text=If%20proofConfig.type%20is%20not%20set%20to%20DataIntegrityProof%20or%20proofConfig.cryptosuite%20is%20not%20set%20to%20eddsa%2Djcs%2D2022%2C%20an%20error%20MUST%20be%20raised",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 118502,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If proofConfig.type is not set to DataIntegrityProof or proofConfig.cryptosuite is not set to eddsa-jcs-2022, an error MUST be raised that SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-jcs-2022:~:text=If%20proofConfig.type%20is%20not%20set%20to%20DataIntegrityProof%20or%20proofConfig.cryptosuite%20is%20not%20set%20to%20eddsa%2Djcs%2D2022%2C%20an%20error%20MUST%20be%20raised';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.type,\n              'Expected a type identifier on the proof.');\n            should.exist(proof.cryptosuite,\n              'Expected a cryptosuite identifier on the proof.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "poaXhaN2jVW8rPUWSzDc8",
              "ctx": null,
              "_testId": "urn:uuid:68011dde-0610-4005-a722-00ed4e4c371a",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If proofConfig.type is not set to DataIntegrityProof or proofConfig.cryptosuite is not set to eddsa-jcs-2022, an error MUST be raised that SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-jcs-2022:~:text=If%20proofConfig.type%20is%20not%20set%20to%20DataIntegrityProof%20or%20proofConfig.cryptosuite%20is%20not%20set%20to%20eddsa%2Djcs%2D2022%2C%20an%20error%20MUST%20be%20raised",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 118629,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If proofConfig.type is not set to DataIntegrityProof or proofConfig.cryptosuite is not set to eddsa-jcs-2022, an error MUST be raised that SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-jcs-2022:~:text=If%20proofConfig.type%20is%20not%20set%20to%20DataIntegrityProof%20or%20proofConfig.cryptosuite%20is%20not%20set%20to%20eddsa%2Djcs%2D2022%2C%20an%20error%20MUST%20be%20raised';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.type,\n              'Expected a type identifier on the proof.');\n            should.exist(proof.cryptosuite,\n              'Expected a cryptosuite identifier on the proof.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "8hJ-M18LgyhQBeya8DbgE",
              "ctx": null,
              "_testId": "urn:uuid:983fa767-59f9-462b-a356-883f21bbdcc4",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If proofConfig.type is not set to DataIntegrityProof or proofConfig.cryptosuite is not set to eddsa-jcs-2022, an error MUST be raised that SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-jcs-2022:~:text=If%20proofConfig.type%20is%20not%20set%20to%20DataIntegrityProof%20or%20proofConfig.cryptosuite%20is%20not%20set%20to%20eddsa%2Djcs%2D2022%2C%20an%20error%20MUST%20be%20raised",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 118654,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If proofConfig.type is not set to DataIntegrityProof or proofConfig.cryptosuite is not set to eddsa-jcs-2022, an error MUST be raised that SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-jcs-2022:~:text=If%20proofConfig.type%20is%20not%20set%20to%20DataIntegrityProof%20or%20proofConfig.cryptosuite%20is%20not%20set%20to%20eddsa%2Djcs%2D2022%2C%20an%20error%20MUST%20be%20raised';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.type,\n              'Expected a type identifier on the proof.');\n            should.exist(proof.cryptosuite,\n              'Expected a cryptosuite identifier on the proof.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "7Pn4gLxIo8CIcMad1FKxx",
              "ctx": null,
              "_testId": "urn:uuid:0a6ad4d7-e53a-4dde-bc8e-05ebfb352c10",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "If proofConfig.type is not set to DataIntegrityProof or proofConfig.cryptosuite is not set to eddsa-jcs-2022, an error MUST be raised that SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-jcs-2022:~:text=If%20proofConfig.type%20is%20not%20set%20to%20DataIntegrityProof%20or%20proofConfig.cryptosuite%20is%20not%20set%20to%20eddsa%2Djcs%2D2022%2C%20an%20error%20MUST%20be%20raised",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 119252,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If proofConfig.type is not set to DataIntegrityProof or proofConfig.cryptosuite is not set to eddsa-jcs-2022, an error MUST be raised that SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-jcs-2022:~:text=If%20proofConfig.type%20is%20not%20set%20to%20DataIntegrityProof%20or%20proofConfig.cryptosuite%20is%20not%20set%20to%20eddsa%2Djcs%2D2022%2C%20an%20error%20MUST%20be%20raised';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.type,\n              'Expected a type identifier on the proof.');\n            should.exist(proof.cryptosuite,\n              'Expected a cryptosuite identifier on the proof.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "Er_JGv8OqIsri1owhuwOZ",
              "ctx": null,
              "_testId": "urn:uuid:0edd5860-b837-4155-8aeb-e346cf2ce255",
              "cell": {
                "columnId": "bovine",
                "rowId": "If proofConfig.type is not set to DataIntegrityProof or proofConfig.cryptosuite is not set to eddsa-jcs-2022, an error MUST be raised that SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-jcs-2022:~:text=If%20proofConfig.type%20is%20not%20set%20to%20DataIntegrityProof%20or%20proofConfig.cryptosuite%20is%20not%20set%20to%20eddsa%2Djcs%2D2022%2C%20an%20error%20MUST%20be%20raised",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 119402,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "If proofConfig.created is set to a value that is not a valid [XMLSCHEMA11-2] datetime, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
          "link": "https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-jcs-2022:~:text=If%20proofConfig.created%20is%20set%20to%20a%20value%20that%20is%20not%20a%20valid%20%5BXMLSCHEMA11%2D2%5D%20datetime%2C%20an%20error%20MUST%20be%20raised",
          "cells": [
            {
              "type": "test",
              "title": "If proofConfig.created is set to a value that is not a valid [XMLSCHEMA11-2] datetime, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-jcs-2022:~:text=If%20proofConfig.created%20is%20set%20to%20a%20value%20that%20is%20not%20a%20valid%20%5BXMLSCHEMA11%2D2%5D%20datetime%2C%20an%20error%20MUST%20be%20raised';\n          for(const proof of eddsa2022Proofs) {\n            if(proof?.created) {\n              isValidDatetime(proof.created).should.equal(\n                true,\n                'Expected created value to be a valid datetime string.'\n              );\n            }\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "68njafNR93jtZrTuC95ar",
              "ctx": null,
              "_testId": "urn:uuid:35ba8361-6a12-412e-ba93-e05a2f77f78e",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If proofConfig.created is set to a value that is not a valid [XMLSCHEMA11-2] datetime, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-jcs-2022:~:text=If%20proofConfig.created%20is%20set%20to%20a%20value%20that%20is%20not%20a%20valid%20%5BXMLSCHEMA11%2D2%5D%20datetime%2C%20an%20error%20MUST%20be%20raised",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 118502,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If proofConfig.created is set to a value that is not a valid [XMLSCHEMA11-2] datetime, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-jcs-2022:~:text=If%20proofConfig.created%20is%20set%20to%20a%20value%20that%20is%20not%20a%20valid%20%5BXMLSCHEMA11%2D2%5D%20datetime%2C%20an%20error%20MUST%20be%20raised';\n          for(const proof of eddsa2022Proofs) {\n            if(proof?.created) {\n              isValidDatetime(proof.created).should.equal(\n                true,\n                'Expected created value to be a valid datetime string.'\n              );\n            }\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "poaXhaN2jVW8rPUWSzDc8",
              "ctx": null,
              "_testId": "urn:uuid:a12a7946-fae7-4e2a-b8f3-63c126a75a7b",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If proofConfig.created is set to a value that is not a valid [XMLSCHEMA11-2] datetime, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-jcs-2022:~:text=If%20proofConfig.created%20is%20set%20to%20a%20value%20that%20is%20not%20a%20valid%20%5BXMLSCHEMA11%2D2%5D%20datetime%2C%20an%20error%20MUST%20be%20raised",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 118630,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If proofConfig.created is set to a value that is not a valid [XMLSCHEMA11-2] datetime, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-jcs-2022:~:text=If%20proofConfig.created%20is%20set%20to%20a%20value%20that%20is%20not%20a%20valid%20%5BXMLSCHEMA11%2D2%5D%20datetime%2C%20an%20error%20MUST%20be%20raised';\n          for(const proof of eddsa2022Proofs) {\n            if(proof?.created) {\n              isValidDatetime(proof.created).should.equal(\n                true,\n                'Expected created value to be a valid datetime string.'\n              );\n            }\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "8hJ-M18LgyhQBeya8DbgE",
              "ctx": null,
              "_testId": "urn:uuid:b39655b0-475a-4856-ac1b-a2a0d5f54739",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If proofConfig.created is set to a value that is not a valid [XMLSCHEMA11-2] datetime, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-jcs-2022:~:text=If%20proofConfig.created%20is%20set%20to%20a%20value%20that%20is%20not%20a%20valid%20%5BXMLSCHEMA11%2D2%5D%20datetime%2C%20an%20error%20MUST%20be%20raised",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 118654,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If proofConfig.created is set to a value that is not a valid [XMLSCHEMA11-2] datetime, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-jcs-2022:~:text=If%20proofConfig.created%20is%20set%20to%20a%20value%20that%20is%20not%20a%20valid%20%5BXMLSCHEMA11%2D2%5D%20datetime%2C%20an%20error%20MUST%20be%20raised';\n          for(const proof of eddsa2022Proofs) {\n            if(proof?.created) {\n              isValidDatetime(proof.created).should.equal(\n                true,\n                'Expected created value to be a valid datetime string.'\n              );\n            }\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "7Pn4gLxIo8CIcMad1FKxx",
              "ctx": null,
              "_testId": "urn:uuid:e8ad9c9a-d245-4e5e-8baa-8ce30f5236c7",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "If proofConfig.created is set to a value that is not a valid [XMLSCHEMA11-2] datetime, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-jcs-2022:~:text=If%20proofConfig.created%20is%20set%20to%20a%20value%20that%20is%20not%20a%20valid%20%5BXMLSCHEMA11%2D2%5D%20datetime%2C%20an%20error%20MUST%20be%20raised",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 119252,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If proofConfig.created is set to a value that is not a valid [XMLSCHEMA11-2] datetime, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-jcs-2022:~:text=If%20proofConfig.created%20is%20set%20to%20a%20value%20that%20is%20not%20a%20valid%20%5BXMLSCHEMA11%2D2%5D%20datetime%2C%20an%20error%20MUST%20be%20raised';\n          for(const proof of eddsa2022Proofs) {\n            if(proof?.created) {\n              isValidDatetime(proof.created).should.equal(\n                true,\n                'Expected created value to be a valid datetime string.'\n              );\n            }\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "Er_JGv8OqIsri1owhuwOZ",
              "ctx": null,
              "_testId": "urn:uuid:5d438d69-e474-4c17-95c7-3694fc3c8531",
              "cell": {
                "columnId": "bovine",
                "rowId": "If proofConfig.created is set to a value that is not a valid [XMLSCHEMA11-2] datetime, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-jcs-2022:~:text=If%20proofConfig.created%20is%20set%20to%20a%20value%20that%20is%20not%20a%20valid%20%5BXMLSCHEMA11%2D2%5D%20datetime%2C%20an%20error%20MUST%20be%20raised",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 119402,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        }
      ]
    },
    {
      "title": "eddsa-jcs-2022 - Algorithms - Proof Serialization",
      "ctx": null,
      "suites": [
        {
          "title": "apicatalog.com",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MAY contain a cryptosuite identifier (cryptosuite).",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#proof-serialization-eddsa-jcs-2022';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.type,\n              'Expected a type identifier on the proof.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "_0U9KHyTZ5_hcTj33bej4",
              "ctx": null,
              "_testId": "urn:uuid:095f12b8-9be5-4eb8-8ab7-1abb0fb592c9",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MAY contain a cryptosuite identifier (cryptosuite)."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#proof-serialization-eddsa-jcs-2022",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 119795,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: setupRow in \"apicatalog.com\"",
              "body": "function setupRow() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "_0U9KHyTZ5_hcTj33bej4",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "originalTitle": "\"before each\" hook: setupRow",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"apicatalog.com\"",
              "body": "async function() {\n          issuedVc = await createInitialVc({issuer, vc: validVc});\n          proofs = getProofs(issuedVc);\n          if(proofs?.length) {\n            eddsa2022Proofs = proofs.filter(\n              proof => proof?.cryptosuite === cryptosuite);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "_0U9KHyTZ5_hcTj33bej4",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 119404,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 390,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "mrqUuBXcFumwwdrzCGBI1",
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
          "_testId": "urn:uuid:409c3d40-c146-4900-a3fb-50efed2bf315"
        },
        {
          "title": "Digital Bazaar",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MAY contain a cryptosuite identifier (cryptosuite).",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#proof-serialization-eddsa-jcs-2022';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.type,\n              'Expected a type identifier on the proof.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "iCUoRroOALdUiti_01INX",
              "ctx": null,
              "_testId": "urn:uuid:55042351-8924-4f7c-9554-b62b3412b4f4",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MAY contain a cryptosuite identifier (cryptosuite)."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#proof-serialization-eddsa-jcs-2022",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 119938,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: setupRow in \"Digital Bazaar\"",
              "body": "function setupRow() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "iCUoRroOALdUiti_01INX",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "originalTitle": "\"before each\" hook: setupRow",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Digital Bazaar\"",
              "body": "async function() {\n          issuedVc = await createInitialVc({issuer, vc: validVc});\n          proofs = getProofs(issuedVc);\n          if(proofs?.length) {\n            eddsa2022Proofs = proofs.filter(\n              proof => proof?.cryptosuite === cryptosuite);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "iCUoRroOALdUiti_01INX",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 119795,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 143,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "mrqUuBXcFumwwdrzCGBI1",
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
          "_testId": "urn:uuid:fbeb75c3-12bf-4a48-a26b-5666d0def032"
        },
        {
          "title": "Grotto Networking",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MAY contain a cryptosuite identifier (cryptosuite).",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#proof-serialization-eddsa-jcs-2022';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.type,\n              'Expected a type identifier on the proof.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "4-2Wn0sYDyHIN6upoGGIX",
              "ctx": null,
              "_testId": "urn:uuid:a58dde4c-ce24-40e3-811c-e8e86a9693ea",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MAY contain a cryptosuite identifier (cryptosuite)."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#proof-serialization-eddsa-jcs-2022",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 119960,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: setupRow in \"Grotto Networking\"",
              "body": "function setupRow() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "4-2Wn0sYDyHIN6upoGGIX",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "originalTitle": "\"before each\" hook: setupRow",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Grotto Networking\"",
              "body": "async function() {\n          issuedVc = await createInitialVc({issuer, vc: validVc});\n          proofs = getProofs(issuedVc);\n          if(proofs?.length) {\n            eddsa2022Proofs = proofs.filter(\n              proof => proof?.cryptosuite === cryptosuite);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "4-2Wn0sYDyHIN6upoGGIX",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 119938,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 21,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "mrqUuBXcFumwwdrzCGBI1",
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
          "_testId": "urn:uuid:060faf5e-a7a3-463e-bb54-cd339df47559"
        },
        {
          "title": "OpSecId",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MAY contain a cryptosuite identifier (cryptosuite).",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#proof-serialization-eddsa-jcs-2022';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.type,\n              'Expected a type identifier on the proof.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "yuC3m-VK_nrV1DJeOL6--",
              "ctx": null,
              "_testId": "urn:uuid:64a14e2a-9578-4630-8336-7ab6df51f03b",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MAY contain a cryptosuite identifier (cryptosuite)."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#proof-serialization-eddsa-jcs-2022",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 120513,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: setupRow in \"OpSecId\"",
              "body": "function setupRow() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "yuC3m-VK_nrV1DJeOL6--",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "originalTitle": "\"before each\" hook: setupRow",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"OpSecId\"",
              "body": "async function() {\n          issuedVc = await createInitialVc({issuer, vc: validVc});\n          proofs = getProofs(issuedVc);\n          if(proofs?.length) {\n            eddsa2022Proofs = proofs.filter(\n              proof => proof?.cryptosuite === cryptosuite);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "yuC3m-VK_nrV1DJeOL6--",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 119960,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 553,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "mrqUuBXcFumwwdrzCGBI1",
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
          "_testId": "urn:uuid:51b995db-9958-4ee8-aac9-f18b6fdfb824"
        },
        {
          "title": "bovine",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MAY contain a cryptosuite identifier (cryptosuite).",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#proof-serialization-eddsa-jcs-2022';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.type,\n              'Expected a type identifier on the proof.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "rPgJLKmiFBnanHLm2C4hn",
              "ctx": null,
              "_testId": "urn:uuid:cc9924d0-a86e-46b8-8baf-319367793ac7",
              "cell": {
                "columnId": "bovine",
                "rowId": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MAY contain a cryptosuite identifier (cryptosuite)."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#proof-serialization-eddsa-jcs-2022",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 120660,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: setupRow in \"bovine\"",
              "body": "function setupRow() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "rPgJLKmiFBnanHLm2C4hn",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "originalTitle": "\"before each\" hook: setupRow",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"bovine\"",
              "body": "async function() {\n          issuedVc = await createInitialVc({issuer, vc: validVc});\n          proofs = getProofs(issuedVc);\n          if(proofs?.length) {\n            eddsa2022Proofs = proofs.filter(\n              proof => proof?.cryptosuite === cryptosuite);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "rPgJLKmiFBnanHLm2C4hn",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 120514,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 146,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "mrqUuBXcFumwwdrzCGBI1",
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
          "_testId": "urn:uuid:382e6863-c896-43fd-9e29-97e3704f43a7"
        }
      ],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [
        {
          "title": "\"before all\" hook in \"eddsa-jcs-2022 - Algorithms - Proof Serialization\"",
          "body": "async function() {\n      const credentials = await generateTestData();\n      validVc = credentials.clone('validVc');\n    }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "mrqUuBXcFumwwdrzCGBI1",
          "ctx": null,
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 119403,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 2,
          "_error": null
        }
      ],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "Ika60aoT9ncTXtTubybzs",
      "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Implementer",
      "_testId": "urn:uuid:90afb471-10f1-45c2-acb3-46b12932ab90",
      "columns": [
        "apicatalog.com",
        "Digital Bazaar",
        "Grotto Networking",
        "OpSecId",
        "bovine"
      ],
      "rows": [
        {
          "id": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MAY contain a cryptosuite identifier (cryptosuite).",
          "link": "https://w3c.github.io/vc-di-eddsa/#proof-serialization-eddsa-jcs-2022",
          "cells": [
            {
              "type": "test",
              "title": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MAY contain a cryptosuite identifier (cryptosuite).",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#proof-serialization-eddsa-jcs-2022';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.type,\n              'Expected a type identifier on the proof.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "_0U9KHyTZ5_hcTj33bej4",
              "ctx": null,
              "_testId": "urn:uuid:095f12b8-9be5-4eb8-8ab7-1abb0fb592c9",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MAY contain a cryptosuite identifier (cryptosuite)."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#proof-serialization-eddsa-jcs-2022",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 119795,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MAY contain a cryptosuite identifier (cryptosuite).",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#proof-serialization-eddsa-jcs-2022';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.type,\n              'Expected a type identifier on the proof.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "iCUoRroOALdUiti_01INX",
              "ctx": null,
              "_testId": "urn:uuid:55042351-8924-4f7c-9554-b62b3412b4f4",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MAY contain a cryptosuite identifier (cryptosuite)."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#proof-serialization-eddsa-jcs-2022",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 119938,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MAY contain a cryptosuite identifier (cryptosuite).",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#proof-serialization-eddsa-jcs-2022';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.type,\n              'Expected a type identifier on the proof.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "4-2Wn0sYDyHIN6upoGGIX",
              "ctx": null,
              "_testId": "urn:uuid:a58dde4c-ce24-40e3-811c-e8e86a9693ea",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MAY contain a cryptosuite identifier (cryptosuite)."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#proof-serialization-eddsa-jcs-2022",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 119960,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MAY contain a cryptosuite identifier (cryptosuite).",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#proof-serialization-eddsa-jcs-2022';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.type,\n              'Expected a type identifier on the proof.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "yuC3m-VK_nrV1DJeOL6--",
              "ctx": null,
              "_testId": "urn:uuid:64a14e2a-9578-4630-8336-7ab6df51f03b",
              "cell": {
                "columnId": "OpSecId",
                "rowId": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MAY contain a cryptosuite identifier (cryptosuite)."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#proof-serialization-eddsa-jcs-2022",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 120513,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MAY contain a cryptosuite identifier (cryptosuite).",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#proof-serialization-eddsa-jcs-2022';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.type,\n              'Expected a type identifier on the proof.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "rPgJLKmiFBnanHLm2C4hn",
              "ctx": null,
              "_testId": "urn:uuid:cc9924d0-a86e-46b8-8baf-319367793ac7",
              "cell": {
                "columnId": "bovine",
                "rowId": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MAY contain a cryptosuite identifier (cryptosuite)."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#proof-serialization-eddsa-jcs-2022",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 120660,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        }
      ]
    },
    {
      "title": "eddsa-rdfc-2022 - Algorithms - Transformation",
      "ctx": null,
      "suites": [
        {
          "title": "apicatalog.com",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The transformation options MUST contain a type identifier for the cryptographic suite (type) and a cryptosuite identifier  (cryptosuite).",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-rdfc-2022';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.type,\n              'Expected a type identifier on the proof.');\n            should.exist(proof.cryptosuite,\n              'Expected a cryptosuite identifier on the proof.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "6VhZC_XhhqDRxeY4dDaea",
              "ctx": null,
              "_testId": "urn:uuid:ad857033-30fa-49d4-83ac-a11928d1f47c",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "The transformation options MUST contain a type identifier for the cryptographic suite (type) and a cryptosuite identifier  (cryptosuite)."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-rdfc-2022",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 121743,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Whenever this algorithm encodes strings, it MUST use UTF-8 encoding.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-rdfc-2022';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof?.proofValue,\n              'Expected proofValue to exist.');\n            isValidUtf8(proof.proofValue).should.equal(\n              true,\n              'Expected proofValue value to be a valid UTF-8 encoded string.'\n            );\n          }\n\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "6VhZC_XhhqDRxeY4dDaea",
              "ctx": null,
              "_testId": "urn:uuid:4db5576e-6c13-4858-9c88-8f581d5cb6ad",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "Whenever this algorithm encodes strings, it MUST use UTF-8 encoding."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-rdfc-2022",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 121743,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If options.type is not set to the string DataIntegrityProof and options.cryptosuite is not set to the string eddsa-rdfc-2022, an error MUST be raised that SHOULD convey an error type of PROOF_TRANSFORMATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-rdfc-2022';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.type,\n              'Expected a type identifier on the proof.');\n            should.exist(proof.cryptosuite,\n              'Expected a cryptosuite identifier on the proof.');\n            proof.type.should.equal('DataIntegrityProof',\n              'Expected DataIntegrityProof type.');\n            proof.cryptosuite.should.equal('eddsa-rdfc-2022',\n              'Expected eddsa-rdfc-2022 cryptosuite.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "6VhZC_XhhqDRxeY4dDaea",
              "ctx": null,
              "_testId": "urn:uuid:5839837d-84ed-4adf-b593-fcf274f9c73f",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If options.type is not set to the string DataIntegrityProof and options.cryptosuite is not set to the string eddsa-rdfc-2022, an error MUST be raised that SHOULD convey an error type of PROOF_TRANSFORMATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-rdfc-2022",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 121743,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: setupRow in \"apicatalog.com\"",
              "body": "function setupRow() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "6VhZC_XhhqDRxeY4dDaea",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "originalTitle": "\"before each\" hook: setupRow",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"apicatalog.com\"",
              "body": "async function() {\n          issuedVc = await createInitialVc({issuer, vc: validVc});\n          proofs = getProofs(issuedVc);\n          if(proofs?.length) {\n            eddsa2022Proofs = proofs.filter(\n              proof => proof?.cryptosuite === cryptosuite);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "6VhZC_XhhqDRxeY4dDaea",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 120662,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1080,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "DOaJYYdvNmf04Nu9OTWUi",
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
          "_testId": "urn:uuid:8f82e6f7-f15c-423d-b4bb-ce383c6ef1d6"
        },
        {
          "title": "Aviary Tech",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The transformation options MUST contain a type identifier for the cryptographic suite (type) and a cryptosuite identifier  (cryptosuite).",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-rdfc-2022';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.type,\n              'Expected a type identifier on the proof.');\n            should.exist(proof.cryptosuite,\n              'Expected a cryptosuite identifier on the proof.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "fX1iR8a44MqLT82_h41ON",
              "ctx": null,
              "_testId": "urn:uuid:2b5b542a-091b-422d-87fd-f2c09c12a165",
              "cell": {
                "columnId": "Aviary Tech",
                "rowId": "The transformation options MUST contain a type identifier for the cryptographic suite (type) and a cryptosuite identifier  (cryptosuite)."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-rdfc-2022",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 121895,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Whenever this algorithm encodes strings, it MUST use UTF-8 encoding.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-rdfc-2022';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof?.proofValue,\n              'Expected proofValue to exist.');\n            isValidUtf8(proof.proofValue).should.equal(\n              true,\n              'Expected proofValue value to be a valid UTF-8 encoded string.'\n            );\n          }\n\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "fX1iR8a44MqLT82_h41ON",
              "ctx": null,
              "_testId": "urn:uuid:066a3d8b-4091-4243-b0c0-801c8bd7e0c6",
              "cell": {
                "columnId": "Aviary Tech",
                "rowId": "Whenever this algorithm encodes strings, it MUST use UTF-8 encoding."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-rdfc-2022",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 121896,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If options.type is not set to the string DataIntegrityProof and options.cryptosuite is not set to the string eddsa-rdfc-2022, an error MUST be raised that SHOULD convey an error type of PROOF_TRANSFORMATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-rdfc-2022';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.type,\n              'Expected a type identifier on the proof.');\n            should.exist(proof.cryptosuite,\n              'Expected a cryptosuite identifier on the proof.');\n            proof.type.should.equal('DataIntegrityProof',\n              'Expected DataIntegrityProof type.');\n            proof.cryptosuite.should.equal('eddsa-rdfc-2022',\n              'Expected eddsa-rdfc-2022 cryptosuite.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "fX1iR8a44MqLT82_h41ON",
              "ctx": null,
              "_testId": "urn:uuid:80528f83-a25b-4341-868c-a58a26b014c0",
              "cell": {
                "columnId": "Aviary Tech",
                "rowId": "If options.type is not set to the string DataIntegrityProof and options.cryptosuite is not set to the string eddsa-rdfc-2022, an error MUST be raised that SHOULD convey an error type of PROOF_TRANSFORMATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-rdfc-2022",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 121896,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: setupRow in \"Aviary Tech\"",
              "body": "function setupRow() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "fX1iR8a44MqLT82_h41ON",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "originalTitle": "\"before each\" hook: setupRow",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Aviary Tech\"",
              "body": "async function() {\n          issuedVc = await createInitialVc({issuer, vc: validVc});\n          proofs = getProofs(issuedVc);\n          if(proofs?.length) {\n            eddsa2022Proofs = proofs.filter(\n              proof => proof?.cryptosuite === cryptosuite);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "fX1iR8a44MqLT82_h41ON",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 121744,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 151,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "DOaJYYdvNmf04Nu9OTWUi",
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
          "_testId": "urn:uuid:a0f1f8c8-7fbf-458e-8618-f40554ea163f"
        },
        {
          "title": "Digital Bazaar",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The transformation options MUST contain a type identifier for the cryptographic suite (type) and a cryptosuite identifier  (cryptosuite).",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-rdfc-2022';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.type,\n              'Expected a type identifier on the proof.');\n            should.exist(proof.cryptosuite,\n              'Expected a cryptosuite identifier on the proof.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "AvlxpP6tp-UvsVhKd_ua3",
              "ctx": null,
              "_testId": "urn:uuid:e4e0f72b-da9d-476b-8180-06f7f63856e8",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The transformation options MUST contain a type identifier for the cryptographic suite (type) and a cryptosuite identifier  (cryptosuite)."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-rdfc-2022",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 122026,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Whenever this algorithm encodes strings, it MUST use UTF-8 encoding.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-rdfc-2022';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof?.proofValue,\n              'Expected proofValue to exist.');\n            isValidUtf8(proof.proofValue).should.equal(\n              true,\n              'Expected proofValue value to be a valid UTF-8 encoded string.'\n            );\n          }\n\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "AvlxpP6tp-UvsVhKd_ua3",
              "ctx": null,
              "_testId": "urn:uuid:188a9af3-727a-4d18-b998-c529e94cb176",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "Whenever this algorithm encodes strings, it MUST use UTF-8 encoding."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-rdfc-2022",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 122026,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If options.type is not set to the string DataIntegrityProof and options.cryptosuite is not set to the string eddsa-rdfc-2022, an error MUST be raised that SHOULD convey an error type of PROOF_TRANSFORMATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-rdfc-2022';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.type,\n              'Expected a type identifier on the proof.');\n            should.exist(proof.cryptosuite,\n              'Expected a cryptosuite identifier on the proof.');\n            proof.type.should.equal('DataIntegrityProof',\n              'Expected DataIntegrityProof type.');\n            proof.cryptosuite.should.equal('eddsa-rdfc-2022',\n              'Expected eddsa-rdfc-2022 cryptosuite.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "AvlxpP6tp-UvsVhKd_ua3",
              "ctx": null,
              "_testId": "urn:uuid:c8a9ec44-e36d-4560-b093-4ea3ab8a8504",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If options.type is not set to the string DataIntegrityProof and options.cryptosuite is not set to the string eddsa-rdfc-2022, an error MUST be raised that SHOULD convey an error type of PROOF_TRANSFORMATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-rdfc-2022",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 122026,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: setupRow in \"Digital Bazaar\"",
              "body": "function setupRow() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "AvlxpP6tp-UvsVhKd_ua3",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "originalTitle": "\"before each\" hook: setupRow",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Digital Bazaar\"",
              "body": "async function() {\n          issuedVc = await createInitialVc({issuer, vc: validVc});\n          proofs = getProofs(issuedVc);\n          if(proofs?.length) {\n            eddsa2022Proofs = proofs.filter(\n              proof => proof?.cryptosuite === cryptosuite);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "AvlxpP6tp-UvsVhKd_ua3",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 121896,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 129,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "DOaJYYdvNmf04Nu9OTWUi",
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
          "_testId": "urn:uuid:513ea12a-b936-4e88-874b-56cb65e3c84e"
        },
        {
          "title": "Grotto Networking",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The transformation options MUST contain a type identifier for the cryptographic suite (type) and a cryptosuite identifier  (cryptosuite).",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-rdfc-2022';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.type,\n              'Expected a type identifier on the proof.');\n            should.exist(proof.cryptosuite,\n              'Expected a cryptosuite identifier on the proof.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "cb_9CmdvZS2x5YY_8XSYK",
              "ctx": null,
              "_testId": "urn:uuid:9b2498ef-8a4e-45ae-820b-afb5a9714de8",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The transformation options MUST contain a type identifier for the cryptographic suite (type) and a cryptosuite identifier  (cryptosuite)."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-rdfc-2022",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 122052,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Whenever this algorithm encodes strings, it MUST use UTF-8 encoding.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-rdfc-2022';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof?.proofValue,\n              'Expected proofValue to exist.');\n            isValidUtf8(proof.proofValue).should.equal(\n              true,\n              'Expected proofValue value to be a valid UTF-8 encoded string.'\n            );\n          }\n\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "cb_9CmdvZS2x5YY_8XSYK",
              "ctx": null,
              "_testId": "urn:uuid:6ce40bf2-b1c4-4c66-8482-21d713678a43",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "Whenever this algorithm encodes strings, it MUST use UTF-8 encoding."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-rdfc-2022",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 122053,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If options.type is not set to the string DataIntegrityProof and options.cryptosuite is not set to the string eddsa-rdfc-2022, an error MUST be raised that SHOULD convey an error type of PROOF_TRANSFORMATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-rdfc-2022';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.type,\n              'Expected a type identifier on the proof.');\n            should.exist(proof.cryptosuite,\n              'Expected a cryptosuite identifier on the proof.');\n            proof.type.should.equal('DataIntegrityProof',\n              'Expected DataIntegrityProof type.');\n            proof.cryptosuite.should.equal('eddsa-rdfc-2022',\n              'Expected eddsa-rdfc-2022 cryptosuite.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "cb_9CmdvZS2x5YY_8XSYK",
              "ctx": null,
              "_testId": "urn:uuid:2d3596a5-5d1a-4cd4-81a5-b543d692dd15",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If options.type is not set to the string DataIntegrityProof and options.cryptosuite is not set to the string eddsa-rdfc-2022, an error MUST be raised that SHOULD convey an error type of PROOF_TRANSFORMATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-rdfc-2022",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 122053,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: setupRow in \"Grotto Networking\"",
              "body": "function setupRow() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "cb_9CmdvZS2x5YY_8XSYK",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "originalTitle": "\"before each\" hook: setupRow",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Grotto Networking\"",
              "body": "async function() {\n          issuedVc = await createInitialVc({issuer, vc: validVc});\n          proofs = getProofs(issuedVc);\n          if(proofs?.length) {\n            eddsa2022Proofs = proofs.filter(\n              proof => proof?.cryptosuite === cryptosuite);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "cb_9CmdvZS2x5YY_8XSYK",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 122026,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 26,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "DOaJYYdvNmf04Nu9OTWUi",
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
          "_testId": "urn:uuid:e3fe1a4f-c86f-437d-9fcb-3c8315eaed40"
        },
        {
          "title": "Procivis One Core",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The transformation options MUST contain a type identifier for the cryptographic suite (type) and a cryptosuite identifier  (cryptosuite).",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-rdfc-2022';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.type,\n              'Expected a type identifier on the proof.');\n            should.exist(proof.cryptosuite,\n              'Expected a cryptosuite identifier on the proof.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "PFAw18thC_oSoG-3gjgEc",
              "ctx": null,
              "_testId": "urn:uuid:edadf79d-d426-403c-b35f-acfbbf8fe36b",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "The transformation options MUST contain a type identifier for the cryptographic suite (type) and a cryptosuite identifier  (cryptosuite)."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-rdfc-2022",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 122540,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Whenever this algorithm encodes strings, it MUST use UTF-8 encoding.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-rdfc-2022';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof?.proofValue,\n              'Expected proofValue to exist.');\n            isValidUtf8(proof.proofValue).should.equal(\n              true,\n              'Expected proofValue value to be a valid UTF-8 encoded string.'\n            );\n          }\n\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "PFAw18thC_oSoG-3gjgEc",
              "ctx": null,
              "_testId": "urn:uuid:b4a5c118-47f6-446a-8b58-1e7bfdfebaa0",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "Whenever this algorithm encodes strings, it MUST use UTF-8 encoding."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-rdfc-2022",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 122540,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If options.type is not set to the string DataIntegrityProof and options.cryptosuite is not set to the string eddsa-rdfc-2022, an error MUST be raised that SHOULD convey an error type of PROOF_TRANSFORMATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-rdfc-2022';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.type,\n              'Expected a type identifier on the proof.');\n            should.exist(proof.cryptosuite,\n              'Expected a cryptosuite identifier on the proof.');\n            proof.type.should.equal('DataIntegrityProof',\n              'Expected DataIntegrityProof type.');\n            proof.cryptosuite.should.equal('eddsa-rdfc-2022',\n              'Expected eddsa-rdfc-2022 cryptosuite.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "PFAw18thC_oSoG-3gjgEc",
              "ctx": null,
              "_testId": "urn:uuid:e9860d16-a398-42c5-a0a7-5b48149fe900",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "If options.type is not set to the string DataIntegrityProof and options.cryptosuite is not set to the string eddsa-rdfc-2022, an error MUST be raised that SHOULD convey an error type of PROOF_TRANSFORMATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-rdfc-2022",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 122541,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: setupRow in \"Procivis One Core\"",
              "body": "function setupRow() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "PFAw18thC_oSoG-3gjgEc",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "originalTitle": "\"before each\" hook: setupRow",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Procivis One Core\"",
              "body": "async function() {\n          issuedVc = await createInitialVc({issuer, vc: validVc});\n          proofs = getProofs(issuedVc);\n          if(proofs?.length) {\n            eddsa2022Proofs = proofs.filter(\n              proof => proof?.cryptosuite === cryptosuite);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "PFAw18thC_oSoG-3gjgEc",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 122053,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 487,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "DOaJYYdvNmf04Nu9OTWUi",
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
          "_testId": "urn:uuid:d83f25d7-461b-4420-b0ef-0bc8207e4cb4"
        },
        {
          "title": "SpruceID",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The transformation options MUST contain a type identifier for the cryptographic suite (type) and a cryptosuite identifier  (cryptosuite).",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-rdfc-2022';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.type,\n              'Expected a type identifier on the proof.');\n            should.exist(proof.cryptosuite,\n              'Expected a cryptosuite identifier on the proof.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "H2Yp_pp8ObnKe5K81sIy8",
              "ctx": null,
              "_testId": "urn:uuid:c62628a8-7f4a-4235-b2d8-d0577381cbe4",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The transformation options MUST contain a type identifier for the cryptographic suite (type) and a cryptosuite identifier  (cryptosuite)."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-rdfc-2022",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 122680,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Whenever this algorithm encodes strings, it MUST use UTF-8 encoding.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-rdfc-2022';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof?.proofValue,\n              'Expected proofValue to exist.');\n            isValidUtf8(proof.proofValue).should.equal(\n              true,\n              'Expected proofValue value to be a valid UTF-8 encoded string.'\n            );\n          }\n\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "H2Yp_pp8ObnKe5K81sIy8",
              "ctx": null,
              "_testId": "urn:uuid:c5e48e02-c993-40a2-b9a5-bce8aa6536a4",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "Whenever this algorithm encodes strings, it MUST use UTF-8 encoding."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-rdfc-2022",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 122681,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If options.type is not set to the string DataIntegrityProof and options.cryptosuite is not set to the string eddsa-rdfc-2022, an error MUST be raised that SHOULD convey an error type of PROOF_TRANSFORMATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-rdfc-2022';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.type,\n              'Expected a type identifier on the proof.');\n            should.exist(proof.cryptosuite,\n              'Expected a cryptosuite identifier on the proof.');\n            proof.type.should.equal('DataIntegrityProof',\n              'Expected DataIntegrityProof type.');\n            proof.cryptosuite.should.equal('eddsa-rdfc-2022',\n              'Expected eddsa-rdfc-2022 cryptosuite.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "H2Yp_pp8ObnKe5K81sIy8",
              "ctx": null,
              "_testId": "urn:uuid:c7f96682-7c66-4eba-b143-3f99594bd322",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If options.type is not set to the string DataIntegrityProof and options.cryptosuite is not set to the string eddsa-rdfc-2022, an error MUST be raised that SHOULD convey an error type of PROOF_TRANSFORMATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-rdfc-2022",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 122681,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: setupRow in \"SpruceID\"",
              "body": "function setupRow() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "H2Yp_pp8ObnKe5K81sIy8",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "originalTitle": "\"before each\" hook: setupRow",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"SpruceID\"",
              "body": "async function() {\n          issuedVc = await createInitialVc({issuer, vc: validVc});\n          proofs = getProofs(issuedVc);\n          if(proofs?.length) {\n            eddsa2022Proofs = proofs.filter(\n              proof => proof?.cryptosuite === cryptosuite);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "H2Yp_pp8ObnKe5K81sIy8",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 122542,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 138,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "DOaJYYdvNmf04Nu9OTWUi",
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
          "_testId": "urn:uuid:0f9e66a6-49b0-4440-a68f-ec5f286d5b38"
        },
        {
          "title": "Trential",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The transformation options MUST contain a type identifier for the cryptographic suite (type) and a cryptosuite identifier  (cryptosuite).",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-rdfc-2022';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.type,\n              'Expected a type identifier on the proof.');\n            should.exist(proof.cryptosuite,\n              'Expected a cryptosuite identifier on the proof.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "6xb2JOS2h8hjAbbK1zIA_",
              "ctx": null,
              "_testId": "urn:uuid:ed9c83b6-b4b3-44fa-acf0-1ac366d9550f",
              "cell": {
                "columnId": "Trential",
                "rowId": "The transformation options MUST contain a type identifier for the cryptographic suite (type) and a cryptosuite identifier  (cryptosuite)."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-rdfc-2022",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 123638,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Whenever this algorithm encodes strings, it MUST use UTF-8 encoding.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-rdfc-2022';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof?.proofValue,\n              'Expected proofValue to exist.');\n            isValidUtf8(proof.proofValue).should.equal(\n              true,\n              'Expected proofValue value to be a valid UTF-8 encoded string.'\n            );\n          }\n\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "6xb2JOS2h8hjAbbK1zIA_",
              "ctx": null,
              "_testId": "urn:uuid:941408cd-f03c-4d47-8e42-df6a66ea816d",
              "cell": {
                "columnId": "Trential",
                "rowId": "Whenever this algorithm encodes strings, it MUST use UTF-8 encoding."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-rdfc-2022",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 123638,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If options.type is not set to the string DataIntegrityProof and options.cryptosuite is not set to the string eddsa-rdfc-2022, an error MUST be raised that SHOULD convey an error type of PROOF_TRANSFORMATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-rdfc-2022';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.type,\n              'Expected a type identifier on the proof.');\n            should.exist(proof.cryptosuite,\n              'Expected a cryptosuite identifier on the proof.');\n            proof.type.should.equal('DataIntegrityProof',\n              'Expected DataIntegrityProof type.');\n            proof.cryptosuite.should.equal('eddsa-rdfc-2022',\n              'Expected eddsa-rdfc-2022 cryptosuite.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "6xb2JOS2h8hjAbbK1zIA_",
              "ctx": null,
              "_testId": "urn:uuid:49b73581-e8b6-48b9-a11d-fd4644f77ea8",
              "cell": {
                "columnId": "Trential",
                "rowId": "If options.type is not set to the string DataIntegrityProof and options.cryptosuite is not set to the string eddsa-rdfc-2022, an error MUST be raised that SHOULD convey an error type of PROOF_TRANSFORMATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-rdfc-2022",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 123638,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: setupRow in \"Trential\"",
              "body": "function setupRow() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "6xb2JOS2h8hjAbbK1zIA_",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "originalTitle": "\"before each\" hook: setupRow",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Trential\"",
              "body": "async function() {\n          issuedVc = await createInitialVc({issuer, vc: validVc});\n          proofs = getProofs(issuedVc);\n          if(proofs?.length) {\n            eddsa2022Proofs = proofs.filter(\n              proof => proof?.cryptosuite === cryptosuite);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "6xb2JOS2h8hjAbbK1zIA_",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 122681,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 957,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "DOaJYYdvNmf04Nu9OTWUi",
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
          "_testId": "urn:uuid:14ae3518-9c99-4984-8049-15a6caa83972"
        },
        {
          "title": "Trinsic",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The transformation options MUST contain a type identifier for the cryptographic suite (type) and a cryptosuite identifier  (cryptosuite).",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-rdfc-2022';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.type,\n              'Expected a type identifier on the proof.');\n            should.exist(proof.cryptosuite,\n              'Expected a cryptosuite identifier on the proof.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "x7Ojv4qxLSbH81Ky6BUfv",
              "ctx": null,
              "_testId": "urn:uuid:cdb785e0-2d91-4318-96cd-324a2a48e5d1",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "The transformation options MUST contain a type identifier for the cryptographic suite (type) and a cryptosuite identifier  (cryptosuite)."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-rdfc-2022",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 123989,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected issuer to have issued a credential.: expected undefined to exist",
                "showDiff": false,
                "stack": "AssertionError: Expected issuer to have issued a credential.: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at assertBefore (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/suites/algorithms.js:259:18)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/suites/algorithms.js:272:11)\n    at process.processImmediate (node:internal/timers:483:21)"
              }
            },
            {
              "type": "test",
              "title": "Whenever this algorithm encodes strings, it MUST use UTF-8 encoding.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-rdfc-2022';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof?.proofValue,\n              'Expected proofValue to exist.');\n            isValidUtf8(proof.proofValue).should.equal(\n              true,\n              'Expected proofValue value to be a valid UTF-8 encoded string.'\n            );\n          }\n\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "x7Ojv4qxLSbH81Ky6BUfv",
              "ctx": null,
              "_testId": "urn:uuid:26c47fac-6945-4aa6-ad94-d4580e5f7fa0",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "Whenever this algorithm encodes strings, it MUST use UTF-8 encoding."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-rdfc-2022",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 123990,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected issuer to have issued a credential.: expected undefined to exist",
                "showDiff": false,
                "stack": "AssertionError: Expected issuer to have issued a credential.: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at assertBefore (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/suites/algorithms.js:259:18)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/suites/algorithms.js:283:11)\n    at process.processImmediate (node:internal/timers:483:21)"
              }
            },
            {
              "type": "test",
              "title": "If options.type is not set to the string DataIntegrityProof and options.cryptosuite is not set to the string eddsa-rdfc-2022, an error MUST be raised that SHOULD convey an error type of PROOF_TRANSFORMATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-rdfc-2022';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.type,\n              'Expected a type identifier on the proof.');\n            should.exist(proof.cryptosuite,\n              'Expected a cryptosuite identifier on the proof.');\n            proof.type.should.equal('DataIntegrityProof',\n              'Expected DataIntegrityProof type.');\n            proof.cryptosuite.should.equal('eddsa-rdfc-2022',\n              'Expected eddsa-rdfc-2022 cryptosuite.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "x7Ojv4qxLSbH81Ky6BUfv",
              "ctx": null,
              "_testId": "urn:uuid:7b1b142a-2b5c-405e-846d-6dc34e3f135a",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "If options.type is not set to the string DataIntegrityProof and options.cryptosuite is not set to the string eddsa-rdfc-2022, an error MUST be raised that SHOULD convey an error type of PROOF_TRANSFORMATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-rdfc-2022",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 123990,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected issuer to have issued a credential.: expected undefined to exist",
                "showDiff": false,
                "stack": "AssertionError: Expected issuer to have issued a credential.: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at assertBefore (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/suites/algorithms.js:259:18)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/suites/algorithms.js:300:11)\n    at process.processImmediate (node:internal/timers:483:21)"
              }
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: setupRow in \"Trinsic\"",
              "body": "function setupRow() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "x7Ojv4qxLSbH81Ky6BUfv",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "originalTitle": "\"before each\" hook: setupRow",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Trinsic\"",
              "body": "async function() {\n          issuedVc = await createInitialVc({issuer, vc: validVc});\n          proofs = getProofs(issuedVc);\n          if(proofs?.length) {\n            eddsa2022Proofs = proofs.filter(\n              proof => proof?.cryptosuite === cryptosuite);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "x7Ojv4qxLSbH81Ky6BUfv",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 123639,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 350,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "DOaJYYdvNmf04Nu9OTWUi",
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
          "_testId": "urn:uuid:cd0fb128-2de5-4113-87e7-ca0caac2dd26"
        },
        {
          "title": "bovine",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The transformation options MUST contain a type identifier for the cryptographic suite (type) and a cryptosuite identifier  (cryptosuite).",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-rdfc-2022';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.type,\n              'Expected a type identifier on the proof.');\n            should.exist(proof.cryptosuite,\n              'Expected a cryptosuite identifier on the proof.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "PKnA4B_0RkifODq3byvgn",
              "ctx": null,
              "_testId": "urn:uuid:0d2f2bcc-60c6-4798-b66c-c413e5cd13f9",
              "cell": {
                "columnId": "bovine",
                "rowId": "The transformation options MUST contain a type identifier for the cryptographic suite (type) and a cryptosuite identifier  (cryptosuite)."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-rdfc-2022",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 124139,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Whenever this algorithm encodes strings, it MUST use UTF-8 encoding.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-rdfc-2022';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof?.proofValue,\n              'Expected proofValue to exist.');\n            isValidUtf8(proof.proofValue).should.equal(\n              true,\n              'Expected proofValue value to be a valid UTF-8 encoded string.'\n            );\n          }\n\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "PKnA4B_0RkifODq3byvgn",
              "ctx": null,
              "_testId": "urn:uuid:5dca1574-280b-441b-911a-217d3a91f60c",
              "cell": {
                "columnId": "bovine",
                "rowId": "Whenever this algorithm encodes strings, it MUST use UTF-8 encoding."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-rdfc-2022",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 124139,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If options.type is not set to the string DataIntegrityProof and options.cryptosuite is not set to the string eddsa-rdfc-2022, an error MUST be raised that SHOULD convey an error type of PROOF_TRANSFORMATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-rdfc-2022';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.type,\n              'Expected a type identifier on the proof.');\n            should.exist(proof.cryptosuite,\n              'Expected a cryptosuite identifier on the proof.');\n            proof.type.should.equal('DataIntegrityProof',\n              'Expected DataIntegrityProof type.');\n            proof.cryptosuite.should.equal('eddsa-rdfc-2022',\n              'Expected eddsa-rdfc-2022 cryptosuite.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "PKnA4B_0RkifODq3byvgn",
              "ctx": null,
              "_testId": "urn:uuid:3dc31abf-0536-4d2b-8749-5206200f52d2",
              "cell": {
                "columnId": "bovine",
                "rowId": "If options.type is not set to the string DataIntegrityProof and options.cryptosuite is not set to the string eddsa-rdfc-2022, an error MUST be raised that SHOULD convey an error type of PROOF_TRANSFORMATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-rdfc-2022",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 124139,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: setupRow in \"bovine\"",
              "body": "function setupRow() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "PKnA4B_0RkifODq3byvgn",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "originalTitle": "\"before each\" hook: setupRow",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"bovine\"",
              "body": "async function() {\n          issuedVc = await createInitialVc({issuer, vc: validVc});\n          proofs = getProofs(issuedVc);\n          if(proofs?.length) {\n            eddsa2022Proofs = proofs.filter(\n              proof => proof?.cryptosuite === cryptosuite);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "PKnA4B_0RkifODq3byvgn",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 123991,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 149,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "DOaJYYdvNmf04Nu9OTWUi",
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
          "_testId": "urn:uuid:2581e598-d9ad-4901-9b8b-1726d1c3384c"
        }
      ],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [
        {
          "title": "\"before all\" hook in \"eddsa-rdfc-2022 - Algorithms - Transformation\"",
          "body": "async function() {\n      const credentials = await generateTestData();\n      validVc = credentials.clone('validVc');\n    }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "DOaJYYdvNmf04Nu9OTWUi",
          "ctx": null,
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 120661,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 2,
          "_error": null
        }
      ],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "Ika60aoT9ncTXtTubybzs",
      "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Implementer",
      "_testId": "urn:uuid:ab505a51-c7a1-4384-8c8a-7e9aa5f4ed8b",
      "columns": [
        "apicatalog.com",
        "Aviary Tech",
        "Digital Bazaar",
        "Grotto Networking",
        "Procivis One Core",
        "SpruceID",
        "Trential",
        "Trinsic",
        "bovine"
      ],
      "rows": [
        {
          "id": "The transformation options MUST contain a type identifier for the cryptographic suite (type) and a cryptosuite identifier  (cryptosuite).",
          "link": "https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-rdfc-2022",
          "cells": [
            {
              "type": "test",
              "title": "The transformation options MUST contain a type identifier for the cryptographic suite (type) and a cryptosuite identifier  (cryptosuite).",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-rdfc-2022';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.type,\n              'Expected a type identifier on the proof.');\n            should.exist(proof.cryptosuite,\n              'Expected a cryptosuite identifier on the proof.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "6VhZC_XhhqDRxeY4dDaea",
              "ctx": null,
              "_testId": "urn:uuid:ad857033-30fa-49d4-83ac-a11928d1f47c",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "The transformation options MUST contain a type identifier for the cryptographic suite (type) and a cryptosuite identifier  (cryptosuite)."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-rdfc-2022",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 121743,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The transformation options MUST contain a type identifier for the cryptographic suite (type) and a cryptosuite identifier  (cryptosuite).",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-rdfc-2022';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.type,\n              'Expected a type identifier on the proof.');\n            should.exist(proof.cryptosuite,\n              'Expected a cryptosuite identifier on the proof.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "fX1iR8a44MqLT82_h41ON",
              "ctx": null,
              "_testId": "urn:uuid:2b5b542a-091b-422d-87fd-f2c09c12a165",
              "cell": {
                "columnId": "Aviary Tech",
                "rowId": "The transformation options MUST contain a type identifier for the cryptographic suite (type) and a cryptosuite identifier  (cryptosuite)."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-rdfc-2022",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 121895,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The transformation options MUST contain a type identifier for the cryptographic suite (type) and a cryptosuite identifier  (cryptosuite).",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-rdfc-2022';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.type,\n              'Expected a type identifier on the proof.');\n            should.exist(proof.cryptosuite,\n              'Expected a cryptosuite identifier on the proof.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "AvlxpP6tp-UvsVhKd_ua3",
              "ctx": null,
              "_testId": "urn:uuid:e4e0f72b-da9d-476b-8180-06f7f63856e8",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The transformation options MUST contain a type identifier for the cryptographic suite (type) and a cryptosuite identifier  (cryptosuite)."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-rdfc-2022",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 122026,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The transformation options MUST contain a type identifier for the cryptographic suite (type) and a cryptosuite identifier  (cryptosuite).",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-rdfc-2022';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.type,\n              'Expected a type identifier on the proof.');\n            should.exist(proof.cryptosuite,\n              'Expected a cryptosuite identifier on the proof.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "cb_9CmdvZS2x5YY_8XSYK",
              "ctx": null,
              "_testId": "urn:uuid:9b2498ef-8a4e-45ae-820b-afb5a9714de8",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The transformation options MUST contain a type identifier for the cryptographic suite (type) and a cryptosuite identifier  (cryptosuite)."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-rdfc-2022",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 122052,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The transformation options MUST contain a type identifier for the cryptographic suite (type) and a cryptosuite identifier  (cryptosuite).",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-rdfc-2022';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.type,\n              'Expected a type identifier on the proof.');\n            should.exist(proof.cryptosuite,\n              'Expected a cryptosuite identifier on the proof.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "PFAw18thC_oSoG-3gjgEc",
              "ctx": null,
              "_testId": "urn:uuid:edadf79d-d426-403c-b35f-acfbbf8fe36b",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "The transformation options MUST contain a type identifier for the cryptographic suite (type) and a cryptosuite identifier  (cryptosuite)."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-rdfc-2022",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 122540,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The transformation options MUST contain a type identifier for the cryptographic suite (type) and a cryptosuite identifier  (cryptosuite).",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-rdfc-2022';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.type,\n              'Expected a type identifier on the proof.');\n            should.exist(proof.cryptosuite,\n              'Expected a cryptosuite identifier on the proof.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "H2Yp_pp8ObnKe5K81sIy8",
              "ctx": null,
              "_testId": "urn:uuid:c62628a8-7f4a-4235-b2d8-d0577381cbe4",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The transformation options MUST contain a type identifier for the cryptographic suite (type) and a cryptosuite identifier  (cryptosuite)."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-rdfc-2022",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 122680,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The transformation options MUST contain a type identifier for the cryptographic suite (type) and a cryptosuite identifier  (cryptosuite).",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-rdfc-2022';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.type,\n              'Expected a type identifier on the proof.');\n            should.exist(proof.cryptosuite,\n              'Expected a cryptosuite identifier on the proof.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "6xb2JOS2h8hjAbbK1zIA_",
              "ctx": null,
              "_testId": "urn:uuid:ed9c83b6-b4b3-44fa-acf0-1ac366d9550f",
              "cell": {
                "columnId": "Trential",
                "rowId": "The transformation options MUST contain a type identifier for the cryptographic suite (type) and a cryptosuite identifier  (cryptosuite)."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-rdfc-2022",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 123638,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The transformation options MUST contain a type identifier for the cryptographic suite (type) and a cryptosuite identifier  (cryptosuite).",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-rdfc-2022';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.type,\n              'Expected a type identifier on the proof.');\n            should.exist(proof.cryptosuite,\n              'Expected a cryptosuite identifier on the proof.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "x7Ojv4qxLSbH81Ky6BUfv",
              "ctx": null,
              "_testId": "urn:uuid:cdb785e0-2d91-4318-96cd-324a2a48e5d1",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "The transformation options MUST contain a type identifier for the cryptographic suite (type) and a cryptosuite identifier  (cryptosuite)."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-rdfc-2022",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 123989,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected issuer to have issued a credential.: expected undefined to exist",
                "showDiff": false,
                "stack": "AssertionError: Expected issuer to have issued a credential.: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at assertBefore (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/suites/algorithms.js:259:18)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/suites/algorithms.js:272:11)\n    at process.processImmediate (node:internal/timers:483:21)"
              }
            },
            {
              "type": "test",
              "title": "The transformation options MUST contain a type identifier for the cryptographic suite (type) and a cryptosuite identifier  (cryptosuite).",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-rdfc-2022';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.type,\n              'Expected a type identifier on the proof.');\n            should.exist(proof.cryptosuite,\n              'Expected a cryptosuite identifier on the proof.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "PKnA4B_0RkifODq3byvgn",
              "ctx": null,
              "_testId": "urn:uuid:0d2f2bcc-60c6-4798-b66c-c413e5cd13f9",
              "cell": {
                "columnId": "bovine",
                "rowId": "The transformation options MUST contain a type identifier for the cryptographic suite (type) and a cryptosuite identifier  (cryptosuite)."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-rdfc-2022",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 124139,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "Whenever this algorithm encodes strings, it MUST use UTF-8 encoding.",
          "link": "https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-rdfc-2022",
          "cells": [
            {
              "type": "test",
              "title": "Whenever this algorithm encodes strings, it MUST use UTF-8 encoding.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-rdfc-2022';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof?.proofValue,\n              'Expected proofValue to exist.');\n            isValidUtf8(proof.proofValue).should.equal(\n              true,\n              'Expected proofValue value to be a valid UTF-8 encoded string.'\n            );\n          }\n\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "6VhZC_XhhqDRxeY4dDaea",
              "ctx": null,
              "_testId": "urn:uuid:4db5576e-6c13-4858-9c88-8f581d5cb6ad",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "Whenever this algorithm encodes strings, it MUST use UTF-8 encoding."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-rdfc-2022",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 121743,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Whenever this algorithm encodes strings, it MUST use UTF-8 encoding.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-rdfc-2022';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof?.proofValue,\n              'Expected proofValue to exist.');\n            isValidUtf8(proof.proofValue).should.equal(\n              true,\n              'Expected proofValue value to be a valid UTF-8 encoded string.'\n            );\n          }\n\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "fX1iR8a44MqLT82_h41ON",
              "ctx": null,
              "_testId": "urn:uuid:066a3d8b-4091-4243-b0c0-801c8bd7e0c6",
              "cell": {
                "columnId": "Aviary Tech",
                "rowId": "Whenever this algorithm encodes strings, it MUST use UTF-8 encoding."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-rdfc-2022",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 121896,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Whenever this algorithm encodes strings, it MUST use UTF-8 encoding.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-rdfc-2022';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof?.proofValue,\n              'Expected proofValue to exist.');\n            isValidUtf8(proof.proofValue).should.equal(\n              true,\n              'Expected proofValue value to be a valid UTF-8 encoded string.'\n            );\n          }\n\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "AvlxpP6tp-UvsVhKd_ua3",
              "ctx": null,
              "_testId": "urn:uuid:188a9af3-727a-4d18-b998-c529e94cb176",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "Whenever this algorithm encodes strings, it MUST use UTF-8 encoding."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-rdfc-2022",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 122026,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Whenever this algorithm encodes strings, it MUST use UTF-8 encoding.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-rdfc-2022';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof?.proofValue,\n              'Expected proofValue to exist.');\n            isValidUtf8(proof.proofValue).should.equal(\n              true,\n              'Expected proofValue value to be a valid UTF-8 encoded string.'\n            );\n          }\n\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "cb_9CmdvZS2x5YY_8XSYK",
              "ctx": null,
              "_testId": "urn:uuid:6ce40bf2-b1c4-4c66-8482-21d713678a43",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "Whenever this algorithm encodes strings, it MUST use UTF-8 encoding."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-rdfc-2022",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 122053,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Whenever this algorithm encodes strings, it MUST use UTF-8 encoding.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-rdfc-2022';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof?.proofValue,\n              'Expected proofValue to exist.');\n            isValidUtf8(proof.proofValue).should.equal(\n              true,\n              'Expected proofValue value to be a valid UTF-8 encoded string.'\n            );\n          }\n\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "PFAw18thC_oSoG-3gjgEc",
              "ctx": null,
              "_testId": "urn:uuid:b4a5c118-47f6-446a-8b58-1e7bfdfebaa0",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "Whenever this algorithm encodes strings, it MUST use UTF-8 encoding."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-rdfc-2022",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 122540,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Whenever this algorithm encodes strings, it MUST use UTF-8 encoding.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-rdfc-2022';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof?.proofValue,\n              'Expected proofValue to exist.');\n            isValidUtf8(proof.proofValue).should.equal(\n              true,\n              'Expected proofValue value to be a valid UTF-8 encoded string.'\n            );\n          }\n\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "H2Yp_pp8ObnKe5K81sIy8",
              "ctx": null,
              "_testId": "urn:uuid:c5e48e02-c993-40a2-b9a5-bce8aa6536a4",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "Whenever this algorithm encodes strings, it MUST use UTF-8 encoding."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-rdfc-2022",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 122681,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Whenever this algorithm encodes strings, it MUST use UTF-8 encoding.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-rdfc-2022';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof?.proofValue,\n              'Expected proofValue to exist.');\n            isValidUtf8(proof.proofValue).should.equal(\n              true,\n              'Expected proofValue value to be a valid UTF-8 encoded string.'\n            );\n          }\n\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "6xb2JOS2h8hjAbbK1zIA_",
              "ctx": null,
              "_testId": "urn:uuid:941408cd-f03c-4d47-8e42-df6a66ea816d",
              "cell": {
                "columnId": "Trential",
                "rowId": "Whenever this algorithm encodes strings, it MUST use UTF-8 encoding."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-rdfc-2022",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 123638,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Whenever this algorithm encodes strings, it MUST use UTF-8 encoding.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-rdfc-2022';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof?.proofValue,\n              'Expected proofValue to exist.');\n            isValidUtf8(proof.proofValue).should.equal(\n              true,\n              'Expected proofValue value to be a valid UTF-8 encoded string.'\n            );\n          }\n\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "x7Ojv4qxLSbH81Ky6BUfv",
              "ctx": null,
              "_testId": "urn:uuid:26c47fac-6945-4aa6-ad94-d4580e5f7fa0",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "Whenever this algorithm encodes strings, it MUST use UTF-8 encoding."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-rdfc-2022",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 123990,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected issuer to have issued a credential.: expected undefined to exist",
                "showDiff": false,
                "stack": "AssertionError: Expected issuer to have issued a credential.: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at assertBefore (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/suites/algorithms.js:259:18)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/suites/algorithms.js:283:11)\n    at process.processImmediate (node:internal/timers:483:21)"
              }
            },
            {
              "type": "test",
              "title": "Whenever this algorithm encodes strings, it MUST use UTF-8 encoding.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-rdfc-2022';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof?.proofValue,\n              'Expected proofValue to exist.');\n            isValidUtf8(proof.proofValue).should.equal(\n              true,\n              'Expected proofValue value to be a valid UTF-8 encoded string.'\n            );\n          }\n\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "PKnA4B_0RkifODq3byvgn",
              "ctx": null,
              "_testId": "urn:uuid:5dca1574-280b-441b-911a-217d3a91f60c",
              "cell": {
                "columnId": "bovine",
                "rowId": "Whenever this algorithm encodes strings, it MUST use UTF-8 encoding."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-rdfc-2022",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 124139,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "If options.type is not set to the string DataIntegrityProof and options.cryptosuite is not set to the string eddsa-rdfc-2022, an error MUST be raised that SHOULD convey an error type of PROOF_TRANSFORMATION_ERROR.",
          "link": "https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-rdfc-2022",
          "cells": [
            {
              "type": "test",
              "title": "If options.type is not set to the string DataIntegrityProof and options.cryptosuite is not set to the string eddsa-rdfc-2022, an error MUST be raised that SHOULD convey an error type of PROOF_TRANSFORMATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-rdfc-2022';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.type,\n              'Expected a type identifier on the proof.');\n            should.exist(proof.cryptosuite,\n              'Expected a cryptosuite identifier on the proof.');\n            proof.type.should.equal('DataIntegrityProof',\n              'Expected DataIntegrityProof type.');\n            proof.cryptosuite.should.equal('eddsa-rdfc-2022',\n              'Expected eddsa-rdfc-2022 cryptosuite.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "6VhZC_XhhqDRxeY4dDaea",
              "ctx": null,
              "_testId": "urn:uuid:5839837d-84ed-4adf-b593-fcf274f9c73f",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If options.type is not set to the string DataIntegrityProof and options.cryptosuite is not set to the string eddsa-rdfc-2022, an error MUST be raised that SHOULD convey an error type of PROOF_TRANSFORMATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-rdfc-2022",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 121743,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If options.type is not set to the string DataIntegrityProof and options.cryptosuite is not set to the string eddsa-rdfc-2022, an error MUST be raised that SHOULD convey an error type of PROOF_TRANSFORMATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-rdfc-2022';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.type,\n              'Expected a type identifier on the proof.');\n            should.exist(proof.cryptosuite,\n              'Expected a cryptosuite identifier on the proof.');\n            proof.type.should.equal('DataIntegrityProof',\n              'Expected DataIntegrityProof type.');\n            proof.cryptosuite.should.equal('eddsa-rdfc-2022',\n              'Expected eddsa-rdfc-2022 cryptosuite.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "fX1iR8a44MqLT82_h41ON",
              "ctx": null,
              "_testId": "urn:uuid:80528f83-a25b-4341-868c-a58a26b014c0",
              "cell": {
                "columnId": "Aviary Tech",
                "rowId": "If options.type is not set to the string DataIntegrityProof and options.cryptosuite is not set to the string eddsa-rdfc-2022, an error MUST be raised that SHOULD convey an error type of PROOF_TRANSFORMATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-rdfc-2022",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 121896,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If options.type is not set to the string DataIntegrityProof and options.cryptosuite is not set to the string eddsa-rdfc-2022, an error MUST be raised that SHOULD convey an error type of PROOF_TRANSFORMATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-rdfc-2022';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.type,\n              'Expected a type identifier on the proof.');\n            should.exist(proof.cryptosuite,\n              'Expected a cryptosuite identifier on the proof.');\n            proof.type.should.equal('DataIntegrityProof',\n              'Expected DataIntegrityProof type.');\n            proof.cryptosuite.should.equal('eddsa-rdfc-2022',\n              'Expected eddsa-rdfc-2022 cryptosuite.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "AvlxpP6tp-UvsVhKd_ua3",
              "ctx": null,
              "_testId": "urn:uuid:c8a9ec44-e36d-4560-b093-4ea3ab8a8504",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If options.type is not set to the string DataIntegrityProof and options.cryptosuite is not set to the string eddsa-rdfc-2022, an error MUST be raised that SHOULD convey an error type of PROOF_TRANSFORMATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-rdfc-2022",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 122026,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If options.type is not set to the string DataIntegrityProof and options.cryptosuite is not set to the string eddsa-rdfc-2022, an error MUST be raised that SHOULD convey an error type of PROOF_TRANSFORMATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-rdfc-2022';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.type,\n              'Expected a type identifier on the proof.');\n            should.exist(proof.cryptosuite,\n              'Expected a cryptosuite identifier on the proof.');\n            proof.type.should.equal('DataIntegrityProof',\n              'Expected DataIntegrityProof type.');\n            proof.cryptosuite.should.equal('eddsa-rdfc-2022',\n              'Expected eddsa-rdfc-2022 cryptosuite.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "cb_9CmdvZS2x5YY_8XSYK",
              "ctx": null,
              "_testId": "urn:uuid:2d3596a5-5d1a-4cd4-81a5-b543d692dd15",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If options.type is not set to the string DataIntegrityProof and options.cryptosuite is not set to the string eddsa-rdfc-2022, an error MUST be raised that SHOULD convey an error type of PROOF_TRANSFORMATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-rdfc-2022",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 122053,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If options.type is not set to the string DataIntegrityProof and options.cryptosuite is not set to the string eddsa-rdfc-2022, an error MUST be raised that SHOULD convey an error type of PROOF_TRANSFORMATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-rdfc-2022';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.type,\n              'Expected a type identifier on the proof.');\n            should.exist(proof.cryptosuite,\n              'Expected a cryptosuite identifier on the proof.');\n            proof.type.should.equal('DataIntegrityProof',\n              'Expected DataIntegrityProof type.');\n            proof.cryptosuite.should.equal('eddsa-rdfc-2022',\n              'Expected eddsa-rdfc-2022 cryptosuite.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "PFAw18thC_oSoG-3gjgEc",
              "ctx": null,
              "_testId": "urn:uuid:e9860d16-a398-42c5-a0a7-5b48149fe900",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "If options.type is not set to the string DataIntegrityProof and options.cryptosuite is not set to the string eddsa-rdfc-2022, an error MUST be raised that SHOULD convey an error type of PROOF_TRANSFORMATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-rdfc-2022",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 122541,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If options.type is not set to the string DataIntegrityProof and options.cryptosuite is not set to the string eddsa-rdfc-2022, an error MUST be raised that SHOULD convey an error type of PROOF_TRANSFORMATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-rdfc-2022';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.type,\n              'Expected a type identifier on the proof.');\n            should.exist(proof.cryptosuite,\n              'Expected a cryptosuite identifier on the proof.');\n            proof.type.should.equal('DataIntegrityProof',\n              'Expected DataIntegrityProof type.');\n            proof.cryptosuite.should.equal('eddsa-rdfc-2022',\n              'Expected eddsa-rdfc-2022 cryptosuite.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "H2Yp_pp8ObnKe5K81sIy8",
              "ctx": null,
              "_testId": "urn:uuid:c7f96682-7c66-4eba-b143-3f99594bd322",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If options.type is not set to the string DataIntegrityProof and options.cryptosuite is not set to the string eddsa-rdfc-2022, an error MUST be raised that SHOULD convey an error type of PROOF_TRANSFORMATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-rdfc-2022",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 122681,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If options.type is not set to the string DataIntegrityProof and options.cryptosuite is not set to the string eddsa-rdfc-2022, an error MUST be raised that SHOULD convey an error type of PROOF_TRANSFORMATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-rdfc-2022';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.type,\n              'Expected a type identifier on the proof.');\n            should.exist(proof.cryptosuite,\n              'Expected a cryptosuite identifier on the proof.');\n            proof.type.should.equal('DataIntegrityProof',\n              'Expected DataIntegrityProof type.');\n            proof.cryptosuite.should.equal('eddsa-rdfc-2022',\n              'Expected eddsa-rdfc-2022 cryptosuite.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "6xb2JOS2h8hjAbbK1zIA_",
              "ctx": null,
              "_testId": "urn:uuid:49b73581-e8b6-48b9-a11d-fd4644f77ea8",
              "cell": {
                "columnId": "Trential",
                "rowId": "If options.type is not set to the string DataIntegrityProof and options.cryptosuite is not set to the string eddsa-rdfc-2022, an error MUST be raised that SHOULD convey an error type of PROOF_TRANSFORMATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-rdfc-2022",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 123638,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If options.type is not set to the string DataIntegrityProof and options.cryptosuite is not set to the string eddsa-rdfc-2022, an error MUST be raised that SHOULD convey an error type of PROOF_TRANSFORMATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-rdfc-2022';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.type,\n              'Expected a type identifier on the proof.');\n            should.exist(proof.cryptosuite,\n              'Expected a cryptosuite identifier on the proof.');\n            proof.type.should.equal('DataIntegrityProof',\n              'Expected DataIntegrityProof type.');\n            proof.cryptosuite.should.equal('eddsa-rdfc-2022',\n              'Expected eddsa-rdfc-2022 cryptosuite.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "x7Ojv4qxLSbH81Ky6BUfv",
              "ctx": null,
              "_testId": "urn:uuid:7b1b142a-2b5c-405e-846d-6dc34e3f135a",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "If options.type is not set to the string DataIntegrityProof and options.cryptosuite is not set to the string eddsa-rdfc-2022, an error MUST be raised that SHOULD convey an error type of PROOF_TRANSFORMATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-rdfc-2022",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 123990,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected issuer to have issued a credential.: expected undefined to exist",
                "showDiff": false,
                "stack": "AssertionError: Expected issuer to have issued a credential.: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at assertBefore (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/suites/algorithms.js:259:18)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/suites/algorithms.js:300:11)\n    at process.processImmediate (node:internal/timers:483:21)"
              }
            },
            {
              "type": "test",
              "title": "If options.type is not set to the string DataIntegrityProof and options.cryptosuite is not set to the string eddsa-rdfc-2022, an error MUST be raised that SHOULD convey an error type of PROOF_TRANSFORMATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-rdfc-2022';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.type,\n              'Expected a type identifier on the proof.');\n            should.exist(proof.cryptosuite,\n              'Expected a cryptosuite identifier on the proof.');\n            proof.type.should.equal('DataIntegrityProof',\n              'Expected DataIntegrityProof type.');\n            proof.cryptosuite.should.equal('eddsa-rdfc-2022',\n              'Expected eddsa-rdfc-2022 cryptosuite.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "PKnA4B_0RkifODq3byvgn",
              "ctx": null,
              "_testId": "urn:uuid:3dc31abf-0536-4d2b-8749-5206200f52d2",
              "cell": {
                "columnId": "bovine",
                "rowId": "If options.type is not set to the string DataIntegrityProof and options.cryptosuite is not set to the string eddsa-rdfc-2022, an error MUST be raised that SHOULD convey an error type of PROOF_TRANSFORMATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#transformation-eddsa-rdfc-2022",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 124139,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        }
      ]
    },
    {
      "title": "eddsa-rdfc-2022 - Algorithms - Proof Configuration",
      "ctx": null,
      "suites": [
        {
          "title": "apicatalog.com",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MUST contain a cryptosuite identifier (cryptosuite).",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-rdfc-2022:~:text=the%20proof%20options%20(options).-,The%20proof%20options%20MUST%20contain%20a%20type%20identifier%20for%20the%20cryptographic%20suite%20(type)%20and%20MUST%20contain%20a%20cryptosuite%20identifier%20(cryptosuite).,-A%20proof%20configuration%20object%20is%20produced';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.type,\n              'Expected a type identifier on the proof.');\n            should.exist(proof.cryptosuite,\n              'Expected a cryptosuite identifier on the proof.');\n          }\n\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "0rvALiKldJZ0ZImZW4xqU",
              "ctx": null,
              "_testId": "urn:uuid:86492ec6-8614-41ef-9fcb-f1d1f70d6799",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MUST contain a cryptosuite identifier (cryptosuite)."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-rdfc-2022:~:text=the%20proof%20options%20(options).-,The%20proof%20options%20MUST%20contain%20a%20type%20identifier%20for%20the%20cryptographic%20suite%20(type)%20and%20MUST%20contain%20a%20cryptosuite%20identifier%20(cryptosuite).,-A%20proof%20configuration%20object%20is%20produced",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 124805,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If proofConfig.type is not set to DataIntegrityProof and/or proofConfig.cryptosuite is not set to eddsa-rdfc-2022, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-rdfc-2022:~:text=If%20proofConfig.type%20is%20not%20set%20to%20DataIntegrityProof%20and/or%20proofConfig.cryptosuite%20is%20not%20set%20to%20eddsa%2Drdfc%2D2022%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.type,\n              'Expected a type identifier on the proof.');\n            should.exist(proof.cryptosuite,\n              'Expected a cryptosuite identifier on the proof.');\n          }\n\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "0rvALiKldJZ0ZImZW4xqU",
              "ctx": null,
              "_testId": "urn:uuid:fe9131a6-b8b1-4106-b3c1-87a82e76e5d5",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If proofConfig.type is not set to DataIntegrityProof and/or proofConfig.cryptosuite is not set to eddsa-rdfc-2022, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-rdfc-2022:~:text=If%20proofConfig.type%20is%20not%20set%20to%20DataIntegrityProof%20and/or%20proofConfig.cryptosuite%20is%20not%20set%20to%20eddsa%2Drdfc%2D2022%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 124806,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If proofConfig.created is present and set to a value that is not a valid [XMLSCHEMA11-2] datetime, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-rdfc-2022:~:text=and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.-,If%20proofConfig.created%20is%20present%20and%20set%20to%20a%20value%20that%20is%20not%20a%20valid%20%5BXMLSCHEMA11%2D2%5D%20datetime%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.,-Set%20proofConfig.%40context%20to%20unsecuredDocument.%40context.';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            if(proof?.created) {\n              isValidDatetime(proof.created).should.equal(\n                true,\n                'Expected created value to be a valid datetime string.'\n              );\n            }\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "0rvALiKldJZ0ZImZW4xqU",
              "ctx": null,
              "_testId": "urn:uuid:18b79083-e14f-42c3-9374-e20bd67a4a48",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If proofConfig.created is present and set to a value that is not a valid [XMLSCHEMA11-2] datetime, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-rdfc-2022:~:text=and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.-,If%20proofConfig.created%20is%20present%20and%20set%20to%20a%20value%20that%20is%20not%20a%20valid%20%5BXMLSCHEMA11%2D2%5D%20datetime%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.,-Set%20proofConfig.%40context%20to%20unsecuredDocument.%40context.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 124806,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: setupRow in \"apicatalog.com\"",
              "body": "function setupRow() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "0rvALiKldJZ0ZImZW4xqU",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "originalTitle": "\"before each\" hook: setupRow",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"apicatalog.com\"",
              "body": "async function() {\n          issuedVc = await createInitialVc({issuer, vc: validVc});\n          proofs = getProofs(issuedVc);\n          if(proofs?.length) {\n            eddsa2022Proofs = proofs.filter(\n              proof => proof?.cryptosuite === cryptosuite);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "0rvALiKldJZ0ZImZW4xqU",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 124141,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 664,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "cFldjQInrjzorJUZhYQD5",
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
          "_testId": "urn:uuid:a18d18bb-30f2-4e53-b968-51d5592e79b7"
        },
        {
          "title": "Aviary Tech",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MUST contain a cryptosuite identifier (cryptosuite).",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-rdfc-2022:~:text=the%20proof%20options%20(options).-,The%20proof%20options%20MUST%20contain%20a%20type%20identifier%20for%20the%20cryptographic%20suite%20(type)%20and%20MUST%20contain%20a%20cryptosuite%20identifier%20(cryptosuite).,-A%20proof%20configuration%20object%20is%20produced';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.type,\n              'Expected a type identifier on the proof.');\n            should.exist(proof.cryptosuite,\n              'Expected a cryptosuite identifier on the proof.');\n          }\n\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "yk2KgUp2y8u3fX_97vyKK",
              "ctx": null,
              "_testId": "urn:uuid:4c56a819-d663-4bcd-9c55-cecc94968c2f",
              "cell": {
                "columnId": "Aviary Tech",
                "rowId": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MUST contain a cryptosuite identifier (cryptosuite)."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-rdfc-2022:~:text=the%20proof%20options%20(options).-,The%20proof%20options%20MUST%20contain%20a%20type%20identifier%20for%20the%20cryptographic%20suite%20(type)%20and%20MUST%20contain%20a%20cryptosuite%20identifier%20(cryptosuite).,-A%20proof%20configuration%20object%20is%20produced",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 124854,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If proofConfig.type is not set to DataIntegrityProof and/or proofConfig.cryptosuite is not set to eddsa-rdfc-2022, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-rdfc-2022:~:text=If%20proofConfig.type%20is%20not%20set%20to%20DataIntegrityProof%20and/or%20proofConfig.cryptosuite%20is%20not%20set%20to%20eddsa%2Drdfc%2D2022%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.type,\n              'Expected a type identifier on the proof.');\n            should.exist(proof.cryptosuite,\n              'Expected a cryptosuite identifier on the proof.');\n          }\n\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "yk2KgUp2y8u3fX_97vyKK",
              "ctx": null,
              "_testId": "urn:uuid:52ebb627-855b-426c-b401-f56c2cf68043",
              "cell": {
                "columnId": "Aviary Tech",
                "rowId": "If proofConfig.type is not set to DataIntegrityProof and/or proofConfig.cryptosuite is not set to eddsa-rdfc-2022, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-rdfc-2022:~:text=If%20proofConfig.type%20is%20not%20set%20to%20DataIntegrityProof%20and/or%20proofConfig.cryptosuite%20is%20not%20set%20to%20eddsa%2Drdfc%2D2022%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 124854,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If proofConfig.created is present and set to a value that is not a valid [XMLSCHEMA11-2] datetime, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-rdfc-2022:~:text=and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.-,If%20proofConfig.created%20is%20present%20and%20set%20to%20a%20value%20that%20is%20not%20a%20valid%20%5BXMLSCHEMA11%2D2%5D%20datetime%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.,-Set%20proofConfig.%40context%20to%20unsecuredDocument.%40context.';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            if(proof?.created) {\n              isValidDatetime(proof.created).should.equal(\n                true,\n                'Expected created value to be a valid datetime string.'\n              );\n            }\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "yk2KgUp2y8u3fX_97vyKK",
              "ctx": null,
              "_testId": "urn:uuid:e500071c-daa3-4f1b-88f2-4dcf49b74066",
              "cell": {
                "columnId": "Aviary Tech",
                "rowId": "If proofConfig.created is present and set to a value that is not a valid [XMLSCHEMA11-2] datetime, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-rdfc-2022:~:text=and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.-,If%20proofConfig.created%20is%20present%20and%20set%20to%20a%20value%20that%20is%20not%20a%20valid%20%5BXMLSCHEMA11%2D2%5D%20datetime%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.,-Set%20proofConfig.%40context%20to%20unsecuredDocument.%40context.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 124855,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: setupRow in \"Aviary Tech\"",
              "body": "function setupRow() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "yk2KgUp2y8u3fX_97vyKK",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "originalTitle": "\"before each\" hook: setupRow",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Aviary Tech\"",
              "body": "async function() {\n          issuedVc = await createInitialVc({issuer, vc: validVc});\n          proofs = getProofs(issuedVc);\n          if(proofs?.length) {\n            eddsa2022Proofs = proofs.filter(\n              proof => proof?.cryptosuite === cryptosuite);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "yk2KgUp2y8u3fX_97vyKK",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 124806,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 48,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "cFldjQInrjzorJUZhYQD5",
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
          "_testId": "urn:uuid:cff0ca51-45e4-4a48-ab92-868f809c6b68"
        },
        {
          "title": "Digital Bazaar",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MUST contain a cryptosuite identifier (cryptosuite).",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-rdfc-2022:~:text=the%20proof%20options%20(options).-,The%20proof%20options%20MUST%20contain%20a%20type%20identifier%20for%20the%20cryptographic%20suite%20(type)%20and%20MUST%20contain%20a%20cryptosuite%20identifier%20(cryptosuite).,-A%20proof%20configuration%20object%20is%20produced';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.type,\n              'Expected a type identifier on the proof.');\n            should.exist(proof.cryptosuite,\n              'Expected a cryptosuite identifier on the proof.');\n          }\n\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "XEaQVVFerlhDEd-8n0RqK",
              "ctx": null,
              "_testId": "urn:uuid:a52d9d89-8a86-4823-bd2e-72492795b1f2",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MUST contain a cryptosuite identifier (cryptosuite)."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-rdfc-2022:~:text=the%20proof%20options%20(options).-,The%20proof%20options%20MUST%20contain%20a%20type%20identifier%20for%20the%20cryptographic%20suite%20(type)%20and%20MUST%20contain%20a%20cryptosuite%20identifier%20(cryptosuite).,-A%20proof%20configuration%20object%20is%20produced",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 124985,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If proofConfig.type is not set to DataIntegrityProof and/or proofConfig.cryptosuite is not set to eddsa-rdfc-2022, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-rdfc-2022:~:text=If%20proofConfig.type%20is%20not%20set%20to%20DataIntegrityProof%20and/or%20proofConfig.cryptosuite%20is%20not%20set%20to%20eddsa%2Drdfc%2D2022%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.type,\n              'Expected a type identifier on the proof.');\n            should.exist(proof.cryptosuite,\n              'Expected a cryptosuite identifier on the proof.');\n          }\n\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "XEaQVVFerlhDEd-8n0RqK",
              "ctx": null,
              "_testId": "urn:uuid:587e5465-2f8f-4ee1-aeb1-b60212e8232f",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If proofConfig.type is not set to DataIntegrityProof and/or proofConfig.cryptosuite is not set to eddsa-rdfc-2022, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-rdfc-2022:~:text=If%20proofConfig.type%20is%20not%20set%20to%20DataIntegrityProof%20and/or%20proofConfig.cryptosuite%20is%20not%20set%20to%20eddsa%2Drdfc%2D2022%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 124986,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If proofConfig.created is present and set to a value that is not a valid [XMLSCHEMA11-2] datetime, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-rdfc-2022:~:text=and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.-,If%20proofConfig.created%20is%20present%20and%20set%20to%20a%20value%20that%20is%20not%20a%20valid%20%5BXMLSCHEMA11%2D2%5D%20datetime%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.,-Set%20proofConfig.%40context%20to%20unsecuredDocument.%40context.';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            if(proof?.created) {\n              isValidDatetime(proof.created).should.equal(\n                true,\n                'Expected created value to be a valid datetime string.'\n              );\n            }\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "XEaQVVFerlhDEd-8n0RqK",
              "ctx": null,
              "_testId": "urn:uuid:e28e01cf-5bca-4186-ae1b-98d1809e36bb",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If proofConfig.created is present and set to a value that is not a valid [XMLSCHEMA11-2] datetime, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-rdfc-2022:~:text=and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.-,If%20proofConfig.created%20is%20present%20and%20set%20to%20a%20value%20that%20is%20not%20a%20valid%20%5BXMLSCHEMA11%2D2%5D%20datetime%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.,-Set%20proofConfig.%40context%20to%20unsecuredDocument.%40context.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 124986,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: setupRow in \"Digital Bazaar\"",
              "body": "function setupRow() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "XEaQVVFerlhDEd-8n0RqK",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "originalTitle": "\"before each\" hook: setupRow",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Digital Bazaar\"",
              "body": "async function() {\n          issuedVc = await createInitialVc({issuer, vc: validVc});\n          proofs = getProofs(issuedVc);\n          if(proofs?.length) {\n            eddsa2022Proofs = proofs.filter(\n              proof => proof?.cryptosuite === cryptosuite);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "XEaQVVFerlhDEd-8n0RqK",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 124855,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 130,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "cFldjQInrjzorJUZhYQD5",
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
          "_testId": "urn:uuid:5ed8aa83-280f-40d7-a276-51a4ab1cb4b9"
        },
        {
          "title": "Grotto Networking",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MUST contain a cryptosuite identifier (cryptosuite).",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-rdfc-2022:~:text=the%20proof%20options%20(options).-,The%20proof%20options%20MUST%20contain%20a%20type%20identifier%20for%20the%20cryptographic%20suite%20(type)%20and%20MUST%20contain%20a%20cryptosuite%20identifier%20(cryptosuite).,-A%20proof%20configuration%20object%20is%20produced';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.type,\n              'Expected a type identifier on the proof.');\n            should.exist(proof.cryptosuite,\n              'Expected a cryptosuite identifier on the proof.');\n          }\n\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "aRcW2G0SXccdzK_Yi0RX-",
              "ctx": null,
              "_testId": "urn:uuid:6caefab9-5b7e-4a1c-b26d-a6b23e3349e0",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MUST contain a cryptosuite identifier (cryptosuite)."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-rdfc-2022:~:text=the%20proof%20options%20(options).-,The%20proof%20options%20MUST%20contain%20a%20type%20identifier%20for%20the%20cryptographic%20suite%20(type)%20and%20MUST%20contain%20a%20cryptosuite%20identifier%20(cryptosuite).,-A%20proof%20configuration%20object%20is%20produced",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 125013,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If proofConfig.type is not set to DataIntegrityProof and/or proofConfig.cryptosuite is not set to eddsa-rdfc-2022, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-rdfc-2022:~:text=If%20proofConfig.type%20is%20not%20set%20to%20DataIntegrityProof%20and/or%20proofConfig.cryptosuite%20is%20not%20set%20to%20eddsa%2Drdfc%2D2022%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.type,\n              'Expected a type identifier on the proof.');\n            should.exist(proof.cryptosuite,\n              'Expected a cryptosuite identifier on the proof.');\n          }\n\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "aRcW2G0SXccdzK_Yi0RX-",
              "ctx": null,
              "_testId": "urn:uuid:6ad17144-105d-4e84-b358-c1b34100f342",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If proofConfig.type is not set to DataIntegrityProof and/or proofConfig.cryptosuite is not set to eddsa-rdfc-2022, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-rdfc-2022:~:text=If%20proofConfig.type%20is%20not%20set%20to%20DataIntegrityProof%20and/or%20proofConfig.cryptosuite%20is%20not%20set%20to%20eddsa%2Drdfc%2D2022%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 125013,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If proofConfig.created is present and set to a value that is not a valid [XMLSCHEMA11-2] datetime, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-rdfc-2022:~:text=and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.-,If%20proofConfig.created%20is%20present%20and%20set%20to%20a%20value%20that%20is%20not%20a%20valid%20%5BXMLSCHEMA11%2D2%5D%20datetime%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.,-Set%20proofConfig.%40context%20to%20unsecuredDocument.%40context.';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            if(proof?.created) {\n              isValidDatetime(proof.created).should.equal(\n                true,\n                'Expected created value to be a valid datetime string.'\n              );\n            }\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "aRcW2G0SXccdzK_Yi0RX-",
              "ctx": null,
              "_testId": "urn:uuid:055e0d6c-f776-4b62-b267-7ce3f6e79d96",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If proofConfig.created is present and set to a value that is not a valid [XMLSCHEMA11-2] datetime, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-rdfc-2022:~:text=and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.-,If%20proofConfig.created%20is%20present%20and%20set%20to%20a%20value%20that%20is%20not%20a%20valid%20%5BXMLSCHEMA11%2D2%5D%20datetime%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.,-Set%20proofConfig.%40context%20to%20unsecuredDocument.%40context.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 125014,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: setupRow in \"Grotto Networking\"",
              "body": "function setupRow() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "aRcW2G0SXccdzK_Yi0RX-",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "originalTitle": "\"before each\" hook: setupRow",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Grotto Networking\"",
              "body": "async function() {\n          issuedVc = await createInitialVc({issuer, vc: validVc});\n          proofs = getProofs(issuedVc);\n          if(proofs?.length) {\n            eddsa2022Proofs = proofs.filter(\n              proof => proof?.cryptosuite === cryptosuite);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "aRcW2G0SXccdzK_Yi0RX-",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 124986,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 27,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "cFldjQInrjzorJUZhYQD5",
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
          "_testId": "urn:uuid:c499c4c1-7c5b-498d-a08d-a73addae6ce8"
        },
        {
          "title": "Procivis One Core",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MUST contain a cryptosuite identifier (cryptosuite).",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-rdfc-2022:~:text=the%20proof%20options%20(options).-,The%20proof%20options%20MUST%20contain%20a%20type%20identifier%20for%20the%20cryptographic%20suite%20(type)%20and%20MUST%20contain%20a%20cryptosuite%20identifier%20(cryptosuite).,-A%20proof%20configuration%20object%20is%20produced';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.type,\n              'Expected a type identifier on the proof.');\n            should.exist(proof.cryptosuite,\n              'Expected a cryptosuite identifier on the proof.');\n          }\n\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "cHPrguzr-S1J2b85dx9Zy",
              "ctx": null,
              "_testId": "urn:uuid:44baf2c9-3619-42c0-96fc-c1e1dec92bb9",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MUST contain a cryptosuite identifier (cryptosuite)."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-rdfc-2022:~:text=the%20proof%20options%20(options).-,The%20proof%20options%20MUST%20contain%20a%20type%20identifier%20for%20the%20cryptographic%20suite%20(type)%20and%20MUST%20contain%20a%20cryptosuite%20identifier%20(cryptosuite).,-A%20proof%20configuration%20object%20is%20produced",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 125204,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If proofConfig.type is not set to DataIntegrityProof and/or proofConfig.cryptosuite is not set to eddsa-rdfc-2022, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-rdfc-2022:~:text=If%20proofConfig.type%20is%20not%20set%20to%20DataIntegrityProof%20and/or%20proofConfig.cryptosuite%20is%20not%20set%20to%20eddsa%2Drdfc%2D2022%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.type,\n              'Expected a type identifier on the proof.');\n            should.exist(proof.cryptosuite,\n              'Expected a cryptosuite identifier on the proof.');\n          }\n\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "cHPrguzr-S1J2b85dx9Zy",
              "ctx": null,
              "_testId": "urn:uuid:9ff77df5-ce18-4e3e-af0e-adbec4ff3168",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "If proofConfig.type is not set to DataIntegrityProof and/or proofConfig.cryptosuite is not set to eddsa-rdfc-2022, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-rdfc-2022:~:text=If%20proofConfig.type%20is%20not%20set%20to%20DataIntegrityProof%20and/or%20proofConfig.cryptosuite%20is%20not%20set%20to%20eddsa%2Drdfc%2D2022%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 125204,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If proofConfig.created is present and set to a value that is not a valid [XMLSCHEMA11-2] datetime, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-rdfc-2022:~:text=and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.-,If%20proofConfig.created%20is%20present%20and%20set%20to%20a%20value%20that%20is%20not%20a%20valid%20%5BXMLSCHEMA11%2D2%5D%20datetime%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.,-Set%20proofConfig.%40context%20to%20unsecuredDocument.%40context.';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            if(proof?.created) {\n              isValidDatetime(proof.created).should.equal(\n                true,\n                'Expected created value to be a valid datetime string.'\n              );\n            }\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "cHPrguzr-S1J2b85dx9Zy",
              "ctx": null,
              "_testId": "urn:uuid:c6fe9d6e-49e9-4305-9903-9305638b4790",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "If proofConfig.created is present and set to a value that is not a valid [XMLSCHEMA11-2] datetime, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-rdfc-2022:~:text=and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.-,If%20proofConfig.created%20is%20present%20and%20set%20to%20a%20value%20that%20is%20not%20a%20valid%20%5BXMLSCHEMA11%2D2%5D%20datetime%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.,-Set%20proofConfig.%40context%20to%20unsecuredDocument.%40context.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 125204,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: setupRow in \"Procivis One Core\"",
              "body": "function setupRow() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "cHPrguzr-S1J2b85dx9Zy",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "originalTitle": "\"before each\" hook: setupRow",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Procivis One Core\"",
              "body": "async function() {\n          issuedVc = await createInitialVc({issuer, vc: validVc});\n          proofs = getProofs(issuedVc);\n          if(proofs?.length) {\n            eddsa2022Proofs = proofs.filter(\n              proof => proof?.cryptosuite === cryptosuite);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "cHPrguzr-S1J2b85dx9Zy",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 125014,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 189,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "cFldjQInrjzorJUZhYQD5",
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
          "_testId": "urn:uuid:46a5ea7f-9844-41c4-8db4-f0b7e9604e14"
        },
        {
          "title": "SpruceID",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MUST contain a cryptosuite identifier (cryptosuite).",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-rdfc-2022:~:text=the%20proof%20options%20(options).-,The%20proof%20options%20MUST%20contain%20a%20type%20identifier%20for%20the%20cryptographic%20suite%20(type)%20and%20MUST%20contain%20a%20cryptosuite%20identifier%20(cryptosuite).,-A%20proof%20configuration%20object%20is%20produced';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.type,\n              'Expected a type identifier on the proof.');\n            should.exist(proof.cryptosuite,\n              'Expected a cryptosuite identifier on the proof.');\n          }\n\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "gGbeYXBxc7vw98Ipp9A7g",
              "ctx": null,
              "_testId": "urn:uuid:afb7ce33-e62a-4839-a62a-57a6e7cdab4a",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MUST contain a cryptosuite identifier (cryptosuite)."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-rdfc-2022:~:text=the%20proof%20options%20(options).-,The%20proof%20options%20MUST%20contain%20a%20type%20identifier%20for%20the%20cryptographic%20suite%20(type)%20and%20MUST%20contain%20a%20cryptosuite%20identifier%20(cryptosuite).,-A%20proof%20configuration%20object%20is%20produced",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 125302,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If proofConfig.type is not set to DataIntegrityProof and/or proofConfig.cryptosuite is not set to eddsa-rdfc-2022, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-rdfc-2022:~:text=If%20proofConfig.type%20is%20not%20set%20to%20DataIntegrityProof%20and/or%20proofConfig.cryptosuite%20is%20not%20set%20to%20eddsa%2Drdfc%2D2022%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.type,\n              'Expected a type identifier on the proof.');\n            should.exist(proof.cryptosuite,\n              'Expected a cryptosuite identifier on the proof.');\n          }\n\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "gGbeYXBxc7vw98Ipp9A7g",
              "ctx": null,
              "_testId": "urn:uuid:81f6067d-67a0-4cd7-a466-b95aa34a0e33",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If proofConfig.type is not set to DataIntegrityProof and/or proofConfig.cryptosuite is not set to eddsa-rdfc-2022, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-rdfc-2022:~:text=If%20proofConfig.type%20is%20not%20set%20to%20DataIntegrityProof%20and/or%20proofConfig.cryptosuite%20is%20not%20set%20to%20eddsa%2Drdfc%2D2022%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 125302,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If proofConfig.created is present and set to a value that is not a valid [XMLSCHEMA11-2] datetime, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-rdfc-2022:~:text=and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.-,If%20proofConfig.created%20is%20present%20and%20set%20to%20a%20value%20that%20is%20not%20a%20valid%20%5BXMLSCHEMA11%2D2%5D%20datetime%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.,-Set%20proofConfig.%40context%20to%20unsecuredDocument.%40context.';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            if(proof?.created) {\n              isValidDatetime(proof.created).should.equal(\n                true,\n                'Expected created value to be a valid datetime string.'\n              );\n            }\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "gGbeYXBxc7vw98Ipp9A7g",
              "ctx": null,
              "_testId": "urn:uuid:04b6aedb-74ac-4fae-a685-eff78d2d5483",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If proofConfig.created is present and set to a value that is not a valid [XMLSCHEMA11-2] datetime, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-rdfc-2022:~:text=and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.-,If%20proofConfig.created%20is%20present%20and%20set%20to%20a%20value%20that%20is%20not%20a%20valid%20%5BXMLSCHEMA11%2D2%5D%20datetime%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.,-Set%20proofConfig.%40context%20to%20unsecuredDocument.%40context.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 125303,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: setupRow in \"SpruceID\"",
              "body": "function setupRow() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "gGbeYXBxc7vw98Ipp9A7g",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "originalTitle": "\"before each\" hook: setupRow",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"SpruceID\"",
              "body": "async function() {\n          issuedVc = await createInitialVc({issuer, vc: validVc});\n          proofs = getProofs(issuedVc);\n          if(proofs?.length) {\n            eddsa2022Proofs = proofs.filter(\n              proof => proof?.cryptosuite === cryptosuite);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "gGbeYXBxc7vw98Ipp9A7g",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 125204,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 98,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "cFldjQInrjzorJUZhYQD5",
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
          "_testId": "urn:uuid:e19c0fff-5087-44ca-a63f-fc811930a110"
        },
        {
          "title": "Trential",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MUST contain a cryptosuite identifier (cryptosuite).",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-rdfc-2022:~:text=the%20proof%20options%20(options).-,The%20proof%20options%20MUST%20contain%20a%20type%20identifier%20for%20the%20cryptographic%20suite%20(type)%20and%20MUST%20contain%20a%20cryptosuite%20identifier%20(cryptosuite).,-A%20proof%20configuration%20object%20is%20produced';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.type,\n              'Expected a type identifier on the proof.');\n            should.exist(proof.cryptosuite,\n              'Expected a cryptosuite identifier on the proof.');\n          }\n\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "_HVKgo92lpIdW18XjHWC4",
              "ctx": null,
              "_testId": "urn:uuid:d417e7bc-6795-419e-a504-0f82c03d56c5",
              "cell": {
                "columnId": "Trential",
                "rowId": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MUST contain a cryptosuite identifier (cryptosuite)."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-rdfc-2022:~:text=the%20proof%20options%20(options).-,The%20proof%20options%20MUST%20contain%20a%20type%20identifier%20for%20the%20cryptographic%20suite%20(type)%20and%20MUST%20contain%20a%20cryptosuite%20identifier%20(cryptosuite).,-A%20proof%20configuration%20object%20is%20produced",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 125558,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If proofConfig.type is not set to DataIntegrityProof and/or proofConfig.cryptosuite is not set to eddsa-rdfc-2022, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-rdfc-2022:~:text=If%20proofConfig.type%20is%20not%20set%20to%20DataIntegrityProof%20and/or%20proofConfig.cryptosuite%20is%20not%20set%20to%20eddsa%2Drdfc%2D2022%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.type,\n              'Expected a type identifier on the proof.');\n            should.exist(proof.cryptosuite,\n              'Expected a cryptosuite identifier on the proof.');\n          }\n\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "_HVKgo92lpIdW18XjHWC4",
              "ctx": null,
              "_testId": "urn:uuid:8a46581a-5925-4ac0-9128-9e89022c3b54",
              "cell": {
                "columnId": "Trential",
                "rowId": "If proofConfig.type is not set to DataIntegrityProof and/or proofConfig.cryptosuite is not set to eddsa-rdfc-2022, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-rdfc-2022:~:text=If%20proofConfig.type%20is%20not%20set%20to%20DataIntegrityProof%20and/or%20proofConfig.cryptosuite%20is%20not%20set%20to%20eddsa%2Drdfc%2D2022%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 125558,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If proofConfig.created is present and set to a value that is not a valid [XMLSCHEMA11-2] datetime, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-rdfc-2022:~:text=and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.-,If%20proofConfig.created%20is%20present%20and%20set%20to%20a%20value%20that%20is%20not%20a%20valid%20%5BXMLSCHEMA11%2D2%5D%20datetime%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.,-Set%20proofConfig.%40context%20to%20unsecuredDocument.%40context.';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            if(proof?.created) {\n              isValidDatetime(proof.created).should.equal(\n                true,\n                'Expected created value to be a valid datetime string.'\n              );\n            }\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "_HVKgo92lpIdW18XjHWC4",
              "ctx": null,
              "_testId": "urn:uuid:2ad7abe8-60a7-4c50-aafb-886572a9bdeb",
              "cell": {
                "columnId": "Trential",
                "rowId": "If proofConfig.created is present and set to a value that is not a valid [XMLSCHEMA11-2] datetime, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-rdfc-2022:~:text=and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.-,If%20proofConfig.created%20is%20present%20and%20set%20to%20a%20value%20that%20is%20not%20a%20valid%20%5BXMLSCHEMA11%2D2%5D%20datetime%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.,-Set%20proofConfig.%40context%20to%20unsecuredDocument.%40context.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 125558,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: setupRow in \"Trential\"",
              "body": "function setupRow() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "_HVKgo92lpIdW18XjHWC4",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "originalTitle": "\"before each\" hook: setupRow",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Trential\"",
              "body": "async function() {\n          issuedVc = await createInitialVc({issuer, vc: validVc});\n          proofs = getProofs(issuedVc);\n          if(proofs?.length) {\n            eddsa2022Proofs = proofs.filter(\n              proof => proof?.cryptosuite === cryptosuite);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "_HVKgo92lpIdW18XjHWC4",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 125303,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 254,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "cFldjQInrjzorJUZhYQD5",
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
          "_testId": "urn:uuid:934e5ec3-51d4-4fb4-8636-48e25db16b6f"
        },
        {
          "title": "Trinsic",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MUST contain a cryptosuite identifier (cryptosuite).",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-rdfc-2022:~:text=the%20proof%20options%20(options).-,The%20proof%20options%20MUST%20contain%20a%20type%20identifier%20for%20the%20cryptographic%20suite%20(type)%20and%20MUST%20contain%20a%20cryptosuite%20identifier%20(cryptosuite).,-A%20proof%20configuration%20object%20is%20produced';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.type,\n              'Expected a type identifier on the proof.');\n            should.exist(proof.cryptosuite,\n              'Expected a cryptosuite identifier on the proof.');\n          }\n\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "_foPABQNxaUa1LBtyyIMQ",
              "ctx": null,
              "_testId": "urn:uuid:bfb21568-4315-4879-947a-77309dbe15ec",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MUST contain a cryptosuite identifier (cryptosuite)."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-rdfc-2022:~:text=the%20proof%20options%20(options).-,The%20proof%20options%20MUST%20contain%20a%20type%20identifier%20for%20the%20cryptographic%20suite%20(type)%20and%20MUST%20contain%20a%20cryptosuite%20identifier%20(cryptosuite).,-A%20proof%20configuration%20object%20is%20produced",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 125667,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected issuer to have issued a credential.: expected undefined to exist",
                "showDiff": false,
                "stack": "AssertionError: Expected issuer to have issued a credential.: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at assertBefore (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/suites/algorithms.js:338:18)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/suites/algorithms.js:351:11)\n    at process.processImmediate (node:internal/timers:483:21)"
              }
            },
            {
              "type": "test",
              "title": "If proofConfig.type is not set to DataIntegrityProof and/or proofConfig.cryptosuite is not set to eddsa-rdfc-2022, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-rdfc-2022:~:text=If%20proofConfig.type%20is%20not%20set%20to%20DataIntegrityProof%20and/or%20proofConfig.cryptosuite%20is%20not%20set%20to%20eddsa%2Drdfc%2D2022%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.type,\n              'Expected a type identifier on the proof.');\n            should.exist(proof.cryptosuite,\n              'Expected a cryptosuite identifier on the proof.');\n          }\n\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "_foPABQNxaUa1LBtyyIMQ",
              "ctx": null,
              "_testId": "urn:uuid:2a7411c2-00db-44ec-bc65-b1ccd97a548c",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "If proofConfig.type is not set to DataIntegrityProof and/or proofConfig.cryptosuite is not set to eddsa-rdfc-2022, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-rdfc-2022:~:text=If%20proofConfig.type%20is%20not%20set%20to%20DataIntegrityProof%20and/or%20proofConfig.cryptosuite%20is%20not%20set%20to%20eddsa%2Drdfc%2D2022%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 125667,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected issuer to have issued a credential.: expected undefined to exist",
                "showDiff": false,
                "stack": "AssertionError: Expected issuer to have issued a credential.: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at assertBefore (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/suites/algorithms.js:338:18)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/suites/algorithms.js:366:11)\n    at process.processImmediate (node:internal/timers:483:21)"
              }
            },
            {
              "type": "test",
              "title": "If proofConfig.created is present and set to a value that is not a valid [XMLSCHEMA11-2] datetime, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-rdfc-2022:~:text=and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.-,If%20proofConfig.created%20is%20present%20and%20set%20to%20a%20value%20that%20is%20not%20a%20valid%20%5BXMLSCHEMA11%2D2%5D%20datetime%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.,-Set%20proofConfig.%40context%20to%20unsecuredDocument.%40context.';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            if(proof?.created) {\n              isValidDatetime(proof.created).should.equal(\n                true,\n                'Expected created value to be a valid datetime string.'\n              );\n            }\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "_foPABQNxaUa1LBtyyIMQ",
              "ctx": null,
              "_testId": "urn:uuid:ff073d57-fa28-42da-9079-719817bc2aac",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "If proofConfig.created is present and set to a value that is not a valid [XMLSCHEMA11-2] datetime, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-rdfc-2022:~:text=and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.-,If%20proofConfig.created%20is%20present%20and%20set%20to%20a%20value%20that%20is%20not%20a%20valid%20%5BXMLSCHEMA11%2D2%5D%20datetime%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.,-Set%20proofConfig.%40context%20to%20unsecuredDocument.%40context.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 125667,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected issuer to have issued a credential.: expected undefined to exist",
                "showDiff": false,
                "stack": "AssertionError: Expected issuer to have issued a credential.: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at assertBefore (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/suites/algorithms.js:338:18)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/suites/algorithms.js:380:11)\n    at process.processImmediate (node:internal/timers:483:21)"
              }
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: setupRow in \"Trinsic\"",
              "body": "function setupRow() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "_foPABQNxaUa1LBtyyIMQ",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "originalTitle": "\"before each\" hook: setupRow",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Trinsic\"",
              "body": "async function() {\n          issuedVc = await createInitialVc({issuer, vc: validVc});\n          proofs = getProofs(issuedVc);\n          if(proofs?.length) {\n            eddsa2022Proofs = proofs.filter(\n              proof => proof?.cryptosuite === cryptosuite);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "_foPABQNxaUa1LBtyyIMQ",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 125558,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 108,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "cFldjQInrjzorJUZhYQD5",
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
          "_testId": "urn:uuid:e6e2e9ef-11a4-480c-8732-03c1c39ef23d"
        },
        {
          "title": "bovine",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MUST contain a cryptosuite identifier (cryptosuite).",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-rdfc-2022:~:text=the%20proof%20options%20(options).-,The%20proof%20options%20MUST%20contain%20a%20type%20identifier%20for%20the%20cryptographic%20suite%20(type)%20and%20MUST%20contain%20a%20cryptosuite%20identifier%20(cryptosuite).,-A%20proof%20configuration%20object%20is%20produced';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.type,\n              'Expected a type identifier on the proof.');\n            should.exist(proof.cryptosuite,\n              'Expected a cryptosuite identifier on the proof.');\n          }\n\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "ocl3B18_5ctHZ5ZC_XvTQ",
              "ctx": null,
              "_testId": "urn:uuid:79b99a63-e025-4134-8800-f4e64f98ca69",
              "cell": {
                "columnId": "bovine",
                "rowId": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MUST contain a cryptosuite identifier (cryptosuite)."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-rdfc-2022:~:text=the%20proof%20options%20(options).-,The%20proof%20options%20MUST%20contain%20a%20type%20identifier%20for%20the%20cryptographic%20suite%20(type)%20and%20MUST%20contain%20a%20cryptosuite%20identifier%20(cryptosuite).,-A%20proof%20configuration%20object%20is%20produced",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 125817,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If proofConfig.type is not set to DataIntegrityProof and/or proofConfig.cryptosuite is not set to eddsa-rdfc-2022, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-rdfc-2022:~:text=If%20proofConfig.type%20is%20not%20set%20to%20DataIntegrityProof%20and/or%20proofConfig.cryptosuite%20is%20not%20set%20to%20eddsa%2Drdfc%2D2022%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.type,\n              'Expected a type identifier on the proof.');\n            should.exist(proof.cryptosuite,\n              'Expected a cryptosuite identifier on the proof.');\n          }\n\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "ocl3B18_5ctHZ5ZC_XvTQ",
              "ctx": null,
              "_testId": "urn:uuid:4cd9e5f4-4d5c-400c-9c16-d3e78b9748bb",
              "cell": {
                "columnId": "bovine",
                "rowId": "If proofConfig.type is not set to DataIntegrityProof and/or proofConfig.cryptosuite is not set to eddsa-rdfc-2022, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-rdfc-2022:~:text=If%20proofConfig.type%20is%20not%20set%20to%20DataIntegrityProof%20and/or%20proofConfig.cryptosuite%20is%20not%20set%20to%20eddsa%2Drdfc%2D2022%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 125817,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If proofConfig.created is present and set to a value that is not a valid [XMLSCHEMA11-2] datetime, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-rdfc-2022:~:text=and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.-,If%20proofConfig.created%20is%20present%20and%20set%20to%20a%20value%20that%20is%20not%20a%20valid%20%5BXMLSCHEMA11%2D2%5D%20datetime%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.,-Set%20proofConfig.%40context%20to%20unsecuredDocument.%40context.';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            if(proof?.created) {\n              isValidDatetime(proof.created).should.equal(\n                true,\n                'Expected created value to be a valid datetime string.'\n              );\n            }\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "ocl3B18_5ctHZ5ZC_XvTQ",
              "ctx": null,
              "_testId": "urn:uuid:3f3c07d8-8c44-4548-9ee2-fc9bb11c65c1",
              "cell": {
                "columnId": "bovine",
                "rowId": "If proofConfig.created is present and set to a value that is not a valid [XMLSCHEMA11-2] datetime, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-rdfc-2022:~:text=and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.-,If%20proofConfig.created%20is%20present%20and%20set%20to%20a%20value%20that%20is%20not%20a%20valid%20%5BXMLSCHEMA11%2D2%5D%20datetime%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.,-Set%20proofConfig.%40context%20to%20unsecuredDocument.%40context.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 125817,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: setupRow in \"bovine\"",
              "body": "function setupRow() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "ocl3B18_5ctHZ5ZC_XvTQ",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "originalTitle": "\"before each\" hook: setupRow",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"bovine\"",
              "body": "async function() {\n          issuedVc = await createInitialVc({issuer, vc: validVc});\n          proofs = getProofs(issuedVc);\n          if(proofs?.length) {\n            eddsa2022Proofs = proofs.filter(\n              proof => proof?.cryptosuite === cryptosuite);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "ocl3B18_5ctHZ5ZC_XvTQ",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 125668,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 149,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "cFldjQInrjzorJUZhYQD5",
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
          "_testId": "urn:uuid:e670fae8-ad82-41c5-ae67-f36af6ea6aa0"
        }
      ],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [
        {
          "title": "\"before all\" hook in \"eddsa-rdfc-2022 - Algorithms - Proof Configuration\"",
          "body": "async function() {\n      const credentials = await generateTestData();\n      validVc = credentials.clone('validVc');\n    }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "cFldjQInrjzorJUZhYQD5",
          "ctx": null,
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 124140,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 1,
          "_error": null
        }
      ],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "Ika60aoT9ncTXtTubybzs",
      "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Implementer",
      "_testId": "urn:uuid:89e45d19-5cf5-4c17-ae64-b4943283829a",
      "columns": [
        "apicatalog.com",
        "Aviary Tech",
        "Digital Bazaar",
        "Grotto Networking",
        "Procivis One Core",
        "SpruceID",
        "Trential",
        "Trinsic",
        "bovine"
      ],
      "rows": [
        {
          "id": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MUST contain a cryptosuite identifier (cryptosuite).",
          "link": "https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-rdfc-2022:~:text=the%20proof%20options%20(options).-,The%20proof%20options%20MUST%20contain%20a%20type%20identifier%20for%20the%20cryptographic%20suite%20(type)%20and%20MUST%20contain%20a%20cryptosuite%20identifier%20(cryptosuite).,-A%20proof%20configuration%20object%20is%20produced",
          "cells": [
            {
              "type": "test",
              "title": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MUST contain a cryptosuite identifier (cryptosuite).",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-rdfc-2022:~:text=the%20proof%20options%20(options).-,The%20proof%20options%20MUST%20contain%20a%20type%20identifier%20for%20the%20cryptographic%20suite%20(type)%20and%20MUST%20contain%20a%20cryptosuite%20identifier%20(cryptosuite).,-A%20proof%20configuration%20object%20is%20produced';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.type,\n              'Expected a type identifier on the proof.');\n            should.exist(proof.cryptosuite,\n              'Expected a cryptosuite identifier on the proof.');\n          }\n\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "0rvALiKldJZ0ZImZW4xqU",
              "ctx": null,
              "_testId": "urn:uuid:86492ec6-8614-41ef-9fcb-f1d1f70d6799",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MUST contain a cryptosuite identifier (cryptosuite)."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-rdfc-2022:~:text=the%20proof%20options%20(options).-,The%20proof%20options%20MUST%20contain%20a%20type%20identifier%20for%20the%20cryptographic%20suite%20(type)%20and%20MUST%20contain%20a%20cryptosuite%20identifier%20(cryptosuite).,-A%20proof%20configuration%20object%20is%20produced",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 124805,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MUST contain a cryptosuite identifier (cryptosuite).",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-rdfc-2022:~:text=the%20proof%20options%20(options).-,The%20proof%20options%20MUST%20contain%20a%20type%20identifier%20for%20the%20cryptographic%20suite%20(type)%20and%20MUST%20contain%20a%20cryptosuite%20identifier%20(cryptosuite).,-A%20proof%20configuration%20object%20is%20produced';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.type,\n              'Expected a type identifier on the proof.');\n            should.exist(proof.cryptosuite,\n              'Expected a cryptosuite identifier on the proof.');\n          }\n\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "yk2KgUp2y8u3fX_97vyKK",
              "ctx": null,
              "_testId": "urn:uuid:4c56a819-d663-4bcd-9c55-cecc94968c2f",
              "cell": {
                "columnId": "Aviary Tech",
                "rowId": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MUST contain a cryptosuite identifier (cryptosuite)."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-rdfc-2022:~:text=the%20proof%20options%20(options).-,The%20proof%20options%20MUST%20contain%20a%20type%20identifier%20for%20the%20cryptographic%20suite%20(type)%20and%20MUST%20contain%20a%20cryptosuite%20identifier%20(cryptosuite).,-A%20proof%20configuration%20object%20is%20produced",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 124854,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MUST contain a cryptosuite identifier (cryptosuite).",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-rdfc-2022:~:text=the%20proof%20options%20(options).-,The%20proof%20options%20MUST%20contain%20a%20type%20identifier%20for%20the%20cryptographic%20suite%20(type)%20and%20MUST%20contain%20a%20cryptosuite%20identifier%20(cryptosuite).,-A%20proof%20configuration%20object%20is%20produced';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.type,\n              'Expected a type identifier on the proof.');\n            should.exist(proof.cryptosuite,\n              'Expected a cryptosuite identifier on the proof.');\n          }\n\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "XEaQVVFerlhDEd-8n0RqK",
              "ctx": null,
              "_testId": "urn:uuid:a52d9d89-8a86-4823-bd2e-72492795b1f2",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MUST contain a cryptosuite identifier (cryptosuite)."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-rdfc-2022:~:text=the%20proof%20options%20(options).-,The%20proof%20options%20MUST%20contain%20a%20type%20identifier%20for%20the%20cryptographic%20suite%20(type)%20and%20MUST%20contain%20a%20cryptosuite%20identifier%20(cryptosuite).,-A%20proof%20configuration%20object%20is%20produced",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 124985,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MUST contain a cryptosuite identifier (cryptosuite).",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-rdfc-2022:~:text=the%20proof%20options%20(options).-,The%20proof%20options%20MUST%20contain%20a%20type%20identifier%20for%20the%20cryptographic%20suite%20(type)%20and%20MUST%20contain%20a%20cryptosuite%20identifier%20(cryptosuite).,-A%20proof%20configuration%20object%20is%20produced';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.type,\n              'Expected a type identifier on the proof.');\n            should.exist(proof.cryptosuite,\n              'Expected a cryptosuite identifier on the proof.');\n          }\n\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "aRcW2G0SXccdzK_Yi0RX-",
              "ctx": null,
              "_testId": "urn:uuid:6caefab9-5b7e-4a1c-b26d-a6b23e3349e0",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MUST contain a cryptosuite identifier (cryptosuite)."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-rdfc-2022:~:text=the%20proof%20options%20(options).-,The%20proof%20options%20MUST%20contain%20a%20type%20identifier%20for%20the%20cryptographic%20suite%20(type)%20and%20MUST%20contain%20a%20cryptosuite%20identifier%20(cryptosuite).,-A%20proof%20configuration%20object%20is%20produced",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 125013,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MUST contain a cryptosuite identifier (cryptosuite).",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-rdfc-2022:~:text=the%20proof%20options%20(options).-,The%20proof%20options%20MUST%20contain%20a%20type%20identifier%20for%20the%20cryptographic%20suite%20(type)%20and%20MUST%20contain%20a%20cryptosuite%20identifier%20(cryptosuite).,-A%20proof%20configuration%20object%20is%20produced';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.type,\n              'Expected a type identifier on the proof.');\n            should.exist(proof.cryptosuite,\n              'Expected a cryptosuite identifier on the proof.');\n          }\n\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "cHPrguzr-S1J2b85dx9Zy",
              "ctx": null,
              "_testId": "urn:uuid:44baf2c9-3619-42c0-96fc-c1e1dec92bb9",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MUST contain a cryptosuite identifier (cryptosuite)."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-rdfc-2022:~:text=the%20proof%20options%20(options).-,The%20proof%20options%20MUST%20contain%20a%20type%20identifier%20for%20the%20cryptographic%20suite%20(type)%20and%20MUST%20contain%20a%20cryptosuite%20identifier%20(cryptosuite).,-A%20proof%20configuration%20object%20is%20produced",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 125204,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MUST contain a cryptosuite identifier (cryptosuite).",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-rdfc-2022:~:text=the%20proof%20options%20(options).-,The%20proof%20options%20MUST%20contain%20a%20type%20identifier%20for%20the%20cryptographic%20suite%20(type)%20and%20MUST%20contain%20a%20cryptosuite%20identifier%20(cryptosuite).,-A%20proof%20configuration%20object%20is%20produced';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.type,\n              'Expected a type identifier on the proof.');\n            should.exist(proof.cryptosuite,\n              'Expected a cryptosuite identifier on the proof.');\n          }\n\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "gGbeYXBxc7vw98Ipp9A7g",
              "ctx": null,
              "_testId": "urn:uuid:afb7ce33-e62a-4839-a62a-57a6e7cdab4a",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MUST contain a cryptosuite identifier (cryptosuite)."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-rdfc-2022:~:text=the%20proof%20options%20(options).-,The%20proof%20options%20MUST%20contain%20a%20type%20identifier%20for%20the%20cryptographic%20suite%20(type)%20and%20MUST%20contain%20a%20cryptosuite%20identifier%20(cryptosuite).,-A%20proof%20configuration%20object%20is%20produced",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 125302,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MUST contain a cryptosuite identifier (cryptosuite).",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-rdfc-2022:~:text=the%20proof%20options%20(options).-,The%20proof%20options%20MUST%20contain%20a%20type%20identifier%20for%20the%20cryptographic%20suite%20(type)%20and%20MUST%20contain%20a%20cryptosuite%20identifier%20(cryptosuite).,-A%20proof%20configuration%20object%20is%20produced';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.type,\n              'Expected a type identifier on the proof.');\n            should.exist(proof.cryptosuite,\n              'Expected a cryptosuite identifier on the proof.');\n          }\n\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "_HVKgo92lpIdW18XjHWC4",
              "ctx": null,
              "_testId": "urn:uuid:d417e7bc-6795-419e-a504-0f82c03d56c5",
              "cell": {
                "columnId": "Trential",
                "rowId": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MUST contain a cryptosuite identifier (cryptosuite)."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-rdfc-2022:~:text=the%20proof%20options%20(options).-,The%20proof%20options%20MUST%20contain%20a%20type%20identifier%20for%20the%20cryptographic%20suite%20(type)%20and%20MUST%20contain%20a%20cryptosuite%20identifier%20(cryptosuite).,-A%20proof%20configuration%20object%20is%20produced",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 125558,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MUST contain a cryptosuite identifier (cryptosuite).",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-rdfc-2022:~:text=the%20proof%20options%20(options).-,The%20proof%20options%20MUST%20contain%20a%20type%20identifier%20for%20the%20cryptographic%20suite%20(type)%20and%20MUST%20contain%20a%20cryptosuite%20identifier%20(cryptosuite).,-A%20proof%20configuration%20object%20is%20produced';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.type,\n              'Expected a type identifier on the proof.');\n            should.exist(proof.cryptosuite,\n              'Expected a cryptosuite identifier on the proof.');\n          }\n\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "_foPABQNxaUa1LBtyyIMQ",
              "ctx": null,
              "_testId": "urn:uuid:bfb21568-4315-4879-947a-77309dbe15ec",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MUST contain a cryptosuite identifier (cryptosuite)."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-rdfc-2022:~:text=the%20proof%20options%20(options).-,The%20proof%20options%20MUST%20contain%20a%20type%20identifier%20for%20the%20cryptographic%20suite%20(type)%20and%20MUST%20contain%20a%20cryptosuite%20identifier%20(cryptosuite).,-A%20proof%20configuration%20object%20is%20produced",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 125667,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected issuer to have issued a credential.: expected undefined to exist",
                "showDiff": false,
                "stack": "AssertionError: Expected issuer to have issued a credential.: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at assertBefore (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/suites/algorithms.js:338:18)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/suites/algorithms.js:351:11)\n    at process.processImmediate (node:internal/timers:483:21)"
              }
            },
            {
              "type": "test",
              "title": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MUST contain a cryptosuite identifier (cryptosuite).",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-rdfc-2022:~:text=the%20proof%20options%20(options).-,The%20proof%20options%20MUST%20contain%20a%20type%20identifier%20for%20the%20cryptographic%20suite%20(type)%20and%20MUST%20contain%20a%20cryptosuite%20identifier%20(cryptosuite).,-A%20proof%20configuration%20object%20is%20produced';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.type,\n              'Expected a type identifier on the proof.');\n            should.exist(proof.cryptosuite,\n              'Expected a cryptosuite identifier on the proof.');\n          }\n\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "ocl3B18_5ctHZ5ZC_XvTQ",
              "ctx": null,
              "_testId": "urn:uuid:79b99a63-e025-4134-8800-f4e64f98ca69",
              "cell": {
                "columnId": "bovine",
                "rowId": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MUST contain a cryptosuite identifier (cryptosuite)."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-rdfc-2022:~:text=the%20proof%20options%20(options).-,The%20proof%20options%20MUST%20contain%20a%20type%20identifier%20for%20the%20cryptographic%20suite%20(type)%20and%20MUST%20contain%20a%20cryptosuite%20identifier%20(cryptosuite).,-A%20proof%20configuration%20object%20is%20produced",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 125817,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "If proofConfig.type is not set to DataIntegrityProof and/or proofConfig.cryptosuite is not set to eddsa-rdfc-2022, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
          "link": "https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-rdfc-2022:~:text=If%20proofConfig.type%20is%20not%20set%20to%20DataIntegrityProof%20and/or%20proofConfig.cryptosuite%20is%20not%20set%20to%20eddsa%2Drdfc%2D2022%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
          "cells": [
            {
              "type": "test",
              "title": "If proofConfig.type is not set to DataIntegrityProof and/or proofConfig.cryptosuite is not set to eddsa-rdfc-2022, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-rdfc-2022:~:text=If%20proofConfig.type%20is%20not%20set%20to%20DataIntegrityProof%20and/or%20proofConfig.cryptosuite%20is%20not%20set%20to%20eddsa%2Drdfc%2D2022%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.type,\n              'Expected a type identifier on the proof.');\n            should.exist(proof.cryptosuite,\n              'Expected a cryptosuite identifier on the proof.');\n          }\n\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "0rvALiKldJZ0ZImZW4xqU",
              "ctx": null,
              "_testId": "urn:uuid:fe9131a6-b8b1-4106-b3c1-87a82e76e5d5",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If proofConfig.type is not set to DataIntegrityProof and/or proofConfig.cryptosuite is not set to eddsa-rdfc-2022, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-rdfc-2022:~:text=If%20proofConfig.type%20is%20not%20set%20to%20DataIntegrityProof%20and/or%20proofConfig.cryptosuite%20is%20not%20set%20to%20eddsa%2Drdfc%2D2022%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 124806,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If proofConfig.type is not set to DataIntegrityProof and/or proofConfig.cryptosuite is not set to eddsa-rdfc-2022, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-rdfc-2022:~:text=If%20proofConfig.type%20is%20not%20set%20to%20DataIntegrityProof%20and/or%20proofConfig.cryptosuite%20is%20not%20set%20to%20eddsa%2Drdfc%2D2022%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.type,\n              'Expected a type identifier on the proof.');\n            should.exist(proof.cryptosuite,\n              'Expected a cryptosuite identifier on the proof.');\n          }\n\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "yk2KgUp2y8u3fX_97vyKK",
              "ctx": null,
              "_testId": "urn:uuid:52ebb627-855b-426c-b401-f56c2cf68043",
              "cell": {
                "columnId": "Aviary Tech",
                "rowId": "If proofConfig.type is not set to DataIntegrityProof and/or proofConfig.cryptosuite is not set to eddsa-rdfc-2022, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-rdfc-2022:~:text=If%20proofConfig.type%20is%20not%20set%20to%20DataIntegrityProof%20and/or%20proofConfig.cryptosuite%20is%20not%20set%20to%20eddsa%2Drdfc%2D2022%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 124854,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If proofConfig.type is not set to DataIntegrityProof and/or proofConfig.cryptosuite is not set to eddsa-rdfc-2022, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-rdfc-2022:~:text=If%20proofConfig.type%20is%20not%20set%20to%20DataIntegrityProof%20and/or%20proofConfig.cryptosuite%20is%20not%20set%20to%20eddsa%2Drdfc%2D2022%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.type,\n              'Expected a type identifier on the proof.');\n            should.exist(proof.cryptosuite,\n              'Expected a cryptosuite identifier on the proof.');\n          }\n\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "XEaQVVFerlhDEd-8n0RqK",
              "ctx": null,
              "_testId": "urn:uuid:587e5465-2f8f-4ee1-aeb1-b60212e8232f",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If proofConfig.type is not set to DataIntegrityProof and/or proofConfig.cryptosuite is not set to eddsa-rdfc-2022, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-rdfc-2022:~:text=If%20proofConfig.type%20is%20not%20set%20to%20DataIntegrityProof%20and/or%20proofConfig.cryptosuite%20is%20not%20set%20to%20eddsa%2Drdfc%2D2022%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 124986,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If proofConfig.type is not set to DataIntegrityProof and/or proofConfig.cryptosuite is not set to eddsa-rdfc-2022, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-rdfc-2022:~:text=If%20proofConfig.type%20is%20not%20set%20to%20DataIntegrityProof%20and/or%20proofConfig.cryptosuite%20is%20not%20set%20to%20eddsa%2Drdfc%2D2022%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.type,\n              'Expected a type identifier on the proof.');\n            should.exist(proof.cryptosuite,\n              'Expected a cryptosuite identifier on the proof.');\n          }\n\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "aRcW2G0SXccdzK_Yi0RX-",
              "ctx": null,
              "_testId": "urn:uuid:6ad17144-105d-4e84-b358-c1b34100f342",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If proofConfig.type is not set to DataIntegrityProof and/or proofConfig.cryptosuite is not set to eddsa-rdfc-2022, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-rdfc-2022:~:text=If%20proofConfig.type%20is%20not%20set%20to%20DataIntegrityProof%20and/or%20proofConfig.cryptosuite%20is%20not%20set%20to%20eddsa%2Drdfc%2D2022%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 125013,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If proofConfig.type is not set to DataIntegrityProof and/or proofConfig.cryptosuite is not set to eddsa-rdfc-2022, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-rdfc-2022:~:text=If%20proofConfig.type%20is%20not%20set%20to%20DataIntegrityProof%20and/or%20proofConfig.cryptosuite%20is%20not%20set%20to%20eddsa%2Drdfc%2D2022%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.type,\n              'Expected a type identifier on the proof.');\n            should.exist(proof.cryptosuite,\n              'Expected a cryptosuite identifier on the proof.');\n          }\n\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "cHPrguzr-S1J2b85dx9Zy",
              "ctx": null,
              "_testId": "urn:uuid:9ff77df5-ce18-4e3e-af0e-adbec4ff3168",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "If proofConfig.type is not set to DataIntegrityProof and/or proofConfig.cryptosuite is not set to eddsa-rdfc-2022, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-rdfc-2022:~:text=If%20proofConfig.type%20is%20not%20set%20to%20DataIntegrityProof%20and/or%20proofConfig.cryptosuite%20is%20not%20set%20to%20eddsa%2Drdfc%2D2022%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 125204,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If proofConfig.type is not set to DataIntegrityProof and/or proofConfig.cryptosuite is not set to eddsa-rdfc-2022, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-rdfc-2022:~:text=If%20proofConfig.type%20is%20not%20set%20to%20DataIntegrityProof%20and/or%20proofConfig.cryptosuite%20is%20not%20set%20to%20eddsa%2Drdfc%2D2022%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.type,\n              'Expected a type identifier on the proof.');\n            should.exist(proof.cryptosuite,\n              'Expected a cryptosuite identifier on the proof.');\n          }\n\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "gGbeYXBxc7vw98Ipp9A7g",
              "ctx": null,
              "_testId": "urn:uuid:81f6067d-67a0-4cd7-a466-b95aa34a0e33",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If proofConfig.type is not set to DataIntegrityProof and/or proofConfig.cryptosuite is not set to eddsa-rdfc-2022, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-rdfc-2022:~:text=If%20proofConfig.type%20is%20not%20set%20to%20DataIntegrityProof%20and/or%20proofConfig.cryptosuite%20is%20not%20set%20to%20eddsa%2Drdfc%2D2022%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 125302,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If proofConfig.type is not set to DataIntegrityProof and/or proofConfig.cryptosuite is not set to eddsa-rdfc-2022, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-rdfc-2022:~:text=If%20proofConfig.type%20is%20not%20set%20to%20DataIntegrityProof%20and/or%20proofConfig.cryptosuite%20is%20not%20set%20to%20eddsa%2Drdfc%2D2022%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.type,\n              'Expected a type identifier on the proof.');\n            should.exist(proof.cryptosuite,\n              'Expected a cryptosuite identifier on the proof.');\n          }\n\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "_HVKgo92lpIdW18XjHWC4",
              "ctx": null,
              "_testId": "urn:uuid:8a46581a-5925-4ac0-9128-9e89022c3b54",
              "cell": {
                "columnId": "Trential",
                "rowId": "If proofConfig.type is not set to DataIntegrityProof and/or proofConfig.cryptosuite is not set to eddsa-rdfc-2022, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-rdfc-2022:~:text=If%20proofConfig.type%20is%20not%20set%20to%20DataIntegrityProof%20and/or%20proofConfig.cryptosuite%20is%20not%20set%20to%20eddsa%2Drdfc%2D2022%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 125558,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If proofConfig.type is not set to DataIntegrityProof and/or proofConfig.cryptosuite is not set to eddsa-rdfc-2022, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-rdfc-2022:~:text=If%20proofConfig.type%20is%20not%20set%20to%20DataIntegrityProof%20and/or%20proofConfig.cryptosuite%20is%20not%20set%20to%20eddsa%2Drdfc%2D2022%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.type,\n              'Expected a type identifier on the proof.');\n            should.exist(proof.cryptosuite,\n              'Expected a cryptosuite identifier on the proof.');\n          }\n\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "_foPABQNxaUa1LBtyyIMQ",
              "ctx": null,
              "_testId": "urn:uuid:2a7411c2-00db-44ec-bc65-b1ccd97a548c",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "If proofConfig.type is not set to DataIntegrityProof and/or proofConfig.cryptosuite is not set to eddsa-rdfc-2022, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-rdfc-2022:~:text=If%20proofConfig.type%20is%20not%20set%20to%20DataIntegrityProof%20and/or%20proofConfig.cryptosuite%20is%20not%20set%20to%20eddsa%2Drdfc%2D2022%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 125667,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected issuer to have issued a credential.: expected undefined to exist",
                "showDiff": false,
                "stack": "AssertionError: Expected issuer to have issued a credential.: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at assertBefore (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/suites/algorithms.js:338:18)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/suites/algorithms.js:366:11)\n    at process.processImmediate (node:internal/timers:483:21)"
              }
            },
            {
              "type": "test",
              "title": "If proofConfig.type is not set to DataIntegrityProof and/or proofConfig.cryptosuite is not set to eddsa-rdfc-2022, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-rdfc-2022:~:text=If%20proofConfig.type%20is%20not%20set%20to%20DataIntegrityProof%20and/or%20proofConfig.cryptosuite%20is%20not%20set%20to%20eddsa%2Drdfc%2D2022%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.type,\n              'Expected a type identifier on the proof.');\n            should.exist(proof.cryptosuite,\n              'Expected a cryptosuite identifier on the proof.');\n          }\n\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "ocl3B18_5ctHZ5ZC_XvTQ",
              "ctx": null,
              "_testId": "urn:uuid:4cd9e5f4-4d5c-400c-9c16-d3e78b9748bb",
              "cell": {
                "columnId": "bovine",
                "rowId": "If proofConfig.type is not set to DataIntegrityProof and/or proofConfig.cryptosuite is not set to eddsa-rdfc-2022, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-rdfc-2022:~:text=If%20proofConfig.type%20is%20not%20set%20to%20DataIntegrityProof%20and/or%20proofConfig.cryptosuite%20is%20not%20set%20to%20eddsa%2Drdfc%2D2022%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 125817,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "If proofConfig.created is present and set to a value that is not a valid [XMLSCHEMA11-2] datetime, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
          "link": "https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-rdfc-2022:~:text=and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.-,If%20proofConfig.created%20is%20present%20and%20set%20to%20a%20value%20that%20is%20not%20a%20valid%20%5BXMLSCHEMA11%2D2%5D%20datetime%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.,-Set%20proofConfig.%40context%20to%20unsecuredDocument.%40context.",
          "cells": [
            {
              "type": "test",
              "title": "If proofConfig.created is present and set to a value that is not a valid [XMLSCHEMA11-2] datetime, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-rdfc-2022:~:text=and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.-,If%20proofConfig.created%20is%20present%20and%20set%20to%20a%20value%20that%20is%20not%20a%20valid%20%5BXMLSCHEMA11%2D2%5D%20datetime%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.,-Set%20proofConfig.%40context%20to%20unsecuredDocument.%40context.';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            if(proof?.created) {\n              isValidDatetime(proof.created).should.equal(\n                true,\n                'Expected created value to be a valid datetime string.'\n              );\n            }\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "0rvALiKldJZ0ZImZW4xqU",
              "ctx": null,
              "_testId": "urn:uuid:18b79083-e14f-42c3-9374-e20bd67a4a48",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If proofConfig.created is present and set to a value that is not a valid [XMLSCHEMA11-2] datetime, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-rdfc-2022:~:text=and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.-,If%20proofConfig.created%20is%20present%20and%20set%20to%20a%20value%20that%20is%20not%20a%20valid%20%5BXMLSCHEMA11%2D2%5D%20datetime%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.,-Set%20proofConfig.%40context%20to%20unsecuredDocument.%40context.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 124806,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If proofConfig.created is present and set to a value that is not a valid [XMLSCHEMA11-2] datetime, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-rdfc-2022:~:text=and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.-,If%20proofConfig.created%20is%20present%20and%20set%20to%20a%20value%20that%20is%20not%20a%20valid%20%5BXMLSCHEMA11%2D2%5D%20datetime%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.,-Set%20proofConfig.%40context%20to%20unsecuredDocument.%40context.';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            if(proof?.created) {\n              isValidDatetime(proof.created).should.equal(\n                true,\n                'Expected created value to be a valid datetime string.'\n              );\n            }\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "yk2KgUp2y8u3fX_97vyKK",
              "ctx": null,
              "_testId": "urn:uuid:e500071c-daa3-4f1b-88f2-4dcf49b74066",
              "cell": {
                "columnId": "Aviary Tech",
                "rowId": "If proofConfig.created is present and set to a value that is not a valid [XMLSCHEMA11-2] datetime, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-rdfc-2022:~:text=and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.-,If%20proofConfig.created%20is%20present%20and%20set%20to%20a%20value%20that%20is%20not%20a%20valid%20%5BXMLSCHEMA11%2D2%5D%20datetime%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.,-Set%20proofConfig.%40context%20to%20unsecuredDocument.%40context.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 124855,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If proofConfig.created is present and set to a value that is not a valid [XMLSCHEMA11-2] datetime, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-rdfc-2022:~:text=and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.-,If%20proofConfig.created%20is%20present%20and%20set%20to%20a%20value%20that%20is%20not%20a%20valid%20%5BXMLSCHEMA11%2D2%5D%20datetime%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.,-Set%20proofConfig.%40context%20to%20unsecuredDocument.%40context.';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            if(proof?.created) {\n              isValidDatetime(proof.created).should.equal(\n                true,\n                'Expected created value to be a valid datetime string.'\n              );\n            }\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "XEaQVVFerlhDEd-8n0RqK",
              "ctx": null,
              "_testId": "urn:uuid:e28e01cf-5bca-4186-ae1b-98d1809e36bb",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If proofConfig.created is present and set to a value that is not a valid [XMLSCHEMA11-2] datetime, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-rdfc-2022:~:text=and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.-,If%20proofConfig.created%20is%20present%20and%20set%20to%20a%20value%20that%20is%20not%20a%20valid%20%5BXMLSCHEMA11%2D2%5D%20datetime%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.,-Set%20proofConfig.%40context%20to%20unsecuredDocument.%40context.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 124986,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If proofConfig.created is present and set to a value that is not a valid [XMLSCHEMA11-2] datetime, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-rdfc-2022:~:text=and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.-,If%20proofConfig.created%20is%20present%20and%20set%20to%20a%20value%20that%20is%20not%20a%20valid%20%5BXMLSCHEMA11%2D2%5D%20datetime%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.,-Set%20proofConfig.%40context%20to%20unsecuredDocument.%40context.';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            if(proof?.created) {\n              isValidDatetime(proof.created).should.equal(\n                true,\n                'Expected created value to be a valid datetime string.'\n              );\n            }\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "aRcW2G0SXccdzK_Yi0RX-",
              "ctx": null,
              "_testId": "urn:uuid:055e0d6c-f776-4b62-b267-7ce3f6e79d96",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If proofConfig.created is present and set to a value that is not a valid [XMLSCHEMA11-2] datetime, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-rdfc-2022:~:text=and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.-,If%20proofConfig.created%20is%20present%20and%20set%20to%20a%20value%20that%20is%20not%20a%20valid%20%5BXMLSCHEMA11%2D2%5D%20datetime%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.,-Set%20proofConfig.%40context%20to%20unsecuredDocument.%40context.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 125014,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If proofConfig.created is present and set to a value that is not a valid [XMLSCHEMA11-2] datetime, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-rdfc-2022:~:text=and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.-,If%20proofConfig.created%20is%20present%20and%20set%20to%20a%20value%20that%20is%20not%20a%20valid%20%5BXMLSCHEMA11%2D2%5D%20datetime%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.,-Set%20proofConfig.%40context%20to%20unsecuredDocument.%40context.';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            if(proof?.created) {\n              isValidDatetime(proof.created).should.equal(\n                true,\n                'Expected created value to be a valid datetime string.'\n              );\n            }\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "cHPrguzr-S1J2b85dx9Zy",
              "ctx": null,
              "_testId": "urn:uuid:c6fe9d6e-49e9-4305-9903-9305638b4790",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "If proofConfig.created is present and set to a value that is not a valid [XMLSCHEMA11-2] datetime, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-rdfc-2022:~:text=and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.-,If%20proofConfig.created%20is%20present%20and%20set%20to%20a%20value%20that%20is%20not%20a%20valid%20%5BXMLSCHEMA11%2D2%5D%20datetime%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.,-Set%20proofConfig.%40context%20to%20unsecuredDocument.%40context.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 125204,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If proofConfig.created is present and set to a value that is not a valid [XMLSCHEMA11-2] datetime, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-rdfc-2022:~:text=and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.-,If%20proofConfig.created%20is%20present%20and%20set%20to%20a%20value%20that%20is%20not%20a%20valid%20%5BXMLSCHEMA11%2D2%5D%20datetime%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.,-Set%20proofConfig.%40context%20to%20unsecuredDocument.%40context.';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            if(proof?.created) {\n              isValidDatetime(proof.created).should.equal(\n                true,\n                'Expected created value to be a valid datetime string.'\n              );\n            }\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "gGbeYXBxc7vw98Ipp9A7g",
              "ctx": null,
              "_testId": "urn:uuid:04b6aedb-74ac-4fae-a685-eff78d2d5483",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If proofConfig.created is present and set to a value that is not a valid [XMLSCHEMA11-2] datetime, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-rdfc-2022:~:text=and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.-,If%20proofConfig.created%20is%20present%20and%20set%20to%20a%20value%20that%20is%20not%20a%20valid%20%5BXMLSCHEMA11%2D2%5D%20datetime%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.,-Set%20proofConfig.%40context%20to%20unsecuredDocument.%40context.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 125303,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If proofConfig.created is present and set to a value that is not a valid [XMLSCHEMA11-2] datetime, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-rdfc-2022:~:text=and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.-,If%20proofConfig.created%20is%20present%20and%20set%20to%20a%20value%20that%20is%20not%20a%20valid%20%5BXMLSCHEMA11%2D2%5D%20datetime%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.,-Set%20proofConfig.%40context%20to%20unsecuredDocument.%40context.';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            if(proof?.created) {\n              isValidDatetime(proof.created).should.equal(\n                true,\n                'Expected created value to be a valid datetime string.'\n              );\n            }\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "_HVKgo92lpIdW18XjHWC4",
              "ctx": null,
              "_testId": "urn:uuid:2ad7abe8-60a7-4c50-aafb-886572a9bdeb",
              "cell": {
                "columnId": "Trential",
                "rowId": "If proofConfig.created is present and set to a value that is not a valid [XMLSCHEMA11-2] datetime, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-rdfc-2022:~:text=and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.-,If%20proofConfig.created%20is%20present%20and%20set%20to%20a%20value%20that%20is%20not%20a%20valid%20%5BXMLSCHEMA11%2D2%5D%20datetime%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.,-Set%20proofConfig.%40context%20to%20unsecuredDocument.%40context.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 125558,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If proofConfig.created is present and set to a value that is not a valid [XMLSCHEMA11-2] datetime, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-rdfc-2022:~:text=and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.-,If%20proofConfig.created%20is%20present%20and%20set%20to%20a%20value%20that%20is%20not%20a%20valid%20%5BXMLSCHEMA11%2D2%5D%20datetime%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.,-Set%20proofConfig.%40context%20to%20unsecuredDocument.%40context.';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            if(proof?.created) {\n              isValidDatetime(proof.created).should.equal(\n                true,\n                'Expected created value to be a valid datetime string.'\n              );\n            }\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "_foPABQNxaUa1LBtyyIMQ",
              "ctx": null,
              "_testId": "urn:uuid:ff073d57-fa28-42da-9079-719817bc2aac",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "If proofConfig.created is present and set to a value that is not a valid [XMLSCHEMA11-2] datetime, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-rdfc-2022:~:text=and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.-,If%20proofConfig.created%20is%20present%20and%20set%20to%20a%20value%20that%20is%20not%20a%20valid%20%5BXMLSCHEMA11%2D2%5D%20datetime%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.,-Set%20proofConfig.%40context%20to%20unsecuredDocument.%40context.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 125667,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected issuer to have issued a credential.: expected undefined to exist",
                "showDiff": false,
                "stack": "AssertionError: Expected issuer to have issued a credential.: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at assertBefore (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/suites/algorithms.js:338:18)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/suites/algorithms.js:380:11)\n    at process.processImmediate (node:internal/timers:483:21)"
              }
            },
            {
              "type": "test",
              "title": "If proofConfig.created is present and set to a value that is not a valid [XMLSCHEMA11-2] datetime, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-rdfc-2022:~:text=and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.-,If%20proofConfig.created%20is%20present%20and%20set%20to%20a%20value%20that%20is%20not%20a%20valid%20%5BXMLSCHEMA11%2D2%5D%20datetime%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.,-Set%20proofConfig.%40context%20to%20unsecuredDocument.%40context.';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            if(proof?.created) {\n              isValidDatetime(proof.created).should.equal(\n                true,\n                'Expected created value to be a valid datetime string.'\n              );\n            }\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "ocl3B18_5ctHZ5ZC_XvTQ",
              "ctx": null,
              "_testId": "urn:uuid:3f3c07d8-8c44-4548-9ee2-fc9bb11c65c1",
              "cell": {
                "columnId": "bovine",
                "rowId": "If proofConfig.created is present and set to a value that is not a valid [XMLSCHEMA11-2] datetime, an error MUST be raised and SHOULD convey an error type of PROOF_GENERATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#proof-configuration-eddsa-rdfc-2022:~:text=and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.-,If%20proofConfig.created%20is%20present%20and%20set%20to%20a%20value%20that%20is%20not%20a%20valid%20%5BXMLSCHEMA11%2D2%5D%20datetime%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_GENERATION_ERROR.,-Set%20proofConfig.%40context%20to%20unsecuredDocument.%40context.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 125817,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        }
      ]
    },
    {
      "title": "eddsa-rdfc-2022 - Algorithms - Proof Serialization",
      "ctx": null,
      "suites": [
        {
          "title": "apicatalog.com",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MAY contain a cryptosuite identifier (cryptosuite).",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#proof-serialization-eddsa-rdfc-2022';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.type,\n              'Expected a type identifier on the proof.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "zplmZ_gmq3MZVKJ8jcTrg",
              "ctx": null,
              "_testId": "urn:uuid:b4e0d6b6-4e2b-4226-8047-41d2bc2ae7f0",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MAY contain a cryptosuite identifier (cryptosuite)."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#proof-serialization-eddsa-rdfc-2022",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 126548,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: setupRow in \"apicatalog.com\"",
              "body": "function setupRow() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "zplmZ_gmq3MZVKJ8jcTrg",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "originalTitle": "\"before each\" hook: setupRow",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"apicatalog.com\"",
              "body": "async function() {\n          issuedVc = await createInitialVc({issuer, vc: validVc});\n          proofs = getProofs(issuedVc);\n          if(proofs?.length) {\n            eddsa2022Proofs = proofs.filter(\n              proof => proof?.cryptosuite === cryptosuite);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "zplmZ_gmq3MZVKJ8jcTrg",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 125819,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 729,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "uLL4cJYQdcLtw3d-O77mx",
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
          "_testId": "urn:uuid:d7e41045-4c58-427d-9222-3f92517c6773"
        },
        {
          "title": "Aviary Tech",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MAY contain a cryptosuite identifier (cryptosuite).",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#proof-serialization-eddsa-rdfc-2022';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.type,\n              'Expected a type identifier on the proof.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "5WZnVaWb0L27x9w30G-i4",
              "ctx": null,
              "_testId": "urn:uuid:665d587d-61e3-4364-a5ac-572b2e355c58",
              "cell": {
                "columnId": "Aviary Tech",
                "rowId": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MAY contain a cryptosuite identifier (cryptosuite)."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#proof-serialization-eddsa-rdfc-2022",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 126604,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: setupRow in \"Aviary Tech\"",
              "body": "function setupRow() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "5WZnVaWb0L27x9w30G-i4",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "originalTitle": "\"before each\" hook: setupRow",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Aviary Tech\"",
              "body": "async function() {\n          issuedVc = await createInitialVc({issuer, vc: validVc});\n          proofs = getProofs(issuedVc);\n          if(proofs?.length) {\n            eddsa2022Proofs = proofs.filter(\n              proof => proof?.cryptosuite === cryptosuite);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "5WZnVaWb0L27x9w30G-i4",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 126549,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 54,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "uLL4cJYQdcLtw3d-O77mx",
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
          "_testId": "urn:uuid:fa7db1f5-5fc4-45de-b351-d0a9751ec005"
        },
        {
          "title": "Digital Bazaar",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MAY contain a cryptosuite identifier (cryptosuite).",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#proof-serialization-eddsa-rdfc-2022';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.type,\n              'Expected a type identifier on the proof.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "y4_6WU-5poQ4HmnoVTlR4",
              "ctx": null,
              "_testId": "urn:uuid:a6bc7211-53a0-4d31-bc31-086e41e58993",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MAY contain a cryptosuite identifier (cryptosuite)."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#proof-serialization-eddsa-rdfc-2022",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 126740,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: setupRow in \"Digital Bazaar\"",
              "body": "function setupRow() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "y4_6WU-5poQ4HmnoVTlR4",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "originalTitle": "\"before each\" hook: setupRow",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Digital Bazaar\"",
              "body": "async function() {\n          issuedVc = await createInitialVc({issuer, vc: validVc});\n          proofs = getProofs(issuedVc);\n          if(proofs?.length) {\n            eddsa2022Proofs = proofs.filter(\n              proof => proof?.cryptosuite === cryptosuite);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "y4_6WU-5poQ4HmnoVTlR4",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 126605,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 135,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "uLL4cJYQdcLtw3d-O77mx",
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
          "_testId": "urn:uuid:90535434-4e02-49ea-8bd6-a260f47d1d35"
        },
        {
          "title": "Grotto Networking",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MAY contain a cryptosuite identifier (cryptosuite).",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#proof-serialization-eddsa-rdfc-2022';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.type,\n              'Expected a type identifier on the proof.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "nc3mOhpKn9h2IbBIVntDS",
              "ctx": null,
              "_testId": "urn:uuid:ee22989f-7793-46fc-b7f9-835ffd61cf8c",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MAY contain a cryptosuite identifier (cryptosuite)."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#proof-serialization-eddsa-rdfc-2022",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 126765,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: setupRow in \"Grotto Networking\"",
              "body": "function setupRow() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "nc3mOhpKn9h2IbBIVntDS",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "originalTitle": "\"before each\" hook: setupRow",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Grotto Networking\"",
              "body": "async function() {\n          issuedVc = await createInitialVc({issuer, vc: validVc});\n          proofs = getProofs(issuedVc);\n          if(proofs?.length) {\n            eddsa2022Proofs = proofs.filter(\n              proof => proof?.cryptosuite === cryptosuite);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "nc3mOhpKn9h2IbBIVntDS",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 126741,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 24,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "uLL4cJYQdcLtw3d-O77mx",
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
          "_testId": "urn:uuid:0db2ca73-cd6e-4c93-b67a-6ede89a96ef6"
        },
        {
          "title": "Procivis One Core",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MAY contain a cryptosuite identifier (cryptosuite).",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#proof-serialization-eddsa-rdfc-2022';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.type,\n              'Expected a type identifier on the proof.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "5IXvtRTO4OdWRTgAyx5qb",
              "ctx": null,
              "_testId": "urn:uuid:bc7e135b-1173-4377-ad15-763e3860730c",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MAY contain a cryptosuite identifier (cryptosuite)."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#proof-serialization-eddsa-rdfc-2022",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 126995,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: setupRow in \"Procivis One Core\"",
              "body": "function setupRow() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "5IXvtRTO4OdWRTgAyx5qb",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "originalTitle": "\"before each\" hook: setupRow",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Procivis One Core\"",
              "body": "async function() {\n          issuedVc = await createInitialVc({issuer, vc: validVc});\n          proofs = getProofs(issuedVc);\n          if(proofs?.length) {\n            eddsa2022Proofs = proofs.filter(\n              proof => proof?.cryptosuite === cryptosuite);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "5IXvtRTO4OdWRTgAyx5qb",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 126765,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 230,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "uLL4cJYQdcLtw3d-O77mx",
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
          "_testId": "urn:uuid:62babed1-dd21-4c3d-98c5-87241e9db88a"
        },
        {
          "title": "SpruceID",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MAY contain a cryptosuite identifier (cryptosuite).",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#proof-serialization-eddsa-rdfc-2022';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.type,\n              'Expected a type identifier on the proof.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "Y4V1YnsXAjbkO9QiBPpmy",
              "ctx": null,
              "_testId": "urn:uuid:83e77656-ee22-468a-a050-161466f7d745",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MAY contain a cryptosuite identifier (cryptosuite)."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#proof-serialization-eddsa-rdfc-2022",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 127103,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: setupRow in \"SpruceID\"",
              "body": "function setupRow() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "Y4V1YnsXAjbkO9QiBPpmy",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "originalTitle": "\"before each\" hook: setupRow",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"SpruceID\"",
              "body": "async function() {\n          issuedVc = await createInitialVc({issuer, vc: validVc});\n          proofs = getProofs(issuedVc);\n          if(proofs?.length) {\n            eddsa2022Proofs = proofs.filter(\n              proof => proof?.cryptosuite === cryptosuite);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "Y4V1YnsXAjbkO9QiBPpmy",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 126996,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 108,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "uLL4cJYQdcLtw3d-O77mx",
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
          "_testId": "urn:uuid:a32a5387-00ec-4007-9d9a-a93a1934177e"
        },
        {
          "title": "Trential",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MAY contain a cryptosuite identifier (cryptosuite).",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#proof-serialization-eddsa-rdfc-2022';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.type,\n              'Expected a type identifier on the proof.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "6e_bmWHMtOYY1-DcrsM7I",
              "ctx": null,
              "_testId": "urn:uuid:308e364f-aaa6-46c2-a12a-7eda6520a3c8",
              "cell": {
                "columnId": "Trential",
                "rowId": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MAY contain a cryptosuite identifier (cryptosuite)."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#proof-serialization-eddsa-rdfc-2022",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 127349,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: setupRow in \"Trential\"",
              "body": "function setupRow() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "6e_bmWHMtOYY1-DcrsM7I",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "originalTitle": "\"before each\" hook: setupRow",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Trential\"",
              "body": "async function() {\n          issuedVc = await createInitialVc({issuer, vc: validVc});\n          proofs = getProofs(issuedVc);\n          if(proofs?.length) {\n            eddsa2022Proofs = proofs.filter(\n              proof => proof?.cryptosuite === cryptosuite);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "6e_bmWHMtOYY1-DcrsM7I",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 127103,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 245,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "uLL4cJYQdcLtw3d-O77mx",
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
          "_testId": "urn:uuid:a75b4d4a-ebf0-4e8a-a9d6-8ab001ac02e0"
        },
        {
          "title": "Trinsic",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MAY contain a cryptosuite identifier (cryptosuite).",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#proof-serialization-eddsa-rdfc-2022';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.type,\n              'Expected a type identifier on the proof.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "6PyuiY6uFt0biOiLOhqdf",
              "ctx": null,
              "_testId": "urn:uuid:feff0540-ef09-4649-91a6-3ab845e6c6ca",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MAY contain a cryptosuite identifier (cryptosuite)."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#proof-serialization-eddsa-rdfc-2022",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 127458,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected issuer to have issued a credential.: expected undefined to exist",
                "showDiff": false,
                "stack": "AssertionError: Expected issuer to have issued a credential.: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at assertBefore (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/suites/algorithms.js:416:18)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/suites/algorithms.js:429:11)\n    at process.processImmediate (node:internal/timers:483:21)"
              }
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: setupRow in \"Trinsic\"",
              "body": "function setupRow() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "6PyuiY6uFt0biOiLOhqdf",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "originalTitle": "\"before each\" hook: setupRow",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Trinsic\"",
              "body": "async function() {\n          issuedVc = await createInitialVc({issuer, vc: validVc});\n          proofs = getProofs(issuedVc);\n          if(proofs?.length) {\n            eddsa2022Proofs = proofs.filter(\n              proof => proof?.cryptosuite === cryptosuite);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "6PyuiY6uFt0biOiLOhqdf",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 127349,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 108,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "uLL4cJYQdcLtw3d-O77mx",
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
          "_testId": "urn:uuid:a5c8e123-64d1-4a85-bc0e-e9aa0b981d8e"
        },
        {
          "title": "bovine",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MAY contain a cryptosuite identifier (cryptosuite).",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#proof-serialization-eddsa-rdfc-2022';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.type,\n              'Expected a type identifier on the proof.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "skwh9W2BjgnwhY66ZWEy_",
              "ctx": null,
              "_testId": "urn:uuid:6e1a2ff9-3d3d-4213-8c6a-63912f5fed5f",
              "cell": {
                "columnId": "bovine",
                "rowId": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MAY contain a cryptosuite identifier (cryptosuite)."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#proof-serialization-eddsa-rdfc-2022",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 127608,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook: setupRow in \"bovine\"",
              "body": "function setupRow() {\n  // append test meta data to the it/test this.\n  this.currentTest.cell = {\n    columnId: this.currentTest.parent.title,\n    rowId: this.currentTest.title\n  };\n}",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "skwh9W2BjgnwhY66ZWEy_",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "originalTitle": "\"before each\" hook: setupRow",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"bovine\"",
              "body": "async function() {\n          issuedVc = await createInitialVc({issuer, vc: validVc});\n          proofs = getProofs(issuedVc);\n          if(proofs?.length) {\n            eddsa2022Proofs = proofs.filter(\n              proof => proof?.cryptosuite === cryptosuite);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "skwh9W2BjgnwhY66ZWEy_",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 127458,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 150,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "uLL4cJYQdcLtw3d-O77mx",
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
          "_testId": "urn:uuid:a7faa2ce-920f-425c-9562-ba6a1c9983d9"
        }
      ],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [
        {
          "title": "\"before all\" hook in \"eddsa-rdfc-2022 - Algorithms - Proof Serialization\"",
          "body": "async function() {\n      const credentials = await generateTestData();\n      validVc = credentials.clone('validVc');\n    }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "uLL4cJYQdcLtw3d-O77mx",
          "ctx": null,
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 125818,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 1,
          "_error": null
        }
      ],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "Ika60aoT9ncTXtTubybzs",
      "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Implementer",
      "_testId": "urn:uuid:5c9a2e15-3cdf-4ab1-ac28-a012db45621a",
      "columns": [
        "apicatalog.com",
        "Aviary Tech",
        "Digital Bazaar",
        "Grotto Networking",
        "Procivis One Core",
        "SpruceID",
        "Trential",
        "Trinsic",
        "bovine"
      ],
      "rows": [
        {
          "id": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MAY contain a cryptosuite identifier (cryptosuite).",
          "link": "https://w3c.github.io/vc-di-eddsa/#proof-serialization-eddsa-rdfc-2022",
          "cells": [
            {
              "type": "test",
              "title": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MAY contain a cryptosuite identifier (cryptosuite).",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#proof-serialization-eddsa-rdfc-2022';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.type,\n              'Expected a type identifier on the proof.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "zplmZ_gmq3MZVKJ8jcTrg",
              "ctx": null,
              "_testId": "urn:uuid:b4e0d6b6-4e2b-4226-8047-41d2bc2ae7f0",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MAY contain a cryptosuite identifier (cryptosuite)."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#proof-serialization-eddsa-rdfc-2022",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 126548,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MAY contain a cryptosuite identifier (cryptosuite).",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#proof-serialization-eddsa-rdfc-2022';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.type,\n              'Expected a type identifier on the proof.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "5WZnVaWb0L27x9w30G-i4",
              "ctx": null,
              "_testId": "urn:uuid:665d587d-61e3-4364-a5ac-572b2e355c58",
              "cell": {
                "columnId": "Aviary Tech",
                "rowId": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MAY contain a cryptosuite identifier (cryptosuite)."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#proof-serialization-eddsa-rdfc-2022",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 126604,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MAY contain a cryptosuite identifier (cryptosuite).",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#proof-serialization-eddsa-rdfc-2022';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.type,\n              'Expected a type identifier on the proof.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "y4_6WU-5poQ4HmnoVTlR4",
              "ctx": null,
              "_testId": "urn:uuid:a6bc7211-53a0-4d31-bc31-086e41e58993",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MAY contain a cryptosuite identifier (cryptosuite)."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#proof-serialization-eddsa-rdfc-2022",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 126740,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MAY contain a cryptosuite identifier (cryptosuite).",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#proof-serialization-eddsa-rdfc-2022';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.type,\n              'Expected a type identifier on the proof.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "nc3mOhpKn9h2IbBIVntDS",
              "ctx": null,
              "_testId": "urn:uuid:ee22989f-7793-46fc-b7f9-835ffd61cf8c",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MAY contain a cryptosuite identifier (cryptosuite)."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#proof-serialization-eddsa-rdfc-2022",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 126765,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MAY contain a cryptosuite identifier (cryptosuite).",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#proof-serialization-eddsa-rdfc-2022';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.type,\n              'Expected a type identifier on the proof.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "5IXvtRTO4OdWRTgAyx5qb",
              "ctx": null,
              "_testId": "urn:uuid:bc7e135b-1173-4377-ad15-763e3860730c",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MAY contain a cryptosuite identifier (cryptosuite)."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#proof-serialization-eddsa-rdfc-2022",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 126995,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MAY contain a cryptosuite identifier (cryptosuite).",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#proof-serialization-eddsa-rdfc-2022';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.type,\n              'Expected a type identifier on the proof.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "Y4V1YnsXAjbkO9QiBPpmy",
              "ctx": null,
              "_testId": "urn:uuid:83e77656-ee22-468a-a050-161466f7d745",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MAY contain a cryptosuite identifier (cryptosuite)."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#proof-serialization-eddsa-rdfc-2022",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 127103,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MAY contain a cryptosuite identifier (cryptosuite).",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#proof-serialization-eddsa-rdfc-2022';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.type,\n              'Expected a type identifier on the proof.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "6e_bmWHMtOYY1-DcrsM7I",
              "ctx": null,
              "_testId": "urn:uuid:308e364f-aaa6-46c2-a12a-7eda6520a3c8",
              "cell": {
                "columnId": "Trential",
                "rowId": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MAY contain a cryptosuite identifier (cryptosuite)."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#proof-serialization-eddsa-rdfc-2022",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 127349,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MAY contain a cryptosuite identifier (cryptosuite).",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#proof-serialization-eddsa-rdfc-2022';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.type,\n              'Expected a type identifier on the proof.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "6PyuiY6uFt0biOiLOhqdf",
              "ctx": null,
              "_testId": "urn:uuid:feff0540-ef09-4649-91a6-3ab845e6c6ca",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MAY contain a cryptosuite identifier (cryptosuite)."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#proof-serialization-eddsa-rdfc-2022",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 127458,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected issuer to have issued a credential.: expected undefined to exist",
                "showDiff": false,
                "stack": "AssertionError: Expected issuer to have issued a credential.: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at assertBefore (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/suites/algorithms.js:416:18)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/suites/algorithms.js:429:11)\n    at process.processImmediate (node:internal/timers:483:21)"
              }
            },
            {
              "type": "test",
              "title": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MAY contain a cryptosuite identifier (cryptosuite).",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-di-eddsa/#proof-serialization-eddsa-rdfc-2022';\n          assertBefore();\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.type,\n              'Expected a type identifier on the proof.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/80-algorithms.js",
              "parent": "skwh9W2BjgnwhY66ZWEy_",
              "ctx": null,
              "_testId": "urn:uuid:6e1a2ff9-3d3d-4213-8c6a-63912f5fed5f",
              "cell": {
                "columnId": "bovine",
                "rowId": "The proof options MUST contain a type identifier for the cryptographic suite (type) and MAY contain a cryptosuite identifier (cryptosuite)."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-di-eddsa/#proof-serialization-eddsa-rdfc-2022",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 127608,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        }
      ]
    }
  ],
  "tables": [],
  "summary": [],
  "respecConfig": {
    "group": "vc",
    "specStatus": "base",
    "shortName": "vc-di-eddsa-test-suite",
    "subtitle": "Interoperability test suite for EdDSA Data Integrity cryptosuites.",
    "github": "https://github.com/w3c/vc-di-eddsa-test-suite",
    "edDraftURI": "https://w3c.github.io/vc-di-eddsa-test-suite",
    "doJsonLd": true,
    "includePermalinks": false,
    "authors": [
      {
        "name": "Andrew Jones",
        "url": "https://github.com/aljones15",
        "company": "Digital Bazaar, Inc.",
        "companyURL": "https://digitalbazaar.com/"
      },
      {
        "name": "Tashi D. Gyeltshen",
        "url": "https://github.com/jsAssassin",
        "company": "Digital Bazaar, Inc.",
        "companyURL": "https://digitalbazaar.com/"
      }
    ]
  },
  "title": "Data Integrity eddsa 2022 Interoperability Report 1.0",
  "stats": [],
  "statusMarkLabels": {
    "pending": {
      "icon": "🚫",
      "label": "Pending"
    },
    "passed": {
      "icon": "✓",
      "label": "Passed"
    },
    "failed": {
      "icon": "❌",
      "label": "Failed"
    },
    "accessDenied": {
      "icon": "⊘",
      "label": "Access Denied"
    },
    "timeout": {
      "icon": "⏱",
      "label": "Timeout"
    },
    "notImplemented": {
      "icon": "—",
      "label": "Not Implemented"
    }
  }
}