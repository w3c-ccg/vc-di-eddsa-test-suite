{
  "matrices": [
    {
      "title": "Data Integrity (eddsa-rdfc-2022 issuers)",
      "ctx": null,
      "suites": [
        {
          "title": "ACA-py",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "When expressing a data integrity proof on an object, a proof property MUST be used.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=When%20expressing%20a%20data%20integrity%20proof%20on%20an%20object%2C%20a%20proof%20property%20MUST%20be%20used';\n      shouldHaveProof({vc: data});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "2lNhAvxr1qvjpVDO-W-F6",
              "ctx": null
            },
            {
              "type": "test",
              "title": "If present (proof), its value MUST be either a single object, or an unordered set of objects.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=If%20present%2C%20its%20value%20MUST%20be%20either%20a%20single%20object%2C%20or%20an%20unordered%20set%20of%20objects';\n      shouldHaveProof({vc: data});\n      const {proof} = data;\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "2lNhAvxr1qvjpVDO-W-F6",
              "ctx": null
            },
            {
              "type": "test",
              "title": "(\"proof.id\") An optional identifier for the proof, which MUST be a URL.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=An%20optional%20identifier%20for%20the%20proof%2C%20which%20MUST%20be%20a%20URL';\n      for(const proof of proofs) {\n        if(proof.id) {\n          shouldBeUrl({url: proof.id, prop: 'proof.id'});\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "2lNhAvxr1qvjpVDO-W-F6",
              "ctx": null
            },
            {
              "type": "test",
              "title": "The specific type of proof MUST be specified as a string that maps to a URL.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=The%20specific%20type%20of%20proof%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL';\n      const prop = '@type';\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n        const expanded = await jsonld.expand({\n          '@context': data['@context'],\n          type: proof.type\n        }, {documentLoader});\n        for(const term of expanded) {\n          const types = term[prop];\n          should.exist(types, 'Expected @type to exist.');\n          types.every(url => shouldBeUrl({url, prop}));\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "2lNhAvxr1qvjpVDO-W-F6",
              "ctx": null
            },
            {
              "type": "test",
              "title": "The type property MUST contain the string DataIntegrityProof.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-data-integrity/#contexts-and-vocabularies:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.';\n          for(const proof of proofs) {\n            proof.should.have.property('type');\n            proof.type.should.be.a(\n              'string',\n              'Expected \"proof.type\" to be a string.'\n            );\n            const hasExpectedType = expectedProofTypes.includes(proof.type);\n            hasExpectedType.should.equal(\n              true,\n              `Expected \"proof.type\" to be one of ` +\n              `${expectedProofTypes} Received: ${proof.type}`);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "2lNhAvxr1qvjpVDO-W-F6",
              "ctx": null
            },
            {
              "type": "test",
              "title": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
              "body": "function() {\n          this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.';\n          for(const proof of proofs) {\n            should.exist(proof, 'Expected proof to exist.');\n            if(proof.type === 'DataIntegrityProof') {\n              should.exist(proof.cryptosuite,\n                'Expected proof to have property \"cryptosuite\".');\n            }\n            const {\n              prefix: expectedPrefix,\n              name: encodingName\n            } = expectedMultibasePrefix(proof.cryptosuite);\n            shouldHaveProofValue({proof, expectedPrefix, encodingName});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "2lNhAvxr1qvjpVDO-W-F6",
              "ctx": null
            },
            {
              "type": "test",
              "title": "If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.';\n      for(const proof of proofs) {\n        if(proof.type && proof.type === 'DataIntegrityProof') {\n          should.exist(\n            proof.cryptosuite,\n            'If the proof type is DataIntegrityProof, cryptosuite MUST ' +\n            'be specified');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "2lNhAvxr1qvjpVDO-W-F6",
              "ctx": null
            },
            {
              "type": "test",
              "title": "If specified (proof.cryptosuite), its value MUST be a string.",
              "body": "function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.';\n        for(const proof of proofs) {\n          if(proof.cryptosuite) {\n            proof.cryptosuite.should.be.a(\n              'string',\n              'cryptosuite value MUST be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "2lNhAvxr1qvjpVDO-W-F6",
              "ctx": null
            },
            {
              "type": "test",
              "title": "A verification method is the means and information needed to verify the proof. If included, the value MUST be a string that maps to a [URL].",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=A%20verification%20method%20is%20the%20means%20and%20information%20needed%20to%20verify%20the%20proof.%20If%20included%2C%20the%20value%20MUST%20be%20a%20string%20that%20maps%20to%20a%20%5BURL%5D.';\n      for(const proof of proofs) {\n        if(!data || !data?.['@context']) {\n          throw new Error(`Expected ${vendorName} to issue a VC.`);\n        }\n        await shouldMapToUrl({\n          doc: {\n            '@context': data['@context'],\n            ...proof\n          },\n          term: 'https://w3id.org/security#verificationMethod',\n          prop: '@id',\n          documentLoader\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "2lNhAvxr1qvjpVDO-W-F6",
              "ctx": null
            },
            {
              "type": "test",
              "title": "The reason the proof was created (\"proof.proofPurpose\") MUST be specified as a string that maps to a URL.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20reason%20the%20proof%20was%20created%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL';\n      for(const proof of proofs) {\n        proof.should.have.property('proofPurpose');\n        proof.proofPurpose.should.be.a('string');\n        await shouldMapToUrl({\n          doc: {\n            '@context': data['@context'],\n            ...proof\n          },\n          term: 'https://w3id.org/security#proofPurpose',\n          prop: '@id',\n          documentLoader\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "2lNhAvxr1qvjpVDO-W-F6",
              "ctx": null
            },
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that expresses base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The value MUST use a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification to express the binary data.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=A%20string%20value%20that%20expresses%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof%20using%20the%20verificationMethod%20specified.%20The%20value%20MUST%20use%20a%20header%20and%20encoding%20as%20described%20in%20Section%202.4%20Multibase%20of%20the%20Controller%20Documents%201.0%20specification%20to%20express%20the%20binary%20data.';\n      for(const proof of proofs) {\n        should.exist(proof, 'Expected proof to exist.');\n        //FIXME the suite should pass in the expectedPrefix and\n        //encodingName or type\n        const {\n          prefix: expectedPrefix,\n          name: encodingName\n        } = expectedMultibasePrefix(proof.cryptosuite);\n        shouldHaveProofValue({proof, expectedPrefix, encodingName});\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "2lNhAvxr1qvjpVDO-W-F6",
              "ctx": null
            },
            {
              "type": "test",
              "title": "Cryptographic suite designers MUST use mandatory proof value properties defined in Section 2.1 Proofs, and MAY define other properties specific to their cryptographic suite.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#add-proof:~:text=MUST%20use%20mandatory%20proof%20value%20properties%20defined';\n      for(const proof of proofs) {\n        shouldBeProof({proof});\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "2lNhAvxr1qvjpVDO-W-F6",
              "ctx": null
            },
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      const undefinedType = structuredClone(credential);\n      undefinedType.type.push('InvalidType');\n      await shouldFailIssuance({\n        credential: undefinedType,\n        issuer,\n        reason: 'Expected issuer to error when VC has an undefined type.'\n      });\n      const undefinedTerm = structuredClone(credential);\n      undefinedTerm.credentialSubject.invalidTerm = 'invalidTerm';\n      await shouldFailIssuance({\n        credential: undefinedTerm,\n        issuer,\n        reason: 'Expected issuer to error when VC has an undefined term.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "2lNhAvxr1qvjpVDO-W-F6",
              "ctx": null
            },
            {
              "type": "test",
              "title": "If the algorithm produces an error, the error MUST be propagated and SHOULD convey the error type.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#dfn-input-document:~:text=If%20the%20algorithm%20produces%20an%20error%2C%20the%20error%20MUST%20be%20propagated%20and%20SHOULD%20convey%20the%20error%20type';\n      const noSubject = structuredClone(credential);\n      delete noSubject.credentialSubject;\n      // FIXME this test should look for a propagated error such as\n      // PROOF_GENERATION_ERROR\n      await shouldFailIssuance({\n        credential: noSubject,\n        issuer,\n        reason: 'Expected issuer to error when VC has no credentialSubject.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "2lNhAvxr1qvjpVDO-W-F6",
              "ctx": null
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n        const hasCryptosuiteName = proofs.some(\n          p => p?.cryptosuite === cryptosuiteName);\n        hasCryptosuiteName.should.equal(\n          true,\n          `Expected at least one proof with cryptosuite ${cryptosuiteName}`);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "2lNhAvxr1qvjpVDO-W-F6",
              "ctx": null
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n        const cryptoProp = 'https://w3id.org/security#cryptosuite';\n        const cryptoType = 'https://w3id.org/security#cryptosuiteString';\n        for(const {cryptosuite, type} of proofs) {\n          should.exist(cryptosuite,\n            'Expected property \"proof.cryptosuite\" to exist.');\n          should.exist(type,\n            'Expected property \"proof.type\" to exist.');\n          should.exist(data['@context'],\n            'Expected VC to have property \"@context\".');\n          const expanded = await jsonld.expand({\n            '@context': data['@context'],\n            cryptosuite,\n            type\n          }, {documentLoader});\n          for(const terms of expanded) {\n            const cryptoProperties = terms[cryptoProp];\n            should.exist(cryptoProperties,\n              `Expected property ${cryptoProp} to exist.`);\n            const hasTypeName = cryptoProperties.some(suite =>\n              suite['@type'] === cryptoType &&\n              suite['@value'] == cryptosuiteName);\n            hasTypeName.should.equal(true,\n              `Expected ${cryptoProp} with @value ${cryptosuiteName} & ` +\n              `@type ${cryptoType}`);\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "2lNhAvxr1qvjpVDO-W-F6",
              "ctx": null
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook",
              "body": "function() {\n      this.currentTest.cell = {\n        columnId,\n        rowId: this.currentTest.title\n      };\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "2lNhAvxr1qvjpVDO-W-F6",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js"
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook for \"When expressing a data integrity proof on an object, a proof property MUST be used.\"",
              "body": "async function() {\n      if(!issuer) {\n        throw new Error(`Expected ${vendorName} to have an issuer.`);\n      }\n      if(!credential) {\n        throw new Error(`Expected a credential to be passed in ` +\n          `received ${credential}`);\n      }\n      data = await createInitialVc({issuer, credential});\n      proofs = Array.isArray(data.proof) ? data.proof : [data.proof];\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "2lNhAvxr1qvjpVDO-W-F6",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 542,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 225,
              "_error": null,
              "state": "failed",
              "err": {
                "response": {},
                "request": {},
                "options": {
                  "headers": {},
                  "body": "{\"credential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\"],\"id\":\"urn:uuid:49a39b58-987a-471b-b2a4-653e4887c546\",\"type\":[\"VerifiableCredential\"],\"issuer\":\"did:key:z6MkmiYjSToh5NdEf9xNuh5mDGXGYinzcAy1s4feRHtkEQJr\",\"issuanceDate\":\"2020-03-16T22:37:26.544Z\",\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\"}},\"options\":{\"type\":\"DataIntegrityProof\",\"cryptosuite\":\"eddsa-rdfc-2022\"}}",
                  "method": "POST",
                  "json": {
                    "credential": {
                      "@context": [
                        "https://www.w3.org/2018/credentials/v1"
                      ],
                      "id": "urn:uuid:49a39b58-987a-471b-b2a4-653e4887c546",
                      "type": [
                        "VerifiableCredential"
                      ],
                      "issuer": "did:key:z6MkmiYjSToh5NdEf9xNuh5mDGXGYinzcAy1s4feRHtkEQJr",
                      "issuanceDate": "2020-03-16T22:37:26.544Z",
                      "credentialSubject": {
                        "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                      }
                    },
                    "options": {
                      "type": "DataIntegrityProof",
                      "cryptosuite": "eddsa-rdfc-2022"
                    }
                  },
                  "agent": {
                    "_events": {},
                    "_eventsCount": 2,
                    "defaultPort": 443,
                    "protocol": "https:",
                    "options": {
                      "rejectUnauthorized": false,
                      "noDelay": true,
                      "path": null
                    },
                    "requests": {},
                    "sockets": {},
                    "freeSockets": {},
                    "keepAliveMsecs": 1000,
                    "keepAlive": false,
                    "maxSockets": null,
                    "maxFreeSockets": 256,
                    "scheduling": "lifo",
                    "maxTotalSockets": null,
                    "totalSocketCount": 0,
                    "maxCachedSessions": 100,
                    "_sessionCache": {
                      "map": {},
                      "list": []
                    }
                  },
                  "hooks": {
                    "beforeRequest": [],
                    "beforeRetry": [],
                    "afterResponse": [],
                    "beforeError": []
                  },
                  "prefixUrl": "",
                  "retry": {
                    "limit": 2,
                    "methods": [
                      "get",
                      "put",
                      "head",
                      "delete",
                      "options",
                      "trace"
                    ],
                    "statusCodes": [
                      408,
                      413,
                      429,
                      500,
                      502,
                      503,
                      504
                    ],
                    "afterStatusCodes": [
                      413,
                      429,
                      503
                    ],
                    "maxRetryAfter": null,
                    "backoffLimit": null
                  },
                  "throwHttpErrors": true,
                  "timeout": 10000,
                  "signal": {},
                  "duplex": "half"
                },
                "name": "HTTPError",
                "requestUrl": "https://aca-py.test-suite.app/vc/credentials/issue",
                "status": 400,
                "data": {
                  "message": "DID not found: did:key:z6MkmiYjSToh5NdEf9xNuh5mDGXGYinzcAy1s4feRHtkEQJr"
                }
              }
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "fytQRyOshIvqz-uXdsjFp",
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
          "_testId": "urn:uuid:21c1235e-226a-41bb-994d-9b93b6fc0e03"
        },
        {
          "title": "apicatalog.com",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "When expressing a data integrity proof on an object, a proof property MUST be used.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=When%20expressing%20a%20data%20integrity%20proof%20on%20an%20object%2C%20a%20proof%20property%20MUST%20be%20used';\n      shouldHaveProof({vc: data});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "klQuj3iUSICZwUS6dWrwn",
              "ctx": null,
              "_testId": "urn:uuid:43d89f74-4eb7-4847-a62e-a96ff10152ca",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "When expressing a data integrity proof on an object, a proof property MUST be used."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=When%20expressing%20a%20data%20integrity%20proof%20on%20an%20object%2C%20a%20proof%20property%20MUST%20be%20used",
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If present (proof), its value MUST be either a single object, or an unordered set of objects.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=If%20present%2C%20its%20value%20MUST%20be%20either%20a%20single%20object%2C%20or%20an%20unordered%20set%20of%20objects';\n      shouldHaveProof({vc: data});\n      const {proof} = data;\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "klQuj3iUSICZwUS6dWrwn",
              "ctx": null,
              "_testId": "urn:uuid:94aba806-d570-4982-9fc3-b42f4859c6a1",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If present (proof), its value MUST be either a single object, or an unordered set of objects."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=If%20present%2C%20its%20value%20MUST%20be%20either%20a%20single%20object%2C%20or%20an%20unordered%20set%20of%20objects",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.id\") An optional identifier for the proof, which MUST be a URL.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=An%20optional%20identifier%20for%20the%20proof%2C%20which%20MUST%20be%20a%20URL';\n      for(const proof of proofs) {\n        if(proof.id) {\n          shouldBeUrl({url: proof.id, prop: 'proof.id'});\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "klQuj3iUSICZwUS6dWrwn",
              "ctx": null,
              "_testId": "urn:uuid:64a08c75-524a-4658-ad61-d46acf3daa0a",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "(\"proof.id\") An optional identifier for the proof, which MUST be a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=An%20optional%20identifier%20for%20the%20proof%2C%20which%20MUST%20be%20a%20URL",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The specific type of proof MUST be specified as a string that maps to a URL.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=The%20specific%20type%20of%20proof%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL';\n      const prop = '@type';\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n        const expanded = await jsonld.expand({\n          '@context': data['@context'],\n          type: proof.type\n        }, {documentLoader});\n        for(const term of expanded) {\n          const types = term[prop];\n          should.exist(types, 'Expected @type to exist.');\n          types.every(url => shouldBeUrl({url, prop}));\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "klQuj3iUSICZwUS6dWrwn",
              "ctx": null,
              "_testId": "urn:uuid:e25aeb0e-7d18-40fd-b270-27f7d434e788",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "The specific type of proof MUST be specified as a string that maps to a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=The%20specific%20type%20of%20proof%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1123,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 10,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The type property MUST contain the string DataIntegrityProof.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-data-integrity/#contexts-and-vocabularies:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.';\n          for(const proof of proofs) {\n            proof.should.have.property('type');\n            proof.type.should.be.a(\n              'string',\n              'Expected \"proof.type\" to be a string.'\n            );\n            const hasExpectedType = expectedProofTypes.includes(proof.type);\n            hasExpectedType.should.equal(\n              true,\n              `Expected \"proof.type\" to be one of ` +\n              `${expectedProofTypes} Received: ${proof.type}`);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "klQuj3iUSICZwUS6dWrwn",
              "ctx": null,
              "_testId": "urn:uuid:add735c5-061a-495e-9919-b77991e85a63",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "The type property MUST contain the string DataIntegrityProof."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#contexts-and-vocabularies:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1131,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
              "body": "function() {\n          this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.';\n          for(const proof of proofs) {\n            should.exist(proof, 'Expected proof to exist.');\n            if(proof.type === 'DataIntegrityProof') {\n              should.exist(proof.cryptosuite,\n                'Expected proof to have property \"cryptosuite\".');\n            }\n            const {\n              prefix: expectedPrefix,\n              name: encodingName\n            } = expectedMultibasePrefix(proof.cryptosuite);\n            shouldHaveProofValue({proof, expectedPrefix, encodingName});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "klQuj3iUSICZwUS6dWrwn",
              "ctx": null,
              "_testId": "urn:uuid:42722cc0-f9a2-41ed-87d8-df629a08134c",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "The proofValue property MUST be used, as specified in 2.1 Proofs."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.';\n      for(const proof of proofs) {\n        if(proof.type && proof.type === 'DataIntegrityProof') {\n          should.exist(\n            proof.cryptosuite,\n            'If the proof type is DataIntegrityProof, cryptosuite MUST ' +\n            'be specified');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "klQuj3iUSICZwUS6dWrwn",
              "ctx": null,
              "_testId": "urn:uuid:b93c0e70-d16b-4e29-9769-76926e299f1e",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If specified (proof.cryptosuite), its value MUST be a string.",
              "body": "function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.';\n        for(const proof of proofs) {\n          if(proof.cryptosuite) {\n            proof.cryptosuite.should.be.a(\n              'string',\n              'cryptosuite value MUST be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "klQuj3iUSICZwUS6dWrwn",
              "ctx": null,
              "_testId": "urn:uuid:29484244-f821-409c-9246-2108c42efc56",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If specified (proof.cryptosuite), its value MUST be a string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "A verification method is the means and information needed to verify the proof. If included, the value MUST be a string that maps to a [URL].",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=A%20verification%20method%20is%20the%20means%20and%20information%20needed%20to%20verify%20the%20proof.%20If%20included%2C%20the%20value%20MUST%20be%20a%20string%20that%20maps%20to%20a%20%5BURL%5D.';\n      for(const proof of proofs) {\n        if(!data || !data?.['@context']) {\n          throw new Error(`Expected ${vendorName} to issue a VC.`);\n        }\n        await shouldMapToUrl({\n          doc: {\n            '@context': data['@context'],\n            ...proof\n          },\n          term: 'https://w3id.org/security#verificationMethod',\n          prop: '@id',\n          documentLoader\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "klQuj3iUSICZwUS6dWrwn",
              "ctx": null,
              "_testId": "urn:uuid:825b4bd5-d00d-4da4-a01f-3526a4d99bb5",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "A verification method is the means and information needed to verify the proof. If included, the value MUST be a string that maps to a [URL]."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=A%20verification%20method%20is%20the%20means%20and%20information%20needed%20to%20verify%20the%20proof.%20If%20included%2C%20the%20value%20MUST%20be%20a%20string%20that%20maps%20to%20a%20%5BURL%5D.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1133,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 2,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The reason the proof was created (\"proof.proofPurpose\") MUST be specified as a string that maps to a URL.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20reason%20the%20proof%20was%20created%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL';\n      for(const proof of proofs) {\n        proof.should.have.property('proofPurpose');\n        proof.proofPurpose.should.be.a('string');\n        await shouldMapToUrl({\n          doc: {\n            '@context': data['@context'],\n            ...proof\n          },\n          term: 'https://w3id.org/security#proofPurpose',\n          prop: '@id',\n          documentLoader\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "klQuj3iUSICZwUS6dWrwn",
              "ctx": null,
              "_testId": "urn:uuid:996dfb7a-1102-4122-92f3-8085ccc40f55",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "The reason the proof was created (\"proof.proofPurpose\") MUST be specified as a string that maps to a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20reason%20the%20proof%20was%20created%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1135,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that expresses base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The value MUST use a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification to express the binary data.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=A%20string%20value%20that%20expresses%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof%20using%20the%20verificationMethod%20specified.%20The%20value%20MUST%20use%20a%20header%20and%20encoding%20as%20described%20in%20Section%202.4%20Multibase%20of%20the%20Controller%20Documents%201.0%20specification%20to%20express%20the%20binary%20data.';\n      for(const proof of proofs) {\n        should.exist(proof, 'Expected proof to exist.');\n        //FIXME the suite should pass in the expectedPrefix and\n        //encodingName or type\n        const {\n          prefix: expectedPrefix,\n          name: encodingName\n        } = expectedMultibasePrefix(proof.cryptosuite);\n        shouldHaveProofValue({proof, expectedPrefix, encodingName});\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "klQuj3iUSICZwUS6dWrwn",
              "ctx": null,
              "_testId": "urn:uuid:a49d3a8c-c284-47ea-bc65-9add89e33938",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "(\"proof.proofValue\") A string value that expresses base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The value MUST use a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification to express the binary data."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=A%20string%20value%20that%20expresses%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof%20using%20the%20verificationMethod%20specified.%20The%20value%20MUST%20use%20a%20header%20and%20encoding%20as%20described%20in%20Section%202.4%20Multibase%20of%20the%20Controller%20Documents%201.0%20specification%20to%20express%20the%20binary%20data.",
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Cryptographic suite designers MUST use mandatory proof value properties defined in Section 2.1 Proofs, and MAY define other properties specific to their cryptographic suite.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#add-proof:~:text=MUST%20use%20mandatory%20proof%20value%20properties%20defined';\n      for(const proof of proofs) {\n        shouldBeProof({proof});\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "klQuj3iUSICZwUS6dWrwn",
              "ctx": null,
              "_testId": "urn:uuid:567bf667-dd23-407f-ab21-81d898088083",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "Cryptographic suite designers MUST use mandatory proof value properties defined in Section 2.1 Proofs, and MAY define other properties specific to their cryptographic suite."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#add-proof:~:text=MUST%20use%20mandatory%20proof%20value%20properties%20defined",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1137,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      const undefinedType = structuredClone(credential);\n      undefinedType.type.push('InvalidType');\n      await shouldFailIssuance({\n        credential: undefinedType,\n        issuer,\n        reason: 'Expected issuer to error when VC has an undefined type.'\n      });\n      const undefinedTerm = structuredClone(credential);\n      undefinedTerm.credentialSubject.invalidTerm = 'invalidTerm';\n      await shouldFailIssuance({\n        credential: undefinedTerm,\n        issuer,\n        reason: 'Expected issuer to error when VC has an undefined term.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "klQuj3iUSICZwUS6dWrwn",
              "ctx": null,
              "_testId": "urn:uuid:51fcd361-6d57-4c71-ba96-7a82eff0a54e",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1137,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 158,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected issuer to error when VC has an undefined type.: expected Response { status: 201, statusText: 'Created', headers: Headers { 'content-type': 'application/ld+json', 'x-cloud-trace-context': 'bb168fa08409dde4695a855da1841112', date: 'Sun, 13 Oct 2024 05:06:24 GMT', server: 'Google Frontend', 'content-length': '804', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected issuer to error when VC has an undefined type.: expected Response { status: 201, statusText: 'Created', headers: Headers { 'content-type': 'application/ld+json', 'x-cloud-trace-context': 'bb168fa08409dde4695a855da1841112', date: 'Sun, 13 Oct 2024 05:06:24 GMT', server: 'Google Frontend', 'content-length': '804', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at shouldFailIssuance (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:104:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/suites/create.js:235:7)"
              }
            },
            {
              "type": "test",
              "title": "If the algorithm produces an error, the error MUST be propagated and SHOULD convey the error type.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#dfn-input-document:~:text=If%20the%20algorithm%20produces%20an%20error%2C%20the%20error%20MUST%20be%20propagated%20and%20SHOULD%20convey%20the%20error%20type';\n      const noSubject = structuredClone(credential);\n      delete noSubject.credentialSubject;\n      // FIXME this test should look for a propagated error such as\n      // PROOF_GENERATION_ERROR\n      await shouldFailIssuance({\n        credential: noSubject,\n        issuer,\n        reason: 'Expected issuer to error when VC has no credentialSubject.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "klQuj3iUSICZwUS6dWrwn",
              "ctx": null,
              "_testId": "urn:uuid:8471cf1e-7e58-40ad-82be-6fb8ab06094e",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If the algorithm produces an error, the error MUST be propagated and SHOULD convey the error type."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#dfn-input-document:~:text=If%20the%20algorithm%20produces%20an%20error%2C%20the%20error%20MUST%20be%20propagated%20and%20SHOULD%20convey%20the%20error%20type",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1296,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 125,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n        const hasCryptosuiteName = proofs.some(\n          p => p?.cryptosuite === cryptosuiteName);\n        hasCryptosuiteName.should.equal(\n          true,\n          `Expected at least one proof with cryptosuite ${cryptosuiteName}`);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "klQuj3iUSICZwUS6dWrwn",
              "ctx": null,
              "_testId": "urn:uuid:62dd7525-cc3a-40ae-beca-b68c5b3b52cf",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1421,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n        const cryptoProp = 'https://w3id.org/security#cryptosuite';\n        const cryptoType = 'https://w3id.org/security#cryptosuiteString';\n        for(const {cryptosuite, type} of proofs) {\n          should.exist(cryptosuite,\n            'Expected property \"proof.cryptosuite\" to exist.');\n          should.exist(type,\n            'Expected property \"proof.type\" to exist.');\n          should.exist(data['@context'],\n            'Expected VC to have property \"@context\".');\n          const expanded = await jsonld.expand({\n            '@context': data['@context'],\n            cryptosuite,\n            type\n          }, {documentLoader});\n          for(const terms of expanded) {\n            const cryptoProperties = terms[cryptoProp];\n            should.exist(cryptoProperties,\n              `Expected property ${cryptoProp} to exist.`);\n            const hasTypeName = cryptoProperties.some(suite =>\n              suite['@type'] === cryptoType &&\n              suite['@value'] == cryptosuiteName);\n            hasTypeName.should.equal(true,\n              `Expected ${cryptoProp} with @value ${cryptosuiteName} & ` +\n              `@type ${cryptoType}`);\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "klQuj3iUSICZwUS6dWrwn",
              "ctx": null,
              "_testId": "urn:uuid:341dc882-aa61-4bf5-9145-eac615d9a46a",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1422,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"apicatalog.com\"",
              "body": "function() {\n      this.currentTest.cell = {\n        columnId,\n        rowId: this.currentTest.title\n      };\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "klQuj3iUSICZwUS6dWrwn",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"apicatalog.com\"",
              "body": "async function() {\n      if(!issuer) {\n        throw new Error(`Expected ${vendorName} to have an issuer.`);\n      }\n      if(!credential) {\n        throw new Error(`Expected a credential to be passed in ` +\n          `received ${credential}`);\n      }\n      data = await createInitialVc({issuer, credential});\n      proofs = Array.isArray(data.proof) ? data.proof : [data.proof];\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "klQuj3iUSICZwUS6dWrwn",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 771,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 347,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "fytQRyOshIvqz-uXdsjFp",
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
          "_testId": "urn:uuid:a2655823-1ac8-4abe-8216-bcf086431a2d"
        },
        {
          "title": "Digital Bazaar",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "When expressing a data integrity proof on an object, a proof property MUST be used.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=When%20expressing%20a%20data%20integrity%20proof%20on%20an%20object%2C%20a%20proof%20property%20MUST%20be%20used';\n      shouldHaveProof({vc: data});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "KC40bcABMd1Vn680ttbkx",
              "ctx": null,
              "_testId": "urn:uuid:60e4947b-d485-49a8-bafa-6e3b7ed021d5",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "When expressing a data integrity proof on an object, a proof property MUST be used."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=When%20expressing%20a%20data%20integrity%20proof%20on%20an%20object%2C%20a%20proof%20property%20MUST%20be%20used",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If present (proof), its value MUST be either a single object, or an unordered set of objects.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=If%20present%2C%20its%20value%20MUST%20be%20either%20a%20single%20object%2C%20or%20an%20unordered%20set%20of%20objects';\n      shouldHaveProof({vc: data});\n      const {proof} = data;\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "KC40bcABMd1Vn680ttbkx",
              "ctx": null,
              "_testId": "urn:uuid:9a6ee3ac-e8fe-48b8-b7ca-1dbc68e14f7c",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If present (proof), its value MUST be either a single object, or an unordered set of objects."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=If%20present%2C%20its%20value%20MUST%20be%20either%20a%20single%20object%2C%20or%20an%20unordered%20set%20of%20objects",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.id\") An optional identifier for the proof, which MUST be a URL.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=An%20optional%20identifier%20for%20the%20proof%2C%20which%20MUST%20be%20a%20URL';\n      for(const proof of proofs) {\n        if(proof.id) {\n          shouldBeUrl({url: proof.id, prop: 'proof.id'});\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "KC40bcABMd1Vn680ttbkx",
              "ctx": null,
              "_testId": "urn:uuid:4d478258-41ee-4e36-9d34-de5d950282ed",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "(\"proof.id\") An optional identifier for the proof, which MUST be a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=An%20optional%20identifier%20for%20the%20proof%2C%20which%20MUST%20be%20a%20URL",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The specific type of proof MUST be specified as a string that maps to a URL.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=The%20specific%20type%20of%20proof%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL';\n      const prop = '@type';\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n        const expanded = await jsonld.expand({\n          '@context': data['@context'],\n          type: proof.type\n        }, {documentLoader});\n        for(const term of expanded) {\n          const types = term[prop];\n          should.exist(types, 'Expected @type to exist.');\n          types.every(url => shouldBeUrl({url, prop}));\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "KC40bcABMd1Vn680ttbkx",
              "ctx": null,
              "_testId": "urn:uuid:77c10ede-e176-4542-8264-02b745055093",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The specific type of proof MUST be specified as a string that maps to a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=The%20specific%20type%20of%20proof%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1977,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The type property MUST contain the string DataIntegrityProof.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-data-integrity/#contexts-and-vocabularies:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.';\n          for(const proof of proofs) {\n            proof.should.have.property('type');\n            proof.type.should.be.a(\n              'string',\n              'Expected \"proof.type\" to be a string.'\n            );\n            const hasExpectedType = expectedProofTypes.includes(proof.type);\n            hasExpectedType.should.equal(\n              true,\n              `Expected \"proof.type\" to be one of ` +\n              `${expectedProofTypes} Received: ${proof.type}`);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "KC40bcABMd1Vn680ttbkx",
              "ctx": null,
              "_testId": "urn:uuid:2769c216-63de-4718-bb29-d4cdc8a43e7e",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The type property MUST contain the string DataIntegrityProof."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#contexts-and-vocabularies:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1978,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
              "body": "function() {\n          this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.';\n          for(const proof of proofs) {\n            should.exist(proof, 'Expected proof to exist.');\n            if(proof.type === 'DataIntegrityProof') {\n              should.exist(proof.cryptosuite,\n                'Expected proof to have property \"cryptosuite\".');\n            }\n            const {\n              prefix: expectedPrefix,\n              name: encodingName\n            } = expectedMultibasePrefix(proof.cryptosuite);\n            shouldHaveProofValue({proof, expectedPrefix, encodingName});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "KC40bcABMd1Vn680ttbkx",
              "ctx": null,
              "_testId": "urn:uuid:41d382a5-b66a-4763-a821-3fae7456cedb",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The proofValue property MUST be used, as specified in 2.1 Proofs."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.';\n      for(const proof of proofs) {\n        if(proof.type && proof.type === 'DataIntegrityProof') {\n          should.exist(\n            proof.cryptosuite,\n            'If the proof type is DataIntegrityProof, cryptosuite MUST ' +\n            'be specified');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "KC40bcABMd1Vn680ttbkx",
              "ctx": null,
              "_testId": "urn:uuid:ec6aadfe-14e9-4254-b394-186bc8431fcf",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If specified (proof.cryptosuite), its value MUST be a string.",
              "body": "function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.';\n        for(const proof of proofs) {\n          if(proof.cryptosuite) {\n            proof.cryptosuite.should.be.a(\n              'string',\n              'cryptosuite value MUST be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "KC40bcABMd1Vn680ttbkx",
              "ctx": null,
              "_testId": "urn:uuid:f3c312ed-d004-43fb-8ba9-7a41aa274adb",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If specified (proof.cryptosuite), its value MUST be a string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "A verification method is the means and information needed to verify the proof. If included, the value MUST be a string that maps to a [URL].",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=A%20verification%20method%20is%20the%20means%20and%20information%20needed%20to%20verify%20the%20proof.%20If%20included%2C%20the%20value%20MUST%20be%20a%20string%20that%20maps%20to%20a%20%5BURL%5D.';\n      for(const proof of proofs) {\n        if(!data || !data?.['@context']) {\n          throw new Error(`Expected ${vendorName} to issue a VC.`);\n        }\n        await shouldMapToUrl({\n          doc: {\n            '@context': data['@context'],\n            ...proof\n          },\n          term: 'https://w3id.org/security#verificationMethod',\n          prop: '@id',\n          documentLoader\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "KC40bcABMd1Vn680ttbkx",
              "ctx": null,
              "_testId": "urn:uuid:0c9df20a-a204-46fc-a72c-f713e9698cff",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "A verification method is the means and information needed to verify the proof. If included, the value MUST be a string that maps to a [URL]."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=A%20verification%20method%20is%20the%20means%20and%20information%20needed%20to%20verify%20the%20proof.%20If%20included%2C%20the%20value%20MUST%20be%20a%20string%20that%20maps%20to%20a%20%5BURL%5D.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1979,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The reason the proof was created (\"proof.proofPurpose\") MUST be specified as a string that maps to a URL.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20reason%20the%20proof%20was%20created%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL';\n      for(const proof of proofs) {\n        proof.should.have.property('proofPurpose');\n        proof.proofPurpose.should.be.a('string');\n        await shouldMapToUrl({\n          doc: {\n            '@context': data['@context'],\n            ...proof\n          },\n          term: 'https://w3id.org/security#proofPurpose',\n          prop: '@id',\n          documentLoader\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "KC40bcABMd1Vn680ttbkx",
              "ctx": null,
              "_testId": "urn:uuid:af22e85d-a0c4-47f4-a7a6-52f2273cf974",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The reason the proof was created (\"proof.proofPurpose\") MUST be specified as a string that maps to a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20reason%20the%20proof%20was%20created%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1980,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that expresses base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The value MUST use a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification to express the binary data.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=A%20string%20value%20that%20expresses%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof%20using%20the%20verificationMethod%20specified.%20The%20value%20MUST%20use%20a%20header%20and%20encoding%20as%20described%20in%20Section%202.4%20Multibase%20of%20the%20Controller%20Documents%201.0%20specification%20to%20express%20the%20binary%20data.';\n      for(const proof of proofs) {\n        should.exist(proof, 'Expected proof to exist.');\n        //FIXME the suite should pass in the expectedPrefix and\n        //encodingName or type\n        const {\n          prefix: expectedPrefix,\n          name: encodingName\n        } = expectedMultibasePrefix(proof.cryptosuite);\n        shouldHaveProofValue({proof, expectedPrefix, encodingName});\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "KC40bcABMd1Vn680ttbkx",
              "ctx": null,
              "_testId": "urn:uuid:d6e4f8c3-0085-48c7-912d-088e786c683d",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "(\"proof.proofValue\") A string value that expresses base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The value MUST use a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification to express the binary data."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=A%20string%20value%20that%20expresses%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof%20using%20the%20verificationMethod%20specified.%20The%20value%20MUST%20use%20a%20header%20and%20encoding%20as%20described%20in%20Section%202.4%20Multibase%20of%20the%20Controller%20Documents%201.0%20specification%20to%20express%20the%20binary%20data.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Cryptographic suite designers MUST use mandatory proof value properties defined in Section 2.1 Proofs, and MAY define other properties specific to their cryptographic suite.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#add-proof:~:text=MUST%20use%20mandatory%20proof%20value%20properties%20defined';\n      for(const proof of proofs) {\n        shouldBeProof({proof});\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "KC40bcABMd1Vn680ttbkx",
              "ctx": null,
              "_testId": "urn:uuid:973089c8-61f8-4a60-842a-0488d358e03c",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "Cryptographic suite designers MUST use mandatory proof value properties defined in Section 2.1 Proofs, and MAY define other properties specific to their cryptographic suite."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#add-proof:~:text=MUST%20use%20mandatory%20proof%20value%20properties%20defined",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1982,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      const undefinedType = structuredClone(credential);\n      undefinedType.type.push('InvalidType');\n      await shouldFailIssuance({\n        credential: undefinedType,\n        issuer,\n        reason: 'Expected issuer to error when VC has an undefined type.'\n      });\n      const undefinedTerm = structuredClone(credential);\n      undefinedTerm.credentialSubject.invalidTerm = 'invalidTerm';\n      await shouldFailIssuance({\n        credential: undefinedTerm,\n        issuer,\n        reason: 'Expected issuer to error when VC has an undefined term.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "KC40bcABMd1Vn680ttbkx",
              "ctx": null,
              "_testId": "urn:uuid:d4606fa4-7a7e-4da5-bec1-b1ceb593b184",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1982,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 237,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the algorithm produces an error, the error MUST be propagated and SHOULD convey the error type.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#dfn-input-document:~:text=If%20the%20algorithm%20produces%20an%20error%2C%20the%20error%20MUST%20be%20propagated%20and%20SHOULD%20convey%20the%20error%20type';\n      const noSubject = structuredClone(credential);\n      delete noSubject.credentialSubject;\n      // FIXME this test should look for a propagated error such as\n      // PROOF_GENERATION_ERROR\n      await shouldFailIssuance({\n        credential: noSubject,\n        issuer,\n        reason: 'Expected issuer to error when VC has no credentialSubject.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "KC40bcABMd1Vn680ttbkx",
              "ctx": null,
              "_testId": "urn:uuid:d786a4bf-e619-430d-a187-6c0689fc3d81",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the algorithm produces an error, the error MUST be propagated and SHOULD convey the error type."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#dfn-input-document:~:text=If%20the%20algorithm%20produces%20an%20error%2C%20the%20error%20MUST%20be%20propagated%20and%20SHOULD%20convey%20the%20error%20type",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2219,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 53,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n        const hasCryptosuiteName = proofs.some(\n          p => p?.cryptosuite === cryptosuiteName);\n        hasCryptosuiteName.should.equal(\n          true,\n          `Expected at least one proof with cryptosuite ${cryptosuiteName}`);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "KC40bcABMd1Vn680ttbkx",
              "ctx": null,
              "_testId": "urn:uuid:f6deeabb-667c-4fe1-942e-8abaa0c724a0",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2271,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n        const cryptoProp = 'https://w3id.org/security#cryptosuite';\n        const cryptoType = 'https://w3id.org/security#cryptosuiteString';\n        for(const {cryptosuite, type} of proofs) {\n          should.exist(cryptosuite,\n            'Expected property \"proof.cryptosuite\" to exist.');\n          should.exist(type,\n            'Expected property \"proof.type\" to exist.');\n          should.exist(data['@context'],\n            'Expected VC to have property \"@context\".');\n          const expanded = await jsonld.expand({\n            '@context': data['@context'],\n            cryptosuite,\n            type\n          }, {documentLoader});\n          for(const terms of expanded) {\n            const cryptoProperties = terms[cryptoProp];\n            should.exist(cryptoProperties,\n              `Expected property ${cryptoProp} to exist.`);\n            const hasTypeName = cryptoProperties.some(suite =>\n              suite['@type'] === cryptoType &&\n              suite['@value'] == cryptosuiteName);\n            hasTypeName.should.equal(true,\n              `Expected ${cryptoProp} with @value ${cryptosuiteName} & ` +\n              `@type ${cryptoType}`);\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "KC40bcABMd1Vn680ttbkx",
              "ctx": null,
              "_testId": "urn:uuid:1aff3b17-94e4-4082-885e-12dd5c0a21bd",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2272,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"Digital Bazaar\"",
              "body": "function() {\n      this.currentTest.cell = {\n        columnId,\n        rowId: this.currentTest.title\n      };\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "KC40bcABMd1Vn680ttbkx",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Digital Bazaar\"",
              "body": "async function() {\n      if(!issuer) {\n        throw new Error(`Expected ${vendorName} to have an issuer.`);\n      }\n      if(!credential) {\n        throw new Error(`Expected a credential to be passed in ` +\n          `received ${credential}`);\n      }\n      data = await createInitialVc({issuer, credential});\n      proofs = Array.isArray(data.proof) ? data.proof : [data.proof];\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "KC40bcABMd1Vn680ttbkx",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1423,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 553,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "fytQRyOshIvqz-uXdsjFp",
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
          "_testId": "urn:uuid:a0b30f75-6ba9-49ba-aca9-79e84d67bf21"
        },
        {
          "title": "Grotto Networking",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "When expressing a data integrity proof on an object, a proof property MUST be used.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=When%20expressing%20a%20data%20integrity%20proof%20on%20an%20object%2C%20a%20proof%20property%20MUST%20be%20used';\n      shouldHaveProof({vc: data});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "xOTyL_pngxXG6zAxtmZ9X",
              "ctx": null,
              "_testId": "urn:uuid:094ea808-f411-4020-a2bb-186f1b7435d7",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "When expressing a data integrity proof on an object, a proof property MUST be used."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=When%20expressing%20a%20data%20integrity%20proof%20on%20an%20object%2C%20a%20proof%20property%20MUST%20be%20used",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If present (proof), its value MUST be either a single object, or an unordered set of objects.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=If%20present%2C%20its%20value%20MUST%20be%20either%20a%20single%20object%2C%20or%20an%20unordered%20set%20of%20objects';\n      shouldHaveProof({vc: data});\n      const {proof} = data;\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "xOTyL_pngxXG6zAxtmZ9X",
              "ctx": null,
              "_testId": "urn:uuid:3051a3d9-0dd8-421c-9d26-9ce039c74a86",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If present (proof), its value MUST be either a single object, or an unordered set of objects."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=If%20present%2C%20its%20value%20MUST%20be%20either%20a%20single%20object%2C%20or%20an%20unordered%20set%20of%20objects",
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.id\") An optional identifier for the proof, which MUST be a URL.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=An%20optional%20identifier%20for%20the%20proof%2C%20which%20MUST%20be%20a%20URL';\n      for(const proof of proofs) {\n        if(proof.id) {\n          shouldBeUrl({url: proof.id, prop: 'proof.id'});\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "xOTyL_pngxXG6zAxtmZ9X",
              "ctx": null,
              "_testId": "urn:uuid:9e6cf4df-59b4-4e85-aba0-ec2664f0c82e",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "(\"proof.id\") An optional identifier for the proof, which MUST be a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=An%20optional%20identifier%20for%20the%20proof%2C%20which%20MUST%20be%20a%20URL",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The specific type of proof MUST be specified as a string that maps to a URL.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=The%20specific%20type%20of%20proof%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL';\n      const prop = '@type';\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n        const expanded = await jsonld.expand({\n          '@context': data['@context'],\n          type: proof.type\n        }, {documentLoader});\n        for(const term of expanded) {\n          const types = term[prop];\n          should.exist(types, 'Expected @type to exist.');\n          types.every(url => shouldBeUrl({url, prop}));\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "xOTyL_pngxXG6zAxtmZ9X",
              "ctx": null,
              "_testId": "urn:uuid:b6052309-cfe4-4aa7-8030-1ccce6213871",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The specific type of proof MUST be specified as a string that maps to a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=The%20specific%20type%20of%20proof%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2586,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The type property MUST contain the string DataIntegrityProof.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-data-integrity/#contexts-and-vocabularies:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.';\n          for(const proof of proofs) {\n            proof.should.have.property('type');\n            proof.type.should.be.a(\n              'string',\n              'Expected \"proof.type\" to be a string.'\n            );\n            const hasExpectedType = expectedProofTypes.includes(proof.type);\n            hasExpectedType.should.equal(\n              true,\n              `Expected \"proof.type\" to be one of ` +\n              `${expectedProofTypes} Received: ${proof.type}`);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "xOTyL_pngxXG6zAxtmZ9X",
              "ctx": null,
              "_testId": "urn:uuid:0d5d0071-d365-40b7-a64e-56dbf4710228",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The type property MUST contain the string DataIntegrityProof."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#contexts-and-vocabularies:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2586,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
              "body": "function() {\n          this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.';\n          for(const proof of proofs) {\n            should.exist(proof, 'Expected proof to exist.');\n            if(proof.type === 'DataIntegrityProof') {\n              should.exist(proof.cryptosuite,\n                'Expected proof to have property \"cryptosuite\".');\n            }\n            const {\n              prefix: expectedPrefix,\n              name: encodingName\n            } = expectedMultibasePrefix(proof.cryptosuite);\n            shouldHaveProofValue({proof, expectedPrefix, encodingName});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "xOTyL_pngxXG6zAxtmZ9X",
              "ctx": null,
              "_testId": "urn:uuid:cad03863-3038-40cb-b18a-b71f94cd8ca9",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The proofValue property MUST be used, as specified in 2.1 Proofs."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.';\n      for(const proof of proofs) {\n        if(proof.type && proof.type === 'DataIntegrityProof') {\n          should.exist(\n            proof.cryptosuite,\n            'If the proof type is DataIntegrityProof, cryptosuite MUST ' +\n            'be specified');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "xOTyL_pngxXG6zAxtmZ9X",
              "ctx": null,
              "_testId": "urn:uuid:366cdd70-1481-4820-88a9-037f89639bba",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If specified (proof.cryptosuite), its value MUST be a string.",
              "body": "function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.';\n        for(const proof of proofs) {\n          if(proof.cryptosuite) {\n            proof.cryptosuite.should.be.a(\n              'string',\n              'cryptosuite value MUST be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "xOTyL_pngxXG6zAxtmZ9X",
              "ctx": null,
              "_testId": "urn:uuid:c45ffb4f-20e9-4f90-abd0-3ea250cbae68",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If specified (proof.cryptosuite), its value MUST be a string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "A verification method is the means and information needed to verify the proof. If included, the value MUST be a string that maps to a [URL].",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=A%20verification%20method%20is%20the%20means%20and%20information%20needed%20to%20verify%20the%20proof.%20If%20included%2C%20the%20value%20MUST%20be%20a%20string%20that%20maps%20to%20a%20%5BURL%5D.';\n      for(const proof of proofs) {\n        if(!data || !data?.['@context']) {\n          throw new Error(`Expected ${vendorName} to issue a VC.`);\n        }\n        await shouldMapToUrl({\n          doc: {\n            '@context': data['@context'],\n            ...proof\n          },\n          term: 'https://w3id.org/security#verificationMethod',\n          prop: '@id',\n          documentLoader\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "xOTyL_pngxXG6zAxtmZ9X",
              "ctx": null,
              "_testId": "urn:uuid:3e378550-86a3-40ea-a79b-a7cdce7dbe1b",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "A verification method is the means and information needed to verify the proof. If included, the value MUST be a string that maps to a [URL]."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=A%20verification%20method%20is%20the%20means%20and%20information%20needed%20to%20verify%20the%20proof.%20If%20included%2C%20the%20value%20MUST%20be%20a%20string%20that%20maps%20to%20a%20%5BURL%5D.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2587,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The reason the proof was created (\"proof.proofPurpose\") MUST be specified as a string that maps to a URL.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20reason%20the%20proof%20was%20created%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL';\n      for(const proof of proofs) {\n        proof.should.have.property('proofPurpose');\n        proof.proofPurpose.should.be.a('string');\n        await shouldMapToUrl({\n          doc: {\n            '@context': data['@context'],\n            ...proof\n          },\n          term: 'https://w3id.org/security#proofPurpose',\n          prop: '@id',\n          documentLoader\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "xOTyL_pngxXG6zAxtmZ9X",
              "ctx": null,
              "_testId": "urn:uuid:794da263-90a0-4c20-a684-7057907602f4",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The reason the proof was created (\"proof.proofPurpose\") MUST be specified as a string that maps to a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20reason%20the%20proof%20was%20created%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2589,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that expresses base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The value MUST use a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification to express the binary data.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=A%20string%20value%20that%20expresses%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof%20using%20the%20verificationMethod%20specified.%20The%20value%20MUST%20use%20a%20header%20and%20encoding%20as%20described%20in%20Section%202.4%20Multibase%20of%20the%20Controller%20Documents%201.0%20specification%20to%20express%20the%20binary%20data.';\n      for(const proof of proofs) {\n        should.exist(proof, 'Expected proof to exist.');\n        //FIXME the suite should pass in the expectedPrefix and\n        //encodingName or type\n        const {\n          prefix: expectedPrefix,\n          name: encodingName\n        } = expectedMultibasePrefix(proof.cryptosuite);\n        shouldHaveProofValue({proof, expectedPrefix, encodingName});\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "xOTyL_pngxXG6zAxtmZ9X",
              "ctx": null,
              "_testId": "urn:uuid:7ec236e9-fe2d-46a1-9a99-5e0f03baaeb3",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "(\"proof.proofValue\") A string value that expresses base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The value MUST use a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification to express the binary data."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=A%20string%20value%20that%20expresses%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof%20using%20the%20verificationMethod%20specified.%20The%20value%20MUST%20use%20a%20header%20and%20encoding%20as%20described%20in%20Section%202.4%20Multibase%20of%20the%20Controller%20Documents%201.0%20specification%20to%20express%20the%20binary%20data.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Cryptographic suite designers MUST use mandatory proof value properties defined in Section 2.1 Proofs, and MAY define other properties specific to their cryptographic suite.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#add-proof:~:text=MUST%20use%20mandatory%20proof%20value%20properties%20defined';\n      for(const proof of proofs) {\n        shouldBeProof({proof});\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "xOTyL_pngxXG6zAxtmZ9X",
              "ctx": null,
              "_testId": "urn:uuid:092a64ff-b41b-4b61-b3d1-c147f4f60c99",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "Cryptographic suite designers MUST use mandatory proof value properties defined in Section 2.1 Proofs, and MAY define other properties specific to their cryptographic suite."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#add-proof:~:text=MUST%20use%20mandatory%20proof%20value%20properties%20defined",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2590,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      const undefinedType = structuredClone(credential);\n      undefinedType.type.push('InvalidType');\n      await shouldFailIssuance({\n        credential: undefinedType,\n        issuer,\n        reason: 'Expected issuer to error when VC has an undefined type.'\n      });\n      const undefinedTerm = structuredClone(credential);\n      undefinedTerm.credentialSubject.invalidTerm = 'invalidTerm';\n      await shouldFailIssuance({\n        credential: undefinedTerm,\n        issuer,\n        reason: 'Expected issuer to error when VC has an undefined term.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "xOTyL_pngxXG6zAxtmZ9X",
              "ctx": null,
              "_testId": "urn:uuid:47a01b70-f1f9-412f-bc5e-efbaa1d3d829",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2590,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 405,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the algorithm produces an error, the error MUST be propagated and SHOULD convey the error type.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#dfn-input-document:~:text=If%20the%20algorithm%20produces%20an%20error%2C%20the%20error%20MUST%20be%20propagated%20and%20SHOULD%20convey%20the%20error%20type';\n      const noSubject = structuredClone(credential);\n      delete noSubject.credentialSubject;\n      // FIXME this test should look for a propagated error such as\n      // PROOF_GENERATION_ERROR\n      await shouldFailIssuance({\n        credential: noSubject,\n        issuer,\n        reason: 'Expected issuer to error when VC has no credentialSubject.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "xOTyL_pngxXG6zAxtmZ9X",
              "ctx": null,
              "_testId": "urn:uuid:56daa200-27a1-40e9-9fd3-f65b1480e9f0",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If the algorithm produces an error, the error MUST be propagated and SHOULD convey the error type."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#dfn-input-document:~:text=If%20the%20algorithm%20produces%20an%20error%2C%20the%20error%20MUST%20be%20propagated%20and%20SHOULD%20convey%20the%20error%20type",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2995,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 73,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n        const hasCryptosuiteName = proofs.some(\n          p => p?.cryptosuite === cryptosuiteName);\n        hasCryptosuiteName.should.equal(\n          true,\n          `Expected at least one proof with cryptosuite ${cryptosuiteName}`);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "xOTyL_pngxXG6zAxtmZ9X",
              "ctx": null,
              "_testId": "urn:uuid:b64331fd-9fa1-41c8-a020-b693fdeccec8",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3068,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n        const cryptoProp = 'https://w3id.org/security#cryptosuite';\n        const cryptoType = 'https://w3id.org/security#cryptosuiteString';\n        for(const {cryptosuite, type} of proofs) {\n          should.exist(cryptosuite,\n            'Expected property \"proof.cryptosuite\" to exist.');\n          should.exist(type,\n            'Expected property \"proof.type\" to exist.');\n          should.exist(data['@context'],\n            'Expected VC to have property \"@context\".');\n          const expanded = await jsonld.expand({\n            '@context': data['@context'],\n            cryptosuite,\n            type\n          }, {documentLoader});\n          for(const terms of expanded) {\n            const cryptoProperties = terms[cryptoProp];\n            should.exist(cryptoProperties,\n              `Expected property ${cryptoProp} to exist.`);\n            const hasTypeName = cryptoProperties.some(suite =>\n              suite['@type'] === cryptoType &&\n              suite['@value'] == cryptosuiteName);\n            hasTypeName.should.equal(true,\n              `Expected ${cryptoProp} with @value ${cryptosuiteName} & ` +\n              `@type ${cryptoType}`);\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "xOTyL_pngxXG6zAxtmZ9X",
              "ctx": null,
              "_testId": "urn:uuid:c735e241-203f-46c7-9e83-bd5ce3145943",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3068,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"Grotto Networking\"",
              "body": "function() {\n      this.currentTest.cell = {\n        columnId,\n        rowId: this.currentTest.title\n      };\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "xOTyL_pngxXG6zAxtmZ9X",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Grotto Networking\"",
              "body": "async function() {\n      if(!issuer) {\n        throw new Error(`Expected ${vendorName} to have an issuer.`);\n      }\n      if(!credential) {\n        throw new Error(`Expected a credential to be passed in ` +\n          `received ${credential}`);\n      }\n      data = await createInitialVc({issuer, credential});\n      proofs = Array.isArray(data.proof) ? data.proof : [data.proof];\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "xOTyL_pngxXG6zAxtmZ9X",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2272,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 312,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "fytQRyOshIvqz-uXdsjFp",
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
          "_testId": "urn:uuid:ef4d8247-57d7-46e8-8bc0-146403699d2c"
        },
        {
          "title": "Procivis One Core",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "When expressing a data integrity proof on an object, a proof property MUST be used.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=When%20expressing%20a%20data%20integrity%20proof%20on%20an%20object%2C%20a%20proof%20property%20MUST%20be%20used';\n      shouldHaveProof({vc: data});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "sXugKi3EYzvQ4jDPv9Cum",
              "ctx": null,
              "_testId": "urn:uuid:a5582662-02d9-41df-8906-662a87686531",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "When expressing a data integrity proof on an object, a proof property MUST be used."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=When%20expressing%20a%20data%20integrity%20proof%20on%20an%20object%2C%20a%20proof%20property%20MUST%20be%20used",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If present (proof), its value MUST be either a single object, or an unordered set of objects.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=If%20present%2C%20its%20value%20MUST%20be%20either%20a%20single%20object%2C%20or%20an%20unordered%20set%20of%20objects';\n      shouldHaveProof({vc: data});\n      const {proof} = data;\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "sXugKi3EYzvQ4jDPv9Cum",
              "ctx": null,
              "_testId": "urn:uuid:6fa43f1d-066c-43a7-be25-26dd52611dd7",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "If present (proof), its value MUST be either a single object, or an unordered set of objects."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=If%20present%2C%20its%20value%20MUST%20be%20either%20a%20single%20object%2C%20or%20an%20unordered%20set%20of%20objects",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.id\") An optional identifier for the proof, which MUST be a URL.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=An%20optional%20identifier%20for%20the%20proof%2C%20which%20MUST%20be%20a%20URL';\n      for(const proof of proofs) {\n        if(proof.id) {\n          shouldBeUrl({url: proof.id, prop: 'proof.id'});\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "sXugKi3EYzvQ4jDPv9Cum",
              "ctx": null,
              "_testId": "urn:uuid:b1f5a547-4007-4dac-bef4-52a4c3b73638",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "(\"proof.id\") An optional identifier for the proof, which MUST be a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=An%20optional%20identifier%20for%20the%20proof%2C%20which%20MUST%20be%20a%20URL",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The specific type of proof MUST be specified as a string that maps to a URL.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=The%20specific%20type%20of%20proof%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL';\n      const prop = '@type';\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n        const expanded = await jsonld.expand({\n          '@context': data['@context'],\n          type: proof.type\n        }, {documentLoader});\n        for(const term of expanded) {\n          const types = term[prop];\n          should.exist(types, 'Expected @type to exist.');\n          types.every(url => shouldBeUrl({url, prop}));\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "sXugKi3EYzvQ4jDPv9Cum",
              "ctx": null,
              "_testId": "urn:uuid:503cba08-da39-492c-a365-6f535db6c27b",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "The specific type of proof MUST be specified as a string that maps to a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=The%20specific%20type%20of%20proof%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3821,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected \"@type\" URL to be parsed.: expected TypeError: Invalid URL { …(2) } to not exist",
                "showDiff": false,
                "actual": {
                  "code": "ERR_INVALID_URL",
                  "input": "DataIntegrityProof"
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected \"@type\" URL to be parsed.: expected TypeError: Invalid URL { …(2) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at shouldBeUrl (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:197:14)\n    at file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/suites/create.js:82:30\n    at Array.every (<anonymous>)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/suites/create.js:82:17)"
              }
            },
            {
              "type": "test",
              "title": "The type property MUST contain the string DataIntegrityProof.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-data-integrity/#contexts-and-vocabularies:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.';\n          for(const proof of proofs) {\n            proof.should.have.property('type');\n            proof.type.should.be.a(\n              'string',\n              'Expected \"proof.type\" to be a string.'\n            );\n            const hasExpectedType = expectedProofTypes.includes(proof.type);\n            hasExpectedType.should.equal(\n              true,\n              `Expected \"proof.type\" to be one of ` +\n              `${expectedProofTypes} Received: ${proof.type}`);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "sXugKi3EYzvQ4jDPv9Cum",
              "ctx": null,
              "_testId": "urn:uuid:2460c795-fe01-4a1e-b4db-4d6eb98fb772",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "The type property MUST contain the string DataIntegrityProof."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#contexts-and-vocabularies:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3823,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
              "body": "function() {\n          this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.';\n          for(const proof of proofs) {\n            should.exist(proof, 'Expected proof to exist.');\n            if(proof.type === 'DataIntegrityProof') {\n              should.exist(proof.cryptosuite,\n                'Expected proof to have property \"cryptosuite\".');\n            }\n            const {\n              prefix: expectedPrefix,\n              name: encodingName\n            } = expectedMultibasePrefix(proof.cryptosuite);\n            shouldHaveProofValue({proof, expectedPrefix, encodingName});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "sXugKi3EYzvQ4jDPv9Cum",
              "ctx": null,
              "_testId": "urn:uuid:b3ed6890-c624-46c9-b3d4-24e4f56f86af",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "The proofValue property MUST be used, as specified in 2.1 Proofs."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.';\n      for(const proof of proofs) {\n        if(proof.type && proof.type === 'DataIntegrityProof') {\n          should.exist(\n            proof.cryptosuite,\n            'If the proof type is DataIntegrityProof, cryptosuite MUST ' +\n            'be specified');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "sXugKi3EYzvQ4jDPv9Cum",
              "ctx": null,
              "_testId": "urn:uuid:1c525c43-de6c-427b-a634-b7a00f13e113",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If specified (proof.cryptosuite), its value MUST be a string.",
              "body": "function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.';\n        for(const proof of proofs) {\n          if(proof.cryptosuite) {\n            proof.cryptosuite.should.be.a(\n              'string',\n              'cryptosuite value MUST be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "sXugKi3EYzvQ4jDPv9Cum",
              "ctx": null,
              "_testId": "urn:uuid:e8607705-062a-41d5-9122-5850c983d5d9",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "If specified (proof.cryptosuite), its value MUST be a string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "A verification method is the means and information needed to verify the proof. If included, the value MUST be a string that maps to a [URL].",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=A%20verification%20method%20is%20the%20means%20and%20information%20needed%20to%20verify%20the%20proof.%20If%20included%2C%20the%20value%20MUST%20be%20a%20string%20that%20maps%20to%20a%20%5BURL%5D.';\n      for(const proof of proofs) {\n        if(!data || !data?.['@context']) {\n          throw new Error(`Expected ${vendorName} to issue a VC.`);\n        }\n        await shouldMapToUrl({\n          doc: {\n            '@context': data['@context'],\n            ...proof\n          },\n          term: 'https://w3id.org/security#verificationMethod',\n          prop: '@id',\n          documentLoader\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "sXugKi3EYzvQ4jDPv9Cum",
              "ctx": null,
              "_testId": "urn:uuid:2170ac00-55b4-4ce9-8153-32953fa97aef",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "A verification method is the means and information needed to verify the proof. If included, the value MUST be a string that maps to a [URL]."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=A%20verification%20method%20is%20the%20means%20and%20information%20needed%20to%20verify%20the%20proof.%20If%20included%2C%20the%20value%20MUST%20be%20a%20string%20that%20maps%20to%20a%20%5BURL%5D.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3824,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected property \"https://w3id.org/security#verificationMethod\" to exist.: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected property \"https://w3id.org/security#verificationMethod\" to exist.: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at shouldMapToUrl (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:215:12)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/suites/create.js:174:9)"
              }
            },
            {
              "type": "test",
              "title": "The reason the proof was created (\"proof.proofPurpose\") MUST be specified as a string that maps to a URL.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20reason%20the%20proof%20was%20created%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL';\n      for(const proof of proofs) {\n        proof.should.have.property('proofPurpose');\n        proof.proofPurpose.should.be.a('string');\n        await shouldMapToUrl({\n          doc: {\n            '@context': data['@context'],\n            ...proof\n          },\n          term: 'https://w3id.org/security#proofPurpose',\n          prop: '@id',\n          documentLoader\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "sXugKi3EYzvQ4jDPv9Cum",
              "ctx": null,
              "_testId": "urn:uuid:d3f8b257-9542-4ed7-ba65-15c4ed21dae4",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "The reason the proof was created (\"proof.proofPurpose\") MUST be specified as a string that maps to a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20reason%20the%20proof%20was%20created%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3825,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected property \"https://w3id.org/security#proofPurpose\" to exist.: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected property \"https://w3id.org/security#proofPurpose\" to exist.: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at shouldMapToUrl (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:215:12)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/suites/create.js:191:9)"
              }
            },
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that expresses base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The value MUST use a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification to express the binary data.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=A%20string%20value%20that%20expresses%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof%20using%20the%20verificationMethod%20specified.%20The%20value%20MUST%20use%20a%20header%20and%20encoding%20as%20described%20in%20Section%202.4%20Multibase%20of%20the%20Controller%20Documents%201.0%20specification%20to%20express%20the%20binary%20data.';\n      for(const proof of proofs) {\n        should.exist(proof, 'Expected proof to exist.');\n        //FIXME the suite should pass in the expectedPrefix and\n        //encodingName or type\n        const {\n          prefix: expectedPrefix,\n          name: encodingName\n        } = expectedMultibasePrefix(proof.cryptosuite);\n        shouldHaveProofValue({proof, expectedPrefix, encodingName});\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "sXugKi3EYzvQ4jDPv9Cum",
              "ctx": null,
              "_testId": "urn:uuid:4c612820-47b6-4247-b14b-1ae7c956933e",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "(\"proof.proofValue\") A string value that expresses base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The value MUST use a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification to express the binary data."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=A%20string%20value%20that%20expresses%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof%20using%20the%20verificationMethod%20specified.%20The%20value%20MUST%20use%20a%20header%20and%20encoding%20as%20described%20in%20Section%202.4%20Multibase%20of%20the%20Controller%20Documents%201.0%20specification%20to%20express%20the%20binary%20data.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Cryptographic suite designers MUST use mandatory proof value properties defined in Section 2.1 Proofs, and MAY define other properties specific to their cryptographic suite.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#add-proof:~:text=MUST%20use%20mandatory%20proof%20value%20properties%20defined';\n      for(const proof of proofs) {\n        shouldBeProof({proof});\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "sXugKi3EYzvQ4jDPv9Cum",
              "ctx": null,
              "_testId": "urn:uuid:808bbd18-81f9-4f1a-99d8-7db216fbf7bc",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "Cryptographic suite designers MUST use mandatory proof value properties defined in Section 2.1 Proofs, and MAY define other properties specific to their cryptographic suite."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#add-proof:~:text=MUST%20use%20mandatory%20proof%20value%20properties%20defined",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3826,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      const undefinedType = structuredClone(credential);\n      undefinedType.type.push('InvalidType');\n      await shouldFailIssuance({\n        credential: undefinedType,\n        issuer,\n        reason: 'Expected issuer to error when VC has an undefined type.'\n      });\n      const undefinedTerm = structuredClone(credential);\n      undefinedTerm.credentialSubject.invalidTerm = 'invalidTerm';\n      await shouldFailIssuance({\n        credential: undefinedTerm,\n        issuer,\n        reason: 'Expected issuer to error when VC has an undefined term.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "sXugKi3EYzvQ4jDPv9Cum",
              "ctx": null,
              "_testId": "urn:uuid:f244ac74-2059-4680-b504-15e17c1ce5fd",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3826,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 445,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the algorithm produces an error, the error MUST be propagated and SHOULD convey the error type.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#dfn-input-document:~:text=If%20the%20algorithm%20produces%20an%20error%2C%20the%20error%20MUST%20be%20propagated%20and%20SHOULD%20convey%20the%20error%20type';\n      const noSubject = structuredClone(credential);\n      delete noSubject.credentialSubject;\n      // FIXME this test should look for a propagated error such as\n      // PROOF_GENERATION_ERROR\n      await shouldFailIssuance({\n        credential: noSubject,\n        issuer,\n        reason: 'Expected issuer to error when VC has no credentialSubject.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "sXugKi3EYzvQ4jDPv9Cum",
              "ctx": null,
              "_testId": "urn:uuid:e1a5cddb-ca83-462e-a66b-83d69b69cf92",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "If the algorithm produces an error, the error MUST be propagated and SHOULD convey the error type."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#dfn-input-document:~:text=If%20the%20algorithm%20produces%20an%20error%2C%20the%20error%20MUST%20be%20propagated%20and%20SHOULD%20convey%20the%20error%20type",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4271,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 149,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n        const hasCryptosuiteName = proofs.some(\n          p => p?.cryptosuite === cryptosuiteName);\n        hasCryptosuiteName.should.equal(\n          true,\n          `Expected at least one proof with cryptosuite ${cryptosuiteName}`);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "sXugKi3EYzvQ4jDPv9Cum",
              "ctx": null,
              "_testId": "urn:uuid:7b0626e9-ce28-497e-bb36-92e5dee30cd5",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4420,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n        const cryptoProp = 'https://w3id.org/security#cryptosuite';\n        const cryptoType = 'https://w3id.org/security#cryptosuiteString';\n        for(const {cryptosuite, type} of proofs) {\n          should.exist(cryptosuite,\n            'Expected property \"proof.cryptosuite\" to exist.');\n          should.exist(type,\n            'Expected property \"proof.type\" to exist.');\n          should.exist(data['@context'],\n            'Expected VC to have property \"@context\".');\n          const expanded = await jsonld.expand({\n            '@context': data['@context'],\n            cryptosuite,\n            type\n          }, {documentLoader});\n          for(const terms of expanded) {\n            const cryptoProperties = terms[cryptoProp];\n            should.exist(cryptoProperties,\n              `Expected property ${cryptoProp} to exist.`);\n            const hasTypeName = cryptoProperties.some(suite =>\n              suite['@type'] === cryptoType &&\n              suite['@value'] == cryptosuiteName);\n            hasTypeName.should.equal(true,\n              `Expected ${cryptoProp} with @value ${cryptosuiteName} & ` +\n              `@type ${cryptoType}`);\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "sXugKi3EYzvQ4jDPv9Cum",
              "ctx": null,
              "_testId": "urn:uuid:177dd1d7-0cab-4167-8052-6520b645599d",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4420,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected property https://w3id.org/security#cryptosuite to exist.: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected property https://w3id.org/security#cryptosuite to exist.: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/suites/create.js:293:20)"
              }
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"Procivis One Core\"",
              "body": "function() {\n      this.currentTest.cell = {\n        columnId,\n        rowId: this.currentTest.title\n      };\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "sXugKi3EYzvQ4jDPv9Cum",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Procivis One Core\"",
              "body": "async function() {\n      if(!issuer) {\n        throw new Error(`Expected ${vendorName} to have an issuer.`);\n      }\n      if(!credential) {\n        throw new Error(`Expected a credential to be passed in ` +\n          `received ${credential}`);\n      }\n      data = await createInitialVc({issuer, credential});\n      proofs = Array.isArray(data.proof) ? data.proof : [data.proof];\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "sXugKi3EYzvQ4jDPv9Cum",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3069,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 750,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "fytQRyOshIvqz-uXdsjFp",
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
          "_testId": "urn:uuid:73f388e0-dbfd-4099-9b24-1cf5b3c42a22"
        },
        {
          "title": "SpruceID",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "When expressing a data integrity proof on an object, a proof property MUST be used.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=When%20expressing%20a%20data%20integrity%20proof%20on%20an%20object%2C%20a%20proof%20property%20MUST%20be%20used';\n      shouldHaveProof({vc: data});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "f6heVhTijxDuwaLJorrQu",
              "ctx": null,
              "_testId": "urn:uuid:34a8202c-d644-4908-80b2-e54723f3bc19",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "When expressing a data integrity proof on an object, a proof property MUST be used."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=When%20expressing%20a%20data%20integrity%20proof%20on%20an%20object%2C%20a%20proof%20property%20MUST%20be%20used",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If present (proof), its value MUST be either a single object, or an unordered set of objects.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=If%20present%2C%20its%20value%20MUST%20be%20either%20a%20single%20object%2C%20or%20an%20unordered%20set%20of%20objects';\n      shouldHaveProof({vc: data});\n      const {proof} = data;\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "f6heVhTijxDuwaLJorrQu",
              "ctx": null,
              "_testId": "urn:uuid:04aae9f6-9966-474d-9f32-8881b31f76f4",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If present (proof), its value MUST be either a single object, or an unordered set of objects."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=If%20present%2C%20its%20value%20MUST%20be%20either%20a%20single%20object%2C%20or%20an%20unordered%20set%20of%20objects",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.id\") An optional identifier for the proof, which MUST be a URL.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=An%20optional%20identifier%20for%20the%20proof%2C%20which%20MUST%20be%20a%20URL';\n      for(const proof of proofs) {\n        if(proof.id) {\n          shouldBeUrl({url: proof.id, prop: 'proof.id'});\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "f6heVhTijxDuwaLJorrQu",
              "ctx": null,
              "_testId": "urn:uuid:97ef3800-22e2-40e3-aeab-2c0becf9d926",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "(\"proof.id\") An optional identifier for the proof, which MUST be a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=An%20optional%20identifier%20for%20the%20proof%2C%20which%20MUST%20be%20a%20URL",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The specific type of proof MUST be specified as a string that maps to a URL.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=The%20specific%20type%20of%20proof%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL';\n      const prop = '@type';\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n        const expanded = await jsonld.expand({\n          '@context': data['@context'],\n          type: proof.type\n        }, {documentLoader});\n        for(const term of expanded) {\n          const types = term[prop];\n          should.exist(types, 'Expected @type to exist.');\n          types.every(url => shouldBeUrl({url, prop}));\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "f6heVhTijxDuwaLJorrQu",
              "ctx": null,
              "_testId": "urn:uuid:1f6af18d-1338-43c3-90d3-1cb85dd3094f",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The specific type of proof MUST be specified as a string that maps to a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=The%20specific%20type%20of%20proof%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4555,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The type property MUST contain the string DataIntegrityProof.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-data-integrity/#contexts-and-vocabularies:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.';\n          for(const proof of proofs) {\n            proof.should.have.property('type');\n            proof.type.should.be.a(\n              'string',\n              'Expected \"proof.type\" to be a string.'\n            );\n            const hasExpectedType = expectedProofTypes.includes(proof.type);\n            hasExpectedType.should.equal(\n              true,\n              `Expected \"proof.type\" to be one of ` +\n              `${expectedProofTypes} Received: ${proof.type}`);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "f6heVhTijxDuwaLJorrQu",
              "ctx": null,
              "_testId": "urn:uuid:33d7c97d-c60a-4307-8744-e83566decc47",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The type property MUST contain the string DataIntegrityProof."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#contexts-and-vocabularies:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4556,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
              "body": "function() {\n          this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.';\n          for(const proof of proofs) {\n            should.exist(proof, 'Expected proof to exist.');\n            if(proof.type === 'DataIntegrityProof') {\n              should.exist(proof.cryptosuite,\n                'Expected proof to have property \"cryptosuite\".');\n            }\n            const {\n              prefix: expectedPrefix,\n              name: encodingName\n            } = expectedMultibasePrefix(proof.cryptosuite);\n            shouldHaveProofValue({proof, expectedPrefix, encodingName});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "f6heVhTijxDuwaLJorrQu",
              "ctx": null,
              "_testId": "urn:uuid:7f52921e-5aaa-45e5-9dfb-97b4ca8601af",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The proofValue property MUST be used, as specified in 2.1 Proofs."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.';\n      for(const proof of proofs) {\n        if(proof.type && proof.type === 'DataIntegrityProof') {\n          should.exist(\n            proof.cryptosuite,\n            'If the proof type is DataIntegrityProof, cryptosuite MUST ' +\n            'be specified');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "f6heVhTijxDuwaLJorrQu",
              "ctx": null,
              "_testId": "urn:uuid:4aa66939-53ce-40ae-98eb-09ea419208df",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If specified (proof.cryptosuite), its value MUST be a string.",
              "body": "function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.';\n        for(const proof of proofs) {\n          if(proof.cryptosuite) {\n            proof.cryptosuite.should.be.a(\n              'string',\n              'cryptosuite value MUST be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "f6heVhTijxDuwaLJorrQu",
              "ctx": null,
              "_testId": "urn:uuid:2faafe43-3aa6-4c2e-9826-9eea8348c364",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If specified (proof.cryptosuite), its value MUST be a string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "A verification method is the means and information needed to verify the proof. If included, the value MUST be a string that maps to a [URL].",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=A%20verification%20method%20is%20the%20means%20and%20information%20needed%20to%20verify%20the%20proof.%20If%20included%2C%20the%20value%20MUST%20be%20a%20string%20that%20maps%20to%20a%20%5BURL%5D.';\n      for(const proof of proofs) {\n        if(!data || !data?.['@context']) {\n          throw new Error(`Expected ${vendorName} to issue a VC.`);\n        }\n        await shouldMapToUrl({\n          doc: {\n            '@context': data['@context'],\n            ...proof\n          },\n          term: 'https://w3id.org/security#verificationMethod',\n          prop: '@id',\n          documentLoader\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "f6heVhTijxDuwaLJorrQu",
              "ctx": null,
              "_testId": "urn:uuid:777eb734-f6da-4faa-bca6-f9acdb797638",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "A verification method is the means and information needed to verify the proof. If included, the value MUST be a string that maps to a [URL]."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=A%20verification%20method%20is%20the%20means%20and%20information%20needed%20to%20verify%20the%20proof.%20If%20included%2C%20the%20value%20MUST%20be%20a%20string%20that%20maps%20to%20a%20%5BURL%5D.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4557,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The reason the proof was created (\"proof.proofPurpose\") MUST be specified as a string that maps to a URL.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20reason%20the%20proof%20was%20created%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL';\n      for(const proof of proofs) {\n        proof.should.have.property('proofPurpose');\n        proof.proofPurpose.should.be.a('string');\n        await shouldMapToUrl({\n          doc: {\n            '@context': data['@context'],\n            ...proof\n          },\n          term: 'https://w3id.org/security#proofPurpose',\n          prop: '@id',\n          documentLoader\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "f6heVhTijxDuwaLJorrQu",
              "ctx": null,
              "_testId": "urn:uuid:5a76c094-d3fa-416c-a07a-51cfe4b8dd36",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The reason the proof was created (\"proof.proofPurpose\") MUST be specified as a string that maps to a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20reason%20the%20proof%20was%20created%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4558,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that expresses base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The value MUST use a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification to express the binary data.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=A%20string%20value%20that%20expresses%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof%20using%20the%20verificationMethod%20specified.%20The%20value%20MUST%20use%20a%20header%20and%20encoding%20as%20described%20in%20Section%202.4%20Multibase%20of%20the%20Controller%20Documents%201.0%20specification%20to%20express%20the%20binary%20data.';\n      for(const proof of proofs) {\n        should.exist(proof, 'Expected proof to exist.');\n        //FIXME the suite should pass in the expectedPrefix and\n        //encodingName or type\n        const {\n          prefix: expectedPrefix,\n          name: encodingName\n        } = expectedMultibasePrefix(proof.cryptosuite);\n        shouldHaveProofValue({proof, expectedPrefix, encodingName});\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "f6heVhTijxDuwaLJorrQu",
              "ctx": null,
              "_testId": "urn:uuid:67c6bd81-3c3a-45b0-acfa-a603ac2b4272",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "(\"proof.proofValue\") A string value that expresses base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The value MUST use a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification to express the binary data."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=A%20string%20value%20that%20expresses%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof%20using%20the%20verificationMethod%20specified.%20The%20value%20MUST%20use%20a%20header%20and%20encoding%20as%20described%20in%20Section%202.4%20Multibase%20of%20the%20Controller%20Documents%201.0%20specification%20to%20express%20the%20binary%20data.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Cryptographic suite designers MUST use mandatory proof value properties defined in Section 2.1 Proofs, and MAY define other properties specific to their cryptographic suite.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#add-proof:~:text=MUST%20use%20mandatory%20proof%20value%20properties%20defined';\n      for(const proof of proofs) {\n        shouldBeProof({proof});\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "f6heVhTijxDuwaLJorrQu",
              "ctx": null,
              "_testId": "urn:uuid:bd062a9c-22e8-4d62-a1b3-b95cdb9c4c41",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "Cryptographic suite designers MUST use mandatory proof value properties defined in Section 2.1 Proofs, and MAY define other properties specific to their cryptographic suite."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#add-proof:~:text=MUST%20use%20mandatory%20proof%20value%20properties%20defined",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4559,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      const undefinedType = structuredClone(credential);\n      undefinedType.type.push('InvalidType');\n      await shouldFailIssuance({\n        credential: undefinedType,\n        issuer,\n        reason: 'Expected issuer to error when VC has an undefined type.'\n      });\n      const undefinedTerm = structuredClone(credential);\n      undefinedTerm.credentialSubject.invalidTerm = 'invalidTerm';\n      await shouldFailIssuance({\n        credential: undefinedTerm,\n        issuer,\n        reason: 'Expected issuer to error when VC has an undefined term.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "f6heVhTijxDuwaLJorrQu",
              "ctx": null,
              "_testId": "urn:uuid:868047f4-2a4a-4854-9ab4-430f864094e0",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4560,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 103,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the algorithm produces an error, the error MUST be propagated and SHOULD convey the error type.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#dfn-input-document:~:text=If%20the%20algorithm%20produces%20an%20error%2C%20the%20error%20MUST%20be%20propagated%20and%20SHOULD%20convey%20the%20error%20type';\n      const noSubject = structuredClone(credential);\n      delete noSubject.credentialSubject;\n      // FIXME this test should look for a propagated error such as\n      // PROOF_GENERATION_ERROR\n      await shouldFailIssuance({\n        credential: noSubject,\n        issuer,\n        reason: 'Expected issuer to error when VC has no credentialSubject.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "f6heVhTijxDuwaLJorrQu",
              "ctx": null,
              "_testId": "urn:uuid:50b0e20d-830c-42ca-ae48-290ad8a3c12d",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If the algorithm produces an error, the error MUST be propagated and SHOULD convey the error type."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#dfn-input-document:~:text=If%20the%20algorithm%20produces%20an%20error%2C%20the%20error%20MUST%20be%20propagated%20and%20SHOULD%20convey%20the%20error%20type",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4663,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 37,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected issuer to error when VC has no credentialSubject.: expected Response { status: 201, statusText: 'Created', headers: Headers { date: 'Sun, 13 Oct 2024 05:06:27 GMT', 'content-type': 'application/json', 'content-length': '658', connection: 'keep-alive', 'cf-cache-status': 'DYNAMIC', server: 'cloudflare', 'cf-ray': '8d1ccceb7d9b3b3c-IAD', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected issuer to error when VC has no credentialSubject.: expected Response { status: 201, statusText: 'Created', headers: Headers { date: 'Sun, 13 Oct 2024 05:06:27 GMT', 'content-type': 'application/json', 'content-length': '658', connection: 'keep-alive', 'cf-cache-status': 'DYNAMIC', server: 'cloudflare', 'cf-ray': '8d1ccceb7d9b3b3c-IAD', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at shouldFailIssuance (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:104:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/suites/create.js:255:7)"
              }
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n        const hasCryptosuiteName = proofs.some(\n          p => p?.cryptosuite === cryptosuiteName);\n        hasCryptosuiteName.should.equal(\n          true,\n          `Expected at least one proof with cryptosuite ${cryptosuiteName}`);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "f6heVhTijxDuwaLJorrQu",
              "ctx": null,
              "_testId": "urn:uuid:eb3ef6c9-c73f-4883-a94d-53c43698d0bc",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4700,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n        const cryptoProp = 'https://w3id.org/security#cryptosuite';\n        const cryptoType = 'https://w3id.org/security#cryptosuiteString';\n        for(const {cryptosuite, type} of proofs) {\n          should.exist(cryptosuite,\n            'Expected property \"proof.cryptosuite\" to exist.');\n          should.exist(type,\n            'Expected property \"proof.type\" to exist.');\n          should.exist(data['@context'],\n            'Expected VC to have property \"@context\".');\n          const expanded = await jsonld.expand({\n            '@context': data['@context'],\n            cryptosuite,\n            type\n          }, {documentLoader});\n          for(const terms of expanded) {\n            const cryptoProperties = terms[cryptoProp];\n            should.exist(cryptoProperties,\n              `Expected property ${cryptoProp} to exist.`);\n            const hasTypeName = cryptoProperties.some(suite =>\n              suite['@type'] === cryptoType &&\n              suite['@value'] == cryptosuiteName);\n            hasTypeName.should.equal(true,\n              `Expected ${cryptoProp} with @value ${cryptosuiteName} & ` +\n              `@type ${cryptoType}`);\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "f6heVhTijxDuwaLJorrQu",
              "ctx": null,
              "_testId": "urn:uuid:2fa7b95a-168b-49d9-9f95-6284f6d6610e",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4701,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"SpruceID\"",
              "body": "function() {\n      this.currentTest.cell = {\n        columnId,\n        rowId: this.currentTest.title\n      };\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "f6heVhTijxDuwaLJorrQu",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"SpruceID\"",
              "body": "async function() {\n      if(!issuer) {\n        throw new Error(`Expected ${vendorName} to have an issuer.`);\n      }\n      if(!credential) {\n        throw new Error(`Expected a credential to be passed in ` +\n          `received ${credential}`);\n      }\n      data = await createInitialVc({issuer, credential});\n      proofs = Array.isArray(data.proof) ? data.proof : [data.proof];\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "f6heVhTijxDuwaLJorrQu",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4421,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 132,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "fytQRyOshIvqz-uXdsjFp",
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
          "_testId": "urn:uuid:fc63e494-ac59-41bf-98a0-07e6fb2667e9"
        },
        {
          "title": "Trinsic",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "When expressing a data integrity proof on an object, a proof property MUST be used.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=When%20expressing%20a%20data%20integrity%20proof%20on%20an%20object%2C%20a%20proof%20property%20MUST%20be%20used';\n      shouldHaveProof({vc: data});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "BuweDCyWH5cAZEiXmcMRL",
              "ctx": null,
              "_testId": "urn:uuid:9c12df7c-0073-4743-a61a-883979f5a335",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "When expressing a data integrity proof on an object, a proof property MUST be used."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=When%20expressing%20a%20data%20integrity%20proof%20on%20an%20object%2C%20a%20proof%20property%20MUST%20be%20used",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If present (proof), its value MUST be either a single object, or an unordered set of objects.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=If%20present%2C%20its%20value%20MUST%20be%20either%20a%20single%20object%2C%20or%20an%20unordered%20set%20of%20objects';\n      shouldHaveProof({vc: data});\n      const {proof} = data;\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "BuweDCyWH5cAZEiXmcMRL",
              "ctx": null,
              "_testId": "urn:uuid:27086a11-7618-4bfa-a778-53481f78e031",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "If present (proof), its value MUST be either a single object, or an unordered set of objects."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=If%20present%2C%20its%20value%20MUST%20be%20either%20a%20single%20object%2C%20or%20an%20unordered%20set%20of%20objects",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.id\") An optional identifier for the proof, which MUST be a URL.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=An%20optional%20identifier%20for%20the%20proof%2C%20which%20MUST%20be%20a%20URL';\n      for(const proof of proofs) {\n        if(proof.id) {\n          shouldBeUrl({url: proof.id, prop: 'proof.id'});\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "BuweDCyWH5cAZEiXmcMRL",
              "ctx": null,
              "_testId": "urn:uuid:13803295-4cca-479d-8fca-b39beb86d573",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "(\"proof.id\") An optional identifier for the proof, which MUST be a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=An%20optional%20identifier%20for%20the%20proof%2C%20which%20MUST%20be%20a%20URL",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The specific type of proof MUST be specified as a string that maps to a URL.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=The%20specific%20type%20of%20proof%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL';\n      const prop = '@type';\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n        const expanded = await jsonld.expand({\n          '@context': data['@context'],\n          type: proof.type\n        }, {documentLoader});\n        for(const term of expanded) {\n          const types = term[prop];\n          should.exist(types, 'Expected @type to exist.');\n          types.every(url => shouldBeUrl({url, prop}));\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "BuweDCyWH5cAZEiXmcMRL",
              "ctx": null,
              "_testId": "urn:uuid:41469b1c-240c-48e6-b159-0b6d150684a4",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "The specific type of proof MUST be specified as a string that maps to a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=The%20specific%20type%20of%20proof%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5007,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "jsonld.InvalidUrl",
                "details": {
                  "code": "loading remote context failed",
                  "url": "https://w3id.org/security/data-integrity/v1",
                  "cause": {}
                }
              }
            },
            {
              "type": "test",
              "title": "The type property MUST contain the string DataIntegrityProof.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-data-integrity/#contexts-and-vocabularies:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.';\n          for(const proof of proofs) {\n            proof.should.have.property('type');\n            proof.type.should.be.a(\n              'string',\n              'Expected \"proof.type\" to be a string.'\n            );\n            const hasExpectedType = expectedProofTypes.includes(proof.type);\n            hasExpectedType.should.equal(\n              true,\n              `Expected \"proof.type\" to be one of ` +\n              `${expectedProofTypes} Received: ${proof.type}`);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "BuweDCyWH5cAZEiXmcMRL",
              "ctx": null,
              "_testId": "urn:uuid:a3aa1e9c-1795-45f1-a8ee-a07966129393",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "The type property MUST contain the string DataIntegrityProof."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#contexts-and-vocabularies:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5008,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
              "body": "function() {\n          this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.';\n          for(const proof of proofs) {\n            should.exist(proof, 'Expected proof to exist.');\n            if(proof.type === 'DataIntegrityProof') {\n              should.exist(proof.cryptosuite,\n                'Expected proof to have property \"cryptosuite\".');\n            }\n            const {\n              prefix: expectedPrefix,\n              name: encodingName\n            } = expectedMultibasePrefix(proof.cryptosuite);\n            shouldHaveProofValue({proof, expectedPrefix, encodingName});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "BuweDCyWH5cAZEiXmcMRL",
              "ctx": null,
              "_testId": "urn:uuid:9e5b0db2-b8d4-47cb-8a3d-c1cc6731977a",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "The proofValue property MUST be used, as specified in 2.1 Proofs."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.';\n      for(const proof of proofs) {\n        if(proof.type && proof.type === 'DataIntegrityProof') {\n          should.exist(\n            proof.cryptosuite,\n            'If the proof type is DataIntegrityProof, cryptosuite MUST ' +\n            'be specified');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "BuweDCyWH5cAZEiXmcMRL",
              "ctx": null,
              "_testId": "urn:uuid:91766cce-e21a-4da1-b652-5c32f8e3c808",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If specified (proof.cryptosuite), its value MUST be a string.",
              "body": "function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.';\n        for(const proof of proofs) {\n          if(proof.cryptosuite) {\n            proof.cryptosuite.should.be.a(\n              'string',\n              'cryptosuite value MUST be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "BuweDCyWH5cAZEiXmcMRL",
              "ctx": null,
              "_testId": "urn:uuid:ad233843-1aa0-44df-ba5f-6a8dce414b8e",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "If specified (proof.cryptosuite), its value MUST be a string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "A verification method is the means and information needed to verify the proof. If included, the value MUST be a string that maps to a [URL].",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=A%20verification%20method%20is%20the%20means%20and%20information%20needed%20to%20verify%20the%20proof.%20If%20included%2C%20the%20value%20MUST%20be%20a%20string%20that%20maps%20to%20a%20%5BURL%5D.';\n      for(const proof of proofs) {\n        if(!data || !data?.['@context']) {\n          throw new Error(`Expected ${vendorName} to issue a VC.`);\n        }\n        await shouldMapToUrl({\n          doc: {\n            '@context': data['@context'],\n            ...proof\n          },\n          term: 'https://w3id.org/security#verificationMethod',\n          prop: '@id',\n          documentLoader\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "BuweDCyWH5cAZEiXmcMRL",
              "ctx": null,
              "_testId": "urn:uuid:8ef0eb29-5952-43e2-b7d0-6d0d0c8c43d6",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "A verification method is the means and information needed to verify the proof. If included, the value MUST be a string that maps to a [URL]."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=A%20verification%20method%20is%20the%20means%20and%20information%20needed%20to%20verify%20the%20proof.%20If%20included%2C%20the%20value%20MUST%20be%20a%20string%20that%20maps%20to%20a%20%5BURL%5D.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5008,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "jsonld.InvalidUrl",
                "details": {
                  "code": "loading remote context failed",
                  "url": "https://w3id.org/security/data-integrity/v1",
                  "cause": {}
                }
              }
            },
            {
              "type": "test",
              "title": "The reason the proof was created (\"proof.proofPurpose\") MUST be specified as a string that maps to a URL.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20reason%20the%20proof%20was%20created%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL';\n      for(const proof of proofs) {\n        proof.should.have.property('proofPurpose');\n        proof.proofPurpose.should.be.a('string');\n        await shouldMapToUrl({\n          doc: {\n            '@context': data['@context'],\n            ...proof\n          },\n          term: 'https://w3id.org/security#proofPurpose',\n          prop: '@id',\n          documentLoader\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "BuweDCyWH5cAZEiXmcMRL",
              "ctx": null,
              "_testId": "urn:uuid:2fe2ba35-86a9-4014-ad70-deb02faaabfb",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "The reason the proof was created (\"proof.proofPurpose\") MUST be specified as a string that maps to a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20reason%20the%20proof%20was%20created%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5009,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "jsonld.InvalidUrl",
                "details": {
                  "code": "loading remote context failed",
                  "url": "https://w3id.org/security/data-integrity/v1",
                  "cause": {}
                }
              }
            },
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that expresses base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The value MUST use a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification to express the binary data.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=A%20string%20value%20that%20expresses%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof%20using%20the%20verificationMethod%20specified.%20The%20value%20MUST%20use%20a%20header%20and%20encoding%20as%20described%20in%20Section%202.4%20Multibase%20of%20the%20Controller%20Documents%201.0%20specification%20to%20express%20the%20binary%20data.';\n      for(const proof of proofs) {\n        should.exist(proof, 'Expected proof to exist.');\n        //FIXME the suite should pass in the expectedPrefix and\n        //encodingName or type\n        const {\n          prefix: expectedPrefix,\n          name: encodingName\n        } = expectedMultibasePrefix(proof.cryptosuite);\n        shouldHaveProofValue({proof, expectedPrefix, encodingName});\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "BuweDCyWH5cAZEiXmcMRL",
              "ctx": null,
              "_testId": "urn:uuid:6bd3bd7c-3cad-4e01-bf7b-b33cac9daecb",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "(\"proof.proofValue\") A string value that expresses base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The value MUST use a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification to express the binary data."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=A%20string%20value%20that%20expresses%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof%20using%20the%20verificationMethod%20specified.%20The%20value%20MUST%20use%20a%20header%20and%20encoding%20as%20described%20in%20Section%202.4%20Multibase%20of%20the%20Controller%20Documents%201.0%20specification%20to%20express%20the%20binary%20data.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Cryptographic suite designers MUST use mandatory proof value properties defined in Section 2.1 Proofs, and MAY define other properties specific to their cryptographic suite.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#add-proof:~:text=MUST%20use%20mandatory%20proof%20value%20properties%20defined';\n      for(const proof of proofs) {\n        shouldBeProof({proof});\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "BuweDCyWH5cAZEiXmcMRL",
              "ctx": null,
              "_testId": "urn:uuid:ab08cfd3-9bc5-4e8d-9f18-d26899625735",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "Cryptographic suite designers MUST use mandatory proof value properties defined in Section 2.1 Proofs, and MAY define other properties specific to their cryptographic suite."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#add-proof:~:text=MUST%20use%20mandatory%20proof%20value%20properties%20defined",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5010,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      const undefinedType = structuredClone(credential);\n      undefinedType.type.push('InvalidType');\n      await shouldFailIssuance({\n        credential: undefinedType,\n        issuer,\n        reason: 'Expected issuer to error when VC has an undefined type.'\n      });\n      const undefinedTerm = structuredClone(credential);\n      undefinedTerm.credentialSubject.invalidTerm = 'invalidTerm';\n      await shouldFailIssuance({\n        credential: undefinedTerm,\n        issuer,\n        reason: 'Expected issuer to error when VC has an undefined term.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "BuweDCyWH5cAZEiXmcMRL",
              "ctx": null,
              "_testId": "urn:uuid:e99fbc02-95fa-467f-8d77-3254ce9da056",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5010,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 87,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected issuer to error when VC has an undefined type.: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 13 Oct 2024 05:06:28 GMT', 'content-type': 'text/html; charset=utf-8', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'cache-control': 'no-cache,no-store', expires: '-1', pragma: 'no-cache', 'x-envoy-upstream-service-time': '64', 'cf-cache-status': 'DYNAMIC', 'report-to': '{\"endpoints\":[{\"url\":\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=KOib%2B9ikDIXrQUegMMnWjvdwTbQlk%2B9b11N5QY7jt9rcfZHmu2%2F%2FsDpM2J9BOh5hxrCXSE%2F4n0Ga7N0VLSuCmoEhlTuwoX4QKl0lmzfq4RdCkkj3qXFZOricJRG0ch1d8GTnXF6ejPT8%2FkOOXtDt\"}],\"group\":\"cf-nel\",\"max_age\":604800}', nel: '{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}', server: 'cloudflare', 'cf-ray': '8d1ccceda9a75b47-IAD', 'content-encoding': 'br', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: null, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected issuer to error when VC has an undefined type.: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 13 Oct 2024 05:06:28 GMT', 'content-type': 'text/html; charset=utf-8', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'cache-control': 'no-cache,no-store', expires: '-1', pragma: 'no-cache', 'x-envoy-upstream-service-time': '64', 'cf-cache-status': 'DYNAMIC', 'report-to': '{\"endpoints\":[{\"url\":\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=KOib%2B9ikDIXrQUegMMnWjvdwTbQlk%2B9b11N5QY7jt9rcfZHmu2%2F%2FsDpM2J9BOh5hxrCXSE%2F4n0Ga7N0VLSuCmoEhlTuwoX4QKl0lmzfq4RdCkkj3qXFZOricJRG0ch1d8GTnXF6ejPT8%2FkOOXtDt\"}],\"group\":\"cf-nel\",\"max_age\":604800}', nel: '{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}', server: 'cloudflare', 'cf-ray': '8d1ccceda9a75b47-IAD', 'content-encoding': 'br', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: null, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at shouldFailIssuance (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:104:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/suites/create.js:235:7)"
              }
            },
            {
              "type": "test",
              "title": "If the algorithm produces an error, the error MUST be propagated and SHOULD convey the error type.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#dfn-input-document:~:text=If%20the%20algorithm%20produces%20an%20error%2C%20the%20error%20MUST%20be%20propagated%20and%20SHOULD%20convey%20the%20error%20type';\n      const noSubject = structuredClone(credential);\n      delete noSubject.credentialSubject;\n      // FIXME this test should look for a propagated error such as\n      // PROOF_GENERATION_ERROR\n      await shouldFailIssuance({\n        credential: noSubject,\n        issuer,\n        reason: 'Expected issuer to error when VC has no credentialSubject.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "BuweDCyWH5cAZEiXmcMRL",
              "ctx": null,
              "_testId": "urn:uuid:15f307ba-481d-4366-8498-31057f40721a",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "If the algorithm produces an error, the error MUST be propagated and SHOULD convey the error type."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#dfn-input-document:~:text=If%20the%20algorithm%20produces%20an%20error%2C%20the%20error%20MUST%20be%20propagated%20and%20SHOULD%20convey%20the%20error%20type",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5100,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 25,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n        const hasCryptosuiteName = proofs.some(\n          p => p?.cryptosuite === cryptosuiteName);\n        hasCryptosuiteName.should.equal(\n          true,\n          `Expected at least one proof with cryptosuite ${cryptosuiteName}`);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "BuweDCyWH5cAZEiXmcMRL",
              "ctx": null,
              "_testId": "urn:uuid:6959693c-fdea-473d-8142-648d9bdb78d1",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5125,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected at least one proof with cryptosuite eddsa-rdfc-2022: expected false to equal true",
                "showDiff": true,
                "actual": "false",
                "expected": "true",
                "operator": "strictEqual",
                "stack": "AssertionError: Expected at least one proof with cryptosuite eddsa-rdfc-2022: expected false to equal true\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/suites/create.js:267:35)\n    at process.processImmediate (node:internal/timers:483:21)"
              }
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n        const cryptoProp = 'https://w3id.org/security#cryptosuite';\n        const cryptoType = 'https://w3id.org/security#cryptosuiteString';\n        for(const {cryptosuite, type} of proofs) {\n          should.exist(cryptosuite,\n            'Expected property \"proof.cryptosuite\" to exist.');\n          should.exist(type,\n            'Expected property \"proof.type\" to exist.');\n          should.exist(data['@context'],\n            'Expected VC to have property \"@context\".');\n          const expanded = await jsonld.expand({\n            '@context': data['@context'],\n            cryptosuite,\n            type\n          }, {documentLoader});\n          for(const terms of expanded) {\n            const cryptoProperties = terms[cryptoProp];\n            should.exist(cryptoProperties,\n              `Expected property ${cryptoProp} to exist.`);\n            const hasTypeName = cryptoProperties.some(suite =>\n              suite['@type'] === cryptoType &&\n              suite['@value'] == cryptosuiteName);\n            hasTypeName.should.equal(true,\n              `Expected ${cryptoProp} with @value ${cryptosuiteName} & ` +\n              `@type ${cryptoType}`);\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "BuweDCyWH5cAZEiXmcMRL",
              "ctx": null,
              "_testId": "urn:uuid:def9ae7f-f5d2-4ceb-9204-06c8cf2a42b8",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5126,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "jsonld.InvalidUrl",
                "details": {
                  "code": "loading remote context failed",
                  "url": "https://w3id.org/security/data-integrity/v1",
                  "cause": {}
                }
              }
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"Trinsic\"",
              "body": "function() {\n      this.currentTest.cell = {\n        columnId,\n        rowId: this.currentTest.title\n      };\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "BuweDCyWH5cAZEiXmcMRL",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Trinsic\"",
              "body": "async function() {\n      if(!issuer) {\n        throw new Error(`Expected ${vendorName} to have an issuer.`);\n      }\n      if(!credential) {\n        throw new Error(`Expected a credential to be passed in ` +\n          `received ${credential}`);\n      }\n      data = await createInitialVc({issuer, credential});\n      proofs = Array.isArray(data.proof) ? data.proof : [data.proof];\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "BuweDCyWH5cAZEiXmcMRL",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4702,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 303,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "fytQRyOshIvqz-uXdsjFp",
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
          "_testId": "urn:uuid:9b9ddeaf-b717-4aac-86b7-6ca401e95b58"
        },
        {
          "title": "bovine",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "When expressing a data integrity proof on an object, a proof property MUST be used.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=When%20expressing%20a%20data%20integrity%20proof%20on%20an%20object%2C%20a%20proof%20property%20MUST%20be%20used';\n      shouldHaveProof({vc: data});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "QgWH5Ws0hVGr8Go9Nx9iB",
              "ctx": null,
              "_testId": "urn:uuid:3a700206-befc-4d62-ab13-c23f9a1d335d",
              "cell": {
                "columnId": "bovine",
                "rowId": "When expressing a data integrity proof on an object, a proof property MUST be used."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=When%20expressing%20a%20data%20integrity%20proof%20on%20an%20object%2C%20a%20proof%20property%20MUST%20be%20used",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If present (proof), its value MUST be either a single object, or an unordered set of objects.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=If%20present%2C%20its%20value%20MUST%20be%20either%20a%20single%20object%2C%20or%20an%20unordered%20set%20of%20objects';\n      shouldHaveProof({vc: data});\n      const {proof} = data;\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "QgWH5Ws0hVGr8Go9Nx9iB",
              "ctx": null,
              "_testId": "urn:uuid:6a27909d-6db8-441f-9068-8690ff9bbb07",
              "cell": {
                "columnId": "bovine",
                "rowId": "If present (proof), its value MUST be either a single object, or an unordered set of objects."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=If%20present%2C%20its%20value%20MUST%20be%20either%20a%20single%20object%2C%20or%20an%20unordered%20set%20of%20objects",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.id\") An optional identifier for the proof, which MUST be a URL.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=An%20optional%20identifier%20for%20the%20proof%2C%20which%20MUST%20be%20a%20URL';\n      for(const proof of proofs) {\n        if(proof.id) {\n          shouldBeUrl({url: proof.id, prop: 'proof.id'});\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "QgWH5Ws0hVGr8Go9Nx9iB",
              "ctx": null,
              "_testId": "urn:uuid:e560adb9-b231-4d75-aedc-bdb0fce6b469",
              "cell": {
                "columnId": "bovine",
                "rowId": "(\"proof.id\") An optional identifier for the proof, which MUST be a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=An%20optional%20identifier%20for%20the%20proof%2C%20which%20MUST%20be%20a%20URL",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The specific type of proof MUST be specified as a string that maps to a URL.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=The%20specific%20type%20of%20proof%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL';\n      const prop = '@type';\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n        const expanded = await jsonld.expand({\n          '@context': data['@context'],\n          type: proof.type\n        }, {documentLoader});\n        for(const term of expanded) {\n          const types = term[prop];\n          should.exist(types, 'Expected @type to exist.');\n          types.every(url => shouldBeUrl({url, prop}));\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "QgWH5Ws0hVGr8Go9Nx9iB",
              "ctx": null,
              "_testId": "urn:uuid:62781cff-e681-4337-87d6-363ee46fa34d",
              "cell": {
                "columnId": "bovine",
                "rowId": "The specific type of proof MUST be specified as a string that maps to a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=The%20specific%20type%20of%20proof%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5999,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The type property MUST contain the string DataIntegrityProof.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-data-integrity/#contexts-and-vocabularies:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.';\n          for(const proof of proofs) {\n            proof.should.have.property('type');\n            proof.type.should.be.a(\n              'string',\n              'Expected \"proof.type\" to be a string.'\n            );\n            const hasExpectedType = expectedProofTypes.includes(proof.type);\n            hasExpectedType.should.equal(\n              true,\n              `Expected \"proof.type\" to be one of ` +\n              `${expectedProofTypes} Received: ${proof.type}`);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "QgWH5Ws0hVGr8Go9Nx9iB",
              "ctx": null,
              "_testId": "urn:uuid:f4669e10-8364-4776-9b30-2fbf9bb6c88a",
              "cell": {
                "columnId": "bovine",
                "rowId": "The type property MUST contain the string DataIntegrityProof."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#contexts-and-vocabularies:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6000,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
              "body": "function() {\n          this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.';\n          for(const proof of proofs) {\n            should.exist(proof, 'Expected proof to exist.');\n            if(proof.type === 'DataIntegrityProof') {\n              should.exist(proof.cryptosuite,\n                'Expected proof to have property \"cryptosuite\".');\n            }\n            const {\n              prefix: expectedPrefix,\n              name: encodingName\n            } = expectedMultibasePrefix(proof.cryptosuite);\n            shouldHaveProofValue({proof, expectedPrefix, encodingName});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "QgWH5Ws0hVGr8Go9Nx9iB",
              "ctx": null,
              "_testId": "urn:uuid:5876664e-9667-4cde-ae49-9dd2ba5ea20d",
              "cell": {
                "columnId": "bovine",
                "rowId": "The proofValue property MUST be used, as specified in 2.1 Proofs."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.';\n      for(const proof of proofs) {\n        if(proof.type && proof.type === 'DataIntegrityProof') {\n          should.exist(\n            proof.cryptosuite,\n            'If the proof type is DataIntegrityProof, cryptosuite MUST ' +\n            'be specified');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "QgWH5Ws0hVGr8Go9Nx9iB",
              "ctx": null,
              "_testId": "urn:uuid:eae6f86e-e883-408a-a160-0d6ee301a275",
              "cell": {
                "columnId": "bovine",
                "rowId": "If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If specified (proof.cryptosuite), its value MUST be a string.",
              "body": "function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.';\n        for(const proof of proofs) {\n          if(proof.cryptosuite) {\n            proof.cryptosuite.should.be.a(\n              'string',\n              'cryptosuite value MUST be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "QgWH5Ws0hVGr8Go9Nx9iB",
              "ctx": null,
              "_testId": "urn:uuid:dd71631e-e8a7-422c-934f-3ea3801d89e1",
              "cell": {
                "columnId": "bovine",
                "rowId": "If specified (proof.cryptosuite), its value MUST be a string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "A verification method is the means and information needed to verify the proof. If included, the value MUST be a string that maps to a [URL].",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=A%20verification%20method%20is%20the%20means%20and%20information%20needed%20to%20verify%20the%20proof.%20If%20included%2C%20the%20value%20MUST%20be%20a%20string%20that%20maps%20to%20a%20%5BURL%5D.';\n      for(const proof of proofs) {\n        if(!data || !data?.['@context']) {\n          throw new Error(`Expected ${vendorName} to issue a VC.`);\n        }\n        await shouldMapToUrl({\n          doc: {\n            '@context': data['@context'],\n            ...proof\n          },\n          term: 'https://w3id.org/security#verificationMethod',\n          prop: '@id',\n          documentLoader\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "QgWH5Ws0hVGr8Go9Nx9iB",
              "ctx": null,
              "_testId": "urn:uuid:cd082de8-fe34-490b-9b01-492b8dd60723",
              "cell": {
                "columnId": "bovine",
                "rowId": "A verification method is the means and information needed to verify the proof. If included, the value MUST be a string that maps to a [URL]."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=A%20verification%20method%20is%20the%20means%20and%20information%20needed%20to%20verify%20the%20proof.%20If%20included%2C%20the%20value%20MUST%20be%20a%20string%20that%20maps%20to%20a%20%5BURL%5D.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6000,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The reason the proof was created (\"proof.proofPurpose\") MUST be specified as a string that maps to a URL.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20reason%20the%20proof%20was%20created%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL';\n      for(const proof of proofs) {\n        proof.should.have.property('proofPurpose');\n        proof.proofPurpose.should.be.a('string');\n        await shouldMapToUrl({\n          doc: {\n            '@context': data['@context'],\n            ...proof\n          },\n          term: 'https://w3id.org/security#proofPurpose',\n          prop: '@id',\n          documentLoader\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "QgWH5Ws0hVGr8Go9Nx9iB",
              "ctx": null,
              "_testId": "urn:uuid:1e51d863-b384-41ac-84b1-2e907a154ced",
              "cell": {
                "columnId": "bovine",
                "rowId": "The reason the proof was created (\"proof.proofPurpose\") MUST be specified as a string that maps to a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20reason%20the%20proof%20was%20created%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6001,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that expresses base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The value MUST use a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification to express the binary data.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=A%20string%20value%20that%20expresses%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof%20using%20the%20verificationMethod%20specified.%20The%20value%20MUST%20use%20a%20header%20and%20encoding%20as%20described%20in%20Section%202.4%20Multibase%20of%20the%20Controller%20Documents%201.0%20specification%20to%20express%20the%20binary%20data.';\n      for(const proof of proofs) {\n        should.exist(proof, 'Expected proof to exist.');\n        //FIXME the suite should pass in the expectedPrefix and\n        //encodingName or type\n        const {\n          prefix: expectedPrefix,\n          name: encodingName\n        } = expectedMultibasePrefix(proof.cryptosuite);\n        shouldHaveProofValue({proof, expectedPrefix, encodingName});\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "QgWH5Ws0hVGr8Go9Nx9iB",
              "ctx": null,
              "_testId": "urn:uuid:132eab79-d6a5-4a62-8c72-0e6774538b0a",
              "cell": {
                "columnId": "bovine",
                "rowId": "(\"proof.proofValue\") A string value that expresses base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The value MUST use a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification to express the binary data."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=A%20string%20value%20that%20expresses%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof%20using%20the%20verificationMethod%20specified.%20The%20value%20MUST%20use%20a%20header%20and%20encoding%20as%20described%20in%20Section%202.4%20Multibase%20of%20the%20Controller%20Documents%201.0%20specification%20to%20express%20the%20binary%20data.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Cryptographic suite designers MUST use mandatory proof value properties defined in Section 2.1 Proofs, and MAY define other properties specific to their cryptographic suite.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#add-proof:~:text=MUST%20use%20mandatory%20proof%20value%20properties%20defined';\n      for(const proof of proofs) {\n        shouldBeProof({proof});\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "QgWH5Ws0hVGr8Go9Nx9iB",
              "ctx": null,
              "_testId": "urn:uuid:6725044b-b38e-4765-8ad8-c7f91d260ace",
              "cell": {
                "columnId": "bovine",
                "rowId": "Cryptographic suite designers MUST use mandatory proof value properties defined in Section 2.1 Proofs, and MAY define other properties specific to their cryptographic suite."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#add-proof:~:text=MUST%20use%20mandatory%20proof%20value%20properties%20defined",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6003,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      const undefinedType = structuredClone(credential);\n      undefinedType.type.push('InvalidType');\n      await shouldFailIssuance({\n        credential: undefinedType,\n        issuer,\n        reason: 'Expected issuer to error when VC has an undefined type.'\n      });\n      const undefinedTerm = structuredClone(credential);\n      undefinedTerm.credentialSubject.invalidTerm = 'invalidTerm';\n      await shouldFailIssuance({\n        credential: undefinedTerm,\n        issuer,\n        reason: 'Expected issuer to error when VC has an undefined term.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "QgWH5Ws0hVGr8Go9Nx9iB",
              "ctx": null,
              "_testId": "urn:uuid:ce859f5b-4ad4-4d2a-abee-8bd3d570f5ac",
              "cell": {
                "columnId": "bovine",
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6003,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 108,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected issuer to error when VC has an undefined type.: expected Response { status: 200, statusText: 'OK', headers: Headers { server: 'nginx/1.18.0 (Ubuntu)', date: 'Sun, 13 Oct 2024 05:06:29 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'content-encoding': 'gzip', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected issuer to error when VC has an undefined type.: expected Response { status: 200, statusText: 'OK', headers: Headers { server: 'nginx/1.18.0 (Ubuntu)', date: 'Sun, 13 Oct 2024 05:06:29 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'content-encoding': 'gzip', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at shouldFailIssuance (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:104:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/suites/create.js:235:7)"
              }
            },
            {
              "type": "test",
              "title": "If the algorithm produces an error, the error MUST be propagated and SHOULD convey the error type.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#dfn-input-document:~:text=If%20the%20algorithm%20produces%20an%20error%2C%20the%20error%20MUST%20be%20propagated%20and%20SHOULD%20convey%20the%20error%20type';\n      const noSubject = structuredClone(credential);\n      delete noSubject.credentialSubject;\n      // FIXME this test should look for a propagated error such as\n      // PROOF_GENERATION_ERROR\n      await shouldFailIssuance({\n        credential: noSubject,\n        issuer,\n        reason: 'Expected issuer to error when VC has no credentialSubject.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "QgWH5Ws0hVGr8Go9Nx9iB",
              "ctx": null,
              "_testId": "urn:uuid:8033384a-af8c-4dcb-8a7b-8a055e66b2df",
              "cell": {
                "columnId": "bovine",
                "rowId": "If the algorithm produces an error, the error MUST be propagated and SHOULD convey the error type."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#dfn-input-document:~:text=If%20the%20algorithm%20produces%20an%20error%2C%20the%20error%20MUST%20be%20propagated%20and%20SHOULD%20convey%20the%20error%20type",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6111,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 110,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected issuer to error when VC has no credentialSubject.: expected Response { status: 200, statusText: 'OK', headers: Headers { server: 'nginx/1.18.0 (Ubuntu)', date: 'Sun, 13 Oct 2024 05:06:29 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'content-encoding': 'gzip', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected issuer to error when VC has no credentialSubject.: expected Response { status: 200, statusText: 'OK', headers: Headers { server: 'nginx/1.18.0 (Ubuntu)', date: 'Sun, 13 Oct 2024 05:06:29 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'content-encoding': 'gzip', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at shouldFailIssuance (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:104:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/suites/create.js:255:7)"
              }
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n        const hasCryptosuiteName = proofs.some(\n          p => p?.cryptosuite === cryptosuiteName);\n        hasCryptosuiteName.should.equal(\n          true,\n          `Expected at least one proof with cryptosuite ${cryptosuiteName}`);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "QgWH5Ws0hVGr8Go9Nx9iB",
              "ctx": null,
              "_testId": "urn:uuid:ecd9b9f8-bd05-493b-913d-b63c40984faa",
              "cell": {
                "columnId": "bovine",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6222,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n        const cryptoProp = 'https://w3id.org/security#cryptosuite';\n        const cryptoType = 'https://w3id.org/security#cryptosuiteString';\n        for(const {cryptosuite, type} of proofs) {\n          should.exist(cryptosuite,\n            'Expected property \"proof.cryptosuite\" to exist.');\n          should.exist(type,\n            'Expected property \"proof.type\" to exist.');\n          should.exist(data['@context'],\n            'Expected VC to have property \"@context\".');\n          const expanded = await jsonld.expand({\n            '@context': data['@context'],\n            cryptosuite,\n            type\n          }, {documentLoader});\n          for(const terms of expanded) {\n            const cryptoProperties = terms[cryptoProp];\n            should.exist(cryptoProperties,\n              `Expected property ${cryptoProp} to exist.`);\n            const hasTypeName = cryptoProperties.some(suite =>\n              suite['@type'] === cryptoType &&\n              suite['@value'] == cryptosuiteName);\n            hasTypeName.should.equal(true,\n              `Expected ${cryptoProp} with @value ${cryptosuiteName} & ` +\n              `@type ${cryptoType}`);\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "QgWH5Ws0hVGr8Go9Nx9iB",
              "ctx": null,
              "_testId": "urn:uuid:521a2233-41ce-4158-9dc5-052aebbab75b",
              "cell": {
                "columnId": "bovine",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6222,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"bovine\"",
              "body": "function() {\n      this.currentTest.cell = {\n        columnId,\n        rowId: this.currentTest.title\n      };\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "QgWH5Ws0hVGr8Go9Nx9iB",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"bovine\"",
              "body": "async function() {\n      if(!issuer) {\n        throw new Error(`Expected ${vendorName} to have an issuer.`);\n      }\n      if(!credential) {\n        throw new Error(`Expected a credential to be passed in ` +\n          `received ${credential}`);\n      }\n      data = await createInitialVc({issuer, credential});\n      proofs = Array.isArray(data.proof) ? data.proof : [data.proof];\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "QgWH5Ws0hVGr8Go9Nx9iB",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5126,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 871,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "fytQRyOshIvqz-uXdsjFp",
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
          "_testId": "urn:uuid:4fa6264e-3857-4ccc-acad-c0732a9d99c3"
        }
      ],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "DQ_CnX3Ym0TcRvd_Af9IF",
      "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Issuer",
      "_testId": "urn:uuid:bca2d0a7-c006-47df-a4ef-493ad575e489",
      "columns": [
        "ACA-py",
        "apicatalog.com",
        "Digital Bazaar",
        "Grotto Networking",
        "Procivis One Core",
        "SpruceID",
        "Trinsic",
        "bovine"
      ],
      "rows": [
        {
          "id": "When expressing a data integrity proof on an object, a proof property MUST be used.",
          "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=When%20expressing%20a%20data%20integrity%20proof%20on%20an%20object%2C%20a%20proof%20property%20MUST%20be%20used",
          "cells": [
            {
              "cell": {
                "rowId": "When expressing a data integrity proof on an object, a proof property MUST be used.",
                "colId": "ACA-py"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            },
            {
              "type": "test",
              "title": "When expressing a data integrity proof on an object, a proof property MUST be used.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=When%20expressing%20a%20data%20integrity%20proof%20on%20an%20object%2C%20a%20proof%20property%20MUST%20be%20used';\n      shouldHaveProof({vc: data});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "klQuj3iUSICZwUS6dWrwn",
              "ctx": null,
              "_testId": "urn:uuid:43d89f74-4eb7-4847-a62e-a96ff10152ca",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "When expressing a data integrity proof on an object, a proof property MUST be used."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=When%20expressing%20a%20data%20integrity%20proof%20on%20an%20object%2C%20a%20proof%20property%20MUST%20be%20used",
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "When expressing a data integrity proof on an object, a proof property MUST be used.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=When%20expressing%20a%20data%20integrity%20proof%20on%20an%20object%2C%20a%20proof%20property%20MUST%20be%20used';\n      shouldHaveProof({vc: data});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "KC40bcABMd1Vn680ttbkx",
              "ctx": null,
              "_testId": "urn:uuid:60e4947b-d485-49a8-bafa-6e3b7ed021d5",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "When expressing a data integrity proof on an object, a proof property MUST be used."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=When%20expressing%20a%20data%20integrity%20proof%20on%20an%20object%2C%20a%20proof%20property%20MUST%20be%20used",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "When expressing a data integrity proof on an object, a proof property MUST be used.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=When%20expressing%20a%20data%20integrity%20proof%20on%20an%20object%2C%20a%20proof%20property%20MUST%20be%20used';\n      shouldHaveProof({vc: data});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "xOTyL_pngxXG6zAxtmZ9X",
              "ctx": null,
              "_testId": "urn:uuid:094ea808-f411-4020-a2bb-186f1b7435d7",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "When expressing a data integrity proof on an object, a proof property MUST be used."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=When%20expressing%20a%20data%20integrity%20proof%20on%20an%20object%2C%20a%20proof%20property%20MUST%20be%20used",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "When expressing a data integrity proof on an object, a proof property MUST be used.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=When%20expressing%20a%20data%20integrity%20proof%20on%20an%20object%2C%20a%20proof%20property%20MUST%20be%20used';\n      shouldHaveProof({vc: data});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "sXugKi3EYzvQ4jDPv9Cum",
              "ctx": null,
              "_testId": "urn:uuid:a5582662-02d9-41df-8906-662a87686531",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "When expressing a data integrity proof on an object, a proof property MUST be used."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=When%20expressing%20a%20data%20integrity%20proof%20on%20an%20object%2C%20a%20proof%20property%20MUST%20be%20used",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "When expressing a data integrity proof on an object, a proof property MUST be used.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=When%20expressing%20a%20data%20integrity%20proof%20on%20an%20object%2C%20a%20proof%20property%20MUST%20be%20used';\n      shouldHaveProof({vc: data});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "f6heVhTijxDuwaLJorrQu",
              "ctx": null,
              "_testId": "urn:uuid:34a8202c-d644-4908-80b2-e54723f3bc19",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "When expressing a data integrity proof on an object, a proof property MUST be used."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=When%20expressing%20a%20data%20integrity%20proof%20on%20an%20object%2C%20a%20proof%20property%20MUST%20be%20used",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "When expressing a data integrity proof on an object, a proof property MUST be used.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=When%20expressing%20a%20data%20integrity%20proof%20on%20an%20object%2C%20a%20proof%20property%20MUST%20be%20used';\n      shouldHaveProof({vc: data});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "BuweDCyWH5cAZEiXmcMRL",
              "ctx": null,
              "_testId": "urn:uuid:9c12df7c-0073-4743-a61a-883979f5a335",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "When expressing a data integrity proof on an object, a proof property MUST be used."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=When%20expressing%20a%20data%20integrity%20proof%20on%20an%20object%2C%20a%20proof%20property%20MUST%20be%20used",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "When expressing a data integrity proof on an object, a proof property MUST be used.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=When%20expressing%20a%20data%20integrity%20proof%20on%20an%20object%2C%20a%20proof%20property%20MUST%20be%20used';\n      shouldHaveProof({vc: data});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "QgWH5Ws0hVGr8Go9Nx9iB",
              "ctx": null,
              "_testId": "urn:uuid:3a700206-befc-4d62-ab13-c23f9a1d335d",
              "cell": {
                "columnId": "bovine",
                "rowId": "When expressing a data integrity proof on an object, a proof property MUST be used."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=When%20expressing%20a%20data%20integrity%20proof%20on%20an%20object%2C%20a%20proof%20property%20MUST%20be%20used",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "If present (proof), its value MUST be either a single object, or an unordered set of objects.",
          "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=If%20present%2C%20its%20value%20MUST%20be%20either%20a%20single%20object%2C%20or%20an%20unordered%20set%20of%20objects",
          "cells": [
            {
              "cell": {
                "rowId": "If present (proof), its value MUST be either a single object, or an unordered set of objects.",
                "colId": "ACA-py"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            },
            {
              "type": "test",
              "title": "If present (proof), its value MUST be either a single object, or an unordered set of objects.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=If%20present%2C%20its%20value%20MUST%20be%20either%20a%20single%20object%2C%20or%20an%20unordered%20set%20of%20objects';\n      shouldHaveProof({vc: data});\n      const {proof} = data;\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "klQuj3iUSICZwUS6dWrwn",
              "ctx": null,
              "_testId": "urn:uuid:94aba806-d570-4982-9fc3-b42f4859c6a1",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If present (proof), its value MUST be either a single object, or an unordered set of objects."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=If%20present%2C%20its%20value%20MUST%20be%20either%20a%20single%20object%2C%20or%20an%20unordered%20set%20of%20objects",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If present (proof), its value MUST be either a single object, or an unordered set of objects.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=If%20present%2C%20its%20value%20MUST%20be%20either%20a%20single%20object%2C%20or%20an%20unordered%20set%20of%20objects';\n      shouldHaveProof({vc: data});\n      const {proof} = data;\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "KC40bcABMd1Vn680ttbkx",
              "ctx": null,
              "_testId": "urn:uuid:9a6ee3ac-e8fe-48b8-b7ca-1dbc68e14f7c",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If present (proof), its value MUST be either a single object, or an unordered set of objects."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=If%20present%2C%20its%20value%20MUST%20be%20either%20a%20single%20object%2C%20or%20an%20unordered%20set%20of%20objects",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If present (proof), its value MUST be either a single object, or an unordered set of objects.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=If%20present%2C%20its%20value%20MUST%20be%20either%20a%20single%20object%2C%20or%20an%20unordered%20set%20of%20objects';\n      shouldHaveProof({vc: data});\n      const {proof} = data;\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "xOTyL_pngxXG6zAxtmZ9X",
              "ctx": null,
              "_testId": "urn:uuid:3051a3d9-0dd8-421c-9d26-9ce039c74a86",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If present (proof), its value MUST be either a single object, or an unordered set of objects."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=If%20present%2C%20its%20value%20MUST%20be%20either%20a%20single%20object%2C%20or%20an%20unordered%20set%20of%20objects",
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If present (proof), its value MUST be either a single object, or an unordered set of objects.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=If%20present%2C%20its%20value%20MUST%20be%20either%20a%20single%20object%2C%20or%20an%20unordered%20set%20of%20objects';\n      shouldHaveProof({vc: data});\n      const {proof} = data;\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "sXugKi3EYzvQ4jDPv9Cum",
              "ctx": null,
              "_testId": "urn:uuid:6fa43f1d-066c-43a7-be25-26dd52611dd7",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "If present (proof), its value MUST be either a single object, or an unordered set of objects."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=If%20present%2C%20its%20value%20MUST%20be%20either%20a%20single%20object%2C%20or%20an%20unordered%20set%20of%20objects",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If present (proof), its value MUST be either a single object, or an unordered set of objects.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=If%20present%2C%20its%20value%20MUST%20be%20either%20a%20single%20object%2C%20or%20an%20unordered%20set%20of%20objects';\n      shouldHaveProof({vc: data});\n      const {proof} = data;\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "f6heVhTijxDuwaLJorrQu",
              "ctx": null,
              "_testId": "urn:uuid:04aae9f6-9966-474d-9f32-8881b31f76f4",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If present (proof), its value MUST be either a single object, or an unordered set of objects."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=If%20present%2C%20its%20value%20MUST%20be%20either%20a%20single%20object%2C%20or%20an%20unordered%20set%20of%20objects",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If present (proof), its value MUST be either a single object, or an unordered set of objects.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=If%20present%2C%20its%20value%20MUST%20be%20either%20a%20single%20object%2C%20or%20an%20unordered%20set%20of%20objects';\n      shouldHaveProof({vc: data});\n      const {proof} = data;\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "BuweDCyWH5cAZEiXmcMRL",
              "ctx": null,
              "_testId": "urn:uuid:27086a11-7618-4bfa-a778-53481f78e031",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "If present (proof), its value MUST be either a single object, or an unordered set of objects."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=If%20present%2C%20its%20value%20MUST%20be%20either%20a%20single%20object%2C%20or%20an%20unordered%20set%20of%20objects",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If present (proof), its value MUST be either a single object, or an unordered set of objects.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=If%20present%2C%20its%20value%20MUST%20be%20either%20a%20single%20object%2C%20or%20an%20unordered%20set%20of%20objects';\n      shouldHaveProof({vc: data});\n      const {proof} = data;\n      const validType = isObjectOrArrayOfObjects(proof);\n      validType.should.equal(true, 'Expected proof to be' +\n        'either an object or an unordered set of objects.');\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "QgWH5Ws0hVGr8Go9Nx9iB",
              "ctx": null,
              "_testId": "urn:uuid:6a27909d-6db8-441f-9068-8690ff9bbb07",
              "cell": {
                "columnId": "bovine",
                "rowId": "If present (proof), its value MUST be either a single object, or an unordered set of objects."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=If%20present%2C%20its%20value%20MUST%20be%20either%20a%20single%20object%2C%20or%20an%20unordered%20set%20of%20objects",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "(\"proof.id\") An optional identifier for the proof, which MUST be a URL.",
          "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=An%20optional%20identifier%20for%20the%20proof%2C%20which%20MUST%20be%20a%20URL",
          "cells": [
            {
              "cell": {
                "rowId": "(\"proof.id\") An optional identifier for the proof, which MUST be a URL.",
                "colId": "ACA-py"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            },
            {
              "type": "test",
              "title": "(\"proof.id\") An optional identifier for the proof, which MUST be a URL.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=An%20optional%20identifier%20for%20the%20proof%2C%20which%20MUST%20be%20a%20URL';\n      for(const proof of proofs) {\n        if(proof.id) {\n          shouldBeUrl({url: proof.id, prop: 'proof.id'});\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "klQuj3iUSICZwUS6dWrwn",
              "ctx": null,
              "_testId": "urn:uuid:64a08c75-524a-4658-ad61-d46acf3daa0a",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "(\"proof.id\") An optional identifier for the proof, which MUST be a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=An%20optional%20identifier%20for%20the%20proof%2C%20which%20MUST%20be%20a%20URL",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.id\") An optional identifier for the proof, which MUST be a URL.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=An%20optional%20identifier%20for%20the%20proof%2C%20which%20MUST%20be%20a%20URL';\n      for(const proof of proofs) {\n        if(proof.id) {\n          shouldBeUrl({url: proof.id, prop: 'proof.id'});\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "KC40bcABMd1Vn680ttbkx",
              "ctx": null,
              "_testId": "urn:uuid:4d478258-41ee-4e36-9d34-de5d950282ed",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "(\"proof.id\") An optional identifier for the proof, which MUST be a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=An%20optional%20identifier%20for%20the%20proof%2C%20which%20MUST%20be%20a%20URL",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.id\") An optional identifier for the proof, which MUST be a URL.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=An%20optional%20identifier%20for%20the%20proof%2C%20which%20MUST%20be%20a%20URL';\n      for(const proof of proofs) {\n        if(proof.id) {\n          shouldBeUrl({url: proof.id, prop: 'proof.id'});\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "xOTyL_pngxXG6zAxtmZ9X",
              "ctx": null,
              "_testId": "urn:uuid:9e6cf4df-59b4-4e85-aba0-ec2664f0c82e",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "(\"proof.id\") An optional identifier for the proof, which MUST be a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=An%20optional%20identifier%20for%20the%20proof%2C%20which%20MUST%20be%20a%20URL",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.id\") An optional identifier for the proof, which MUST be a URL.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=An%20optional%20identifier%20for%20the%20proof%2C%20which%20MUST%20be%20a%20URL';\n      for(const proof of proofs) {\n        if(proof.id) {\n          shouldBeUrl({url: proof.id, prop: 'proof.id'});\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "sXugKi3EYzvQ4jDPv9Cum",
              "ctx": null,
              "_testId": "urn:uuid:b1f5a547-4007-4dac-bef4-52a4c3b73638",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "(\"proof.id\") An optional identifier for the proof, which MUST be a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=An%20optional%20identifier%20for%20the%20proof%2C%20which%20MUST%20be%20a%20URL",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.id\") An optional identifier for the proof, which MUST be a URL.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=An%20optional%20identifier%20for%20the%20proof%2C%20which%20MUST%20be%20a%20URL';\n      for(const proof of proofs) {\n        if(proof.id) {\n          shouldBeUrl({url: proof.id, prop: 'proof.id'});\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "f6heVhTijxDuwaLJorrQu",
              "ctx": null,
              "_testId": "urn:uuid:97ef3800-22e2-40e3-aeab-2c0becf9d926",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "(\"proof.id\") An optional identifier for the proof, which MUST be a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=An%20optional%20identifier%20for%20the%20proof%2C%20which%20MUST%20be%20a%20URL",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.id\") An optional identifier for the proof, which MUST be a URL.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=An%20optional%20identifier%20for%20the%20proof%2C%20which%20MUST%20be%20a%20URL';\n      for(const proof of proofs) {\n        if(proof.id) {\n          shouldBeUrl({url: proof.id, prop: 'proof.id'});\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "BuweDCyWH5cAZEiXmcMRL",
              "ctx": null,
              "_testId": "urn:uuid:13803295-4cca-479d-8fca-b39beb86d573",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "(\"proof.id\") An optional identifier for the proof, which MUST be a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=An%20optional%20identifier%20for%20the%20proof%2C%20which%20MUST%20be%20a%20URL",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.id\") An optional identifier for the proof, which MUST be a URL.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=An%20optional%20identifier%20for%20the%20proof%2C%20which%20MUST%20be%20a%20URL';\n      for(const proof of proofs) {\n        if(proof.id) {\n          shouldBeUrl({url: proof.id, prop: 'proof.id'});\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "QgWH5Ws0hVGr8Go9Nx9iB",
              "ctx": null,
              "_testId": "urn:uuid:e560adb9-b231-4d75-aedc-bdb0fce6b469",
              "cell": {
                "columnId": "bovine",
                "rowId": "(\"proof.id\") An optional identifier for the proof, which MUST be a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=An%20optional%20identifier%20for%20the%20proof%2C%20which%20MUST%20be%20a%20URL",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "The specific type of proof MUST be specified as a string that maps to a URL.",
          "link": "https://w3c.github.io/vc-data-integrity/#:~:text=The%20specific%20type%20of%20proof%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL",
          "cells": [
            {
              "cell": {
                "rowId": "The specific type of proof MUST be specified as a string that maps to a URL.",
                "colId": "ACA-py"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            },
            {
              "type": "test",
              "title": "The specific type of proof MUST be specified as a string that maps to a URL.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=The%20specific%20type%20of%20proof%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL';\n      const prop = '@type';\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n        const expanded = await jsonld.expand({\n          '@context': data['@context'],\n          type: proof.type\n        }, {documentLoader});\n        for(const term of expanded) {\n          const types = term[prop];\n          should.exist(types, 'Expected @type to exist.');\n          types.every(url => shouldBeUrl({url, prop}));\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "klQuj3iUSICZwUS6dWrwn",
              "ctx": null,
              "_testId": "urn:uuid:e25aeb0e-7d18-40fd-b270-27f7d434e788",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "The specific type of proof MUST be specified as a string that maps to a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=The%20specific%20type%20of%20proof%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1123,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 10,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The specific type of proof MUST be specified as a string that maps to a URL.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=The%20specific%20type%20of%20proof%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL';\n      const prop = '@type';\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n        const expanded = await jsonld.expand({\n          '@context': data['@context'],\n          type: proof.type\n        }, {documentLoader});\n        for(const term of expanded) {\n          const types = term[prop];\n          should.exist(types, 'Expected @type to exist.');\n          types.every(url => shouldBeUrl({url, prop}));\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "KC40bcABMd1Vn680ttbkx",
              "ctx": null,
              "_testId": "urn:uuid:77c10ede-e176-4542-8264-02b745055093",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The specific type of proof MUST be specified as a string that maps to a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=The%20specific%20type%20of%20proof%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1977,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The specific type of proof MUST be specified as a string that maps to a URL.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=The%20specific%20type%20of%20proof%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL';\n      const prop = '@type';\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n        const expanded = await jsonld.expand({\n          '@context': data['@context'],\n          type: proof.type\n        }, {documentLoader});\n        for(const term of expanded) {\n          const types = term[prop];\n          should.exist(types, 'Expected @type to exist.');\n          types.every(url => shouldBeUrl({url, prop}));\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "xOTyL_pngxXG6zAxtmZ9X",
              "ctx": null,
              "_testId": "urn:uuid:b6052309-cfe4-4aa7-8030-1ccce6213871",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The specific type of proof MUST be specified as a string that maps to a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=The%20specific%20type%20of%20proof%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2586,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The specific type of proof MUST be specified as a string that maps to a URL.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=The%20specific%20type%20of%20proof%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL';\n      const prop = '@type';\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n        const expanded = await jsonld.expand({\n          '@context': data['@context'],\n          type: proof.type\n        }, {documentLoader});\n        for(const term of expanded) {\n          const types = term[prop];\n          should.exist(types, 'Expected @type to exist.');\n          types.every(url => shouldBeUrl({url, prop}));\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "sXugKi3EYzvQ4jDPv9Cum",
              "ctx": null,
              "_testId": "urn:uuid:503cba08-da39-492c-a365-6f535db6c27b",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "The specific type of proof MUST be specified as a string that maps to a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=The%20specific%20type%20of%20proof%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3821,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected \"@type\" URL to be parsed.: expected TypeError: Invalid URL { …(2) } to not exist",
                "showDiff": false,
                "actual": {
                  "code": "ERR_INVALID_URL",
                  "input": "DataIntegrityProof"
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected \"@type\" URL to be parsed.: expected TypeError: Invalid URL { …(2) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at shouldBeUrl (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:197:14)\n    at file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/suites/create.js:82:30\n    at Array.every (<anonymous>)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/suites/create.js:82:17)"
              }
            },
            {
              "type": "test",
              "title": "The specific type of proof MUST be specified as a string that maps to a URL.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=The%20specific%20type%20of%20proof%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL';\n      const prop = '@type';\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n        const expanded = await jsonld.expand({\n          '@context': data['@context'],\n          type: proof.type\n        }, {documentLoader});\n        for(const term of expanded) {\n          const types = term[prop];\n          should.exist(types, 'Expected @type to exist.');\n          types.every(url => shouldBeUrl({url, prop}));\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "f6heVhTijxDuwaLJorrQu",
              "ctx": null,
              "_testId": "urn:uuid:1f6af18d-1338-43c3-90d3-1cb85dd3094f",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The specific type of proof MUST be specified as a string that maps to a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=The%20specific%20type%20of%20proof%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4555,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The specific type of proof MUST be specified as a string that maps to a URL.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=The%20specific%20type%20of%20proof%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL';\n      const prop = '@type';\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n        const expanded = await jsonld.expand({\n          '@context': data['@context'],\n          type: proof.type\n        }, {documentLoader});\n        for(const term of expanded) {\n          const types = term[prop];\n          should.exist(types, 'Expected @type to exist.');\n          types.every(url => shouldBeUrl({url, prop}));\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "BuweDCyWH5cAZEiXmcMRL",
              "ctx": null,
              "_testId": "urn:uuid:41469b1c-240c-48e6-b159-0b6d150684a4",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "The specific type of proof MUST be specified as a string that maps to a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=The%20specific%20type%20of%20proof%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5007,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "jsonld.InvalidUrl",
                "details": {
                  "code": "loading remote context failed",
                  "url": "https://w3id.org/security/data-integrity/v1",
                  "cause": {}
                }
              }
            },
            {
              "type": "test",
              "title": "The specific type of proof MUST be specified as a string that maps to a URL.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=The%20specific%20type%20of%20proof%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL';\n      const prop = '@type';\n      for(const proof of proofs) {\n        proof.should.have.property('type');\n        proof.type.should.be.a(\n          'string', 'Expected \"proof.type\" to be a string.');\n        const expanded = await jsonld.expand({\n          '@context': data['@context'],\n          type: proof.type\n        }, {documentLoader});\n        for(const term of expanded) {\n          const types = term[prop];\n          should.exist(types, 'Expected @type to exist.');\n          types.every(url => shouldBeUrl({url, prop}));\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "QgWH5Ws0hVGr8Go9Nx9iB",
              "ctx": null,
              "_testId": "urn:uuid:62781cff-e681-4337-87d6-363ee46fa34d",
              "cell": {
                "columnId": "bovine",
                "rowId": "The specific type of proof MUST be specified as a string that maps to a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=The%20specific%20type%20of%20proof%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5999,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "The type property MUST contain the string DataIntegrityProof.",
          "link": "https://w3c.github.io/vc-data-integrity/#contexts-and-vocabularies:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.",
          "cells": [
            {
              "cell": {
                "rowId": "The type property MUST contain the string DataIntegrityProof.",
                "colId": "ACA-py"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            },
            {
              "type": "test",
              "title": "The type property MUST contain the string DataIntegrityProof.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-data-integrity/#contexts-and-vocabularies:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.';\n          for(const proof of proofs) {\n            proof.should.have.property('type');\n            proof.type.should.be.a(\n              'string',\n              'Expected \"proof.type\" to be a string.'\n            );\n            const hasExpectedType = expectedProofTypes.includes(proof.type);\n            hasExpectedType.should.equal(\n              true,\n              `Expected \"proof.type\" to be one of ` +\n              `${expectedProofTypes} Received: ${proof.type}`);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "klQuj3iUSICZwUS6dWrwn",
              "ctx": null,
              "_testId": "urn:uuid:add735c5-061a-495e-9919-b77991e85a63",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "The type property MUST contain the string DataIntegrityProof."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#contexts-and-vocabularies:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1131,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The type property MUST contain the string DataIntegrityProof.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-data-integrity/#contexts-and-vocabularies:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.';\n          for(const proof of proofs) {\n            proof.should.have.property('type');\n            proof.type.should.be.a(\n              'string',\n              'Expected \"proof.type\" to be a string.'\n            );\n            const hasExpectedType = expectedProofTypes.includes(proof.type);\n            hasExpectedType.should.equal(\n              true,\n              `Expected \"proof.type\" to be one of ` +\n              `${expectedProofTypes} Received: ${proof.type}`);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "KC40bcABMd1Vn680ttbkx",
              "ctx": null,
              "_testId": "urn:uuid:2769c216-63de-4718-bb29-d4cdc8a43e7e",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The type property MUST contain the string DataIntegrityProof."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#contexts-and-vocabularies:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1978,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The type property MUST contain the string DataIntegrityProof.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-data-integrity/#contexts-and-vocabularies:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.';\n          for(const proof of proofs) {\n            proof.should.have.property('type');\n            proof.type.should.be.a(\n              'string',\n              'Expected \"proof.type\" to be a string.'\n            );\n            const hasExpectedType = expectedProofTypes.includes(proof.type);\n            hasExpectedType.should.equal(\n              true,\n              `Expected \"proof.type\" to be one of ` +\n              `${expectedProofTypes} Received: ${proof.type}`);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "xOTyL_pngxXG6zAxtmZ9X",
              "ctx": null,
              "_testId": "urn:uuid:0d5d0071-d365-40b7-a64e-56dbf4710228",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The type property MUST contain the string DataIntegrityProof."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#contexts-and-vocabularies:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2586,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The type property MUST contain the string DataIntegrityProof.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-data-integrity/#contexts-and-vocabularies:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.';\n          for(const proof of proofs) {\n            proof.should.have.property('type');\n            proof.type.should.be.a(\n              'string',\n              'Expected \"proof.type\" to be a string.'\n            );\n            const hasExpectedType = expectedProofTypes.includes(proof.type);\n            hasExpectedType.should.equal(\n              true,\n              `Expected \"proof.type\" to be one of ` +\n              `${expectedProofTypes} Received: ${proof.type}`);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "sXugKi3EYzvQ4jDPv9Cum",
              "ctx": null,
              "_testId": "urn:uuid:2460c795-fe01-4a1e-b4db-4d6eb98fb772",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "The type property MUST contain the string DataIntegrityProof."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#contexts-and-vocabularies:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3823,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The type property MUST contain the string DataIntegrityProof.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-data-integrity/#contexts-and-vocabularies:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.';\n          for(const proof of proofs) {\n            proof.should.have.property('type');\n            proof.type.should.be.a(\n              'string',\n              'Expected \"proof.type\" to be a string.'\n            );\n            const hasExpectedType = expectedProofTypes.includes(proof.type);\n            hasExpectedType.should.equal(\n              true,\n              `Expected \"proof.type\" to be one of ` +\n              `${expectedProofTypes} Received: ${proof.type}`);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "f6heVhTijxDuwaLJorrQu",
              "ctx": null,
              "_testId": "urn:uuid:33d7c97d-c60a-4307-8744-e83566decc47",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The type property MUST contain the string DataIntegrityProof."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#contexts-and-vocabularies:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4556,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The type property MUST contain the string DataIntegrityProof.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-data-integrity/#contexts-and-vocabularies:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.';\n          for(const proof of proofs) {\n            proof.should.have.property('type');\n            proof.type.should.be.a(\n              'string',\n              'Expected \"proof.type\" to be a string.'\n            );\n            const hasExpectedType = expectedProofTypes.includes(proof.type);\n            hasExpectedType.should.equal(\n              true,\n              `Expected \"proof.type\" to be one of ` +\n              `${expectedProofTypes} Received: ${proof.type}`);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "BuweDCyWH5cAZEiXmcMRL",
              "ctx": null,
              "_testId": "urn:uuid:a3aa1e9c-1795-45f1-a8ee-a07966129393",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "The type property MUST contain the string DataIntegrityProof."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#contexts-and-vocabularies:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5008,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The type property MUST contain the string DataIntegrityProof.",
              "body": "async function() {\n          this.test.link = 'https://w3c.github.io/vc-data-integrity/#contexts-and-vocabularies:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.';\n          for(const proof of proofs) {\n            proof.should.have.property('type');\n            proof.type.should.be.a(\n              'string',\n              'Expected \"proof.type\" to be a string.'\n            );\n            const hasExpectedType = expectedProofTypes.includes(proof.type);\n            hasExpectedType.should.equal(\n              true,\n              `Expected \"proof.type\" to be one of ` +\n              `${expectedProofTypes} Received: ${proof.type}`);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "QgWH5Ws0hVGr8Go9Nx9iB",
              "ctx": null,
              "_testId": "urn:uuid:f4669e10-8364-4776-9b30-2fbf9bb6c88a",
              "cell": {
                "columnId": "bovine",
                "rowId": "The type property MUST contain the string DataIntegrityProof."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#contexts-and-vocabularies:~:text=The%20type%20property%20MUST%20contain%20the%20string%20DataIntegrityProof.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6000,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
          "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.",
          "cells": [
            {
              "cell": {
                "rowId": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
                "colId": "ACA-py"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            },
            {
              "type": "test",
              "title": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
              "body": "function() {\n          this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.';\n          for(const proof of proofs) {\n            should.exist(proof, 'Expected proof to exist.');\n            if(proof.type === 'DataIntegrityProof') {\n              should.exist(proof.cryptosuite,\n                'Expected proof to have property \"cryptosuite\".');\n            }\n            const {\n              prefix: expectedPrefix,\n              name: encodingName\n            } = expectedMultibasePrefix(proof.cryptosuite);\n            shouldHaveProofValue({proof, expectedPrefix, encodingName});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "klQuj3iUSICZwUS6dWrwn",
              "ctx": null,
              "_testId": "urn:uuid:42722cc0-f9a2-41ed-87d8-df629a08134c",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "The proofValue property MUST be used, as specified in 2.1 Proofs."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
              "body": "function() {\n          this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.';\n          for(const proof of proofs) {\n            should.exist(proof, 'Expected proof to exist.');\n            if(proof.type === 'DataIntegrityProof') {\n              should.exist(proof.cryptosuite,\n                'Expected proof to have property \"cryptosuite\".');\n            }\n            const {\n              prefix: expectedPrefix,\n              name: encodingName\n            } = expectedMultibasePrefix(proof.cryptosuite);\n            shouldHaveProofValue({proof, expectedPrefix, encodingName});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "KC40bcABMd1Vn680ttbkx",
              "ctx": null,
              "_testId": "urn:uuid:41d382a5-b66a-4763-a821-3fae7456cedb",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The proofValue property MUST be used, as specified in 2.1 Proofs."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
              "body": "function() {\n          this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.';\n          for(const proof of proofs) {\n            should.exist(proof, 'Expected proof to exist.');\n            if(proof.type === 'DataIntegrityProof') {\n              should.exist(proof.cryptosuite,\n                'Expected proof to have property \"cryptosuite\".');\n            }\n            const {\n              prefix: expectedPrefix,\n              name: encodingName\n            } = expectedMultibasePrefix(proof.cryptosuite);\n            shouldHaveProofValue({proof, expectedPrefix, encodingName});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "xOTyL_pngxXG6zAxtmZ9X",
              "ctx": null,
              "_testId": "urn:uuid:cad03863-3038-40cb-b18a-b71f94cd8ca9",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The proofValue property MUST be used, as specified in 2.1 Proofs."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
              "body": "function() {\n          this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.';\n          for(const proof of proofs) {\n            should.exist(proof, 'Expected proof to exist.');\n            if(proof.type === 'DataIntegrityProof') {\n              should.exist(proof.cryptosuite,\n                'Expected proof to have property \"cryptosuite\".');\n            }\n            const {\n              prefix: expectedPrefix,\n              name: encodingName\n            } = expectedMultibasePrefix(proof.cryptosuite);\n            shouldHaveProofValue({proof, expectedPrefix, encodingName});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "sXugKi3EYzvQ4jDPv9Cum",
              "ctx": null,
              "_testId": "urn:uuid:b3ed6890-c624-46c9-b3d4-24e4f56f86af",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "The proofValue property MUST be used, as specified in 2.1 Proofs."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
              "body": "function() {\n          this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.';\n          for(const proof of proofs) {\n            should.exist(proof, 'Expected proof to exist.');\n            if(proof.type === 'DataIntegrityProof') {\n              should.exist(proof.cryptosuite,\n                'Expected proof to have property \"cryptosuite\".');\n            }\n            const {\n              prefix: expectedPrefix,\n              name: encodingName\n            } = expectedMultibasePrefix(proof.cryptosuite);\n            shouldHaveProofValue({proof, expectedPrefix, encodingName});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "f6heVhTijxDuwaLJorrQu",
              "ctx": null,
              "_testId": "urn:uuid:7f52921e-5aaa-45e5-9dfb-97b4ca8601af",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The proofValue property MUST be used, as specified in 2.1 Proofs."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
              "body": "function() {\n          this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.';\n          for(const proof of proofs) {\n            should.exist(proof, 'Expected proof to exist.');\n            if(proof.type === 'DataIntegrityProof') {\n              should.exist(proof.cryptosuite,\n                'Expected proof to have property \"cryptosuite\".');\n            }\n            const {\n              prefix: expectedPrefix,\n              name: encodingName\n            } = expectedMultibasePrefix(proof.cryptosuite);\n            shouldHaveProofValue({proof, expectedPrefix, encodingName});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "BuweDCyWH5cAZEiXmcMRL",
              "ctx": null,
              "_testId": "urn:uuid:9e5b0db2-b8d4-47cb-8a3d-c1cc6731977a",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "The proofValue property MUST be used, as specified in 2.1 Proofs."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
              "body": "function() {\n          this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.';\n          for(const proof of proofs) {\n            should.exist(proof, 'Expected proof to exist.');\n            if(proof.type === 'DataIntegrityProof') {\n              should.exist(proof.cryptosuite,\n                'Expected proof to have property \"cryptosuite\".');\n            }\n            const {\n              prefix: expectedPrefix,\n              name: encodingName\n            } = expectedMultibasePrefix(proof.cryptosuite);\n            shouldHaveProofValue({proof, expectedPrefix, encodingName});\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "QgWH5Ws0hVGr8Go9Nx9iB",
              "ctx": null,
              "_testId": "urn:uuid:5876664e-9667-4cde-ae49-9dd2ba5ea20d",
              "cell": {
                "columnId": "bovine",
                "rowId": "The proofValue property MUST be used, as specified in 2.1 Proofs."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified.",
          "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.",
          "cells": [
            {
              "cell": {
                "rowId": "If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified.",
                "colId": "ACA-py"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            },
            {
              "type": "test",
              "title": "If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.';\n      for(const proof of proofs) {\n        if(proof.type && proof.type === 'DataIntegrityProof') {\n          should.exist(\n            proof.cryptosuite,\n            'If the proof type is DataIntegrityProof, cryptosuite MUST ' +\n            'be specified');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "klQuj3iUSICZwUS6dWrwn",
              "ctx": null,
              "_testId": "urn:uuid:b93c0e70-d16b-4e29-9769-76926e299f1e",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.';\n      for(const proof of proofs) {\n        if(proof.type && proof.type === 'DataIntegrityProof') {\n          should.exist(\n            proof.cryptosuite,\n            'If the proof type is DataIntegrityProof, cryptosuite MUST ' +\n            'be specified');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "KC40bcABMd1Vn680ttbkx",
              "ctx": null,
              "_testId": "urn:uuid:ec6aadfe-14e9-4254-b394-186bc8431fcf",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.';\n      for(const proof of proofs) {\n        if(proof.type && proof.type === 'DataIntegrityProof') {\n          should.exist(\n            proof.cryptosuite,\n            'If the proof type is DataIntegrityProof, cryptosuite MUST ' +\n            'be specified');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "xOTyL_pngxXG6zAxtmZ9X",
              "ctx": null,
              "_testId": "urn:uuid:366cdd70-1481-4820-88a9-037f89639bba",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.';\n      for(const proof of proofs) {\n        if(proof.type && proof.type === 'DataIntegrityProof') {\n          should.exist(\n            proof.cryptosuite,\n            'If the proof type is DataIntegrityProof, cryptosuite MUST ' +\n            'be specified');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "sXugKi3EYzvQ4jDPv9Cum",
              "ctx": null,
              "_testId": "urn:uuid:1c525c43-de6c-427b-a634-b7a00f13e113",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.';\n      for(const proof of proofs) {\n        if(proof.type && proof.type === 'DataIntegrityProof') {\n          should.exist(\n            proof.cryptosuite,\n            'If the proof type is DataIntegrityProof, cryptosuite MUST ' +\n            'be specified');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "f6heVhTijxDuwaLJorrQu",
              "ctx": null,
              "_testId": "urn:uuid:4aa66939-53ce-40ae-98eb-09ea419208df",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.';\n      for(const proof of proofs) {\n        if(proof.type && proof.type === 'DataIntegrityProof') {\n          should.exist(\n            proof.cryptosuite,\n            'If the proof type is DataIntegrityProof, cryptosuite MUST ' +\n            'be specified');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "BuweDCyWH5cAZEiXmcMRL",
              "ctx": null,
              "_testId": "urn:uuid:91766cce-e21a-4da1-b652-5c32f8e3c808",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.';\n      for(const proof of proofs) {\n        if(proof.type && proof.type === 'DataIntegrityProof') {\n          should.exist(\n            proof.cryptosuite,\n            'If the proof type is DataIntegrityProof, cryptosuite MUST ' +\n            'be specified');\n        }\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "QgWH5Ws0hVGr8Go9Nx9iB",
              "ctx": null,
              "_testId": "urn:uuid:eae6f86e-e883-408a-a160-0d6ee301a275",
              "cell": {
                "columnId": "bovine",
                "rowId": "If the proof type is DataIntegrityProof, cryptosuite MUST be specified; otherwise, cryptosuite MAY be specified."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "If specified (proof.cryptosuite), its value MUST be a string.",
          "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.",
          "cells": [
            {
              "cell": {
                "rowId": "If specified (proof.cryptosuite), its value MUST be a string.",
                "colId": "ACA-py"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            },
            {
              "type": "test",
              "title": "If specified (proof.cryptosuite), its value MUST be a string.",
              "body": "function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.';\n        for(const proof of proofs) {\n          if(proof.cryptosuite) {\n            proof.cryptosuite.should.be.a(\n              'string',\n              'cryptosuite value MUST be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "klQuj3iUSICZwUS6dWrwn",
              "ctx": null,
              "_testId": "urn:uuid:29484244-f821-409c-9246-2108c42efc56",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If specified (proof.cryptosuite), its value MUST be a string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If specified (proof.cryptosuite), its value MUST be a string.",
              "body": "function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.';\n        for(const proof of proofs) {\n          if(proof.cryptosuite) {\n            proof.cryptosuite.should.be.a(\n              'string',\n              'cryptosuite value MUST be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "KC40bcABMd1Vn680ttbkx",
              "ctx": null,
              "_testId": "urn:uuid:f3c312ed-d004-43fb-8ba9-7a41aa274adb",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If specified (proof.cryptosuite), its value MUST be a string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If specified (proof.cryptosuite), its value MUST be a string.",
              "body": "function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.';\n        for(const proof of proofs) {\n          if(proof.cryptosuite) {\n            proof.cryptosuite.should.be.a(\n              'string',\n              'cryptosuite value MUST be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "xOTyL_pngxXG6zAxtmZ9X",
              "ctx": null,
              "_testId": "urn:uuid:c45ffb4f-20e9-4f90-abd0-3ea250cbae68",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If specified (proof.cryptosuite), its value MUST be a string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If specified (proof.cryptosuite), its value MUST be a string.",
              "body": "function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.';\n        for(const proof of proofs) {\n          if(proof.cryptosuite) {\n            proof.cryptosuite.should.be.a(\n              'string',\n              'cryptosuite value MUST be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "sXugKi3EYzvQ4jDPv9Cum",
              "ctx": null,
              "_testId": "urn:uuid:e8607705-062a-41d5-9122-5850c983d5d9",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "If specified (proof.cryptosuite), its value MUST be a string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If specified (proof.cryptosuite), its value MUST be a string.",
              "body": "function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.';\n        for(const proof of proofs) {\n          if(proof.cryptosuite) {\n            proof.cryptosuite.should.be.a(\n              'string',\n              'cryptosuite value MUST be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "f6heVhTijxDuwaLJorrQu",
              "ctx": null,
              "_testId": "urn:uuid:2faafe43-3aa6-4c2e-9826-9eea8348c364",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If specified (proof.cryptosuite), its value MUST be a string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If specified (proof.cryptosuite), its value MUST be a string.",
              "body": "function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.';\n        for(const proof of proofs) {\n          if(proof.cryptosuite) {\n            proof.cryptosuite.should.be.a(\n              'string',\n              'cryptosuite value MUST be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "BuweDCyWH5cAZEiXmcMRL",
              "ctx": null,
              "_testId": "urn:uuid:ad233843-1aa0-44df-ba5f-6a8dce414b8e",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "If specified (proof.cryptosuite), its value MUST be a string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If specified (proof.cryptosuite), its value MUST be a string.",
              "body": "function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.';\n        for(const proof of proofs) {\n          if(proof.cryptosuite) {\n            proof.cryptosuite.should.be.a(\n              'string',\n              'cryptosuite value MUST be a string.');\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "QgWH5Ws0hVGr8Go9Nx9iB",
              "ctx": null,
              "_testId": "urn:uuid:dd71631e-e8a7-422c-934f-3ea3801d89e1",
              "cell": {
                "columnId": "bovine",
                "rowId": "If specified (proof.cryptosuite), its value MUST be a string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=If%20the%20proof%20type%20is%20DataIntegrityProof%2C%20cryptosuite%20MUST%20be%20specified%3B%20otherwise%2C%20cryptosuite%20MAY%20be%20specified.%20If%20specified%2C%20its%20value%20MUST%20be%20a%20string.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "A verification method is the means and information needed to verify the proof. If included, the value MUST be a string that maps to a [URL].",
          "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=A%20verification%20method%20is%20the%20means%20and%20information%20needed%20to%20verify%20the%20proof.%20If%20included%2C%20the%20value%20MUST%20be%20a%20string%20that%20maps%20to%20a%20%5BURL%5D.",
          "cells": [
            {
              "cell": {
                "rowId": "A verification method is the means and information needed to verify the proof. If included, the value MUST be a string that maps to a [URL].",
                "colId": "ACA-py"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            },
            {
              "type": "test",
              "title": "A verification method is the means and information needed to verify the proof. If included, the value MUST be a string that maps to a [URL].",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=A%20verification%20method%20is%20the%20means%20and%20information%20needed%20to%20verify%20the%20proof.%20If%20included%2C%20the%20value%20MUST%20be%20a%20string%20that%20maps%20to%20a%20%5BURL%5D.';\n      for(const proof of proofs) {\n        if(!data || !data?.['@context']) {\n          throw new Error(`Expected ${vendorName} to issue a VC.`);\n        }\n        await shouldMapToUrl({\n          doc: {\n            '@context': data['@context'],\n            ...proof\n          },\n          term: 'https://w3id.org/security#verificationMethod',\n          prop: '@id',\n          documentLoader\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "klQuj3iUSICZwUS6dWrwn",
              "ctx": null,
              "_testId": "urn:uuid:825b4bd5-d00d-4da4-a01f-3526a4d99bb5",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "A verification method is the means and information needed to verify the proof. If included, the value MUST be a string that maps to a [URL]."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=A%20verification%20method%20is%20the%20means%20and%20information%20needed%20to%20verify%20the%20proof.%20If%20included%2C%20the%20value%20MUST%20be%20a%20string%20that%20maps%20to%20a%20%5BURL%5D.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1133,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 2,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "A verification method is the means and information needed to verify the proof. If included, the value MUST be a string that maps to a [URL].",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=A%20verification%20method%20is%20the%20means%20and%20information%20needed%20to%20verify%20the%20proof.%20If%20included%2C%20the%20value%20MUST%20be%20a%20string%20that%20maps%20to%20a%20%5BURL%5D.';\n      for(const proof of proofs) {\n        if(!data || !data?.['@context']) {\n          throw new Error(`Expected ${vendorName} to issue a VC.`);\n        }\n        await shouldMapToUrl({\n          doc: {\n            '@context': data['@context'],\n            ...proof\n          },\n          term: 'https://w3id.org/security#verificationMethod',\n          prop: '@id',\n          documentLoader\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "KC40bcABMd1Vn680ttbkx",
              "ctx": null,
              "_testId": "urn:uuid:0c9df20a-a204-46fc-a72c-f713e9698cff",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "A verification method is the means and information needed to verify the proof. If included, the value MUST be a string that maps to a [URL]."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=A%20verification%20method%20is%20the%20means%20and%20information%20needed%20to%20verify%20the%20proof.%20If%20included%2C%20the%20value%20MUST%20be%20a%20string%20that%20maps%20to%20a%20%5BURL%5D.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1979,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "A verification method is the means and information needed to verify the proof. If included, the value MUST be a string that maps to a [URL].",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=A%20verification%20method%20is%20the%20means%20and%20information%20needed%20to%20verify%20the%20proof.%20If%20included%2C%20the%20value%20MUST%20be%20a%20string%20that%20maps%20to%20a%20%5BURL%5D.';\n      for(const proof of proofs) {\n        if(!data || !data?.['@context']) {\n          throw new Error(`Expected ${vendorName} to issue a VC.`);\n        }\n        await shouldMapToUrl({\n          doc: {\n            '@context': data['@context'],\n            ...proof\n          },\n          term: 'https://w3id.org/security#verificationMethod',\n          prop: '@id',\n          documentLoader\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "xOTyL_pngxXG6zAxtmZ9X",
              "ctx": null,
              "_testId": "urn:uuid:3e378550-86a3-40ea-a79b-a7cdce7dbe1b",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "A verification method is the means and information needed to verify the proof. If included, the value MUST be a string that maps to a [URL]."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=A%20verification%20method%20is%20the%20means%20and%20information%20needed%20to%20verify%20the%20proof.%20If%20included%2C%20the%20value%20MUST%20be%20a%20string%20that%20maps%20to%20a%20%5BURL%5D.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2587,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "A verification method is the means and information needed to verify the proof. If included, the value MUST be a string that maps to a [URL].",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=A%20verification%20method%20is%20the%20means%20and%20information%20needed%20to%20verify%20the%20proof.%20If%20included%2C%20the%20value%20MUST%20be%20a%20string%20that%20maps%20to%20a%20%5BURL%5D.';\n      for(const proof of proofs) {\n        if(!data || !data?.['@context']) {\n          throw new Error(`Expected ${vendorName} to issue a VC.`);\n        }\n        await shouldMapToUrl({\n          doc: {\n            '@context': data['@context'],\n            ...proof\n          },\n          term: 'https://w3id.org/security#verificationMethod',\n          prop: '@id',\n          documentLoader\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "sXugKi3EYzvQ4jDPv9Cum",
              "ctx": null,
              "_testId": "urn:uuid:2170ac00-55b4-4ce9-8153-32953fa97aef",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "A verification method is the means and information needed to verify the proof. If included, the value MUST be a string that maps to a [URL]."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=A%20verification%20method%20is%20the%20means%20and%20information%20needed%20to%20verify%20the%20proof.%20If%20included%2C%20the%20value%20MUST%20be%20a%20string%20that%20maps%20to%20a%20%5BURL%5D.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3824,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected property \"https://w3id.org/security#verificationMethod\" to exist.: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected property \"https://w3id.org/security#verificationMethod\" to exist.: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at shouldMapToUrl (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:215:12)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/suites/create.js:174:9)"
              }
            },
            {
              "type": "test",
              "title": "A verification method is the means and information needed to verify the proof. If included, the value MUST be a string that maps to a [URL].",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=A%20verification%20method%20is%20the%20means%20and%20information%20needed%20to%20verify%20the%20proof.%20If%20included%2C%20the%20value%20MUST%20be%20a%20string%20that%20maps%20to%20a%20%5BURL%5D.';\n      for(const proof of proofs) {\n        if(!data || !data?.['@context']) {\n          throw new Error(`Expected ${vendorName} to issue a VC.`);\n        }\n        await shouldMapToUrl({\n          doc: {\n            '@context': data['@context'],\n            ...proof\n          },\n          term: 'https://w3id.org/security#verificationMethod',\n          prop: '@id',\n          documentLoader\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "f6heVhTijxDuwaLJorrQu",
              "ctx": null,
              "_testId": "urn:uuid:777eb734-f6da-4faa-bca6-f9acdb797638",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "A verification method is the means and information needed to verify the proof. If included, the value MUST be a string that maps to a [URL]."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=A%20verification%20method%20is%20the%20means%20and%20information%20needed%20to%20verify%20the%20proof.%20If%20included%2C%20the%20value%20MUST%20be%20a%20string%20that%20maps%20to%20a%20%5BURL%5D.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4557,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "A verification method is the means and information needed to verify the proof. If included, the value MUST be a string that maps to a [URL].",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=A%20verification%20method%20is%20the%20means%20and%20information%20needed%20to%20verify%20the%20proof.%20If%20included%2C%20the%20value%20MUST%20be%20a%20string%20that%20maps%20to%20a%20%5BURL%5D.';\n      for(const proof of proofs) {\n        if(!data || !data?.['@context']) {\n          throw new Error(`Expected ${vendorName} to issue a VC.`);\n        }\n        await shouldMapToUrl({\n          doc: {\n            '@context': data['@context'],\n            ...proof\n          },\n          term: 'https://w3id.org/security#verificationMethod',\n          prop: '@id',\n          documentLoader\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "BuweDCyWH5cAZEiXmcMRL",
              "ctx": null,
              "_testId": "urn:uuid:8ef0eb29-5952-43e2-b7d0-6d0d0c8c43d6",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "A verification method is the means and information needed to verify the proof. If included, the value MUST be a string that maps to a [URL]."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=A%20verification%20method%20is%20the%20means%20and%20information%20needed%20to%20verify%20the%20proof.%20If%20included%2C%20the%20value%20MUST%20be%20a%20string%20that%20maps%20to%20a%20%5BURL%5D.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5008,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "jsonld.InvalidUrl",
                "details": {
                  "code": "loading remote context failed",
                  "url": "https://w3id.org/security/data-integrity/v1",
                  "cause": {}
                }
              }
            },
            {
              "type": "test",
              "title": "A verification method is the means and information needed to verify the proof. If included, the value MUST be a string that maps to a [URL].",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=A%20verification%20method%20is%20the%20means%20and%20information%20needed%20to%20verify%20the%20proof.%20If%20included%2C%20the%20value%20MUST%20be%20a%20string%20that%20maps%20to%20a%20%5BURL%5D.';\n      for(const proof of proofs) {\n        if(!data || !data?.['@context']) {\n          throw new Error(`Expected ${vendorName} to issue a VC.`);\n        }\n        await shouldMapToUrl({\n          doc: {\n            '@context': data['@context'],\n            ...proof\n          },\n          term: 'https://w3id.org/security#verificationMethod',\n          prop: '@id',\n          documentLoader\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "QgWH5Ws0hVGr8Go9Nx9iB",
              "ctx": null,
              "_testId": "urn:uuid:cd082de8-fe34-490b-9b01-492b8dd60723",
              "cell": {
                "columnId": "bovine",
                "rowId": "A verification method is the means and information needed to verify the proof. If included, the value MUST be a string that maps to a [URL]."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=A%20verification%20method%20is%20the%20means%20and%20information%20needed%20to%20verify%20the%20proof.%20If%20included%2C%20the%20value%20MUST%20be%20a%20string%20that%20maps%20to%20a%20%5BURL%5D.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6000,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "The reason the proof was created (\"proof.proofPurpose\") MUST be specified as a string that maps to a URL.",
          "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20reason%20the%20proof%20was%20created%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL",
          "cells": [
            {
              "cell": {
                "rowId": "The reason the proof was created (\"proof.proofPurpose\") MUST be specified as a string that maps to a URL.",
                "colId": "ACA-py"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            },
            {
              "type": "test",
              "title": "The reason the proof was created (\"proof.proofPurpose\") MUST be specified as a string that maps to a URL.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20reason%20the%20proof%20was%20created%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL';\n      for(const proof of proofs) {\n        proof.should.have.property('proofPurpose');\n        proof.proofPurpose.should.be.a('string');\n        await shouldMapToUrl({\n          doc: {\n            '@context': data['@context'],\n            ...proof\n          },\n          term: 'https://w3id.org/security#proofPurpose',\n          prop: '@id',\n          documentLoader\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "klQuj3iUSICZwUS6dWrwn",
              "ctx": null,
              "_testId": "urn:uuid:996dfb7a-1102-4122-92f3-8085ccc40f55",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "The reason the proof was created (\"proof.proofPurpose\") MUST be specified as a string that maps to a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20reason%20the%20proof%20was%20created%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1135,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The reason the proof was created (\"proof.proofPurpose\") MUST be specified as a string that maps to a URL.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20reason%20the%20proof%20was%20created%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL';\n      for(const proof of proofs) {\n        proof.should.have.property('proofPurpose');\n        proof.proofPurpose.should.be.a('string');\n        await shouldMapToUrl({\n          doc: {\n            '@context': data['@context'],\n            ...proof\n          },\n          term: 'https://w3id.org/security#proofPurpose',\n          prop: '@id',\n          documentLoader\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "KC40bcABMd1Vn680ttbkx",
              "ctx": null,
              "_testId": "urn:uuid:af22e85d-a0c4-47f4-a7a6-52f2273cf974",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The reason the proof was created (\"proof.proofPurpose\") MUST be specified as a string that maps to a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20reason%20the%20proof%20was%20created%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1980,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The reason the proof was created (\"proof.proofPurpose\") MUST be specified as a string that maps to a URL.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20reason%20the%20proof%20was%20created%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL';\n      for(const proof of proofs) {\n        proof.should.have.property('proofPurpose');\n        proof.proofPurpose.should.be.a('string');\n        await shouldMapToUrl({\n          doc: {\n            '@context': data['@context'],\n            ...proof\n          },\n          term: 'https://w3id.org/security#proofPurpose',\n          prop: '@id',\n          documentLoader\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "xOTyL_pngxXG6zAxtmZ9X",
              "ctx": null,
              "_testId": "urn:uuid:794da263-90a0-4c20-a684-7057907602f4",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The reason the proof was created (\"proof.proofPurpose\") MUST be specified as a string that maps to a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20reason%20the%20proof%20was%20created%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2589,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The reason the proof was created (\"proof.proofPurpose\") MUST be specified as a string that maps to a URL.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20reason%20the%20proof%20was%20created%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL';\n      for(const proof of proofs) {\n        proof.should.have.property('proofPurpose');\n        proof.proofPurpose.should.be.a('string');\n        await shouldMapToUrl({\n          doc: {\n            '@context': data['@context'],\n            ...proof\n          },\n          term: 'https://w3id.org/security#proofPurpose',\n          prop: '@id',\n          documentLoader\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "sXugKi3EYzvQ4jDPv9Cum",
              "ctx": null,
              "_testId": "urn:uuid:d3f8b257-9542-4ed7-ba65-15c4ed21dae4",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "The reason the proof was created (\"proof.proofPurpose\") MUST be specified as a string that maps to a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20reason%20the%20proof%20was%20created%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3825,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected property \"https://w3id.org/security#proofPurpose\" to exist.: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected property \"https://w3id.org/security#proofPurpose\" to exist.: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at shouldMapToUrl (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:215:12)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/suites/create.js:191:9)"
              }
            },
            {
              "type": "test",
              "title": "The reason the proof was created (\"proof.proofPurpose\") MUST be specified as a string that maps to a URL.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20reason%20the%20proof%20was%20created%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL';\n      for(const proof of proofs) {\n        proof.should.have.property('proofPurpose');\n        proof.proofPurpose.should.be.a('string');\n        await shouldMapToUrl({\n          doc: {\n            '@context': data['@context'],\n            ...proof\n          },\n          term: 'https://w3id.org/security#proofPurpose',\n          prop: '@id',\n          documentLoader\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "f6heVhTijxDuwaLJorrQu",
              "ctx": null,
              "_testId": "urn:uuid:5a76c094-d3fa-416c-a07a-51cfe4b8dd36",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The reason the proof was created (\"proof.proofPurpose\") MUST be specified as a string that maps to a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20reason%20the%20proof%20was%20created%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4558,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The reason the proof was created (\"proof.proofPurpose\") MUST be specified as a string that maps to a URL.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20reason%20the%20proof%20was%20created%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL';\n      for(const proof of proofs) {\n        proof.should.have.property('proofPurpose');\n        proof.proofPurpose.should.be.a('string');\n        await shouldMapToUrl({\n          doc: {\n            '@context': data['@context'],\n            ...proof\n          },\n          term: 'https://w3id.org/security#proofPurpose',\n          prop: '@id',\n          documentLoader\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "BuweDCyWH5cAZEiXmcMRL",
              "ctx": null,
              "_testId": "urn:uuid:2fe2ba35-86a9-4014-ad70-deb02faaabfb",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "The reason the proof was created (\"proof.proofPurpose\") MUST be specified as a string that maps to a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20reason%20the%20proof%20was%20created%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5009,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "jsonld.InvalidUrl",
                "details": {
                  "code": "loading remote context failed",
                  "url": "https://w3id.org/security/data-integrity/v1",
                  "cause": {}
                }
              }
            },
            {
              "type": "test",
              "title": "The reason the proof was created (\"proof.proofPurpose\") MUST be specified as a string that maps to a URL.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20reason%20the%20proof%20was%20created%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL';\n      for(const proof of proofs) {\n        proof.should.have.property('proofPurpose');\n        proof.proofPurpose.should.be.a('string');\n        await shouldMapToUrl({\n          doc: {\n            '@context': data['@context'],\n            ...proof\n          },\n          term: 'https://w3id.org/security#proofPurpose',\n          prop: '@id',\n          documentLoader\n        });\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "QgWH5Ws0hVGr8Go9Nx9iB",
              "ctx": null,
              "_testId": "urn:uuid:1e51d863-b384-41ac-84b1-2e907a154ced",
              "cell": {
                "columnId": "bovine",
                "rowId": "The reason the proof was created (\"proof.proofPurpose\") MUST be specified as a string that maps to a URL."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20reason%20the%20proof%20was%20created%20MUST%20be%20specified%20as%20a%20string%20that%20maps%20to%20a%20URL",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6001,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "(\"proof.proofValue\") A string value that expresses base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The value MUST use a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification to express the binary data.",
          "link": "https://w3c.github.io/vc-data-integrity/#:~:text=A%20string%20value%20that%20expresses%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof%20using%20the%20verificationMethod%20specified.%20The%20value%20MUST%20use%20a%20header%20and%20encoding%20as%20described%20in%20Section%202.4%20Multibase%20of%20the%20Controller%20Documents%201.0%20specification%20to%20express%20the%20binary%20data.",
          "cells": [
            {
              "cell": {
                "rowId": "(\"proof.proofValue\") A string value that expresses base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The value MUST use a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification to express the binary data.",
                "colId": "ACA-py"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            },
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that expresses base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The value MUST use a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification to express the binary data.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=A%20string%20value%20that%20expresses%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof%20using%20the%20verificationMethod%20specified.%20The%20value%20MUST%20use%20a%20header%20and%20encoding%20as%20described%20in%20Section%202.4%20Multibase%20of%20the%20Controller%20Documents%201.0%20specification%20to%20express%20the%20binary%20data.';\n      for(const proof of proofs) {\n        should.exist(proof, 'Expected proof to exist.');\n        //FIXME the suite should pass in the expectedPrefix and\n        //encodingName or type\n        const {\n          prefix: expectedPrefix,\n          name: encodingName\n        } = expectedMultibasePrefix(proof.cryptosuite);\n        shouldHaveProofValue({proof, expectedPrefix, encodingName});\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "klQuj3iUSICZwUS6dWrwn",
              "ctx": null,
              "_testId": "urn:uuid:a49d3a8c-c284-47ea-bc65-9add89e33938",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "(\"proof.proofValue\") A string value that expresses base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The value MUST use a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification to express the binary data."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=A%20string%20value%20that%20expresses%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof%20using%20the%20verificationMethod%20specified.%20The%20value%20MUST%20use%20a%20header%20and%20encoding%20as%20described%20in%20Section%202.4%20Multibase%20of%20the%20Controller%20Documents%201.0%20specification%20to%20express%20the%20binary%20data.",
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that expresses base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The value MUST use a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification to express the binary data.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=A%20string%20value%20that%20expresses%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof%20using%20the%20verificationMethod%20specified.%20The%20value%20MUST%20use%20a%20header%20and%20encoding%20as%20described%20in%20Section%202.4%20Multibase%20of%20the%20Controller%20Documents%201.0%20specification%20to%20express%20the%20binary%20data.';\n      for(const proof of proofs) {\n        should.exist(proof, 'Expected proof to exist.');\n        //FIXME the suite should pass in the expectedPrefix and\n        //encodingName or type\n        const {\n          prefix: expectedPrefix,\n          name: encodingName\n        } = expectedMultibasePrefix(proof.cryptosuite);\n        shouldHaveProofValue({proof, expectedPrefix, encodingName});\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "KC40bcABMd1Vn680ttbkx",
              "ctx": null,
              "_testId": "urn:uuid:d6e4f8c3-0085-48c7-912d-088e786c683d",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "(\"proof.proofValue\") A string value that expresses base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The value MUST use a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification to express the binary data."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=A%20string%20value%20that%20expresses%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof%20using%20the%20verificationMethod%20specified.%20The%20value%20MUST%20use%20a%20header%20and%20encoding%20as%20described%20in%20Section%202.4%20Multibase%20of%20the%20Controller%20Documents%201.0%20specification%20to%20express%20the%20binary%20data.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that expresses base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The value MUST use a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification to express the binary data.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=A%20string%20value%20that%20expresses%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof%20using%20the%20verificationMethod%20specified.%20The%20value%20MUST%20use%20a%20header%20and%20encoding%20as%20described%20in%20Section%202.4%20Multibase%20of%20the%20Controller%20Documents%201.0%20specification%20to%20express%20the%20binary%20data.';\n      for(const proof of proofs) {\n        should.exist(proof, 'Expected proof to exist.');\n        //FIXME the suite should pass in the expectedPrefix and\n        //encodingName or type\n        const {\n          prefix: expectedPrefix,\n          name: encodingName\n        } = expectedMultibasePrefix(proof.cryptosuite);\n        shouldHaveProofValue({proof, expectedPrefix, encodingName});\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "xOTyL_pngxXG6zAxtmZ9X",
              "ctx": null,
              "_testId": "urn:uuid:7ec236e9-fe2d-46a1-9a99-5e0f03baaeb3",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "(\"proof.proofValue\") A string value that expresses base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The value MUST use a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification to express the binary data."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=A%20string%20value%20that%20expresses%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof%20using%20the%20verificationMethod%20specified.%20The%20value%20MUST%20use%20a%20header%20and%20encoding%20as%20described%20in%20Section%202.4%20Multibase%20of%20the%20Controller%20Documents%201.0%20specification%20to%20express%20the%20binary%20data.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that expresses base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The value MUST use a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification to express the binary data.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=A%20string%20value%20that%20expresses%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof%20using%20the%20verificationMethod%20specified.%20The%20value%20MUST%20use%20a%20header%20and%20encoding%20as%20described%20in%20Section%202.4%20Multibase%20of%20the%20Controller%20Documents%201.0%20specification%20to%20express%20the%20binary%20data.';\n      for(const proof of proofs) {\n        should.exist(proof, 'Expected proof to exist.');\n        //FIXME the suite should pass in the expectedPrefix and\n        //encodingName or type\n        const {\n          prefix: expectedPrefix,\n          name: encodingName\n        } = expectedMultibasePrefix(proof.cryptosuite);\n        shouldHaveProofValue({proof, expectedPrefix, encodingName});\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "sXugKi3EYzvQ4jDPv9Cum",
              "ctx": null,
              "_testId": "urn:uuid:4c612820-47b6-4247-b14b-1ae7c956933e",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "(\"proof.proofValue\") A string value that expresses base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The value MUST use a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification to express the binary data."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=A%20string%20value%20that%20expresses%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof%20using%20the%20verificationMethod%20specified.%20The%20value%20MUST%20use%20a%20header%20and%20encoding%20as%20described%20in%20Section%202.4%20Multibase%20of%20the%20Controller%20Documents%201.0%20specification%20to%20express%20the%20binary%20data.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that expresses base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The value MUST use a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification to express the binary data.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=A%20string%20value%20that%20expresses%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof%20using%20the%20verificationMethod%20specified.%20The%20value%20MUST%20use%20a%20header%20and%20encoding%20as%20described%20in%20Section%202.4%20Multibase%20of%20the%20Controller%20Documents%201.0%20specification%20to%20express%20the%20binary%20data.';\n      for(const proof of proofs) {\n        should.exist(proof, 'Expected proof to exist.');\n        //FIXME the suite should pass in the expectedPrefix and\n        //encodingName or type\n        const {\n          prefix: expectedPrefix,\n          name: encodingName\n        } = expectedMultibasePrefix(proof.cryptosuite);\n        shouldHaveProofValue({proof, expectedPrefix, encodingName});\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "f6heVhTijxDuwaLJorrQu",
              "ctx": null,
              "_testId": "urn:uuid:67c6bd81-3c3a-45b0-acfa-a603ac2b4272",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "(\"proof.proofValue\") A string value that expresses base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The value MUST use a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification to express the binary data."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=A%20string%20value%20that%20expresses%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof%20using%20the%20verificationMethod%20specified.%20The%20value%20MUST%20use%20a%20header%20and%20encoding%20as%20described%20in%20Section%202.4%20Multibase%20of%20the%20Controller%20Documents%201.0%20specification%20to%20express%20the%20binary%20data.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that expresses base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The value MUST use a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification to express the binary data.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=A%20string%20value%20that%20expresses%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof%20using%20the%20verificationMethod%20specified.%20The%20value%20MUST%20use%20a%20header%20and%20encoding%20as%20described%20in%20Section%202.4%20Multibase%20of%20the%20Controller%20Documents%201.0%20specification%20to%20express%20the%20binary%20data.';\n      for(const proof of proofs) {\n        should.exist(proof, 'Expected proof to exist.');\n        //FIXME the suite should pass in the expectedPrefix and\n        //encodingName or type\n        const {\n          prefix: expectedPrefix,\n          name: encodingName\n        } = expectedMultibasePrefix(proof.cryptosuite);\n        shouldHaveProofValue({proof, expectedPrefix, encodingName});\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "BuweDCyWH5cAZEiXmcMRL",
              "ctx": null,
              "_testId": "urn:uuid:6bd3bd7c-3cad-4e01-bf7b-b33cac9daecb",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "(\"proof.proofValue\") A string value that expresses base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The value MUST use a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification to express the binary data."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=A%20string%20value%20that%20expresses%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof%20using%20the%20verificationMethod%20specified.%20The%20value%20MUST%20use%20a%20header%20and%20encoding%20as%20described%20in%20Section%202.4%20Multibase%20of%20the%20Controller%20Documents%201.0%20specification%20to%20express%20the%20binary%20data.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that expresses base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The value MUST use a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification to express the binary data.",
              "body": "function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=A%20string%20value%20that%20expresses%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof%20using%20the%20verificationMethod%20specified.%20The%20value%20MUST%20use%20a%20header%20and%20encoding%20as%20described%20in%20Section%202.4%20Multibase%20of%20the%20Controller%20Documents%201.0%20specification%20to%20express%20the%20binary%20data.';\n      for(const proof of proofs) {\n        should.exist(proof, 'Expected proof to exist.');\n        //FIXME the suite should pass in the expectedPrefix and\n        //encodingName or type\n        const {\n          prefix: expectedPrefix,\n          name: encodingName\n        } = expectedMultibasePrefix(proof.cryptosuite);\n        shouldHaveProofValue({proof, expectedPrefix, encodingName});\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "QgWH5Ws0hVGr8Go9Nx9iB",
              "ctx": null,
              "_testId": "urn:uuid:132eab79-d6a5-4a62-8c72-0e6774538b0a",
              "cell": {
                "columnId": "bovine",
                "rowId": "(\"proof.proofValue\") A string value that expresses base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The value MUST use a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification to express the binary data."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=A%20string%20value%20that%20expresses%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof%20using%20the%20verificationMethod%20specified.%20The%20value%20MUST%20use%20a%20header%20and%20encoding%20as%20described%20in%20Section%202.4%20Multibase%20of%20the%20Controller%20Documents%201.0%20specification%20to%20express%20the%20binary%20data.",
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "Cryptographic suite designers MUST use mandatory proof value properties defined in Section 2.1 Proofs, and MAY define other properties specific to their cryptographic suite.",
          "link": "https://w3c.github.io/vc-data-integrity/#add-proof:~:text=MUST%20use%20mandatory%20proof%20value%20properties%20defined",
          "cells": [
            {
              "cell": {
                "rowId": "Cryptographic suite designers MUST use mandatory proof value properties defined in Section 2.1 Proofs, and MAY define other properties specific to their cryptographic suite.",
                "colId": "ACA-py"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            },
            {
              "type": "test",
              "title": "Cryptographic suite designers MUST use mandatory proof value properties defined in Section 2.1 Proofs, and MAY define other properties specific to their cryptographic suite.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#add-proof:~:text=MUST%20use%20mandatory%20proof%20value%20properties%20defined';\n      for(const proof of proofs) {\n        shouldBeProof({proof});\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "klQuj3iUSICZwUS6dWrwn",
              "ctx": null,
              "_testId": "urn:uuid:567bf667-dd23-407f-ab21-81d898088083",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "Cryptographic suite designers MUST use mandatory proof value properties defined in Section 2.1 Proofs, and MAY define other properties specific to their cryptographic suite."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#add-proof:~:text=MUST%20use%20mandatory%20proof%20value%20properties%20defined",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1137,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Cryptographic suite designers MUST use mandatory proof value properties defined in Section 2.1 Proofs, and MAY define other properties specific to their cryptographic suite.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#add-proof:~:text=MUST%20use%20mandatory%20proof%20value%20properties%20defined';\n      for(const proof of proofs) {\n        shouldBeProof({proof});\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "KC40bcABMd1Vn680ttbkx",
              "ctx": null,
              "_testId": "urn:uuid:973089c8-61f8-4a60-842a-0488d358e03c",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "Cryptographic suite designers MUST use mandatory proof value properties defined in Section 2.1 Proofs, and MAY define other properties specific to their cryptographic suite."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#add-proof:~:text=MUST%20use%20mandatory%20proof%20value%20properties%20defined",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1982,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Cryptographic suite designers MUST use mandatory proof value properties defined in Section 2.1 Proofs, and MAY define other properties specific to their cryptographic suite.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#add-proof:~:text=MUST%20use%20mandatory%20proof%20value%20properties%20defined';\n      for(const proof of proofs) {\n        shouldBeProof({proof});\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "xOTyL_pngxXG6zAxtmZ9X",
              "ctx": null,
              "_testId": "urn:uuid:092a64ff-b41b-4b61-b3d1-c147f4f60c99",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "Cryptographic suite designers MUST use mandatory proof value properties defined in Section 2.1 Proofs, and MAY define other properties specific to their cryptographic suite."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#add-proof:~:text=MUST%20use%20mandatory%20proof%20value%20properties%20defined",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2590,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Cryptographic suite designers MUST use mandatory proof value properties defined in Section 2.1 Proofs, and MAY define other properties specific to their cryptographic suite.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#add-proof:~:text=MUST%20use%20mandatory%20proof%20value%20properties%20defined';\n      for(const proof of proofs) {\n        shouldBeProof({proof});\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "sXugKi3EYzvQ4jDPv9Cum",
              "ctx": null,
              "_testId": "urn:uuid:808bbd18-81f9-4f1a-99d8-7db216fbf7bc",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "Cryptographic suite designers MUST use mandatory proof value properties defined in Section 2.1 Proofs, and MAY define other properties specific to their cryptographic suite."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#add-proof:~:text=MUST%20use%20mandatory%20proof%20value%20properties%20defined",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3826,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Cryptographic suite designers MUST use mandatory proof value properties defined in Section 2.1 Proofs, and MAY define other properties specific to their cryptographic suite.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#add-proof:~:text=MUST%20use%20mandatory%20proof%20value%20properties%20defined';\n      for(const proof of proofs) {\n        shouldBeProof({proof});\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "f6heVhTijxDuwaLJorrQu",
              "ctx": null,
              "_testId": "urn:uuid:bd062a9c-22e8-4d62-a1b3-b95cdb9c4c41",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "Cryptographic suite designers MUST use mandatory proof value properties defined in Section 2.1 Proofs, and MAY define other properties specific to their cryptographic suite."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#add-proof:~:text=MUST%20use%20mandatory%20proof%20value%20properties%20defined",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4559,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Cryptographic suite designers MUST use mandatory proof value properties defined in Section 2.1 Proofs, and MAY define other properties specific to their cryptographic suite.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#add-proof:~:text=MUST%20use%20mandatory%20proof%20value%20properties%20defined';\n      for(const proof of proofs) {\n        shouldBeProof({proof});\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "BuweDCyWH5cAZEiXmcMRL",
              "ctx": null,
              "_testId": "urn:uuid:ab08cfd3-9bc5-4e8d-9f18-d26899625735",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "Cryptographic suite designers MUST use mandatory proof value properties defined in Section 2.1 Proofs, and MAY define other properties specific to their cryptographic suite."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#add-proof:~:text=MUST%20use%20mandatory%20proof%20value%20properties%20defined",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5010,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Cryptographic suite designers MUST use mandatory proof value properties defined in Section 2.1 Proofs, and MAY define other properties specific to their cryptographic suite.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#add-proof:~:text=MUST%20use%20mandatory%20proof%20value%20properties%20defined';\n      for(const proof of proofs) {\n        shouldBeProof({proof});\n      }\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "QgWH5Ws0hVGr8Go9Nx9iB",
              "ctx": null,
              "_testId": "urn:uuid:6725044b-b38e-4765-8ad8-c7f91d260ace",
              "cell": {
                "columnId": "bovine",
                "rowId": "Cryptographic suite designers MUST use mandatory proof value properties defined in Section 2.1 Proofs, and MAY define other properties specific to their cryptographic suite."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#add-proof:~:text=MUST%20use%20mandatory%20proof%20value%20properties%20defined",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6003,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
          "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
          "cells": [
            {
              "cell": {
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
                "colId": "ACA-py"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            },
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      const undefinedType = structuredClone(credential);\n      undefinedType.type.push('InvalidType');\n      await shouldFailIssuance({\n        credential: undefinedType,\n        issuer,\n        reason: 'Expected issuer to error when VC has an undefined type.'\n      });\n      const undefinedTerm = structuredClone(credential);\n      undefinedTerm.credentialSubject.invalidTerm = 'invalidTerm';\n      await shouldFailIssuance({\n        credential: undefinedTerm,\n        issuer,\n        reason: 'Expected issuer to error when VC has an undefined term.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "klQuj3iUSICZwUS6dWrwn",
              "ctx": null,
              "_testId": "urn:uuid:51fcd361-6d57-4c71-ba96-7a82eff0a54e",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1137,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 158,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected issuer to error when VC has an undefined type.: expected Response { status: 201, statusText: 'Created', headers: Headers { 'content-type': 'application/ld+json', 'x-cloud-trace-context': 'bb168fa08409dde4695a855da1841112', date: 'Sun, 13 Oct 2024 05:06:24 GMT', server: 'Google Frontend', 'content-length': '804', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected issuer to error when VC has an undefined type.: expected Response { status: 201, statusText: 'Created', headers: Headers { 'content-type': 'application/ld+json', 'x-cloud-trace-context': 'bb168fa08409dde4695a855da1841112', date: 'Sun, 13 Oct 2024 05:06:24 GMT', server: 'Google Frontend', 'content-length': '804', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at shouldFailIssuance (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:104:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/suites/create.js:235:7)"
              }
            },
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      const undefinedType = structuredClone(credential);\n      undefinedType.type.push('InvalidType');\n      await shouldFailIssuance({\n        credential: undefinedType,\n        issuer,\n        reason: 'Expected issuer to error when VC has an undefined type.'\n      });\n      const undefinedTerm = structuredClone(credential);\n      undefinedTerm.credentialSubject.invalidTerm = 'invalidTerm';\n      await shouldFailIssuance({\n        credential: undefinedTerm,\n        issuer,\n        reason: 'Expected issuer to error when VC has an undefined term.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "KC40bcABMd1Vn680ttbkx",
              "ctx": null,
              "_testId": "urn:uuid:d4606fa4-7a7e-4da5-bec1-b1ceb593b184",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1982,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 237,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      const undefinedType = structuredClone(credential);\n      undefinedType.type.push('InvalidType');\n      await shouldFailIssuance({\n        credential: undefinedType,\n        issuer,\n        reason: 'Expected issuer to error when VC has an undefined type.'\n      });\n      const undefinedTerm = structuredClone(credential);\n      undefinedTerm.credentialSubject.invalidTerm = 'invalidTerm';\n      await shouldFailIssuance({\n        credential: undefinedTerm,\n        issuer,\n        reason: 'Expected issuer to error when VC has an undefined term.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "xOTyL_pngxXG6zAxtmZ9X",
              "ctx": null,
              "_testId": "urn:uuid:47a01b70-f1f9-412f-bc5e-efbaa1d3d829",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2590,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 405,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      const undefinedType = structuredClone(credential);\n      undefinedType.type.push('InvalidType');\n      await shouldFailIssuance({\n        credential: undefinedType,\n        issuer,\n        reason: 'Expected issuer to error when VC has an undefined type.'\n      });\n      const undefinedTerm = structuredClone(credential);\n      undefinedTerm.credentialSubject.invalidTerm = 'invalidTerm';\n      await shouldFailIssuance({\n        credential: undefinedTerm,\n        issuer,\n        reason: 'Expected issuer to error when VC has an undefined term.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "sXugKi3EYzvQ4jDPv9Cum",
              "ctx": null,
              "_testId": "urn:uuid:f244ac74-2059-4680-b504-15e17c1ce5fd",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3826,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 445,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      const undefinedType = structuredClone(credential);\n      undefinedType.type.push('InvalidType');\n      await shouldFailIssuance({\n        credential: undefinedType,\n        issuer,\n        reason: 'Expected issuer to error when VC has an undefined type.'\n      });\n      const undefinedTerm = structuredClone(credential);\n      undefinedTerm.credentialSubject.invalidTerm = 'invalidTerm';\n      await shouldFailIssuance({\n        credential: undefinedTerm,\n        issuer,\n        reason: 'Expected issuer to error when VC has an undefined term.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "f6heVhTijxDuwaLJorrQu",
              "ctx": null,
              "_testId": "urn:uuid:868047f4-2a4a-4854-9ab4-430f864094e0",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4560,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 103,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      const undefinedType = structuredClone(credential);\n      undefinedType.type.push('InvalidType');\n      await shouldFailIssuance({\n        credential: undefinedType,\n        issuer,\n        reason: 'Expected issuer to error when VC has an undefined type.'\n      });\n      const undefinedTerm = structuredClone(credential);\n      undefinedTerm.credentialSubject.invalidTerm = 'invalidTerm';\n      await shouldFailIssuance({\n        credential: undefinedTerm,\n        issuer,\n        reason: 'Expected issuer to error when VC has an undefined term.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "BuweDCyWH5cAZEiXmcMRL",
              "ctx": null,
              "_testId": "urn:uuid:e99fbc02-95fa-467f-8d77-3254ce9da056",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5010,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 87,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected issuer to error when VC has an undefined type.: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 13 Oct 2024 05:06:28 GMT', 'content-type': 'text/html; charset=utf-8', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'cache-control': 'no-cache,no-store', expires: '-1', pragma: 'no-cache', 'x-envoy-upstream-service-time': '64', 'cf-cache-status': 'DYNAMIC', 'report-to': '{\"endpoints\":[{\"url\":\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=KOib%2B9ikDIXrQUegMMnWjvdwTbQlk%2B9b11N5QY7jt9rcfZHmu2%2F%2FsDpM2J9BOh5hxrCXSE%2F4n0Ga7N0VLSuCmoEhlTuwoX4QKl0lmzfq4RdCkkj3qXFZOricJRG0ch1d8GTnXF6ejPT8%2FkOOXtDt\"}],\"group\":\"cf-nel\",\"max_age\":604800}', nel: '{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}', server: 'cloudflare', 'cf-ray': '8d1ccceda9a75b47-IAD', 'content-encoding': 'br', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: null, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected issuer to error when VC has an undefined type.: expected Response { status: 200, statusText: 'OK', headers: Headers { date: 'Sun, 13 Oct 2024 05:06:28 GMT', 'content-type': 'text/html; charset=utf-8', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'cache-control': 'no-cache,no-store', expires: '-1', pragma: 'no-cache', 'x-envoy-upstream-service-time': '64', 'cf-cache-status': 'DYNAMIC', 'report-to': '{\"endpoints\":[{\"url\":\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=KOib%2B9ikDIXrQUegMMnWjvdwTbQlk%2B9b11N5QY7jt9rcfZHmu2%2F%2FsDpM2J9BOh5hxrCXSE%2F4n0Ga7N0VLSuCmoEhlTuwoX4QKl0lmzfq4RdCkkj3qXFZOricJRG0ch1d8GTnXF6ejPT8%2FkOOXtDt\"}],\"group\":\"cf-nel\",\"max_age\":604800}', nel: '{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}', server: 'cloudflare', 'cf-ray': '8d1ccceda9a75b47-IAD', 'content-encoding': 'br', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: null, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at shouldFailIssuance (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:104:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/suites/create.js:235:7)"
              }
            },
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      const undefinedType = structuredClone(credential);\n      undefinedType.type.push('InvalidType');\n      await shouldFailIssuance({\n        credential: undefinedType,\n        issuer,\n        reason: 'Expected issuer to error when VC has an undefined type.'\n      });\n      const undefinedTerm = structuredClone(credential);\n      undefinedTerm.credentialSubject.invalidTerm = 'invalidTerm';\n      await shouldFailIssuance({\n        credential: undefinedTerm,\n        issuer,\n        reason: 'Expected issuer to error when VC has an undefined term.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "QgWH5Ws0hVGr8Go9Nx9iB",
              "ctx": null,
              "_testId": "urn:uuid:ce859f5b-4ad4-4d2a-abee-8bd3d570f5ac",
              "cell": {
                "columnId": "bovine",
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6003,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 108,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected issuer to error when VC has an undefined type.: expected Response { status: 200, statusText: 'OK', headers: Headers { server: 'nginx/1.18.0 (Ubuntu)', date: 'Sun, 13 Oct 2024 05:06:29 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'content-encoding': 'gzip', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected issuer to error when VC has an undefined type.: expected Response { status: 200, statusText: 'OK', headers: Headers { server: 'nginx/1.18.0 (Ubuntu)', date: 'Sun, 13 Oct 2024 05:06:29 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'content-encoding': 'gzip', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at shouldFailIssuance (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:104:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/suites/create.js:235:7)"
              }
            }
          ]
        },
        {
          "id": "If the algorithm produces an error, the error MUST be propagated and SHOULD convey the error type.",
          "link": "https://w3c.github.io/vc-data-integrity/#dfn-input-document:~:text=If%20the%20algorithm%20produces%20an%20error%2C%20the%20error%20MUST%20be%20propagated%20and%20SHOULD%20convey%20the%20error%20type",
          "cells": [
            {
              "cell": {
                "rowId": "If the algorithm produces an error, the error MUST be propagated and SHOULD convey the error type.",
                "colId": "ACA-py"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            },
            {
              "type": "test",
              "title": "If the algorithm produces an error, the error MUST be propagated and SHOULD convey the error type.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#dfn-input-document:~:text=If%20the%20algorithm%20produces%20an%20error%2C%20the%20error%20MUST%20be%20propagated%20and%20SHOULD%20convey%20the%20error%20type';\n      const noSubject = structuredClone(credential);\n      delete noSubject.credentialSubject;\n      // FIXME this test should look for a propagated error such as\n      // PROOF_GENERATION_ERROR\n      await shouldFailIssuance({\n        credential: noSubject,\n        issuer,\n        reason: 'Expected issuer to error when VC has no credentialSubject.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "klQuj3iUSICZwUS6dWrwn",
              "ctx": null,
              "_testId": "urn:uuid:8471cf1e-7e58-40ad-82be-6fb8ab06094e",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If the algorithm produces an error, the error MUST be propagated and SHOULD convey the error type."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#dfn-input-document:~:text=If%20the%20algorithm%20produces%20an%20error%2C%20the%20error%20MUST%20be%20propagated%20and%20SHOULD%20convey%20the%20error%20type",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1296,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 125,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the algorithm produces an error, the error MUST be propagated and SHOULD convey the error type.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#dfn-input-document:~:text=If%20the%20algorithm%20produces%20an%20error%2C%20the%20error%20MUST%20be%20propagated%20and%20SHOULD%20convey%20the%20error%20type';\n      const noSubject = structuredClone(credential);\n      delete noSubject.credentialSubject;\n      // FIXME this test should look for a propagated error such as\n      // PROOF_GENERATION_ERROR\n      await shouldFailIssuance({\n        credential: noSubject,\n        issuer,\n        reason: 'Expected issuer to error when VC has no credentialSubject.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "KC40bcABMd1Vn680ttbkx",
              "ctx": null,
              "_testId": "urn:uuid:d786a4bf-e619-430d-a187-6c0689fc3d81",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the algorithm produces an error, the error MUST be propagated and SHOULD convey the error type."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#dfn-input-document:~:text=If%20the%20algorithm%20produces%20an%20error%2C%20the%20error%20MUST%20be%20propagated%20and%20SHOULD%20convey%20the%20error%20type",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2219,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 53,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the algorithm produces an error, the error MUST be propagated and SHOULD convey the error type.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#dfn-input-document:~:text=If%20the%20algorithm%20produces%20an%20error%2C%20the%20error%20MUST%20be%20propagated%20and%20SHOULD%20convey%20the%20error%20type';\n      const noSubject = structuredClone(credential);\n      delete noSubject.credentialSubject;\n      // FIXME this test should look for a propagated error such as\n      // PROOF_GENERATION_ERROR\n      await shouldFailIssuance({\n        credential: noSubject,\n        issuer,\n        reason: 'Expected issuer to error when VC has no credentialSubject.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "xOTyL_pngxXG6zAxtmZ9X",
              "ctx": null,
              "_testId": "urn:uuid:56daa200-27a1-40e9-9fd3-f65b1480e9f0",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If the algorithm produces an error, the error MUST be propagated and SHOULD convey the error type."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#dfn-input-document:~:text=If%20the%20algorithm%20produces%20an%20error%2C%20the%20error%20MUST%20be%20propagated%20and%20SHOULD%20convey%20the%20error%20type",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2995,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 73,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the algorithm produces an error, the error MUST be propagated and SHOULD convey the error type.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#dfn-input-document:~:text=If%20the%20algorithm%20produces%20an%20error%2C%20the%20error%20MUST%20be%20propagated%20and%20SHOULD%20convey%20the%20error%20type';\n      const noSubject = structuredClone(credential);\n      delete noSubject.credentialSubject;\n      // FIXME this test should look for a propagated error such as\n      // PROOF_GENERATION_ERROR\n      await shouldFailIssuance({\n        credential: noSubject,\n        issuer,\n        reason: 'Expected issuer to error when VC has no credentialSubject.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "sXugKi3EYzvQ4jDPv9Cum",
              "ctx": null,
              "_testId": "urn:uuid:e1a5cddb-ca83-462e-a66b-83d69b69cf92",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "If the algorithm produces an error, the error MUST be propagated and SHOULD convey the error type."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#dfn-input-document:~:text=If%20the%20algorithm%20produces%20an%20error%2C%20the%20error%20MUST%20be%20propagated%20and%20SHOULD%20convey%20the%20error%20type",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4271,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 149,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the algorithm produces an error, the error MUST be propagated and SHOULD convey the error type.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#dfn-input-document:~:text=If%20the%20algorithm%20produces%20an%20error%2C%20the%20error%20MUST%20be%20propagated%20and%20SHOULD%20convey%20the%20error%20type';\n      const noSubject = structuredClone(credential);\n      delete noSubject.credentialSubject;\n      // FIXME this test should look for a propagated error such as\n      // PROOF_GENERATION_ERROR\n      await shouldFailIssuance({\n        credential: noSubject,\n        issuer,\n        reason: 'Expected issuer to error when VC has no credentialSubject.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "f6heVhTijxDuwaLJorrQu",
              "ctx": null,
              "_testId": "urn:uuid:50b0e20d-830c-42ca-ae48-290ad8a3c12d",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If the algorithm produces an error, the error MUST be propagated and SHOULD convey the error type."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#dfn-input-document:~:text=If%20the%20algorithm%20produces%20an%20error%2C%20the%20error%20MUST%20be%20propagated%20and%20SHOULD%20convey%20the%20error%20type",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4663,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 37,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected issuer to error when VC has no credentialSubject.: expected Response { status: 201, statusText: 'Created', headers: Headers { date: 'Sun, 13 Oct 2024 05:06:27 GMT', 'content-type': 'application/json', 'content-length': '658', connection: 'keep-alive', 'cf-cache-status': 'DYNAMIC', server: 'cloudflare', 'cf-ray': '8d1ccceb7d9b3b3c-IAD', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected issuer to error when VC has no credentialSubject.: expected Response { status: 201, statusText: 'Created', headers: Headers { date: 'Sun, 13 Oct 2024 05:06:27 GMT', 'content-type': 'application/json', 'content-length': '658', connection: 'keep-alive', 'cf-cache-status': 'DYNAMIC', server: 'cloudflare', 'cf-ray': '8d1ccceb7d9b3b3c-IAD', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at shouldFailIssuance (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:104:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/suites/create.js:255:7)"
              }
            },
            {
              "type": "test",
              "title": "If the algorithm produces an error, the error MUST be propagated and SHOULD convey the error type.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#dfn-input-document:~:text=If%20the%20algorithm%20produces%20an%20error%2C%20the%20error%20MUST%20be%20propagated%20and%20SHOULD%20convey%20the%20error%20type';\n      const noSubject = structuredClone(credential);\n      delete noSubject.credentialSubject;\n      // FIXME this test should look for a propagated error such as\n      // PROOF_GENERATION_ERROR\n      await shouldFailIssuance({\n        credential: noSubject,\n        issuer,\n        reason: 'Expected issuer to error when VC has no credentialSubject.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "BuweDCyWH5cAZEiXmcMRL",
              "ctx": null,
              "_testId": "urn:uuid:15f307ba-481d-4366-8498-31057f40721a",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "If the algorithm produces an error, the error MUST be propagated and SHOULD convey the error type."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#dfn-input-document:~:text=If%20the%20algorithm%20produces%20an%20error%2C%20the%20error%20MUST%20be%20propagated%20and%20SHOULD%20convey%20the%20error%20type",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5100,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 25,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the algorithm produces an error, the error MUST be propagated and SHOULD convey the error type.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#dfn-input-document:~:text=If%20the%20algorithm%20produces%20an%20error%2C%20the%20error%20MUST%20be%20propagated%20and%20SHOULD%20convey%20the%20error%20type';\n      const noSubject = structuredClone(credential);\n      delete noSubject.credentialSubject;\n      // FIXME this test should look for a propagated error such as\n      // PROOF_GENERATION_ERROR\n      await shouldFailIssuance({\n        credential: noSubject,\n        issuer,\n        reason: 'Expected issuer to error when VC has no credentialSubject.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "QgWH5Ws0hVGr8Go9Nx9iB",
              "ctx": null,
              "_testId": "urn:uuid:8033384a-af8c-4dcb-8a7b-8a055e66b2df",
              "cell": {
                "columnId": "bovine",
                "rowId": "If the algorithm produces an error, the error MUST be propagated and SHOULD convey the error type."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#dfn-input-document:~:text=If%20the%20algorithm%20produces%20an%20error%2C%20the%20error%20MUST%20be%20propagated%20and%20SHOULD%20convey%20the%20error%20type",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6111,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 110,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected issuer to error when VC has no credentialSubject.: expected Response { status: 200, statusText: 'OK', headers: Headers { server: 'nginx/1.18.0 (Ubuntu)', date: 'Sun, 13 Oct 2024 05:06:29 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'content-encoding': 'gzip', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected issuer to error when VC has no credentialSubject.: expected Response { status: 200, statusText: 'OK', headers: Headers { server: 'nginx/1.18.0 (Ubuntu)', date: 'Sun, 13 Oct 2024 05:06:29 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', connection: 'keep-alive', 'content-encoding': 'gzip', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at shouldFailIssuance (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:104:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/suites/create.js:255:7)"
              }
            }
          ]
        },
        {
          "id": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite.",
          "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
          "cells": [
            {
              "cell": {
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite.",
                "colId": "ACA-py"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n        const hasCryptosuiteName = proofs.some(\n          p => p?.cryptosuite === cryptosuiteName);\n        hasCryptosuiteName.should.equal(\n          true,\n          `Expected at least one proof with cryptosuite ${cryptosuiteName}`);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "klQuj3iUSICZwUS6dWrwn",
              "ctx": null,
              "_testId": "urn:uuid:62dd7525-cc3a-40ae-beca-b68c5b3b52cf",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1421,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n        const hasCryptosuiteName = proofs.some(\n          p => p?.cryptosuite === cryptosuiteName);\n        hasCryptosuiteName.should.equal(\n          true,\n          `Expected at least one proof with cryptosuite ${cryptosuiteName}`);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "KC40bcABMd1Vn680ttbkx",
              "ctx": null,
              "_testId": "urn:uuid:f6deeabb-667c-4fe1-942e-8abaa0c724a0",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2271,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n        const hasCryptosuiteName = proofs.some(\n          p => p?.cryptosuite === cryptosuiteName);\n        hasCryptosuiteName.should.equal(\n          true,\n          `Expected at least one proof with cryptosuite ${cryptosuiteName}`);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "xOTyL_pngxXG6zAxtmZ9X",
              "ctx": null,
              "_testId": "urn:uuid:b64331fd-9fa1-41c8-a020-b693fdeccec8",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3068,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n        const hasCryptosuiteName = proofs.some(\n          p => p?.cryptosuite === cryptosuiteName);\n        hasCryptosuiteName.should.equal(\n          true,\n          `Expected at least one proof with cryptosuite ${cryptosuiteName}`);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "sXugKi3EYzvQ4jDPv9Cum",
              "ctx": null,
              "_testId": "urn:uuid:7b0626e9-ce28-497e-bb36-92e5dee30cd5",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4420,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n        const hasCryptosuiteName = proofs.some(\n          p => p?.cryptosuite === cryptosuiteName);\n        hasCryptosuiteName.should.equal(\n          true,\n          `Expected at least one proof with cryptosuite ${cryptosuiteName}`);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "f6heVhTijxDuwaLJorrQu",
              "ctx": null,
              "_testId": "urn:uuid:eb3ef6c9-c73f-4883-a94d-53c43698d0bc",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4700,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n        const hasCryptosuiteName = proofs.some(\n          p => p?.cryptosuite === cryptosuiteName);\n        hasCryptosuiteName.should.equal(\n          true,\n          `Expected at least one proof with cryptosuite ${cryptosuiteName}`);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "BuweDCyWH5cAZEiXmcMRL",
              "ctx": null,
              "_testId": "urn:uuid:6959693c-fdea-473d-8142-648d9bdb78d1",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5125,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected at least one proof with cryptosuite eddsa-rdfc-2022: expected false to equal true",
                "showDiff": true,
                "actual": "false",
                "expected": "true",
                "operator": "strictEqual",
                "stack": "AssertionError: Expected at least one proof with cryptosuite eddsa-rdfc-2022: expected false to equal true\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/suites/create.js:267:35)\n    at process.processImmediate (node:internal/timers:483:21)"
              }
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n        const hasCryptosuiteName = proofs.some(\n          p => p?.cryptosuite === cryptosuiteName);\n        hasCryptosuiteName.should.equal(\n          true,\n          `Expected at least one proof with cryptosuite ${cryptosuiteName}`);\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "QgWH5Ws0hVGr8Go9Nx9iB",
              "ctx": null,
              "_testId": "urn:uuid:ecd9b9f8-bd05-493b-913d-b63c40984faa",
              "cell": {
                "columnId": "bovine",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6222,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
          "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
          "cells": [
            {
              "cell": {
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
                "colId": "ACA-py"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n        const cryptoProp = 'https://w3id.org/security#cryptosuite';\n        const cryptoType = 'https://w3id.org/security#cryptosuiteString';\n        for(const {cryptosuite, type} of proofs) {\n          should.exist(cryptosuite,\n            'Expected property \"proof.cryptosuite\" to exist.');\n          should.exist(type,\n            'Expected property \"proof.type\" to exist.');\n          should.exist(data['@context'],\n            'Expected VC to have property \"@context\".');\n          const expanded = await jsonld.expand({\n            '@context': data['@context'],\n            cryptosuite,\n            type\n          }, {documentLoader});\n          for(const terms of expanded) {\n            const cryptoProperties = terms[cryptoProp];\n            should.exist(cryptoProperties,\n              `Expected property ${cryptoProp} to exist.`);\n            const hasTypeName = cryptoProperties.some(suite =>\n              suite['@type'] === cryptoType &&\n              suite['@value'] == cryptosuiteName);\n            hasTypeName.should.equal(true,\n              `Expected ${cryptoProp} with @value ${cryptosuiteName} & ` +\n              `@type ${cryptoType}`);\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "klQuj3iUSICZwUS6dWrwn",
              "ctx": null,
              "_testId": "urn:uuid:341dc882-aa61-4bf5-9145-eac615d9a46a",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 1422,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n        const cryptoProp = 'https://w3id.org/security#cryptosuite';\n        const cryptoType = 'https://w3id.org/security#cryptosuiteString';\n        for(const {cryptosuite, type} of proofs) {\n          should.exist(cryptosuite,\n            'Expected property \"proof.cryptosuite\" to exist.');\n          should.exist(type,\n            'Expected property \"proof.type\" to exist.');\n          should.exist(data['@context'],\n            'Expected VC to have property \"@context\".');\n          const expanded = await jsonld.expand({\n            '@context': data['@context'],\n            cryptosuite,\n            type\n          }, {documentLoader});\n          for(const terms of expanded) {\n            const cryptoProperties = terms[cryptoProp];\n            should.exist(cryptoProperties,\n              `Expected property ${cryptoProp} to exist.`);\n            const hasTypeName = cryptoProperties.some(suite =>\n              suite['@type'] === cryptoType &&\n              suite['@value'] == cryptosuiteName);\n            hasTypeName.should.equal(true,\n              `Expected ${cryptoProp} with @value ${cryptosuiteName} & ` +\n              `@type ${cryptoType}`);\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "KC40bcABMd1Vn680ttbkx",
              "ctx": null,
              "_testId": "urn:uuid:1aff3b17-94e4-4082-885e-12dd5c0a21bd",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 2272,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n        const cryptoProp = 'https://w3id.org/security#cryptosuite';\n        const cryptoType = 'https://w3id.org/security#cryptosuiteString';\n        for(const {cryptosuite, type} of proofs) {\n          should.exist(cryptosuite,\n            'Expected property \"proof.cryptosuite\" to exist.');\n          should.exist(type,\n            'Expected property \"proof.type\" to exist.');\n          should.exist(data['@context'],\n            'Expected VC to have property \"@context\".');\n          const expanded = await jsonld.expand({\n            '@context': data['@context'],\n            cryptosuite,\n            type\n          }, {documentLoader});\n          for(const terms of expanded) {\n            const cryptoProperties = terms[cryptoProp];\n            should.exist(cryptoProperties,\n              `Expected property ${cryptoProp} to exist.`);\n            const hasTypeName = cryptoProperties.some(suite =>\n              suite['@type'] === cryptoType &&\n              suite['@value'] == cryptosuiteName);\n            hasTypeName.should.equal(true,\n              `Expected ${cryptoProp} with @value ${cryptosuiteName} & ` +\n              `@type ${cryptoType}`);\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "xOTyL_pngxXG6zAxtmZ9X",
              "ctx": null,
              "_testId": "urn:uuid:c735e241-203f-46c7-9e83-bd5ce3145943",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 3068,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n        const cryptoProp = 'https://w3id.org/security#cryptosuite';\n        const cryptoType = 'https://w3id.org/security#cryptosuiteString';\n        for(const {cryptosuite, type} of proofs) {\n          should.exist(cryptosuite,\n            'Expected property \"proof.cryptosuite\" to exist.');\n          should.exist(type,\n            'Expected property \"proof.type\" to exist.');\n          should.exist(data['@context'],\n            'Expected VC to have property \"@context\".');\n          const expanded = await jsonld.expand({\n            '@context': data['@context'],\n            cryptosuite,\n            type\n          }, {documentLoader});\n          for(const terms of expanded) {\n            const cryptoProperties = terms[cryptoProp];\n            should.exist(cryptoProperties,\n              `Expected property ${cryptoProp} to exist.`);\n            const hasTypeName = cryptoProperties.some(suite =>\n              suite['@type'] === cryptoType &&\n              suite['@value'] == cryptosuiteName);\n            hasTypeName.should.equal(true,\n              `Expected ${cryptoProp} with @value ${cryptosuiteName} & ` +\n              `@type ${cryptoType}`);\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "sXugKi3EYzvQ4jDPv9Cum",
              "ctx": null,
              "_testId": "urn:uuid:177dd1d7-0cab-4167-8052-6520b645599d",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4420,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected property https://w3id.org/security#cryptosuite to exist.: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected property https://w3id.org/security#cryptosuite to exist.: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/suites/create.js:293:20)"
              }
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n        const cryptoProp = 'https://w3id.org/security#cryptosuite';\n        const cryptoType = 'https://w3id.org/security#cryptosuiteString';\n        for(const {cryptosuite, type} of proofs) {\n          should.exist(cryptosuite,\n            'Expected property \"proof.cryptosuite\" to exist.');\n          should.exist(type,\n            'Expected property \"proof.type\" to exist.');\n          should.exist(data['@context'],\n            'Expected VC to have property \"@context\".');\n          const expanded = await jsonld.expand({\n            '@context': data['@context'],\n            cryptosuite,\n            type\n          }, {documentLoader});\n          for(const terms of expanded) {\n            const cryptoProperties = terms[cryptoProp];\n            should.exist(cryptoProperties,\n              `Expected property ${cryptoProp} to exist.`);\n            const hasTypeName = cryptoProperties.some(suite =>\n              suite['@type'] === cryptoType &&\n              suite['@value'] == cryptosuiteName);\n            hasTypeName.should.equal(true,\n              `Expected ${cryptoProp} with @value ${cryptosuiteName} & ` +\n              `@type ${cryptoType}`);\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "f6heVhTijxDuwaLJorrQu",
              "ctx": null,
              "_testId": "urn:uuid:2fa7b95a-168b-49d9-9f95-6284f6d6610e",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 4701,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n        const cryptoProp = 'https://w3id.org/security#cryptosuite';\n        const cryptoType = 'https://w3id.org/security#cryptosuiteString';\n        for(const {cryptosuite, type} of proofs) {\n          should.exist(cryptosuite,\n            'Expected property \"proof.cryptosuite\" to exist.');\n          should.exist(type,\n            'Expected property \"proof.type\" to exist.');\n          should.exist(data['@context'],\n            'Expected VC to have property \"@context\".');\n          const expanded = await jsonld.expand({\n            '@context': data['@context'],\n            cryptosuite,\n            type\n          }, {documentLoader});\n          for(const terms of expanded) {\n            const cryptoProperties = terms[cryptoProp];\n            should.exist(cryptoProperties,\n              `Expected property ${cryptoProp} to exist.`);\n            const hasTypeName = cryptoProperties.some(suite =>\n              suite['@type'] === cryptoType &&\n              suite['@value'] == cryptosuiteName);\n            hasTypeName.should.equal(true,\n              `Expected ${cryptoProp} with @value ${cryptosuiteName} & ` +\n              `@type ${cryptoType}`);\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "BuweDCyWH5cAZEiXmcMRL",
              "ctx": null,
              "_testId": "urn:uuid:def9ae7f-f5d2-4ceb-9204-06c8cf2a42b8",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 5126,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "jsonld.InvalidUrl",
                "details": {
                  "code": "loading remote context failed",
                  "url": "https://w3id.org/security/data-integrity/v1",
                  "cause": {}
                }
              }
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n        const cryptoProp = 'https://w3id.org/security#cryptosuite';\n        const cryptoType = 'https://w3id.org/security#cryptosuiteString';\n        for(const {cryptosuite, type} of proofs) {\n          should.exist(cryptosuite,\n            'Expected property \"proof.cryptosuite\" to exist.');\n          should.exist(type,\n            'Expected property \"proof.type\" to exist.');\n          should.exist(data['@context'],\n            'Expected VC to have property \"@context\".');\n          const expanded = await jsonld.expand({\n            '@context': data['@context'],\n            cryptosuite,\n            type\n          }, {documentLoader});\n          for(const terms of expanded) {\n            const cryptoProperties = terms[cryptoProp];\n            should.exist(cryptoProperties,\n              `Expected property ${cryptoProp} to exist.`);\n            const hasTypeName = cryptoProperties.some(suite =>\n              suite['@type'] === cryptoType &&\n              suite['@value'] == cryptosuiteName);\n            hasTypeName.should.equal(true,\n              `Expected ${cryptoProp} with @value ${cryptosuiteName} & ` +\n              `@type ${cryptoType}`);\n          }\n        }\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/05-di-rdfc-create.js",
              "parent": "QgWH5Ws0hVGr8Go9Nx9iB",
              "ctx": null,
              "_testId": "urn:uuid:521a2233-41ce-4158-9dc5-052aebbab75b",
              "cell": {
                "columnId": "bovine",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6222,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            }
          ]
        }
      ]
    },
    {
      "title": "eddsa-rdfc-2022 (issuer)",
      "ctx": null,
      "suites": [
        {
          "title": "ACA-py",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The field \"cryptosuite\" MUST be \"eddsa-rdfc-2022\".",
              "body": "function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const suites = proofs.map(p => p?.cryptosuite);\n\n          suites.some(\n            suite => suite === cryptosuite\n          ).should.equal(true, 'Expected at least one proof to have ' +\n            '\"cryptosuite\" with the value \"eddsa-rdfc-2022\": ' +\n            JSON.stringify(suites) + ' does not contain \"eddsa-rdfc-2022\".');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "1YOFKqggqOlZ46lVBq-gZ",
              "ctx": null
            },
            {
              "type": "test",
              "title": "Dereferencing the \"verificationMethod\" MUST result in an object containing a type property with the value set to \"Multikey\".",
              "body": "function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          verificationMethodDocuments.some(\n            verificationMethodDocument =>\n              verificationMethodDocument?.type === 'Multikey'\n          ).should.equal(true, 'Expected at least one proof to have \"type\" ' +\n            'property value \"Multikey\".');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "1YOFKqggqOlZ46lVBq-gZ",
              "ctx": null
            },
            {
              "type": "test",
              "title": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          verificationMethodDocuments.some(\n            verificationMethodDocument =>\n              verificationMethodDocument?.type === 'Multikey'\n          ).should.equal(true, 'Expected at least one proof to have \"type\" ' +\n            'property value \"Multikey\".'\n          );\n          const controllerDocuments = [];\n          for(const verificationMethodDocument of verificationMethodDocuments) {\n            const controllerDocument = await documentLoader({\n              url: verificationMethodDocument.controller\n            });\n            controllerDocuments.push(controllerDocument);\n          }\n          proofs.some(\n            proof => controllerDocuments.some(controllerDocument =>\n              controllerDocument.hasOwnProperty(proof.proofPurpose))\n          ).should.equal(true, 'Expected \"proof.proofPurpose\" field ' +\n             'to match the verification method controller.'\n          );\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "1YOFKqggqOlZ46lVBq-gZ",
              "ctx": null
            },
            {
              "type": "test",
              "title": "The \"publicKeyMultibase\" value of the verification method MUST be 34 bytes in length and start with the base-58-btc prefix (z).",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          for(const verificationMethodDocument of verificationMethodDocuments) {\n            const multibase = 'z';\n            const {publicKeyMultibase} = verificationMethodDocument;\n            const isMultibaseEncoded =\n              publicKeyMultibase.startsWith(multibase) &&\n                shouldBeBs58(publicKeyMultibase);\n            isMultibaseEncoded.should.equal(\n              true,\n              'Expected \"publicKeyMultibase\" value of the verification ' +\n              'method to be multibase base58-btc encoded value'\n            );\n            const publicKeyMultibaseBytes = bs58Decode({\n              id: publicKeyMultibase\n            });\n            publicKeyMultibaseBytes.byteLength.should.equal(34, 'Expected ' +\n              '\"publicKeyMultibase\" value of the verification method to ' +\n              'be 34 bytes in length.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "1YOFKqggqOlZ46lVBq-gZ",
              "ctx": null
            },
            {
              "type": "test",
              "title": "[\"publicKeyMultibase\"] MUST consist of a binary value that startswith the two-byte prefix 0xed01",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n\n          for(const verificationMethodDocument of verificationMethodDocuments) {\n            // If we can decode then the key is valid\n            const {publicKey} =\n              await fromEncodedMultikey(verificationMethodDocument);\n\n            publicKey.length.should.equal(32, 'Expected public key ' +\n              'to be 32 bytes.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "1YOFKqggqOlZ46lVBq-gZ",
              "ctx": null
            },
            {
              "type": "test",
              "title": "\"proofValue\" field when decoded to raw bytes, MUST be 64 bytes in length if the associated public key is 32 bytes or 114 bytes in length if the public key is 57 bytes.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          should.exist(issuedVc, 'Expected issuer to have issued a ' +\n            'credential.');\n          should.exist(proofs, 'Expected credential to have a proof.');\n          const eddsa2022Proofs = proofs.filter(\n            proof => proof?.cryptosuite === cryptosuite);\n          eddsa2022Proofs.length.should.be.gte(1, 'Expected at least one ' +\n            'eddsa-rdfc-2022 cryptosuite.');\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.proofValue, 'Expected a proof value on ' +\n              'the proof.');\n            const valueBytes = bs58Decode({id: proof.proofValue});\n            should.exist(proof.verificationMethod);\n            const vmBytes = await getPublicKeyBytes({\n              did: proof.verificationMethod});\n            vmBytes.byteLength.should.be.oneOf([32, 57], 'Expected public ' +\n              'key length to be either 32 or 57 bytes.');\n            if(vmBytes.byteLength === 32) {\n              valueBytes.byteLength.should.equal(64, 'Expected 64 byte ' +\n                'proofValue for 32 byte key.');\n            } else {\n              valueBytes.byteLength.should.equal(114, 'Expected 114 byte ' +\n                'proofValue for 57 byte key.');\n            }\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "1YOFKqggqOlZ46lVBq-gZ",
              "ctx": null
            },
            {
              "type": "test",
              "title": "\"proof\" MUST verify when using a conformant verifier.",
              "body": "async function() {\n            this.test.cell = {columnId, rowId: this.test.title};\n            should.exist(verifier, 'Expected implementation to have a VC ' +\n              'API compatible verifier.');\n            const {result, error} = await verifier.post({json: {\n              verifiableCredential: issuedVc,\n              options: {checks: ['proof']}\n            }});\n            should.not.exist(error, 'Expected verifier to not error.');\n            should.exist(result, 'Expected verifier to return a result.');\n            result.status.should.not.equal(400, 'Expected status code to not ' +\n              'be 400.');\n            result.status.should.equal(200, 'Expected status code to be 200.');\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "1YOFKqggqOlZ46lVBq-gZ",
              "ctx": null
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook for \"The field \"cryptosuite\" MUST be \"eddsa-rdfc-2022\".\"",
              "body": "async function() {\n          issuedVc = await createInitialVc({issuer, vc: validVc});\n          proofs = Array.isArray(issuedVc?.proof) ?\n            issuedVc.proof : [issuedVc?.proof];\n          const verificationMethods = proofs.map(\n            proof => proof.verificationMethod);\n          for(const verificationMethod of verificationMethods) {\n            const verificationMethodDocument = await documentLoader({\n              url: verificationMethod\n            });\n            verificationMethodDocuments.push(verificationMethodDocument);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "1YOFKqggqOlZ46lVBq-gZ",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6264,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 176,
              "_error": null,
              "state": "failed",
              "err": {
                "response": {},
                "request": {},
                "options": {
                  "headers": {},
                  "body": "{\"credential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\"],\"id\":\"urn:uuid:b27e8dba-2bf1-4df4-9a6c-531d48f69859\",\"type\":[\"VerifiableCredential\"],\"issuer\":\"did:key:z6MkmiYjSToh5NdEf9xNuh5mDGXGYinzcAy1s4feRHtkEQJr\",\"issuanceDate\":\"2020-03-16T22:37:26.544Z\",\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\"}},\"options\":{\"type\":\"DataIntegrityProof\",\"cryptosuite\":\"eddsa-rdfc-2022\"}}",
                  "method": "POST",
                  "json": {
                    "credential": {
                      "@context": [
                        "https://www.w3.org/2018/credentials/v1"
                      ],
                      "id": "urn:uuid:b27e8dba-2bf1-4df4-9a6c-531d48f69859",
                      "type": [
                        "VerifiableCredential"
                      ],
                      "issuer": "did:key:z6MkmiYjSToh5NdEf9xNuh5mDGXGYinzcAy1s4feRHtkEQJr",
                      "issuanceDate": "2020-03-16T22:37:26.544Z",
                      "credentialSubject": {
                        "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                      }
                    },
                    "options": {
                      "type": "DataIntegrityProof",
                      "cryptosuite": "eddsa-rdfc-2022"
                    }
                  },
                  "agent": {
                    "_events": {},
                    "_eventsCount": 2,
                    "defaultPort": 443,
                    "protocol": "https:",
                    "options": {
                      "rejectUnauthorized": false,
                      "noDelay": true,
                      "path": null
                    },
                    "requests": {},
                    "sockets": {},
                    "freeSockets": {},
                    "keepAliveMsecs": 1000,
                    "keepAlive": false,
                    "maxSockets": null,
                    "maxFreeSockets": 256,
                    "scheduling": "lifo",
                    "maxTotalSockets": null,
                    "totalSocketCount": 0,
                    "maxCachedSessions": 100,
                    "_sessionCache": {
                      "map": {},
                      "list": []
                    }
                  },
                  "hooks": {
                    "beforeRequest": [],
                    "beforeRetry": [],
                    "afterResponse": [],
                    "beforeError": []
                  },
                  "prefixUrl": "",
                  "retry": {
                    "limit": 2,
                    "methods": [
                      "get",
                      "put",
                      "head",
                      "delete",
                      "options",
                      "trace"
                    ],
                    "statusCodes": [
                      408,
                      413,
                      429,
                      500,
                      502,
                      503,
                      504
                    ],
                    "afterStatusCodes": [
                      413,
                      429,
                      503
                    ],
                    "maxRetryAfter": null,
                    "backoffLimit": null
                  },
                  "throwHttpErrors": true,
                  "timeout": 10000,
                  "signal": {},
                  "duplex": "half"
                },
                "name": "HTTPError",
                "requestUrl": "https://aca-py.test-suite.app/vc/credentials/issue",
                "status": 400,
                "data": {
                  "message": "DID not found: did:key:z6MkmiYjSToh5NdEf9xNuh5mDGXGYinzcAy1s4feRHtkEQJr"
                }
              }
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "xPv_8J2ZP9zxN00BLSegn",
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
          "_testId": "urn:uuid:a91e0e62-183a-4974-80fd-418265e1d225"
        },
        {
          "title": "apicatalog.com",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The field \"cryptosuite\" MUST be \"eddsa-rdfc-2022\".",
              "body": "function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const suites = proofs.map(p => p?.cryptosuite);\n\n          suites.some(\n            suite => suite === cryptosuite\n          ).should.equal(true, 'Expected at least one proof to have ' +\n            '\"cryptosuite\" with the value \"eddsa-rdfc-2022\": ' +\n            JSON.stringify(suites) + ' does not contain \"eddsa-rdfc-2022\".');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "bNKpbUF4e79f1LFObDrxX",
              "ctx": null,
              "_testId": "urn:uuid:d890c586-9c84-4b77-b39f-fbf5726f1ec6",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "The field \"cryptosuite\" MUST be \"eddsa-rdfc-2022\"."
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Dereferencing the \"verificationMethod\" MUST result in an object containing a type property with the value set to \"Multikey\".",
              "body": "function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          verificationMethodDocuments.some(\n            verificationMethodDocument =>\n              verificationMethodDocument?.type === 'Multikey'\n          ).should.equal(true, 'Expected at least one proof to have \"type\" ' +\n            'property value \"Multikey\".');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "bNKpbUF4e79f1LFObDrxX",
              "ctx": null,
              "_testId": "urn:uuid:64d56b81-0d22-4a8e-b3ed-12418c4a3f8c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "Dereferencing the \"verificationMethod\" MUST result in an object containing a type property with the value set to \"Multikey\"."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          verificationMethodDocuments.some(\n            verificationMethodDocument =>\n              verificationMethodDocument?.type === 'Multikey'\n          ).should.equal(true, 'Expected at least one proof to have \"type\" ' +\n            'property value \"Multikey\".'\n          );\n          const controllerDocuments = [];\n          for(const verificationMethodDocument of verificationMethodDocuments) {\n            const controllerDocument = await documentLoader({\n              url: verificationMethodDocument.controller\n            });\n            controllerDocuments.push(controllerDocument);\n          }\n          proofs.some(\n            proof => controllerDocuments.some(controllerDocument =>\n              controllerDocument.hasOwnProperty(proof.proofPurpose))\n          ).should.equal(true, 'Expected \"proof.proofPurpose\" field ' +\n             'to match the verification method controller.'\n          );\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "bNKpbUF4e79f1LFObDrxX",
              "ctx": null,
              "_testId": "urn:uuid:fb6c3b49-e4fc-4370-a07e-ce7ebdf0c340",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6548,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"publicKeyMultibase\" value of the verification method MUST be 34 bytes in length and start with the base-58-btc prefix (z).",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          for(const verificationMethodDocument of verificationMethodDocuments) {\n            const multibase = 'z';\n            const {publicKeyMultibase} = verificationMethodDocument;\n            const isMultibaseEncoded =\n              publicKeyMultibase.startsWith(multibase) &&\n                shouldBeBs58(publicKeyMultibase);\n            isMultibaseEncoded.should.equal(\n              true,\n              'Expected \"publicKeyMultibase\" value of the verification ' +\n              'method to be multibase base58-btc encoded value'\n            );\n            const publicKeyMultibaseBytes = bs58Decode({\n              id: publicKeyMultibase\n            });\n            publicKeyMultibaseBytes.byteLength.should.equal(34, 'Expected ' +\n              '\"publicKeyMultibase\" value of the verification method to ' +\n              'be 34 bytes in length.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "bNKpbUF4e79f1LFObDrxX",
              "ctx": null,
              "_testId": "urn:uuid:70aa3e21-1826-48b0-aa6a-28e1fd5a73be",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "The \"publicKeyMultibase\" value of the verification method MUST be 34 bytes in length and start with the base-58-btc prefix (z)."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6549,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "[\"publicKeyMultibase\"] MUST consist of a binary value that startswith the two-byte prefix 0xed01",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n\n          for(const verificationMethodDocument of verificationMethodDocuments) {\n            // If we can decode then the key is valid\n            const {publicKey} =\n              await fromEncodedMultikey(verificationMethodDocument);\n\n            publicKey.length.should.equal(32, 'Expected public key ' +\n              'to be 32 bytes.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "bNKpbUF4e79f1LFObDrxX",
              "ctx": null,
              "_testId": "urn:uuid:d4808381-d444-405f-accf-372889fcf841",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "[\"publicKeyMultibase\"] MUST consist of a binary value that startswith the two-byte prefix 0xed01"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6549,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proofValue\" field when decoded to raw bytes, MUST be 64 bytes in length if the associated public key is 32 bytes or 114 bytes in length if the public key is 57 bytes.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          should.exist(issuedVc, 'Expected issuer to have issued a ' +\n            'credential.');\n          should.exist(proofs, 'Expected credential to have a proof.');\n          const eddsa2022Proofs = proofs.filter(\n            proof => proof?.cryptosuite === cryptosuite);\n          eddsa2022Proofs.length.should.be.gte(1, 'Expected at least one ' +\n            'eddsa-rdfc-2022 cryptosuite.');\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.proofValue, 'Expected a proof value on ' +\n              'the proof.');\n            const valueBytes = bs58Decode({id: proof.proofValue});\n            should.exist(proof.verificationMethod);\n            const vmBytes = await getPublicKeyBytes({\n              did: proof.verificationMethod});\n            vmBytes.byteLength.should.be.oneOf([32, 57], 'Expected public ' +\n              'key length to be either 32 or 57 bytes.');\n            if(vmBytes.byteLength === 32) {\n              valueBytes.byteLength.should.equal(64, 'Expected 64 byte ' +\n                'proofValue for 32 byte key.');\n            } else {\n              valueBytes.byteLength.should.equal(114, 'Expected 114 byte ' +\n                'proofValue for 57 byte key.');\n            }\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "bNKpbUF4e79f1LFObDrxX",
              "ctx": null,
              "_testId": "urn:uuid:90f533bb-5998-4ad0-9285-5a29b5c809d4",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "\"proofValue\" field when decoded to raw bytes, MUST be 64 bytes in length if the associated public key is 32 bytes or 114 bytes in length if the public key is 57 bytes."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6550,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof\" MUST verify when using a conformant verifier.",
              "body": "async function() {\n            this.test.cell = {columnId, rowId: this.test.title};\n            should.exist(verifier, 'Expected implementation to have a VC ' +\n              'API compatible verifier.');\n            const {result, error} = await verifier.post({json: {\n              verifiableCredential: issuedVc,\n              options: {checks: ['proof']}\n            }});\n            should.not.exist(error, 'Expected verifier to not error.');\n            should.exist(result, 'Expected verifier to return a result.');\n            result.status.should.not.equal(400, 'Expected status code to not ' +\n              'be 400.');\n            result.status.should.equal(200, 'Expected status code to be 200.');\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "bNKpbUF4e79f1LFObDrxX",
              "ctx": null,
              "_testId": "urn:uuid:a37f4fef-1df8-4fb7-9998-cb3f7385756a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "\"proof\" MUST verify when using a conformant verifier."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6550,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 138,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"apicatalog.com\"",
              "body": "async function() {\n          issuedVc = await createInitialVc({issuer, vc: validVc});\n          proofs = Array.isArray(issuedVc?.proof) ?\n            issuedVc.proof : [issuedVc?.proof];\n          const verificationMethods = proofs.map(\n            proof => proof.verificationMethod);\n          for(const verificationMethod of verificationMethods) {\n            const verificationMethodDocument = await documentLoader({\n              url: verificationMethod\n            });\n            verificationMethodDocuments.push(verificationMethodDocument);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "bNKpbUF4e79f1LFObDrxX",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6441,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 106,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "xPv_8J2ZP9zxN00BLSegn",
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
          "_testId": "urn:uuid:cf9bbcb1-8ddd-491e-b707-50bd65c11bf2"
        },
        {
          "title": "Digital Bazaar",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The field \"cryptosuite\" MUST be \"eddsa-rdfc-2022\".",
              "body": "function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const suites = proofs.map(p => p?.cryptosuite);\n\n          suites.some(\n            suite => suite === cryptosuite\n          ).should.equal(true, 'Expected at least one proof to have ' +\n            '\"cryptosuite\" with the value \"eddsa-rdfc-2022\": ' +\n            JSON.stringify(suites) + ' does not contain \"eddsa-rdfc-2022\".');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "PfDo-EXcvbvDRicZrs8Bq",
              "ctx": null,
              "_testId": "urn:uuid:bb81e64a-7c74-4cd2-ac26-f5e3fa8312cc",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The field \"cryptosuite\" MUST be \"eddsa-rdfc-2022\"."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Dereferencing the \"verificationMethod\" MUST result in an object containing a type property with the value set to \"Multikey\".",
              "body": "function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          verificationMethodDocuments.some(\n            verificationMethodDocument =>\n              verificationMethodDocument?.type === 'Multikey'\n          ).should.equal(true, 'Expected at least one proof to have \"type\" ' +\n            'property value \"Multikey\".');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "PfDo-EXcvbvDRicZrs8Bq",
              "ctx": null,
              "_testId": "urn:uuid:11f73b97-db17-44cc-8f71-4e24e9724ee3",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "Dereferencing the \"verificationMethod\" MUST result in an object containing a type property with the value set to \"Multikey\"."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          verificationMethodDocuments.some(\n            verificationMethodDocument =>\n              verificationMethodDocument?.type === 'Multikey'\n          ).should.equal(true, 'Expected at least one proof to have \"type\" ' +\n            'property value \"Multikey\".'\n          );\n          const controllerDocuments = [];\n          for(const verificationMethodDocument of verificationMethodDocuments) {\n            const controllerDocument = await documentLoader({\n              url: verificationMethodDocument.controller\n            });\n            controllerDocuments.push(controllerDocument);\n          }\n          proofs.some(\n            proof => controllerDocuments.some(controllerDocument =>\n              controllerDocument.hasOwnProperty(proof.proofPurpose))\n          ).should.equal(true, 'Expected \"proof.proofPurpose\" field ' +\n             'to match the verification method controller.'\n          );\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "PfDo-EXcvbvDRicZrs8Bq",
              "ctx": null,
              "_testId": "urn:uuid:d52433c0-a150-4268-a96f-26cef4eb8885",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6933,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"publicKeyMultibase\" value of the verification method MUST be 34 bytes in length and start with the base-58-btc prefix (z).",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          for(const verificationMethodDocument of verificationMethodDocuments) {\n            const multibase = 'z';\n            const {publicKeyMultibase} = verificationMethodDocument;\n            const isMultibaseEncoded =\n              publicKeyMultibase.startsWith(multibase) &&\n                shouldBeBs58(publicKeyMultibase);\n            isMultibaseEncoded.should.equal(\n              true,\n              'Expected \"publicKeyMultibase\" value of the verification ' +\n              'method to be multibase base58-btc encoded value'\n            );\n            const publicKeyMultibaseBytes = bs58Decode({\n              id: publicKeyMultibase\n            });\n            publicKeyMultibaseBytes.byteLength.should.equal(34, 'Expected ' +\n              '\"publicKeyMultibase\" value of the verification method to ' +\n              'be 34 bytes in length.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "PfDo-EXcvbvDRicZrs8Bq",
              "ctx": null,
              "_testId": "urn:uuid:0fb93e77-dba9-4cdf-9acf-546bf21e0831",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The \"publicKeyMultibase\" value of the verification method MUST be 34 bytes in length and start with the base-58-btc prefix (z)."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6934,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "[\"publicKeyMultibase\"] MUST consist of a binary value that startswith the two-byte prefix 0xed01",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n\n          for(const verificationMethodDocument of verificationMethodDocuments) {\n            // If we can decode then the key is valid\n            const {publicKey} =\n              await fromEncodedMultikey(verificationMethodDocument);\n\n            publicKey.length.should.equal(32, 'Expected public key ' +\n              'to be 32 bytes.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "PfDo-EXcvbvDRicZrs8Bq",
              "ctx": null,
              "_testId": "urn:uuid:72164142-1293-4350-935d-893767906c91",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "[\"publicKeyMultibase\"] MUST consist of a binary value that startswith the two-byte prefix 0xed01"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6934,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proofValue\" field when decoded to raw bytes, MUST be 64 bytes in length if the associated public key is 32 bytes or 114 bytes in length if the public key is 57 bytes.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          should.exist(issuedVc, 'Expected issuer to have issued a ' +\n            'credential.');\n          should.exist(proofs, 'Expected credential to have a proof.');\n          const eddsa2022Proofs = proofs.filter(\n            proof => proof?.cryptosuite === cryptosuite);\n          eddsa2022Proofs.length.should.be.gte(1, 'Expected at least one ' +\n            'eddsa-rdfc-2022 cryptosuite.');\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.proofValue, 'Expected a proof value on ' +\n              'the proof.');\n            const valueBytes = bs58Decode({id: proof.proofValue});\n            should.exist(proof.verificationMethod);\n            const vmBytes = await getPublicKeyBytes({\n              did: proof.verificationMethod});\n            vmBytes.byteLength.should.be.oneOf([32, 57], 'Expected public ' +\n              'key length to be either 32 or 57 bytes.');\n            if(vmBytes.byteLength === 32) {\n              valueBytes.byteLength.should.equal(64, 'Expected 64 byte ' +\n                'proofValue for 32 byte key.');\n            } else {\n              valueBytes.byteLength.should.equal(114, 'Expected 114 byte ' +\n                'proofValue for 57 byte key.');\n            }\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "PfDo-EXcvbvDRicZrs8Bq",
              "ctx": null,
              "_testId": "urn:uuid:de281392-d5fd-472f-a9e9-d26952cb04c1",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "\"proofValue\" field when decoded to raw bytes, MUST be 64 bytes in length if the associated public key is 32 bytes or 114 bytes in length if the public key is 57 bytes."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6934,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof\" MUST verify when using a conformant verifier.",
              "body": "async function() {\n            this.test.cell = {columnId, rowId: this.test.title};\n            should.exist(verifier, 'Expected implementation to have a VC ' +\n              'API compatible verifier.');\n            const {result, error} = await verifier.post({json: {\n              verifiableCredential: issuedVc,\n              options: {checks: ['proof']}\n            }});\n            should.not.exist(error, 'Expected verifier to not error.');\n            should.exist(result, 'Expected verifier to return a result.');\n            result.status.should.not.equal(400, 'Expected status code to not ' +\n              'be 400.');\n            result.status.should.equal(200, 'Expected status code to be 200.');\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "PfDo-EXcvbvDRicZrs8Bq",
              "ctx": null,
              "_testId": "urn:uuid:51172f9a-cea0-43d4-95ca-7d4945af5d08",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "\"proof\" MUST verify when using a conformant verifier."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6935,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 195,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Digital Bazaar\"",
              "body": "async function() {\n          issuedVc = await createInitialVc({issuer, vc: validVc});\n          proofs = Array.isArray(issuedVc?.proof) ?\n            issuedVc.proof : [issuedVc?.proof];\n          const verificationMethods = proofs.map(\n            proof => proof.verificationMethod);\n          for(const verificationMethod of verificationMethods) {\n            const verificationMethodDocument = await documentLoader({\n              url: verificationMethod\n            });\n            verificationMethodDocuments.push(verificationMethodDocument);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "PfDo-EXcvbvDRicZrs8Bq",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6689,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 244,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "xPv_8J2ZP9zxN00BLSegn",
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
          "_testId": "urn:uuid:d59edd89-a6bb-4b5c-843f-d6fd3adbf3db"
        },
        {
          "title": "Grotto Networking",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The field \"cryptosuite\" MUST be \"eddsa-rdfc-2022\".",
              "body": "function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const suites = proofs.map(p => p?.cryptosuite);\n\n          suites.some(\n            suite => suite === cryptosuite\n          ).should.equal(true, 'Expected at least one proof to have ' +\n            '\"cryptosuite\" with the value \"eddsa-rdfc-2022\": ' +\n            JSON.stringify(suites) + ' does not contain \"eddsa-rdfc-2022\".');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "T6YXyvM1bJXRhUVqMOnkC",
              "ctx": null,
              "_testId": "urn:uuid:ff4f278f-41d3-402e-a43c-7fad7b31ab74",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The field \"cryptosuite\" MUST be \"eddsa-rdfc-2022\"."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Dereferencing the \"verificationMethod\" MUST result in an object containing a type property with the value set to \"Multikey\".",
              "body": "function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          verificationMethodDocuments.some(\n            verificationMethodDocument =>\n              verificationMethodDocument?.type === 'Multikey'\n          ).should.equal(true, 'Expected at least one proof to have \"type\" ' +\n            'property value \"Multikey\".');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "T6YXyvM1bJXRhUVqMOnkC",
              "ctx": null,
              "_testId": "urn:uuid:e629be57-9665-472e-ba5e-98a1a00d7087",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "Dereferencing the \"verificationMethod\" MUST result in an object containing a type property with the value set to \"Multikey\"."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          verificationMethodDocuments.some(\n            verificationMethodDocument =>\n              verificationMethodDocument?.type === 'Multikey'\n          ).should.equal(true, 'Expected at least one proof to have \"type\" ' +\n            'property value \"Multikey\".'\n          );\n          const controllerDocuments = [];\n          for(const verificationMethodDocument of verificationMethodDocuments) {\n            const controllerDocument = await documentLoader({\n              url: verificationMethodDocument.controller\n            });\n            controllerDocuments.push(controllerDocument);\n          }\n          proofs.some(\n            proof => controllerDocuments.some(controllerDocument =>\n              controllerDocument.hasOwnProperty(proof.proofPurpose))\n          ).should.equal(true, 'Expected \"proof.proofPurpose\" field ' +\n             'to match the verification method controller.'\n          );\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "T6YXyvM1bJXRhUVqMOnkC",
              "ctx": null,
              "_testId": "urn:uuid:0748bfa7-6e7c-405f-864c-f7f5f74c46f9",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7209,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"publicKeyMultibase\" value of the verification method MUST be 34 bytes in length and start with the base-58-btc prefix (z).",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          for(const verificationMethodDocument of verificationMethodDocuments) {\n            const multibase = 'z';\n            const {publicKeyMultibase} = verificationMethodDocument;\n            const isMultibaseEncoded =\n              publicKeyMultibase.startsWith(multibase) &&\n                shouldBeBs58(publicKeyMultibase);\n            isMultibaseEncoded.should.equal(\n              true,\n              'Expected \"publicKeyMultibase\" value of the verification ' +\n              'method to be multibase base58-btc encoded value'\n            );\n            const publicKeyMultibaseBytes = bs58Decode({\n              id: publicKeyMultibase\n            });\n            publicKeyMultibaseBytes.byteLength.should.equal(34, 'Expected ' +\n              '\"publicKeyMultibase\" value of the verification method to ' +\n              'be 34 bytes in length.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "T6YXyvM1bJXRhUVqMOnkC",
              "ctx": null,
              "_testId": "urn:uuid:d8c66eae-3d3b-4101-8cb6-ccd9a2cd9512",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The \"publicKeyMultibase\" value of the verification method MUST be 34 bytes in length and start with the base-58-btc prefix (z)."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7209,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "[\"publicKeyMultibase\"] MUST consist of a binary value that startswith the two-byte prefix 0xed01",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n\n          for(const verificationMethodDocument of verificationMethodDocuments) {\n            // If we can decode then the key is valid\n            const {publicKey} =\n              await fromEncodedMultikey(verificationMethodDocument);\n\n            publicKey.length.should.equal(32, 'Expected public key ' +\n              'to be 32 bytes.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "T6YXyvM1bJXRhUVqMOnkC",
              "ctx": null,
              "_testId": "urn:uuid:ef5a52b0-70e0-4ec4-8cb8-098a175585c5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "[\"publicKeyMultibase\"] MUST consist of a binary value that startswith the two-byte prefix 0xed01"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7209,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proofValue\" field when decoded to raw bytes, MUST be 64 bytes in length if the associated public key is 32 bytes or 114 bytes in length if the public key is 57 bytes.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          should.exist(issuedVc, 'Expected issuer to have issued a ' +\n            'credential.');\n          should.exist(proofs, 'Expected credential to have a proof.');\n          const eddsa2022Proofs = proofs.filter(\n            proof => proof?.cryptosuite === cryptosuite);\n          eddsa2022Proofs.length.should.be.gte(1, 'Expected at least one ' +\n            'eddsa-rdfc-2022 cryptosuite.');\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.proofValue, 'Expected a proof value on ' +\n              'the proof.');\n            const valueBytes = bs58Decode({id: proof.proofValue});\n            should.exist(proof.verificationMethod);\n            const vmBytes = await getPublicKeyBytes({\n              did: proof.verificationMethod});\n            vmBytes.byteLength.should.be.oneOf([32, 57], 'Expected public ' +\n              'key length to be either 32 or 57 bytes.');\n            if(vmBytes.byteLength === 32) {\n              valueBytes.byteLength.should.equal(64, 'Expected 64 byte ' +\n                'proofValue for 32 byte key.');\n            } else {\n              valueBytes.byteLength.should.equal(114, 'Expected 114 byte ' +\n                'proofValue for 57 byte key.');\n            }\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "T6YXyvM1bJXRhUVqMOnkC",
              "ctx": null,
              "_testId": "urn:uuid:4db95d25-30ad-46fb-a636-cf442fefac0c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "\"proofValue\" field when decoded to raw bytes, MUST be 64 bytes in length if the associated public key is 32 bytes or 114 bytes in length if the public key is 57 bytes."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7210,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof\" MUST verify when using a conformant verifier.",
              "body": "async function() {\n            this.test.cell = {columnId, rowId: this.test.title};\n            should.exist(verifier, 'Expected implementation to have a VC ' +\n              'API compatible verifier.');\n            const {result, error} = await verifier.post({json: {\n              verifiableCredential: issuedVc,\n              options: {checks: ['proof']}\n            }});\n            should.not.exist(error, 'Expected verifier to not error.');\n            should.exist(result, 'Expected verifier to return a result.');\n            result.status.should.not.equal(400, 'Expected status code to not ' +\n              'be 400.');\n            result.status.should.equal(200, 'Expected status code to be 200.');\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "T6YXyvM1bJXRhUVqMOnkC",
              "ctx": null,
              "_testId": "urn:uuid:38b9d9b1-2e55-41bd-9c1d-59fb8f350a01",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "\"proof\" MUST verify when using a conformant verifier."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7210,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1014,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Grotto Networking\"",
              "body": "async function() {\n          issuedVc = await createInitialVc({issuer, vc: validVc});\n          proofs = Array.isArray(issuedVc?.proof) ?\n            issuedVc.proof : [issuedVc?.proof];\n          const verificationMethods = proofs.map(\n            proof => proof.verificationMethod);\n          for(const verificationMethod of verificationMethods) {\n            const verificationMethodDocument = await documentLoader({\n              url: verificationMethod\n            });\n            verificationMethodDocuments.push(verificationMethodDocument);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "T6YXyvM1bJXRhUVqMOnkC",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7130,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 79,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "xPv_8J2ZP9zxN00BLSegn",
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
          "_testId": "urn:uuid:8caf95c6-2d1b-430c-96e4-7add67bcd734"
        },
        {
          "title": "Procivis One Core",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The field \"cryptosuite\" MUST be \"eddsa-rdfc-2022\".",
              "body": "function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const suites = proofs.map(p => p?.cryptosuite);\n\n          suites.some(\n            suite => suite === cryptosuite\n          ).should.equal(true, 'Expected at least one proof to have ' +\n            '\"cryptosuite\" with the value \"eddsa-rdfc-2022\": ' +\n            JSON.stringify(suites) + ' does not contain \"eddsa-rdfc-2022\".');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "fL-MkkR0SCqRWMqZ0AOEe",
              "ctx": null
            },
            {
              "type": "test",
              "title": "Dereferencing the \"verificationMethod\" MUST result in an object containing a type property with the value set to \"Multikey\".",
              "body": "function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          verificationMethodDocuments.some(\n            verificationMethodDocument =>\n              verificationMethodDocument?.type === 'Multikey'\n          ).should.equal(true, 'Expected at least one proof to have \"type\" ' +\n            'property value \"Multikey\".');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "fL-MkkR0SCqRWMqZ0AOEe",
              "ctx": null
            },
            {
              "type": "test",
              "title": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          verificationMethodDocuments.some(\n            verificationMethodDocument =>\n              verificationMethodDocument?.type === 'Multikey'\n          ).should.equal(true, 'Expected at least one proof to have \"type\" ' +\n            'property value \"Multikey\".'\n          );\n          const controllerDocuments = [];\n          for(const verificationMethodDocument of verificationMethodDocuments) {\n            const controllerDocument = await documentLoader({\n              url: verificationMethodDocument.controller\n            });\n            controllerDocuments.push(controllerDocument);\n          }\n          proofs.some(\n            proof => controllerDocuments.some(controllerDocument =>\n              controllerDocument.hasOwnProperty(proof.proofPurpose))\n          ).should.equal(true, 'Expected \"proof.proofPurpose\" field ' +\n             'to match the verification method controller.'\n          );\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "fL-MkkR0SCqRWMqZ0AOEe",
              "ctx": null
            },
            {
              "type": "test",
              "title": "The \"publicKeyMultibase\" value of the verification method MUST be 34 bytes in length and start with the base-58-btc prefix (z).",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          for(const verificationMethodDocument of verificationMethodDocuments) {\n            const multibase = 'z';\n            const {publicKeyMultibase} = verificationMethodDocument;\n            const isMultibaseEncoded =\n              publicKeyMultibase.startsWith(multibase) &&\n                shouldBeBs58(publicKeyMultibase);\n            isMultibaseEncoded.should.equal(\n              true,\n              'Expected \"publicKeyMultibase\" value of the verification ' +\n              'method to be multibase base58-btc encoded value'\n            );\n            const publicKeyMultibaseBytes = bs58Decode({\n              id: publicKeyMultibase\n            });\n            publicKeyMultibaseBytes.byteLength.should.equal(34, 'Expected ' +\n              '\"publicKeyMultibase\" value of the verification method to ' +\n              'be 34 bytes in length.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "fL-MkkR0SCqRWMqZ0AOEe",
              "ctx": null
            },
            {
              "type": "test",
              "title": "[\"publicKeyMultibase\"] MUST consist of a binary value that startswith the two-byte prefix 0xed01",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n\n          for(const verificationMethodDocument of verificationMethodDocuments) {\n            // If we can decode then the key is valid\n            const {publicKey} =\n              await fromEncodedMultikey(verificationMethodDocument);\n\n            publicKey.length.should.equal(32, 'Expected public key ' +\n              'to be 32 bytes.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "fL-MkkR0SCqRWMqZ0AOEe",
              "ctx": null
            },
            {
              "type": "test",
              "title": "\"proofValue\" field when decoded to raw bytes, MUST be 64 bytes in length if the associated public key is 32 bytes or 114 bytes in length if the public key is 57 bytes.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          should.exist(issuedVc, 'Expected issuer to have issued a ' +\n            'credential.');\n          should.exist(proofs, 'Expected credential to have a proof.');\n          const eddsa2022Proofs = proofs.filter(\n            proof => proof?.cryptosuite === cryptosuite);\n          eddsa2022Proofs.length.should.be.gte(1, 'Expected at least one ' +\n            'eddsa-rdfc-2022 cryptosuite.');\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.proofValue, 'Expected a proof value on ' +\n              'the proof.');\n            const valueBytes = bs58Decode({id: proof.proofValue});\n            should.exist(proof.verificationMethod);\n            const vmBytes = await getPublicKeyBytes({\n              did: proof.verificationMethod});\n            vmBytes.byteLength.should.be.oneOf([32, 57], 'Expected public ' +\n              'key length to be either 32 or 57 bytes.');\n            if(vmBytes.byteLength === 32) {\n              valueBytes.byteLength.should.equal(64, 'Expected 64 byte ' +\n                'proofValue for 32 byte key.');\n            } else {\n              valueBytes.byteLength.should.equal(114, 'Expected 114 byte ' +\n                'proofValue for 57 byte key.');\n            }\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "fL-MkkR0SCqRWMqZ0AOEe",
              "ctx": null
            },
            {
              "type": "test",
              "title": "\"proof\" MUST verify when using a conformant verifier.",
              "body": "async function() {\n            this.test.cell = {columnId, rowId: this.test.title};\n            should.exist(verifier, 'Expected implementation to have a VC ' +\n              'API compatible verifier.');\n            const {result, error} = await verifier.post({json: {\n              verifiableCredential: issuedVc,\n              options: {checks: ['proof']}\n            }});\n            should.not.exist(error, 'Expected verifier to not error.');\n            should.exist(result, 'Expected verifier to return a result.');\n            result.status.should.not.equal(400, 'Expected status code to not ' +\n              'be 400.');\n            result.status.should.equal(200, 'Expected status code to be 200.');\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "fL-MkkR0SCqRWMqZ0AOEe",
              "ctx": null
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook for \"The field \"cryptosuite\" MUST be \"eddsa-rdfc-2022\".\"",
              "body": "async function() {\n          issuedVc = await createInitialVc({issuer, vc: validVc});\n          proofs = Array.isArray(issuedVc?.proof) ?\n            issuedVc.proof : [issuedVc?.proof];\n          const verificationMethods = proofs.map(\n            proof => proof.verificationMethod);\n          for(const verificationMethod of verificationMethods) {\n            const verificationMethodDocument = await documentLoader({\n              url: verificationMethod\n            });\n            verificationMethodDocuments.push(verificationMethodDocument);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "fL-MkkR0SCqRWMqZ0AOEe",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8224,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 139,
              "_error": null,
              "state": "failed",
              "err": {
                "response": {},
                "request": {},
                "options": {
                  "headers": {},
                  "body": "{\"credential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\"],\"id\":\"urn:uuid:a49c4ccd-b311-4486-ad77-dd2b926c29ac\",\"type\":[\"VerifiableCredential\"],\"issuer\":\"did:key:z6Mkpkxjp7478bTmfccmSdzJAXSwbN98KbQbgi4DNWJDwQNn\",\"issuanceDate\":\"2020-03-16T22:37:26.544Z\",\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\"}},\"options\":{\"credentialFormat\":\"JSON_LD_CLASSIC\",\"signatureAlgorithm\":\"EDDSA\",\"revocationMethod\":\"BITSTRINGSTATUSLIST\",\"cryptosuite\":\"eddsa-rdfc-2022\"}}",
                  "method": "POST",
                  "json": {
                    "credential": {
                      "@context": [
                        "https://www.w3.org/2018/credentials/v1"
                      ],
                      "id": "urn:uuid:a49c4ccd-b311-4486-ad77-dd2b926c29ac",
                      "type": [
                        "VerifiableCredential"
                      ],
                      "issuer": "did:key:z6Mkpkxjp7478bTmfccmSdzJAXSwbN98KbQbgi4DNWJDwQNn",
                      "issuanceDate": "2020-03-16T22:37:26.544Z",
                      "credentialSubject": {
                        "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                      }
                    },
                    "options": {
                      "credentialFormat": "JSON_LD_CLASSIC",
                      "signatureAlgorithm": "EDDSA",
                      "revocationMethod": "BITSTRINGSTATUSLIST",
                      "cryptosuite": "eddsa-rdfc-2022"
                    }
                  },
                  "agent": {
                    "_events": {},
                    "_eventsCount": 2,
                    "defaultPort": 443,
                    "protocol": "https:",
                    "options": {
                      "rejectUnauthorized": false,
                      "noDelay": true,
                      "path": null
                    },
                    "requests": {},
                    "sockets": {},
                    "freeSockets": {},
                    "keepAliveMsecs": 1000,
                    "keepAlive": false,
                    "maxSockets": null,
                    "maxFreeSockets": 256,
                    "scheduling": "lifo",
                    "maxTotalSockets": null,
                    "totalSocketCount": 0,
                    "maxCachedSessions": 100,
                    "_sessionCache": {
                      "map": {},
                      "list": []
                    }
                  },
                  "hooks": {
                    "beforeRequest": [],
                    "beforeRetry": [],
                    "afterResponse": [],
                    "beforeError": []
                  },
                  "prefixUrl": "",
                  "retry": {
                    "limit": 2,
                    "methods": [
                      "get",
                      "put",
                      "head",
                      "delete",
                      "options",
                      "trace"
                    ],
                    "statusCodes": [
                      408,
                      413,
                      429,
                      500,
                      502,
                      503,
                      504
                    ],
                    "afterStatusCodes": [
                      413,
                      429,
                      503
                    ],
                    "maxRetryAfter": null,
                    "backoffLimit": null
                  },
                  "throwHttpErrors": true,
                  "timeout": 10000,
                  "signal": {},
                  "duplex": "half"
                },
                "name": "HTTPError",
                "requestUrl": "https://core.test.procivis-one.com/vc-api/credentials/issue",
                "status": 400,
                "data": {
                  "errors": [
                    {
                      "status": 400,
                      "title": "Validation error: `Invalid JSON-LD document`",
                      "detail": null
                    }
                  ]
                }
              }
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "xPv_8J2ZP9zxN00BLSegn",
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
          "_testId": "urn:uuid:d87f6e68-8981-41ac-92b9-02d6f137939f"
        },
        {
          "title": "SpruceID",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The field \"cryptosuite\" MUST be \"eddsa-rdfc-2022\".",
              "body": "function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const suites = proofs.map(p => p?.cryptosuite);\n\n          suites.some(\n            suite => suite === cryptosuite\n          ).should.equal(true, 'Expected at least one proof to have ' +\n            '\"cryptosuite\" with the value \"eddsa-rdfc-2022\": ' +\n            JSON.stringify(suites) + ' does not contain \"eddsa-rdfc-2022\".');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "p2USVnw9M1JyJcvuDMNNm",
              "ctx": null,
              "_testId": "urn:uuid:0dcf3b44-2070-4f20-a841-5c05c72fed14",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The field \"cryptosuite\" MUST be \"eddsa-rdfc-2022\"."
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Dereferencing the \"verificationMethod\" MUST result in an object containing a type property with the value set to \"Multikey\".",
              "body": "function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          verificationMethodDocuments.some(\n            verificationMethodDocument =>\n              verificationMethodDocument?.type === 'Multikey'\n          ).should.equal(true, 'Expected at least one proof to have \"type\" ' +\n            'property value \"Multikey\".');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "p2USVnw9M1JyJcvuDMNNm",
              "ctx": null,
              "_testId": "urn:uuid:76c4e433-75b0-47cb-8ac9-72bee50ba013",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "Dereferencing the \"verificationMethod\" MUST result in an object containing a type property with the value set to \"Multikey\"."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          verificationMethodDocuments.some(\n            verificationMethodDocument =>\n              verificationMethodDocument?.type === 'Multikey'\n          ).should.equal(true, 'Expected at least one proof to have \"type\" ' +\n            'property value \"Multikey\".'\n          );\n          const controllerDocuments = [];\n          for(const verificationMethodDocument of verificationMethodDocuments) {\n            const controllerDocument = await documentLoader({\n              url: verificationMethodDocument.controller\n            });\n            controllerDocuments.push(controllerDocument);\n          }\n          proofs.some(\n            proof => controllerDocuments.some(controllerDocument =>\n              controllerDocument.hasOwnProperty(proof.proofPurpose))\n          ).should.equal(true, 'Expected \"proof.proofPurpose\" field ' +\n             'to match the verification method controller.'\n          );\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "p2USVnw9M1JyJcvuDMNNm",
              "ctx": null,
              "_testId": "urn:uuid:e037dda4-d6ac-4961-b693-d0efad68007f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8399,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"publicKeyMultibase\" value of the verification method MUST be 34 bytes in length and start with the base-58-btc prefix (z).",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          for(const verificationMethodDocument of verificationMethodDocuments) {\n            const multibase = 'z';\n            const {publicKeyMultibase} = verificationMethodDocument;\n            const isMultibaseEncoded =\n              publicKeyMultibase.startsWith(multibase) &&\n                shouldBeBs58(publicKeyMultibase);\n            isMultibaseEncoded.should.equal(\n              true,\n              'Expected \"publicKeyMultibase\" value of the verification ' +\n              'method to be multibase base58-btc encoded value'\n            );\n            const publicKeyMultibaseBytes = bs58Decode({\n              id: publicKeyMultibase\n            });\n            publicKeyMultibaseBytes.byteLength.should.equal(34, 'Expected ' +\n              '\"publicKeyMultibase\" value of the verification method to ' +\n              'be 34 bytes in length.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "p2USVnw9M1JyJcvuDMNNm",
              "ctx": null,
              "_testId": "urn:uuid:cfa7ddc2-9181-479a-b73f-2a7cf7509fd8",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The \"publicKeyMultibase\" value of the verification method MUST be 34 bytes in length and start with the base-58-btc prefix (z)."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8399,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "[\"publicKeyMultibase\"] MUST consist of a binary value that startswith the two-byte prefix 0xed01",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n\n          for(const verificationMethodDocument of verificationMethodDocuments) {\n            // If we can decode then the key is valid\n            const {publicKey} =\n              await fromEncodedMultikey(verificationMethodDocument);\n\n            publicKey.length.should.equal(32, 'Expected public key ' +\n              'to be 32 bytes.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "p2USVnw9M1JyJcvuDMNNm",
              "ctx": null,
              "_testId": "urn:uuid:6d0d759e-fb68-4321-a227-e75ea9548ec8",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "[\"publicKeyMultibase\"] MUST consist of a binary value that startswith the two-byte prefix 0xed01"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8399,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proofValue\" field when decoded to raw bytes, MUST be 64 bytes in length if the associated public key is 32 bytes or 114 bytes in length if the public key is 57 bytes.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          should.exist(issuedVc, 'Expected issuer to have issued a ' +\n            'credential.');\n          should.exist(proofs, 'Expected credential to have a proof.');\n          const eddsa2022Proofs = proofs.filter(\n            proof => proof?.cryptosuite === cryptosuite);\n          eddsa2022Proofs.length.should.be.gte(1, 'Expected at least one ' +\n            'eddsa-rdfc-2022 cryptosuite.');\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.proofValue, 'Expected a proof value on ' +\n              'the proof.');\n            const valueBytes = bs58Decode({id: proof.proofValue});\n            should.exist(proof.verificationMethod);\n            const vmBytes = await getPublicKeyBytes({\n              did: proof.verificationMethod});\n            vmBytes.byteLength.should.be.oneOf([32, 57], 'Expected public ' +\n              'key length to be either 32 or 57 bytes.');\n            if(vmBytes.byteLength === 32) {\n              valueBytes.byteLength.should.equal(64, 'Expected 64 byte ' +\n                'proofValue for 32 byte key.');\n            } else {\n              valueBytes.byteLength.should.equal(114, 'Expected 114 byte ' +\n                'proofValue for 57 byte key.');\n            }\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "p2USVnw9M1JyJcvuDMNNm",
              "ctx": null,
              "_testId": "urn:uuid:e5e873a9-14fd-4322-a049-abde135e45b4",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "\"proofValue\" field when decoded to raw bytes, MUST be 64 bytes in length if the associated public key is 32 bytes or 114 bytes in length if the public key is 57 bytes."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8400,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof\" MUST verify when using a conformant verifier.",
              "body": "async function() {\n            this.test.cell = {columnId, rowId: this.test.title};\n            should.exist(verifier, 'Expected implementation to have a VC ' +\n              'API compatible verifier.');\n            const {result, error} = await verifier.post({json: {\n              verifiableCredential: issuedVc,\n              options: {checks: ['proof']}\n            }});\n            should.not.exist(error, 'Expected verifier to not error.');\n            should.exist(result, 'Expected verifier to return a result.');\n            result.status.should.not.equal(400, 'Expected status code to not ' +\n              'be 400.');\n            result.status.should.equal(200, 'Expected status code to be 200.');\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "p2USVnw9M1JyJcvuDMNNm",
              "ctx": null,
              "_testId": "urn:uuid:299705c1-a889-42d2-b07b-26431781c32d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "\"proof\" MUST verify when using a conformant verifier."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8400,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 34,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"SpruceID\"",
              "body": "async function() {\n          issuedVc = await createInitialVc({issuer, vc: validVc});\n          proofs = Array.isArray(issuedVc?.proof) ?\n            issuedVc.proof : [issuedVc?.proof];\n          const verificationMethods = proofs.map(\n            proof => proof.verificationMethod);\n          for(const verificationMethod of verificationMethods) {\n            const verificationMethodDocument = await documentLoader({\n              url: verificationMethod\n            });\n            verificationMethodDocuments.push(verificationMethodDocument);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "p2USVnw9M1JyJcvuDMNNm",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8364,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 34,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "xPv_8J2ZP9zxN00BLSegn",
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
          "_testId": "urn:uuid:4602bdc1-e33f-4ff2-8340-c69f57a6bc1f"
        },
        {
          "title": "Trinsic",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The field \"cryptosuite\" MUST be \"eddsa-rdfc-2022\".",
              "body": "function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const suites = proofs.map(p => p?.cryptosuite);\n\n          suites.some(\n            suite => suite === cryptosuite\n          ).should.equal(true, 'Expected at least one proof to have ' +\n            '\"cryptosuite\" with the value \"eddsa-rdfc-2022\": ' +\n            JSON.stringify(suites) + ' does not contain \"eddsa-rdfc-2022\".');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "Bj4PVkPAN6eEVqLul7AW-",
              "ctx": null,
              "_testId": "urn:uuid:84c1b2fe-3f6b-43b1-9cad-1f6f2f2db611",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "The field \"cryptosuite\" MUST be \"eddsa-rdfc-2022\"."
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected at least one proof to have \"cryptosuite\" with the value \"eddsa-rdfc-2022\": [\"eddsa-2022\"] does not contain \"eddsa-rdfc-2022\".: expected false to equal true",
                "showDiff": true,
                "actual": "false",
                "expected": "true",
                "stack": "AssertionError: Expected at least one proof to have \"cryptosuite\" with the value \"eddsa-rdfc-2022\": [\"eddsa-2022\"] does not contain \"eddsa-rdfc-2022\".: expected false to equal true\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js:68:20)\n    at process.processImmediate (node:internal/timers:483:21)"
              }
            },
            {
              "type": "test",
              "title": "Dereferencing the \"verificationMethod\" MUST result in an object containing a type property with the value set to \"Multikey\".",
              "body": "function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          verificationMethodDocuments.some(\n            verificationMethodDocument =>\n              verificationMethodDocument?.type === 'Multikey'\n          ).should.equal(true, 'Expected at least one proof to have \"type\" ' +\n            'property value \"Multikey\".');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "Bj4PVkPAN6eEVqLul7AW-",
              "ctx": null,
              "_testId": "urn:uuid:1ad91e05-26fe-41f5-9602-90d1d5ba75f6",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "Dereferencing the \"verificationMethod\" MUST result in an object containing a type property with the value set to \"Multikey\"."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          verificationMethodDocuments.some(\n            verificationMethodDocument =>\n              verificationMethodDocument?.type === 'Multikey'\n          ).should.equal(true, 'Expected at least one proof to have \"type\" ' +\n            'property value \"Multikey\".'\n          );\n          const controllerDocuments = [];\n          for(const verificationMethodDocument of verificationMethodDocuments) {\n            const controllerDocument = await documentLoader({\n              url: verificationMethodDocument.controller\n            });\n            controllerDocuments.push(controllerDocument);\n          }\n          proofs.some(\n            proof => controllerDocuments.some(controllerDocument =>\n              controllerDocument.hasOwnProperty(proof.proofPurpose))\n          ).should.equal(true, 'Expected \"proof.proofPurpose\" field ' +\n             'to match the verification method controller.'\n          );\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "Bj4PVkPAN6eEVqLul7AW-",
              "ctx": null,
              "_testId": "urn:uuid:292d6bf2-fcf7-4738-85fb-8d6b849d5828",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8480,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"publicKeyMultibase\" value of the verification method MUST be 34 bytes in length and start with the base-58-btc prefix (z).",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          for(const verificationMethodDocument of verificationMethodDocuments) {\n            const multibase = 'z';\n            const {publicKeyMultibase} = verificationMethodDocument;\n            const isMultibaseEncoded =\n              publicKeyMultibase.startsWith(multibase) &&\n                shouldBeBs58(publicKeyMultibase);\n            isMultibaseEncoded.should.equal(\n              true,\n              'Expected \"publicKeyMultibase\" value of the verification ' +\n              'method to be multibase base58-btc encoded value'\n            );\n            const publicKeyMultibaseBytes = bs58Decode({\n              id: publicKeyMultibase\n            });\n            publicKeyMultibaseBytes.byteLength.should.equal(34, 'Expected ' +\n              '\"publicKeyMultibase\" value of the verification method to ' +\n              'be 34 bytes in length.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "Bj4PVkPAN6eEVqLul7AW-",
              "ctx": null,
              "_testId": "urn:uuid:fa81053b-b781-4f9e-944d-aeca2e8abf33",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "The \"publicKeyMultibase\" value of the verification method MUST be 34 bytes in length and start with the base-58-btc prefix (z)."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8480,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "[\"publicKeyMultibase\"] MUST consist of a binary value that startswith the two-byte prefix 0xed01",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n\n          for(const verificationMethodDocument of verificationMethodDocuments) {\n            // If we can decode then the key is valid\n            const {publicKey} =\n              await fromEncodedMultikey(verificationMethodDocument);\n\n            publicKey.length.should.equal(32, 'Expected public key ' +\n              'to be 32 bytes.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "Bj4PVkPAN6eEVqLul7AW-",
              "ctx": null,
              "_testId": "urn:uuid:0a556fa3-ef1f-449f-8f53-9456f4c1e48a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "[\"publicKeyMultibase\"] MUST consist of a binary value that startswith the two-byte prefix 0xed01"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8481,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proofValue\" field when decoded to raw bytes, MUST be 64 bytes in length if the associated public key is 32 bytes or 114 bytes in length if the public key is 57 bytes.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          should.exist(issuedVc, 'Expected issuer to have issued a ' +\n            'credential.');\n          should.exist(proofs, 'Expected credential to have a proof.');\n          const eddsa2022Proofs = proofs.filter(\n            proof => proof?.cryptosuite === cryptosuite);\n          eddsa2022Proofs.length.should.be.gte(1, 'Expected at least one ' +\n            'eddsa-rdfc-2022 cryptosuite.');\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.proofValue, 'Expected a proof value on ' +\n              'the proof.');\n            const valueBytes = bs58Decode({id: proof.proofValue});\n            should.exist(proof.verificationMethod);\n            const vmBytes = await getPublicKeyBytes({\n              did: proof.verificationMethod});\n            vmBytes.byteLength.should.be.oneOf([32, 57], 'Expected public ' +\n              'key length to be either 32 or 57 bytes.');\n            if(vmBytes.byteLength === 32) {\n              valueBytes.byteLength.should.equal(64, 'Expected 64 byte ' +\n                'proofValue for 32 byte key.');\n            } else {\n              valueBytes.byteLength.should.equal(114, 'Expected 114 byte ' +\n                'proofValue for 57 byte key.');\n            }\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "Bj4PVkPAN6eEVqLul7AW-",
              "ctx": null,
              "_testId": "urn:uuid:1e852054-bf81-4adf-8a9f-c052125e87a4",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "\"proofValue\" field when decoded to raw bytes, MUST be 64 bytes in length if the associated public key is 32 bytes or 114 bytes in length if the public key is 57 bytes."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8481,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected at least one eddsa-rdfc-2022 cryptosuite.: expected +0 to be at least 1",
                "showDiff": true,
                "actual": "0",
                "expected": "1",
                "operator": "strictEqual",
                "stack": "AssertionError: Expected at least one eddsa-rdfc-2022 cryptosuite.: expected +0 to be at least 1\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js:198:44)\n    at process.processImmediate (node:internal/timers:483:21)"
              }
            },
            {
              "type": "test",
              "title": "\"proof\" MUST verify when using a conformant verifier.",
              "body": "async function() {\n            this.test.cell = {columnId, rowId: this.test.title};\n            should.exist(verifier, 'Expected implementation to have a VC ' +\n              'API compatible verifier.');\n            const {result, error} = await verifier.post({json: {\n              verifiableCredential: issuedVc,\n              options: {checks: ['proof']}\n            }});\n            should.not.exist(error, 'Expected verifier to not error.');\n            should.exist(result, 'Expected verifier to return a result.');\n            result.status.should.not.equal(400, 'Expected status code to not ' +\n              'be 400.');\n            result.status.should.equal(200, 'Expected status code to be 200.');\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "Bj4PVkPAN6eEVqLul7AW-",
              "ctx": null,
              "_testId": "urn:uuid:3a824f83-8d74-4acb-a7e0-9047a340966c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "\"proof\" MUST verify when using a conformant verifier."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8482,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 56,
              "state": "passed",
              "speed": "medium"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Trinsic\"",
              "body": "async function() {\n          issuedVc = await createInitialVc({issuer, vc: validVc});\n          proofs = Array.isArray(issuedVc?.proof) ?\n            issuedVc.proof : [issuedVc?.proof];\n          const verificationMethods = proofs.map(\n            proof => proof.verificationMethod);\n          for(const verificationMethod of verificationMethods) {\n            const verificationMethodDocument = await documentLoader({\n              url: verificationMethod\n            });\n            verificationMethodDocuments.push(verificationMethodDocument);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "Bj4PVkPAN6eEVqLul7AW-",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8434,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 45,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "xPv_8J2ZP9zxN00BLSegn",
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
          "_testId": "urn:uuid:e149fb5e-88ae-40c6-b616-6f050c8631b9"
        },
        {
          "title": "bovine",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The field \"cryptosuite\" MUST be \"eddsa-rdfc-2022\".",
              "body": "function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const suites = proofs.map(p => p?.cryptosuite);\n\n          suites.some(\n            suite => suite === cryptosuite\n          ).should.equal(true, 'Expected at least one proof to have ' +\n            '\"cryptosuite\" with the value \"eddsa-rdfc-2022\": ' +\n            JSON.stringify(suites) + ' does not contain \"eddsa-rdfc-2022\".');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "qoWJFV3ivZ-4Ll_mTG4EE",
              "ctx": null,
              "_testId": "urn:uuid:138c5b94-e9d8-46db-b92b-a5817bd89430",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine",
                "rowId": "The field \"cryptosuite\" MUST be \"eddsa-rdfc-2022\"."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Dereferencing the \"verificationMethod\" MUST result in an object containing a type property with the value set to \"Multikey\".",
              "body": "function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          verificationMethodDocuments.some(\n            verificationMethodDocument =>\n              verificationMethodDocument?.type === 'Multikey'\n          ).should.equal(true, 'Expected at least one proof to have \"type\" ' +\n            'property value \"Multikey\".');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "qoWJFV3ivZ-4Ll_mTG4EE",
              "ctx": null,
              "_testId": "urn:uuid:26f68134-0725-456e-965c-055519ec569a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine",
                "rowId": "Dereferencing the \"verificationMethod\" MUST result in an object containing a type property with the value set to \"Multikey\"."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          verificationMethodDocuments.some(\n            verificationMethodDocument =>\n              verificationMethodDocument?.type === 'Multikey'\n          ).should.equal(true, 'Expected at least one proof to have \"type\" ' +\n            'property value \"Multikey\".'\n          );\n          const controllerDocuments = [];\n          for(const verificationMethodDocument of verificationMethodDocuments) {\n            const controllerDocument = await documentLoader({\n              url: verificationMethodDocument.controller\n            });\n            controllerDocuments.push(controllerDocument);\n          }\n          proofs.some(\n            proof => controllerDocuments.some(controllerDocument =>\n              controllerDocument.hasOwnProperty(proof.proofPurpose))\n          ).should.equal(true, 'Expected \"proof.proofPurpose\" field ' +\n             'to match the verification method controller.'\n          );\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "qoWJFV3ivZ-4Ll_mTG4EE",
              "ctx": null,
              "_testId": "urn:uuid:b4314d26-fa27-4063-9be9-55cce1f21367",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine",
                "rowId": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8644,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"publicKeyMultibase\" value of the verification method MUST be 34 bytes in length and start with the base-58-btc prefix (z).",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          for(const verificationMethodDocument of verificationMethodDocuments) {\n            const multibase = 'z';\n            const {publicKeyMultibase} = verificationMethodDocument;\n            const isMultibaseEncoded =\n              publicKeyMultibase.startsWith(multibase) &&\n                shouldBeBs58(publicKeyMultibase);\n            isMultibaseEncoded.should.equal(\n              true,\n              'Expected \"publicKeyMultibase\" value of the verification ' +\n              'method to be multibase base58-btc encoded value'\n            );\n            const publicKeyMultibaseBytes = bs58Decode({\n              id: publicKeyMultibase\n            });\n            publicKeyMultibaseBytes.byteLength.should.equal(34, 'Expected ' +\n              '\"publicKeyMultibase\" value of the verification method to ' +\n              'be 34 bytes in length.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "qoWJFV3ivZ-4Ll_mTG4EE",
              "ctx": null,
              "_testId": "urn:uuid:8f545e5a-433b-4b4b-bd66-de30c6eeb3cd",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine",
                "rowId": "The \"publicKeyMultibase\" value of the verification method MUST be 34 bytes in length and start with the base-58-btc prefix (z)."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8644,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "[\"publicKeyMultibase\"] MUST consist of a binary value that startswith the two-byte prefix 0xed01",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n\n          for(const verificationMethodDocument of verificationMethodDocuments) {\n            // If we can decode then the key is valid\n            const {publicKey} =\n              await fromEncodedMultikey(verificationMethodDocument);\n\n            publicKey.length.should.equal(32, 'Expected public key ' +\n              'to be 32 bytes.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "qoWJFV3ivZ-4Ll_mTG4EE",
              "ctx": null,
              "_testId": "urn:uuid:fe5737bb-ca52-454f-8816-739593c6ede2",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine",
                "rowId": "[\"publicKeyMultibase\"] MUST consist of a binary value that startswith the two-byte prefix 0xed01"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8644,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proofValue\" field when decoded to raw bytes, MUST be 64 bytes in length if the associated public key is 32 bytes or 114 bytes in length if the public key is 57 bytes.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          should.exist(issuedVc, 'Expected issuer to have issued a ' +\n            'credential.');\n          should.exist(proofs, 'Expected credential to have a proof.');\n          const eddsa2022Proofs = proofs.filter(\n            proof => proof?.cryptosuite === cryptosuite);\n          eddsa2022Proofs.length.should.be.gte(1, 'Expected at least one ' +\n            'eddsa-rdfc-2022 cryptosuite.');\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.proofValue, 'Expected a proof value on ' +\n              'the proof.');\n            const valueBytes = bs58Decode({id: proof.proofValue});\n            should.exist(proof.verificationMethod);\n            const vmBytes = await getPublicKeyBytes({\n              did: proof.verificationMethod});\n            vmBytes.byteLength.should.be.oneOf([32, 57], 'Expected public ' +\n              'key length to be either 32 or 57 bytes.');\n            if(vmBytes.byteLength === 32) {\n              valueBytes.byteLength.should.equal(64, 'Expected 64 byte ' +\n                'proofValue for 32 byte key.');\n            } else {\n              valueBytes.byteLength.should.equal(114, 'Expected 114 byte ' +\n                'proofValue for 57 byte key.');\n            }\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "qoWJFV3ivZ-4Ll_mTG4EE",
              "ctx": null,
              "_testId": "urn:uuid:a6f492d2-5003-4a74-acec-85bc127184f3",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine",
                "rowId": "\"proofValue\" field when decoded to raw bytes, MUST be 64 bytes in length if the associated public key is 32 bytes or 114 bytes in length if the public key is 57 bytes."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8645,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof\" MUST verify when using a conformant verifier.",
              "body": "async function() {\n            this.test.cell = {columnId, rowId: this.test.title};\n            should.exist(verifier, 'Expected implementation to have a VC ' +\n              'API compatible verifier.');\n            const {result, error} = await verifier.post({json: {\n              verifiableCredential: issuedVc,\n              options: {checks: ['proof']}\n            }});\n            should.not.exist(error, 'Expected verifier to not error.');\n            should.exist(result, 'Expected verifier to return a result.');\n            result.status.should.not.equal(400, 'Expected status code to not ' +\n              'be 400.');\n            result.status.should.equal(200, 'Expected status code to be 200.');\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "qoWJFV3ivZ-4Ll_mTG4EE",
              "ctx": null,
              "_testId": "urn:uuid:7d6ce224-e7f8-4ecc-a1ad-b3e29f14bf3d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine",
                "rowId": "\"proof\" MUST verify when using a conformant verifier."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8646,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 109,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"bovine\"",
              "body": "async function() {\n          issuedVc = await createInitialVc({issuer, vc: validVc});\n          proofs = Array.isArray(issuedVc?.proof) ?\n            issuedVc.proof : [issuedVc?.proof];\n          const verificationMethods = proofs.map(\n            proof => proof.verificationMethod);\n          for(const verificationMethod of verificationMethods) {\n            const verificationMethodDocument = await documentLoader({\n              url: verificationMethod\n            });\n            verificationMethodDocuments.push(verificationMethodDocument);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "qoWJFV3ivZ-4Ll_mTG4EE",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8538,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 105,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "xPv_8J2ZP9zxN00BLSegn",
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
          "_testId": "urn:uuid:54e2ecbc-a341-42a2-af3b-ed3bac50444b"
        }
      ],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "WPlaJch-NVuZkGaGbhKNz",
      "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Implementation",
      "_testId": "urn:uuid:b940f829-d0d0-441f-8252-b6e4240ce929",
      "columns": [
        "ACA-py",
        "apicatalog.com",
        "Digital Bazaar",
        "Grotto Networking",
        "Procivis One Core",
        "SpruceID",
        "Trinsic",
        "bovine"
      ],
      "rows": [
        {
          "id": "The field \"cryptosuite\" MUST be \"eddsa-rdfc-2022\".",
          "cells": [
            {
              "cell": {
                "rowId": "The field \"cryptosuite\" MUST be \"eddsa-rdfc-2022\".",
                "colId": "ACA-py"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            },
            {
              "type": "test",
              "title": "The field \"cryptosuite\" MUST be \"eddsa-rdfc-2022\".",
              "body": "function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const suites = proofs.map(p => p?.cryptosuite);\n\n          suites.some(\n            suite => suite === cryptosuite\n          ).should.equal(true, 'Expected at least one proof to have ' +\n            '\"cryptosuite\" with the value \"eddsa-rdfc-2022\": ' +\n            JSON.stringify(suites) + ' does not contain \"eddsa-rdfc-2022\".');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "bNKpbUF4e79f1LFObDrxX",
              "ctx": null,
              "_testId": "urn:uuid:d890c586-9c84-4b77-b39f-fbf5726f1ec6",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "The field \"cryptosuite\" MUST be \"eddsa-rdfc-2022\"."
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The field \"cryptosuite\" MUST be \"eddsa-rdfc-2022\".",
              "body": "function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const suites = proofs.map(p => p?.cryptosuite);\n\n          suites.some(\n            suite => suite === cryptosuite\n          ).should.equal(true, 'Expected at least one proof to have ' +\n            '\"cryptosuite\" with the value \"eddsa-rdfc-2022\": ' +\n            JSON.stringify(suites) + ' does not contain \"eddsa-rdfc-2022\".');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "PfDo-EXcvbvDRicZrs8Bq",
              "ctx": null,
              "_testId": "urn:uuid:bb81e64a-7c74-4cd2-ac26-f5e3fa8312cc",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The field \"cryptosuite\" MUST be \"eddsa-rdfc-2022\"."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The field \"cryptosuite\" MUST be \"eddsa-rdfc-2022\".",
              "body": "function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const suites = proofs.map(p => p?.cryptosuite);\n\n          suites.some(\n            suite => suite === cryptosuite\n          ).should.equal(true, 'Expected at least one proof to have ' +\n            '\"cryptosuite\" with the value \"eddsa-rdfc-2022\": ' +\n            JSON.stringify(suites) + ' does not contain \"eddsa-rdfc-2022\".');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "T6YXyvM1bJXRhUVqMOnkC",
              "ctx": null,
              "_testId": "urn:uuid:ff4f278f-41d3-402e-a43c-7fad7b31ab74",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The field \"cryptosuite\" MUST be \"eddsa-rdfc-2022\"."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "cell": {
                "rowId": "The field \"cryptosuite\" MUST be \"eddsa-rdfc-2022\".",
                "colId": "Procivis One Core"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            },
            {
              "type": "test",
              "title": "The field \"cryptosuite\" MUST be \"eddsa-rdfc-2022\".",
              "body": "function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const suites = proofs.map(p => p?.cryptosuite);\n\n          suites.some(\n            suite => suite === cryptosuite\n          ).should.equal(true, 'Expected at least one proof to have ' +\n            '\"cryptosuite\" with the value \"eddsa-rdfc-2022\": ' +\n            JSON.stringify(suites) + ' does not contain \"eddsa-rdfc-2022\".');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "p2USVnw9M1JyJcvuDMNNm",
              "ctx": null,
              "_testId": "urn:uuid:0dcf3b44-2070-4f20-a841-5c05c72fed14",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The field \"cryptosuite\" MUST be \"eddsa-rdfc-2022\"."
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The field \"cryptosuite\" MUST be \"eddsa-rdfc-2022\".",
              "body": "function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const suites = proofs.map(p => p?.cryptosuite);\n\n          suites.some(\n            suite => suite === cryptosuite\n          ).should.equal(true, 'Expected at least one proof to have ' +\n            '\"cryptosuite\" with the value \"eddsa-rdfc-2022\": ' +\n            JSON.stringify(suites) + ' does not contain \"eddsa-rdfc-2022\".');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "Bj4PVkPAN6eEVqLul7AW-",
              "ctx": null,
              "_testId": "urn:uuid:84c1b2fe-3f6b-43b1-9cad-1f6f2f2db611",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "The field \"cryptosuite\" MUST be \"eddsa-rdfc-2022\"."
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected at least one proof to have \"cryptosuite\" with the value \"eddsa-rdfc-2022\": [\"eddsa-2022\"] does not contain \"eddsa-rdfc-2022\".: expected false to equal true",
                "showDiff": true,
                "actual": "false",
                "expected": "true",
                "stack": "AssertionError: Expected at least one proof to have \"cryptosuite\" with the value \"eddsa-rdfc-2022\": [\"eddsa-2022\"] does not contain \"eddsa-rdfc-2022\".: expected false to equal true\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js:68:20)\n    at process.processImmediate (node:internal/timers:483:21)"
              }
            },
            {
              "type": "test",
              "title": "The field \"cryptosuite\" MUST be \"eddsa-rdfc-2022\".",
              "body": "function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const suites = proofs.map(p => p?.cryptosuite);\n\n          suites.some(\n            suite => suite === cryptosuite\n          ).should.equal(true, 'Expected at least one proof to have ' +\n            '\"cryptosuite\" with the value \"eddsa-rdfc-2022\": ' +\n            JSON.stringify(suites) + ' does not contain \"eddsa-rdfc-2022\".');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "qoWJFV3ivZ-4Ll_mTG4EE",
              "ctx": null,
              "_testId": "urn:uuid:138c5b94-e9d8-46db-b92b-a5817bd89430",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine",
                "rowId": "The field \"cryptosuite\" MUST be \"eddsa-rdfc-2022\"."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "Dereferencing the \"verificationMethod\" MUST result in an object containing a type property with the value set to \"Multikey\".",
          "cells": [
            {
              "cell": {
                "rowId": "Dereferencing the \"verificationMethod\" MUST result in an object containing a type property with the value set to \"Multikey\".",
                "colId": "ACA-py"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            },
            {
              "type": "test",
              "title": "Dereferencing the \"verificationMethod\" MUST result in an object containing a type property with the value set to \"Multikey\".",
              "body": "function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          verificationMethodDocuments.some(\n            verificationMethodDocument =>\n              verificationMethodDocument?.type === 'Multikey'\n          ).should.equal(true, 'Expected at least one proof to have \"type\" ' +\n            'property value \"Multikey\".');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "bNKpbUF4e79f1LFObDrxX",
              "ctx": null,
              "_testId": "urn:uuid:64d56b81-0d22-4a8e-b3ed-12418c4a3f8c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "Dereferencing the \"verificationMethod\" MUST result in an object containing a type property with the value set to \"Multikey\"."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Dereferencing the \"verificationMethod\" MUST result in an object containing a type property with the value set to \"Multikey\".",
              "body": "function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          verificationMethodDocuments.some(\n            verificationMethodDocument =>\n              verificationMethodDocument?.type === 'Multikey'\n          ).should.equal(true, 'Expected at least one proof to have \"type\" ' +\n            'property value \"Multikey\".');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "PfDo-EXcvbvDRicZrs8Bq",
              "ctx": null,
              "_testId": "urn:uuid:11f73b97-db17-44cc-8f71-4e24e9724ee3",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "Dereferencing the \"verificationMethod\" MUST result in an object containing a type property with the value set to \"Multikey\"."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Dereferencing the \"verificationMethod\" MUST result in an object containing a type property with the value set to \"Multikey\".",
              "body": "function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          verificationMethodDocuments.some(\n            verificationMethodDocument =>\n              verificationMethodDocument?.type === 'Multikey'\n          ).should.equal(true, 'Expected at least one proof to have \"type\" ' +\n            'property value \"Multikey\".');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "T6YXyvM1bJXRhUVqMOnkC",
              "ctx": null,
              "_testId": "urn:uuid:e629be57-9665-472e-ba5e-98a1a00d7087",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "Dereferencing the \"verificationMethod\" MUST result in an object containing a type property with the value set to \"Multikey\"."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "cell": {
                "rowId": "Dereferencing the \"verificationMethod\" MUST result in an object containing a type property with the value set to \"Multikey\".",
                "colId": "Procivis One Core"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            },
            {
              "type": "test",
              "title": "Dereferencing the \"verificationMethod\" MUST result in an object containing a type property with the value set to \"Multikey\".",
              "body": "function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          verificationMethodDocuments.some(\n            verificationMethodDocument =>\n              verificationMethodDocument?.type === 'Multikey'\n          ).should.equal(true, 'Expected at least one proof to have \"type\" ' +\n            'property value \"Multikey\".');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "p2USVnw9M1JyJcvuDMNNm",
              "ctx": null,
              "_testId": "urn:uuid:76c4e433-75b0-47cb-8ac9-72bee50ba013",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "Dereferencing the \"verificationMethod\" MUST result in an object containing a type property with the value set to \"Multikey\"."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Dereferencing the \"verificationMethod\" MUST result in an object containing a type property with the value set to \"Multikey\".",
              "body": "function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          verificationMethodDocuments.some(\n            verificationMethodDocument =>\n              verificationMethodDocument?.type === 'Multikey'\n          ).should.equal(true, 'Expected at least one proof to have \"type\" ' +\n            'property value \"Multikey\".');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "Bj4PVkPAN6eEVqLul7AW-",
              "ctx": null,
              "_testId": "urn:uuid:1ad91e05-26fe-41f5-9602-90d1d5ba75f6",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "Dereferencing the \"verificationMethod\" MUST result in an object containing a type property with the value set to \"Multikey\"."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Dereferencing the \"verificationMethod\" MUST result in an object containing a type property with the value set to \"Multikey\".",
              "body": "function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          verificationMethodDocuments.some(\n            verificationMethodDocument =>\n              verificationMethodDocument?.type === 'Multikey'\n          ).should.equal(true, 'Expected at least one proof to have \"type\" ' +\n            'property value \"Multikey\".');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "qoWJFV3ivZ-4Ll_mTG4EE",
              "ctx": null,
              "_testId": "urn:uuid:26f68134-0725-456e-965c-055519ec569a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine",
                "rowId": "Dereferencing the \"verificationMethod\" MUST result in an object containing a type property with the value set to \"Multikey\"."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
          "cells": [
            {
              "cell": {
                "rowId": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
                "colId": "ACA-py"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            },
            {
              "type": "test",
              "title": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          verificationMethodDocuments.some(\n            verificationMethodDocument =>\n              verificationMethodDocument?.type === 'Multikey'\n          ).should.equal(true, 'Expected at least one proof to have \"type\" ' +\n            'property value \"Multikey\".'\n          );\n          const controllerDocuments = [];\n          for(const verificationMethodDocument of verificationMethodDocuments) {\n            const controllerDocument = await documentLoader({\n              url: verificationMethodDocument.controller\n            });\n            controllerDocuments.push(controllerDocument);\n          }\n          proofs.some(\n            proof => controllerDocuments.some(controllerDocument =>\n              controllerDocument.hasOwnProperty(proof.proofPurpose))\n          ).should.equal(true, 'Expected \"proof.proofPurpose\" field ' +\n             'to match the verification method controller.'\n          );\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "bNKpbUF4e79f1LFObDrxX",
              "ctx": null,
              "_testId": "urn:uuid:fb6c3b49-e4fc-4370-a07e-ce7ebdf0c340",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6548,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          verificationMethodDocuments.some(\n            verificationMethodDocument =>\n              verificationMethodDocument?.type === 'Multikey'\n          ).should.equal(true, 'Expected at least one proof to have \"type\" ' +\n            'property value \"Multikey\".'\n          );\n          const controllerDocuments = [];\n          for(const verificationMethodDocument of verificationMethodDocuments) {\n            const controllerDocument = await documentLoader({\n              url: verificationMethodDocument.controller\n            });\n            controllerDocuments.push(controllerDocument);\n          }\n          proofs.some(\n            proof => controllerDocuments.some(controllerDocument =>\n              controllerDocument.hasOwnProperty(proof.proofPurpose))\n          ).should.equal(true, 'Expected \"proof.proofPurpose\" field ' +\n             'to match the verification method controller.'\n          );\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "PfDo-EXcvbvDRicZrs8Bq",
              "ctx": null,
              "_testId": "urn:uuid:d52433c0-a150-4268-a96f-26cef4eb8885",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6933,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          verificationMethodDocuments.some(\n            verificationMethodDocument =>\n              verificationMethodDocument?.type === 'Multikey'\n          ).should.equal(true, 'Expected at least one proof to have \"type\" ' +\n            'property value \"Multikey\".'\n          );\n          const controllerDocuments = [];\n          for(const verificationMethodDocument of verificationMethodDocuments) {\n            const controllerDocument = await documentLoader({\n              url: verificationMethodDocument.controller\n            });\n            controllerDocuments.push(controllerDocument);\n          }\n          proofs.some(\n            proof => controllerDocuments.some(controllerDocument =>\n              controllerDocument.hasOwnProperty(proof.proofPurpose))\n          ).should.equal(true, 'Expected \"proof.proofPurpose\" field ' +\n             'to match the verification method controller.'\n          );\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "T6YXyvM1bJXRhUVqMOnkC",
              "ctx": null,
              "_testId": "urn:uuid:0748bfa7-6e7c-405f-864c-f7f5f74c46f9",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7209,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "cell": {
                "rowId": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
                "colId": "Procivis One Core"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            },
            {
              "type": "test",
              "title": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          verificationMethodDocuments.some(\n            verificationMethodDocument =>\n              verificationMethodDocument?.type === 'Multikey'\n          ).should.equal(true, 'Expected at least one proof to have \"type\" ' +\n            'property value \"Multikey\".'\n          );\n          const controllerDocuments = [];\n          for(const verificationMethodDocument of verificationMethodDocuments) {\n            const controllerDocument = await documentLoader({\n              url: verificationMethodDocument.controller\n            });\n            controllerDocuments.push(controllerDocument);\n          }\n          proofs.some(\n            proof => controllerDocuments.some(controllerDocument =>\n              controllerDocument.hasOwnProperty(proof.proofPurpose))\n          ).should.equal(true, 'Expected \"proof.proofPurpose\" field ' +\n             'to match the verification method controller.'\n          );\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "p2USVnw9M1JyJcvuDMNNm",
              "ctx": null,
              "_testId": "urn:uuid:e037dda4-d6ac-4961-b693-d0efad68007f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8399,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          verificationMethodDocuments.some(\n            verificationMethodDocument =>\n              verificationMethodDocument?.type === 'Multikey'\n          ).should.equal(true, 'Expected at least one proof to have \"type\" ' +\n            'property value \"Multikey\".'\n          );\n          const controllerDocuments = [];\n          for(const verificationMethodDocument of verificationMethodDocuments) {\n            const controllerDocument = await documentLoader({\n              url: verificationMethodDocument.controller\n            });\n            controllerDocuments.push(controllerDocument);\n          }\n          proofs.some(\n            proof => controllerDocuments.some(controllerDocument =>\n              controllerDocument.hasOwnProperty(proof.proofPurpose))\n          ).should.equal(true, 'Expected \"proof.proofPurpose\" field ' +\n             'to match the verification method controller.'\n          );\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "Bj4PVkPAN6eEVqLul7AW-",
              "ctx": null,
              "_testId": "urn:uuid:292d6bf2-fcf7-4738-85fb-8d6b849d5828",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8480,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          verificationMethodDocuments.some(\n            verificationMethodDocument =>\n              verificationMethodDocument?.type === 'Multikey'\n          ).should.equal(true, 'Expected at least one proof to have \"type\" ' +\n            'property value \"Multikey\".'\n          );\n          const controllerDocuments = [];\n          for(const verificationMethodDocument of verificationMethodDocuments) {\n            const controllerDocument = await documentLoader({\n              url: verificationMethodDocument.controller\n            });\n            controllerDocuments.push(controllerDocument);\n          }\n          proofs.some(\n            proof => controllerDocuments.some(controllerDocument =>\n              controllerDocument.hasOwnProperty(proof.proofPurpose))\n          ).should.equal(true, 'Expected \"proof.proofPurpose\" field ' +\n             'to match the verification method controller.'\n          );\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "qoWJFV3ivZ-4Ll_mTG4EE",
              "ctx": null,
              "_testId": "urn:uuid:b4314d26-fa27-4063-9be9-55cce1f21367",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine",
                "rowId": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8644,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "The \"publicKeyMultibase\" value of the verification method MUST be 34 bytes in length and start with the base-58-btc prefix (z).",
          "cells": [
            {
              "cell": {
                "rowId": "The \"publicKeyMultibase\" value of the verification method MUST be 34 bytes in length and start with the base-58-btc prefix (z).",
                "colId": "ACA-py"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            },
            {
              "type": "test",
              "title": "The \"publicKeyMultibase\" value of the verification method MUST be 34 bytes in length and start with the base-58-btc prefix (z).",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          for(const verificationMethodDocument of verificationMethodDocuments) {\n            const multibase = 'z';\n            const {publicKeyMultibase} = verificationMethodDocument;\n            const isMultibaseEncoded =\n              publicKeyMultibase.startsWith(multibase) &&\n                shouldBeBs58(publicKeyMultibase);\n            isMultibaseEncoded.should.equal(\n              true,\n              'Expected \"publicKeyMultibase\" value of the verification ' +\n              'method to be multibase base58-btc encoded value'\n            );\n            const publicKeyMultibaseBytes = bs58Decode({\n              id: publicKeyMultibase\n            });\n            publicKeyMultibaseBytes.byteLength.should.equal(34, 'Expected ' +\n              '\"publicKeyMultibase\" value of the verification method to ' +\n              'be 34 bytes in length.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "bNKpbUF4e79f1LFObDrxX",
              "ctx": null,
              "_testId": "urn:uuid:70aa3e21-1826-48b0-aa6a-28e1fd5a73be",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "The \"publicKeyMultibase\" value of the verification method MUST be 34 bytes in length and start with the base-58-btc prefix (z)."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6549,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"publicKeyMultibase\" value of the verification method MUST be 34 bytes in length and start with the base-58-btc prefix (z).",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          for(const verificationMethodDocument of verificationMethodDocuments) {\n            const multibase = 'z';\n            const {publicKeyMultibase} = verificationMethodDocument;\n            const isMultibaseEncoded =\n              publicKeyMultibase.startsWith(multibase) &&\n                shouldBeBs58(publicKeyMultibase);\n            isMultibaseEncoded.should.equal(\n              true,\n              'Expected \"publicKeyMultibase\" value of the verification ' +\n              'method to be multibase base58-btc encoded value'\n            );\n            const publicKeyMultibaseBytes = bs58Decode({\n              id: publicKeyMultibase\n            });\n            publicKeyMultibaseBytes.byteLength.should.equal(34, 'Expected ' +\n              '\"publicKeyMultibase\" value of the verification method to ' +\n              'be 34 bytes in length.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "PfDo-EXcvbvDRicZrs8Bq",
              "ctx": null,
              "_testId": "urn:uuid:0fb93e77-dba9-4cdf-9acf-546bf21e0831",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The \"publicKeyMultibase\" value of the verification method MUST be 34 bytes in length and start with the base-58-btc prefix (z)."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6934,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"publicKeyMultibase\" value of the verification method MUST be 34 bytes in length and start with the base-58-btc prefix (z).",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          for(const verificationMethodDocument of verificationMethodDocuments) {\n            const multibase = 'z';\n            const {publicKeyMultibase} = verificationMethodDocument;\n            const isMultibaseEncoded =\n              publicKeyMultibase.startsWith(multibase) &&\n                shouldBeBs58(publicKeyMultibase);\n            isMultibaseEncoded.should.equal(\n              true,\n              'Expected \"publicKeyMultibase\" value of the verification ' +\n              'method to be multibase base58-btc encoded value'\n            );\n            const publicKeyMultibaseBytes = bs58Decode({\n              id: publicKeyMultibase\n            });\n            publicKeyMultibaseBytes.byteLength.should.equal(34, 'Expected ' +\n              '\"publicKeyMultibase\" value of the verification method to ' +\n              'be 34 bytes in length.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "T6YXyvM1bJXRhUVqMOnkC",
              "ctx": null,
              "_testId": "urn:uuid:d8c66eae-3d3b-4101-8cb6-ccd9a2cd9512",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The \"publicKeyMultibase\" value of the verification method MUST be 34 bytes in length and start with the base-58-btc prefix (z)."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7209,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "cell": {
                "rowId": "The \"publicKeyMultibase\" value of the verification method MUST be 34 bytes in length and start with the base-58-btc prefix (z).",
                "colId": "Procivis One Core"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            },
            {
              "type": "test",
              "title": "The \"publicKeyMultibase\" value of the verification method MUST be 34 bytes in length and start with the base-58-btc prefix (z).",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          for(const verificationMethodDocument of verificationMethodDocuments) {\n            const multibase = 'z';\n            const {publicKeyMultibase} = verificationMethodDocument;\n            const isMultibaseEncoded =\n              publicKeyMultibase.startsWith(multibase) &&\n                shouldBeBs58(publicKeyMultibase);\n            isMultibaseEncoded.should.equal(\n              true,\n              'Expected \"publicKeyMultibase\" value of the verification ' +\n              'method to be multibase base58-btc encoded value'\n            );\n            const publicKeyMultibaseBytes = bs58Decode({\n              id: publicKeyMultibase\n            });\n            publicKeyMultibaseBytes.byteLength.should.equal(34, 'Expected ' +\n              '\"publicKeyMultibase\" value of the verification method to ' +\n              'be 34 bytes in length.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "p2USVnw9M1JyJcvuDMNNm",
              "ctx": null,
              "_testId": "urn:uuid:cfa7ddc2-9181-479a-b73f-2a7cf7509fd8",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The \"publicKeyMultibase\" value of the verification method MUST be 34 bytes in length and start with the base-58-btc prefix (z)."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8399,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"publicKeyMultibase\" value of the verification method MUST be 34 bytes in length and start with the base-58-btc prefix (z).",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          for(const verificationMethodDocument of verificationMethodDocuments) {\n            const multibase = 'z';\n            const {publicKeyMultibase} = verificationMethodDocument;\n            const isMultibaseEncoded =\n              publicKeyMultibase.startsWith(multibase) &&\n                shouldBeBs58(publicKeyMultibase);\n            isMultibaseEncoded.should.equal(\n              true,\n              'Expected \"publicKeyMultibase\" value of the verification ' +\n              'method to be multibase base58-btc encoded value'\n            );\n            const publicKeyMultibaseBytes = bs58Decode({\n              id: publicKeyMultibase\n            });\n            publicKeyMultibaseBytes.byteLength.should.equal(34, 'Expected ' +\n              '\"publicKeyMultibase\" value of the verification method to ' +\n              'be 34 bytes in length.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "Bj4PVkPAN6eEVqLul7AW-",
              "ctx": null,
              "_testId": "urn:uuid:fa81053b-b781-4f9e-944d-aeca2e8abf33",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "The \"publicKeyMultibase\" value of the verification method MUST be 34 bytes in length and start with the base-58-btc prefix (z)."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8480,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"publicKeyMultibase\" value of the verification method MUST be 34 bytes in length and start with the base-58-btc prefix (z).",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          for(const verificationMethodDocument of verificationMethodDocuments) {\n            const multibase = 'z';\n            const {publicKeyMultibase} = verificationMethodDocument;\n            const isMultibaseEncoded =\n              publicKeyMultibase.startsWith(multibase) &&\n                shouldBeBs58(publicKeyMultibase);\n            isMultibaseEncoded.should.equal(\n              true,\n              'Expected \"publicKeyMultibase\" value of the verification ' +\n              'method to be multibase base58-btc encoded value'\n            );\n            const publicKeyMultibaseBytes = bs58Decode({\n              id: publicKeyMultibase\n            });\n            publicKeyMultibaseBytes.byteLength.should.equal(34, 'Expected ' +\n              '\"publicKeyMultibase\" value of the verification method to ' +\n              'be 34 bytes in length.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "qoWJFV3ivZ-4Ll_mTG4EE",
              "ctx": null,
              "_testId": "urn:uuid:8f545e5a-433b-4b4b-bd66-de30c6eeb3cd",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine",
                "rowId": "The \"publicKeyMultibase\" value of the verification method MUST be 34 bytes in length and start with the base-58-btc prefix (z)."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8644,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "[\"publicKeyMultibase\"] MUST consist of a binary value that startswith the two-byte prefix 0xed01",
          "cells": [
            {
              "cell": {
                "rowId": "[\"publicKeyMultibase\"] MUST consist of a binary value that startswith the two-byte prefix 0xed01",
                "colId": "ACA-py"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            },
            {
              "type": "test",
              "title": "[\"publicKeyMultibase\"] MUST consist of a binary value that startswith the two-byte prefix 0xed01",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n\n          for(const verificationMethodDocument of verificationMethodDocuments) {\n            // If we can decode then the key is valid\n            const {publicKey} =\n              await fromEncodedMultikey(verificationMethodDocument);\n\n            publicKey.length.should.equal(32, 'Expected public key ' +\n              'to be 32 bytes.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "bNKpbUF4e79f1LFObDrxX",
              "ctx": null,
              "_testId": "urn:uuid:d4808381-d444-405f-accf-372889fcf841",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "[\"publicKeyMultibase\"] MUST consist of a binary value that startswith the two-byte prefix 0xed01"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6549,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "[\"publicKeyMultibase\"] MUST consist of a binary value that startswith the two-byte prefix 0xed01",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n\n          for(const verificationMethodDocument of verificationMethodDocuments) {\n            // If we can decode then the key is valid\n            const {publicKey} =\n              await fromEncodedMultikey(verificationMethodDocument);\n\n            publicKey.length.should.equal(32, 'Expected public key ' +\n              'to be 32 bytes.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "PfDo-EXcvbvDRicZrs8Bq",
              "ctx": null,
              "_testId": "urn:uuid:72164142-1293-4350-935d-893767906c91",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "[\"publicKeyMultibase\"] MUST consist of a binary value that startswith the two-byte prefix 0xed01"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6934,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "[\"publicKeyMultibase\"] MUST consist of a binary value that startswith the two-byte prefix 0xed01",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n\n          for(const verificationMethodDocument of verificationMethodDocuments) {\n            // If we can decode then the key is valid\n            const {publicKey} =\n              await fromEncodedMultikey(verificationMethodDocument);\n\n            publicKey.length.should.equal(32, 'Expected public key ' +\n              'to be 32 bytes.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "T6YXyvM1bJXRhUVqMOnkC",
              "ctx": null,
              "_testId": "urn:uuid:ef5a52b0-70e0-4ec4-8cb8-098a175585c5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "[\"publicKeyMultibase\"] MUST consist of a binary value that startswith the two-byte prefix 0xed01"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7209,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "cell": {
                "rowId": "[\"publicKeyMultibase\"] MUST consist of a binary value that startswith the two-byte prefix 0xed01",
                "colId": "Procivis One Core"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            },
            {
              "type": "test",
              "title": "[\"publicKeyMultibase\"] MUST consist of a binary value that startswith the two-byte prefix 0xed01",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n\n          for(const verificationMethodDocument of verificationMethodDocuments) {\n            // If we can decode then the key is valid\n            const {publicKey} =\n              await fromEncodedMultikey(verificationMethodDocument);\n\n            publicKey.length.should.equal(32, 'Expected public key ' +\n              'to be 32 bytes.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "p2USVnw9M1JyJcvuDMNNm",
              "ctx": null,
              "_testId": "urn:uuid:6d0d759e-fb68-4321-a227-e75ea9548ec8",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "[\"publicKeyMultibase\"] MUST consist of a binary value that startswith the two-byte prefix 0xed01"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8399,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "[\"publicKeyMultibase\"] MUST consist of a binary value that startswith the two-byte prefix 0xed01",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n\n          for(const verificationMethodDocument of verificationMethodDocuments) {\n            // If we can decode then the key is valid\n            const {publicKey} =\n              await fromEncodedMultikey(verificationMethodDocument);\n\n            publicKey.length.should.equal(32, 'Expected public key ' +\n              'to be 32 bytes.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "Bj4PVkPAN6eEVqLul7AW-",
              "ctx": null,
              "_testId": "urn:uuid:0a556fa3-ef1f-449f-8f53-9456f4c1e48a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "[\"publicKeyMultibase\"] MUST consist of a binary value that startswith the two-byte prefix 0xed01"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8481,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "[\"publicKeyMultibase\"] MUST consist of a binary value that startswith the two-byte prefix 0xed01",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n\n          for(const verificationMethodDocument of verificationMethodDocuments) {\n            // If we can decode then the key is valid\n            const {publicKey} =\n              await fromEncodedMultikey(verificationMethodDocument);\n\n            publicKey.length.should.equal(32, 'Expected public key ' +\n              'to be 32 bytes.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "qoWJFV3ivZ-4Ll_mTG4EE",
              "ctx": null,
              "_testId": "urn:uuid:fe5737bb-ca52-454f-8816-739593c6ede2",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine",
                "rowId": "[\"publicKeyMultibase\"] MUST consist of a binary value that startswith the two-byte prefix 0xed01"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8644,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "\"proofValue\" field when decoded to raw bytes, MUST be 64 bytes in length if the associated public key is 32 bytes or 114 bytes in length if the public key is 57 bytes.",
          "cells": [
            {
              "cell": {
                "rowId": "\"proofValue\" field when decoded to raw bytes, MUST be 64 bytes in length if the associated public key is 32 bytes or 114 bytes in length if the public key is 57 bytes.",
                "colId": "ACA-py"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            },
            {
              "type": "test",
              "title": "\"proofValue\" field when decoded to raw bytes, MUST be 64 bytes in length if the associated public key is 32 bytes or 114 bytes in length if the public key is 57 bytes.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          should.exist(issuedVc, 'Expected issuer to have issued a ' +\n            'credential.');\n          should.exist(proofs, 'Expected credential to have a proof.');\n          const eddsa2022Proofs = proofs.filter(\n            proof => proof?.cryptosuite === cryptosuite);\n          eddsa2022Proofs.length.should.be.gte(1, 'Expected at least one ' +\n            'eddsa-rdfc-2022 cryptosuite.');\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.proofValue, 'Expected a proof value on ' +\n              'the proof.');\n            const valueBytes = bs58Decode({id: proof.proofValue});\n            should.exist(proof.verificationMethod);\n            const vmBytes = await getPublicKeyBytes({\n              did: proof.verificationMethod});\n            vmBytes.byteLength.should.be.oneOf([32, 57], 'Expected public ' +\n              'key length to be either 32 or 57 bytes.');\n            if(vmBytes.byteLength === 32) {\n              valueBytes.byteLength.should.equal(64, 'Expected 64 byte ' +\n                'proofValue for 32 byte key.');\n            } else {\n              valueBytes.byteLength.should.equal(114, 'Expected 114 byte ' +\n                'proofValue for 57 byte key.');\n            }\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "bNKpbUF4e79f1LFObDrxX",
              "ctx": null,
              "_testId": "urn:uuid:90f533bb-5998-4ad0-9285-5a29b5c809d4",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "\"proofValue\" field when decoded to raw bytes, MUST be 64 bytes in length if the associated public key is 32 bytes or 114 bytes in length if the public key is 57 bytes."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6550,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proofValue\" field when decoded to raw bytes, MUST be 64 bytes in length if the associated public key is 32 bytes or 114 bytes in length if the public key is 57 bytes.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          should.exist(issuedVc, 'Expected issuer to have issued a ' +\n            'credential.');\n          should.exist(proofs, 'Expected credential to have a proof.');\n          const eddsa2022Proofs = proofs.filter(\n            proof => proof?.cryptosuite === cryptosuite);\n          eddsa2022Proofs.length.should.be.gte(1, 'Expected at least one ' +\n            'eddsa-rdfc-2022 cryptosuite.');\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.proofValue, 'Expected a proof value on ' +\n              'the proof.');\n            const valueBytes = bs58Decode({id: proof.proofValue});\n            should.exist(proof.verificationMethod);\n            const vmBytes = await getPublicKeyBytes({\n              did: proof.verificationMethod});\n            vmBytes.byteLength.should.be.oneOf([32, 57], 'Expected public ' +\n              'key length to be either 32 or 57 bytes.');\n            if(vmBytes.byteLength === 32) {\n              valueBytes.byteLength.should.equal(64, 'Expected 64 byte ' +\n                'proofValue for 32 byte key.');\n            } else {\n              valueBytes.byteLength.should.equal(114, 'Expected 114 byte ' +\n                'proofValue for 57 byte key.');\n            }\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "PfDo-EXcvbvDRicZrs8Bq",
              "ctx": null,
              "_testId": "urn:uuid:de281392-d5fd-472f-a9e9-d26952cb04c1",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "\"proofValue\" field when decoded to raw bytes, MUST be 64 bytes in length if the associated public key is 32 bytes or 114 bytes in length if the public key is 57 bytes."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6934,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proofValue\" field when decoded to raw bytes, MUST be 64 bytes in length if the associated public key is 32 bytes or 114 bytes in length if the public key is 57 bytes.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          should.exist(issuedVc, 'Expected issuer to have issued a ' +\n            'credential.');\n          should.exist(proofs, 'Expected credential to have a proof.');\n          const eddsa2022Proofs = proofs.filter(\n            proof => proof?.cryptosuite === cryptosuite);\n          eddsa2022Proofs.length.should.be.gte(1, 'Expected at least one ' +\n            'eddsa-rdfc-2022 cryptosuite.');\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.proofValue, 'Expected a proof value on ' +\n              'the proof.');\n            const valueBytes = bs58Decode({id: proof.proofValue});\n            should.exist(proof.verificationMethod);\n            const vmBytes = await getPublicKeyBytes({\n              did: proof.verificationMethod});\n            vmBytes.byteLength.should.be.oneOf([32, 57], 'Expected public ' +\n              'key length to be either 32 or 57 bytes.');\n            if(vmBytes.byteLength === 32) {\n              valueBytes.byteLength.should.equal(64, 'Expected 64 byte ' +\n                'proofValue for 32 byte key.');\n            } else {\n              valueBytes.byteLength.should.equal(114, 'Expected 114 byte ' +\n                'proofValue for 57 byte key.');\n            }\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "T6YXyvM1bJXRhUVqMOnkC",
              "ctx": null,
              "_testId": "urn:uuid:4db95d25-30ad-46fb-a636-cf442fefac0c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "\"proofValue\" field when decoded to raw bytes, MUST be 64 bytes in length if the associated public key is 32 bytes or 114 bytes in length if the public key is 57 bytes."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7210,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "cell": {
                "rowId": "\"proofValue\" field when decoded to raw bytes, MUST be 64 bytes in length if the associated public key is 32 bytes or 114 bytes in length if the public key is 57 bytes.",
                "colId": "Procivis One Core"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            },
            {
              "type": "test",
              "title": "\"proofValue\" field when decoded to raw bytes, MUST be 64 bytes in length if the associated public key is 32 bytes or 114 bytes in length if the public key is 57 bytes.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          should.exist(issuedVc, 'Expected issuer to have issued a ' +\n            'credential.');\n          should.exist(proofs, 'Expected credential to have a proof.');\n          const eddsa2022Proofs = proofs.filter(\n            proof => proof?.cryptosuite === cryptosuite);\n          eddsa2022Proofs.length.should.be.gte(1, 'Expected at least one ' +\n            'eddsa-rdfc-2022 cryptosuite.');\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.proofValue, 'Expected a proof value on ' +\n              'the proof.');\n            const valueBytes = bs58Decode({id: proof.proofValue});\n            should.exist(proof.verificationMethod);\n            const vmBytes = await getPublicKeyBytes({\n              did: proof.verificationMethod});\n            vmBytes.byteLength.should.be.oneOf([32, 57], 'Expected public ' +\n              'key length to be either 32 or 57 bytes.');\n            if(vmBytes.byteLength === 32) {\n              valueBytes.byteLength.should.equal(64, 'Expected 64 byte ' +\n                'proofValue for 32 byte key.');\n            } else {\n              valueBytes.byteLength.should.equal(114, 'Expected 114 byte ' +\n                'proofValue for 57 byte key.');\n            }\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "p2USVnw9M1JyJcvuDMNNm",
              "ctx": null,
              "_testId": "urn:uuid:e5e873a9-14fd-4322-a049-abde135e45b4",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "\"proofValue\" field when decoded to raw bytes, MUST be 64 bytes in length if the associated public key is 32 bytes or 114 bytes in length if the public key is 57 bytes."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8400,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proofValue\" field when decoded to raw bytes, MUST be 64 bytes in length if the associated public key is 32 bytes or 114 bytes in length if the public key is 57 bytes.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          should.exist(issuedVc, 'Expected issuer to have issued a ' +\n            'credential.');\n          should.exist(proofs, 'Expected credential to have a proof.');\n          const eddsa2022Proofs = proofs.filter(\n            proof => proof?.cryptosuite === cryptosuite);\n          eddsa2022Proofs.length.should.be.gte(1, 'Expected at least one ' +\n            'eddsa-rdfc-2022 cryptosuite.');\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.proofValue, 'Expected a proof value on ' +\n              'the proof.');\n            const valueBytes = bs58Decode({id: proof.proofValue});\n            should.exist(proof.verificationMethod);\n            const vmBytes = await getPublicKeyBytes({\n              did: proof.verificationMethod});\n            vmBytes.byteLength.should.be.oneOf([32, 57], 'Expected public ' +\n              'key length to be either 32 or 57 bytes.');\n            if(vmBytes.byteLength === 32) {\n              valueBytes.byteLength.should.equal(64, 'Expected 64 byte ' +\n                'proofValue for 32 byte key.');\n            } else {\n              valueBytes.byteLength.should.equal(114, 'Expected 114 byte ' +\n                'proofValue for 57 byte key.');\n            }\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "Bj4PVkPAN6eEVqLul7AW-",
              "ctx": null,
              "_testId": "urn:uuid:1e852054-bf81-4adf-8a9f-c052125e87a4",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "\"proofValue\" field when decoded to raw bytes, MUST be 64 bytes in length if the associated public key is 32 bytes or 114 bytes in length if the public key is 57 bytes."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8481,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected at least one eddsa-rdfc-2022 cryptosuite.: expected +0 to be at least 1",
                "showDiff": true,
                "actual": "0",
                "expected": "1",
                "operator": "strictEqual",
                "stack": "AssertionError: Expected at least one eddsa-rdfc-2022 cryptosuite.: expected +0 to be at least 1\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js:198:44)\n    at process.processImmediate (node:internal/timers:483:21)"
              }
            },
            {
              "type": "test",
              "title": "\"proofValue\" field when decoded to raw bytes, MUST be 64 bytes in length if the associated public key is 32 bytes or 114 bytes in length if the public key is 57 bytes.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          should.exist(issuedVc, 'Expected issuer to have issued a ' +\n            'credential.');\n          should.exist(proofs, 'Expected credential to have a proof.');\n          const eddsa2022Proofs = proofs.filter(\n            proof => proof?.cryptosuite === cryptosuite);\n          eddsa2022Proofs.length.should.be.gte(1, 'Expected at least one ' +\n            'eddsa-rdfc-2022 cryptosuite.');\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.proofValue, 'Expected a proof value on ' +\n              'the proof.');\n            const valueBytes = bs58Decode({id: proof.proofValue});\n            should.exist(proof.verificationMethod);\n            const vmBytes = await getPublicKeyBytes({\n              did: proof.verificationMethod});\n            vmBytes.byteLength.should.be.oneOf([32, 57], 'Expected public ' +\n              'key length to be either 32 or 57 bytes.');\n            if(vmBytes.byteLength === 32) {\n              valueBytes.byteLength.should.equal(64, 'Expected 64 byte ' +\n                'proofValue for 32 byte key.');\n            } else {\n              valueBytes.byteLength.should.equal(114, 'Expected 114 byte ' +\n                'proofValue for 57 byte key.');\n            }\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "qoWJFV3ivZ-4Ll_mTG4EE",
              "ctx": null,
              "_testId": "urn:uuid:a6f492d2-5003-4a74-acec-85bc127184f3",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine",
                "rowId": "\"proofValue\" field when decoded to raw bytes, MUST be 64 bytes in length if the associated public key is 32 bytes or 114 bytes in length if the public key is 57 bytes."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8645,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "\"proof\" MUST verify when using a conformant verifier.",
          "cells": [
            {
              "cell": {
                "rowId": "\"proof\" MUST verify when using a conformant verifier.",
                "colId": "ACA-py"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            },
            {
              "type": "test",
              "title": "\"proof\" MUST verify when using a conformant verifier.",
              "body": "async function() {\n            this.test.cell = {columnId, rowId: this.test.title};\n            should.exist(verifier, 'Expected implementation to have a VC ' +\n              'API compatible verifier.');\n            const {result, error} = await verifier.post({json: {\n              verifiableCredential: issuedVc,\n              options: {checks: ['proof']}\n            }});\n            should.not.exist(error, 'Expected verifier to not error.');\n            should.exist(result, 'Expected verifier to return a result.');\n            result.status.should.not.equal(400, 'Expected status code to not ' +\n              'be 400.');\n            result.status.should.equal(200, 'Expected status code to be 200.');\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "bNKpbUF4e79f1LFObDrxX",
              "ctx": null,
              "_testId": "urn:uuid:a37f4fef-1df8-4fb7-9998-cb3f7385756a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "\"proof\" MUST verify when using a conformant verifier."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6550,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 138,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "\"proof\" MUST verify when using a conformant verifier.",
              "body": "async function() {\n            this.test.cell = {columnId, rowId: this.test.title};\n            should.exist(verifier, 'Expected implementation to have a VC ' +\n              'API compatible verifier.');\n            const {result, error} = await verifier.post({json: {\n              verifiableCredential: issuedVc,\n              options: {checks: ['proof']}\n            }});\n            should.not.exist(error, 'Expected verifier to not error.');\n            should.exist(result, 'Expected verifier to return a result.');\n            result.status.should.not.equal(400, 'Expected status code to not ' +\n              'be 400.');\n            result.status.should.equal(200, 'Expected status code to be 200.');\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "PfDo-EXcvbvDRicZrs8Bq",
              "ctx": null,
              "_testId": "urn:uuid:51172f9a-cea0-43d4-95ca-7d4945af5d08",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "\"proof\" MUST verify when using a conformant verifier."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 6935,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 195,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "\"proof\" MUST verify when using a conformant verifier.",
              "body": "async function() {\n            this.test.cell = {columnId, rowId: this.test.title};\n            should.exist(verifier, 'Expected implementation to have a VC ' +\n              'API compatible verifier.');\n            const {result, error} = await verifier.post({json: {\n              verifiableCredential: issuedVc,\n              options: {checks: ['proof']}\n            }});\n            should.not.exist(error, 'Expected verifier to not error.');\n            should.exist(result, 'Expected verifier to return a result.');\n            result.status.should.not.equal(400, 'Expected status code to not ' +\n              'be 400.');\n            result.status.should.equal(200, 'Expected status code to be 200.');\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "T6YXyvM1bJXRhUVqMOnkC",
              "ctx": null,
              "_testId": "urn:uuid:38b9d9b1-2e55-41bd-9c1d-59fb8f350a01",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "\"proof\" MUST verify when using a conformant verifier."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 7210,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1014,
              "state": "passed",
              "speed": "slow"
            },
            {
              "cell": {
                "rowId": "\"proof\" MUST verify when using a conformant verifier.",
                "colId": "Procivis One Core"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            },
            {
              "type": "test",
              "title": "\"proof\" MUST verify when using a conformant verifier.",
              "body": "async function() {\n            this.test.cell = {columnId, rowId: this.test.title};\n            should.exist(verifier, 'Expected implementation to have a VC ' +\n              'API compatible verifier.');\n            const {result, error} = await verifier.post({json: {\n              verifiableCredential: issuedVc,\n              options: {checks: ['proof']}\n            }});\n            should.not.exist(error, 'Expected verifier to not error.');\n            should.exist(result, 'Expected verifier to return a result.');\n            result.status.should.not.equal(400, 'Expected status code to not ' +\n              'be 400.');\n            result.status.should.equal(200, 'Expected status code to be 200.');\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "p2USVnw9M1JyJcvuDMNNm",
              "ctx": null,
              "_testId": "urn:uuid:299705c1-a889-42d2-b07b-26431781c32d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "\"proof\" MUST verify when using a conformant verifier."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8400,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 34,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof\" MUST verify when using a conformant verifier.",
              "body": "async function() {\n            this.test.cell = {columnId, rowId: this.test.title};\n            should.exist(verifier, 'Expected implementation to have a VC ' +\n              'API compatible verifier.');\n            const {result, error} = await verifier.post({json: {\n              verifiableCredential: issuedVc,\n              options: {checks: ['proof']}\n            }});\n            should.not.exist(error, 'Expected verifier to not error.');\n            should.exist(result, 'Expected verifier to return a result.');\n            result.status.should.not.equal(400, 'Expected status code to not ' +\n              'be 400.');\n            result.status.should.equal(200, 'Expected status code to be 200.');\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "Bj4PVkPAN6eEVqLul7AW-",
              "ctx": null,
              "_testId": "urn:uuid:3a824f83-8d74-4acb-a7e0-9047a340966c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "\"proof\" MUST verify when using a conformant verifier."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8482,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 56,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "\"proof\" MUST verify when using a conformant verifier.",
              "body": "async function() {\n            this.test.cell = {columnId, rowId: this.test.title};\n            should.exist(verifier, 'Expected implementation to have a VC ' +\n              'API compatible verifier.');\n            const {result, error} = await verifier.post({json: {\n              verifiableCredential: issuedVc,\n              options: {checks: ['proof']}\n            }});\n            should.not.exist(error, 'Expected verifier to not error.');\n            should.exist(result, 'Expected verifier to return a result.');\n            result.status.should.not.equal(400, 'Expected status code to not ' +\n              'be 400.');\n            result.status.should.equal(200, 'Expected status code to be 200.');\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/10-rdfc-create.js",
              "parent": "qoWJFV3ivZ-4Ll_mTG4EE",
              "ctx": null,
              "_testId": "urn:uuid:7d6ce224-e7f8-4ecc-a1ad-b3e29f14bf3d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine",
                "rowId": "\"proof\" MUST verify when using a conformant verifier."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8646,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 109,
              "state": "passed",
              "speed": "slow"
            }
          ]
        }
      ]
    },
    {
      "title": "Data Integrity (eddsa-rdfc-2022 verifiers)",
      "ctx": null,
      "suites": [
        {
          "title": "ACA-py",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.';\n      const credential = credentials.clone('invalidBaseUrl');\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'Should not verify VC with invalid base URL'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "pmPgloOAmrko-FWqqfD9b",
              "ctx": null,
              "_testId": "urn:uuid:0cb2b2ab-8026-401f-adbf-00d8fe792bf2",
              "cell": {
                "columnId": "ACA-py",
                "rowId": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8788,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 106,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Should not verify VC with invalid base URL: expected Response { status: 200, statusText: 'OK', headers: Headers { 'content-length': '656', 'content-type': 'application/json; charset=utf-8', date: 'Sun, 13 Oct 2024 05:06:31 GMT', server: 'Python/3.12 aiohttp/3.10.9', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Should not verify VC with invalid base URL: expected Response { status: 200, statusText: 'OK', headers: Headers { 'content-length': '656', 'content-type': 'application/json; charset=utf-8', date: 'Sun, 13 Oct 2024 05:06:31 GMT', server: 'Python/3.12 aiohttp/3.10.9', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationFail (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:82:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/suites/verify.js:36:7)"
              }
            },
            {
              "type": "test",
              "title": "Conforming processors MUST produce errors when non-conforming documents are consumed.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.';\n      // this could be read as testing all non-confirming docs or just one\n      // for this test only one doc is tested as it should throw for any\n      // non-conforming doc\n      await verificationFail({\n        credential: credentials.clone('invalidProofType'),\n        verifier,\n        reason: 'Should not verify VC with invalid \"proof.type\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "pmPgloOAmrko-FWqqfD9b",
              "ctx": null,
              "_testId": "urn:uuid:e3a66448-4b88-4912-9b23-8adfe3191813",
              "cell": {
                "columnId": "ACA-py",
                "rowId": "Conforming processors MUST produce errors when non-conforming documents are consumed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8894,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 39,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.';\n      const credential = credentials.clone('issuedVc');\n      credential.proof = null;\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'MUST not verify VC with proof that is not a map.'\n      });\n      await verificationFail({\n        // use a string as the non map representation of a VC\n        credential: JSON.stringify(credentials.clone('issuedVc')),\n        verifier,\n        reason: 'MUST not verify VC that is not a map.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "pmPgloOAmrko-FWqqfD9b",
              "ctx": null,
              "_testId": "urn:uuid:ab2f567f-f093-4c08-84a4-b0df472ad821",
              "cell": {
                "columnId": "ACA-py",
                "rowId": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8933,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 61,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof;\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'MUST not verify VC w/o a proof'\n      });\n      const noType = credentials.clone('issuedVc');\n      delete noType.proof.type;\n      await verificationFail({\n        credential: noType,\n        verifier,\n        reason: 'MUST not verify VC w/o a \"proof.type\".'\n      });\n      const noVm = credentials.clone('noVm');\n      await verificationFail({\n        credential: noVm,\n        verifier,\n        reason: 'MUST not verify VC w/o \"proof.verificationMethod\".\"'\n      });\n      const noProofPurpose = credentials.clone('noProofPurpose');\n      await verificationFail({\n        credential: noProofPurpose,\n        verifier,\n        reason: 'MUST not verify VC w/o \"proof.proofPurpose\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "pmPgloOAmrko-FWqqfD9b",
              "ctx": null,
              "_testId": "urn:uuid:171e6a8a-cab3-440d-8160-38f9dc0c4dea",
              "cell": {
                "columnId": "ACA-py",
                "rowId": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8993,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 116,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('invalidProofType');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "pmPgloOAmrko-FWqqfD9b",
              "ctx": null,
              "_testId": "urn:uuid:6675c8ec-6721-443b-a229-103effeab0c0",
              "cell": {
                "columnId": "ACA-py",
                "rowId": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9110,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 35,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('invalidVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "pmPgloOAmrko-FWqqfD9b",
              "ctx": null,
              "_testId": "urn:uuid:0dbde167-5fe4-4c8f-b9d6-9bb289f723b1",
              "cell": {
                "columnId": "ACA-py",
                "rowId": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9146,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 53,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('invalidProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "pmPgloOAmrko-FWqqfD9b",
              "ctx": null,
              "_testId": "urn:uuid:5b3e6bca-9ece-4c5f-a687-61831ce5997f",
              "cell": {
                "columnId": "ACA-py",
                "rowId": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9199,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 49,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no result from verifier.: expected Response { status: 200, statusText: 'OK', headers: Headers { 'content-length': '633', 'content-type': 'application/json; charset=utf-8', date: 'Sun, 13 Oct 2024 05:06:32 GMT', server: 'Python/3.12 aiohttp/3.10.9', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no result from verifier.: expected Response { status: 200, statusText: 'OK', headers: Headers { 'content-length': '633', 'content-type': 'application/json; charset=utf-8', date: 'Sun, 13 Oct 2024 05:06:32 GMT', server: 'Python/3.12 aiohttp/3.10.9', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationFail (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:82:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/suites/verify.js:118:7)"
              }
            },
            {
              "type": "test",
              "title": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      // NOTE: expectedProofPurpose should be specified by verifiers internally\n      // it is very unlikely to be invalidProofPurpose\n      await verificationFail({\n        credential: credentials.clone('invalidProofPurpose'),\n        verifier,\n        reason: 'Verifier should reject VC with invalid proof purpose.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "pmPgloOAmrko-FWqqfD9b",
              "ctx": null,
              "_testId": "urn:uuid:3a8f79a4-029e-44ac-9167-288556c912e0",
              "cell": {
                "columnId": "ACA-py",
                "rowId": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9250,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 38,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Verifier should reject VC with invalid proof purpose.: expected Response { status: 200, statusText: 'OK', headers: Headers { 'content-length': '633', 'content-type': 'application/json; charset=utf-8', date: 'Sun, 13 Oct 2024 05:06:32 GMT', server: 'Python/3.12 aiohttp/3.10.9', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Verifier should reject VC with invalid proof purpose.: expected Response { status: 200, statusText: 'OK', headers: Headers { 'content-length': '633', 'content-type': 'application/json; charset=utf-8', date: 'Sun, 13 Oct 2024 05:06:32 GMT', server: 'Python/3.12 aiohttp/3.10.9', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationFail (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:82:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/suites/verify.js:126:7)"
              }
            },
            {
              "type": "test",
              "title": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.';\n        await proofValueTests;\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "pmPgloOAmrko-FWqqfD9b",
              "ctx": null,
              "_testId": "urn:uuid:ca858773-183f-45e0-b197-3d05d966bf01",
              "cell": {
                "columnId": "ACA-py",
                "rowId": "The proofValue property MUST be used, as specified in 2.1 Proofs."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9289,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof';\n      await proofValueTests;\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "pmPgloOAmrko-FWqqfD9b",
              "ctx": null,
              "_testId": "urn:uuid:f70b8b6d-8cae-4ad7-bc50-f57b5a0bff07",
              "cell": {
                "columnId": "ACA-py",
                "rowId": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9289,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      await verificationFail({\n        credential: credentials.clone('undefinedTerm'),\n        verifier,\n        reason: 'Should fail to verify VC when data is dropped by JSON-LD'\n      });\n      const undefinedTerm = credentials.clone('issuedVc');\n      undefinedTerm.credentialSubject.undefinedTerm = 'IfDroppedWillVerify';\n      await verificationFail({\n        credential: undefinedTerm,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined term is added ' +\n          'after issuance.'\n      });\n      const undefinedType = credentials.clone('issuedVc');\n      undefinedType.type.push('UndefinedType');\n      await verificationFail({\n        credential: undefinedType,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined type is added ' +\n          'after issuance.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "pmPgloOAmrko-FWqqfD9b",
              "ctx": null,
              "_testId": "urn:uuid:27a063b8-7f1e-4e20-ad03-ffc2e493c12a",
              "cell": {
                "columnId": "ACA-py",
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9289,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 35,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Should fail to verify VC when data is dropped by JSON-LD: expected Response { status: 200, statusText: 'OK', headers: Headers { 'content-length': '667', 'content-type': 'application/json; charset=utf-8', date: 'Sun, 13 Oct 2024 05:06:32 GMT', server: 'Python/3.12 aiohttp/3.10.9', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Should fail to verify VC when data is dropped by JSON-LD: expected Response { status: 200, statusText: 'OK', headers: Headers { 'content-length': '667', 'content-type': 'application/json; charset=utf-8', date: 'Sun, 13 Oct 2024 05:06:32 GMT', server: 'Python/3.12 aiohttp/3.10.9', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationFail (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:82:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/suites/verify.js:152:7)"
              }
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n      const credential = credentials.clone('invalidCryptosuite');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "pmPgloOAmrko-FWqqfD9b",
              "ctx": null,
              "_testId": "urn:uuid:826ba3ba-3437-4646-be96-13be5714664e",
              "cell": {
                "columnId": "ACA-py",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9324,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 31,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "An OPTIONAL string value (proof.previousProof) or unordered list of string values. Each value identifies another data integrity proof that MUST verify before the current proof is processed.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=An%20OPTIONAL%20string%20value%20or%20unordered%20list%20of%20string%20values.%20Each%20value%20identifies%20another%20data%20integrity%20proof%20that%20MUST%20verify%20before%20the%20current%20proof%20is%20processed';\n        await verificationSuccess({\n          credential: credentials.clone('previousProofString'),\n          verifier,\n          reason: 'Should verify VC with a string \"proof.previousProof\".'\n        });\n        await verificationSuccess({\n          credential: credentials.clone('previousProofArray'),\n          verifier,\n          reason: 'Should verify VC with an Array \"proof.previousProof\".'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "pmPgloOAmrko-FWqqfD9b",
              "ctx": null,
              "_testId": "urn:uuid:aa88fc71-51d1-4115-a5af-ae6f371d699b",
              "cell": {
                "columnId": "ACA-py",
                "rowId": "An OPTIONAL string value (proof.previousProof) or unordered list of string values. Each value identifies another data integrity proof that MUST verify before the current proof is processed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=An%20OPTIONAL%20string%20value%20or%20unordered%20list%20of%20string%20values.%20Each%20value%20identifies%20another%20data%20integrity%20proof%20that%20MUST%20verify%20before%20the%20current%20proof%20is%20processed",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9355,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 32,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Should verify VC with a string \"proof.previousProof\".: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",\"https://w3id.org/security/data-integrity/v2\",{\"@context\":{\"AlumniCredential\":\"https://www.example.org/AlumniCredential\",\"alumniOf\":\"https://www.example.org/alumniOf\",\"description\":\"https://schema.org/description\",\"name\":\"https://schema.org/name\"}}],\"id\":\"urn:uuid:58172aac-d8ba-11ed-83dd-0b3aef56cc33\",\"type\":[\"VerifiableCredential\",\"AlumniCredential\"],\"name\":\"Alumni Credential\",\"description\":\"A minimum viable example of a VC 1.1 Alumni Credential.\",\"issuer\":\"did:key:z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E\",\"issuanceDate\":\"2023-01-01T00:00:00Z\",\"credentialSubject\":{\"id\":\"did:example:abcdefgh\",\"alumniOf\":\"The School of Examples\"},\"proof\":[{\"type\":\"DataIntegrityProof\",\"id\":\"urn:uuid:26329423-bec9-4b2e-88cb-a7c7d9dc4544\",\"cryptosuite\":\"eddsa-rdfc-2022\",\"created\":\"2023-02-26T22:06:38Z\",\"verificationMethod\":\"did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7#z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z5gL4Hy8N4B6zr9mQAGqpsry1iTdxEAp4zjqPNQv7iTvgdkMcHKnMALvPwU3YAKZhYn3k3Jmut2TAMxSaHaggFtf4\"},{\"type\":\"DataIntegrityProof\",\"cryptosuite\":\"eddsa-rdfc-2022\",\"created\":\"2023-02-26T22:16:38Z\",\"verificationMethod\":\"did:key:z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E#z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E\",\"proofPurpose\":\"assertionMethod\",\"previousProof\":\"urn:uuid:26329423-bec9-4b2e-88cb-a7c7d9dc4544\",\"proofValue\":\"z2ENoYDUK8cMMJMvwRGyHVX23pPeHaZfCgpbDFs15FXGaeFseeqzZf5nWXF14JPoBcqdr39vVPgrAUbWT2VYYacrG\"}]},\"options\":{}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          "https://w3id.org/security/data-integrity/v2",
                          {
                            "@context": {
                              "AlumniCredential": "https://www.example.org/AlumniCredential",
                              "alumniOf": "https://www.example.org/alumniOf",
                              "description": "https://schema.org/description",
                              "name": "https://schema.org/name"
                            }
                          }
                        ],
                        "id": "urn:uuid:58172aac-d8ba-11ed-83dd-0b3aef56cc33",
                        "type": [
                          "VerifiableCredential",
                          "AlumniCredential"
                        ],
                        "name": "Alumni Credential",
                        "description": "A minimum viable example of a VC 1.1 Alumni Credential.",
                        "issuer": "did:key:z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E",
                        "issuanceDate": "2023-01-01T00:00:00Z",
                        "credentialSubject": {
                          "id": "did:example:abcdefgh",
                          "alumniOf": "The School of Examples"
                        },
                        "proof": [
                          {
                            "type": "DataIntegrityProof",
                            "id": "urn:uuid:26329423-bec9-4b2e-88cb-a7c7d9dc4544",
                            "cryptosuite": "eddsa-rdfc-2022",
                            "created": "2023-02-26T22:06:38Z",
                            "verificationMethod": "did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7#z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7",
                            "proofPurpose": "assertionMethod",
                            "proofValue": "z5gL4Hy8N4B6zr9mQAGqpsry1iTdxEAp4zjqPNQv7iTvgdkMcHKnMALvPwU3YAKZhYn3k3Jmut2TAMxSaHaggFtf4"
                          },
                          {
                            "type": "DataIntegrityProof",
                            "cryptosuite": "eddsa-rdfc-2022",
                            "created": "2023-02-26T22:16:38Z",
                            "verificationMethod": "did:key:z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E#z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E",
                            "proofPurpose": "assertionMethod",
                            "previousProof": "urn:uuid:26329423-bec9-4b2e-88cb-a7c7d9dc4544",
                            "proofValue": "z2ENoYDUK8cMMJMvwRGyHVX23pPeHaZfCgpbDFs15FXGaeFseeqzZf5nWXF14JPoBcqdr39vVPgrAUbWT2VYYacrG"
                          }
                        ]
                      },
                      "options": {}
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://aca-py.test-suite.app/vc/credentials/verify",
                  "status": 422,
                  "data": {
                    "json": {
                      "verifiableCredential": {
                        "proof": {
                          "_schema": [
                            "Invalid input type."
                          ]
                        }
                      }
                    }
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Should verify VC with a string \"proof.previousProof\".: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:49:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/suites/verify.js:258:9)"
              }
            },
            {
              "type": "test",
              "title": "If an unordered list (proof), all referenced proofs in the array MUST verify.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=If%20an%20unordered%20list%2C%20all%20referenced%20proofs%20in%20the%20array%20MUST%20verify';\n        await verificationSuccess({\n          credential: credentials.clone('proofSet'),\n          verifier,\n          reason: 'Should verify VC with multiple proofs.'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "pmPgloOAmrko-FWqqfD9b",
              "ctx": null,
              "_testId": "urn:uuid:d6cd8487-0d74-4241-8c6a-6ff1f0178df1",
              "cell": {
                "columnId": "ACA-py",
                "rowId": "If an unordered list (proof), all referenced proofs in the array MUST verify."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=If%20an%20unordered%20list%2C%20all%20referenced%20proofs%20in%20the%20array%20MUST%20verify",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9388,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 30,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Should verify VC with multiple proofs.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",\"https://w3id.org/security/data-integrity/v2\"],\"id\":\"urn:uuid:86294362-4254-4f36-854f-3952fe42555d\",\"type\":[\"VerifiableCredential\"],\"issuer\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\",\"issuanceDate\":\"2020-03-16T22:37:26.544Z\",\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\"},\"proof\":[{\"type\":\"DataIntegrityProof\",\"created\":\"2024-10-13T05:06:31Z\",\"verificationMethod\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b#z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\",\"cryptosuite\":\"eddsa-rdfc-2022\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"zFZsqQshxdr7ULJqMuBZW8NGyYps8XZWptEdk7GiNyPQRru8mESKusBYepYD4u3nfa3dNcufyrwF7HVy2CGgdngn\"},{\"type\":\"DataIntegrityProof\",\"created\":\"2024-10-13T05:06:31Z\",\"verificationMethod\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b#z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\",\"cryptosuite\":\"eddsa-rdfc-2022\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"zFZsqQshxdr7ULJqMuBZW8NGyYps8XZWptEdk7GiNyPQRru8mESKusBYepYD4u3nfa3dNcufyrwF7HVy2CGgdngn\"}]},\"options\":{}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          "https://w3id.org/security/data-integrity/v2"
                        ],
                        "id": "urn:uuid:86294362-4254-4f36-854f-3952fe42555d",
                        "type": [
                          "VerifiableCredential"
                        ],
                        "issuer": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b",
                        "issuanceDate": "2020-03-16T22:37:26.544Z",
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                        },
                        "proof": [
                          {
                            "type": "DataIntegrityProof",
                            "created": "2024-10-13T05:06:31Z",
                            "verificationMethod": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b#z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b",
                            "cryptosuite": "eddsa-rdfc-2022",
                            "proofPurpose": "assertionMethod",
                            "proofValue": "zFZsqQshxdr7ULJqMuBZW8NGyYps8XZWptEdk7GiNyPQRru8mESKusBYepYD4u3nfa3dNcufyrwF7HVy2CGgdngn"
                          },
                          {
                            "type": "DataIntegrityProof",
                            "created": "2024-10-13T05:06:31Z",
                            "verificationMethod": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b#z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b",
                            "cryptosuite": "eddsa-rdfc-2022",
                            "proofPurpose": "assertionMethod",
                            "proofValue": "zFZsqQshxdr7ULJqMuBZW8NGyYps8XZWptEdk7GiNyPQRru8mESKusBYepYD4u3nfa3dNcufyrwF7HVy2CGgdngn"
                          }
                        ]
                      },
                      "options": {}
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://aca-py.test-suite.app/vc/credentials/verify",
                  "status": 422,
                  "data": {
                    "json": {
                      "verifiableCredential": {
                        "proof": {
                          "_schema": [
                            "Invalid input type."
                          ]
                        }
                      }
                    }
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Should verify VC with multiple proofs.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:49:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/suites/verify.js:272:9)"
              }
            },
            {
              "type": "test",
              "title": "If a proof with id equal to previousProof does not exist in allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20a%20proof%20with%20id%20equal%20to%20previousProof%20does%20not%20exist%20in%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR';\n        await verificationFail({\n          credential: credentials.clone('missingPreviousProofString'),\n          verifier,\n          reason: 'Should not verify VC with invalid \"proof.previousProof\".'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "pmPgloOAmrko-FWqqfD9b",
              "ctx": null,
              "_testId": "urn:uuid:8e71dbe8-68d1-41c0-a77e-8ae81e74e03f",
              "cell": {
                "columnId": "ACA-py",
                "rowId": "If a proof with id equal to previousProof does not exist in allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20a%20proof%20with%20id%20equal%20to%20previousProof%20does%20not%20exist%20in%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9418,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 29,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If any element of previousProof list has an id attribute that does not match the id attribute of any element of allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20any%20element%20of%20previousProof%20list%20has%20an%20id%20attribute%20that%20does%20not%20match%20the%20id%20attribute%20of%20any%20element%20of%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n        await verificationFail({\n          credential: credentials.clone('missingPreviousProofArray'),\n          verifier,\n          reason: 'Should not verify VC with invalid \"proof.previousProof\".'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "pmPgloOAmrko-FWqqfD9b",
              "ctx": null,
              "_testId": "urn:uuid:34057b2c-18fd-44e9-8b4f-042ace0744fa",
              "cell": {
                "columnId": "ACA-py",
                "rowId": "If any element of previousProof list has an id attribute that does not match the id attribute of any element of allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20any%20element%20of%20previousProof%20list%20has%20an%20id%20attribute%20that%20does%20not%20match%20the%20id%20attribute%20of%20any%20element%20of%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9447,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 28,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Each value identifies another data integrity proof, all of which MUST also verify for the current proof to be considered verified",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=Each%20value%20identifies%20another%20data%20integrity%20proof%2C%20all%20of%20which%20MUST%20also%20verify%20for%20the%20current%20proof%20to%20be%20considered%20verified';\n        await verificationFail({\n          credential: credentials.clone('previousProofFail'),\n          verifier,\n          reason: 'Should not verify VC with a \"previousProof\" that does ' +\n          'not verify.'\n        });\n\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "pmPgloOAmrko-FWqqfD9b",
              "ctx": null,
              "_testId": "urn:uuid:eeee1cf2-3bb1-4832-8977-15e014c76b6a",
              "cell": {
                "columnId": "ACA-py",
                "rowId": "Each value identifies another data integrity proof, all of which MUST also verify for the current proof to be considered verified"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=Each%20value%20identifies%20another%20data%20integrity%20proof%2C%20all%20of%20which%20MUST%20also%20verify%20for%20the%20current%20proof%20to%20be%20considered%20verified",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9476,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 29,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"ACA-py\"",
              "body": "function() {\n      this.currentTest.cell = {\n        columnId: testDescription,\n        rowId: this.currentTest.title\n      };\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "pmPgloOAmrko-FWqqfD9b",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"ACA-py\"",
              "body": "async function() {\n      proofValueTests = shouldBeProofValue({credentials, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "pmPgloOAmrko-FWqqfD9b",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8786,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "Ksgy9d4gisKl6DoQjj6Tn",
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
          "_testId": "urn:uuid:dfe739ea-6c25-4f97-93d1-953e8834b23b"
        },
        {
          "title": "apicatalog.com",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.';\n      const credential = credentials.clone('invalidBaseUrl');\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'Should not verify VC with invalid base URL'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "JC5FF1IsnlSix4emI_7V_",
              "ctx": null,
              "_testId": "urn:uuid:361a2fc7-6179-459e-a062-1a7a29603c37",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9506,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 384,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Conforming processors MUST produce errors when non-conforming documents are consumed.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.';\n      // this could be read as testing all non-confirming docs or just one\n      // for this test only one doc is tested as it should throw for any\n      // non-conforming doc\n      await verificationFail({\n        credential: credentials.clone('invalidProofType'),\n        verifier,\n        reason: 'Should not verify VC with invalid \"proof.type\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "JC5FF1IsnlSix4emI_7V_",
              "ctx": null,
              "_testId": "urn:uuid:f4f9343a-e704-4525-8439-c623f311f915",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "Conforming processors MUST produce errors when non-conforming documents are consumed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9891,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 196,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.';\n      const credential = credentials.clone('issuedVc');\n      credential.proof = null;\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'MUST not verify VC with proof that is not a map.'\n      });\n      await verificationFail({\n        // use a string as the non map representation of a VC\n        credential: JSON.stringify(credentials.clone('issuedVc')),\n        verifier,\n        reason: 'MUST not verify VC that is not a map.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "JC5FF1IsnlSix4emI_7V_",
              "ctx": null,
              "_testId": "urn:uuid:19bf47f2-cb87-480b-acc0-99ba283f1023",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 10087,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 2207,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof;\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'MUST not verify VC w/o a proof'\n      });\n      const noType = credentials.clone('issuedVc');\n      delete noType.proof.type;\n      await verificationFail({\n        credential: noType,\n        verifier,\n        reason: 'MUST not verify VC w/o a \"proof.type\".'\n      });\n      const noVm = credentials.clone('noVm');\n      await verificationFail({\n        credential: noVm,\n        verifier,\n        reason: 'MUST not verify VC w/o \"proof.verificationMethod\".\"'\n      });\n      const noProofPurpose = credentials.clone('noProofPurpose');\n      await verificationFail({\n        credential: noProofPurpose,\n        verifier,\n        reason: 'MUST not verify VC w/o \"proof.proofPurpose\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "JC5FF1IsnlSix4emI_7V_",
              "ctx": null,
              "_testId": "urn:uuid:8aa2377f-0698-4238-9560-23aeeb0e8dbe",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 12294,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 998,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('invalidProofType');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "JC5FF1IsnlSix4emI_7V_",
              "ctx": null,
              "_testId": "urn:uuid:58132a1c-02d5-4a92-a5b4-c4e3461eab7c",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 13292,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 113,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('invalidVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "JC5FF1IsnlSix4emI_7V_",
              "ctx": null,
              "_testId": "urn:uuid:c11d2709-7703-4e5c-8a8d-aaae80792d06",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 13405,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 202,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('invalidProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "JC5FF1IsnlSix4emI_7V_",
              "ctx": null,
              "_testId": "urn:uuid:dadfcaef-e381-422e-ac88-85ac3c939fb2",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 13608,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 286,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      // NOTE: expectedProofPurpose should be specified by verifiers internally\n      // it is very unlikely to be invalidProofPurpose\n      await verificationFail({\n        credential: credentials.clone('invalidProofPurpose'),\n        verifier,\n        reason: 'Verifier should reject VC with invalid proof purpose.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "JC5FF1IsnlSix4emI_7V_",
              "ctx": null,
              "_testId": "urn:uuid:93eaff36-d9ba-46b9-854a-75093f47d02e",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 13894,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 402,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.';\n        await proofValueTests;\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "JC5FF1IsnlSix4emI_7V_",
              "ctx": null,
              "_testId": "urn:uuid:66b7e088-e776-4169-88c6-f4cb9096a782",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "The proofValue property MUST be used, as specified in 2.1 Proofs."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 14297,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof';\n      await proofValueTests;\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "JC5FF1IsnlSix4emI_7V_",
              "ctx": null,
              "_testId": "urn:uuid:80e05929-864d-45be-85db-661edd355f38",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 14297,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      await verificationFail({\n        credential: credentials.clone('undefinedTerm'),\n        verifier,\n        reason: 'Should fail to verify VC when data is dropped by JSON-LD'\n      });\n      const undefinedTerm = credentials.clone('issuedVc');\n      undefinedTerm.credentialSubject.undefinedTerm = 'IfDroppedWillVerify';\n      await verificationFail({\n        credential: undefinedTerm,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined term is added ' +\n          'after issuance.'\n      });\n      const undefinedType = credentials.clone('issuedVc');\n      undefinedType.type.push('UndefinedType');\n      await verificationFail({\n        credential: undefinedType,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined type is added ' +\n          'after issuance.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "JC5FF1IsnlSix4emI_7V_",
              "ctx": null,
              "_testId": "urn:uuid:477ed83f-751a-407c-aeb3-7cf5e777cdad",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 14297,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 893,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Should fail to verify VC if an undefined term is added after issuance.: expected Response { status: 200, statusText: 'OK', headers: Headers { 'content-type': 'application/json', vary: 'Accept-Encoding', 'content-encoding': 'gzip', 'x-cloud-trace-context': 'a87eeaf9a01d60ffef5454d140d628dc', date: 'Sun, 13 Oct 2024 05:06:38 GMT', server: 'Google Frontend', 'cache-control': 'private', 'transfer-encoding': 'chunked', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Should fail to verify VC if an undefined term is added after issuance.: expected Response { status: 200, statusText: 'OK', headers: Headers { 'content-type': 'application/json', vary: 'Accept-Encoding', 'content-encoding': 'gzip', 'x-cloud-trace-context': 'a87eeaf9a01d60ffef5454d140d628dc', date: 'Sun, 13 Oct 2024 05:06:38 GMT', server: 'Google Frontend', 'cache-control': 'private', 'transfer-encoding': 'chunked', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationFail (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:82:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/suites/verify.js:159:7)"
              }
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n      const credential = credentials.clone('invalidCryptosuite');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "JC5FF1IsnlSix4emI_7V_",
              "ctx": null,
              "_testId": "urn:uuid:56245c67-8f95-4938-929f-9526653fc977",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 15190,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 101,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "An OPTIONAL string value (proof.previousProof) or unordered list of string values. Each value identifies another data integrity proof that MUST verify before the current proof is processed.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=An%20OPTIONAL%20string%20value%20or%20unordered%20list%20of%20string%20values.%20Each%20value%20identifies%20another%20data%20integrity%20proof%20that%20MUST%20verify%20before%20the%20current%20proof%20is%20processed';\n        await verificationSuccess({\n          credential: credentials.clone('previousProofString'),\n          verifier,\n          reason: 'Should verify VC with a string \"proof.previousProof\".'\n        });\n        await verificationSuccess({\n          credential: credentials.clone('previousProofArray'),\n          verifier,\n          reason: 'Should verify VC with an Array \"proof.previousProof\".'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "JC5FF1IsnlSix4emI_7V_",
              "ctx": null,
              "_testId": "urn:uuid:e584a017-4ab0-4ec7-8087-3faf40c19003",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "An OPTIONAL string value (proof.previousProof) or unordered list of string values. Each value identifies another data integrity proof that MUST verify before the current proof is processed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=An%20OPTIONAL%20string%20value%20or%20unordered%20list%20of%20string%20values.%20Each%20value%20identifies%20another%20data%20integrity%20proof%20that%20MUST%20verify%20before%20the%20current%20proof%20is%20processed",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 15290,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 101,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Should verify VC with a string \"proof.previousProof\".: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",\"https://w3id.org/security/data-integrity/v2\",{\"@context\":{\"AlumniCredential\":\"https://www.example.org/AlumniCredential\",\"alumniOf\":\"https://www.example.org/alumniOf\",\"description\":\"https://schema.org/description\",\"name\":\"https://schema.org/name\"}}],\"id\":\"urn:uuid:58172aac-d8ba-11ed-83dd-0b3aef56cc33\",\"type\":[\"VerifiableCredential\",\"AlumniCredential\"],\"name\":\"Alumni Credential\",\"description\":\"A minimum viable example of a VC 1.1 Alumni Credential.\",\"issuer\":\"did:key:z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E\",\"issuanceDate\":\"2023-01-01T00:00:00Z\",\"credentialSubject\":{\"id\":\"did:example:abcdefgh\",\"alumniOf\":\"The School of Examples\"},\"proof\":[{\"type\":\"DataIntegrityProof\",\"id\":\"urn:uuid:26329423-bec9-4b2e-88cb-a7c7d9dc4544\",\"cryptosuite\":\"eddsa-rdfc-2022\",\"created\":\"2023-02-26T22:06:38Z\",\"verificationMethod\":\"did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7#z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z5gL4Hy8N4B6zr9mQAGqpsry1iTdxEAp4zjqPNQv7iTvgdkMcHKnMALvPwU3YAKZhYn3k3Jmut2TAMxSaHaggFtf4\"},{\"type\":\"DataIntegrityProof\",\"cryptosuite\":\"eddsa-rdfc-2022\",\"created\":\"2023-02-26T22:16:38Z\",\"verificationMethod\":\"did:key:z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E#z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E\",\"proofPurpose\":\"assertionMethod\",\"previousProof\":\"urn:uuid:26329423-bec9-4b2e-88cb-a7c7d9dc4544\",\"proofValue\":\"z2ENoYDUK8cMMJMvwRGyHVX23pPeHaZfCgpbDFs15FXGaeFseeqzZf5nWXF14JPoBcqdr39vVPgrAUbWT2VYYacrG\"}]},\"options\":{}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          "https://w3id.org/security/data-integrity/v2",
                          {
                            "@context": {
                              "AlumniCredential": "https://www.example.org/AlumniCredential",
                              "alumniOf": "https://www.example.org/alumniOf",
                              "description": "https://schema.org/description",
                              "name": "https://schema.org/name"
                            }
                          }
                        ],
                        "id": "urn:uuid:58172aac-d8ba-11ed-83dd-0b3aef56cc33",
                        "type": [
                          "VerifiableCredential",
                          "AlumniCredential"
                        ],
                        "name": "Alumni Credential",
                        "description": "A minimum viable example of a VC 1.1 Alumni Credential.",
                        "issuer": "did:key:z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E",
                        "issuanceDate": "2023-01-01T00:00:00Z",
                        "credentialSubject": {
                          "id": "did:example:abcdefgh",
                          "alumniOf": "The School of Examples"
                        },
                        "proof": [
                          {
                            "type": "DataIntegrityProof",
                            "id": "urn:uuid:26329423-bec9-4b2e-88cb-a7c7d9dc4544",
                            "cryptosuite": "eddsa-rdfc-2022",
                            "created": "2023-02-26T22:06:38Z",
                            "verificationMethod": "did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7#z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7",
                            "proofPurpose": "assertionMethod",
                            "proofValue": "z5gL4Hy8N4B6zr9mQAGqpsry1iTdxEAp4zjqPNQv7iTvgdkMcHKnMALvPwU3YAKZhYn3k3Jmut2TAMxSaHaggFtf4"
                          },
                          {
                            "type": "DataIntegrityProof",
                            "cryptosuite": "eddsa-rdfc-2022",
                            "created": "2023-02-26T22:16:38Z",
                            "verificationMethod": "did:key:z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E#z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E",
                            "proofPurpose": "assertionMethod",
                            "previousProof": "urn:uuid:26329423-bec9-4b2e-88cb-a7c7d9dc4544",
                            "proofValue": "z2ENoYDUK8cMMJMvwRGyHVX23pPeHaZfCgpbDFs15FXGaeFseeqzZf5nWXF14JPoBcqdr39vVPgrAUbWT2VYYacrG"
                          }
                        ]
                      },
                      "options": {}
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc.apicatalog.com/credentials/verify",
                  "status": 400,
                  "data": {
                    "checks": [
                      "PROOF"
                    ],
                    "warnings": [],
                    "errors": [
                      "MALFORMED",
                      "INVALID_DOCUMENT"
                    ]
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Should verify VC with a string \"proof.previousProof\".: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:49:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/suites/verify.js:258:9)"
              }
            },
            {
              "type": "test",
              "title": "If an unordered list (proof), all referenced proofs in the array MUST verify.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=If%20an%20unordered%20list%2C%20all%20referenced%20proofs%20in%20the%20array%20MUST%20verify';\n        await verificationSuccess({\n          credential: credentials.clone('proofSet'),\n          verifier,\n          reason: 'Should verify VC with multiple proofs.'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "JC5FF1IsnlSix4emI_7V_",
              "ctx": null,
              "_testId": "urn:uuid:fb962519-a832-40a3-825c-c67a8026682a",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If an unordered list (proof), all referenced proofs in the array MUST verify."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=If%20an%20unordered%20list%2C%20all%20referenced%20proofs%20in%20the%20array%20MUST%20verify",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 15392,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 107,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If a proof with id equal to previousProof does not exist in allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20a%20proof%20with%20id%20equal%20to%20previousProof%20does%20not%20exist%20in%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR';\n        await verificationFail({\n          credential: credentials.clone('missingPreviousProofString'),\n          verifier,\n          reason: 'Should not verify VC with invalid \"proof.previousProof\".'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "JC5FF1IsnlSix4emI_7V_",
              "ctx": null,
              "_testId": "urn:uuid:0c8ca44a-32b8-45df-956c-99ae3072c692",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If a proof with id equal to previousProof does not exist in allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20a%20proof%20with%20id%20equal%20to%20previousProof%20does%20not%20exist%20in%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 15500,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 97,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If any element of previousProof list has an id attribute that does not match the id attribute of any element of allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20any%20element%20of%20previousProof%20list%20has%20an%20id%20attribute%20that%20does%20not%20match%20the%20id%20attribute%20of%20any%20element%20of%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n        await verificationFail({\n          credential: credentials.clone('missingPreviousProofArray'),\n          verifier,\n          reason: 'Should not verify VC with invalid \"proof.previousProof\".'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "JC5FF1IsnlSix4emI_7V_",
              "ctx": null,
              "_testId": "urn:uuid:b07cb97f-a07d-4ed6-95de-2496f64ab561",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If any element of previousProof list has an id attribute that does not match the id attribute of any element of allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20any%20element%20of%20previousProof%20list%20has%20an%20id%20attribute%20that%20does%20not%20match%20the%20id%20attribute%20of%20any%20element%20of%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 15596,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 94,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Each value identifies another data integrity proof, all of which MUST also verify for the current proof to be considered verified",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=Each%20value%20identifies%20another%20data%20integrity%20proof%2C%20all%20of%20which%20MUST%20also%20verify%20for%20the%20current%20proof%20to%20be%20considered%20verified';\n        await verificationFail({\n          credential: credentials.clone('previousProofFail'),\n          verifier,\n          reason: 'Should not verify VC with a \"previousProof\" that does ' +\n          'not verify.'\n        });\n\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "JC5FF1IsnlSix4emI_7V_",
              "ctx": null,
              "_testId": "urn:uuid:7b388018-c7bb-44ff-b640-5b146c8a6ec5",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "Each value identifies another data integrity proof, all of which MUST also verify for the current proof to be considered verified"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=Each%20value%20identifies%20another%20data%20integrity%20proof%2C%20all%20of%20which%20MUST%20also%20verify%20for%20the%20current%20proof%20to%20be%20considered%20verified",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 15692,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 99,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"apicatalog.com\"",
              "body": "function() {\n      this.currentTest.cell = {\n        columnId: testDescription,\n        rowId: this.currentTest.title\n      };\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "JC5FF1IsnlSix4emI_7V_",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"apicatalog.com\"",
              "body": "async function() {\n      proofValueTests = shouldBeProofValue({credentials, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "JC5FF1IsnlSix4emI_7V_",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9505,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "Ksgy9d4gisKl6DoQjj6Tn",
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
          "_testId": "urn:uuid:dcab217b-51f3-4f3f-a4f1-5cc68af45dcf"
        },
        {
          "title": "Digital Bazaar",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.';\n      const credential = credentials.clone('invalidBaseUrl');\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'Should not verify VC with invalid base URL'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "EP5_Q-cQ5glNVX4UC5cXK",
              "ctx": null,
              "_testId": "urn:uuid:b2998739-d968-41ae-a04f-d2748d0e9c9d",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 15796,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 344,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Conforming processors MUST produce errors when non-conforming documents are consumed.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.';\n      // this could be read as testing all non-confirming docs or just one\n      // for this test only one doc is tested as it should throw for any\n      // non-conforming doc\n      await verificationFail({\n        credential: credentials.clone('invalidProofType'),\n        verifier,\n        reason: 'Should not verify VC with invalid \"proof.type\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "EP5_Q-cQ5glNVX4UC5cXK",
              "ctx": null,
              "_testId": "urn:uuid:e94ef91d-01fa-48e4-b6f3-c585b730016f",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "Conforming processors MUST produce errors when non-conforming documents are consumed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16141,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 60,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.';\n      const credential = credentials.clone('issuedVc');\n      credential.proof = null;\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'MUST not verify VC with proof that is not a map.'\n      });\n      await verificationFail({\n        // use a string as the non map representation of a VC\n        credential: JSON.stringify(credentials.clone('issuedVc')),\n        verifier,\n        reason: 'MUST not verify VC that is not a map.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "EP5_Q-cQ5glNVX4UC5cXK",
              "ctx": null,
              "_testId": "urn:uuid:2af766b2-6127-4f9f-ba86-33ef22db5024",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16201,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 73,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof;\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'MUST not verify VC w/o a proof'\n      });\n      const noType = credentials.clone('issuedVc');\n      delete noType.proof.type;\n      await verificationFail({\n        credential: noType,\n        verifier,\n        reason: 'MUST not verify VC w/o a \"proof.type\".'\n      });\n      const noVm = credentials.clone('noVm');\n      await verificationFail({\n        credential: noVm,\n        verifier,\n        reason: 'MUST not verify VC w/o \"proof.verificationMethod\".\"'\n      });\n      const noProofPurpose = credentials.clone('noProofPurpose');\n      await verificationFail({\n        credential: noProofPurpose,\n        verifier,\n        reason: 'MUST not verify VC w/o \"proof.proofPurpose\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "EP5_Q-cQ5glNVX4UC5cXK",
              "ctx": null,
              "_testId": "urn:uuid:8a6910f2-ab76-4f37-803c-b0f88e682adb",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16275,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 172,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('invalidProofType');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "EP5_Q-cQ5glNVX4UC5cXK",
              "ctx": null,
              "_testId": "urn:uuid:e97ce7bf-10f2-4144-ae2b-5406e95ee750",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16448,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 52,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('invalidVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "EP5_Q-cQ5glNVX4UC5cXK",
              "ctx": null,
              "_testId": "urn:uuid:2b9f495a-e91d-4f8c-8259-880b2f652efd",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16500,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 44,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('invalidProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "EP5_Q-cQ5glNVX4UC5cXK",
              "ctx": null,
              "_testId": "urn:uuid:cfc7b74e-1b45-4f85-a9b1-f88ce680b564",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16544,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 75,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      // NOTE: expectedProofPurpose should be specified by verifiers internally\n      // it is very unlikely to be invalidProofPurpose\n      await verificationFail({\n        credential: credentials.clone('invalidProofPurpose'),\n        verifier,\n        reason: 'Verifier should reject VC with invalid proof purpose.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "EP5_Q-cQ5glNVX4UC5cXK",
              "ctx": null,
              "_testId": "urn:uuid:2f6f0d56-0648-4245-99ab-11e499da1fbf",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16619,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 258,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.';\n        await proofValueTests;\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "EP5_Q-cQ5glNVX4UC5cXK",
              "ctx": null,
              "_testId": "urn:uuid:a75af300-f4fa-4dda-b392-3be2a0b8ce5a",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The proofValue property MUST be used, as specified in 2.1 Proofs."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16877,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 2709,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof';\n      await proofValueTests;\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "EP5_Q-cQ5glNVX4UC5cXK",
              "ctx": null,
              "_testId": "urn:uuid:fb10710e-6ef5-40ec-bace-26f6d0ce52e2",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19587,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      await verificationFail({\n        credential: credentials.clone('undefinedTerm'),\n        verifier,\n        reason: 'Should fail to verify VC when data is dropped by JSON-LD'\n      });\n      const undefinedTerm = credentials.clone('issuedVc');\n      undefinedTerm.credentialSubject.undefinedTerm = 'IfDroppedWillVerify';\n      await verificationFail({\n        credential: undefinedTerm,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined term is added ' +\n          'after issuance.'\n      });\n      const undefinedType = credentials.clone('issuedVc');\n      undefinedType.type.push('UndefinedType');\n      await verificationFail({\n        credential: undefinedType,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined type is added ' +\n          'after issuance.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "EP5_Q-cQ5glNVX4UC5cXK",
              "ctx": null,
              "_testId": "urn:uuid:55602ca6-9fce-4add-bd9f-51e5733426c3",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19587,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 142,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n      const credential = credentials.clone('invalidCryptosuite');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "EP5_Q-cQ5glNVX4UC5cXK",
              "ctx": null,
              "_testId": "urn:uuid:02ee56ca-7c99-42f6-bc0d-63e2af420189",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19729,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 42,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "An OPTIONAL string value (proof.previousProof) or unordered list of string values. Each value identifies another data integrity proof that MUST verify before the current proof is processed.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=An%20OPTIONAL%20string%20value%20or%20unordered%20list%20of%20string%20values.%20Each%20value%20identifies%20another%20data%20integrity%20proof%20that%20MUST%20verify%20before%20the%20current%20proof%20is%20processed';\n        await verificationSuccess({\n          credential: credentials.clone('previousProofString'),\n          verifier,\n          reason: 'Should verify VC with a string \"proof.previousProof\".'\n        });\n        await verificationSuccess({\n          credential: credentials.clone('previousProofArray'),\n          verifier,\n          reason: 'Should verify VC with an Array \"proof.previousProof\".'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "EP5_Q-cQ5glNVX4UC5cXK",
              "ctx": null,
              "_testId": "urn:uuid:06e19068-8126-4d80-b060-72962c10ad56",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "An OPTIONAL string value (proof.previousProof) or unordered list of string values. Each value identifies another data integrity proof that MUST verify before the current proof is processed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=An%20OPTIONAL%20string%20value%20or%20unordered%20list%20of%20string%20values.%20Each%20value%20identifies%20another%20data%20integrity%20proof%20that%20MUST%20verify%20before%20the%20current%20proof%20is%20processed",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19770,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 2932,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Should verify VC with a string \"proof.previousProof\".: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          "https://w3id.org/security/data-integrity/v2",
                          {
                            "@context": {
                              "AlumniCredential": "https://www.example.org/AlumniCredential",
                              "alumniOf": "https://www.example.org/alumniOf",
                              "description": "https://schema.org/description",
                              "name": "https://schema.org/name"
                            }
                          }
                        ],
                        "id": "urn:uuid:58172aac-d8ba-11ed-83dd-0b3aef56cc33",
                        "type": [
                          "VerifiableCredential",
                          "AlumniCredential"
                        ],
                        "name": "Alumni Credential",
                        "description": "A minimum viable example of a VC 1.1 Alumni Credential.",
                        "issuer": "did:key:z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E",
                        "issuanceDate": "2023-01-01T00:00:00Z",
                        "credentialSubject": {
                          "id": "did:example:abcdefgh",
                          "alumniOf": "The School of Examples"
                        },
                        "proof": [
                          {
                            "type": "DataIntegrityProof",
                            "id": "urn:uuid:26329423-bec9-4b2e-88cb-a7c7d9dc4544",
                            "cryptosuite": "eddsa-rdfc-2022",
                            "created": "2023-02-26T22:06:38Z",
                            "verificationMethod": "did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7#z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7",
                            "proofPurpose": "assertionMethod",
                            "proofValue": "z5gL4Hy8N4B6zr9mQAGqpsry1iTdxEAp4zjqPNQv7iTvgdkMcHKnMALvPwU3YAKZhYn3k3Jmut2TAMxSaHaggFtf4"
                          },
                          {
                            "type": "DataIntegrityProof",
                            "cryptosuite": "eddsa-rdfc-2022",
                            "created": "2023-02-26T22:16:38Z",
                            "verificationMethod": "did:key:z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E#z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E",
                            "proofPurpose": "assertionMethod",
                            "previousProof": "urn:uuid:26329423-bec9-4b2e-88cb-a7c7d9dc4544",
                            "proofValue": "z2ENoYDUK8cMMJMvwRGyHVX23pPeHaZfCgpbDFs15FXGaeFseeqzZf5nWXF14JPoBcqdr39vVPgrAUbWT2VYYacrG"
                          }
                        ]
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half",
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",\"https://w3id.org/security/data-integrity/v2\",{\"@context\":{\"AlumniCredential\":\"https://www.example.org/AlumniCredential\",\"alumniOf\":\"https://www.example.org/alumniOf\",\"description\":\"https://schema.org/description\",\"name\":\"https://schema.org/name\"}}],\"id\":\"urn:uuid:58172aac-d8ba-11ed-83dd-0b3aef56cc33\",\"type\":[\"VerifiableCredential\",\"AlumniCredential\"],\"name\":\"Alumni Credential\",\"description\":\"A minimum viable example of a VC 1.1 Alumni Credential.\",\"issuer\":\"did:key:z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E\",\"issuanceDate\":\"2023-01-01T00:00:00Z\",\"credentialSubject\":{\"id\":\"did:example:abcdefgh\",\"alumniOf\":\"The School of Examples\"},\"proof\":[{\"type\":\"DataIntegrityProof\",\"id\":\"urn:uuid:26329423-bec9-4b2e-88cb-a7c7d9dc4544\",\"cryptosuite\":\"eddsa-rdfc-2022\",\"created\":\"2023-02-26T22:06:38Z\",\"verificationMethod\":\"did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7#z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z5gL4Hy8N4B6zr9mQAGqpsry1iTdxEAp4zjqPNQv7iTvgdkMcHKnMALvPwU3YAKZhYn3k3Jmut2TAMxSaHaggFtf4\"},{\"type\":\"DataIntegrityProof\",\"cryptosuite\":\"eddsa-rdfc-2022\",\"created\":\"2023-02-26T22:16:38Z\",\"verificationMethod\":\"did:key:z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E#z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E\",\"proofPurpose\":\"assertionMethod\",\"previousProof\":\"urn:uuid:26329423-bec9-4b2e-88cb-a7c7d9dc4544\",\"proofValue\":\"z2ENoYDUK8cMMJMvwRGyHVX23pPeHaZfCgpbDFs15FXGaeFseeqzZf5nWXF14JPoBcqdr39vVPgrAUbWT2VYYacrG\"}]},\"options\":{\"checks\":[\"proof\"]}}"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc2.veresverifier.dev/verifiers/z19w7KofwvE2nkJeRVLp8NDxz/credentials/verify",
                  "status": 400,
                  "data": {
                    "verified": false,
                    "results": [
                      {
                        "proof": {
                          "@context": [
                            "https://www.w3.org/2018/credentials/v1",
                            "https://w3id.org/security/data-integrity/v2",
                            {
                              "@context": {
                                "AlumniCredential": "https://www.example.org/AlumniCredential",
                                "alumniOf": "https://www.example.org/alumniOf",
                                "description": "https://schema.org/description",
                                "name": "https://schema.org/name"
                              }
                            }
                          ],
                          "type": "DataIntegrityProof",
                          "id": "urn:uuid:26329423-bec9-4b2e-88cb-a7c7d9dc4544",
                          "cryptosuite": "eddsa-rdfc-2022",
                          "created": "2023-02-26T22:06:38Z",
                          "verificationMethod": "did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7#z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "z5gL4Hy8N4B6zr9mQAGqpsry1iTdxEAp4zjqPNQv7iTvgdkMcHKnMALvPwU3YAKZhYn3k3Jmut2TAMxSaHaggFtf4"
                        },
                        "verified": false,
                        "verificationMethod": {
                          "@context": "https://w3id.org/security/suites/ed25519-2020/v1",
                          "id": "did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7#z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7",
                          "type": "Ed25519VerificationKey2020",
                          "controller": "did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7",
                          "publicKeyMultibase": "z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7"
                        },
                        "error": {
                          "name": "VerificationError",
                          "message": "Credential issuer must match the verification method controller."
                        },
                        "purposeResult": {
                          "valid": false,
                          "error": {
                            "name": "Error",
                            "message": "Credential issuer must match the verification method controller.",
                            "stack": "Error: Credential issuer must match the verification method controller.\n    at CredentialIssuancePurpose.validate (file:///home/node/app/node_modules/@digitalbazaar/vc/lib/CredentialIssuancePurpose.js:70:15)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async /home/node/app/node_modules/jsonld-signatures/lib/ProofSet.js:301:27\n    at async Promise.all (index 0)\n    at async _verify (/home/node/app/node_modules/jsonld-signatures/lib/ProofSet.js:287:3)\n    at async ProofSet.verify (/home/node/app/node_modules/jsonld-signatures/lib/ProofSet.js:191:23)\n    at async Object.verify (/home/node/app/node_modules/jsonld-signatures/lib/jsonld-signatures.js:169:18)\n    at async _verifyCredential (file:///home/node/app/node_modules/@digitalbazaar/vc/lib/index.js:328:18)\n    at async Module.verifyCredential (file:///home/node/app/node_modules/@digitalbazaar/vc/lib/index.js:277:12)\n    at async Module.verifyCredential (file:///home/node/app/node_modules/@bedrock/vc-verifier/lib/di.js:13:18)"
                          }
                        }
                      },
                      {
                        "proof": {
                          "@context": [
                            "https://www.w3.org/2018/credentials/v1",
                            "https://w3id.org/security/data-integrity/v2",
                            {
                              "@context": {
                                "AlumniCredential": "https://www.example.org/AlumniCredential",
                                "alumniOf": "https://www.example.org/alumniOf",
                                "description": "https://schema.org/description",
                                "name": "https://schema.org/name"
                              }
                            }
                          ],
                          "type": "DataIntegrityProof",
                          "cryptosuite": "eddsa-rdfc-2022",
                          "created": "2023-02-26T22:16:38Z",
                          "verificationMethod": "did:key:z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E#z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E",
                          "proofPurpose": "assertionMethod",
                          "previousProof": "urn:uuid:26329423-bec9-4b2e-88cb-a7c7d9dc4544",
                          "proofValue": "z2ENoYDUK8cMMJMvwRGyHVX23pPeHaZfCgpbDFs15FXGaeFseeqzZf5nWXF14JPoBcqdr39vVPgrAUbWT2VYYacrG"
                        },
                        "verified": false,
                        "error": {
                          "name": "VerificationError",
                          "message": "Invalid signature."
                        }
                      }
                    ],
                    "error": {
                      "name": "VerificationError",
                      "errors": [
                        {
                          "name": "Error",
                          "message": "Credential issuer must match the verification method controller.",
                          "stack": "Error: Credential issuer must match the verification method controller.\n    at CredentialIssuancePurpose.validate (file:///home/node/app/node_modules/@digitalbazaar/vc/lib/CredentialIssuancePurpose.js:70:15)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async /home/node/app/node_modules/jsonld-signatures/lib/ProofSet.js:301:27\n    at async Promise.all (index 0)\n    at async _verify (/home/node/app/node_modules/jsonld-signatures/lib/ProofSet.js:287:3)\n    at async ProofSet.verify (/home/node/app/node_modules/jsonld-signatures/lib/ProofSet.js:191:23)\n    at async Object.verify (/home/node/app/node_modules/jsonld-signatures/lib/jsonld-signatures.js:169:18)\n    at async _verifyCredential (file:///home/node/app/node_modules/@digitalbazaar/vc/lib/index.js:328:18)\n    at async Module.verifyCredential (file:///home/node/app/node_modules/@digitalbazaar/vc/lib/index.js:277:12)\n    at async Module.verifyCredential (file:///home/node/app/node_modules/@bedrock/vc-verifier/lib/di.js:13:18)"
                        },
                        {
                          "name": "Error",
                          "message": "Invalid signature.",
                          "stack": "Error: Invalid signature.\n    at DataIntegrityProof.verifyProof (file:///home/node/app/node_modules/@digitalbazaar/data-integrity/lib/DataIntegrityProof.js:293:15)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async /home/node/app/node_modules/jsonld-signatures/lib/ProofSet.js:268:53\n    at async Promise.all (index 1)\n    at async _verify (/home/node/app/node_modules/jsonld-signatures/lib/ProofSet.js:256:3)\n    at async ProofSet.verify (/home/node/app/node_modules/jsonld-signatures/lib/ProofSet.js:191:23)\n    at async Object.verify (/home/node/app/node_modules/jsonld-signatures/lib/jsonld-signatures.js:169:18)\n    at async _verifyCredential (file:///home/node/app/node_modules/@digitalbazaar/vc/lib/index.js:328:18)\n    at async Module.verifyCredential (file:///home/node/app/node_modules/@digitalbazaar/vc/lib/index.js:277:12)\n    at async Module.verifyCredential (file:///home/node/app/node_modules/@bedrock/vc-verifier/lib/di.js:13:18)"
                        }
                      ],
                      "message": "Verification error(s)."
                    },
                    "checks": [
                      {
                        "check": [
                          "proof"
                        ],
                        "id": "urn:uuid:58172aac-d8ba-11ed-83dd-0b3aef56cc33",
                        "error": "Credential issuer must match the verification method controller.",
                        "verificationMethod": "did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7#z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7"
                      }
                    ]
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Should verify VC with a string \"proof.previousProof\".: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:49:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/suites/verify.js:258:9)"
              }
            },
            {
              "type": "test",
              "title": "If an unordered list (proof), all referenced proofs in the array MUST verify.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=If%20an%20unordered%20list%2C%20all%20referenced%20proofs%20in%20the%20array%20MUST%20verify';\n        await verificationSuccess({\n          credential: credentials.clone('proofSet'),\n          verifier,\n          reason: 'Should verify VC with multiple proofs.'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "EP5_Q-cQ5glNVX4UC5cXK",
              "ctx": null,
              "_testId": "urn:uuid:917f03eb-a7f8-4932-9906-45729ce7146d",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If an unordered list (proof), all referenced proofs in the array MUST verify."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=If%20an%20unordered%20list%2C%20all%20referenced%20proofs%20in%20the%20array%20MUST%20verify",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 22703,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 3089,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If a proof with id equal to previousProof does not exist in allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20a%20proof%20with%20id%20equal%20to%20previousProof%20does%20not%20exist%20in%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR';\n        await verificationFail({\n          credential: credentials.clone('missingPreviousProofString'),\n          verifier,\n          reason: 'Should not verify VC with invalid \"proof.previousProof\".'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "EP5_Q-cQ5glNVX4UC5cXK",
              "ctx": null,
              "_testId": "urn:uuid:7afebd1e-8104-40b0-aee4-94e5d4f08a32",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If a proof with id equal to previousProof does not exist in allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20a%20proof%20with%20id%20equal%20to%20previousProof%20does%20not%20exist%20in%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25792,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 91,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If any element of previousProof list has an id attribute that does not match the id attribute of any element of allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20any%20element%20of%20previousProof%20list%20has%20an%20id%20attribute%20that%20does%20not%20match%20the%20id%20attribute%20of%20any%20element%20of%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n        await verificationFail({\n          credential: credentials.clone('missingPreviousProofArray'),\n          verifier,\n          reason: 'Should not verify VC with invalid \"proof.previousProof\".'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "EP5_Q-cQ5glNVX4UC5cXK",
              "ctx": null,
              "_testId": "urn:uuid:0649f4e9-3c12-4bad-8fbf-8ca1a194fa6e",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If any element of previousProof list has an id attribute that does not match the id attribute of any element of allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20any%20element%20of%20previousProof%20list%20has%20an%20id%20attribute%20that%20does%20not%20match%20the%20id%20attribute%20of%20any%20element%20of%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25884,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 100,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Each value identifies another data integrity proof, all of which MUST also verify for the current proof to be considered verified",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=Each%20value%20identifies%20another%20data%20integrity%20proof%2C%20all%20of%20which%20MUST%20also%20verify%20for%20the%20current%20proof%20to%20be%20considered%20verified';\n        await verificationFail({\n          credential: credentials.clone('previousProofFail'),\n          verifier,\n          reason: 'Should not verify VC with a \"previousProof\" that does ' +\n          'not verify.'\n        });\n\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "EP5_Q-cQ5glNVX4UC5cXK",
              "ctx": null,
              "_testId": "urn:uuid:736faccc-6e99-47f3-8f0f-3d03c358e722",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "Each value identifies another data integrity proof, all of which MUST also verify for the current proof to be considered verified"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=Each%20value%20identifies%20another%20data%20integrity%20proof%2C%20all%20of%20which%20MUST%20also%20verify%20for%20the%20current%20proof%20to%20be%20considered%20verified",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25985,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 54,
              "state": "passed",
              "speed": "medium"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"Digital Bazaar\"",
              "body": "function() {\n      this.currentTest.cell = {\n        columnId: testDescription,\n        rowId: this.currentTest.title\n      };\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "EP5_Q-cQ5glNVX4UC5cXK",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Digital Bazaar\"",
              "body": "async function() {\n      proofValueTests = shouldBeProofValue({credentials, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "EP5_Q-cQ5glNVX4UC5cXK",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 15791,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "Ksgy9d4gisKl6DoQjj6Tn",
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
          "_testId": "urn:uuid:04cb3ee1-eb87-4743-8d93-73cc94c83eda"
        },
        {
          "title": "Grotto Networking",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.';\n      const credential = credentials.clone('invalidBaseUrl');\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'Should not verify VC with invalid base URL'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "lmbuuoAHfSurepTV_1j1g",
              "ctx": null,
              "_testId": "urn:uuid:801d1170-b1dc-45f2-86ed-b1b22e9cb02e",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 26041,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 521,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Conforming processors MUST produce errors when non-conforming documents are consumed.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.';\n      // this could be read as testing all non-confirming docs or just one\n      // for this test only one doc is tested as it should throw for any\n      // non-conforming doc\n      await verificationFail({\n        credential: credentials.clone('invalidProofType'),\n        verifier,\n        reason: 'Should not verify VC with invalid \"proof.type\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "lmbuuoAHfSurepTV_1j1g",
              "ctx": null,
              "_testId": "urn:uuid:9b64a0a5-483a-4e8d-b113-236d31fab820",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "Conforming processors MUST produce errors when non-conforming documents are consumed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 26563,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 74,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.';\n      const credential = credentials.clone('issuedVc');\n      credential.proof = null;\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'MUST not verify VC with proof that is not a map.'\n      });\n      await verificationFail({\n        // use a string as the non map representation of a VC\n        credential: JSON.stringify(credentials.clone('issuedVc')),\n        verifier,\n        reason: 'MUST not verify VC that is not a map.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "lmbuuoAHfSurepTV_1j1g",
              "ctx": null,
              "_testId": "urn:uuid:3662f2f3-ddc9-4249-8e3a-8ccb155fa59f",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 26637,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 142,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof;\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'MUST not verify VC w/o a proof'\n      });\n      const noType = credentials.clone('issuedVc');\n      delete noType.proof.type;\n      await verificationFail({\n        credential: noType,\n        verifier,\n        reason: 'MUST not verify VC w/o a \"proof.type\".'\n      });\n      const noVm = credentials.clone('noVm');\n      await verificationFail({\n        credential: noVm,\n        verifier,\n        reason: 'MUST not verify VC w/o \"proof.verificationMethod\".\"'\n      });\n      const noProofPurpose = credentials.clone('noProofPurpose');\n      await verificationFail({\n        credential: noProofPurpose,\n        verifier,\n        reason: 'MUST not verify VC w/o \"proof.proofPurpose\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "lmbuuoAHfSurepTV_1j1g",
              "ctx": null,
              "_testId": "urn:uuid:97b31a52-b3ba-4ea8-9e76-962662c36769",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 26780,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 290,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('invalidProofType');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "lmbuuoAHfSurepTV_1j1g",
              "ctx": null,
              "_testId": "urn:uuid:6c74eba7-76b5-4f60-b61d-7cbdcde4c3c1",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 27070,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 76,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('invalidVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "lmbuuoAHfSurepTV_1j1g",
              "ctx": null,
              "_testId": "urn:uuid:9b91a2c6-44c1-4807-bf56-eccc6aaa5fff",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 27146,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 780,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('invalidProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "lmbuuoAHfSurepTV_1j1g",
              "ctx": null,
              "_testId": "urn:uuid:44731558-9e5e-4d76-a6b0-6d39c9771bf6",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 27926,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 707,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      // NOTE: expectedProofPurpose should be specified by verifiers internally\n      // it is very unlikely to be invalidProofPurpose\n      await verificationFail({\n        credential: credentials.clone('invalidProofPurpose'),\n        verifier,\n        reason: 'Verifier should reject VC with invalid proof purpose.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "lmbuuoAHfSurepTV_1j1g",
              "ctx": null,
              "_testId": "urn:uuid:2ff46c79-f780-4967-833b-bd56318e8d2a",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 28633,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 765,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.';\n        await proofValueTests;\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "lmbuuoAHfSurepTV_1j1g",
              "ctx": null,
              "_testId": "urn:uuid:aeff9e87-789d-498b-8d10-4857106fdb3a",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The proofValue property MUST be used, as specified in 2.1 Proofs."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29399,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof';\n      await proofValueTests;\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "lmbuuoAHfSurepTV_1j1g",
              "ctx": null,
              "_testId": "urn:uuid:5fa9ef38-84ce-4d0b-8eae-b0583baa640f",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29399,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      await verificationFail({\n        credential: credentials.clone('undefinedTerm'),\n        verifier,\n        reason: 'Should fail to verify VC when data is dropped by JSON-LD'\n      });\n      const undefinedTerm = credentials.clone('issuedVc');\n      undefinedTerm.credentialSubject.undefinedTerm = 'IfDroppedWillVerify';\n      await verificationFail({\n        credential: undefinedTerm,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined term is added ' +\n          'after issuance.'\n      });\n      const undefinedType = credentials.clone('issuedVc');\n      undefinedType.type.push('UndefinedType');\n      await verificationFail({\n        credential: undefinedType,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined type is added ' +\n          'after issuance.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "lmbuuoAHfSurepTV_1j1g",
              "ctx": null,
              "_testId": "urn:uuid:6483d535-f213-4a2f-a535-30a1bd2adb08",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29399,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1788,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n      const credential = credentials.clone('invalidCryptosuite');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "lmbuuoAHfSurepTV_1j1g",
              "ctx": null,
              "_testId": "urn:uuid:adb7b8d3-58cb-4299-9b8c-fed79b6abda7",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 31188,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 366,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "An OPTIONAL string value (proof.previousProof) or unordered list of string values. Each value identifies another data integrity proof that MUST verify before the current proof is processed.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=An%20OPTIONAL%20string%20value%20or%20unordered%20list%20of%20string%20values.%20Each%20value%20identifies%20another%20data%20integrity%20proof%20that%20MUST%20verify%20before%20the%20current%20proof%20is%20processed';\n        await verificationSuccess({\n          credential: credentials.clone('previousProofString'),\n          verifier,\n          reason: 'Should verify VC with a string \"proof.previousProof\".'\n        });\n        await verificationSuccess({\n          credential: credentials.clone('previousProofArray'),\n          verifier,\n          reason: 'Should verify VC with an Array \"proof.previousProof\".'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "lmbuuoAHfSurepTV_1j1g",
              "ctx": null,
              "_testId": "urn:uuid:8e36ba3e-b90e-4741-8e65-33f2dc38549f",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "An OPTIONAL string value (proof.previousProof) or unordered list of string values. Each value identifies another data integrity proof that MUST verify before the current proof is processed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=An%20OPTIONAL%20string%20value%20or%20unordered%20list%20of%20string%20values.%20Each%20value%20identifies%20another%20data%20integrity%20proof%20that%20MUST%20verify%20before%20the%20current%20proof%20is%20processed",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 31553,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 9335,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If an unordered list (proof), all referenced proofs in the array MUST verify.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=If%20an%20unordered%20list%2C%20all%20referenced%20proofs%20in%20the%20array%20MUST%20verify';\n        await verificationSuccess({\n          credential: credentials.clone('proofSet'),\n          verifier,\n          reason: 'Should verify VC with multiple proofs.'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "lmbuuoAHfSurepTV_1j1g",
              "ctx": null,
              "_testId": "urn:uuid:53e2a0a2-9da9-46d2-bea3-848b9332f855",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If an unordered list (proof), all referenced proofs in the array MUST verify."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=If%20an%20unordered%20list%2C%20all%20referenced%20proofs%20in%20the%20array%20MUST%20verify",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 40889,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1862,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If a proof with id equal to previousProof does not exist in allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20a%20proof%20with%20id%20equal%20to%20previousProof%20does%20not%20exist%20in%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR';\n        await verificationFail({\n          credential: credentials.clone('missingPreviousProofString'),\n          verifier,\n          reason: 'Should not verify VC with invalid \"proof.previousProof\".'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "lmbuuoAHfSurepTV_1j1g",
              "ctx": null,
              "_testId": "urn:uuid:51609de7-cb3f-4c5e-a064-36aa115d9720",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If a proof with id equal to previousProof does not exist in allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20a%20proof%20with%20id%20equal%20to%20previousProof%20does%20not%20exist%20in%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 42751,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 764,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If any element of previousProof list has an id attribute that does not match the id attribute of any element of allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20any%20element%20of%20previousProof%20list%20has%20an%20id%20attribute%20that%20does%20not%20match%20the%20id%20attribute%20of%20any%20element%20of%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n        await verificationFail({\n          credential: credentials.clone('missingPreviousProofArray'),\n          verifier,\n          reason: 'Should not verify VC with invalid \"proof.previousProof\".'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "lmbuuoAHfSurepTV_1j1g",
              "ctx": null,
              "_testId": "urn:uuid:f8b870b1-bccd-4173-870d-096510bc2afc",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If any element of previousProof list has an id attribute that does not match the id attribute of any element of allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20any%20element%20of%20previousProof%20list%20has%20an%20id%20attribute%20that%20does%20not%20match%20the%20id%20attribute%20of%20any%20element%20of%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 43516,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 749,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Each value identifies another data integrity proof, all of which MUST also verify for the current proof to be considered verified",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=Each%20value%20identifies%20another%20data%20integrity%20proof%2C%20all%20of%20which%20MUST%20also%20verify%20for%20the%20current%20proof%20to%20be%20considered%20verified';\n        await verificationFail({\n          credential: credentials.clone('previousProofFail'),\n          verifier,\n          reason: 'Should not verify VC with a \"previousProof\" that does ' +\n          'not verify.'\n        });\n\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "lmbuuoAHfSurepTV_1j1g",
              "ctx": null,
              "_testId": "urn:uuid:38673ba7-ff9d-4de0-b10a-cfa81b0b38aa",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "Each value identifies another data integrity proof, all of which MUST also verify for the current proof to be considered verified"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=Each%20value%20identifies%20another%20data%20integrity%20proof%2C%20all%20of%20which%20MUST%20also%20verify%20for%20the%20current%20proof%20to%20be%20considered%20verified",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 44265,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 72,
              "state": "passed",
              "speed": "medium"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"Grotto Networking\"",
              "body": "function() {\n      this.currentTest.cell = {\n        columnId: testDescription,\n        rowId: this.currentTest.title\n      };\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "lmbuuoAHfSurepTV_1j1g",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Grotto Networking\"",
              "body": "async function() {\n      proofValueTests = shouldBeProofValue({credentials, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "lmbuuoAHfSurepTV_1j1g",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 26039,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "Ksgy9d4gisKl6DoQjj6Tn",
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
          "_testId": "urn:uuid:ef55f91a-75f5-4b6d-a303-365a2a2b196e"
        },
        {
          "title": "Procivis One Core",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.';\n      const credential = credentials.clone('invalidBaseUrl');\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'Should not verify VC with invalid base URL'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "XlfRRByHzOzFyqDvhYKAc",
              "ctx": null,
              "_testId": "urn:uuid:36c5dd6a-7101-4b12-867b-ead86925719a",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 44339,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 356,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Conforming processors MUST produce errors when non-conforming documents are consumed.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.';\n      // this could be read as testing all non-confirming docs or just one\n      // for this test only one doc is tested as it should throw for any\n      // non-conforming doc\n      await verificationFail({\n        credential: credentials.clone('invalidProofType'),\n        verifier,\n        reason: 'Should not verify VC with invalid \"proof.type\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "XlfRRByHzOzFyqDvhYKAc",
              "ctx": null,
              "_testId": "urn:uuid:67dc5fe1-6dfc-4126-b225-865589f02586",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "Conforming processors MUST produce errors when non-conforming documents are consumed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 44696,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 182,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.';\n      const credential = credentials.clone('issuedVc');\n      credential.proof = null;\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'MUST not verify VC with proof that is not a map.'\n      });\n      await verificationFail({\n        // use a string as the non map representation of a VC\n        credential: JSON.stringify(credentials.clone('issuedVc')),\n        verifier,\n        reason: 'MUST not verify VC that is not a map.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "XlfRRByHzOzFyqDvhYKAc",
              "ctx": null,
              "_testId": "urn:uuid:bc39adac-82c1-4aa3-9cab-ece00353212d",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 44877,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 509,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof;\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'MUST not verify VC w/o a proof'\n      });\n      const noType = credentials.clone('issuedVc');\n      delete noType.proof.type;\n      await verificationFail({\n        credential: noType,\n        verifier,\n        reason: 'MUST not verify VC w/o a \"proof.type\".'\n      });\n      const noVm = credentials.clone('noVm');\n      await verificationFail({\n        credential: noVm,\n        verifier,\n        reason: 'MUST not verify VC w/o \"proof.verificationMethod\".\"'\n      });\n      const noProofPurpose = credentials.clone('noProofPurpose');\n      await verificationFail({\n        credential: noProofPurpose,\n        verifier,\n        reason: 'MUST not verify VC w/o \"proof.proofPurpose\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "XlfRRByHzOzFyqDvhYKAc",
              "ctx": null,
              "_testId": "urn:uuid:29ebd758-e9cb-4c6d-af42-ce7c6270869e",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 45387,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 460,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('invalidProofType');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "XlfRRByHzOzFyqDvhYKAc",
              "ctx": null,
              "_testId": "urn:uuid:f63ea35b-3b2a-437a-ba85-29596059e20a",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 45847,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 141,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('invalidVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "XlfRRByHzOzFyqDvhYKAc",
              "ctx": null,
              "_testId": "urn:uuid:c1944642-96d9-4ab3-ba8a-3940c7f2144f",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 45989,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 168,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('invalidProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "XlfRRByHzOzFyqDvhYKAc",
              "ctx": null,
              "_testId": "urn:uuid:0db4100e-e60d-4acc-9a65-4ea8d2f01359",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 46157,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 138,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      // NOTE: expectedProofPurpose should be specified by verifiers internally\n      // it is very unlikely to be invalidProofPurpose\n      await verificationFail({\n        credential: credentials.clone('invalidProofPurpose'),\n        verifier,\n        reason: 'Verifier should reject VC with invalid proof purpose.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "XlfRRByHzOzFyqDvhYKAc",
              "ctx": null,
              "_testId": "urn:uuid:06b5aaae-67e1-4e78-af9d-ed4e9e4ff5e0",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 46295,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 129,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.';\n        await proofValueTests;\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "XlfRRByHzOzFyqDvhYKAc",
              "ctx": null,
              "_testId": "urn:uuid:6773dee9-811b-43c8-b426-fe486cf61939",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "The proofValue property MUST be used, as specified in 2.1 Proofs."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 46425,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof';\n      await proofValueTests;\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "XlfRRByHzOzFyqDvhYKAc",
              "ctx": null,
              "_testId": "urn:uuid:05c23d9c-f94c-43f6-949d-d7d3b072ff87",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 46425,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      await verificationFail({\n        credential: credentials.clone('undefinedTerm'),\n        verifier,\n        reason: 'Should fail to verify VC when data is dropped by JSON-LD'\n      });\n      const undefinedTerm = credentials.clone('issuedVc');\n      undefinedTerm.credentialSubject.undefinedTerm = 'IfDroppedWillVerify';\n      await verificationFail({\n        credential: undefinedTerm,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined term is added ' +\n          'after issuance.'\n      });\n      const undefinedType = credentials.clone('issuedVc');\n      undefinedType.type.push('UndefinedType');\n      await verificationFail({\n        credential: undefinedType,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined type is added ' +\n          'after issuance.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "XlfRRByHzOzFyqDvhYKAc",
              "ctx": null,
              "_testId": "urn:uuid:978f8c96-3ccc-4572-b981-3e5ecbf80e2f",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 46425,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 403,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n      const credential = credentials.clone('invalidCryptosuite');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "XlfRRByHzOzFyqDvhYKAc",
              "ctx": null,
              "_testId": "urn:uuid:4dfae3e2-0ca4-4722-b7c9-3986f847918e",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 46829,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 462,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "An OPTIONAL string value (proof.previousProof) or unordered list of string values. Each value identifies another data integrity proof that MUST verify before the current proof is processed.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=An%20OPTIONAL%20string%20value%20or%20unordered%20list%20of%20string%20values.%20Each%20value%20identifies%20another%20data%20integrity%20proof%20that%20MUST%20verify%20before%20the%20current%20proof%20is%20processed';\n        await verificationSuccess({\n          credential: credentials.clone('previousProofString'),\n          verifier,\n          reason: 'Should verify VC with a string \"proof.previousProof\".'\n        });\n        await verificationSuccess({\n          credential: credentials.clone('previousProofArray'),\n          verifier,\n          reason: 'Should verify VC with an Array \"proof.previousProof\".'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "XlfRRByHzOzFyqDvhYKAc",
              "ctx": null,
              "_testId": "urn:uuid:afa9ec08-f7f1-4e92-810d-c521749acdb1",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "An OPTIONAL string value (proof.previousProof) or unordered list of string values. Each value identifies another data integrity proof that MUST verify before the current proof is processed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=An%20OPTIONAL%20string%20value%20or%20unordered%20list%20of%20string%20values.%20Each%20value%20identifies%20another%20data%20integrity%20proof%20that%20MUST%20verify%20before%20the%20current%20proof%20is%20processed",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 47291,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 101,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Should verify VC with a string \"proof.previousProof\".: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",\"https://w3id.org/security/data-integrity/v2\",{\"@context\":{\"AlumniCredential\":\"https://www.example.org/AlumniCredential\",\"alumniOf\":\"https://www.example.org/alumniOf\",\"description\":\"https://schema.org/description\",\"name\":\"https://schema.org/name\"}}],\"id\":\"urn:uuid:58172aac-d8ba-11ed-83dd-0b3aef56cc33\",\"type\":[\"VerifiableCredential\",\"AlumniCredential\"],\"name\":\"Alumni Credential\",\"description\":\"A minimum viable example of a VC 1.1 Alumni Credential.\",\"issuer\":\"did:key:z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E\",\"issuanceDate\":\"2023-01-01T00:00:00Z\",\"credentialSubject\":{\"id\":\"did:example:abcdefgh\",\"alumniOf\":\"The School of Examples\"},\"proof\":[{\"type\":\"DataIntegrityProof\",\"id\":\"urn:uuid:26329423-bec9-4b2e-88cb-a7c7d9dc4544\",\"cryptosuite\":\"eddsa-rdfc-2022\",\"created\":\"2023-02-26T22:06:38Z\",\"verificationMethod\":\"did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7#z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z5gL4Hy8N4B6zr9mQAGqpsry1iTdxEAp4zjqPNQv7iTvgdkMcHKnMALvPwU3YAKZhYn3k3Jmut2TAMxSaHaggFtf4\"},{\"type\":\"DataIntegrityProof\",\"cryptosuite\":\"eddsa-rdfc-2022\",\"created\":\"2023-02-26T22:16:38Z\",\"verificationMethod\":\"did:key:z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E#z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E\",\"proofPurpose\":\"assertionMethod\",\"previousProof\":\"urn:uuid:26329423-bec9-4b2e-88cb-a7c7d9dc4544\",\"proofValue\":\"z2ENoYDUK8cMMJMvwRGyHVX23pPeHaZfCgpbDFs15FXGaeFseeqzZf5nWXF14JPoBcqdr39vVPgrAUbWT2VYYacrG\"}]},\"options\":{\"checks\":[],\"credentialFormat\":\"JSON_LD_CLASSIC\"}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          "https://w3id.org/security/data-integrity/v2",
                          {
                            "@context": {
                              "AlumniCredential": "https://www.example.org/AlumniCredential",
                              "alumniOf": "https://www.example.org/alumniOf",
                              "description": "https://schema.org/description",
                              "name": "https://schema.org/name"
                            }
                          }
                        ],
                        "id": "urn:uuid:58172aac-d8ba-11ed-83dd-0b3aef56cc33",
                        "type": [
                          "VerifiableCredential",
                          "AlumniCredential"
                        ],
                        "name": "Alumni Credential",
                        "description": "A minimum viable example of a VC 1.1 Alumni Credential.",
                        "issuer": "did:key:z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E",
                        "issuanceDate": "2023-01-01T00:00:00Z",
                        "credentialSubject": {
                          "id": "did:example:abcdefgh",
                          "alumniOf": "The School of Examples"
                        },
                        "proof": [
                          {
                            "type": "DataIntegrityProof",
                            "id": "urn:uuid:26329423-bec9-4b2e-88cb-a7c7d9dc4544",
                            "cryptosuite": "eddsa-rdfc-2022",
                            "created": "2023-02-26T22:06:38Z",
                            "verificationMethod": "did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7#z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7",
                            "proofPurpose": "assertionMethod",
                            "proofValue": "z5gL4Hy8N4B6zr9mQAGqpsry1iTdxEAp4zjqPNQv7iTvgdkMcHKnMALvPwU3YAKZhYn3k3Jmut2TAMxSaHaggFtf4"
                          },
                          {
                            "type": "DataIntegrityProof",
                            "cryptosuite": "eddsa-rdfc-2022",
                            "created": "2023-02-26T22:16:38Z",
                            "verificationMethod": "did:key:z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E#z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E",
                            "proofPurpose": "assertionMethod",
                            "previousProof": "urn:uuid:26329423-bec9-4b2e-88cb-a7c7d9dc4544",
                            "proofValue": "z2ENoYDUK8cMMJMvwRGyHVX23pPeHaZfCgpbDFs15FXGaeFseeqzZf5nWXF14JPoBcqdr39vVPgrAUbWT2VYYacrG"
                          }
                        ]
                      },
                      "options": {
                        "checks": [],
                        "credentialFormat": "JSON_LD_CLASSIC"
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://core.test.procivis-one.com/vc-api/credentials/verify",
                  "status": 400,
                  "data": {
                    "errors": [
                      {
                        "status": 400,
                        "title": "Failed to deserialize the JSON body into the target type",
                        "detail": null
                      }
                    ]
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Should verify VC with a string \"proof.previousProof\".: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:49:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/suites/verify.js:258:9)"
              }
            },
            {
              "type": "test",
              "title": "If an unordered list (proof), all referenced proofs in the array MUST verify.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=If%20an%20unordered%20list%2C%20all%20referenced%20proofs%20in%20the%20array%20MUST%20verify';\n        await verificationSuccess({\n          credential: credentials.clone('proofSet'),\n          verifier,\n          reason: 'Should verify VC with multiple proofs.'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "XlfRRByHzOzFyqDvhYKAc",
              "ctx": null,
              "_testId": "urn:uuid:aa9e9efb-135c-40c9-adc0-7c50aa5c0d15",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "If an unordered list (proof), all referenced proofs in the array MUST verify."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=If%20an%20unordered%20list%2C%20all%20referenced%20proofs%20in%20the%20array%20MUST%20verify",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 47393,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 101,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Should verify VC with multiple proofs.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",\"https://w3id.org/security/data-integrity/v2\"],\"id\":\"urn:uuid:86294362-4254-4f36-854f-3952fe42555d\",\"type\":[\"VerifiableCredential\"],\"issuer\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\",\"issuanceDate\":\"2020-03-16T22:37:26.544Z\",\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\"},\"proof\":[{\"type\":\"DataIntegrityProof\",\"created\":\"2024-10-13T05:06:31Z\",\"verificationMethod\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b#z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\",\"cryptosuite\":\"eddsa-rdfc-2022\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"zFZsqQshxdr7ULJqMuBZW8NGyYps8XZWptEdk7GiNyPQRru8mESKusBYepYD4u3nfa3dNcufyrwF7HVy2CGgdngn\"},{\"type\":\"DataIntegrityProof\",\"created\":\"2024-10-13T05:06:31Z\",\"verificationMethod\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b#z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\",\"cryptosuite\":\"eddsa-rdfc-2022\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"zFZsqQshxdr7ULJqMuBZW8NGyYps8XZWptEdk7GiNyPQRru8mESKusBYepYD4u3nfa3dNcufyrwF7HVy2CGgdngn\"}]},\"options\":{\"checks\":[],\"credentialFormat\":\"JSON_LD_CLASSIC\"}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          "https://w3id.org/security/data-integrity/v2"
                        ],
                        "id": "urn:uuid:86294362-4254-4f36-854f-3952fe42555d",
                        "type": [
                          "VerifiableCredential"
                        ],
                        "issuer": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b",
                        "issuanceDate": "2020-03-16T22:37:26.544Z",
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                        },
                        "proof": [
                          {
                            "type": "DataIntegrityProof",
                            "created": "2024-10-13T05:06:31Z",
                            "verificationMethod": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b#z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b",
                            "cryptosuite": "eddsa-rdfc-2022",
                            "proofPurpose": "assertionMethod",
                            "proofValue": "zFZsqQshxdr7ULJqMuBZW8NGyYps8XZWptEdk7GiNyPQRru8mESKusBYepYD4u3nfa3dNcufyrwF7HVy2CGgdngn"
                          },
                          {
                            "type": "DataIntegrityProof",
                            "created": "2024-10-13T05:06:31Z",
                            "verificationMethod": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b#z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b",
                            "cryptosuite": "eddsa-rdfc-2022",
                            "proofPurpose": "assertionMethod",
                            "proofValue": "zFZsqQshxdr7ULJqMuBZW8NGyYps8XZWptEdk7GiNyPQRru8mESKusBYepYD4u3nfa3dNcufyrwF7HVy2CGgdngn"
                          }
                        ]
                      },
                      "options": {
                        "checks": [],
                        "credentialFormat": "JSON_LD_CLASSIC"
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://core.test.procivis-one.com/vc-api/credentials/verify",
                  "status": 400,
                  "data": {
                    "errors": [
                      {
                        "status": 400,
                        "title": "Failed to deserialize the JSON body into the target type",
                        "detail": null
                      }
                    ]
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Should verify VC with multiple proofs.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:49:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/suites/verify.js:272:9)"
              }
            },
            {
              "type": "test",
              "title": "If a proof with id equal to previousProof does not exist in allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20a%20proof%20with%20id%20equal%20to%20previousProof%20does%20not%20exist%20in%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR';\n        await verificationFail({\n          credential: credentials.clone('missingPreviousProofString'),\n          verifier,\n          reason: 'Should not verify VC with invalid \"proof.previousProof\".'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "XlfRRByHzOzFyqDvhYKAc",
              "ctx": null,
              "_testId": "urn:uuid:ee694aa3-8a03-421f-a4fa-c6d12e02542a",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "If a proof with id equal to previousProof does not exist in allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20a%20proof%20with%20id%20equal%20to%20previousProof%20does%20not%20exist%20in%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 47494,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 100,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If any element of previousProof list has an id attribute that does not match the id attribute of any element of allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20any%20element%20of%20previousProof%20list%20has%20an%20id%20attribute%20that%20does%20not%20match%20the%20id%20attribute%20of%20any%20element%20of%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n        await verificationFail({\n          credential: credentials.clone('missingPreviousProofArray'),\n          verifier,\n          reason: 'Should not verify VC with invalid \"proof.previousProof\".'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "XlfRRByHzOzFyqDvhYKAc",
              "ctx": null,
              "_testId": "urn:uuid:0b52925c-b311-4888-a598-4c277dd870e3",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "If any element of previousProof list has an id attribute that does not match the id attribute of any element of allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20any%20element%20of%20previousProof%20list%20has%20an%20id%20attribute%20that%20does%20not%20match%20the%20id%20attribute%20of%20any%20element%20of%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 47595,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 100,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Each value identifies another data integrity proof, all of which MUST also verify for the current proof to be considered verified",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=Each%20value%20identifies%20another%20data%20integrity%20proof%2C%20all%20of%20which%20MUST%20also%20verify%20for%20the%20current%20proof%20to%20be%20considered%20verified';\n        await verificationFail({\n          credential: credentials.clone('previousProofFail'),\n          verifier,\n          reason: 'Should not verify VC with a \"previousProof\" that does ' +\n          'not verify.'\n        });\n\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "XlfRRByHzOzFyqDvhYKAc",
              "ctx": null,
              "_testId": "urn:uuid:93818e9f-1097-452f-a061-7f09c5c2512e",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "Each value identifies another data integrity proof, all of which MUST also verify for the current proof to be considered verified"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=Each%20value%20identifies%20another%20data%20integrity%20proof%2C%20all%20of%20which%20MUST%20also%20verify%20for%20the%20current%20proof%20to%20be%20considered%20verified",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 47695,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 100,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"Procivis One Core\"",
              "body": "function() {\n      this.currentTest.cell = {\n        columnId: testDescription,\n        rowId: this.currentTest.title\n      };\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "XlfRRByHzOzFyqDvhYKAc",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Procivis One Core\"",
              "body": "async function() {\n      proofValueTests = shouldBeProofValue({credentials, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "XlfRRByHzOzFyqDvhYKAc",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 44337,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "Ksgy9d4gisKl6DoQjj6Tn",
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
          "_testId": "urn:uuid:1e5dc0b4-57aa-4ded-95f3-0dc80a1dcfb9"
        },
        {
          "title": "SpruceID",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.';\n      const credential = credentials.clone('invalidBaseUrl');\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'Should not verify VC with invalid base URL'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "aiQ0OlclMX_yZkn2nkDg9",
              "ctx": null,
              "_testId": "urn:uuid:4652610c-66ab-443c-a5ba-d904620d60e1",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 47798,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 54,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "Conforming processors MUST produce errors when non-conforming documents are consumed.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.';\n      // this could be read as testing all non-confirming docs or just one\n      // for this test only one doc is tested as it should throw for any\n      // non-conforming doc\n      await verificationFail({\n        credential: credentials.clone('invalidProofType'),\n        verifier,\n        reason: 'Should not verify VC with invalid \"proof.type\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "aiQ0OlclMX_yZkn2nkDg9",
              "ctx": null,
              "_testId": "urn:uuid:d087c403-edca-4cc7-8c51-9569b115a9d6",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "Conforming processors MUST produce errors when non-conforming documents are consumed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 47852,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 32,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.';\n      const credential = credentials.clone('issuedVc');\n      credential.proof = null;\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'MUST not verify VC with proof that is not a map.'\n      });\n      await verificationFail({\n        // use a string as the non map representation of a VC\n        credential: JSON.stringify(credentials.clone('issuedVc')),\n        verifier,\n        reason: 'MUST not verify VC that is not a map.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "aiQ0OlclMX_yZkn2nkDg9",
              "ctx": null,
              "_testId": "urn:uuid:cf9deb40-c13b-4041-a9c4-62b2d683c147",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 47885,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 55,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof;\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'MUST not verify VC w/o a proof'\n      });\n      const noType = credentials.clone('issuedVc');\n      delete noType.proof.type;\n      await verificationFail({\n        credential: noType,\n        verifier,\n        reason: 'MUST not verify VC w/o a \"proof.type\".'\n      });\n      const noVm = credentials.clone('noVm');\n      await verificationFail({\n        credential: noVm,\n        verifier,\n        reason: 'MUST not verify VC w/o \"proof.verificationMethod\".\"'\n      });\n      const noProofPurpose = credentials.clone('noProofPurpose');\n      await verificationFail({\n        credential: noProofPurpose,\n        verifier,\n        reason: 'MUST not verify VC w/o \"proof.proofPurpose\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "aiQ0OlclMX_yZkn2nkDg9",
              "ctx": null,
              "_testId": "urn:uuid:f82d6c4c-5e9f-46b2-825c-be47849b7b69",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 47940,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 103,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('invalidProofType');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "aiQ0OlclMX_yZkn2nkDg9",
              "ctx": null,
              "_testId": "urn:uuid:c1dc8d6c-b3e5-4796-894c-ea0cbd2da30b",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 48042,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 22,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('invalidVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "aiQ0OlclMX_yZkn2nkDg9",
              "ctx": null,
              "_testId": "urn:uuid:7f32d5f3-b513-4433-ad59-cf087663d5dd",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 48065,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 26,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('invalidProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "aiQ0OlclMX_yZkn2nkDg9",
              "ctx": null,
              "_testId": "urn:uuid:394467b9-15a2-497a-a6f3-9e4c264ce080",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 48092,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 55,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      // NOTE: expectedProofPurpose should be specified by verifiers internally\n      // it is very unlikely to be invalidProofPurpose\n      await verificationFail({\n        credential: credentials.clone('invalidProofPurpose'),\n        verifier,\n        reason: 'Verifier should reject VC with invalid proof purpose.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "aiQ0OlclMX_yZkn2nkDg9",
              "ctx": null,
              "_testId": "urn:uuid:a39d4631-62e5-400a-97e6-86eecdd555b8",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 48147,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 28,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.';\n        await proofValueTests;\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "aiQ0OlclMX_yZkn2nkDg9",
              "ctx": null,
              "_testId": "urn:uuid:0b2a1bed-6ea8-439c-af66-df9f982dd7ac",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The proofValue property MUST be used, as specified in 2.1 Proofs."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 48175,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof';\n      await proofValueTests;\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "aiQ0OlclMX_yZkn2nkDg9",
              "ctx": null,
              "_testId": "urn:uuid:1c246fed-4843-4cc1-a1db-a80e335fc709",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 48175,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      await verificationFail({\n        credential: credentials.clone('undefinedTerm'),\n        verifier,\n        reason: 'Should fail to verify VC when data is dropped by JSON-LD'\n      });\n      const undefinedTerm = credentials.clone('issuedVc');\n      undefinedTerm.credentialSubject.undefinedTerm = 'IfDroppedWillVerify';\n      await verificationFail({\n        credential: undefinedTerm,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined term is added ' +\n          'after issuance.'\n      });\n      const undefinedType = credentials.clone('issuedVc');\n      undefinedType.type.push('UndefinedType');\n      await verificationFail({\n        credential: undefinedType,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined type is added ' +\n          'after issuance.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "aiQ0OlclMX_yZkn2nkDg9",
              "ctx": null,
              "_testId": "urn:uuid:d67a4a66-784f-43a4-ace5-6f97b37c24c1",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 48175,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 85,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n      const credential = credentials.clone('invalidCryptosuite');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "aiQ0OlclMX_yZkn2nkDg9",
              "ctx": null,
              "_testId": "urn:uuid:8d4cb3fb-bbf4-47d8-9239-97d58d47881d",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 48261,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 32,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "An OPTIONAL string value (proof.previousProof) or unordered list of string values. Each value identifies another data integrity proof that MUST verify before the current proof is processed.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=An%20OPTIONAL%20string%20value%20or%20unordered%20list%20of%20string%20values.%20Each%20value%20identifies%20another%20data%20integrity%20proof%20that%20MUST%20verify%20before%20the%20current%20proof%20is%20processed';\n        await verificationSuccess({\n          credential: credentials.clone('previousProofString'),\n          verifier,\n          reason: 'Should verify VC with a string \"proof.previousProof\".'\n        });\n        await verificationSuccess({\n          credential: credentials.clone('previousProofArray'),\n          verifier,\n          reason: 'Should verify VC with an Array \"proof.previousProof\".'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "aiQ0OlclMX_yZkn2nkDg9",
              "ctx": null,
              "_testId": "urn:uuid:f10f87f3-0126-4b5c-973e-b3d0c791682d",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "An OPTIONAL string value (proof.previousProof) or unordered list of string values. Each value identifies another data integrity proof that MUST verify before the current proof is processed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=An%20OPTIONAL%20string%20value%20or%20unordered%20list%20of%20string%20values.%20Each%20value%20identifies%20another%20data%20integrity%20proof%20that%20MUST%20verify%20before%20the%20current%20proof%20is%20processed",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 48292,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 24,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Should verify VC with a string \"proof.previousProof\".: expected HTTPError: Request failed with status cod… { …(5) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",\"https://w3id.org/security/data-integrity/v2\",{\"@context\":{\"AlumniCredential\":\"https://www.example.org/AlumniCredential\",\"alumniOf\":\"https://www.example.org/alumniOf\",\"description\":\"https://schema.org/description\",\"name\":\"https://schema.org/name\"}}],\"id\":\"urn:uuid:58172aac-d8ba-11ed-83dd-0b3aef56cc33\",\"type\":[\"VerifiableCredential\",\"AlumniCredential\"],\"name\":\"Alumni Credential\",\"description\":\"A minimum viable example of a VC 1.1 Alumni Credential.\",\"issuer\":\"did:key:z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E\",\"issuanceDate\":\"2023-01-01T00:00:00Z\",\"credentialSubject\":{\"id\":\"did:example:abcdefgh\",\"alumniOf\":\"The School of Examples\"},\"proof\":[{\"type\":\"DataIntegrityProof\",\"id\":\"urn:uuid:26329423-bec9-4b2e-88cb-a7c7d9dc4544\",\"cryptosuite\":\"eddsa-rdfc-2022\",\"created\":\"2023-02-26T22:06:38Z\",\"verificationMethod\":\"did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7#z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z5gL4Hy8N4B6zr9mQAGqpsry1iTdxEAp4zjqPNQv7iTvgdkMcHKnMALvPwU3YAKZhYn3k3Jmut2TAMxSaHaggFtf4\"},{\"type\":\"DataIntegrityProof\",\"cryptosuite\":\"eddsa-rdfc-2022\",\"created\":\"2023-02-26T22:16:38Z\",\"verificationMethod\":\"did:key:z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E#z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E\",\"proofPurpose\":\"assertionMethod\",\"previousProof\":\"urn:uuid:26329423-bec9-4b2e-88cb-a7c7d9dc4544\",\"proofValue\":\"z2ENoYDUK8cMMJMvwRGyHVX23pPeHaZfCgpbDFs15FXGaeFseeqzZf5nWXF14JPoBcqdr39vVPgrAUbWT2VYYacrG\"}]},\"options\":{}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          "https://w3id.org/security/data-integrity/v2",
                          {
                            "@context": {
                              "AlumniCredential": "https://www.example.org/AlumniCredential",
                              "alumniOf": "https://www.example.org/alumniOf",
                              "description": "https://schema.org/description",
                              "name": "https://schema.org/name"
                            }
                          }
                        ],
                        "id": "urn:uuid:58172aac-d8ba-11ed-83dd-0b3aef56cc33",
                        "type": [
                          "VerifiableCredential",
                          "AlumniCredential"
                        ],
                        "name": "Alumni Credential",
                        "description": "A minimum viable example of a VC 1.1 Alumni Credential.",
                        "issuer": "did:key:z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E",
                        "issuanceDate": "2023-01-01T00:00:00Z",
                        "credentialSubject": {
                          "id": "did:example:abcdefgh",
                          "alumniOf": "The School of Examples"
                        },
                        "proof": [
                          {
                            "type": "DataIntegrityProof",
                            "id": "urn:uuid:26329423-bec9-4b2e-88cb-a7c7d9dc4544",
                            "cryptosuite": "eddsa-rdfc-2022",
                            "created": "2023-02-26T22:06:38Z",
                            "verificationMethod": "did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7#z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7",
                            "proofPurpose": "assertionMethod",
                            "proofValue": "z5gL4Hy8N4B6zr9mQAGqpsry1iTdxEAp4zjqPNQv7iTvgdkMcHKnMALvPwU3YAKZhYn3k3Jmut2TAMxSaHaggFtf4"
                          },
                          {
                            "type": "DataIntegrityProof",
                            "cryptosuite": "eddsa-rdfc-2022",
                            "created": "2023-02-26T22:16:38Z",
                            "verificationMethod": "did:key:z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E#z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E",
                            "proofPurpose": "assertionMethod",
                            "previousProof": "urn:uuid:26329423-bec9-4b2e-88cb-a7c7d9dc4544",
                            "proofValue": "z2ENoYDUK8cMMJMvwRGyHVX23pPeHaZfCgpbDFs15FXGaeFseeqzZf5nWXF14JPoBcqdr39vVPgrAUbWT2VYYacrG"
                          }
                        ]
                      },
                      "options": {}
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc.spruceid.xyz/credentials/verify",
                  "status": 400
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Should verify VC with a string \"proof.previousProof\".: expected HTTPError: Request failed with status cod… { …(5) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:49:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/suites/verify.js:258:9)"
              }
            },
            {
              "type": "test",
              "title": "If an unordered list (proof), all referenced proofs in the array MUST verify.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=If%20an%20unordered%20list%2C%20all%20referenced%20proofs%20in%20the%20array%20MUST%20verify';\n        await verificationSuccess({\n          credential: credentials.clone('proofSet'),\n          verifier,\n          reason: 'Should verify VC with multiple proofs.'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "aiQ0OlclMX_yZkn2nkDg9",
              "ctx": null,
              "_testId": "urn:uuid:779cfb69-86a4-4685-b455-4a8cc74ec9bc",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If an unordered list (proof), all referenced proofs in the array MUST verify."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=If%20an%20unordered%20list%2C%20all%20referenced%20proofs%20in%20the%20array%20MUST%20verify",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 48319,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 23,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Should verify VC with multiple proofs.: expected HTTPError: Request failed with status cod… { …(5) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",\"https://w3id.org/security/data-integrity/v2\"],\"id\":\"urn:uuid:86294362-4254-4f36-854f-3952fe42555d\",\"type\":[\"VerifiableCredential\"],\"issuer\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\",\"issuanceDate\":\"2020-03-16T22:37:26.544Z\",\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\"},\"proof\":[{\"type\":\"DataIntegrityProof\",\"created\":\"2024-10-13T05:06:31Z\",\"verificationMethod\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b#z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\",\"cryptosuite\":\"eddsa-rdfc-2022\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"zFZsqQshxdr7ULJqMuBZW8NGyYps8XZWptEdk7GiNyPQRru8mESKusBYepYD4u3nfa3dNcufyrwF7HVy2CGgdngn\"},{\"type\":\"DataIntegrityProof\",\"created\":\"2024-10-13T05:06:31Z\",\"verificationMethod\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b#z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\",\"cryptosuite\":\"eddsa-rdfc-2022\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"zFZsqQshxdr7ULJqMuBZW8NGyYps8XZWptEdk7GiNyPQRru8mESKusBYepYD4u3nfa3dNcufyrwF7HVy2CGgdngn\"}]},\"options\":{}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          "https://w3id.org/security/data-integrity/v2"
                        ],
                        "id": "urn:uuid:86294362-4254-4f36-854f-3952fe42555d",
                        "type": [
                          "VerifiableCredential"
                        ],
                        "issuer": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b",
                        "issuanceDate": "2020-03-16T22:37:26.544Z",
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                        },
                        "proof": [
                          {
                            "type": "DataIntegrityProof",
                            "created": "2024-10-13T05:06:31Z",
                            "verificationMethod": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b#z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b",
                            "cryptosuite": "eddsa-rdfc-2022",
                            "proofPurpose": "assertionMethod",
                            "proofValue": "zFZsqQshxdr7ULJqMuBZW8NGyYps8XZWptEdk7GiNyPQRru8mESKusBYepYD4u3nfa3dNcufyrwF7HVy2CGgdngn"
                          },
                          {
                            "type": "DataIntegrityProof",
                            "created": "2024-10-13T05:06:31Z",
                            "verificationMethod": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b#z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b",
                            "cryptosuite": "eddsa-rdfc-2022",
                            "proofPurpose": "assertionMethod",
                            "proofValue": "zFZsqQshxdr7ULJqMuBZW8NGyYps8XZWptEdk7GiNyPQRru8mESKusBYepYD4u3nfa3dNcufyrwF7HVy2CGgdngn"
                          }
                        ]
                      },
                      "options": {}
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc.spruceid.xyz/credentials/verify",
                  "status": 400
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Should verify VC with multiple proofs.: expected HTTPError: Request failed with status cod… { …(5) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:49:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/suites/verify.js:272:9)"
              }
            },
            {
              "type": "test",
              "title": "If a proof with id equal to previousProof does not exist in allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20a%20proof%20with%20id%20equal%20to%20previousProof%20does%20not%20exist%20in%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR';\n        await verificationFail({\n          credential: credentials.clone('missingPreviousProofString'),\n          verifier,\n          reason: 'Should not verify VC with invalid \"proof.previousProof\".'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "aiQ0OlclMX_yZkn2nkDg9",
              "ctx": null,
              "_testId": "urn:uuid:61bec064-34e6-47ba-b50f-775b808139f2",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If a proof with id equal to previousProof does not exist in allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20a%20proof%20with%20id%20equal%20to%20previousProof%20does%20not%20exist%20in%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 48342,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 26,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If any element of previousProof list has an id attribute that does not match the id attribute of any element of allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20any%20element%20of%20previousProof%20list%20has%20an%20id%20attribute%20that%20does%20not%20match%20the%20id%20attribute%20of%20any%20element%20of%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n        await verificationFail({\n          credential: credentials.clone('missingPreviousProofArray'),\n          verifier,\n          reason: 'Should not verify VC with invalid \"proof.previousProof\".'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "aiQ0OlclMX_yZkn2nkDg9",
              "ctx": null,
              "_testId": "urn:uuid:8dc4a9c1-ffed-4dfe-8071-7f748e268dfc",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If any element of previousProof list has an id attribute that does not match the id attribute of any element of allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20any%20element%20of%20previousProof%20list%20has%20an%20id%20attribute%20that%20does%20not%20match%20the%20id%20attribute%20of%20any%20element%20of%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 48368,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 23,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Each value identifies another data integrity proof, all of which MUST also verify for the current proof to be considered verified",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=Each%20value%20identifies%20another%20data%20integrity%20proof%2C%20all%20of%20which%20MUST%20also%20verify%20for%20the%20current%20proof%20to%20be%20considered%20verified';\n        await verificationFail({\n          credential: credentials.clone('previousProofFail'),\n          verifier,\n          reason: 'Should not verify VC with a \"previousProof\" that does ' +\n          'not verify.'\n        });\n\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "aiQ0OlclMX_yZkn2nkDg9",
              "ctx": null,
              "_testId": "urn:uuid:71103ba4-2b40-493f-8262-c5e47b1bf8dc",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "Each value identifies another data integrity proof, all of which MUST also verify for the current proof to be considered verified"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=Each%20value%20identifies%20another%20data%20integrity%20proof%2C%20all%20of%20which%20MUST%20also%20verify%20for%20the%20current%20proof%20to%20be%20considered%20verified",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 48391,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 27,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"SpruceID\"",
              "body": "function() {\n      this.currentTest.cell = {\n        columnId: testDescription,\n        rowId: this.currentTest.title\n      };\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "aiQ0OlclMX_yZkn2nkDg9",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"SpruceID\"",
              "body": "async function() {\n      proofValueTests = shouldBeProofValue({credentials, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "aiQ0OlclMX_yZkn2nkDg9",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 47796,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "Ksgy9d4gisKl6DoQjj6Tn",
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
          "_testId": "urn:uuid:73777230-cd92-48ed-83d5-68c6d381c3ed"
        },
        {
          "title": "Trinsic",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.';\n      const credential = credentials.clone('invalidBaseUrl');\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'Should not verify VC with invalid base URL'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "14gHlb_DX7G_d1mHSoz7X",
              "ctx": null,
              "_testId": "urn:uuid:4f39d5ad-ec10-47c9-8d87-0d997dccc500",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 48420,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 2037,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Conforming processors MUST produce errors when non-conforming documents are consumed.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.';\n      // this could be read as testing all non-confirming docs or just one\n      // for this test only one doc is tested as it should throw for any\n      // non-conforming doc\n      await verificationFail({\n        credential: credentials.clone('invalidProofType'),\n        verifier,\n        reason: 'Should not verify VC with invalid \"proof.type\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "14gHlb_DX7G_d1mHSoz7X",
              "ctx": null,
              "_testId": "urn:uuid:33faf7ef-40d6-4bd6-9306-e87ddc4fea92",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "Conforming processors MUST produce errors when non-conforming documents are consumed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 50457,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 20,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.';\n      const credential = credentials.clone('issuedVc');\n      credential.proof = null;\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'MUST not verify VC with proof that is not a map.'\n      });\n      await verificationFail({\n        // use a string as the non map representation of a VC\n        credential: JSON.stringify(credentials.clone('issuedVc')),\n        verifier,\n        reason: 'MUST not verify VC that is not a map.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "14gHlb_DX7G_d1mHSoz7X",
              "ctx": null,
              "_testId": "urn:uuid:0d7e1b8f-3bfa-49f1-89c3-92184a6eb987",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 50478,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 44,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof;\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'MUST not verify VC w/o a proof'\n      });\n      const noType = credentials.clone('issuedVc');\n      delete noType.proof.type;\n      await verificationFail({\n        credential: noType,\n        verifier,\n        reason: 'MUST not verify VC w/o a \"proof.type\".'\n      });\n      const noVm = credentials.clone('noVm');\n      await verificationFail({\n        credential: noVm,\n        verifier,\n        reason: 'MUST not verify VC w/o \"proof.verificationMethod\".\"'\n      });\n      const noProofPurpose = credentials.clone('noProofPurpose');\n      await verificationFail({\n        credential: noProofPurpose,\n        verifier,\n        reason: 'MUST not verify VC w/o \"proof.proofPurpose\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "14gHlb_DX7G_d1mHSoz7X",
              "ctx": null,
              "_testId": "urn:uuid:426e2793-f843-420b-91c4-7730450a145a",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 50522,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 108,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('invalidProofType');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "14gHlb_DX7G_d1mHSoz7X",
              "ctx": null,
              "_testId": "urn:uuid:f2868762-530e-40b3-9bf9-fd9816dccc38",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 50630,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 19,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('invalidVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "14gHlb_DX7G_d1mHSoz7X",
              "ctx": null,
              "_testId": "urn:uuid:7571ad59-f2fe-47bf-bf72-6277c846d1fd",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 50650,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 17,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('invalidProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "14gHlb_DX7G_d1mHSoz7X",
              "ctx": null,
              "_testId": "urn:uuid:47cffccc-cd5d-432a-bf48-8be2cd30684d",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 50668,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 19,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      // NOTE: expectedProofPurpose should be specified by verifiers internally\n      // it is very unlikely to be invalidProofPurpose\n      await verificationFail({\n        credential: credentials.clone('invalidProofPurpose'),\n        verifier,\n        reason: 'Verifier should reject VC with invalid proof purpose.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "14gHlb_DX7G_d1mHSoz7X",
              "ctx": null,
              "_testId": "urn:uuid:3ada0ea1-58c9-4823-b053-132e3d381811",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 50687,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 18,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.';\n        await proofValueTests;\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "14gHlb_DX7G_d1mHSoz7X",
              "ctx": null,
              "_testId": "urn:uuid:8548b486-56b1-4083-8967-4c35499515ad",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "The proofValue property MUST be used, as specified in 2.1 Proofs."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 50705,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof';\n      await proofValueTests;\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "14gHlb_DX7G_d1mHSoz7X",
              "ctx": null,
              "_testId": "urn:uuid:e76bddfe-e50d-4d17-a55d-1fad2bfcd50d",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 50705,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      await verificationFail({\n        credential: credentials.clone('undefinedTerm'),\n        verifier,\n        reason: 'Should fail to verify VC when data is dropped by JSON-LD'\n      });\n      const undefinedTerm = credentials.clone('issuedVc');\n      undefinedTerm.credentialSubject.undefinedTerm = 'IfDroppedWillVerify';\n      await verificationFail({\n        credential: undefinedTerm,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined term is added ' +\n          'after issuance.'\n      });\n      const undefinedType = credentials.clone('issuedVc');\n      undefinedType.type.push('UndefinedType');\n      await verificationFail({\n        credential: undefinedType,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined type is added ' +\n          'after issuance.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "14gHlb_DX7G_d1mHSoz7X",
              "ctx": null,
              "_testId": "urn:uuid:afb94d25-5804-4bd0-94c8-080cf8e32550",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 50705,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 66,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n      const credential = credentials.clone('invalidCryptosuite');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "14gHlb_DX7G_d1mHSoz7X",
              "ctx": null,
              "_testId": "urn:uuid:8464699b-e4e0-4487-856c-d2d364097898",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 50772,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 20,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "An OPTIONAL string value (proof.previousProof) or unordered list of string values. Each value identifies another data integrity proof that MUST verify before the current proof is processed.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=An%20OPTIONAL%20string%20value%20or%20unordered%20list%20of%20string%20values.%20Each%20value%20identifies%20another%20data%20integrity%20proof%20that%20MUST%20verify%20before%20the%20current%20proof%20is%20processed';\n        await verificationSuccess({\n          credential: credentials.clone('previousProofString'),\n          verifier,\n          reason: 'Should verify VC with a string \"proof.previousProof\".'\n        });\n        await verificationSuccess({\n          credential: credentials.clone('previousProofArray'),\n          verifier,\n          reason: 'Should verify VC with an Array \"proof.previousProof\".'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "14gHlb_DX7G_d1mHSoz7X",
              "ctx": null,
              "_testId": "urn:uuid:2f535a2a-2948-41e4-8810-6ffea119976a",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "An OPTIONAL string value (proof.previousProof) or unordered list of string values. Each value identifies another data integrity proof that MUST verify before the current proof is processed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=An%20OPTIONAL%20string%20value%20or%20unordered%20list%20of%20string%20values.%20Each%20value%20identifies%20another%20data%20integrity%20proof%20that%20MUST%20verify%20before%20the%20current%20proof%20is%20processed",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 50792,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 20,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Should verify VC with a string \"proof.previousProof\".: expected HTTPError: Request failed with status cod… { …(5) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",\"https://w3id.org/security/data-integrity/v2\",{\"@context\":{\"AlumniCredential\":\"https://www.example.org/AlumniCredential\",\"alumniOf\":\"https://www.example.org/alumniOf\",\"description\":\"https://schema.org/description\",\"name\":\"https://schema.org/name\"}}],\"id\":\"urn:uuid:58172aac-d8ba-11ed-83dd-0b3aef56cc33\",\"type\":[\"VerifiableCredential\",\"AlumniCredential\"],\"name\":\"Alumni Credential\",\"description\":\"A minimum viable example of a VC 1.1 Alumni Credential.\",\"issuer\":\"did:key:z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E\",\"issuanceDate\":\"2023-01-01T00:00:00Z\",\"credentialSubject\":{\"id\":\"did:example:abcdefgh\",\"alumniOf\":\"The School of Examples\"},\"proof\":[{\"type\":\"DataIntegrityProof\",\"id\":\"urn:uuid:26329423-bec9-4b2e-88cb-a7c7d9dc4544\",\"cryptosuite\":\"eddsa-rdfc-2022\",\"created\":\"2023-02-26T22:06:38Z\",\"verificationMethod\":\"did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7#z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z5gL4Hy8N4B6zr9mQAGqpsry1iTdxEAp4zjqPNQv7iTvgdkMcHKnMALvPwU3YAKZhYn3k3Jmut2TAMxSaHaggFtf4\"},{\"type\":\"DataIntegrityProof\",\"cryptosuite\":\"eddsa-rdfc-2022\",\"created\":\"2023-02-26T22:16:38Z\",\"verificationMethod\":\"did:key:z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E#z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E\",\"proofPurpose\":\"assertionMethod\",\"previousProof\":\"urn:uuid:26329423-bec9-4b2e-88cb-a7c7d9dc4544\",\"proofValue\":\"z2ENoYDUK8cMMJMvwRGyHVX23pPeHaZfCgpbDFs15FXGaeFseeqzZf5nWXF14JPoBcqdr39vVPgrAUbWT2VYYacrG\"}]},\"options\":{}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          "https://w3id.org/security/data-integrity/v2",
                          {
                            "@context": {
                              "AlumniCredential": "https://www.example.org/AlumniCredential",
                              "alumniOf": "https://www.example.org/alumniOf",
                              "description": "https://schema.org/description",
                              "name": "https://schema.org/name"
                            }
                          }
                        ],
                        "id": "urn:uuid:58172aac-d8ba-11ed-83dd-0b3aef56cc33",
                        "type": [
                          "VerifiableCredential",
                          "AlumniCredential"
                        ],
                        "name": "Alumni Credential",
                        "description": "A minimum viable example of a VC 1.1 Alumni Credential.",
                        "issuer": "did:key:z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E",
                        "issuanceDate": "2023-01-01T00:00:00Z",
                        "credentialSubject": {
                          "id": "did:example:abcdefgh",
                          "alumniOf": "The School of Examples"
                        },
                        "proof": [
                          {
                            "type": "DataIntegrityProof",
                            "id": "urn:uuid:26329423-bec9-4b2e-88cb-a7c7d9dc4544",
                            "cryptosuite": "eddsa-rdfc-2022",
                            "created": "2023-02-26T22:06:38Z",
                            "verificationMethod": "did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7#z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7",
                            "proofPurpose": "assertionMethod",
                            "proofValue": "z5gL4Hy8N4B6zr9mQAGqpsry1iTdxEAp4zjqPNQv7iTvgdkMcHKnMALvPwU3YAKZhYn3k3Jmut2TAMxSaHaggFtf4"
                          },
                          {
                            "type": "DataIntegrityProof",
                            "cryptosuite": "eddsa-rdfc-2022",
                            "created": "2023-02-26T22:16:38Z",
                            "verificationMethod": "did:key:z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E#z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E",
                            "proofPurpose": "assertionMethod",
                            "previousProof": "urn:uuid:26329423-bec9-4b2e-88cb-a7c7d9dc4544",
                            "proofValue": "z2ENoYDUK8cMMJMvwRGyHVX23pPeHaZfCgpbDFs15FXGaeFseeqzZf5nWXF14JPoBcqdr39vVPgrAUbWT2VYYacrG"
                          }
                        ]
                      },
                      "options": {}
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://interop.connect.trinsic.cloud/vc-api/credentials/verify",
                  "status": 400
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Should verify VC with a string \"proof.previousProof\".: expected HTTPError: Request failed with status cod… { …(5) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:49:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/suites/verify.js:258:9)"
              }
            },
            {
              "type": "test",
              "title": "If an unordered list (proof), all referenced proofs in the array MUST verify.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=If%20an%20unordered%20list%2C%20all%20referenced%20proofs%20in%20the%20array%20MUST%20verify';\n        await verificationSuccess({\n          credential: credentials.clone('proofSet'),\n          verifier,\n          reason: 'Should verify VC with multiple proofs.'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "14gHlb_DX7G_d1mHSoz7X",
              "ctx": null,
              "_testId": "urn:uuid:a96f4399-3823-49e2-91f2-39479b0f7923",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "If an unordered list (proof), all referenced proofs in the array MUST verify."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=If%20an%20unordered%20list%2C%20all%20referenced%20proofs%20in%20the%20array%20MUST%20verify",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 50813,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 22,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Should verify VC with multiple proofs.: expected HTTPError: Request failed with status cod… { …(5) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",\"https://w3id.org/security/data-integrity/v2\"],\"id\":\"urn:uuid:86294362-4254-4f36-854f-3952fe42555d\",\"type\":[\"VerifiableCredential\"],\"issuer\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\",\"issuanceDate\":\"2020-03-16T22:37:26.544Z\",\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\"},\"proof\":[{\"type\":\"DataIntegrityProof\",\"created\":\"2024-10-13T05:06:31Z\",\"verificationMethod\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b#z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\",\"cryptosuite\":\"eddsa-rdfc-2022\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"zFZsqQshxdr7ULJqMuBZW8NGyYps8XZWptEdk7GiNyPQRru8mESKusBYepYD4u3nfa3dNcufyrwF7HVy2CGgdngn\"},{\"type\":\"DataIntegrityProof\",\"created\":\"2024-10-13T05:06:31Z\",\"verificationMethod\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b#z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\",\"cryptosuite\":\"eddsa-rdfc-2022\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"zFZsqQshxdr7ULJqMuBZW8NGyYps8XZWptEdk7GiNyPQRru8mESKusBYepYD4u3nfa3dNcufyrwF7HVy2CGgdngn\"}]},\"options\":{}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          "https://w3id.org/security/data-integrity/v2"
                        ],
                        "id": "urn:uuid:86294362-4254-4f36-854f-3952fe42555d",
                        "type": [
                          "VerifiableCredential"
                        ],
                        "issuer": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b",
                        "issuanceDate": "2020-03-16T22:37:26.544Z",
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                        },
                        "proof": [
                          {
                            "type": "DataIntegrityProof",
                            "created": "2024-10-13T05:06:31Z",
                            "verificationMethod": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b#z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b",
                            "cryptosuite": "eddsa-rdfc-2022",
                            "proofPurpose": "assertionMethod",
                            "proofValue": "zFZsqQshxdr7ULJqMuBZW8NGyYps8XZWptEdk7GiNyPQRru8mESKusBYepYD4u3nfa3dNcufyrwF7HVy2CGgdngn"
                          },
                          {
                            "type": "DataIntegrityProof",
                            "created": "2024-10-13T05:06:31Z",
                            "verificationMethod": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b#z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b",
                            "cryptosuite": "eddsa-rdfc-2022",
                            "proofPurpose": "assertionMethod",
                            "proofValue": "zFZsqQshxdr7ULJqMuBZW8NGyYps8XZWptEdk7GiNyPQRru8mESKusBYepYD4u3nfa3dNcufyrwF7HVy2CGgdngn"
                          }
                        ]
                      },
                      "options": {}
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://interop.connect.trinsic.cloud/vc-api/credentials/verify",
                  "status": 400
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Should verify VC with multiple proofs.: expected HTTPError: Request failed with status cod… { …(5) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:49:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/suites/verify.js:272:9)"
              }
            },
            {
              "type": "test",
              "title": "If a proof with id equal to previousProof does not exist in allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20a%20proof%20with%20id%20equal%20to%20previousProof%20does%20not%20exist%20in%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR';\n        await verificationFail({\n          credential: credentials.clone('missingPreviousProofString'),\n          verifier,\n          reason: 'Should not verify VC with invalid \"proof.previousProof\".'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "14gHlb_DX7G_d1mHSoz7X",
              "ctx": null,
              "_testId": "urn:uuid:fcdb7ba1-2ba0-48f9-86b0-6c861312e6fe",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "If a proof with id equal to previousProof does not exist in allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20a%20proof%20with%20id%20equal%20to%20previousProof%20does%20not%20exist%20in%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 50835,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 18,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If any element of previousProof list has an id attribute that does not match the id attribute of any element of allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20any%20element%20of%20previousProof%20list%20has%20an%20id%20attribute%20that%20does%20not%20match%20the%20id%20attribute%20of%20any%20element%20of%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n        await verificationFail({\n          credential: credentials.clone('missingPreviousProofArray'),\n          verifier,\n          reason: 'Should not verify VC with invalid \"proof.previousProof\".'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "14gHlb_DX7G_d1mHSoz7X",
              "ctx": null,
              "_testId": "urn:uuid:0b5da63e-c70c-4c46-b925-170983d6a4fe",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "If any element of previousProof list has an id attribute that does not match the id attribute of any element of allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20any%20element%20of%20previousProof%20list%20has%20an%20id%20attribute%20that%20does%20not%20match%20the%20id%20attribute%20of%20any%20element%20of%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 50853,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 19,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Each value identifies another data integrity proof, all of which MUST also verify for the current proof to be considered verified",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=Each%20value%20identifies%20another%20data%20integrity%20proof%2C%20all%20of%20which%20MUST%20also%20verify%20for%20the%20current%20proof%20to%20be%20considered%20verified';\n        await verificationFail({\n          credential: credentials.clone('previousProofFail'),\n          verifier,\n          reason: 'Should not verify VC with a \"previousProof\" that does ' +\n          'not verify.'\n        });\n\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "14gHlb_DX7G_d1mHSoz7X",
              "ctx": null,
              "_testId": "urn:uuid:a56b77f1-9f6e-4281-a828-cf5ba9d882e7",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "Each value identifies another data integrity proof, all of which MUST also verify for the current proof to be considered verified"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=Each%20value%20identifies%20another%20data%20integrity%20proof%2C%20all%20of%20which%20MUST%20also%20verify%20for%20the%20current%20proof%20to%20be%20considered%20verified",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 50871,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 18,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"Trinsic\"",
              "body": "function() {\n      this.currentTest.cell = {\n        columnId: testDescription,\n        rowId: this.currentTest.title\n      };\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "14gHlb_DX7G_d1mHSoz7X",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Trinsic\"",
              "body": "async function() {\n      proofValueTests = shouldBeProofValue({credentials, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "14gHlb_DX7G_d1mHSoz7X",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 48419,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "Ksgy9d4gisKl6DoQjj6Tn",
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
          "_testId": "urn:uuid:2b9c985e-5f5a-4eb4-8e8b-1c6f87e2a9d0"
        },
        {
          "title": "bovine",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.';\n      const credential = credentials.clone('invalidBaseUrl');\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'Should not verify VC with invalid base URL'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "jrALiK8SX9HgWL-sFlTtO",
              "ctx": null,
              "_testId": "urn:uuid:14735702-7f04-452f-bae5-7d49a3823e97",
              "cell": {
                "columnId": "bovine",
                "rowId": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 50891,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 391,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Conforming processors MUST produce errors when non-conforming documents are consumed.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.';\n      // this could be read as testing all non-confirming docs or just one\n      // for this test only one doc is tested as it should throw for any\n      // non-conforming doc\n      await verificationFail({\n        credential: credentials.clone('invalidProofType'),\n        verifier,\n        reason: 'Should not verify VC with invalid \"proof.type\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "jrALiK8SX9HgWL-sFlTtO",
              "ctx": null,
              "_testId": "urn:uuid:c0534d3f-1cd3-493e-aefa-3f395ff53383",
              "cell": {
                "columnId": "bovine",
                "rowId": "Conforming processors MUST produce errors when non-conforming documents are consumed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 51282,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 98,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.';\n      const credential = credentials.clone('issuedVc');\n      credential.proof = null;\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'MUST not verify VC with proof that is not a map.'\n      });\n      await verificationFail({\n        // use a string as the non map representation of a VC\n        credential: JSON.stringify(credentials.clone('issuedVc')),\n        verifier,\n        reason: 'MUST not verify VC that is not a map.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "jrALiK8SX9HgWL-sFlTtO",
              "ctx": null,
              "_testId": "urn:uuid:090d422f-28f7-4634-90db-1c3960273a06",
              "cell": {
                "columnId": "bovine",
                "rowId": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 51380,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 192,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof;\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'MUST not verify VC w/o a proof'\n      });\n      const noType = credentials.clone('issuedVc');\n      delete noType.proof.type;\n      await verificationFail({\n        credential: noType,\n        verifier,\n        reason: 'MUST not verify VC w/o a \"proof.type\".'\n      });\n      const noVm = credentials.clone('noVm');\n      await verificationFail({\n        credential: noVm,\n        verifier,\n        reason: 'MUST not verify VC w/o \"proof.verificationMethod\".\"'\n      });\n      const noProofPurpose = credentials.clone('noProofPurpose');\n      await verificationFail({\n        credential: noProofPurpose,\n        verifier,\n        reason: 'MUST not verify VC w/o \"proof.proofPurpose\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "jrALiK8SX9HgWL-sFlTtO",
              "ctx": null,
              "_testId": "urn:uuid:43d6a16a-0659-441f-8f48-9066c4d52668",
              "cell": {
                "columnId": "bovine",
                "rowId": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 51572,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 382,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('invalidProofType');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "jrALiK8SX9HgWL-sFlTtO",
              "ctx": null,
              "_testId": "urn:uuid:b6bb2cea-a686-4297-9eec-338978c2b5b3",
              "cell": {
                "columnId": "bovine",
                "rowId": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 51953,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 99,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('invalidVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "jrALiK8SX9HgWL-sFlTtO",
              "ctx": null,
              "_testId": "urn:uuid:a12d3c36-baa2-49bf-921a-c2ce5091c6fe",
              "cell": {
                "columnId": "bovine",
                "rowId": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 52053,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 96,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('invalidProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "jrALiK8SX9HgWL-sFlTtO",
              "ctx": null,
              "_testId": "urn:uuid:67d41938-059f-4bb1-99eb-a0be1e8ef6a7",
              "cell": {
                "columnId": "bovine",
                "rowId": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 52149,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 99,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      // NOTE: expectedProofPurpose should be specified by verifiers internally\n      // it is very unlikely to be invalidProofPurpose\n      await verificationFail({\n        credential: credentials.clone('invalidProofPurpose'),\n        verifier,\n        reason: 'Verifier should reject VC with invalid proof purpose.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "jrALiK8SX9HgWL-sFlTtO",
              "ctx": null,
              "_testId": "urn:uuid:c947d03a-ea88-479e-8f09-c3767984fbfe",
              "cell": {
                "columnId": "bovine",
                "rowId": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 52249,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 101,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.';\n        await proofValueTests;\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "jrALiK8SX9HgWL-sFlTtO",
              "ctx": null,
              "_testId": "urn:uuid:c5172fdc-b9de-4146-af02-91ff934a3334",
              "cell": {
                "columnId": "bovine",
                "rowId": "The proofValue property MUST be used, as specified in 2.1 Proofs."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 52350,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof';\n      await proofValueTests;\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "jrALiK8SX9HgWL-sFlTtO",
              "ctx": null,
              "_testId": "urn:uuid:c7c5c8bc-d886-4f92-8526-12efb17f6599",
              "cell": {
                "columnId": "bovine",
                "rowId": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 52350,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      await verificationFail({\n        credential: credentials.clone('undefinedTerm'),\n        verifier,\n        reason: 'Should fail to verify VC when data is dropped by JSON-LD'\n      });\n      const undefinedTerm = credentials.clone('issuedVc');\n      undefinedTerm.credentialSubject.undefinedTerm = 'IfDroppedWillVerify';\n      await verificationFail({\n        credential: undefinedTerm,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined term is added ' +\n          'after issuance.'\n      });\n      const undefinedType = credentials.clone('issuedVc');\n      undefinedType.type.push('UndefinedType');\n      await verificationFail({\n        credential: undefinedType,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined type is added ' +\n          'after issuance.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "jrALiK8SX9HgWL-sFlTtO",
              "ctx": null,
              "_testId": "urn:uuid:fd459737-4d1f-419c-8b0a-06bcbc4153c0",
              "cell": {
                "columnId": "bovine",
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 52350,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 197,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Should fail to verify VC if an undefined term is added after issuance.: expected Response { status: 200, statusText: 'OK', headers: Headers { server: 'nginx/1.18.0 (Ubuntu)', date: 'Sun, 13 Oct 2024 05:07:15 GMT', 'content-type': 'text/html; charset=utf-8', 'content-length': '0', connection: 'keep-alive', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: null, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Should fail to verify VC if an undefined term is added after issuance.: expected Response { status: 200, statusText: 'OK', headers: Headers { server: 'nginx/1.18.0 (Ubuntu)', date: 'Sun, 13 Oct 2024 05:07:15 GMT', 'content-type': 'text/html; charset=utf-8', 'content-length': '0', connection: 'keep-alive', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: null, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationFail (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:82:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/suites/verify.js:159:7)"
              }
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n      const credential = credentials.clone('invalidCryptosuite');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "jrALiK8SX9HgWL-sFlTtO",
              "ctx": null,
              "_testId": "urn:uuid:8015d992-5054-4fce-b3f1-52d93250ee72",
              "cell": {
                "columnId": "bovine",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 52548,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 96,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "An OPTIONAL string value (proof.previousProof) or unordered list of string values. Each value identifies another data integrity proof that MUST verify before the current proof is processed.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=An%20OPTIONAL%20string%20value%20or%20unordered%20list%20of%20string%20values.%20Each%20value%20identifies%20another%20data%20integrity%20proof%20that%20MUST%20verify%20before%20the%20current%20proof%20is%20processed';\n        await verificationSuccess({\n          credential: credentials.clone('previousProofString'),\n          verifier,\n          reason: 'Should verify VC with a string \"proof.previousProof\".'\n        });\n        await verificationSuccess({\n          credential: credentials.clone('previousProofArray'),\n          verifier,\n          reason: 'Should verify VC with an Array \"proof.previousProof\".'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "jrALiK8SX9HgWL-sFlTtO",
              "ctx": null,
              "_testId": "urn:uuid:e271ac81-98de-46ef-bf3b-f303249b4c8f",
              "cell": {
                "columnId": "bovine",
                "rowId": "An OPTIONAL string value (proof.previousProof) or unordered list of string values. Each value identifies another data integrity proof that MUST verify before the current proof is processed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=An%20OPTIONAL%20string%20value%20or%20unordered%20list%20of%20string%20values.%20Each%20value%20identifies%20another%20data%20integrity%20proof%20that%20MUST%20verify%20before%20the%20current%20proof%20is%20processed",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 52644,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 97,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Should verify VC with a string \"proof.previousProof\".: expected HTTPError: Request failed with status cod… { …(5) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",\"https://w3id.org/security/data-integrity/v2\",{\"@context\":{\"AlumniCredential\":\"https://www.example.org/AlumniCredential\",\"alumniOf\":\"https://www.example.org/alumniOf\",\"description\":\"https://schema.org/description\",\"name\":\"https://schema.org/name\"}}],\"id\":\"urn:uuid:58172aac-d8ba-11ed-83dd-0b3aef56cc33\",\"type\":[\"VerifiableCredential\",\"AlumniCredential\"],\"name\":\"Alumni Credential\",\"description\":\"A minimum viable example of a VC 1.1 Alumni Credential.\",\"issuer\":\"did:key:z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E\",\"issuanceDate\":\"2023-01-01T00:00:00Z\",\"credentialSubject\":{\"id\":\"did:example:abcdefgh\",\"alumniOf\":\"The School of Examples\"},\"proof\":[{\"type\":\"DataIntegrityProof\",\"id\":\"urn:uuid:26329423-bec9-4b2e-88cb-a7c7d9dc4544\",\"cryptosuite\":\"eddsa-rdfc-2022\",\"created\":\"2023-02-26T22:06:38Z\",\"verificationMethod\":\"did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7#z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z5gL4Hy8N4B6zr9mQAGqpsry1iTdxEAp4zjqPNQv7iTvgdkMcHKnMALvPwU3YAKZhYn3k3Jmut2TAMxSaHaggFtf4\"},{\"type\":\"DataIntegrityProof\",\"cryptosuite\":\"eddsa-rdfc-2022\",\"created\":\"2023-02-26T22:16:38Z\",\"verificationMethod\":\"did:key:z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E#z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E\",\"proofPurpose\":\"assertionMethod\",\"previousProof\":\"urn:uuid:26329423-bec9-4b2e-88cb-a7c7d9dc4544\",\"proofValue\":\"z2ENoYDUK8cMMJMvwRGyHVX23pPeHaZfCgpbDFs15FXGaeFseeqzZf5nWXF14JPoBcqdr39vVPgrAUbWT2VYYacrG\"}]},\"options\":{}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          "https://w3id.org/security/data-integrity/v2",
                          {
                            "@context": {
                              "AlumniCredential": "https://www.example.org/AlumniCredential",
                              "alumniOf": "https://www.example.org/alumniOf",
                              "description": "https://schema.org/description",
                              "name": "https://schema.org/name"
                            }
                          }
                        ],
                        "id": "urn:uuid:58172aac-d8ba-11ed-83dd-0b3aef56cc33",
                        "type": [
                          "VerifiableCredential",
                          "AlumniCredential"
                        ],
                        "name": "Alumni Credential",
                        "description": "A minimum viable example of a VC 1.1 Alumni Credential.",
                        "issuer": "did:key:z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E",
                        "issuanceDate": "2023-01-01T00:00:00Z",
                        "credentialSubject": {
                          "id": "did:example:abcdefgh",
                          "alumniOf": "The School of Examples"
                        },
                        "proof": [
                          {
                            "type": "DataIntegrityProof",
                            "id": "urn:uuid:26329423-bec9-4b2e-88cb-a7c7d9dc4544",
                            "cryptosuite": "eddsa-rdfc-2022",
                            "created": "2023-02-26T22:06:38Z",
                            "verificationMethod": "did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7#z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7",
                            "proofPurpose": "assertionMethod",
                            "proofValue": "z5gL4Hy8N4B6zr9mQAGqpsry1iTdxEAp4zjqPNQv7iTvgdkMcHKnMALvPwU3YAKZhYn3k3Jmut2TAMxSaHaggFtf4"
                          },
                          {
                            "type": "DataIntegrityProof",
                            "cryptosuite": "eddsa-rdfc-2022",
                            "created": "2023-02-26T22:16:38Z",
                            "verificationMethod": "did:key:z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E#z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E",
                            "proofPurpose": "assertionMethod",
                            "previousProof": "urn:uuid:26329423-bec9-4b2e-88cb-a7c7d9dc4544",
                            "proofValue": "z2ENoYDUK8cMMJMvwRGyHVX23pPeHaZfCgpbDFs15FXGaeFseeqzZf5nWXF14JPoBcqdr39vVPgrAUbWT2VYYacrG"
                          }
                        ]
                      },
                      "options": {}
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://bovine.social/w3c-di/verify",
                  "status": 400
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Should verify VC with a string \"proof.previousProof\".: expected HTTPError: Request failed with status cod… { …(5) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:49:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/suites/verify.js:258:9)"
              }
            },
            {
              "type": "test",
              "title": "If an unordered list (proof), all referenced proofs in the array MUST verify.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=If%20an%20unordered%20list%2C%20all%20referenced%20proofs%20in%20the%20array%20MUST%20verify';\n        await verificationSuccess({\n          credential: credentials.clone('proofSet'),\n          verifier,\n          reason: 'Should verify VC with multiple proofs.'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "jrALiK8SX9HgWL-sFlTtO",
              "ctx": null,
              "_testId": "urn:uuid:9262cde6-98a8-41a0-addc-79b7bd8869bf",
              "cell": {
                "columnId": "bovine",
                "rowId": "If an unordered list (proof), all referenced proofs in the array MUST verify."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=If%20an%20unordered%20list%2C%20all%20referenced%20proofs%20in%20the%20array%20MUST%20verify",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 52742,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 97,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Should verify VC with multiple proofs.: expected HTTPError: Request failed with status cod… { …(5) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",\"https://w3id.org/security/data-integrity/v2\"],\"id\":\"urn:uuid:86294362-4254-4f36-854f-3952fe42555d\",\"type\":[\"VerifiableCredential\"],\"issuer\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\",\"issuanceDate\":\"2020-03-16T22:37:26.544Z\",\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\"},\"proof\":[{\"type\":\"DataIntegrityProof\",\"created\":\"2024-10-13T05:06:31Z\",\"verificationMethod\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b#z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\",\"cryptosuite\":\"eddsa-rdfc-2022\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"zFZsqQshxdr7ULJqMuBZW8NGyYps8XZWptEdk7GiNyPQRru8mESKusBYepYD4u3nfa3dNcufyrwF7HVy2CGgdngn\"},{\"type\":\"DataIntegrityProof\",\"created\":\"2024-10-13T05:06:31Z\",\"verificationMethod\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b#z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\",\"cryptosuite\":\"eddsa-rdfc-2022\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"zFZsqQshxdr7ULJqMuBZW8NGyYps8XZWptEdk7GiNyPQRru8mESKusBYepYD4u3nfa3dNcufyrwF7HVy2CGgdngn\"}]},\"options\":{}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          "https://w3id.org/security/data-integrity/v2"
                        ],
                        "id": "urn:uuid:86294362-4254-4f36-854f-3952fe42555d",
                        "type": [
                          "VerifiableCredential"
                        ],
                        "issuer": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b",
                        "issuanceDate": "2020-03-16T22:37:26.544Z",
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                        },
                        "proof": [
                          {
                            "type": "DataIntegrityProof",
                            "created": "2024-10-13T05:06:31Z",
                            "verificationMethod": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b#z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b",
                            "cryptosuite": "eddsa-rdfc-2022",
                            "proofPurpose": "assertionMethod",
                            "proofValue": "zFZsqQshxdr7ULJqMuBZW8NGyYps8XZWptEdk7GiNyPQRru8mESKusBYepYD4u3nfa3dNcufyrwF7HVy2CGgdngn"
                          },
                          {
                            "type": "DataIntegrityProof",
                            "created": "2024-10-13T05:06:31Z",
                            "verificationMethod": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b#z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b",
                            "cryptosuite": "eddsa-rdfc-2022",
                            "proofPurpose": "assertionMethod",
                            "proofValue": "zFZsqQshxdr7ULJqMuBZW8NGyYps8XZWptEdk7GiNyPQRru8mESKusBYepYD4u3nfa3dNcufyrwF7HVy2CGgdngn"
                          }
                        ]
                      },
                      "options": {}
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://bovine.social/w3c-di/verify",
                  "status": 400
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Should verify VC with multiple proofs.: expected HTTPError: Request failed with status cod… { …(5) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:49:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/suites/verify.js:272:9)"
              }
            },
            {
              "type": "test",
              "title": "If a proof with id equal to previousProof does not exist in allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20a%20proof%20with%20id%20equal%20to%20previousProof%20does%20not%20exist%20in%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR';\n        await verificationFail({\n          credential: credentials.clone('missingPreviousProofString'),\n          verifier,\n          reason: 'Should not verify VC with invalid \"proof.previousProof\".'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "jrALiK8SX9HgWL-sFlTtO",
              "ctx": null,
              "_testId": "urn:uuid:5ef642bf-9bb3-4c3f-9725-22d2bb4b489d",
              "cell": {
                "columnId": "bovine",
                "rowId": "If a proof with id equal to previousProof does not exist in allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20a%20proof%20with%20id%20equal%20to%20previousProof%20does%20not%20exist%20in%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 52839,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 96,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If any element of previousProof list has an id attribute that does not match the id attribute of any element of allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20any%20element%20of%20previousProof%20list%20has%20an%20id%20attribute%20that%20does%20not%20match%20the%20id%20attribute%20of%20any%20element%20of%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n        await verificationFail({\n          credential: credentials.clone('missingPreviousProofArray'),\n          verifier,\n          reason: 'Should not verify VC with invalid \"proof.previousProof\".'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "jrALiK8SX9HgWL-sFlTtO",
              "ctx": null,
              "_testId": "urn:uuid:7521792e-445a-43da-beb6-47b3fba1c8ad",
              "cell": {
                "columnId": "bovine",
                "rowId": "If any element of previousProof list has an id attribute that does not match the id attribute of any element of allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20any%20element%20of%20previousProof%20list%20has%20an%20id%20attribute%20that%20does%20not%20match%20the%20id%20attribute%20of%20any%20element%20of%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 52935,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 96,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Each value identifies another data integrity proof, all of which MUST also verify for the current proof to be considered verified",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=Each%20value%20identifies%20another%20data%20integrity%20proof%2C%20all%20of%20which%20MUST%20also%20verify%20for%20the%20current%20proof%20to%20be%20considered%20verified';\n        await verificationFail({\n          credential: credentials.clone('previousProofFail'),\n          verifier,\n          reason: 'Should not verify VC with a \"previousProof\" that does ' +\n          'not verify.'\n        });\n\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "jrALiK8SX9HgWL-sFlTtO",
              "ctx": null,
              "_testId": "urn:uuid:9a55f17d-19e8-445e-8678-bfb3a82df784",
              "cell": {
                "columnId": "bovine",
                "rowId": "Each value identifies another data integrity proof, all of which MUST also verify for the current proof to be considered verified"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=Each%20value%20identifies%20another%20data%20integrity%20proof%2C%20all%20of%20which%20MUST%20also%20verify%20for%20the%20current%20proof%20to%20be%20considered%20verified",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 53032,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 97,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [
            {
              "title": "\"before each\" hook in \"bovine\"",
              "body": "function() {\n      this.currentTest.cell = {\n        columnId: testDescription,\n        rowId: this.currentTest.title\n      };\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "jrALiK8SX9HgWL-sFlTtO",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "originalTitle": "\"before each\" hook",
              "_events": {},
              "_eventsCount": 1,
              "duration": 0,
              "_error": null
            }
          ],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"bovine\"",
              "body": "async function() {\n      proofValueTests = shouldBeProofValue({credentials, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "jrALiK8SX9HgWL-sFlTtO",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 50890,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "Ksgy9d4gisKl6DoQjj6Tn",
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
          "_testId": "urn:uuid:b8e94567-3eee-4983-b880-6db448f856b1"
        }
      ],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [
        {
          "title": "\"before all\" hook in \"Data Integrity (eddsa-rdfc-2022 verifiers)\"",
          "body": "async function() {\n      const data = await generateTestData({...testDataOptions, optionalTests});\n      // this might seem weird, but mocha won't wait for credentials to be set\n      // before passing the credentials var to the tests\n      // so we just update the credentials passed to the actual test suite\n      Object.assign(credentials, data);\n    }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "Ksgy9d4gisKl6DoQjj6Tn",
          "ctx": null,
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 8756,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 30,
          "_error": null
        }
      ],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "DQ_CnX3Ym0TcRvd_Af9IF",
      "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Verifier",
      "_testId": "urn:uuid:38dd43ee-3993-40e7-89ac-1db4fe14d261",
      "columns": [
        "ACA-py",
        "apicatalog.com",
        "Digital Bazaar",
        "Grotto Networking",
        "Procivis One Core",
        "SpruceID",
        "Trinsic",
        "bovine"
      ],
      "rows": [
        {
          "id": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null.",
          "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.",
          "cells": [
            {
              "type": "test",
              "title": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.';\n      const credential = credentials.clone('invalidBaseUrl');\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'Should not verify VC with invalid base URL'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "pmPgloOAmrko-FWqqfD9b",
              "ctx": null,
              "_testId": "urn:uuid:0cb2b2ab-8026-401f-adbf-00d8fe792bf2",
              "cell": {
                "columnId": "ACA-py",
                "rowId": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8788,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 106,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Should not verify VC with invalid base URL: expected Response { status: 200, statusText: 'OK', headers: Headers { 'content-length': '656', 'content-type': 'application/json; charset=utf-8', date: 'Sun, 13 Oct 2024 05:06:31 GMT', server: 'Python/3.12 aiohttp/3.10.9', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Should not verify VC with invalid base URL: expected Response { status: 200, statusText: 'OK', headers: Headers { 'content-length': '656', 'content-type': 'application/json; charset=utf-8', date: 'Sun, 13 Oct 2024 05:06:31 GMT', server: 'Python/3.12 aiohttp/3.10.9', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationFail (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:82:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/suites/verify.js:36:7)"
              }
            },
            {
              "type": "test",
              "title": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.';\n      const credential = credentials.clone('invalidBaseUrl');\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'Should not verify VC with invalid base URL'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "JC5FF1IsnlSix4emI_7V_",
              "ctx": null,
              "_testId": "urn:uuid:361a2fc7-6179-459e-a062-1a7a29603c37",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9506,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 384,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.';\n      const credential = credentials.clone('invalidBaseUrl');\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'Should not verify VC with invalid base URL'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "EP5_Q-cQ5glNVX4UC5cXK",
              "ctx": null,
              "_testId": "urn:uuid:b2998739-d968-41ae-a04f-d2748d0e9c9d",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 15796,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 344,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.';\n      const credential = credentials.clone('invalidBaseUrl');\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'Should not verify VC with invalid base URL'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "lmbuuoAHfSurepTV_1j1g",
              "ctx": null,
              "_testId": "urn:uuid:801d1170-b1dc-45f2-86ed-b1b22e9cb02e",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 26041,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 521,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.';\n      const credential = credentials.clone('invalidBaseUrl');\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'Should not verify VC with invalid base URL'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "XlfRRByHzOzFyqDvhYKAc",
              "ctx": null,
              "_testId": "urn:uuid:36c5dd6a-7101-4b12-867b-ead86925719a",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 44339,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 356,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.';\n      const credential = credentials.clone('invalidBaseUrl');\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'Should not verify VC with invalid base URL'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "aiQ0OlclMX_yZkn2nkDg9",
              "ctx": null,
              "_testId": "urn:uuid:4652610c-66ab-443c-a5ba-d904620d60e1",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 47798,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 54,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.';\n      const credential = credentials.clone('invalidBaseUrl');\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'Should not verify VC with invalid base URL'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "14gHlb_DX7G_d1mHSoz7X",
              "ctx": null,
              "_testId": "urn:uuid:4f39d5ad-ec10-47c9-8d87-0d997dccc500",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 48420,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 2037,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.';\n      const credential = credentials.clone('invalidBaseUrl');\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'Should not verify VC with invalid base URL'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "jrALiK8SX9HgWL-sFlTtO",
              "ctx": null,
              "_testId": "urn:uuid:14735702-7f04-452f-bae5-7d49a3823e97",
              "cell": {
                "columnId": "bovine",
                "rowId": "When deserializing to RDF, implementations MUST ensure that the base URL is set to null."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=When%20deserializing%20to%20RDF%2C%20implementations%20MUST%20ensure%20that%20the%20base%20URL%20is%20set%20to%20null.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 50891,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 391,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "Conforming processors MUST produce errors when non-conforming documents are consumed.",
          "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.",
          "cells": [
            {
              "type": "test",
              "title": "Conforming processors MUST produce errors when non-conforming documents are consumed.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.';\n      // this could be read as testing all non-confirming docs or just one\n      // for this test only one doc is tested as it should throw for any\n      // non-conforming doc\n      await verificationFail({\n        credential: credentials.clone('invalidProofType'),\n        verifier,\n        reason: 'Should not verify VC with invalid \"proof.type\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "pmPgloOAmrko-FWqqfD9b",
              "ctx": null,
              "_testId": "urn:uuid:e3a66448-4b88-4912-9b23-8adfe3191813",
              "cell": {
                "columnId": "ACA-py",
                "rowId": "Conforming processors MUST produce errors when non-conforming documents are consumed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8894,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 39,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "Conforming processors MUST produce errors when non-conforming documents are consumed.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.';\n      // this could be read as testing all non-confirming docs or just one\n      // for this test only one doc is tested as it should throw for any\n      // non-conforming doc\n      await verificationFail({\n        credential: credentials.clone('invalidProofType'),\n        verifier,\n        reason: 'Should not verify VC with invalid \"proof.type\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "JC5FF1IsnlSix4emI_7V_",
              "ctx": null,
              "_testId": "urn:uuid:f4f9343a-e704-4525-8439-c623f311f915",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "Conforming processors MUST produce errors when non-conforming documents are consumed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9891,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 196,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Conforming processors MUST produce errors when non-conforming documents are consumed.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.';\n      // this could be read as testing all non-confirming docs or just one\n      // for this test only one doc is tested as it should throw for any\n      // non-conforming doc\n      await verificationFail({\n        credential: credentials.clone('invalidProofType'),\n        verifier,\n        reason: 'Should not verify VC with invalid \"proof.type\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "EP5_Q-cQ5glNVX4UC5cXK",
              "ctx": null,
              "_testId": "urn:uuid:e94ef91d-01fa-48e4-b6f3-c585b730016f",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "Conforming processors MUST produce errors when non-conforming documents are consumed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16141,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 60,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "Conforming processors MUST produce errors when non-conforming documents are consumed.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.';\n      // this could be read as testing all non-confirming docs or just one\n      // for this test only one doc is tested as it should throw for any\n      // non-conforming doc\n      await verificationFail({\n        credential: credentials.clone('invalidProofType'),\n        verifier,\n        reason: 'Should not verify VC with invalid \"proof.type\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "lmbuuoAHfSurepTV_1j1g",
              "ctx": null,
              "_testId": "urn:uuid:9b64a0a5-483a-4e8d-b113-236d31fab820",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "Conforming processors MUST produce errors when non-conforming documents are consumed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 26563,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 74,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "Conforming processors MUST produce errors when non-conforming documents are consumed.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.';\n      // this could be read as testing all non-confirming docs or just one\n      // for this test only one doc is tested as it should throw for any\n      // non-conforming doc\n      await verificationFail({\n        credential: credentials.clone('invalidProofType'),\n        verifier,\n        reason: 'Should not verify VC with invalid \"proof.type\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "XlfRRByHzOzFyqDvhYKAc",
              "ctx": null,
              "_testId": "urn:uuid:67dc5fe1-6dfc-4126-b225-865589f02586",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "Conforming processors MUST produce errors when non-conforming documents are consumed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 44696,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 182,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Conforming processors MUST produce errors when non-conforming documents are consumed.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.';\n      // this could be read as testing all non-confirming docs or just one\n      // for this test only one doc is tested as it should throw for any\n      // non-conforming doc\n      await verificationFail({\n        credential: credentials.clone('invalidProofType'),\n        verifier,\n        reason: 'Should not verify VC with invalid \"proof.type\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "aiQ0OlclMX_yZkn2nkDg9",
              "ctx": null,
              "_testId": "urn:uuid:d087c403-edca-4cc7-8c51-9569b115a9d6",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "Conforming processors MUST produce errors when non-conforming documents are consumed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 47852,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 32,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Conforming processors MUST produce errors when non-conforming documents are consumed.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.';\n      // this could be read as testing all non-confirming docs or just one\n      // for this test only one doc is tested as it should throw for any\n      // non-conforming doc\n      await verificationFail({\n        credential: credentials.clone('invalidProofType'),\n        verifier,\n        reason: 'Should not verify VC with invalid \"proof.type\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "14gHlb_DX7G_d1mHSoz7X",
              "ctx": null,
              "_testId": "urn:uuid:33faf7ef-40d6-4bd6-9306-e87ddc4fea92",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "Conforming processors MUST produce errors when non-conforming documents are consumed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 50457,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 20,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Conforming processors MUST produce errors when non-conforming documents are consumed.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.';\n      // this could be read as testing all non-confirming docs or just one\n      // for this test only one doc is tested as it should throw for any\n      // non-conforming doc\n      await verificationFail({\n        credential: credentials.clone('invalidProofType'),\n        verifier,\n        reason: 'Should not verify VC with invalid \"proof.type\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "jrALiK8SX9HgWL-sFlTtO",
              "ctx": null,
              "_testId": "urn:uuid:c0534d3f-1cd3-493e-aefa-3f395ff53383",
              "cell": {
                "columnId": "bovine",
                "rowId": "Conforming processors MUST produce errors when non-conforming documents are consumed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#conformance:~:text=Conforming%20processors%20MUST%20produce%20errors%20when%20non%2Dconforming%20documents%20are%20consumed.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 51282,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 98,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR.",
          "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.",
          "cells": [
            {
              "type": "test",
              "title": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.';\n      const credential = credentials.clone('issuedVc');\n      credential.proof = null;\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'MUST not verify VC with proof that is not a map.'\n      });\n      await verificationFail({\n        // use a string as the non map representation of a VC\n        credential: JSON.stringify(credentials.clone('issuedVc')),\n        verifier,\n        reason: 'MUST not verify VC that is not a map.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "pmPgloOAmrko-FWqqfD9b",
              "ctx": null,
              "_testId": "urn:uuid:ab2f567f-f093-4c08-84a4-b0df472ad821",
              "cell": {
                "columnId": "ACA-py",
                "rowId": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8933,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 61,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.';\n      const credential = credentials.clone('issuedVc');\n      credential.proof = null;\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'MUST not verify VC with proof that is not a map.'\n      });\n      await verificationFail({\n        // use a string as the non map representation of a VC\n        credential: JSON.stringify(credentials.clone('issuedVc')),\n        verifier,\n        reason: 'MUST not verify VC that is not a map.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "JC5FF1IsnlSix4emI_7V_",
              "ctx": null,
              "_testId": "urn:uuid:19bf47f2-cb87-480b-acc0-99ba283f1023",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 10087,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 2207,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.';\n      const credential = credentials.clone('issuedVc');\n      credential.proof = null;\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'MUST not verify VC with proof that is not a map.'\n      });\n      await verificationFail({\n        // use a string as the non map representation of a VC\n        credential: JSON.stringify(credentials.clone('issuedVc')),\n        verifier,\n        reason: 'MUST not verify VC that is not a map.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "EP5_Q-cQ5glNVX4UC5cXK",
              "ctx": null,
              "_testId": "urn:uuid:2af766b2-6127-4f9f-ba86-33ef22db5024",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16201,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 73,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.';\n      const credential = credentials.clone('issuedVc');\n      credential.proof = null;\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'MUST not verify VC with proof that is not a map.'\n      });\n      await verificationFail({\n        // use a string as the non map representation of a VC\n        credential: JSON.stringify(credentials.clone('issuedVc')),\n        verifier,\n        reason: 'MUST not verify VC that is not a map.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "lmbuuoAHfSurepTV_1j1g",
              "ctx": null,
              "_testId": "urn:uuid:3662f2f3-ddc9-4249-8e3a-8ccb155fa59f",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 26637,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 142,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.';\n      const credential = credentials.clone('issuedVc');\n      credential.proof = null;\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'MUST not verify VC with proof that is not a map.'\n      });\n      await verificationFail({\n        // use a string as the non map representation of a VC\n        credential: JSON.stringify(credentials.clone('issuedVc')),\n        verifier,\n        reason: 'MUST not verify VC that is not a map.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "XlfRRByHzOzFyqDvhYKAc",
              "ctx": null,
              "_testId": "urn:uuid:bc39adac-82c1-4aa3-9cab-ece00353212d",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 44877,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 509,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.';\n      const credential = credentials.clone('issuedVc');\n      credential.proof = null;\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'MUST not verify VC with proof that is not a map.'\n      });\n      await verificationFail({\n        // use a string as the non map representation of a VC\n        credential: JSON.stringify(credentials.clone('issuedVc')),\n        verifier,\n        reason: 'MUST not verify VC that is not a map.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "aiQ0OlclMX_yZkn2nkDg9",
              "ctx": null,
              "_testId": "urn:uuid:cf9deb40-c13b-4041-a9c4-62b2d683c147",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 47885,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 55,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.';\n      const credential = credentials.clone('issuedVc');\n      credential.proof = null;\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'MUST not verify VC with proof that is not a map.'\n      });\n      await verificationFail({\n        // use a string as the non map representation of a VC\n        credential: JSON.stringify(credentials.clone('issuedVc')),\n        verifier,\n        reason: 'MUST not verify VC that is not a map.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "14gHlb_DX7G_d1mHSoz7X",
              "ctx": null,
              "_testId": "urn:uuid:0d7e1b8f-3bfa-49f1-89c3-92184a6eb987",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 50478,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 44,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.';\n      const credential = credentials.clone('issuedVc');\n      credential.proof = null;\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'MUST not verify VC with proof that is not a map.'\n      });\n      await verificationFail({\n        // use a string as the non map representation of a VC\n        credential: JSON.stringify(credentials.clone('issuedVc')),\n        verifier,\n        reason: 'MUST not verify VC that is not a map.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "jrALiK8SX9HgWL-sFlTtO",
              "ctx": null,
              "_testId": "urn:uuid:090d422f-28f7-4634-90db-1c3960273a06",
              "cell": {
                "columnId": "bovine",
                "rowId": "If either securedDocument is not a map or securedDocument.proof is not a map, an error MUST be raised and SHOULD convey an error type of PARSING_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20either%20securedDocument%20is%20not%20a%20map%20or%20securedDocument.proof%20is%20not%20a%20map%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PARSING_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 51380,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 192,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR",
          "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
          "cells": [
            {
              "type": "test",
              "title": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof;\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'MUST not verify VC w/o a proof'\n      });\n      const noType = credentials.clone('issuedVc');\n      delete noType.proof.type;\n      await verificationFail({\n        credential: noType,\n        verifier,\n        reason: 'MUST not verify VC w/o a \"proof.type\".'\n      });\n      const noVm = credentials.clone('noVm');\n      await verificationFail({\n        credential: noVm,\n        verifier,\n        reason: 'MUST not verify VC w/o \"proof.verificationMethod\".\"'\n      });\n      const noProofPurpose = credentials.clone('noProofPurpose');\n      await verificationFail({\n        credential: noProofPurpose,\n        verifier,\n        reason: 'MUST not verify VC w/o \"proof.proofPurpose\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "pmPgloOAmrko-FWqqfD9b",
              "ctx": null,
              "_testId": "urn:uuid:171e6a8a-cab3-440d-8160-38f9dc0c4dea",
              "cell": {
                "columnId": "ACA-py",
                "rowId": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 8993,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 116,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof;\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'MUST not verify VC w/o a proof'\n      });\n      const noType = credentials.clone('issuedVc');\n      delete noType.proof.type;\n      await verificationFail({\n        credential: noType,\n        verifier,\n        reason: 'MUST not verify VC w/o a \"proof.type\".'\n      });\n      const noVm = credentials.clone('noVm');\n      await verificationFail({\n        credential: noVm,\n        verifier,\n        reason: 'MUST not verify VC w/o \"proof.verificationMethod\".\"'\n      });\n      const noProofPurpose = credentials.clone('noProofPurpose');\n      await verificationFail({\n        credential: noProofPurpose,\n        verifier,\n        reason: 'MUST not verify VC w/o \"proof.proofPurpose\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "JC5FF1IsnlSix4emI_7V_",
              "ctx": null,
              "_testId": "urn:uuid:8aa2377f-0698-4238-9560-23aeeb0e8dbe",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 12294,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 998,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof;\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'MUST not verify VC w/o a proof'\n      });\n      const noType = credentials.clone('issuedVc');\n      delete noType.proof.type;\n      await verificationFail({\n        credential: noType,\n        verifier,\n        reason: 'MUST not verify VC w/o a \"proof.type\".'\n      });\n      const noVm = credentials.clone('noVm');\n      await verificationFail({\n        credential: noVm,\n        verifier,\n        reason: 'MUST not verify VC w/o \"proof.verificationMethod\".\"'\n      });\n      const noProofPurpose = credentials.clone('noProofPurpose');\n      await verificationFail({\n        credential: noProofPurpose,\n        verifier,\n        reason: 'MUST not verify VC w/o \"proof.proofPurpose\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "EP5_Q-cQ5glNVX4UC5cXK",
              "ctx": null,
              "_testId": "urn:uuid:8a6910f2-ab76-4f37-803c-b0f88e682adb",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16275,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 172,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof;\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'MUST not verify VC w/o a proof'\n      });\n      const noType = credentials.clone('issuedVc');\n      delete noType.proof.type;\n      await verificationFail({\n        credential: noType,\n        verifier,\n        reason: 'MUST not verify VC w/o a \"proof.type\".'\n      });\n      const noVm = credentials.clone('noVm');\n      await verificationFail({\n        credential: noVm,\n        verifier,\n        reason: 'MUST not verify VC w/o \"proof.verificationMethod\".\"'\n      });\n      const noProofPurpose = credentials.clone('noProofPurpose');\n      await verificationFail({\n        credential: noProofPurpose,\n        verifier,\n        reason: 'MUST not verify VC w/o \"proof.proofPurpose\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "lmbuuoAHfSurepTV_1j1g",
              "ctx": null,
              "_testId": "urn:uuid:97b31a52-b3ba-4ea8-9e76-962662c36769",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 26780,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 290,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof;\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'MUST not verify VC w/o a proof'\n      });\n      const noType = credentials.clone('issuedVc');\n      delete noType.proof.type;\n      await verificationFail({\n        credential: noType,\n        verifier,\n        reason: 'MUST not verify VC w/o a \"proof.type\".'\n      });\n      const noVm = credentials.clone('noVm');\n      await verificationFail({\n        credential: noVm,\n        verifier,\n        reason: 'MUST not verify VC w/o \"proof.verificationMethod\".\"'\n      });\n      const noProofPurpose = credentials.clone('noProofPurpose');\n      await verificationFail({\n        credential: noProofPurpose,\n        verifier,\n        reason: 'MUST not verify VC w/o \"proof.proofPurpose\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "XlfRRByHzOzFyqDvhYKAc",
              "ctx": null,
              "_testId": "urn:uuid:29ebd758-e9cb-4c6d-af42-ce7c6270869e",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 45387,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 460,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof;\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'MUST not verify VC w/o a proof'\n      });\n      const noType = credentials.clone('issuedVc');\n      delete noType.proof.type;\n      await verificationFail({\n        credential: noType,\n        verifier,\n        reason: 'MUST not verify VC w/o a \"proof.type\".'\n      });\n      const noVm = credentials.clone('noVm');\n      await verificationFail({\n        credential: noVm,\n        verifier,\n        reason: 'MUST not verify VC w/o \"proof.verificationMethod\".\"'\n      });\n      const noProofPurpose = credentials.clone('noProofPurpose');\n      await verificationFail({\n        credential: noProofPurpose,\n        verifier,\n        reason: 'MUST not verify VC w/o \"proof.proofPurpose\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "aiQ0OlclMX_yZkn2nkDg9",
              "ctx": null,
              "_testId": "urn:uuid:f82d6c4c-5e9f-46b2-825c-be47849b7b69",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 47940,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 103,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof;\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'MUST not verify VC w/o a proof'\n      });\n      const noType = credentials.clone('issuedVc');\n      delete noType.proof.type;\n      await verificationFail({\n        credential: noType,\n        verifier,\n        reason: 'MUST not verify VC w/o a \"proof.type\".'\n      });\n      const noVm = credentials.clone('noVm');\n      await verificationFail({\n        credential: noVm,\n        verifier,\n        reason: 'MUST not verify VC w/o \"proof.verificationMethod\".\"'\n      });\n      const noProofPurpose = credentials.clone('noProofPurpose');\n      await verificationFail({\n        credential: noProofPurpose,\n        verifier,\n        reason: 'MUST not verify VC w/o \"proof.proofPurpose\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "14gHlb_DX7G_d1mHSoz7X",
              "ctx": null,
              "_testId": "urn:uuid:426e2793-f843-420b-91c4-7730450a145a",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 50522,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 108,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      const credential = credentials.clone('issuedVc');\n      delete credential.proof;\n      await verificationFail({\n        credential,\n        verifier,\n        reason: 'MUST not verify VC w/o a proof'\n      });\n      const noType = credentials.clone('issuedVc');\n      delete noType.proof.type;\n      await verificationFail({\n        credential: noType,\n        verifier,\n        reason: 'MUST not verify VC w/o a \"proof.type\".'\n      });\n      const noVm = credentials.clone('noVm');\n      await verificationFail({\n        credential: noVm,\n        verifier,\n        reason: 'MUST not verify VC w/o \"proof.verificationMethod\".\"'\n      });\n      const noProofPurpose = credentials.clone('noProofPurpose');\n      await verificationFail({\n        credential: noProofPurpose,\n        verifier,\n        reason: 'MUST not verify VC w/o \"proof.proofPurpose\"'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "jrALiK8SX9HgWL-sFlTtO",
              "ctx": null,
              "_testId": "urn:uuid:43d6a16a-0659-441f-8f48-9066c4d52668",
              "cell": {
                "columnId": "bovine",
                "rowId": "If one or more of proof.type, proof.verificationMethod, and proof.proofPurpose does not exist, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20one%20or%20more%20of%20proof.type%2C%20proof.verificationMethod%2C%20and%20proof.proofPurpose%20does%20not%20exist%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 51572,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 382,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('invalidProofType');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "pmPgloOAmrko-FWqqfD9b",
              "ctx": null,
              "_testId": "urn:uuid:6675c8ec-6721-443b-a229-103effeab0c0",
              "cell": {
                "columnId": "ACA-py",
                "rowId": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9110,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 35,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('invalidProofType');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "JC5FF1IsnlSix4emI_7V_",
              "ctx": null,
              "_testId": "urn:uuid:58132a1c-02d5-4a92-a5b4-c4e3461eab7c",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 13292,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 113,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('invalidProofType');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "EP5_Q-cQ5glNVX4UC5cXK",
              "ctx": null,
              "_testId": "urn:uuid:e97ce7bf-10f2-4144-ae2b-5406e95ee750",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16448,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 52,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('invalidProofType');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "lmbuuoAHfSurepTV_1j1g",
              "ctx": null,
              "_testId": "urn:uuid:6c74eba7-76b5-4f60-b61d-7cbdcde4c3c1",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 27070,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 76,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('invalidProofType');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "XlfRRByHzOzFyqDvhYKAc",
              "ctx": null,
              "_testId": "urn:uuid:f63ea35b-3b2a-437a-ba85-29596059e20a",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 45847,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 141,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('invalidProofType');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "aiQ0OlclMX_yZkn2nkDg9",
              "ctx": null,
              "_testId": "urn:uuid:c1dc8d6c-b3e5-4796-894c-ea0cbd2da30b",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 48042,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 22,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('invalidProofType');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "14gHlb_DX7G_d1mHSoz7X",
              "ctx": null,
              "_testId": "urn:uuid:f2868762-530e-40b3-9bf9-fd9816dccc38",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 50630,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 19,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('invalidProofType');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "jrALiK8SX9HgWL-sFlTtO",
              "ctx": null,
              "_testId": "urn:uuid:b6bb2cea-a686-4297-9eec-338978c2b5b3",
              "cell": {
                "columnId": "bovine",
                "rowId": "If the \"proof.type\" field is not the string \"DataIntegrityProof\", an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 51953,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 99,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('invalidVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "pmPgloOAmrko-FWqqfD9b",
              "ctx": null,
              "_testId": "urn:uuid:0dbde167-5fe4-4c8f-b9d6-9bb289f723b1",
              "cell": {
                "columnId": "ACA-py",
                "rowId": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9146,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 53,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('invalidVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "JC5FF1IsnlSix4emI_7V_",
              "ctx": null,
              "_testId": "urn:uuid:c11d2709-7703-4e5c-8a8d-aaae80792d06",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 13405,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 202,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('invalidVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "EP5_Q-cQ5glNVX4UC5cXK",
              "ctx": null,
              "_testId": "urn:uuid:2b9f495a-e91d-4f8c-8259-880b2f652efd",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16500,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 44,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('invalidVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "lmbuuoAHfSurepTV_1j1g",
              "ctx": null,
              "_testId": "urn:uuid:9b91a2c6-44c1-4807-bf56-eccc6aaa5fff",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 27146,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 780,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('invalidVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "XlfRRByHzOzFyqDvhYKAc",
              "ctx": null,
              "_testId": "urn:uuid:c1944642-96d9-4ab3-ba8a-3940c7f2144f",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 45989,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 168,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('invalidVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "aiQ0OlclMX_yZkn2nkDg9",
              "ctx": null,
              "_testId": "urn:uuid:7f32d5f3-b513-4433-ad59-cf087663d5dd",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 48065,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 26,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('invalidVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "14gHlb_DX7G_d1mHSoz7X",
              "ctx": null,
              "_testId": "urn:uuid:7571ad59-f2fe-47bf-bf72-6277c846d1fd",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 50650,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 17,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('invalidVm');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "jrALiK8SX9HgWL-sFlTtO",
              "ctx": null,
              "_testId": "urn:uuid:a12d3c36-baa2-49bf-921a-c2ce5091c6fe",
              "cell": {
                "columnId": "bovine",
                "rowId": "If the \"proof.verificationMethod\" field is invalid, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 52053,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 96,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('invalidProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "pmPgloOAmrko-FWqqfD9b",
              "ctx": null,
              "_testId": "urn:uuid:5b3e6bca-9ece-4c5f-a687-61831ce5997f",
              "cell": {
                "columnId": "ACA-py",
                "rowId": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9199,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 49,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no result from verifier.: expected Response { status: 200, statusText: 'OK', headers: Headers { 'content-length': '633', 'content-type': 'application/json; charset=utf-8', date: 'Sun, 13 Oct 2024 05:06:32 GMT', server: 'Python/3.12 aiohttp/3.10.9', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no result from verifier.: expected Response { status: 200, statusText: 'OK', headers: Headers { 'content-length': '633', 'content-type': 'application/json; charset=utf-8', date: 'Sun, 13 Oct 2024 05:06:32 GMT', server: 'Python/3.12 aiohttp/3.10.9', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationFail (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:82:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/suites/verify.js:118:7)"
              }
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('invalidProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "JC5FF1IsnlSix4emI_7V_",
              "ctx": null,
              "_testId": "urn:uuid:dadfcaef-e381-422e-ac88-85ac3c939fb2",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 13608,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 286,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('invalidProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "EP5_Q-cQ5glNVX4UC5cXK",
              "ctx": null,
              "_testId": "urn:uuid:cfc7b74e-1b45-4f85-a9b1-f88ce680b564",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16544,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 75,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('invalidProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "lmbuuoAHfSurepTV_1j1g",
              "ctx": null,
              "_testId": "urn:uuid:44731558-9e5e-4d76-a6b0-6d39c9771bf6",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 27926,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 707,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('invalidProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "XlfRRByHzOzFyqDvhYKAc",
              "ctx": null,
              "_testId": "urn:uuid:0db4100e-e60d-4acc-9a65-4ea8d2f01359",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 46157,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 138,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('invalidProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "aiQ0OlclMX_yZkn2nkDg9",
              "ctx": null,
              "_testId": "urn:uuid:394467b9-15a2-497a-a6f3-9e4c264ce080",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 48092,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 55,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('invalidProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "14gHlb_DX7G_d1mHSoz7X",
              "ctx": null,
              "_testId": "urn:uuid:47cffccc-cd5d-432a-bf48-8be2cd30684d",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 50668,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 19,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised.",
              "body": "async function() {\n      const credential = credentials.clone('invalidProofPurpose');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "jrALiK8SX9HgWL-sFlTtO",
              "ctx": null,
              "_testId": "urn:uuid:67d41938-059f-4bb1-99eb-a0be1e8ef6a7",
              "cell": {
                "columnId": "bovine",
                "rowId": "If the \"proof.proofPurpose\" field is invalid, an error MUST be raised."
              },
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 52149,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 99,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
          "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
          "cells": [
            {
              "type": "test",
              "title": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      // NOTE: expectedProofPurpose should be specified by verifiers internally\n      // it is very unlikely to be invalidProofPurpose\n      await verificationFail({\n        credential: credentials.clone('invalidProofPurpose'),\n        verifier,\n        reason: 'Verifier should reject VC with invalid proof purpose.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "pmPgloOAmrko-FWqqfD9b",
              "ctx": null,
              "_testId": "urn:uuid:3a8f79a4-029e-44ac-9167-288556c912e0",
              "cell": {
                "columnId": "ACA-py",
                "rowId": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9250,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 38,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Verifier should reject VC with invalid proof purpose.: expected Response { status: 200, statusText: 'OK', headers: Headers { 'content-length': '633', 'content-type': 'application/json; charset=utf-8', date: 'Sun, 13 Oct 2024 05:06:32 GMT', server: 'Python/3.12 aiohttp/3.10.9', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Verifier should reject VC with invalid proof purpose.: expected Response { status: 200, statusText: 'OK', headers: Headers { 'content-length': '633', 'content-type': 'application/json; charset=utf-8', date: 'Sun, 13 Oct 2024 05:06:32 GMT', server: 'Python/3.12 aiohttp/3.10.9', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationFail (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:82:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/suites/verify.js:126:7)"
              }
            },
            {
              "type": "test",
              "title": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      // NOTE: expectedProofPurpose should be specified by verifiers internally\n      // it is very unlikely to be invalidProofPurpose\n      await verificationFail({\n        credential: credentials.clone('invalidProofPurpose'),\n        verifier,\n        reason: 'Verifier should reject VC with invalid proof purpose.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "JC5FF1IsnlSix4emI_7V_",
              "ctx": null,
              "_testId": "urn:uuid:93eaff36-d9ba-46b9-854a-75093f47d02e",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 13894,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 402,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      // NOTE: expectedProofPurpose should be specified by verifiers internally\n      // it is very unlikely to be invalidProofPurpose\n      await verificationFail({\n        credential: credentials.clone('invalidProofPurpose'),\n        verifier,\n        reason: 'Verifier should reject VC with invalid proof purpose.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "EP5_Q-cQ5glNVX4UC5cXK",
              "ctx": null,
              "_testId": "urn:uuid:2f6f0d56-0648-4245-99ab-11e499da1fbf",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16619,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 258,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      // NOTE: expectedProofPurpose should be specified by verifiers internally\n      // it is very unlikely to be invalidProofPurpose\n      await verificationFail({\n        credential: credentials.clone('invalidProofPurpose'),\n        verifier,\n        reason: 'Verifier should reject VC with invalid proof purpose.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "lmbuuoAHfSurepTV_1j1g",
              "ctx": null,
              "_testId": "urn:uuid:2ff46c79-f780-4967-833b-bd56318e8d2a",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 28633,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 765,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      // NOTE: expectedProofPurpose should be specified by verifiers internally\n      // it is very unlikely to be invalidProofPurpose\n      await verificationFail({\n        credential: credentials.clone('invalidProofPurpose'),\n        verifier,\n        reason: 'Verifier should reject VC with invalid proof purpose.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "XlfRRByHzOzFyqDvhYKAc",
              "ctx": null,
              "_testId": "urn:uuid:06b5aaae-67e1-4e78-af9d-ed4e9e4ff5e0",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 46295,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 129,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      // NOTE: expectedProofPurpose should be specified by verifiers internally\n      // it is very unlikely to be invalidProofPurpose\n      await verificationFail({\n        credential: credentials.clone('invalidProofPurpose'),\n        verifier,\n        reason: 'Verifier should reject VC with invalid proof purpose.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "aiQ0OlclMX_yZkn2nkDg9",
              "ctx": null,
              "_testId": "urn:uuid:a39d4631-62e5-400a-97e6-86eecdd555b8",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 48147,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 28,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      // NOTE: expectedProofPurpose should be specified by verifiers internally\n      // it is very unlikely to be invalidProofPurpose\n      await verificationFail({\n        credential: credentials.clone('invalidProofPurpose'),\n        verifier,\n        reason: 'Verifier should reject VC with invalid proof purpose.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "14gHlb_DX7G_d1mHSoz7X",
              "ctx": null,
              "_testId": "urn:uuid:3ada0ea1-58c9-4823-b053-132e3d381811",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 50687,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 18,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n      // NOTE: expectedProofPurpose should be specified by verifiers internally\n      // it is very unlikely to be invalidProofPurpose\n      await verificationFail({\n        credential: credentials.clone('invalidProofPurpose'),\n        verifier,\n        reason: 'Verifier should reject VC with invalid proof purpose.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "jrALiK8SX9HgWL-sFlTtO",
              "ctx": null,
              "_testId": "urn:uuid:c947d03a-ea88-479e-8f09-c3767984fbfe",
              "cell": {
                "columnId": "bovine",
                "rowId": "If expectedProofPurpose was given, and it does not match proof.proofPurpose, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20expectedProofPurpose%20was%20given%2C%20and%20it%20does%20not%20match%20proof.proofPurpose%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 52249,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 101,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
          "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.",
          "cells": [
            {
              "type": "test",
              "title": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.';\n        await proofValueTests;\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "pmPgloOAmrko-FWqqfD9b",
              "ctx": null,
              "_testId": "urn:uuid:ca858773-183f-45e0-b197-3d05d966bf01",
              "cell": {
                "columnId": "ACA-py",
                "rowId": "The proofValue property MUST be used, as specified in 2.1 Proofs."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9289,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.';\n        await proofValueTests;\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "JC5FF1IsnlSix4emI_7V_",
              "ctx": null,
              "_testId": "urn:uuid:66b7e088-e776-4169-88c6-f4cb9096a782",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "The proofValue property MUST be used, as specified in 2.1 Proofs."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 14297,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.';\n        await proofValueTests;\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "EP5_Q-cQ5glNVX4UC5cXK",
              "ctx": null,
              "_testId": "urn:uuid:a75af300-f4fa-4dda-b392-3be2a0b8ce5a",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The proofValue property MUST be used, as specified in 2.1 Proofs."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 16877,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 2709,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.';\n        await proofValueTests;\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "lmbuuoAHfSurepTV_1j1g",
              "ctx": null,
              "_testId": "urn:uuid:aeff9e87-789d-498b-8d10-4857106fdb3a",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The proofValue property MUST be used, as specified in 2.1 Proofs."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29399,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.';\n        await proofValueTests;\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "XlfRRByHzOzFyqDvhYKAc",
              "ctx": null,
              "_testId": "urn:uuid:6773dee9-811b-43c8-b426-fe486cf61939",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "The proofValue property MUST be used, as specified in 2.1 Proofs."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 46425,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.';\n        await proofValueTests;\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "aiQ0OlclMX_yZkn2nkDg9",
              "ctx": null,
              "_testId": "urn:uuid:0b2a1bed-6ea8-439c-af66-df9f982dd7ac",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The proofValue property MUST be used, as specified in 2.1 Proofs."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 48175,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.';\n        await proofValueTests;\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "14gHlb_DX7G_d1mHSoz7X",
              "ctx": null,
              "_testId": "urn:uuid:8548b486-56b1-4083-8967-4c35499515ad",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "The proofValue property MUST be used, as specified in 2.1 Proofs."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 50705,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The proofValue property MUST be used, as specified in 2.1 Proofs.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.';\n        await proofValueTests;\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "jrALiK8SX9HgWL-sFlTtO",
              "ctx": null,
              "_testId": "urn:uuid:c5172fdc-b9de-4146-af02-91ff934a3334",
              "cell": {
                "columnId": "bovine",
                "rowId": "The proofValue property MUST be used, as specified in 2.1 Proofs."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=The%20proofValue%20property%20MUST%20be%20used%2C%20as%20specified%20in%202.1%20Proofs.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 52350,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification.",
          "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof",
          "cells": [
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof';\n      await proofValueTests;\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "pmPgloOAmrko-FWqqfD9b",
              "ctx": null,
              "_testId": "urn:uuid:f70b8b6d-8cae-4ad7-bc50-f57b5a0bff07",
              "cell": {
                "columnId": "ACA-py",
                "rowId": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9289,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof';\n      await proofValueTests;\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "JC5FF1IsnlSix4emI_7V_",
              "ctx": null,
              "_testId": "urn:uuid:80e05929-864d-45be-85db-661edd355f38",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 14297,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof';\n      await proofValueTests;\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "EP5_Q-cQ5glNVX4UC5cXK",
              "ctx": null,
              "_testId": "urn:uuid:fb10710e-6ef5-40ec-bace-26f6d0ce52e2",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19587,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof';\n      await proofValueTests;\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "lmbuuoAHfSurepTV_1j1g",
              "ctx": null,
              "_testId": "urn:uuid:5fa9ef38-84ce-4d0b-8eae-b0583baa640f",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29399,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof';\n      await proofValueTests;\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "XlfRRByHzOzFyqDvhYKAc",
              "ctx": null,
              "_testId": "urn:uuid:05c23d9c-f94c-43f6-949d-d7d3b072ff87",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 46425,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof';\n      await proofValueTests;\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "aiQ0OlclMX_yZkn2nkDg9",
              "ctx": null,
              "_testId": "urn:uuid:1c246fed-4843-4cc1-a1db-a80e335fc709",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 48175,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof';\n      await proofValueTests;\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "14gHlb_DX7G_d1mHSoz7X",
              "ctx": null,
              "_testId": "urn:uuid:e76bddfe-e50d-4d17-a55d-1fad2bfcd50d",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 50705,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof';\n      await proofValueTests;\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "jrALiK8SX9HgWL-sFlTtO",
              "ctx": null,
              "_testId": "urn:uuid:c7c5c8bc-d886-4f92-8526-12efb17f6599",
              "cell": {
                "columnId": "bovine",
                "rowId": "(\"proof.proofValue\") A string value that contains the base-encoded binary data necessary to verify the digital proof using the verificationMethod specified. The contents of the value MUST be expressed with a header and encoding as described in Section 2.4 Multibase of the Controller Documents 1.0 specification."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=string%20value%20that%20contains%20the%20base%2Dencoded%20binary%20data%20necessary%20to%20verify%20the%20digital%20proof",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 52350,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
          "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
          "cells": [
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      await verificationFail({\n        credential: credentials.clone('undefinedTerm'),\n        verifier,\n        reason: 'Should fail to verify VC when data is dropped by JSON-LD'\n      });\n      const undefinedTerm = credentials.clone('issuedVc');\n      undefinedTerm.credentialSubject.undefinedTerm = 'IfDroppedWillVerify';\n      await verificationFail({\n        credential: undefinedTerm,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined term is added ' +\n          'after issuance.'\n      });\n      const undefinedType = credentials.clone('issuedVc');\n      undefinedType.type.push('UndefinedType');\n      await verificationFail({\n        credential: undefinedType,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined type is added ' +\n          'after issuance.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "pmPgloOAmrko-FWqqfD9b",
              "ctx": null,
              "_testId": "urn:uuid:27a063b8-7f1e-4e20-ad03-ffc2e493c12a",
              "cell": {
                "columnId": "ACA-py",
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9289,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 35,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Should fail to verify VC when data is dropped by JSON-LD: expected Response { status: 200, statusText: 'OK', headers: Headers { 'content-length': '667', 'content-type': 'application/json; charset=utf-8', date: 'Sun, 13 Oct 2024 05:06:32 GMT', server: 'Python/3.12 aiohttp/3.10.9', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Should fail to verify VC when data is dropped by JSON-LD: expected Response { status: 200, statusText: 'OK', headers: Headers { 'content-length': '667', 'content-type': 'application/json; charset=utf-8', date: 'Sun, 13 Oct 2024 05:06:32 GMT', server: 'Python/3.12 aiohttp/3.10.9', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationFail (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:82:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/suites/verify.js:152:7)"
              }
            },
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      await verificationFail({\n        credential: credentials.clone('undefinedTerm'),\n        verifier,\n        reason: 'Should fail to verify VC when data is dropped by JSON-LD'\n      });\n      const undefinedTerm = credentials.clone('issuedVc');\n      undefinedTerm.credentialSubject.undefinedTerm = 'IfDroppedWillVerify';\n      await verificationFail({\n        credential: undefinedTerm,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined term is added ' +\n          'after issuance.'\n      });\n      const undefinedType = credentials.clone('issuedVc');\n      undefinedType.type.push('UndefinedType');\n      await verificationFail({\n        credential: undefinedType,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined type is added ' +\n          'after issuance.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "JC5FF1IsnlSix4emI_7V_",
              "ctx": null,
              "_testId": "urn:uuid:477ed83f-751a-407c-aeb3-7cf5e777cdad",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 14297,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 893,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Should fail to verify VC if an undefined term is added after issuance.: expected Response { status: 200, statusText: 'OK', headers: Headers { 'content-type': 'application/json', vary: 'Accept-Encoding', 'content-encoding': 'gzip', 'x-cloud-trace-context': 'a87eeaf9a01d60ffef5454d140d628dc', date: 'Sun, 13 Oct 2024 05:06:38 GMT', server: 'Google Frontend', 'cache-control': 'private', 'transfer-encoding': 'chunked', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Should fail to verify VC if an undefined term is added after issuance.: expected Response { status: 200, statusText: 'OK', headers: Headers { 'content-type': 'application/json', vary: 'Accept-Encoding', 'content-encoding': 'gzip', 'x-cloud-trace-context': 'a87eeaf9a01d60ffef5454d140d628dc', date: 'Sun, 13 Oct 2024 05:06:38 GMT', server: 'Google Frontend', 'cache-control': 'private', 'transfer-encoding': 'chunked', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationFail (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:82:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/suites/verify.js:159:7)"
              }
            },
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      await verificationFail({\n        credential: credentials.clone('undefinedTerm'),\n        verifier,\n        reason: 'Should fail to verify VC when data is dropped by JSON-LD'\n      });\n      const undefinedTerm = credentials.clone('issuedVc');\n      undefinedTerm.credentialSubject.undefinedTerm = 'IfDroppedWillVerify';\n      await verificationFail({\n        credential: undefinedTerm,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined term is added ' +\n          'after issuance.'\n      });\n      const undefinedType = credentials.clone('issuedVc');\n      undefinedType.type.push('UndefinedType');\n      await verificationFail({\n        credential: undefinedType,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined type is added ' +\n          'after issuance.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "EP5_Q-cQ5glNVX4UC5cXK",
              "ctx": null,
              "_testId": "urn:uuid:55602ca6-9fce-4add-bd9f-51e5733426c3",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19587,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 142,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      await verificationFail({\n        credential: credentials.clone('undefinedTerm'),\n        verifier,\n        reason: 'Should fail to verify VC when data is dropped by JSON-LD'\n      });\n      const undefinedTerm = credentials.clone('issuedVc');\n      undefinedTerm.credentialSubject.undefinedTerm = 'IfDroppedWillVerify';\n      await verificationFail({\n        credential: undefinedTerm,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined term is added ' +\n          'after issuance.'\n      });\n      const undefinedType = credentials.clone('issuedVc');\n      undefinedType.type.push('UndefinedType');\n      await verificationFail({\n        credential: undefinedType,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined type is added ' +\n          'after issuance.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "lmbuuoAHfSurepTV_1j1g",
              "ctx": null,
              "_testId": "urn:uuid:6483d535-f213-4a2f-a535-30a1bd2adb08",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 29399,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1788,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      await verificationFail({\n        credential: credentials.clone('undefinedTerm'),\n        verifier,\n        reason: 'Should fail to verify VC when data is dropped by JSON-LD'\n      });\n      const undefinedTerm = credentials.clone('issuedVc');\n      undefinedTerm.credentialSubject.undefinedTerm = 'IfDroppedWillVerify';\n      await verificationFail({\n        credential: undefinedTerm,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined term is added ' +\n          'after issuance.'\n      });\n      const undefinedType = credentials.clone('issuedVc');\n      undefinedType.type.push('UndefinedType');\n      await verificationFail({\n        credential: undefinedType,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined type is added ' +\n          'after issuance.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "XlfRRByHzOzFyqDvhYKAc",
              "ctx": null,
              "_testId": "urn:uuid:978f8c96-3ccc-4572-b981-3e5ecbf80e2f",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 46425,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 403,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      await verificationFail({\n        credential: credentials.clone('undefinedTerm'),\n        verifier,\n        reason: 'Should fail to verify VC when data is dropped by JSON-LD'\n      });\n      const undefinedTerm = credentials.clone('issuedVc');\n      undefinedTerm.credentialSubject.undefinedTerm = 'IfDroppedWillVerify';\n      await verificationFail({\n        credential: undefinedTerm,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined term is added ' +\n          'after issuance.'\n      });\n      const undefinedType = credentials.clone('issuedVc');\n      undefinedType.type.push('UndefinedType');\n      await verificationFail({\n        credential: undefinedType,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined type is added ' +\n          'after issuance.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "aiQ0OlclMX_yZkn2nkDg9",
              "ctx": null,
              "_testId": "urn:uuid:d67a4a66-784f-43a4-ace5-6f97b37c24c1",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 48175,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 85,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      await verificationFail({\n        credential: credentials.clone('undefinedTerm'),\n        verifier,\n        reason: 'Should fail to verify VC when data is dropped by JSON-LD'\n      });\n      const undefinedTerm = credentials.clone('issuedVc');\n      undefinedTerm.credentialSubject.undefinedTerm = 'IfDroppedWillVerify';\n      await verificationFail({\n        credential: undefinedTerm,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined term is added ' +\n          'after issuance.'\n      });\n      const undefinedType = credentials.clone('issuedVc');\n      undefinedType.type.push('UndefinedType');\n      await verificationFail({\n        credential: undefinedType,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined type is added ' +\n          'after issuance.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "14gHlb_DX7G_d1mHSoz7X",
              "ctx": null,
              "_testId": "urn:uuid:afb94d25-5804-4bd0-94c8-080cf8e32550",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 50705,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 66,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.';\n      await verificationFail({\n        credential: credentials.clone('undefinedTerm'),\n        verifier,\n        reason: 'Should fail to verify VC when data is dropped by JSON-LD'\n      });\n      const undefinedTerm = credentials.clone('issuedVc');\n      undefinedTerm.credentialSubject.undefinedTerm = 'IfDroppedWillVerify';\n      await verificationFail({\n        credential: undefinedTerm,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined term is added ' +\n          'after issuance.'\n      });\n      const undefinedType = credentials.clone('issuedVc');\n      undefinedType.type.push('UndefinedType');\n      await verificationFail({\n        credential: undefinedType,\n        verifier,\n        reason: 'Should fail to verify VC if an undefined type is added ' +\n          'after issuance.'\n      });\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "jrALiK8SX9HgWL-sFlTtO",
              "ctx": null,
              "_testId": "urn:uuid:fd459737-4d1f-419c-8b0a-06bcbc4153c0",
              "cell": {
                "columnId": "bovine",
                "rowId": "Implementations that use JSON-LD processing, such as RDF Dataset Canonicalization [RDF-CANON], MUST throw an error, which SHOULD be DATA_LOSS_DETECTION_ERROR, when data is dropped by a JSON-LD processor, such as when an undefined term is detected in an input document."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#securing-data-losslessly:~:text=Implementations%20that%20use%20JSON%2DLD%20processing%2C%20such%20as%20RDF%20Dataset%20Canonicalization%20%5BRDF%2DCANON%5D%2C%20MUST%20throw%20an%20error%2C%20which%20SHOULD%20be%20DATA_LOSS_DETECTION_ERROR%2C%20when%20data%20is%20dropped%20by%20a%20JSON%2DLD%20processor%2C%20such%20as%20when%20an%20undefined%20term%20is%20detected%20in%20an%20input%20document.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 52350,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 197,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Should fail to verify VC if an undefined term is added after issuance.: expected Response { status: 200, statusText: 'OK', headers: Headers { server: 'nginx/1.18.0 (Ubuntu)', date: 'Sun, 13 Oct 2024 05:07:15 GMT', 'content-type': 'text/html; charset=utf-8', 'content-length': '0', connection: 'keep-alive', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: null, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Should fail to verify VC if an undefined term is added after issuance.: expected Response { status: 200, statusText: 'OK', headers: Headers { server: 'nginx/1.18.0 (Ubuntu)', date: 'Sun, 13 Oct 2024 05:07:15 GMT', 'content-type': 'text/html; charset=utf-8', 'content-length': '0', connection: 'keep-alive', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: null, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationFail (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:82:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/suites/verify.js:159:7)"
              }
            }
          ]
        },
        {
          "id": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
          "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
          "cells": [
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n      const credential = credentials.clone('invalidCryptosuite');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "pmPgloOAmrko-FWqqfD9b",
              "ctx": null,
              "_testId": "urn:uuid:826ba3ba-3437-4646-be96-13be5714664e",
              "cell": {
                "columnId": "ACA-py",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9324,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 31,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n      const credential = credentials.clone('invalidCryptosuite');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "JC5FF1IsnlSix4emI_7V_",
              "ctx": null,
              "_testId": "urn:uuid:56245c67-8f95-4938-929f-9526653fc977",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 15190,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 101,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n      const credential = credentials.clone('invalidCryptosuite');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "EP5_Q-cQ5glNVX4UC5cXK",
              "ctx": null,
              "_testId": "urn:uuid:02ee56ca-7c99-42f6-bc0d-63e2af420189",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19729,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 42,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n      const credential = credentials.clone('invalidCryptosuite');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "lmbuuoAHfSurepTV_1j1g",
              "ctx": null,
              "_testId": "urn:uuid:adb7b8d3-58cb-4299-9b8c-fed79b6abda7",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 31188,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 366,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n      const credential = credentials.clone('invalidCryptosuite');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "XlfRRByHzOzFyqDvhYKAc",
              "ctx": null,
              "_testId": "urn:uuid:4dfae3e2-0ca4-4722-b7c9-3986f847918e",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 46829,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 462,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n      const credential = credentials.clone('invalidCryptosuite');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "aiQ0OlclMX_yZkn2nkDg9",
              "ctx": null,
              "_testId": "urn:uuid:8d4cb3fb-bbf4-47d8-9239-97d58d47881d",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 48261,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 32,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n      const credential = credentials.clone('invalidCryptosuite');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "14gHlb_DX7G_d1mHSoz7X",
              "ctx": null,
              "_testId": "urn:uuid:8464699b-e4e0-4487-856c-d2d364097898",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 50772,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 20,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string.",
              "body": "async function() {\n      this.test.link = 'https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.';\n      const credential = credentials.clone('invalidCryptosuite');\n      await verificationFail({credential, verifier});\n    }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "jrALiK8SX9HgWL-sFlTtO",
              "ctx": null,
              "_testId": "urn:uuid:8015d992-5054-4fce-b3f1-52d93250ee72",
              "cell": {
                "columnId": "bovine",
                "rowId": "The value of the cryptosuite property MUST be a string that identifies the cryptographic suite. If the processing environment supports subtypes of string, the type of the cryptosuite value MUST be the https://w3id.org/security#cryptosuiteString subtype of string."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#introduction:~:text=The%20value%20of%20the%20cryptosuite%20property%20MUST%20be%20a%20string%20that%20identifies%20the%20cryptographic%20suite.%20If%20the%20processing%20environment%20supports%20subtypes%20of%20string%2C%20the%20type%20of%20the%20cryptosuite%20value%20MUST%20be%20the%20https%3A//w3id.org/security%23cryptosuiteString%20subtype%20of%20string.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 52548,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 96,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "An OPTIONAL string value (proof.previousProof) or unordered list of string values. Each value identifies another data integrity proof that MUST verify before the current proof is processed.",
          "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=An%20OPTIONAL%20string%20value%20or%20unordered%20list%20of%20string%20values.%20Each%20value%20identifies%20another%20data%20integrity%20proof%20that%20MUST%20verify%20before%20the%20current%20proof%20is%20processed",
          "cells": [
            {
              "type": "test",
              "title": "An OPTIONAL string value (proof.previousProof) or unordered list of string values. Each value identifies another data integrity proof that MUST verify before the current proof is processed.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=An%20OPTIONAL%20string%20value%20or%20unordered%20list%20of%20string%20values.%20Each%20value%20identifies%20another%20data%20integrity%20proof%20that%20MUST%20verify%20before%20the%20current%20proof%20is%20processed';\n        await verificationSuccess({\n          credential: credentials.clone('previousProofString'),\n          verifier,\n          reason: 'Should verify VC with a string \"proof.previousProof\".'\n        });\n        await verificationSuccess({\n          credential: credentials.clone('previousProofArray'),\n          verifier,\n          reason: 'Should verify VC with an Array \"proof.previousProof\".'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "pmPgloOAmrko-FWqqfD9b",
              "ctx": null,
              "_testId": "urn:uuid:aa88fc71-51d1-4115-a5af-ae6f371d699b",
              "cell": {
                "columnId": "ACA-py",
                "rowId": "An OPTIONAL string value (proof.previousProof) or unordered list of string values. Each value identifies another data integrity proof that MUST verify before the current proof is processed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=An%20OPTIONAL%20string%20value%20or%20unordered%20list%20of%20string%20values.%20Each%20value%20identifies%20another%20data%20integrity%20proof%20that%20MUST%20verify%20before%20the%20current%20proof%20is%20processed",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9355,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 32,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Should verify VC with a string \"proof.previousProof\".: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",\"https://w3id.org/security/data-integrity/v2\",{\"@context\":{\"AlumniCredential\":\"https://www.example.org/AlumniCredential\",\"alumniOf\":\"https://www.example.org/alumniOf\",\"description\":\"https://schema.org/description\",\"name\":\"https://schema.org/name\"}}],\"id\":\"urn:uuid:58172aac-d8ba-11ed-83dd-0b3aef56cc33\",\"type\":[\"VerifiableCredential\",\"AlumniCredential\"],\"name\":\"Alumni Credential\",\"description\":\"A minimum viable example of a VC 1.1 Alumni Credential.\",\"issuer\":\"did:key:z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E\",\"issuanceDate\":\"2023-01-01T00:00:00Z\",\"credentialSubject\":{\"id\":\"did:example:abcdefgh\",\"alumniOf\":\"The School of Examples\"},\"proof\":[{\"type\":\"DataIntegrityProof\",\"id\":\"urn:uuid:26329423-bec9-4b2e-88cb-a7c7d9dc4544\",\"cryptosuite\":\"eddsa-rdfc-2022\",\"created\":\"2023-02-26T22:06:38Z\",\"verificationMethod\":\"did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7#z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z5gL4Hy8N4B6zr9mQAGqpsry1iTdxEAp4zjqPNQv7iTvgdkMcHKnMALvPwU3YAKZhYn3k3Jmut2TAMxSaHaggFtf4\"},{\"type\":\"DataIntegrityProof\",\"cryptosuite\":\"eddsa-rdfc-2022\",\"created\":\"2023-02-26T22:16:38Z\",\"verificationMethod\":\"did:key:z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E#z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E\",\"proofPurpose\":\"assertionMethod\",\"previousProof\":\"urn:uuid:26329423-bec9-4b2e-88cb-a7c7d9dc4544\",\"proofValue\":\"z2ENoYDUK8cMMJMvwRGyHVX23pPeHaZfCgpbDFs15FXGaeFseeqzZf5nWXF14JPoBcqdr39vVPgrAUbWT2VYYacrG\"}]},\"options\":{}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          "https://w3id.org/security/data-integrity/v2",
                          {
                            "@context": {
                              "AlumniCredential": "https://www.example.org/AlumniCredential",
                              "alumniOf": "https://www.example.org/alumniOf",
                              "description": "https://schema.org/description",
                              "name": "https://schema.org/name"
                            }
                          }
                        ],
                        "id": "urn:uuid:58172aac-d8ba-11ed-83dd-0b3aef56cc33",
                        "type": [
                          "VerifiableCredential",
                          "AlumniCredential"
                        ],
                        "name": "Alumni Credential",
                        "description": "A minimum viable example of a VC 1.1 Alumni Credential.",
                        "issuer": "did:key:z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E",
                        "issuanceDate": "2023-01-01T00:00:00Z",
                        "credentialSubject": {
                          "id": "did:example:abcdefgh",
                          "alumniOf": "The School of Examples"
                        },
                        "proof": [
                          {
                            "type": "DataIntegrityProof",
                            "id": "urn:uuid:26329423-bec9-4b2e-88cb-a7c7d9dc4544",
                            "cryptosuite": "eddsa-rdfc-2022",
                            "created": "2023-02-26T22:06:38Z",
                            "verificationMethod": "did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7#z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7",
                            "proofPurpose": "assertionMethod",
                            "proofValue": "z5gL4Hy8N4B6zr9mQAGqpsry1iTdxEAp4zjqPNQv7iTvgdkMcHKnMALvPwU3YAKZhYn3k3Jmut2TAMxSaHaggFtf4"
                          },
                          {
                            "type": "DataIntegrityProof",
                            "cryptosuite": "eddsa-rdfc-2022",
                            "created": "2023-02-26T22:16:38Z",
                            "verificationMethod": "did:key:z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E#z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E",
                            "proofPurpose": "assertionMethod",
                            "previousProof": "urn:uuid:26329423-bec9-4b2e-88cb-a7c7d9dc4544",
                            "proofValue": "z2ENoYDUK8cMMJMvwRGyHVX23pPeHaZfCgpbDFs15FXGaeFseeqzZf5nWXF14JPoBcqdr39vVPgrAUbWT2VYYacrG"
                          }
                        ]
                      },
                      "options": {}
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://aca-py.test-suite.app/vc/credentials/verify",
                  "status": 422,
                  "data": {
                    "json": {
                      "verifiableCredential": {
                        "proof": {
                          "_schema": [
                            "Invalid input type."
                          ]
                        }
                      }
                    }
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Should verify VC with a string \"proof.previousProof\".: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:49:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/suites/verify.js:258:9)"
              }
            },
            {
              "type": "test",
              "title": "An OPTIONAL string value (proof.previousProof) or unordered list of string values. Each value identifies another data integrity proof that MUST verify before the current proof is processed.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=An%20OPTIONAL%20string%20value%20or%20unordered%20list%20of%20string%20values.%20Each%20value%20identifies%20another%20data%20integrity%20proof%20that%20MUST%20verify%20before%20the%20current%20proof%20is%20processed';\n        await verificationSuccess({\n          credential: credentials.clone('previousProofString'),\n          verifier,\n          reason: 'Should verify VC with a string \"proof.previousProof\".'\n        });\n        await verificationSuccess({\n          credential: credentials.clone('previousProofArray'),\n          verifier,\n          reason: 'Should verify VC with an Array \"proof.previousProof\".'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "JC5FF1IsnlSix4emI_7V_",
              "ctx": null,
              "_testId": "urn:uuid:e584a017-4ab0-4ec7-8087-3faf40c19003",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "An OPTIONAL string value (proof.previousProof) or unordered list of string values. Each value identifies another data integrity proof that MUST verify before the current proof is processed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=An%20OPTIONAL%20string%20value%20or%20unordered%20list%20of%20string%20values.%20Each%20value%20identifies%20another%20data%20integrity%20proof%20that%20MUST%20verify%20before%20the%20current%20proof%20is%20processed",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 15290,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 101,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Should verify VC with a string \"proof.previousProof\".: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",\"https://w3id.org/security/data-integrity/v2\",{\"@context\":{\"AlumniCredential\":\"https://www.example.org/AlumniCredential\",\"alumniOf\":\"https://www.example.org/alumniOf\",\"description\":\"https://schema.org/description\",\"name\":\"https://schema.org/name\"}}],\"id\":\"urn:uuid:58172aac-d8ba-11ed-83dd-0b3aef56cc33\",\"type\":[\"VerifiableCredential\",\"AlumniCredential\"],\"name\":\"Alumni Credential\",\"description\":\"A minimum viable example of a VC 1.1 Alumni Credential.\",\"issuer\":\"did:key:z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E\",\"issuanceDate\":\"2023-01-01T00:00:00Z\",\"credentialSubject\":{\"id\":\"did:example:abcdefgh\",\"alumniOf\":\"The School of Examples\"},\"proof\":[{\"type\":\"DataIntegrityProof\",\"id\":\"urn:uuid:26329423-bec9-4b2e-88cb-a7c7d9dc4544\",\"cryptosuite\":\"eddsa-rdfc-2022\",\"created\":\"2023-02-26T22:06:38Z\",\"verificationMethod\":\"did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7#z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z5gL4Hy8N4B6zr9mQAGqpsry1iTdxEAp4zjqPNQv7iTvgdkMcHKnMALvPwU3YAKZhYn3k3Jmut2TAMxSaHaggFtf4\"},{\"type\":\"DataIntegrityProof\",\"cryptosuite\":\"eddsa-rdfc-2022\",\"created\":\"2023-02-26T22:16:38Z\",\"verificationMethod\":\"did:key:z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E#z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E\",\"proofPurpose\":\"assertionMethod\",\"previousProof\":\"urn:uuid:26329423-bec9-4b2e-88cb-a7c7d9dc4544\",\"proofValue\":\"z2ENoYDUK8cMMJMvwRGyHVX23pPeHaZfCgpbDFs15FXGaeFseeqzZf5nWXF14JPoBcqdr39vVPgrAUbWT2VYYacrG\"}]},\"options\":{}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          "https://w3id.org/security/data-integrity/v2",
                          {
                            "@context": {
                              "AlumniCredential": "https://www.example.org/AlumniCredential",
                              "alumniOf": "https://www.example.org/alumniOf",
                              "description": "https://schema.org/description",
                              "name": "https://schema.org/name"
                            }
                          }
                        ],
                        "id": "urn:uuid:58172aac-d8ba-11ed-83dd-0b3aef56cc33",
                        "type": [
                          "VerifiableCredential",
                          "AlumniCredential"
                        ],
                        "name": "Alumni Credential",
                        "description": "A minimum viable example of a VC 1.1 Alumni Credential.",
                        "issuer": "did:key:z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E",
                        "issuanceDate": "2023-01-01T00:00:00Z",
                        "credentialSubject": {
                          "id": "did:example:abcdefgh",
                          "alumniOf": "The School of Examples"
                        },
                        "proof": [
                          {
                            "type": "DataIntegrityProof",
                            "id": "urn:uuid:26329423-bec9-4b2e-88cb-a7c7d9dc4544",
                            "cryptosuite": "eddsa-rdfc-2022",
                            "created": "2023-02-26T22:06:38Z",
                            "verificationMethod": "did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7#z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7",
                            "proofPurpose": "assertionMethod",
                            "proofValue": "z5gL4Hy8N4B6zr9mQAGqpsry1iTdxEAp4zjqPNQv7iTvgdkMcHKnMALvPwU3YAKZhYn3k3Jmut2TAMxSaHaggFtf4"
                          },
                          {
                            "type": "DataIntegrityProof",
                            "cryptosuite": "eddsa-rdfc-2022",
                            "created": "2023-02-26T22:16:38Z",
                            "verificationMethod": "did:key:z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E#z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E",
                            "proofPurpose": "assertionMethod",
                            "previousProof": "urn:uuid:26329423-bec9-4b2e-88cb-a7c7d9dc4544",
                            "proofValue": "z2ENoYDUK8cMMJMvwRGyHVX23pPeHaZfCgpbDFs15FXGaeFseeqzZf5nWXF14JPoBcqdr39vVPgrAUbWT2VYYacrG"
                          }
                        ]
                      },
                      "options": {}
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc.apicatalog.com/credentials/verify",
                  "status": 400,
                  "data": {
                    "checks": [
                      "PROOF"
                    ],
                    "warnings": [],
                    "errors": [
                      "MALFORMED",
                      "INVALID_DOCUMENT"
                    ]
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Should verify VC with a string \"proof.previousProof\".: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:49:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/suites/verify.js:258:9)"
              }
            },
            {
              "type": "test",
              "title": "An OPTIONAL string value (proof.previousProof) or unordered list of string values. Each value identifies another data integrity proof that MUST verify before the current proof is processed.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=An%20OPTIONAL%20string%20value%20or%20unordered%20list%20of%20string%20values.%20Each%20value%20identifies%20another%20data%20integrity%20proof%20that%20MUST%20verify%20before%20the%20current%20proof%20is%20processed';\n        await verificationSuccess({\n          credential: credentials.clone('previousProofString'),\n          verifier,\n          reason: 'Should verify VC with a string \"proof.previousProof\".'\n        });\n        await verificationSuccess({\n          credential: credentials.clone('previousProofArray'),\n          verifier,\n          reason: 'Should verify VC with an Array \"proof.previousProof\".'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "EP5_Q-cQ5glNVX4UC5cXK",
              "ctx": null,
              "_testId": "urn:uuid:06e19068-8126-4d80-b060-72962c10ad56",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "An OPTIONAL string value (proof.previousProof) or unordered list of string values. Each value identifies another data integrity proof that MUST verify before the current proof is processed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=An%20OPTIONAL%20string%20value%20or%20unordered%20list%20of%20string%20values.%20Each%20value%20identifies%20another%20data%20integrity%20proof%20that%20MUST%20verify%20before%20the%20current%20proof%20is%20processed",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 19770,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 2932,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Should verify VC with a string \"proof.previousProof\".: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          "https://w3id.org/security/data-integrity/v2",
                          {
                            "@context": {
                              "AlumniCredential": "https://www.example.org/AlumniCredential",
                              "alumniOf": "https://www.example.org/alumniOf",
                              "description": "https://schema.org/description",
                              "name": "https://schema.org/name"
                            }
                          }
                        ],
                        "id": "urn:uuid:58172aac-d8ba-11ed-83dd-0b3aef56cc33",
                        "type": [
                          "VerifiableCredential",
                          "AlumniCredential"
                        ],
                        "name": "Alumni Credential",
                        "description": "A minimum viable example of a VC 1.1 Alumni Credential.",
                        "issuer": "did:key:z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E",
                        "issuanceDate": "2023-01-01T00:00:00Z",
                        "credentialSubject": {
                          "id": "did:example:abcdefgh",
                          "alumniOf": "The School of Examples"
                        },
                        "proof": [
                          {
                            "type": "DataIntegrityProof",
                            "id": "urn:uuid:26329423-bec9-4b2e-88cb-a7c7d9dc4544",
                            "cryptosuite": "eddsa-rdfc-2022",
                            "created": "2023-02-26T22:06:38Z",
                            "verificationMethod": "did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7#z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7",
                            "proofPurpose": "assertionMethod",
                            "proofValue": "z5gL4Hy8N4B6zr9mQAGqpsry1iTdxEAp4zjqPNQv7iTvgdkMcHKnMALvPwU3YAKZhYn3k3Jmut2TAMxSaHaggFtf4"
                          },
                          {
                            "type": "DataIntegrityProof",
                            "cryptosuite": "eddsa-rdfc-2022",
                            "created": "2023-02-26T22:16:38Z",
                            "verificationMethod": "did:key:z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E#z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E",
                            "proofPurpose": "assertionMethod",
                            "previousProof": "urn:uuid:26329423-bec9-4b2e-88cb-a7c7d9dc4544",
                            "proofValue": "z2ENoYDUK8cMMJMvwRGyHVX23pPeHaZfCgpbDFs15FXGaeFseeqzZf5nWXF14JPoBcqdr39vVPgrAUbWT2VYYacrG"
                          }
                        ]
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half",
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",\"https://w3id.org/security/data-integrity/v2\",{\"@context\":{\"AlumniCredential\":\"https://www.example.org/AlumniCredential\",\"alumniOf\":\"https://www.example.org/alumniOf\",\"description\":\"https://schema.org/description\",\"name\":\"https://schema.org/name\"}}],\"id\":\"urn:uuid:58172aac-d8ba-11ed-83dd-0b3aef56cc33\",\"type\":[\"VerifiableCredential\",\"AlumniCredential\"],\"name\":\"Alumni Credential\",\"description\":\"A minimum viable example of a VC 1.1 Alumni Credential.\",\"issuer\":\"did:key:z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E\",\"issuanceDate\":\"2023-01-01T00:00:00Z\",\"credentialSubject\":{\"id\":\"did:example:abcdefgh\",\"alumniOf\":\"The School of Examples\"},\"proof\":[{\"type\":\"DataIntegrityProof\",\"id\":\"urn:uuid:26329423-bec9-4b2e-88cb-a7c7d9dc4544\",\"cryptosuite\":\"eddsa-rdfc-2022\",\"created\":\"2023-02-26T22:06:38Z\",\"verificationMethod\":\"did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7#z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z5gL4Hy8N4B6zr9mQAGqpsry1iTdxEAp4zjqPNQv7iTvgdkMcHKnMALvPwU3YAKZhYn3k3Jmut2TAMxSaHaggFtf4\"},{\"type\":\"DataIntegrityProof\",\"cryptosuite\":\"eddsa-rdfc-2022\",\"created\":\"2023-02-26T22:16:38Z\",\"verificationMethod\":\"did:key:z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E#z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E\",\"proofPurpose\":\"assertionMethod\",\"previousProof\":\"urn:uuid:26329423-bec9-4b2e-88cb-a7c7d9dc4544\",\"proofValue\":\"z2ENoYDUK8cMMJMvwRGyHVX23pPeHaZfCgpbDFs15FXGaeFseeqzZf5nWXF14JPoBcqdr39vVPgrAUbWT2VYYacrG\"}]},\"options\":{\"checks\":[\"proof\"]}}"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc2.veresverifier.dev/verifiers/z19w7KofwvE2nkJeRVLp8NDxz/credentials/verify",
                  "status": 400,
                  "data": {
                    "verified": false,
                    "results": [
                      {
                        "proof": {
                          "@context": [
                            "https://www.w3.org/2018/credentials/v1",
                            "https://w3id.org/security/data-integrity/v2",
                            {
                              "@context": {
                                "AlumniCredential": "https://www.example.org/AlumniCredential",
                                "alumniOf": "https://www.example.org/alumniOf",
                                "description": "https://schema.org/description",
                                "name": "https://schema.org/name"
                              }
                            }
                          ],
                          "type": "DataIntegrityProof",
                          "id": "urn:uuid:26329423-bec9-4b2e-88cb-a7c7d9dc4544",
                          "cryptosuite": "eddsa-rdfc-2022",
                          "created": "2023-02-26T22:06:38Z",
                          "verificationMethod": "did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7#z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "z5gL4Hy8N4B6zr9mQAGqpsry1iTdxEAp4zjqPNQv7iTvgdkMcHKnMALvPwU3YAKZhYn3k3Jmut2TAMxSaHaggFtf4"
                        },
                        "verified": false,
                        "verificationMethod": {
                          "@context": "https://w3id.org/security/suites/ed25519-2020/v1",
                          "id": "did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7#z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7",
                          "type": "Ed25519VerificationKey2020",
                          "controller": "did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7",
                          "publicKeyMultibase": "z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7"
                        },
                        "error": {
                          "name": "VerificationError",
                          "message": "Credential issuer must match the verification method controller."
                        },
                        "purposeResult": {
                          "valid": false,
                          "error": {
                            "name": "Error",
                            "message": "Credential issuer must match the verification method controller.",
                            "stack": "Error: Credential issuer must match the verification method controller.\n    at CredentialIssuancePurpose.validate (file:///home/node/app/node_modules/@digitalbazaar/vc/lib/CredentialIssuancePurpose.js:70:15)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async /home/node/app/node_modules/jsonld-signatures/lib/ProofSet.js:301:27\n    at async Promise.all (index 0)\n    at async _verify (/home/node/app/node_modules/jsonld-signatures/lib/ProofSet.js:287:3)\n    at async ProofSet.verify (/home/node/app/node_modules/jsonld-signatures/lib/ProofSet.js:191:23)\n    at async Object.verify (/home/node/app/node_modules/jsonld-signatures/lib/jsonld-signatures.js:169:18)\n    at async _verifyCredential (file:///home/node/app/node_modules/@digitalbazaar/vc/lib/index.js:328:18)\n    at async Module.verifyCredential (file:///home/node/app/node_modules/@digitalbazaar/vc/lib/index.js:277:12)\n    at async Module.verifyCredential (file:///home/node/app/node_modules/@bedrock/vc-verifier/lib/di.js:13:18)"
                          }
                        }
                      },
                      {
                        "proof": {
                          "@context": [
                            "https://www.w3.org/2018/credentials/v1",
                            "https://w3id.org/security/data-integrity/v2",
                            {
                              "@context": {
                                "AlumniCredential": "https://www.example.org/AlumniCredential",
                                "alumniOf": "https://www.example.org/alumniOf",
                                "description": "https://schema.org/description",
                                "name": "https://schema.org/name"
                              }
                            }
                          ],
                          "type": "DataIntegrityProof",
                          "cryptosuite": "eddsa-rdfc-2022",
                          "created": "2023-02-26T22:16:38Z",
                          "verificationMethod": "did:key:z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E#z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E",
                          "proofPurpose": "assertionMethod",
                          "previousProof": "urn:uuid:26329423-bec9-4b2e-88cb-a7c7d9dc4544",
                          "proofValue": "z2ENoYDUK8cMMJMvwRGyHVX23pPeHaZfCgpbDFs15FXGaeFseeqzZf5nWXF14JPoBcqdr39vVPgrAUbWT2VYYacrG"
                        },
                        "verified": false,
                        "error": {
                          "name": "VerificationError",
                          "message": "Invalid signature."
                        }
                      }
                    ],
                    "error": {
                      "name": "VerificationError",
                      "errors": [
                        {
                          "name": "Error",
                          "message": "Credential issuer must match the verification method controller.",
                          "stack": "Error: Credential issuer must match the verification method controller.\n    at CredentialIssuancePurpose.validate (file:///home/node/app/node_modules/@digitalbazaar/vc/lib/CredentialIssuancePurpose.js:70:15)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async /home/node/app/node_modules/jsonld-signatures/lib/ProofSet.js:301:27\n    at async Promise.all (index 0)\n    at async _verify (/home/node/app/node_modules/jsonld-signatures/lib/ProofSet.js:287:3)\n    at async ProofSet.verify (/home/node/app/node_modules/jsonld-signatures/lib/ProofSet.js:191:23)\n    at async Object.verify (/home/node/app/node_modules/jsonld-signatures/lib/jsonld-signatures.js:169:18)\n    at async _verifyCredential (file:///home/node/app/node_modules/@digitalbazaar/vc/lib/index.js:328:18)\n    at async Module.verifyCredential (file:///home/node/app/node_modules/@digitalbazaar/vc/lib/index.js:277:12)\n    at async Module.verifyCredential (file:///home/node/app/node_modules/@bedrock/vc-verifier/lib/di.js:13:18)"
                        },
                        {
                          "name": "Error",
                          "message": "Invalid signature.",
                          "stack": "Error: Invalid signature.\n    at DataIntegrityProof.verifyProof (file:///home/node/app/node_modules/@digitalbazaar/data-integrity/lib/DataIntegrityProof.js:293:15)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async /home/node/app/node_modules/jsonld-signatures/lib/ProofSet.js:268:53\n    at async Promise.all (index 1)\n    at async _verify (/home/node/app/node_modules/jsonld-signatures/lib/ProofSet.js:256:3)\n    at async ProofSet.verify (/home/node/app/node_modules/jsonld-signatures/lib/ProofSet.js:191:23)\n    at async Object.verify (/home/node/app/node_modules/jsonld-signatures/lib/jsonld-signatures.js:169:18)\n    at async _verifyCredential (file:///home/node/app/node_modules/@digitalbazaar/vc/lib/index.js:328:18)\n    at async Module.verifyCredential (file:///home/node/app/node_modules/@digitalbazaar/vc/lib/index.js:277:12)\n    at async Module.verifyCredential (file:///home/node/app/node_modules/@bedrock/vc-verifier/lib/di.js:13:18)"
                        }
                      ],
                      "message": "Verification error(s)."
                    },
                    "checks": [
                      {
                        "check": [
                          "proof"
                        ],
                        "id": "urn:uuid:58172aac-d8ba-11ed-83dd-0b3aef56cc33",
                        "error": "Credential issuer must match the verification method controller.",
                        "verificationMethod": "did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7#z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7"
                      }
                    ]
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Should verify VC with a string \"proof.previousProof\".: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:49:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/suites/verify.js:258:9)"
              }
            },
            {
              "type": "test",
              "title": "An OPTIONAL string value (proof.previousProof) or unordered list of string values. Each value identifies another data integrity proof that MUST verify before the current proof is processed.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=An%20OPTIONAL%20string%20value%20or%20unordered%20list%20of%20string%20values.%20Each%20value%20identifies%20another%20data%20integrity%20proof%20that%20MUST%20verify%20before%20the%20current%20proof%20is%20processed';\n        await verificationSuccess({\n          credential: credentials.clone('previousProofString'),\n          verifier,\n          reason: 'Should verify VC with a string \"proof.previousProof\".'\n        });\n        await verificationSuccess({\n          credential: credentials.clone('previousProofArray'),\n          verifier,\n          reason: 'Should verify VC with an Array \"proof.previousProof\".'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "lmbuuoAHfSurepTV_1j1g",
              "ctx": null,
              "_testId": "urn:uuid:8e36ba3e-b90e-4741-8e65-33f2dc38549f",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "An OPTIONAL string value (proof.previousProof) or unordered list of string values. Each value identifies another data integrity proof that MUST verify before the current proof is processed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=An%20OPTIONAL%20string%20value%20or%20unordered%20list%20of%20string%20values.%20Each%20value%20identifies%20another%20data%20integrity%20proof%20that%20MUST%20verify%20before%20the%20current%20proof%20is%20processed",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 31553,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 9335,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "An OPTIONAL string value (proof.previousProof) or unordered list of string values. Each value identifies another data integrity proof that MUST verify before the current proof is processed.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=An%20OPTIONAL%20string%20value%20or%20unordered%20list%20of%20string%20values.%20Each%20value%20identifies%20another%20data%20integrity%20proof%20that%20MUST%20verify%20before%20the%20current%20proof%20is%20processed';\n        await verificationSuccess({\n          credential: credentials.clone('previousProofString'),\n          verifier,\n          reason: 'Should verify VC with a string \"proof.previousProof\".'\n        });\n        await verificationSuccess({\n          credential: credentials.clone('previousProofArray'),\n          verifier,\n          reason: 'Should verify VC with an Array \"proof.previousProof\".'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "XlfRRByHzOzFyqDvhYKAc",
              "ctx": null,
              "_testId": "urn:uuid:afa9ec08-f7f1-4e92-810d-c521749acdb1",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "An OPTIONAL string value (proof.previousProof) or unordered list of string values. Each value identifies another data integrity proof that MUST verify before the current proof is processed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=An%20OPTIONAL%20string%20value%20or%20unordered%20list%20of%20string%20values.%20Each%20value%20identifies%20another%20data%20integrity%20proof%20that%20MUST%20verify%20before%20the%20current%20proof%20is%20processed",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 47291,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 101,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Should verify VC with a string \"proof.previousProof\".: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",\"https://w3id.org/security/data-integrity/v2\",{\"@context\":{\"AlumniCredential\":\"https://www.example.org/AlumniCredential\",\"alumniOf\":\"https://www.example.org/alumniOf\",\"description\":\"https://schema.org/description\",\"name\":\"https://schema.org/name\"}}],\"id\":\"urn:uuid:58172aac-d8ba-11ed-83dd-0b3aef56cc33\",\"type\":[\"VerifiableCredential\",\"AlumniCredential\"],\"name\":\"Alumni Credential\",\"description\":\"A minimum viable example of a VC 1.1 Alumni Credential.\",\"issuer\":\"did:key:z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E\",\"issuanceDate\":\"2023-01-01T00:00:00Z\",\"credentialSubject\":{\"id\":\"did:example:abcdefgh\",\"alumniOf\":\"The School of Examples\"},\"proof\":[{\"type\":\"DataIntegrityProof\",\"id\":\"urn:uuid:26329423-bec9-4b2e-88cb-a7c7d9dc4544\",\"cryptosuite\":\"eddsa-rdfc-2022\",\"created\":\"2023-02-26T22:06:38Z\",\"verificationMethod\":\"did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7#z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z5gL4Hy8N4B6zr9mQAGqpsry1iTdxEAp4zjqPNQv7iTvgdkMcHKnMALvPwU3YAKZhYn3k3Jmut2TAMxSaHaggFtf4\"},{\"type\":\"DataIntegrityProof\",\"cryptosuite\":\"eddsa-rdfc-2022\",\"created\":\"2023-02-26T22:16:38Z\",\"verificationMethod\":\"did:key:z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E#z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E\",\"proofPurpose\":\"assertionMethod\",\"previousProof\":\"urn:uuid:26329423-bec9-4b2e-88cb-a7c7d9dc4544\",\"proofValue\":\"z2ENoYDUK8cMMJMvwRGyHVX23pPeHaZfCgpbDFs15FXGaeFseeqzZf5nWXF14JPoBcqdr39vVPgrAUbWT2VYYacrG\"}]},\"options\":{\"checks\":[],\"credentialFormat\":\"JSON_LD_CLASSIC\"}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          "https://w3id.org/security/data-integrity/v2",
                          {
                            "@context": {
                              "AlumniCredential": "https://www.example.org/AlumniCredential",
                              "alumniOf": "https://www.example.org/alumniOf",
                              "description": "https://schema.org/description",
                              "name": "https://schema.org/name"
                            }
                          }
                        ],
                        "id": "urn:uuid:58172aac-d8ba-11ed-83dd-0b3aef56cc33",
                        "type": [
                          "VerifiableCredential",
                          "AlumniCredential"
                        ],
                        "name": "Alumni Credential",
                        "description": "A minimum viable example of a VC 1.1 Alumni Credential.",
                        "issuer": "did:key:z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E",
                        "issuanceDate": "2023-01-01T00:00:00Z",
                        "credentialSubject": {
                          "id": "did:example:abcdefgh",
                          "alumniOf": "The School of Examples"
                        },
                        "proof": [
                          {
                            "type": "DataIntegrityProof",
                            "id": "urn:uuid:26329423-bec9-4b2e-88cb-a7c7d9dc4544",
                            "cryptosuite": "eddsa-rdfc-2022",
                            "created": "2023-02-26T22:06:38Z",
                            "verificationMethod": "did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7#z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7",
                            "proofPurpose": "assertionMethod",
                            "proofValue": "z5gL4Hy8N4B6zr9mQAGqpsry1iTdxEAp4zjqPNQv7iTvgdkMcHKnMALvPwU3YAKZhYn3k3Jmut2TAMxSaHaggFtf4"
                          },
                          {
                            "type": "DataIntegrityProof",
                            "cryptosuite": "eddsa-rdfc-2022",
                            "created": "2023-02-26T22:16:38Z",
                            "verificationMethod": "did:key:z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E#z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E",
                            "proofPurpose": "assertionMethod",
                            "previousProof": "urn:uuid:26329423-bec9-4b2e-88cb-a7c7d9dc4544",
                            "proofValue": "z2ENoYDUK8cMMJMvwRGyHVX23pPeHaZfCgpbDFs15FXGaeFseeqzZf5nWXF14JPoBcqdr39vVPgrAUbWT2VYYacrG"
                          }
                        ]
                      },
                      "options": {
                        "checks": [],
                        "credentialFormat": "JSON_LD_CLASSIC"
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://core.test.procivis-one.com/vc-api/credentials/verify",
                  "status": 400,
                  "data": {
                    "errors": [
                      {
                        "status": 400,
                        "title": "Failed to deserialize the JSON body into the target type",
                        "detail": null
                      }
                    ]
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Should verify VC with a string \"proof.previousProof\".: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:49:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/suites/verify.js:258:9)"
              }
            },
            {
              "type": "test",
              "title": "An OPTIONAL string value (proof.previousProof) or unordered list of string values. Each value identifies another data integrity proof that MUST verify before the current proof is processed.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=An%20OPTIONAL%20string%20value%20or%20unordered%20list%20of%20string%20values.%20Each%20value%20identifies%20another%20data%20integrity%20proof%20that%20MUST%20verify%20before%20the%20current%20proof%20is%20processed';\n        await verificationSuccess({\n          credential: credentials.clone('previousProofString'),\n          verifier,\n          reason: 'Should verify VC with a string \"proof.previousProof\".'\n        });\n        await verificationSuccess({\n          credential: credentials.clone('previousProofArray'),\n          verifier,\n          reason: 'Should verify VC with an Array \"proof.previousProof\".'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "aiQ0OlclMX_yZkn2nkDg9",
              "ctx": null,
              "_testId": "urn:uuid:f10f87f3-0126-4b5c-973e-b3d0c791682d",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "An OPTIONAL string value (proof.previousProof) or unordered list of string values. Each value identifies another data integrity proof that MUST verify before the current proof is processed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=An%20OPTIONAL%20string%20value%20or%20unordered%20list%20of%20string%20values.%20Each%20value%20identifies%20another%20data%20integrity%20proof%20that%20MUST%20verify%20before%20the%20current%20proof%20is%20processed",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 48292,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 24,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Should verify VC with a string \"proof.previousProof\".: expected HTTPError: Request failed with status cod… { …(5) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",\"https://w3id.org/security/data-integrity/v2\",{\"@context\":{\"AlumniCredential\":\"https://www.example.org/AlumniCredential\",\"alumniOf\":\"https://www.example.org/alumniOf\",\"description\":\"https://schema.org/description\",\"name\":\"https://schema.org/name\"}}],\"id\":\"urn:uuid:58172aac-d8ba-11ed-83dd-0b3aef56cc33\",\"type\":[\"VerifiableCredential\",\"AlumniCredential\"],\"name\":\"Alumni Credential\",\"description\":\"A minimum viable example of a VC 1.1 Alumni Credential.\",\"issuer\":\"did:key:z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E\",\"issuanceDate\":\"2023-01-01T00:00:00Z\",\"credentialSubject\":{\"id\":\"did:example:abcdefgh\",\"alumniOf\":\"The School of Examples\"},\"proof\":[{\"type\":\"DataIntegrityProof\",\"id\":\"urn:uuid:26329423-bec9-4b2e-88cb-a7c7d9dc4544\",\"cryptosuite\":\"eddsa-rdfc-2022\",\"created\":\"2023-02-26T22:06:38Z\",\"verificationMethod\":\"did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7#z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z5gL4Hy8N4B6zr9mQAGqpsry1iTdxEAp4zjqPNQv7iTvgdkMcHKnMALvPwU3YAKZhYn3k3Jmut2TAMxSaHaggFtf4\"},{\"type\":\"DataIntegrityProof\",\"cryptosuite\":\"eddsa-rdfc-2022\",\"created\":\"2023-02-26T22:16:38Z\",\"verificationMethod\":\"did:key:z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E#z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E\",\"proofPurpose\":\"assertionMethod\",\"previousProof\":\"urn:uuid:26329423-bec9-4b2e-88cb-a7c7d9dc4544\",\"proofValue\":\"z2ENoYDUK8cMMJMvwRGyHVX23pPeHaZfCgpbDFs15FXGaeFseeqzZf5nWXF14JPoBcqdr39vVPgrAUbWT2VYYacrG\"}]},\"options\":{}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          "https://w3id.org/security/data-integrity/v2",
                          {
                            "@context": {
                              "AlumniCredential": "https://www.example.org/AlumniCredential",
                              "alumniOf": "https://www.example.org/alumniOf",
                              "description": "https://schema.org/description",
                              "name": "https://schema.org/name"
                            }
                          }
                        ],
                        "id": "urn:uuid:58172aac-d8ba-11ed-83dd-0b3aef56cc33",
                        "type": [
                          "VerifiableCredential",
                          "AlumniCredential"
                        ],
                        "name": "Alumni Credential",
                        "description": "A minimum viable example of a VC 1.1 Alumni Credential.",
                        "issuer": "did:key:z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E",
                        "issuanceDate": "2023-01-01T00:00:00Z",
                        "credentialSubject": {
                          "id": "did:example:abcdefgh",
                          "alumniOf": "The School of Examples"
                        },
                        "proof": [
                          {
                            "type": "DataIntegrityProof",
                            "id": "urn:uuid:26329423-bec9-4b2e-88cb-a7c7d9dc4544",
                            "cryptosuite": "eddsa-rdfc-2022",
                            "created": "2023-02-26T22:06:38Z",
                            "verificationMethod": "did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7#z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7",
                            "proofPurpose": "assertionMethod",
                            "proofValue": "z5gL4Hy8N4B6zr9mQAGqpsry1iTdxEAp4zjqPNQv7iTvgdkMcHKnMALvPwU3YAKZhYn3k3Jmut2TAMxSaHaggFtf4"
                          },
                          {
                            "type": "DataIntegrityProof",
                            "cryptosuite": "eddsa-rdfc-2022",
                            "created": "2023-02-26T22:16:38Z",
                            "verificationMethod": "did:key:z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E#z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E",
                            "proofPurpose": "assertionMethod",
                            "previousProof": "urn:uuid:26329423-bec9-4b2e-88cb-a7c7d9dc4544",
                            "proofValue": "z2ENoYDUK8cMMJMvwRGyHVX23pPeHaZfCgpbDFs15FXGaeFseeqzZf5nWXF14JPoBcqdr39vVPgrAUbWT2VYYacrG"
                          }
                        ]
                      },
                      "options": {}
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc.spruceid.xyz/credentials/verify",
                  "status": 400
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Should verify VC with a string \"proof.previousProof\".: expected HTTPError: Request failed with status cod… { …(5) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:49:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/suites/verify.js:258:9)"
              }
            },
            {
              "type": "test",
              "title": "An OPTIONAL string value (proof.previousProof) or unordered list of string values. Each value identifies another data integrity proof that MUST verify before the current proof is processed.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=An%20OPTIONAL%20string%20value%20or%20unordered%20list%20of%20string%20values.%20Each%20value%20identifies%20another%20data%20integrity%20proof%20that%20MUST%20verify%20before%20the%20current%20proof%20is%20processed';\n        await verificationSuccess({\n          credential: credentials.clone('previousProofString'),\n          verifier,\n          reason: 'Should verify VC with a string \"proof.previousProof\".'\n        });\n        await verificationSuccess({\n          credential: credentials.clone('previousProofArray'),\n          verifier,\n          reason: 'Should verify VC with an Array \"proof.previousProof\".'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "14gHlb_DX7G_d1mHSoz7X",
              "ctx": null,
              "_testId": "urn:uuid:2f535a2a-2948-41e4-8810-6ffea119976a",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "An OPTIONAL string value (proof.previousProof) or unordered list of string values. Each value identifies another data integrity proof that MUST verify before the current proof is processed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=An%20OPTIONAL%20string%20value%20or%20unordered%20list%20of%20string%20values.%20Each%20value%20identifies%20another%20data%20integrity%20proof%20that%20MUST%20verify%20before%20the%20current%20proof%20is%20processed",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 50792,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 20,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Should verify VC with a string \"proof.previousProof\".: expected HTTPError: Request failed with status cod… { …(5) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",\"https://w3id.org/security/data-integrity/v2\",{\"@context\":{\"AlumniCredential\":\"https://www.example.org/AlumniCredential\",\"alumniOf\":\"https://www.example.org/alumniOf\",\"description\":\"https://schema.org/description\",\"name\":\"https://schema.org/name\"}}],\"id\":\"urn:uuid:58172aac-d8ba-11ed-83dd-0b3aef56cc33\",\"type\":[\"VerifiableCredential\",\"AlumniCredential\"],\"name\":\"Alumni Credential\",\"description\":\"A minimum viable example of a VC 1.1 Alumni Credential.\",\"issuer\":\"did:key:z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E\",\"issuanceDate\":\"2023-01-01T00:00:00Z\",\"credentialSubject\":{\"id\":\"did:example:abcdefgh\",\"alumniOf\":\"The School of Examples\"},\"proof\":[{\"type\":\"DataIntegrityProof\",\"id\":\"urn:uuid:26329423-bec9-4b2e-88cb-a7c7d9dc4544\",\"cryptosuite\":\"eddsa-rdfc-2022\",\"created\":\"2023-02-26T22:06:38Z\",\"verificationMethod\":\"did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7#z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z5gL4Hy8N4B6zr9mQAGqpsry1iTdxEAp4zjqPNQv7iTvgdkMcHKnMALvPwU3YAKZhYn3k3Jmut2TAMxSaHaggFtf4\"},{\"type\":\"DataIntegrityProof\",\"cryptosuite\":\"eddsa-rdfc-2022\",\"created\":\"2023-02-26T22:16:38Z\",\"verificationMethod\":\"did:key:z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E#z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E\",\"proofPurpose\":\"assertionMethod\",\"previousProof\":\"urn:uuid:26329423-bec9-4b2e-88cb-a7c7d9dc4544\",\"proofValue\":\"z2ENoYDUK8cMMJMvwRGyHVX23pPeHaZfCgpbDFs15FXGaeFseeqzZf5nWXF14JPoBcqdr39vVPgrAUbWT2VYYacrG\"}]},\"options\":{}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          "https://w3id.org/security/data-integrity/v2",
                          {
                            "@context": {
                              "AlumniCredential": "https://www.example.org/AlumniCredential",
                              "alumniOf": "https://www.example.org/alumniOf",
                              "description": "https://schema.org/description",
                              "name": "https://schema.org/name"
                            }
                          }
                        ],
                        "id": "urn:uuid:58172aac-d8ba-11ed-83dd-0b3aef56cc33",
                        "type": [
                          "VerifiableCredential",
                          "AlumniCredential"
                        ],
                        "name": "Alumni Credential",
                        "description": "A minimum viable example of a VC 1.1 Alumni Credential.",
                        "issuer": "did:key:z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E",
                        "issuanceDate": "2023-01-01T00:00:00Z",
                        "credentialSubject": {
                          "id": "did:example:abcdefgh",
                          "alumniOf": "The School of Examples"
                        },
                        "proof": [
                          {
                            "type": "DataIntegrityProof",
                            "id": "urn:uuid:26329423-bec9-4b2e-88cb-a7c7d9dc4544",
                            "cryptosuite": "eddsa-rdfc-2022",
                            "created": "2023-02-26T22:06:38Z",
                            "verificationMethod": "did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7#z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7",
                            "proofPurpose": "assertionMethod",
                            "proofValue": "z5gL4Hy8N4B6zr9mQAGqpsry1iTdxEAp4zjqPNQv7iTvgdkMcHKnMALvPwU3YAKZhYn3k3Jmut2TAMxSaHaggFtf4"
                          },
                          {
                            "type": "DataIntegrityProof",
                            "cryptosuite": "eddsa-rdfc-2022",
                            "created": "2023-02-26T22:16:38Z",
                            "verificationMethod": "did:key:z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E#z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E",
                            "proofPurpose": "assertionMethod",
                            "previousProof": "urn:uuid:26329423-bec9-4b2e-88cb-a7c7d9dc4544",
                            "proofValue": "z2ENoYDUK8cMMJMvwRGyHVX23pPeHaZfCgpbDFs15FXGaeFseeqzZf5nWXF14JPoBcqdr39vVPgrAUbWT2VYYacrG"
                          }
                        ]
                      },
                      "options": {}
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://interop.connect.trinsic.cloud/vc-api/credentials/verify",
                  "status": 400
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Should verify VC with a string \"proof.previousProof\".: expected HTTPError: Request failed with status cod… { …(5) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:49:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/suites/verify.js:258:9)"
              }
            },
            {
              "type": "test",
              "title": "An OPTIONAL string value (proof.previousProof) or unordered list of string values. Each value identifies another data integrity proof that MUST verify before the current proof is processed.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=An%20OPTIONAL%20string%20value%20or%20unordered%20list%20of%20string%20values.%20Each%20value%20identifies%20another%20data%20integrity%20proof%20that%20MUST%20verify%20before%20the%20current%20proof%20is%20processed';\n        await verificationSuccess({\n          credential: credentials.clone('previousProofString'),\n          verifier,\n          reason: 'Should verify VC with a string \"proof.previousProof\".'\n        });\n        await verificationSuccess({\n          credential: credentials.clone('previousProofArray'),\n          verifier,\n          reason: 'Should verify VC with an Array \"proof.previousProof\".'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "jrALiK8SX9HgWL-sFlTtO",
              "ctx": null,
              "_testId": "urn:uuid:e271ac81-98de-46ef-bf3b-f303249b4c8f",
              "cell": {
                "columnId": "bovine",
                "rowId": "An OPTIONAL string value (proof.previousProof) or unordered list of string values. Each value identifies another data integrity proof that MUST verify before the current proof is processed."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=An%20OPTIONAL%20string%20value%20or%20unordered%20list%20of%20string%20values.%20Each%20value%20identifies%20another%20data%20integrity%20proof%20that%20MUST%20verify%20before%20the%20current%20proof%20is%20processed",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 52644,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 97,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Should verify VC with a string \"proof.previousProof\".: expected HTTPError: Request failed with status cod… { …(5) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",\"https://w3id.org/security/data-integrity/v2\",{\"@context\":{\"AlumniCredential\":\"https://www.example.org/AlumniCredential\",\"alumniOf\":\"https://www.example.org/alumniOf\",\"description\":\"https://schema.org/description\",\"name\":\"https://schema.org/name\"}}],\"id\":\"urn:uuid:58172aac-d8ba-11ed-83dd-0b3aef56cc33\",\"type\":[\"VerifiableCredential\",\"AlumniCredential\"],\"name\":\"Alumni Credential\",\"description\":\"A minimum viable example of a VC 1.1 Alumni Credential.\",\"issuer\":\"did:key:z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E\",\"issuanceDate\":\"2023-01-01T00:00:00Z\",\"credentialSubject\":{\"id\":\"did:example:abcdefgh\",\"alumniOf\":\"The School of Examples\"},\"proof\":[{\"type\":\"DataIntegrityProof\",\"id\":\"urn:uuid:26329423-bec9-4b2e-88cb-a7c7d9dc4544\",\"cryptosuite\":\"eddsa-rdfc-2022\",\"created\":\"2023-02-26T22:06:38Z\",\"verificationMethod\":\"did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7#z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z5gL4Hy8N4B6zr9mQAGqpsry1iTdxEAp4zjqPNQv7iTvgdkMcHKnMALvPwU3YAKZhYn3k3Jmut2TAMxSaHaggFtf4\"},{\"type\":\"DataIntegrityProof\",\"cryptosuite\":\"eddsa-rdfc-2022\",\"created\":\"2023-02-26T22:16:38Z\",\"verificationMethod\":\"did:key:z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E#z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E\",\"proofPurpose\":\"assertionMethod\",\"previousProof\":\"urn:uuid:26329423-bec9-4b2e-88cb-a7c7d9dc4544\",\"proofValue\":\"z2ENoYDUK8cMMJMvwRGyHVX23pPeHaZfCgpbDFs15FXGaeFseeqzZf5nWXF14JPoBcqdr39vVPgrAUbWT2VYYacrG\"}]},\"options\":{}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          "https://w3id.org/security/data-integrity/v2",
                          {
                            "@context": {
                              "AlumniCredential": "https://www.example.org/AlumniCredential",
                              "alumniOf": "https://www.example.org/alumniOf",
                              "description": "https://schema.org/description",
                              "name": "https://schema.org/name"
                            }
                          }
                        ],
                        "id": "urn:uuid:58172aac-d8ba-11ed-83dd-0b3aef56cc33",
                        "type": [
                          "VerifiableCredential",
                          "AlumniCredential"
                        ],
                        "name": "Alumni Credential",
                        "description": "A minimum viable example of a VC 1.1 Alumni Credential.",
                        "issuer": "did:key:z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E",
                        "issuanceDate": "2023-01-01T00:00:00Z",
                        "credentialSubject": {
                          "id": "did:example:abcdefgh",
                          "alumniOf": "The School of Examples"
                        },
                        "proof": [
                          {
                            "type": "DataIntegrityProof",
                            "id": "urn:uuid:26329423-bec9-4b2e-88cb-a7c7d9dc4544",
                            "cryptosuite": "eddsa-rdfc-2022",
                            "created": "2023-02-26T22:06:38Z",
                            "verificationMethod": "did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7#z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7",
                            "proofPurpose": "assertionMethod",
                            "proofValue": "z5gL4Hy8N4B6zr9mQAGqpsry1iTdxEAp4zjqPNQv7iTvgdkMcHKnMALvPwU3YAKZhYn3k3Jmut2TAMxSaHaggFtf4"
                          },
                          {
                            "type": "DataIntegrityProof",
                            "cryptosuite": "eddsa-rdfc-2022",
                            "created": "2023-02-26T22:16:38Z",
                            "verificationMethod": "did:key:z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E#z6MkhWqdDBPojHA7cprTGTt5yHv5yUi1B8cnXn8ReLumkw6E",
                            "proofPurpose": "assertionMethod",
                            "previousProof": "urn:uuid:26329423-bec9-4b2e-88cb-a7c7d9dc4544",
                            "proofValue": "z2ENoYDUK8cMMJMvwRGyHVX23pPeHaZfCgpbDFs15FXGaeFseeqzZf5nWXF14JPoBcqdr39vVPgrAUbWT2VYYacrG"
                          }
                        ]
                      },
                      "options": {}
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://bovine.social/w3c-di/verify",
                  "status": 400
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Should verify VC with a string \"proof.previousProof\".: expected HTTPError: Request failed with status cod… { …(5) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:49:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/suites/verify.js:258:9)"
              }
            }
          ]
        },
        {
          "id": "If an unordered list (proof), all referenced proofs in the array MUST verify.",
          "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=If%20an%20unordered%20list%2C%20all%20referenced%20proofs%20in%20the%20array%20MUST%20verify",
          "cells": [
            {
              "type": "test",
              "title": "If an unordered list (proof), all referenced proofs in the array MUST verify.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=If%20an%20unordered%20list%2C%20all%20referenced%20proofs%20in%20the%20array%20MUST%20verify';\n        await verificationSuccess({\n          credential: credentials.clone('proofSet'),\n          verifier,\n          reason: 'Should verify VC with multiple proofs.'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "pmPgloOAmrko-FWqqfD9b",
              "ctx": null,
              "_testId": "urn:uuid:d6cd8487-0d74-4241-8c6a-6ff1f0178df1",
              "cell": {
                "columnId": "ACA-py",
                "rowId": "If an unordered list (proof), all referenced proofs in the array MUST verify."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=If%20an%20unordered%20list%2C%20all%20referenced%20proofs%20in%20the%20array%20MUST%20verify",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9388,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 30,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Should verify VC with multiple proofs.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",\"https://w3id.org/security/data-integrity/v2\"],\"id\":\"urn:uuid:86294362-4254-4f36-854f-3952fe42555d\",\"type\":[\"VerifiableCredential\"],\"issuer\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\",\"issuanceDate\":\"2020-03-16T22:37:26.544Z\",\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\"},\"proof\":[{\"type\":\"DataIntegrityProof\",\"created\":\"2024-10-13T05:06:31Z\",\"verificationMethod\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b#z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\",\"cryptosuite\":\"eddsa-rdfc-2022\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"zFZsqQshxdr7ULJqMuBZW8NGyYps8XZWptEdk7GiNyPQRru8mESKusBYepYD4u3nfa3dNcufyrwF7HVy2CGgdngn\"},{\"type\":\"DataIntegrityProof\",\"created\":\"2024-10-13T05:06:31Z\",\"verificationMethod\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b#z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\",\"cryptosuite\":\"eddsa-rdfc-2022\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"zFZsqQshxdr7ULJqMuBZW8NGyYps8XZWptEdk7GiNyPQRru8mESKusBYepYD4u3nfa3dNcufyrwF7HVy2CGgdngn\"}]},\"options\":{}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          "https://w3id.org/security/data-integrity/v2"
                        ],
                        "id": "urn:uuid:86294362-4254-4f36-854f-3952fe42555d",
                        "type": [
                          "VerifiableCredential"
                        ],
                        "issuer": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b",
                        "issuanceDate": "2020-03-16T22:37:26.544Z",
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                        },
                        "proof": [
                          {
                            "type": "DataIntegrityProof",
                            "created": "2024-10-13T05:06:31Z",
                            "verificationMethod": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b#z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b",
                            "cryptosuite": "eddsa-rdfc-2022",
                            "proofPurpose": "assertionMethod",
                            "proofValue": "zFZsqQshxdr7ULJqMuBZW8NGyYps8XZWptEdk7GiNyPQRru8mESKusBYepYD4u3nfa3dNcufyrwF7HVy2CGgdngn"
                          },
                          {
                            "type": "DataIntegrityProof",
                            "created": "2024-10-13T05:06:31Z",
                            "verificationMethod": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b#z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b",
                            "cryptosuite": "eddsa-rdfc-2022",
                            "proofPurpose": "assertionMethod",
                            "proofValue": "zFZsqQshxdr7ULJqMuBZW8NGyYps8XZWptEdk7GiNyPQRru8mESKusBYepYD4u3nfa3dNcufyrwF7HVy2CGgdngn"
                          }
                        ]
                      },
                      "options": {}
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://aca-py.test-suite.app/vc/credentials/verify",
                  "status": 422,
                  "data": {
                    "json": {
                      "verifiableCredential": {
                        "proof": {
                          "_schema": [
                            "Invalid input type."
                          ]
                        }
                      }
                    }
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Should verify VC with multiple proofs.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:49:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/suites/verify.js:272:9)"
              }
            },
            {
              "type": "test",
              "title": "If an unordered list (proof), all referenced proofs in the array MUST verify.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=If%20an%20unordered%20list%2C%20all%20referenced%20proofs%20in%20the%20array%20MUST%20verify';\n        await verificationSuccess({\n          credential: credentials.clone('proofSet'),\n          verifier,\n          reason: 'Should verify VC with multiple proofs.'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "JC5FF1IsnlSix4emI_7V_",
              "ctx": null,
              "_testId": "urn:uuid:fb962519-a832-40a3-825c-c67a8026682a",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If an unordered list (proof), all referenced proofs in the array MUST verify."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=If%20an%20unordered%20list%2C%20all%20referenced%20proofs%20in%20the%20array%20MUST%20verify",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 15392,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 107,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If an unordered list (proof), all referenced proofs in the array MUST verify.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=If%20an%20unordered%20list%2C%20all%20referenced%20proofs%20in%20the%20array%20MUST%20verify';\n        await verificationSuccess({\n          credential: credentials.clone('proofSet'),\n          verifier,\n          reason: 'Should verify VC with multiple proofs.'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "EP5_Q-cQ5glNVX4UC5cXK",
              "ctx": null,
              "_testId": "urn:uuid:917f03eb-a7f8-4932-9906-45729ce7146d",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If an unordered list (proof), all referenced proofs in the array MUST verify."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=If%20an%20unordered%20list%2C%20all%20referenced%20proofs%20in%20the%20array%20MUST%20verify",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 22703,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 3089,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If an unordered list (proof), all referenced proofs in the array MUST verify.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=If%20an%20unordered%20list%2C%20all%20referenced%20proofs%20in%20the%20array%20MUST%20verify';\n        await verificationSuccess({\n          credential: credentials.clone('proofSet'),\n          verifier,\n          reason: 'Should verify VC with multiple proofs.'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "lmbuuoAHfSurepTV_1j1g",
              "ctx": null,
              "_testId": "urn:uuid:53e2a0a2-9da9-46d2-bea3-848b9332f855",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If an unordered list (proof), all referenced proofs in the array MUST verify."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=If%20an%20unordered%20list%2C%20all%20referenced%20proofs%20in%20the%20array%20MUST%20verify",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 40889,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1862,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If an unordered list (proof), all referenced proofs in the array MUST verify.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=If%20an%20unordered%20list%2C%20all%20referenced%20proofs%20in%20the%20array%20MUST%20verify';\n        await verificationSuccess({\n          credential: credentials.clone('proofSet'),\n          verifier,\n          reason: 'Should verify VC with multiple proofs.'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "XlfRRByHzOzFyqDvhYKAc",
              "ctx": null,
              "_testId": "urn:uuid:aa9e9efb-135c-40c9-adc0-7c50aa5c0d15",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "If an unordered list (proof), all referenced proofs in the array MUST verify."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=If%20an%20unordered%20list%2C%20all%20referenced%20proofs%20in%20the%20array%20MUST%20verify",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 47393,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 101,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Should verify VC with multiple proofs.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",\"https://w3id.org/security/data-integrity/v2\"],\"id\":\"urn:uuid:86294362-4254-4f36-854f-3952fe42555d\",\"type\":[\"VerifiableCredential\"],\"issuer\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\",\"issuanceDate\":\"2020-03-16T22:37:26.544Z\",\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\"},\"proof\":[{\"type\":\"DataIntegrityProof\",\"created\":\"2024-10-13T05:06:31Z\",\"verificationMethod\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b#z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\",\"cryptosuite\":\"eddsa-rdfc-2022\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"zFZsqQshxdr7ULJqMuBZW8NGyYps8XZWptEdk7GiNyPQRru8mESKusBYepYD4u3nfa3dNcufyrwF7HVy2CGgdngn\"},{\"type\":\"DataIntegrityProof\",\"created\":\"2024-10-13T05:06:31Z\",\"verificationMethod\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b#z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\",\"cryptosuite\":\"eddsa-rdfc-2022\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"zFZsqQshxdr7ULJqMuBZW8NGyYps8XZWptEdk7GiNyPQRru8mESKusBYepYD4u3nfa3dNcufyrwF7HVy2CGgdngn\"}]},\"options\":{\"checks\":[],\"credentialFormat\":\"JSON_LD_CLASSIC\"}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          "https://w3id.org/security/data-integrity/v2"
                        ],
                        "id": "urn:uuid:86294362-4254-4f36-854f-3952fe42555d",
                        "type": [
                          "VerifiableCredential"
                        ],
                        "issuer": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b",
                        "issuanceDate": "2020-03-16T22:37:26.544Z",
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                        },
                        "proof": [
                          {
                            "type": "DataIntegrityProof",
                            "created": "2024-10-13T05:06:31Z",
                            "verificationMethod": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b#z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b",
                            "cryptosuite": "eddsa-rdfc-2022",
                            "proofPurpose": "assertionMethod",
                            "proofValue": "zFZsqQshxdr7ULJqMuBZW8NGyYps8XZWptEdk7GiNyPQRru8mESKusBYepYD4u3nfa3dNcufyrwF7HVy2CGgdngn"
                          },
                          {
                            "type": "DataIntegrityProof",
                            "created": "2024-10-13T05:06:31Z",
                            "verificationMethod": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b#z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b",
                            "cryptosuite": "eddsa-rdfc-2022",
                            "proofPurpose": "assertionMethod",
                            "proofValue": "zFZsqQshxdr7ULJqMuBZW8NGyYps8XZWptEdk7GiNyPQRru8mESKusBYepYD4u3nfa3dNcufyrwF7HVy2CGgdngn"
                          }
                        ]
                      },
                      "options": {
                        "checks": [],
                        "credentialFormat": "JSON_LD_CLASSIC"
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://core.test.procivis-one.com/vc-api/credentials/verify",
                  "status": 400,
                  "data": {
                    "errors": [
                      {
                        "status": 400,
                        "title": "Failed to deserialize the JSON body into the target type",
                        "detail": null
                      }
                    ]
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Should verify VC with multiple proofs.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:49:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/suites/verify.js:272:9)"
              }
            },
            {
              "type": "test",
              "title": "If an unordered list (proof), all referenced proofs in the array MUST verify.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=If%20an%20unordered%20list%2C%20all%20referenced%20proofs%20in%20the%20array%20MUST%20verify';\n        await verificationSuccess({\n          credential: credentials.clone('proofSet'),\n          verifier,\n          reason: 'Should verify VC with multiple proofs.'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "aiQ0OlclMX_yZkn2nkDg9",
              "ctx": null,
              "_testId": "urn:uuid:779cfb69-86a4-4685-b455-4a8cc74ec9bc",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If an unordered list (proof), all referenced proofs in the array MUST verify."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=If%20an%20unordered%20list%2C%20all%20referenced%20proofs%20in%20the%20array%20MUST%20verify",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 48319,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 23,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Should verify VC with multiple proofs.: expected HTTPError: Request failed with status cod… { …(5) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",\"https://w3id.org/security/data-integrity/v2\"],\"id\":\"urn:uuid:86294362-4254-4f36-854f-3952fe42555d\",\"type\":[\"VerifiableCredential\"],\"issuer\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\",\"issuanceDate\":\"2020-03-16T22:37:26.544Z\",\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\"},\"proof\":[{\"type\":\"DataIntegrityProof\",\"created\":\"2024-10-13T05:06:31Z\",\"verificationMethod\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b#z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\",\"cryptosuite\":\"eddsa-rdfc-2022\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"zFZsqQshxdr7ULJqMuBZW8NGyYps8XZWptEdk7GiNyPQRru8mESKusBYepYD4u3nfa3dNcufyrwF7HVy2CGgdngn\"},{\"type\":\"DataIntegrityProof\",\"created\":\"2024-10-13T05:06:31Z\",\"verificationMethod\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b#z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\",\"cryptosuite\":\"eddsa-rdfc-2022\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"zFZsqQshxdr7ULJqMuBZW8NGyYps8XZWptEdk7GiNyPQRru8mESKusBYepYD4u3nfa3dNcufyrwF7HVy2CGgdngn\"}]},\"options\":{}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          "https://w3id.org/security/data-integrity/v2"
                        ],
                        "id": "urn:uuid:86294362-4254-4f36-854f-3952fe42555d",
                        "type": [
                          "VerifiableCredential"
                        ],
                        "issuer": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b",
                        "issuanceDate": "2020-03-16T22:37:26.544Z",
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                        },
                        "proof": [
                          {
                            "type": "DataIntegrityProof",
                            "created": "2024-10-13T05:06:31Z",
                            "verificationMethod": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b#z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b",
                            "cryptosuite": "eddsa-rdfc-2022",
                            "proofPurpose": "assertionMethod",
                            "proofValue": "zFZsqQshxdr7ULJqMuBZW8NGyYps8XZWptEdk7GiNyPQRru8mESKusBYepYD4u3nfa3dNcufyrwF7HVy2CGgdngn"
                          },
                          {
                            "type": "DataIntegrityProof",
                            "created": "2024-10-13T05:06:31Z",
                            "verificationMethod": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b#z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b",
                            "cryptosuite": "eddsa-rdfc-2022",
                            "proofPurpose": "assertionMethod",
                            "proofValue": "zFZsqQshxdr7ULJqMuBZW8NGyYps8XZWptEdk7GiNyPQRru8mESKusBYepYD4u3nfa3dNcufyrwF7HVy2CGgdngn"
                          }
                        ]
                      },
                      "options": {}
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc.spruceid.xyz/credentials/verify",
                  "status": 400
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Should verify VC with multiple proofs.: expected HTTPError: Request failed with status cod… { …(5) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:49:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/suites/verify.js:272:9)"
              }
            },
            {
              "type": "test",
              "title": "If an unordered list (proof), all referenced proofs in the array MUST verify.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=If%20an%20unordered%20list%2C%20all%20referenced%20proofs%20in%20the%20array%20MUST%20verify';\n        await verificationSuccess({\n          credential: credentials.clone('proofSet'),\n          verifier,\n          reason: 'Should verify VC with multiple proofs.'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "14gHlb_DX7G_d1mHSoz7X",
              "ctx": null,
              "_testId": "urn:uuid:a96f4399-3823-49e2-91f2-39479b0f7923",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "If an unordered list (proof), all referenced proofs in the array MUST verify."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=If%20an%20unordered%20list%2C%20all%20referenced%20proofs%20in%20the%20array%20MUST%20verify",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 50813,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 22,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Should verify VC with multiple proofs.: expected HTTPError: Request failed with status cod… { …(5) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",\"https://w3id.org/security/data-integrity/v2\"],\"id\":\"urn:uuid:86294362-4254-4f36-854f-3952fe42555d\",\"type\":[\"VerifiableCredential\"],\"issuer\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\",\"issuanceDate\":\"2020-03-16T22:37:26.544Z\",\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\"},\"proof\":[{\"type\":\"DataIntegrityProof\",\"created\":\"2024-10-13T05:06:31Z\",\"verificationMethod\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b#z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\",\"cryptosuite\":\"eddsa-rdfc-2022\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"zFZsqQshxdr7ULJqMuBZW8NGyYps8XZWptEdk7GiNyPQRru8mESKusBYepYD4u3nfa3dNcufyrwF7HVy2CGgdngn\"},{\"type\":\"DataIntegrityProof\",\"created\":\"2024-10-13T05:06:31Z\",\"verificationMethod\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b#z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\",\"cryptosuite\":\"eddsa-rdfc-2022\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"zFZsqQshxdr7ULJqMuBZW8NGyYps8XZWptEdk7GiNyPQRru8mESKusBYepYD4u3nfa3dNcufyrwF7HVy2CGgdngn\"}]},\"options\":{}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          "https://w3id.org/security/data-integrity/v2"
                        ],
                        "id": "urn:uuid:86294362-4254-4f36-854f-3952fe42555d",
                        "type": [
                          "VerifiableCredential"
                        ],
                        "issuer": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b",
                        "issuanceDate": "2020-03-16T22:37:26.544Z",
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                        },
                        "proof": [
                          {
                            "type": "DataIntegrityProof",
                            "created": "2024-10-13T05:06:31Z",
                            "verificationMethod": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b#z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b",
                            "cryptosuite": "eddsa-rdfc-2022",
                            "proofPurpose": "assertionMethod",
                            "proofValue": "zFZsqQshxdr7ULJqMuBZW8NGyYps8XZWptEdk7GiNyPQRru8mESKusBYepYD4u3nfa3dNcufyrwF7HVy2CGgdngn"
                          },
                          {
                            "type": "DataIntegrityProof",
                            "created": "2024-10-13T05:06:31Z",
                            "verificationMethod": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b#z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b",
                            "cryptosuite": "eddsa-rdfc-2022",
                            "proofPurpose": "assertionMethod",
                            "proofValue": "zFZsqQshxdr7ULJqMuBZW8NGyYps8XZWptEdk7GiNyPQRru8mESKusBYepYD4u3nfa3dNcufyrwF7HVy2CGgdngn"
                          }
                        ]
                      },
                      "options": {}
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://interop.connect.trinsic.cloud/vc-api/credentials/verify",
                  "status": 400
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Should verify VC with multiple proofs.: expected HTTPError: Request failed with status cod… { …(5) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:49:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/suites/verify.js:272:9)"
              }
            },
            {
              "type": "test",
              "title": "If an unordered list (proof), all referenced proofs in the array MUST verify.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#proofs:~:text=If%20an%20unordered%20list%2C%20all%20referenced%20proofs%20in%20the%20array%20MUST%20verify';\n        await verificationSuccess({\n          credential: credentials.clone('proofSet'),\n          verifier,\n          reason: 'Should verify VC with multiple proofs.'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "jrALiK8SX9HgWL-sFlTtO",
              "ctx": null,
              "_testId": "urn:uuid:9262cde6-98a8-41a0-addc-79b7bd8869bf",
              "cell": {
                "columnId": "bovine",
                "rowId": "If an unordered list (proof), all referenced proofs in the array MUST verify."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=If%20an%20unordered%20list%2C%20all%20referenced%20proofs%20in%20the%20array%20MUST%20verify",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 52742,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 97,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Should verify VC with multiple proofs.: expected HTTPError: Request failed with status cod… { …(5) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",\"https://w3id.org/security/data-integrity/v2\"],\"id\":\"urn:uuid:86294362-4254-4f36-854f-3952fe42555d\",\"type\":[\"VerifiableCredential\"],\"issuer\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\",\"issuanceDate\":\"2020-03-16T22:37:26.544Z\",\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\"},\"proof\":[{\"type\":\"DataIntegrityProof\",\"created\":\"2024-10-13T05:06:31Z\",\"verificationMethod\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b#z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\",\"cryptosuite\":\"eddsa-rdfc-2022\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"zFZsqQshxdr7ULJqMuBZW8NGyYps8XZWptEdk7GiNyPQRru8mESKusBYepYD4u3nfa3dNcufyrwF7HVy2CGgdngn\"},{\"type\":\"DataIntegrityProof\",\"created\":\"2024-10-13T05:06:31Z\",\"verificationMethod\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b#z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\",\"cryptosuite\":\"eddsa-rdfc-2022\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"zFZsqQshxdr7ULJqMuBZW8NGyYps8XZWptEdk7GiNyPQRru8mESKusBYepYD4u3nfa3dNcufyrwF7HVy2CGgdngn\"}]},\"options\":{}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          "https://w3id.org/security/data-integrity/v2"
                        ],
                        "id": "urn:uuid:86294362-4254-4f36-854f-3952fe42555d",
                        "type": [
                          "VerifiableCredential"
                        ],
                        "issuer": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b",
                        "issuanceDate": "2020-03-16T22:37:26.544Z",
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                        },
                        "proof": [
                          {
                            "type": "DataIntegrityProof",
                            "created": "2024-10-13T05:06:31Z",
                            "verificationMethod": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b#z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b",
                            "cryptosuite": "eddsa-rdfc-2022",
                            "proofPurpose": "assertionMethod",
                            "proofValue": "zFZsqQshxdr7ULJqMuBZW8NGyYps8XZWptEdk7GiNyPQRru8mESKusBYepYD4u3nfa3dNcufyrwF7HVy2CGgdngn"
                          },
                          {
                            "type": "DataIntegrityProof",
                            "created": "2024-10-13T05:06:31Z",
                            "verificationMethod": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b#z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b",
                            "cryptosuite": "eddsa-rdfc-2022",
                            "proofPurpose": "assertionMethod",
                            "proofValue": "zFZsqQshxdr7ULJqMuBZW8NGyYps8XZWptEdk7GiNyPQRru8mESKusBYepYD4u3nfa3dNcufyrwF7HVy2CGgdngn"
                          }
                        ]
                      },
                      "options": {}
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://bovine.social/w3c-di/verify",
                  "status": 400
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Should verify VC with multiple proofs.: expected HTTPError: Request failed with status cod… { …(5) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationSuccess (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/assertions.js:49:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/node_modules/data-integrity-test-suite-assertion/suites/verify.js:272:9)"
              }
            }
          ]
        },
        {
          "id": "If a proof with id equal to previousProof does not exist in allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
          "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20a%20proof%20with%20id%20equal%20to%20previousProof%20does%20not%20exist%20in%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR",
          "cells": [
            {
              "type": "test",
              "title": "If a proof with id equal to previousProof does not exist in allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20a%20proof%20with%20id%20equal%20to%20previousProof%20does%20not%20exist%20in%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR';\n        await verificationFail({\n          credential: credentials.clone('missingPreviousProofString'),\n          verifier,\n          reason: 'Should not verify VC with invalid \"proof.previousProof\".'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "pmPgloOAmrko-FWqqfD9b",
              "ctx": null,
              "_testId": "urn:uuid:8e71dbe8-68d1-41c0-a77e-8ae81e74e03f",
              "cell": {
                "columnId": "ACA-py",
                "rowId": "If a proof with id equal to previousProof does not exist in allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20a%20proof%20with%20id%20equal%20to%20previousProof%20does%20not%20exist%20in%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9418,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 29,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If a proof with id equal to previousProof does not exist in allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20a%20proof%20with%20id%20equal%20to%20previousProof%20does%20not%20exist%20in%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR';\n        await verificationFail({\n          credential: credentials.clone('missingPreviousProofString'),\n          verifier,\n          reason: 'Should not verify VC with invalid \"proof.previousProof\".'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "JC5FF1IsnlSix4emI_7V_",
              "ctx": null,
              "_testId": "urn:uuid:0c8ca44a-32b8-45df-956c-99ae3072c692",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If a proof with id equal to previousProof does not exist in allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20a%20proof%20with%20id%20equal%20to%20previousProof%20does%20not%20exist%20in%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 15500,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 97,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If a proof with id equal to previousProof does not exist in allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20a%20proof%20with%20id%20equal%20to%20previousProof%20does%20not%20exist%20in%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR';\n        await verificationFail({\n          credential: credentials.clone('missingPreviousProofString'),\n          verifier,\n          reason: 'Should not verify VC with invalid \"proof.previousProof\".'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "EP5_Q-cQ5glNVX4UC5cXK",
              "ctx": null,
              "_testId": "urn:uuid:7afebd1e-8104-40b0-aee4-94e5d4f08a32",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If a proof with id equal to previousProof does not exist in allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20a%20proof%20with%20id%20equal%20to%20previousProof%20does%20not%20exist%20in%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25792,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 91,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If a proof with id equal to previousProof does not exist in allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20a%20proof%20with%20id%20equal%20to%20previousProof%20does%20not%20exist%20in%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR';\n        await verificationFail({\n          credential: credentials.clone('missingPreviousProofString'),\n          verifier,\n          reason: 'Should not verify VC with invalid \"proof.previousProof\".'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "lmbuuoAHfSurepTV_1j1g",
              "ctx": null,
              "_testId": "urn:uuid:51609de7-cb3f-4c5e-a064-36aa115d9720",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If a proof with id equal to previousProof does not exist in allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20a%20proof%20with%20id%20equal%20to%20previousProof%20does%20not%20exist%20in%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 42751,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 764,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If a proof with id equal to previousProof does not exist in allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20a%20proof%20with%20id%20equal%20to%20previousProof%20does%20not%20exist%20in%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR';\n        await verificationFail({\n          credential: credentials.clone('missingPreviousProofString'),\n          verifier,\n          reason: 'Should not verify VC with invalid \"proof.previousProof\".'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "XlfRRByHzOzFyqDvhYKAc",
              "ctx": null,
              "_testId": "urn:uuid:ee694aa3-8a03-421f-a4fa-c6d12e02542a",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "If a proof with id equal to previousProof does not exist in allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20a%20proof%20with%20id%20equal%20to%20previousProof%20does%20not%20exist%20in%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 47494,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 100,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If a proof with id equal to previousProof does not exist in allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20a%20proof%20with%20id%20equal%20to%20previousProof%20does%20not%20exist%20in%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR';\n        await verificationFail({\n          credential: credentials.clone('missingPreviousProofString'),\n          verifier,\n          reason: 'Should not verify VC with invalid \"proof.previousProof\".'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "aiQ0OlclMX_yZkn2nkDg9",
              "ctx": null,
              "_testId": "urn:uuid:61bec064-34e6-47ba-b50f-775b808139f2",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If a proof with id equal to previousProof does not exist in allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20a%20proof%20with%20id%20equal%20to%20previousProof%20does%20not%20exist%20in%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 48342,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 26,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If a proof with id equal to previousProof does not exist in allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20a%20proof%20with%20id%20equal%20to%20previousProof%20does%20not%20exist%20in%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR';\n        await verificationFail({\n          credential: credentials.clone('missingPreviousProofString'),\n          verifier,\n          reason: 'Should not verify VC with invalid \"proof.previousProof\".'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "14gHlb_DX7G_d1mHSoz7X",
              "ctx": null,
              "_testId": "urn:uuid:fcdb7ba1-2ba0-48f9-86b0-6c861312e6fe",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "If a proof with id equal to previousProof does not exist in allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20a%20proof%20with%20id%20equal%20to%20previousProof%20does%20not%20exist%20in%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 50835,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 18,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If a proof with id equal to previousProof does not exist in allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20a%20proof%20with%20id%20equal%20to%20previousProof%20does%20not%20exist%20in%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR';\n        await verificationFail({\n          credential: credentials.clone('missingPreviousProofString'),\n          verifier,\n          reason: 'Should not verify VC with invalid \"proof.previousProof\".'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "jrALiK8SX9HgWL-sFlTtO",
              "ctx": null,
              "_testId": "urn:uuid:5ef642bf-9bb3-4c3f-9725-22d2bb4b489d",
              "cell": {
                "columnId": "bovine",
                "rowId": "If a proof with id equal to previousProof does not exist in allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20a%20proof%20with%20id%20equal%20to%20previousProof%20does%20not%20exist%20in%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 52839,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 96,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If any element of previousProof list has an id attribute that does not match the id attribute of any element of allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
          "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20any%20element%20of%20previousProof%20list%20has%20an%20id%20attribute%20that%20does%20not%20match%20the%20id%20attribute%20of%20any%20element%20of%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
          "cells": [
            {
              "type": "test",
              "title": "If any element of previousProof list has an id attribute that does not match the id attribute of any element of allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20any%20element%20of%20previousProof%20list%20has%20an%20id%20attribute%20that%20does%20not%20match%20the%20id%20attribute%20of%20any%20element%20of%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n        await verificationFail({\n          credential: credentials.clone('missingPreviousProofArray'),\n          verifier,\n          reason: 'Should not verify VC with invalid \"proof.previousProof\".'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "pmPgloOAmrko-FWqqfD9b",
              "ctx": null,
              "_testId": "urn:uuid:34057b2c-18fd-44e9-8b4f-042ace0744fa",
              "cell": {
                "columnId": "ACA-py",
                "rowId": "If any element of previousProof list has an id attribute that does not match the id attribute of any element of allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20any%20element%20of%20previousProof%20list%20has%20an%20id%20attribute%20that%20does%20not%20match%20the%20id%20attribute%20of%20any%20element%20of%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9447,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 28,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If any element of previousProof list has an id attribute that does not match the id attribute of any element of allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20any%20element%20of%20previousProof%20list%20has%20an%20id%20attribute%20that%20does%20not%20match%20the%20id%20attribute%20of%20any%20element%20of%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n        await verificationFail({\n          credential: credentials.clone('missingPreviousProofArray'),\n          verifier,\n          reason: 'Should not verify VC with invalid \"proof.previousProof\".'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "JC5FF1IsnlSix4emI_7V_",
              "ctx": null,
              "_testId": "urn:uuid:b07cb97f-a07d-4ed6-95de-2496f64ab561",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If any element of previousProof list has an id attribute that does not match the id attribute of any element of allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20any%20element%20of%20previousProof%20list%20has%20an%20id%20attribute%20that%20does%20not%20match%20the%20id%20attribute%20of%20any%20element%20of%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 15596,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 94,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If any element of previousProof list has an id attribute that does not match the id attribute of any element of allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20any%20element%20of%20previousProof%20list%20has%20an%20id%20attribute%20that%20does%20not%20match%20the%20id%20attribute%20of%20any%20element%20of%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n        await verificationFail({\n          credential: credentials.clone('missingPreviousProofArray'),\n          verifier,\n          reason: 'Should not verify VC with invalid \"proof.previousProof\".'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "EP5_Q-cQ5glNVX4UC5cXK",
              "ctx": null,
              "_testId": "urn:uuid:0649f4e9-3c12-4bad-8fbf-8ca1a194fa6e",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If any element of previousProof list has an id attribute that does not match the id attribute of any element of allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20any%20element%20of%20previousProof%20list%20has%20an%20id%20attribute%20that%20does%20not%20match%20the%20id%20attribute%20of%20any%20element%20of%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25884,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 100,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If any element of previousProof list has an id attribute that does not match the id attribute of any element of allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20any%20element%20of%20previousProof%20list%20has%20an%20id%20attribute%20that%20does%20not%20match%20the%20id%20attribute%20of%20any%20element%20of%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n        await verificationFail({\n          credential: credentials.clone('missingPreviousProofArray'),\n          verifier,\n          reason: 'Should not verify VC with invalid \"proof.previousProof\".'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "lmbuuoAHfSurepTV_1j1g",
              "ctx": null,
              "_testId": "urn:uuid:f8b870b1-bccd-4173-870d-096510bc2afc",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If any element of previousProof list has an id attribute that does not match the id attribute of any element of allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20any%20element%20of%20previousProof%20list%20has%20an%20id%20attribute%20that%20does%20not%20match%20the%20id%20attribute%20of%20any%20element%20of%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 43516,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 749,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If any element of previousProof list has an id attribute that does not match the id attribute of any element of allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20any%20element%20of%20previousProof%20list%20has%20an%20id%20attribute%20that%20does%20not%20match%20the%20id%20attribute%20of%20any%20element%20of%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n        await verificationFail({\n          credential: credentials.clone('missingPreviousProofArray'),\n          verifier,\n          reason: 'Should not verify VC with invalid \"proof.previousProof\".'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "XlfRRByHzOzFyqDvhYKAc",
              "ctx": null,
              "_testId": "urn:uuid:0b52925c-b311-4888-a598-4c277dd870e3",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "If any element of previousProof list has an id attribute that does not match the id attribute of any element of allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20any%20element%20of%20previousProof%20list%20has%20an%20id%20attribute%20that%20does%20not%20match%20the%20id%20attribute%20of%20any%20element%20of%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 47595,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 100,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If any element of previousProof list has an id attribute that does not match the id attribute of any element of allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20any%20element%20of%20previousProof%20list%20has%20an%20id%20attribute%20that%20does%20not%20match%20the%20id%20attribute%20of%20any%20element%20of%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n        await verificationFail({\n          credential: credentials.clone('missingPreviousProofArray'),\n          verifier,\n          reason: 'Should not verify VC with invalid \"proof.previousProof\".'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "aiQ0OlclMX_yZkn2nkDg9",
              "ctx": null,
              "_testId": "urn:uuid:8dc4a9c1-ffed-4dfe-8071-7f748e268dfc",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If any element of previousProof list has an id attribute that does not match the id attribute of any element of allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20any%20element%20of%20previousProof%20list%20has%20an%20id%20attribute%20that%20does%20not%20match%20the%20id%20attribute%20of%20any%20element%20of%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 48368,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 23,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If any element of previousProof list has an id attribute that does not match the id attribute of any element of allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20any%20element%20of%20previousProof%20list%20has%20an%20id%20attribute%20that%20does%20not%20match%20the%20id%20attribute%20of%20any%20element%20of%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n        await verificationFail({\n          credential: credentials.clone('missingPreviousProofArray'),\n          verifier,\n          reason: 'Should not verify VC with invalid \"proof.previousProof\".'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "14gHlb_DX7G_d1mHSoz7X",
              "ctx": null,
              "_testId": "urn:uuid:0b5da63e-c70c-4c46-b925-170983d6a4fe",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "If any element of previousProof list has an id attribute that does not match the id attribute of any element of allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20any%20element%20of%20previousProof%20list%20has%20an%20id%20attribute%20that%20does%20not%20match%20the%20id%20attribute%20of%20any%20element%20of%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 50853,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 19,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If any element of previousProof list has an id attribute that does not match the id attribute of any element of allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR.",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=If%20any%20element%20of%20previousProof%20list%20has%20an%20id%20attribute%20that%20does%20not%20match%20the%20id%20attribute%20of%20any%20element%20of%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.';\n        await verificationFail({\n          credential: credentials.clone('missingPreviousProofArray'),\n          verifier,\n          reason: 'Should not verify VC with invalid \"proof.previousProof\".'\n        });\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "jrALiK8SX9HgWL-sFlTtO",
              "ctx": null,
              "_testId": "urn:uuid:7521792e-445a-43da-beb6-47b3fba1c8ad",
              "cell": {
                "columnId": "bovine",
                "rowId": "If any element of previousProof list has an id attribute that does not match the id attribute of any element of allProofs, an error MUST be raised and SHOULD convey an error type of PROOF_VERIFICATION_ERROR."
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=If%20any%20element%20of%20previousProof%20list%20has%20an%20id%20attribute%20that%20does%20not%20match%20the%20id%20attribute%20of%20any%20element%20of%20allProofs%2C%20an%20error%20MUST%20be%20raised%20and%20SHOULD%20convey%20an%20error%20type%20of%20PROOF_VERIFICATION_ERROR.",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 52935,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 96,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "Each value identifies another data integrity proof, all of which MUST also verify for the current proof to be considered verified",
          "link": "https://w3c.github.io/vc-data-integrity/#:~:text=Each%20value%20identifies%20another%20data%20integrity%20proof%2C%20all%20of%20which%20MUST%20also%20verify%20for%20the%20current%20proof%20to%20be%20considered%20verified",
          "cells": [
            {
              "type": "test",
              "title": "Each value identifies another data integrity proof, all of which MUST also verify for the current proof to be considered verified",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=Each%20value%20identifies%20another%20data%20integrity%20proof%2C%20all%20of%20which%20MUST%20also%20verify%20for%20the%20current%20proof%20to%20be%20considered%20verified';\n        await verificationFail({\n          credential: credentials.clone('previousProofFail'),\n          verifier,\n          reason: 'Should not verify VC with a \"previousProof\" that does ' +\n          'not verify.'\n        });\n\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "pmPgloOAmrko-FWqqfD9b",
              "ctx": null,
              "_testId": "urn:uuid:eeee1cf2-3bb1-4832-8977-15e014c76b6a",
              "cell": {
                "columnId": "ACA-py",
                "rowId": "Each value identifies another data integrity proof, all of which MUST also verify for the current proof to be considered verified"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=Each%20value%20identifies%20another%20data%20integrity%20proof%2C%20all%20of%20which%20MUST%20also%20verify%20for%20the%20current%20proof%20to%20be%20considered%20verified",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 9476,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 29,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Each value identifies another data integrity proof, all of which MUST also verify for the current proof to be considered verified",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=Each%20value%20identifies%20another%20data%20integrity%20proof%2C%20all%20of%20which%20MUST%20also%20verify%20for%20the%20current%20proof%20to%20be%20considered%20verified';\n        await verificationFail({\n          credential: credentials.clone('previousProofFail'),\n          verifier,\n          reason: 'Should not verify VC with a \"previousProof\" that does ' +\n          'not verify.'\n        });\n\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "JC5FF1IsnlSix4emI_7V_",
              "ctx": null,
              "_testId": "urn:uuid:7b388018-c7bb-44ff-b640-5b146c8a6ec5",
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "Each value identifies another data integrity proof, all of which MUST also verify for the current proof to be considered verified"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=Each%20value%20identifies%20another%20data%20integrity%20proof%2C%20all%20of%20which%20MUST%20also%20verify%20for%20the%20current%20proof%20to%20be%20considered%20verified",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 15692,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 99,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Each value identifies another data integrity proof, all of which MUST also verify for the current proof to be considered verified",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=Each%20value%20identifies%20another%20data%20integrity%20proof%2C%20all%20of%20which%20MUST%20also%20verify%20for%20the%20current%20proof%20to%20be%20considered%20verified';\n        await verificationFail({\n          credential: credentials.clone('previousProofFail'),\n          verifier,\n          reason: 'Should not verify VC with a \"previousProof\" that does ' +\n          'not verify.'\n        });\n\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "EP5_Q-cQ5glNVX4UC5cXK",
              "ctx": null,
              "_testId": "urn:uuid:736faccc-6e99-47f3-8f0f-3d03c358e722",
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "Each value identifies another data integrity proof, all of which MUST also verify for the current proof to be considered verified"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=Each%20value%20identifies%20another%20data%20integrity%20proof%2C%20all%20of%20which%20MUST%20also%20verify%20for%20the%20current%20proof%20to%20be%20considered%20verified",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 25985,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 54,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "Each value identifies another data integrity proof, all of which MUST also verify for the current proof to be considered verified",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=Each%20value%20identifies%20another%20data%20integrity%20proof%2C%20all%20of%20which%20MUST%20also%20verify%20for%20the%20current%20proof%20to%20be%20considered%20verified';\n        await verificationFail({\n          credential: credentials.clone('previousProofFail'),\n          verifier,\n          reason: 'Should not verify VC with a \"previousProof\" that does ' +\n          'not verify.'\n        });\n\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "lmbuuoAHfSurepTV_1j1g",
              "ctx": null,
              "_testId": "urn:uuid:38673ba7-ff9d-4de0-b10a-cfa81b0b38aa",
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "Each value identifies another data integrity proof, all of which MUST also verify for the current proof to be considered verified"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=Each%20value%20identifies%20another%20data%20integrity%20proof%2C%20all%20of%20which%20MUST%20also%20verify%20for%20the%20current%20proof%20to%20be%20considered%20verified",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 44265,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 72,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "Each value identifies another data integrity proof, all of which MUST also verify for the current proof to be considered verified",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=Each%20value%20identifies%20another%20data%20integrity%20proof%2C%20all%20of%20which%20MUST%20also%20verify%20for%20the%20current%20proof%20to%20be%20considered%20verified';\n        await verificationFail({\n          credential: credentials.clone('previousProofFail'),\n          verifier,\n          reason: 'Should not verify VC with a \"previousProof\" that does ' +\n          'not verify.'\n        });\n\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "XlfRRByHzOzFyqDvhYKAc",
              "ctx": null,
              "_testId": "urn:uuid:93818e9f-1097-452f-a061-7f09c5c2512e",
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "Each value identifies another data integrity proof, all of which MUST also verify for the current proof to be considered verified"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=Each%20value%20identifies%20another%20data%20integrity%20proof%2C%20all%20of%20which%20MUST%20also%20verify%20for%20the%20current%20proof%20to%20be%20considered%20verified",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 47695,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 100,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Each value identifies another data integrity proof, all of which MUST also verify for the current proof to be considered verified",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=Each%20value%20identifies%20another%20data%20integrity%20proof%2C%20all%20of%20which%20MUST%20also%20verify%20for%20the%20current%20proof%20to%20be%20considered%20verified';\n        await verificationFail({\n          credential: credentials.clone('previousProofFail'),\n          verifier,\n          reason: 'Should not verify VC with a \"previousProof\" that does ' +\n          'not verify.'\n        });\n\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "aiQ0OlclMX_yZkn2nkDg9",
              "ctx": null,
              "_testId": "urn:uuid:71103ba4-2b40-493f-8262-c5e47b1bf8dc",
              "cell": {
                "columnId": "SpruceID",
                "rowId": "Each value identifies another data integrity proof, all of which MUST also verify for the current proof to be considered verified"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=Each%20value%20identifies%20another%20data%20integrity%20proof%2C%20all%20of%20which%20MUST%20also%20verify%20for%20the%20current%20proof%20to%20be%20considered%20verified",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 48391,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 27,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Each value identifies another data integrity proof, all of which MUST also verify for the current proof to be considered verified",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=Each%20value%20identifies%20another%20data%20integrity%20proof%2C%20all%20of%20which%20MUST%20also%20verify%20for%20the%20current%20proof%20to%20be%20considered%20verified';\n        await verificationFail({\n          credential: credentials.clone('previousProofFail'),\n          verifier,\n          reason: 'Should not verify VC with a \"previousProof\" that does ' +\n          'not verify.'\n        });\n\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "14gHlb_DX7G_d1mHSoz7X",
              "ctx": null,
              "_testId": "urn:uuid:a56b77f1-9f6e-4281-a828-cf5ba9d882e7",
              "cell": {
                "columnId": "Trinsic",
                "rowId": "Each value identifies another data integrity proof, all of which MUST also verify for the current proof to be considered verified"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=Each%20value%20identifies%20another%20data%20integrity%20proof%2C%20all%20of%20which%20MUST%20also%20verify%20for%20the%20current%20proof%20to%20be%20considered%20verified",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 50871,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 18,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Each value identifies another data integrity proof, all of which MUST also verify for the current proof to be considered verified",
              "body": "async function() {\n        this.test.link = 'https://w3c.github.io/vc-data-integrity/#:~:text=Each%20value%20identifies%20another%20data%20integrity%20proof%2C%20all%20of%20which%20MUST%20also%20verify%20for%20the%20current%20proof%20to%20be%20considered%20verified';\n        await verificationFail({\n          credential: credentials.clone('previousProofFail'),\n          verifier,\n          reason: 'Should not verify VC with a \"previousProof\" that does ' +\n          'not verify.'\n        });\n\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/15-di-rdfc-verify.js",
              "parent": "jrALiK8SX9HgWL-sFlTtO",
              "ctx": null,
              "_testId": "urn:uuid:9a55f17d-19e8-445e-8678-bfb3a82df784",
              "cell": {
                "columnId": "bovine",
                "rowId": "Each value identifies another data integrity proof, all of which MUST also verify for the current proof to be considered verified"
              },
              "_events": {},
              "_eventsCount": 1,
              "link": "https://w3c.github.io/vc-data-integrity/#:~:text=Each%20value%20identifies%20another%20data%20integrity%20proof%2C%20all%20of%20which%20MUST%20also%20verify%20for%20the%20current%20proof%20to%20be%20considered%20verified",
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 53032,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 97,
              "state": "passed",
              "speed": "slow"
            }
          ]
        }
      ]
    },
    {
      "title": "eddsa-rdfc-2022 (verifier)",
      "ctx": null,
      "suites": [
        {
          "title": "ACA-py",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "verifies a valid eddsa-rdfc-2022 proof.",
              "body": "async function() {\n            this.test.cell = {columnId, rowId: this.test.title};\n            const credential = credentials.clone('issuedVc');\n            await verificationSuccess({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/20-rdfc-verify.js",
              "parent": "3s6kIKbxxLxpHOCFH7Pnj",
              "ctx": null,
              "_testId": "urn:uuid:c4ce1266-1d8d-4cd8-a3e3-77f714c70f5d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "ACA-py",
                "rowId": "verifies a valid eddsa-rdfc-2022 proof."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 53130,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 143,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proofValue\" field, when decoded to raw bytes, is not 64 bytes in length if the associated public key is 32 bytes in length, or 114 bytes in length if the public key is 57 bytes in length, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const credential = credentials.clone('issuedVc');\n          const proofBytes = bs58Decode({id: credential.proof.proofValue});\n          const randomBytes = new Uint8Array(32).map(\n            () => Math.floor(Math.random() * 255));\n          credential.proof.proofValue = bs58Encode(\n            new Uint8Array([...proofBytes, ...randomBytes]));\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/20-rdfc-verify.js",
              "parent": "3s6kIKbxxLxpHOCFH7Pnj",
              "ctx": null,
              "_testId": "urn:uuid:f6dfa04d-1cb4-48cc-8cf1-88c338410b84",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "ACA-py",
                "rowId": "If the \"proofValue\" field, when decoded to raw bytes, is not 64 bytes in length if the associated public key is 32 bytes in length, or 114 bytes in length if the public key is 57 bytes in length, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 53273,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 44,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no result from verifier.: expected Response { status: 200, statusText: 'OK', headers: Headers { 'content-length': '633', 'content-type': 'application/json; charset=utf-8', date: 'Sun, 13 Oct 2024 05:07:16 GMT', server: 'Python/3.12 aiohttp/3.10.9', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no result from verifier.: expected Response { status: 200, statusText: 'OK', headers: Headers { 'content-length': '633', 'content-type': 'application/json; charset=utf-8', date: 'Sun, 13 Oct 2024 05:07:16 GMT', server: 'Python/3.12 aiohttp/3.10.9', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationFail (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/assertions.js:49:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/20-rdfc-verify.js:57:11)"
              }
            },
            {
              "type": "test",
              "title": "fails verification when credential is not canonicalized correctly.",
              "body": "async function() {\n            this.test.cell = {columnId, rowId: this.test.title};\n            const credential = credentials.clone('canonizeJcs');\n            await verificationFail({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/20-rdfc-verify.js",
              "parent": "3s6kIKbxxLxpHOCFH7Pnj",
              "ctx": null,
              "_testId": "urn:uuid:7df53ab9-1c08-498d-a726-eabe684cc559",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "ACA-py",
                "rowId": "fails verification when credential is not canonicalized correctly."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 53317,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 44,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no result from verifier.: expected Response { status: 200, statusText: 'OK', headers: Headers { 'content-length': '633', 'content-type': 'application/json; charset=utf-8', date: 'Sun, 13 Oct 2024 05:07:16 GMT', server: 'Python/3.12 aiohttp/3.10.9', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no result from verifier.: expected Response { status: 200, statusText: 'OK', headers: Headers { 'content-length': '633', 'content-type': 'application/json; charset=utf-8', date: 'Sun, 13 Oct 2024 05:07:16 GMT', server: 'Python/3.12 aiohttp/3.10.9', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationFail (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/assertions.js:49:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/20-rdfc-verify.js:68:13)"
              }
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"eddsa-rdfc-2022\", an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const credential = credentials.clone('incorrectCryptosuite');\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/20-rdfc-verify.js",
              "parent": "3s6kIKbxxLxpHOCFH7Pnj",
              "ctx": null,
              "_testId": "urn:uuid:fec0d3ba-00a2-45a3-b70c-21742c7ef2e1",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "ACA-py",
                "rowId": "If the \"cryptosuite\" field is not the string \"eddsa-rdfc-2022\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 53362,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 27,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "ZBh2uIkrTqa72E5vbd7vQ",
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/20-rdfc-verify.js",
          "_testId": "urn:uuid:d7aa8daf-3353-442a-bcfb-e795b9305b0a"
        },
        {
          "title": "apicatalog.com",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "verifies a valid eddsa-rdfc-2022 proof.",
              "body": "async function() {\n            this.test.cell = {columnId, rowId: this.test.title};\n            const credential = credentials.clone('issuedVc');\n            await verificationSuccess({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/20-rdfc-verify.js",
              "parent": "b3n437O23C15SED9s2oqw",
              "ctx": null,
              "_testId": "urn:uuid:3a78ade5-a6d5-427f-a469-a20816c68db8",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "verifies a valid eddsa-rdfc-2022 proof."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 53389,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 312,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proofValue\" field, when decoded to raw bytes, is not 64 bytes in length if the associated public key is 32 bytes in length, or 114 bytes in length if the public key is 57 bytes in length, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const credential = credentials.clone('issuedVc');\n          const proofBytes = bs58Decode({id: credential.proof.proofValue});\n          const randomBytes = new Uint8Array(32).map(\n            () => Math.floor(Math.random() * 255));\n          credential.proof.proofValue = bs58Encode(\n            new Uint8Array([...proofBytes, ...randomBytes]));\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/20-rdfc-verify.js",
              "parent": "b3n437O23C15SED9s2oqw",
              "ctx": null,
              "_testId": "urn:uuid:70584ca0-d406-4279-8981-dc130b8ae87d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If the \"proofValue\" field, when decoded to raw bytes, is not 64 bytes in length if the associated public key is 32 bytes in length, or 114 bytes in length if the public key is 57 bytes in length, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 53701,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 299,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "fails verification when credential is not canonicalized correctly.",
              "body": "async function() {\n            this.test.cell = {columnId, rowId: this.test.title};\n            const credential = credentials.clone('canonizeJcs');\n            await verificationFail({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/20-rdfc-verify.js",
              "parent": "b3n437O23C15SED9s2oqw",
              "ctx": null,
              "_testId": "urn:uuid:a6adf78e-f057-4fb3-ad8e-283f75e598ad",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "fails verification when credential is not canonicalized correctly."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 53999,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 296,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"eddsa-rdfc-2022\", an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const credential = credentials.clone('incorrectCryptosuite');\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/20-rdfc-verify.js",
              "parent": "b3n437O23C15SED9s2oqw",
              "ctx": null,
              "_testId": "urn:uuid:424c1efb-d63b-4f84-a85e-3491a290440c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If the \"cryptosuite\" field is not the string \"eddsa-rdfc-2022\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 54296,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 93,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "ZBh2uIkrTqa72E5vbd7vQ",
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/20-rdfc-verify.js",
          "_testId": "urn:uuid:91f9d1de-fe32-4641-91eb-400fe9e55ddb"
        },
        {
          "title": "Digital Bazaar",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "verifies a valid eddsa-rdfc-2022 proof.",
              "body": "async function() {\n            this.test.cell = {columnId, rowId: this.test.title};\n            const credential = credentials.clone('issuedVc');\n            await verificationSuccess({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/20-rdfc-verify.js",
              "parent": "XovJeOvjww5C5E_3RcXvU",
              "ctx": null,
              "_testId": "urn:uuid:40bf10da-9018-49b5-a6ed-eb012fda80cf",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "verifies a valid eddsa-rdfc-2022 proof."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 54389,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 247,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proofValue\" field, when decoded to raw bytes, is not 64 bytes in length if the associated public key is 32 bytes in length, or 114 bytes in length if the public key is 57 bytes in length, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const credential = credentials.clone('issuedVc');\n          const proofBytes = bs58Decode({id: credential.proof.proofValue});\n          const randomBytes = new Uint8Array(32).map(\n            () => Math.floor(Math.random() * 255));\n          credential.proof.proofValue = bs58Encode(\n            new Uint8Array([...proofBytes, ...randomBytes]));\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/20-rdfc-verify.js",
              "parent": "XovJeOvjww5C5E_3RcXvU",
              "ctx": null,
              "_testId": "urn:uuid:829f3903-8e6a-4637-98e5-aba642f4bdfe",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the \"proofValue\" field, when decoded to raw bytes, is not 64 bytes in length if the associated public key is 32 bytes in length, or 114 bytes in length if the public key is 57 bytes in length, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 54636,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 47,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "fails verification when credential is not canonicalized correctly.",
              "body": "async function() {\n            this.test.cell = {columnId, rowId: this.test.title};\n            const credential = credentials.clone('canonizeJcs');\n            await verificationFail({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/20-rdfc-verify.js",
              "parent": "XovJeOvjww5C5E_3RcXvU",
              "ctx": null,
              "_testId": "urn:uuid:c4bd1c4f-2492-4fc4-9917-16c9a91991e1",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "fails verification when credential is not canonicalized correctly."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 54684,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 48,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"eddsa-rdfc-2022\", an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const credential = credentials.clone('incorrectCryptosuite');\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/20-rdfc-verify.js",
              "parent": "XovJeOvjww5C5E_3RcXvU",
              "ctx": null,
              "_testId": "urn:uuid:1bac315b-9d02-4f2d-88fb-32e7cf158ca1",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the \"cryptosuite\" field is not the string \"eddsa-rdfc-2022\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 54732,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 32,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "ZBh2uIkrTqa72E5vbd7vQ",
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/20-rdfc-verify.js",
          "_testId": "urn:uuid:e0d9de9f-9dba-41ee-9774-3f27221c8f8d"
        },
        {
          "title": "Grotto Networking",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "verifies a valid eddsa-rdfc-2022 proof.",
              "body": "async function() {\n            this.test.cell = {columnId, rowId: this.test.title};\n            const credential = credentials.clone('issuedVc');\n            await verificationSuccess({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/20-rdfc-verify.js",
              "parent": "IPj3nV5CmwlHpustdc_6c",
              "ctx": null,
              "_testId": "urn:uuid:3f6ff8c9-bcda-4442-8a2c-96b5ae59463d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "verifies a valid eddsa-rdfc-2022 proof."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 54764,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 910,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proofValue\" field, when decoded to raw bytes, is not 64 bytes in length if the associated public key is 32 bytes in length, or 114 bytes in length if the public key is 57 bytes in length, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const credential = credentials.clone('issuedVc');\n          const proofBytes = bs58Decode({id: credential.proof.proofValue});\n          const randomBytes = new Uint8Array(32).map(\n            () => Math.floor(Math.random() * 255));\n          credential.proof.proofValue = bs58Encode(\n            new Uint8Array([...proofBytes, ...randomBytes]));\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/20-rdfc-verify.js",
              "parent": "IPj3nV5CmwlHpustdc_6c",
              "ctx": null,
              "_testId": "urn:uuid:b1577db8-0c15-4ff2-97b8-16105a7b654e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If the \"proofValue\" field, when decoded to raw bytes, is not 64 bytes in length if the associated public key is 32 bytes in length, or 114 bytes in length if the public key is 57 bytes in length, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 55674,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 676,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "fails verification when credential is not canonicalized correctly.",
              "body": "async function() {\n            this.test.cell = {columnId, rowId: this.test.title};\n            const credential = credentials.clone('canonizeJcs');\n            await verificationFail({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/20-rdfc-verify.js",
              "parent": "IPj3nV5CmwlHpustdc_6c",
              "ctx": null,
              "_testId": "urn:uuid:fe9f59bd-f037-4ab0-9965-3db12d32a5ac",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "fails verification when credential is not canonicalized correctly."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 56350,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 746,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"eddsa-rdfc-2022\", an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const credential = credentials.clone('incorrectCryptosuite');\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/20-rdfc-verify.js",
              "parent": "IPj3nV5CmwlHpustdc_6c",
              "ctx": null,
              "_testId": "urn:uuid:bceac945-ade1-4c86-b740-1b673126c5bd",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If the \"cryptosuite\" field is not the string \"eddsa-rdfc-2022\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 57096,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 72,
              "state": "passed",
              "speed": "medium"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "ZBh2uIkrTqa72E5vbd7vQ",
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/20-rdfc-verify.js",
          "_testId": "urn:uuid:f0a6acba-3360-4955-9338-b699e6e952bc"
        },
        {
          "title": "Procivis One Core",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "verifies a valid eddsa-rdfc-2022 proof.",
              "body": "async function() {\n            this.test.cell = {columnId, rowId: this.test.title};\n            const credential = credentials.clone('issuedVc');\n            await verificationSuccess({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/20-rdfc-verify.js",
              "parent": "ejyf-ZHK7tlMEfuef7j4v",
              "ctx": null,
              "_testId": "urn:uuid:965892ca-0e3c-4596-a4e4-4874dd9431fe",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "verifies a valid eddsa-rdfc-2022 proof."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 57168,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1135,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proofValue\" field, when decoded to raw bytes, is not 64 bytes in length if the associated public key is 32 bytes in length, or 114 bytes in length if the public key is 57 bytes in length, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const credential = credentials.clone('issuedVc');\n          const proofBytes = bs58Decode({id: credential.proof.proofValue});\n          const randomBytes = new Uint8Array(32).map(\n            () => Math.floor(Math.random() * 255));\n          credential.proof.proofValue = bs58Encode(\n            new Uint8Array([...proofBytes, ...randomBytes]));\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/20-rdfc-verify.js",
              "parent": "ejyf-ZHK7tlMEfuef7j4v",
              "ctx": null,
              "_testId": "urn:uuid:bf14d124-fb24-40c4-b415-263305c87155",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "If the \"proofValue\" field, when decoded to raw bytes, is not 64 bytes in length if the associated public key is 32 bytes in length, or 114 bytes in length if the public key is 57 bytes in length, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 58303,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 109,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "fails verification when credential is not canonicalized correctly.",
              "body": "async function() {\n            this.test.cell = {columnId, rowId: this.test.title};\n            const credential = credentials.clone('canonizeJcs');\n            await verificationFail({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/20-rdfc-verify.js",
              "parent": "ejyf-ZHK7tlMEfuef7j4v",
              "ctx": null,
              "_testId": "urn:uuid:3cfdd595-457a-4a82-ab37-c055d867f9d2",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "fails verification when credential is not canonicalized correctly."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 58413,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 127,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"eddsa-rdfc-2022\", an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const credential = credentials.clone('incorrectCryptosuite');\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/20-rdfc-verify.js",
              "parent": "ejyf-ZHK7tlMEfuef7j4v",
              "ctx": null,
              "_testId": "urn:uuid:faf50e10-3746-42fe-bfca-6979aeecf391",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "If the \"cryptosuite\" field is not the string \"eddsa-rdfc-2022\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 58540,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 100,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "ZBh2uIkrTqa72E5vbd7vQ",
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/20-rdfc-verify.js",
          "_testId": "urn:uuid:11ffe5e2-f6a5-4ecc-8271-2fd31494e579"
        },
        {
          "title": "SpruceID",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "verifies a valid eddsa-rdfc-2022 proof.",
              "body": "async function() {\n            this.test.cell = {columnId, rowId: this.test.title};\n            const credential = credentials.clone('issuedVc');\n            await verificationSuccess({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/20-rdfc-verify.js",
              "parent": "KFcBcDremzzmv9ZMw2lGj",
              "ctx": null,
              "_testId": "urn:uuid:0b1d9256-cfa2-4fa6-a082-20416fe2528f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "verifies a valid eddsa-rdfc-2022 proof."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 58640,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 66,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proofValue\" field, when decoded to raw bytes, is not 64 bytes in length if the associated public key is 32 bytes in length, or 114 bytes in length if the public key is 57 bytes in length, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const credential = credentials.clone('issuedVc');\n          const proofBytes = bs58Decode({id: credential.proof.proofValue});\n          const randomBytes = new Uint8Array(32).map(\n            () => Math.floor(Math.random() * 255));\n          credential.proof.proofValue = bs58Encode(\n            new Uint8Array([...proofBytes, ...randomBytes]));\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/20-rdfc-verify.js",
              "parent": "KFcBcDremzzmv9ZMw2lGj",
              "ctx": null,
              "_testId": "urn:uuid:b1c12ee7-dd24-4ea2-98b5-7c4806a5837a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If the \"proofValue\" field, when decoded to raw bytes, is not 64 bytes in length if the associated public key is 32 bytes in length, or 114 bytes in length if the public key is 57 bytes in length, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 58707,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 41,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "fails verification when credential is not canonicalized correctly.",
              "body": "async function() {\n            this.test.cell = {columnId, rowId: this.test.title};\n            const credential = credentials.clone('canonizeJcs');\n            await verificationFail({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/20-rdfc-verify.js",
              "parent": "KFcBcDremzzmv9ZMw2lGj",
              "ctx": null,
              "_testId": "urn:uuid:4ab74abc-d619-4f6b-9e25-b2df7b6e62cd",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "fails verification when credential is not canonicalized correctly."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 58748,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 35,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"eddsa-rdfc-2022\", an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const credential = credentials.clone('incorrectCryptosuite');\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/20-rdfc-verify.js",
              "parent": "KFcBcDremzzmv9ZMw2lGj",
              "ctx": null,
              "_testId": "urn:uuid:05459df6-668e-4920-8292-211955255352",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If the \"cryptosuite\" field is not the string \"eddsa-rdfc-2022\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 58783,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 24,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "ZBh2uIkrTqa72E5vbd7vQ",
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/20-rdfc-verify.js",
          "_testId": "urn:uuid:46803944-db02-442a-8295-3003c98a6c37"
        },
        {
          "title": "Trinsic",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "verifies a valid eddsa-rdfc-2022 proof.",
              "body": "async function() {\n            this.test.cell = {columnId, rowId: this.test.title};\n            const credential = credentials.clone('issuedVc');\n            await verificationSuccess({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/20-rdfc-verify.js",
              "parent": "Kfsw0fBn0gVi_rCHy8EhB",
              "ctx": null,
              "_testId": "urn:uuid:7082ba0f-fcec-4794-9f9f-b1c1584d472d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "verifies a valid eddsa-rdfc-2022 proof."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 58808,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 52,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected a result from verifier.: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected a result from verifier.: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at verificationSuccess (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/assertions.js:66:10)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/20-rdfc-verify.js:44:13)"
              }
            },
            {
              "type": "test",
              "title": "If the \"proofValue\" field, when decoded to raw bytes, is not 64 bytes in length if the associated public key is 32 bytes in length, or 114 bytes in length if the public key is 57 bytes in length, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const credential = credentials.clone('issuedVc');\n          const proofBytes = bs58Decode({id: credential.proof.proofValue});\n          const randomBytes = new Uint8Array(32).map(\n            () => Math.floor(Math.random() * 255));\n          credential.proof.proofValue = bs58Encode(\n            new Uint8Array([...proofBytes, ...randomBytes]));\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/20-rdfc-verify.js",
              "parent": "Kfsw0fBn0gVi_rCHy8EhB",
              "ctx": null,
              "_testId": "urn:uuid:e630f28c-53aa-42f9-86be-a8fe44cf8be3",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "If the \"proofValue\" field, when decoded to raw bytes, is not 64 bytes in length if the associated public key is 32 bytes in length, or 114 bytes in length if the public key is 57 bytes in length, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 58860,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 20,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "fails verification when credential is not canonicalized correctly.",
              "body": "async function() {\n            this.test.cell = {columnId, rowId: this.test.title};\n            const credential = credentials.clone('canonizeJcs');\n            await verificationFail({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/20-rdfc-verify.js",
              "parent": "Kfsw0fBn0gVi_rCHy8EhB",
              "ctx": null,
              "_testId": "urn:uuid:65ebbe7c-9245-4b3f-a633-ce1419a2663c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "fails verification when credential is not canonicalized correctly."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 58880,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 28,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"eddsa-rdfc-2022\", an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const credential = credentials.clone('incorrectCryptosuite');\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/20-rdfc-verify.js",
              "parent": "Kfsw0fBn0gVi_rCHy8EhB",
              "ctx": null,
              "_testId": "urn:uuid:8b2e701e-1b0f-451b-b4b8-0e0e5908a98f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "If the \"cryptosuite\" field is not the string \"eddsa-rdfc-2022\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 58908,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 19,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "ZBh2uIkrTqa72E5vbd7vQ",
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/20-rdfc-verify.js",
          "_testId": "urn:uuid:a5c910d7-e703-4085-92b4-da76ea41c141"
        },
        {
          "title": "bovine",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "verifies a valid eddsa-rdfc-2022 proof.",
              "body": "async function() {\n            this.test.cell = {columnId, rowId: this.test.title};\n            const credential = credentials.clone('issuedVc');\n            await verificationSuccess({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/20-rdfc-verify.js",
              "parent": "ELORPln7sKta8YFNS7JC1",
              "ctx": null,
              "_testId": "urn:uuid:447af7a2-4e23-4250-a240-f4cdc6794383",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine",
                "rowId": "verifies a valid eddsa-rdfc-2022 proof."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 58928,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 383,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proofValue\" field, when decoded to raw bytes, is not 64 bytes in length if the associated public key is 32 bytes in length, or 114 bytes in length if the public key is 57 bytes in length, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const credential = credentials.clone('issuedVc');\n          const proofBytes = bs58Decode({id: credential.proof.proofValue});\n          const randomBytes = new Uint8Array(32).map(\n            () => Math.floor(Math.random() * 255));\n          credential.proof.proofValue = bs58Encode(\n            new Uint8Array([...proofBytes, ...randomBytes]));\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/20-rdfc-verify.js",
              "parent": "ELORPln7sKta8YFNS7JC1",
              "ctx": null,
              "_testId": "urn:uuid:dc124741-23f5-4fb3-a85d-93a213f27459",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine",
                "rowId": "If the \"proofValue\" field, when decoded to raw bytes, is not 64 bytes in length if the associated public key is 32 bytes in length, or 114 bytes in length if the public key is 57 bytes in length, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 59313,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 98,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "fails verification when credential is not canonicalized correctly.",
              "body": "async function() {\n            this.test.cell = {columnId, rowId: this.test.title};\n            const credential = credentials.clone('canonizeJcs');\n            await verificationFail({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/20-rdfc-verify.js",
              "parent": "ELORPln7sKta8YFNS7JC1",
              "ctx": null,
              "_testId": "urn:uuid:bab5fb49-356f-4de1-a1a9-f17565e7705d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine",
                "rowId": "fails verification when credential is not canonicalized correctly."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 59411,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 98,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"eddsa-rdfc-2022\", an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const credential = credentials.clone('incorrectCryptosuite');\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/20-rdfc-verify.js",
              "parent": "ELORPln7sKta8YFNS7JC1",
              "ctx": null,
              "_testId": "urn:uuid:3e222bdb-b3a9-4a3a-b99c-eef5c26cc821",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine",
                "rowId": "If the \"cryptosuite\" field is not the string \"eddsa-rdfc-2022\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 59510,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 94,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "ZBh2uIkrTqa72E5vbd7vQ",
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/20-rdfc-verify.js",
          "_testId": "urn:uuid:a39064fc-fe47-465f-b4aa-fc82ae464d2d"
        }
      ],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "m5hEuqBUaew52wMVbR6xz",
      "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/20-rdfc-verify.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Verifier",
      "_testId": "urn:uuid:56065734-e9f3-4e03-8270-ad6ac07b8143",
      "columns": [
        "ACA-py",
        "apicatalog.com",
        "Digital Bazaar",
        "Grotto Networking",
        "Procivis One Core",
        "SpruceID",
        "Trinsic",
        "bovine"
      ],
      "rows": [
        {
          "id": "verifies a valid eddsa-rdfc-2022 proof.",
          "cells": [
            {
              "type": "test",
              "title": "verifies a valid eddsa-rdfc-2022 proof.",
              "body": "async function() {\n            this.test.cell = {columnId, rowId: this.test.title};\n            const credential = credentials.clone('issuedVc');\n            await verificationSuccess({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/20-rdfc-verify.js",
              "parent": "3s6kIKbxxLxpHOCFH7Pnj",
              "ctx": null,
              "_testId": "urn:uuid:c4ce1266-1d8d-4cd8-a3e3-77f714c70f5d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "ACA-py",
                "rowId": "verifies a valid eddsa-rdfc-2022 proof."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 53130,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 143,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "verifies a valid eddsa-rdfc-2022 proof.",
              "body": "async function() {\n            this.test.cell = {columnId, rowId: this.test.title};\n            const credential = credentials.clone('issuedVc');\n            await verificationSuccess({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/20-rdfc-verify.js",
              "parent": "b3n437O23C15SED9s2oqw",
              "ctx": null,
              "_testId": "urn:uuid:3a78ade5-a6d5-427f-a469-a20816c68db8",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "verifies a valid eddsa-rdfc-2022 proof."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 53389,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 312,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "verifies a valid eddsa-rdfc-2022 proof.",
              "body": "async function() {\n            this.test.cell = {columnId, rowId: this.test.title};\n            const credential = credentials.clone('issuedVc');\n            await verificationSuccess({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/20-rdfc-verify.js",
              "parent": "XovJeOvjww5C5E_3RcXvU",
              "ctx": null,
              "_testId": "urn:uuid:40bf10da-9018-49b5-a6ed-eb012fda80cf",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "verifies a valid eddsa-rdfc-2022 proof."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 54389,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 247,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "verifies a valid eddsa-rdfc-2022 proof.",
              "body": "async function() {\n            this.test.cell = {columnId, rowId: this.test.title};\n            const credential = credentials.clone('issuedVc');\n            await verificationSuccess({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/20-rdfc-verify.js",
              "parent": "IPj3nV5CmwlHpustdc_6c",
              "ctx": null,
              "_testId": "urn:uuid:3f6ff8c9-bcda-4442-8a2c-96b5ae59463d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "verifies a valid eddsa-rdfc-2022 proof."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 54764,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 910,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "verifies a valid eddsa-rdfc-2022 proof.",
              "body": "async function() {\n            this.test.cell = {columnId, rowId: this.test.title};\n            const credential = credentials.clone('issuedVc');\n            await verificationSuccess({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/20-rdfc-verify.js",
              "parent": "ejyf-ZHK7tlMEfuef7j4v",
              "ctx": null,
              "_testId": "urn:uuid:965892ca-0e3c-4596-a4e4-4874dd9431fe",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "verifies a valid eddsa-rdfc-2022 proof."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 57168,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1135,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "verifies a valid eddsa-rdfc-2022 proof.",
              "body": "async function() {\n            this.test.cell = {columnId, rowId: this.test.title};\n            const credential = credentials.clone('issuedVc');\n            await verificationSuccess({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/20-rdfc-verify.js",
              "parent": "KFcBcDremzzmv9ZMw2lGj",
              "ctx": null,
              "_testId": "urn:uuid:0b1d9256-cfa2-4fa6-a082-20416fe2528f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "verifies a valid eddsa-rdfc-2022 proof."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 58640,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 66,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "verifies a valid eddsa-rdfc-2022 proof.",
              "body": "async function() {\n            this.test.cell = {columnId, rowId: this.test.title};\n            const credential = credentials.clone('issuedVc');\n            await verificationSuccess({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/20-rdfc-verify.js",
              "parent": "Kfsw0fBn0gVi_rCHy8EhB",
              "ctx": null,
              "_testId": "urn:uuid:7082ba0f-fcec-4794-9f9f-b1c1584d472d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "verifies a valid eddsa-rdfc-2022 proof."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 58808,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 52,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected a result from verifier.: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected a result from verifier.: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at verificationSuccess (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/assertions.js:66:10)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/20-rdfc-verify.js:44:13)"
              }
            },
            {
              "type": "test",
              "title": "verifies a valid eddsa-rdfc-2022 proof.",
              "body": "async function() {\n            this.test.cell = {columnId, rowId: this.test.title};\n            const credential = credentials.clone('issuedVc');\n            await verificationSuccess({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/20-rdfc-verify.js",
              "parent": "ELORPln7sKta8YFNS7JC1",
              "ctx": null,
              "_testId": "urn:uuid:447af7a2-4e23-4250-a240-f4cdc6794383",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine",
                "rowId": "verifies a valid eddsa-rdfc-2022 proof."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 58928,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 383,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If the \"proofValue\" field, when decoded to raw bytes, is not 64 bytes in length if the associated public key is 32 bytes in length, or 114 bytes in length if the public key is 57 bytes in length, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proofValue\" field, when decoded to raw bytes, is not 64 bytes in length if the associated public key is 32 bytes in length, or 114 bytes in length if the public key is 57 bytes in length, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const credential = credentials.clone('issuedVc');\n          const proofBytes = bs58Decode({id: credential.proof.proofValue});\n          const randomBytes = new Uint8Array(32).map(\n            () => Math.floor(Math.random() * 255));\n          credential.proof.proofValue = bs58Encode(\n            new Uint8Array([...proofBytes, ...randomBytes]));\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/20-rdfc-verify.js",
              "parent": "3s6kIKbxxLxpHOCFH7Pnj",
              "ctx": null,
              "_testId": "urn:uuid:f6dfa04d-1cb4-48cc-8cf1-88c338410b84",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "ACA-py",
                "rowId": "If the \"proofValue\" field, when decoded to raw bytes, is not 64 bytes in length if the associated public key is 32 bytes in length, or 114 bytes in length if the public key is 57 bytes in length, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 53273,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 44,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no result from verifier.: expected Response { status: 200, statusText: 'OK', headers: Headers { 'content-length': '633', 'content-type': 'application/json; charset=utf-8', date: 'Sun, 13 Oct 2024 05:07:16 GMT', server: 'Python/3.12 aiohttp/3.10.9', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no result from verifier.: expected Response { status: 200, statusText: 'OK', headers: Headers { 'content-length': '633', 'content-type': 'application/json; charset=utf-8', date: 'Sun, 13 Oct 2024 05:07:16 GMT', server: 'Python/3.12 aiohttp/3.10.9', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationFail (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/assertions.js:49:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/20-rdfc-verify.js:57:11)"
              }
            },
            {
              "type": "test",
              "title": "If the \"proofValue\" field, when decoded to raw bytes, is not 64 bytes in length if the associated public key is 32 bytes in length, or 114 bytes in length if the public key is 57 bytes in length, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const credential = credentials.clone('issuedVc');\n          const proofBytes = bs58Decode({id: credential.proof.proofValue});\n          const randomBytes = new Uint8Array(32).map(\n            () => Math.floor(Math.random() * 255));\n          credential.proof.proofValue = bs58Encode(\n            new Uint8Array([...proofBytes, ...randomBytes]));\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/20-rdfc-verify.js",
              "parent": "b3n437O23C15SED9s2oqw",
              "ctx": null,
              "_testId": "urn:uuid:70584ca0-d406-4279-8981-dc130b8ae87d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If the \"proofValue\" field, when decoded to raw bytes, is not 64 bytes in length if the associated public key is 32 bytes in length, or 114 bytes in length if the public key is 57 bytes in length, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 53701,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 299,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proofValue\" field, when decoded to raw bytes, is not 64 bytes in length if the associated public key is 32 bytes in length, or 114 bytes in length if the public key is 57 bytes in length, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const credential = credentials.clone('issuedVc');\n          const proofBytes = bs58Decode({id: credential.proof.proofValue});\n          const randomBytes = new Uint8Array(32).map(\n            () => Math.floor(Math.random() * 255));\n          credential.proof.proofValue = bs58Encode(\n            new Uint8Array([...proofBytes, ...randomBytes]));\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/20-rdfc-verify.js",
              "parent": "XovJeOvjww5C5E_3RcXvU",
              "ctx": null,
              "_testId": "urn:uuid:829f3903-8e6a-4637-98e5-aba642f4bdfe",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the \"proofValue\" field, when decoded to raw bytes, is not 64 bytes in length if the associated public key is 32 bytes in length, or 114 bytes in length if the public key is 57 bytes in length, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 54636,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 47,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proofValue\" field, when decoded to raw bytes, is not 64 bytes in length if the associated public key is 32 bytes in length, or 114 bytes in length if the public key is 57 bytes in length, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const credential = credentials.clone('issuedVc');\n          const proofBytes = bs58Decode({id: credential.proof.proofValue});\n          const randomBytes = new Uint8Array(32).map(\n            () => Math.floor(Math.random() * 255));\n          credential.proof.proofValue = bs58Encode(\n            new Uint8Array([...proofBytes, ...randomBytes]));\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/20-rdfc-verify.js",
              "parent": "IPj3nV5CmwlHpustdc_6c",
              "ctx": null,
              "_testId": "urn:uuid:b1577db8-0c15-4ff2-97b8-16105a7b654e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If the \"proofValue\" field, when decoded to raw bytes, is not 64 bytes in length if the associated public key is 32 bytes in length, or 114 bytes in length if the public key is 57 bytes in length, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 55674,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 676,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proofValue\" field, when decoded to raw bytes, is not 64 bytes in length if the associated public key is 32 bytes in length, or 114 bytes in length if the public key is 57 bytes in length, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const credential = credentials.clone('issuedVc');\n          const proofBytes = bs58Decode({id: credential.proof.proofValue});\n          const randomBytes = new Uint8Array(32).map(\n            () => Math.floor(Math.random() * 255));\n          credential.proof.proofValue = bs58Encode(\n            new Uint8Array([...proofBytes, ...randomBytes]));\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/20-rdfc-verify.js",
              "parent": "ejyf-ZHK7tlMEfuef7j4v",
              "ctx": null,
              "_testId": "urn:uuid:bf14d124-fb24-40c4-b415-263305c87155",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "If the \"proofValue\" field, when decoded to raw bytes, is not 64 bytes in length if the associated public key is 32 bytes in length, or 114 bytes in length if the public key is 57 bytes in length, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 58303,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 109,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proofValue\" field, when decoded to raw bytes, is not 64 bytes in length if the associated public key is 32 bytes in length, or 114 bytes in length if the public key is 57 bytes in length, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const credential = credentials.clone('issuedVc');\n          const proofBytes = bs58Decode({id: credential.proof.proofValue});\n          const randomBytes = new Uint8Array(32).map(\n            () => Math.floor(Math.random() * 255));\n          credential.proof.proofValue = bs58Encode(\n            new Uint8Array([...proofBytes, ...randomBytes]));\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/20-rdfc-verify.js",
              "parent": "KFcBcDremzzmv9ZMw2lGj",
              "ctx": null,
              "_testId": "urn:uuid:b1c12ee7-dd24-4ea2-98b5-7c4806a5837a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If the \"proofValue\" field, when decoded to raw bytes, is not 64 bytes in length if the associated public key is 32 bytes in length, or 114 bytes in length if the public key is 57 bytes in length, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 58707,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 41,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proofValue\" field, when decoded to raw bytes, is not 64 bytes in length if the associated public key is 32 bytes in length, or 114 bytes in length if the public key is 57 bytes in length, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const credential = credentials.clone('issuedVc');\n          const proofBytes = bs58Decode({id: credential.proof.proofValue});\n          const randomBytes = new Uint8Array(32).map(\n            () => Math.floor(Math.random() * 255));\n          credential.proof.proofValue = bs58Encode(\n            new Uint8Array([...proofBytes, ...randomBytes]));\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/20-rdfc-verify.js",
              "parent": "Kfsw0fBn0gVi_rCHy8EhB",
              "ctx": null,
              "_testId": "urn:uuid:e630f28c-53aa-42f9-86be-a8fe44cf8be3",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "If the \"proofValue\" field, when decoded to raw bytes, is not 64 bytes in length if the associated public key is 32 bytes in length, or 114 bytes in length if the public key is 57 bytes in length, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 58860,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 20,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"proofValue\" field, when decoded to raw bytes, is not 64 bytes in length if the associated public key is 32 bytes in length, or 114 bytes in length if the public key is 57 bytes in length, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const credential = credentials.clone('issuedVc');\n          const proofBytes = bs58Decode({id: credential.proof.proofValue});\n          const randomBytes = new Uint8Array(32).map(\n            () => Math.floor(Math.random() * 255));\n          credential.proof.proofValue = bs58Encode(\n            new Uint8Array([...proofBytes, ...randomBytes]));\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/20-rdfc-verify.js",
              "parent": "ELORPln7sKta8YFNS7JC1",
              "ctx": null,
              "_testId": "urn:uuid:dc124741-23f5-4fb3-a85d-93a213f27459",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine",
                "rowId": "If the \"proofValue\" field, when decoded to raw bytes, is not 64 bytes in length if the associated public key is 32 bytes in length, or 114 bytes in length if the public key is 57 bytes in length, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 59313,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 98,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "fails verification when credential is not canonicalized correctly.",
          "cells": [
            {
              "type": "test",
              "title": "fails verification when credential is not canonicalized correctly.",
              "body": "async function() {\n            this.test.cell = {columnId, rowId: this.test.title};\n            const credential = credentials.clone('canonizeJcs');\n            await verificationFail({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/20-rdfc-verify.js",
              "parent": "3s6kIKbxxLxpHOCFH7Pnj",
              "ctx": null,
              "_testId": "urn:uuid:7df53ab9-1c08-498d-a726-eabe684cc559",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "ACA-py",
                "rowId": "fails verification when credential is not canonicalized correctly."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 53317,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 44,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no result from verifier.: expected Response { status: 200, statusText: 'OK', headers: Headers { 'content-length': '633', 'content-type': 'application/json; charset=utf-8', date: 'Sun, 13 Oct 2024 05:07:16 GMT', server: 'Python/3.12 aiohttp/3.10.9', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no result from verifier.: expected Response { status: 200, statusText: 'OK', headers: Headers { 'content-length': '633', 'content-type': 'application/json; charset=utf-8', date: 'Sun, 13 Oct 2024 05:07:16 GMT', server: 'Python/3.12 aiohttp/3.10.9', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationFail (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/assertions.js:49:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/20-rdfc-verify.js:68:13)"
              }
            },
            {
              "type": "test",
              "title": "fails verification when credential is not canonicalized correctly.",
              "body": "async function() {\n            this.test.cell = {columnId, rowId: this.test.title};\n            const credential = credentials.clone('canonizeJcs');\n            await verificationFail({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/20-rdfc-verify.js",
              "parent": "b3n437O23C15SED9s2oqw",
              "ctx": null,
              "_testId": "urn:uuid:a6adf78e-f057-4fb3-ad8e-283f75e598ad",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "fails verification when credential is not canonicalized correctly."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 53999,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 296,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "fails verification when credential is not canonicalized correctly.",
              "body": "async function() {\n            this.test.cell = {columnId, rowId: this.test.title};\n            const credential = credentials.clone('canonizeJcs');\n            await verificationFail({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/20-rdfc-verify.js",
              "parent": "XovJeOvjww5C5E_3RcXvU",
              "ctx": null,
              "_testId": "urn:uuid:c4bd1c4f-2492-4fc4-9917-16c9a91991e1",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "fails verification when credential is not canonicalized correctly."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 54684,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 48,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "fails verification when credential is not canonicalized correctly.",
              "body": "async function() {\n            this.test.cell = {columnId, rowId: this.test.title};\n            const credential = credentials.clone('canonizeJcs');\n            await verificationFail({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/20-rdfc-verify.js",
              "parent": "IPj3nV5CmwlHpustdc_6c",
              "ctx": null,
              "_testId": "urn:uuid:fe9f59bd-f037-4ab0-9965-3db12d32a5ac",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "fails verification when credential is not canonicalized correctly."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 56350,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 746,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "fails verification when credential is not canonicalized correctly.",
              "body": "async function() {\n            this.test.cell = {columnId, rowId: this.test.title};\n            const credential = credentials.clone('canonizeJcs');\n            await verificationFail({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/20-rdfc-verify.js",
              "parent": "ejyf-ZHK7tlMEfuef7j4v",
              "ctx": null,
              "_testId": "urn:uuid:3cfdd595-457a-4a82-ab37-c055d867f9d2",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "fails verification when credential is not canonicalized correctly."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 58413,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 127,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "fails verification when credential is not canonicalized correctly.",
              "body": "async function() {\n            this.test.cell = {columnId, rowId: this.test.title};\n            const credential = credentials.clone('canonizeJcs');\n            await verificationFail({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/20-rdfc-verify.js",
              "parent": "KFcBcDremzzmv9ZMw2lGj",
              "ctx": null,
              "_testId": "urn:uuid:4ab74abc-d619-4f6b-9e25-b2df7b6e62cd",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "fails verification when credential is not canonicalized correctly."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 58748,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 35,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "fails verification when credential is not canonicalized correctly.",
              "body": "async function() {\n            this.test.cell = {columnId, rowId: this.test.title};\n            const credential = credentials.clone('canonizeJcs');\n            await verificationFail({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/20-rdfc-verify.js",
              "parent": "Kfsw0fBn0gVi_rCHy8EhB",
              "ctx": null,
              "_testId": "urn:uuid:65ebbe7c-9245-4b3f-a633-ce1419a2663c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "fails verification when credential is not canonicalized correctly."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 58880,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 28,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "fails verification when credential is not canonicalized correctly.",
              "body": "async function() {\n            this.test.cell = {columnId, rowId: this.test.title};\n            const credential = credentials.clone('canonizeJcs');\n            await verificationFail({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/20-rdfc-verify.js",
              "parent": "ELORPln7sKta8YFNS7JC1",
              "ctx": null,
              "_testId": "urn:uuid:bab5fb49-356f-4de1-a1a9-f17565e7705d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine",
                "rowId": "fails verification when credential is not canonicalized correctly."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 59411,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 98,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If the \"cryptosuite\" field is not the string \"eddsa-rdfc-2022\", an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"eddsa-rdfc-2022\", an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const credential = credentials.clone('incorrectCryptosuite');\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/20-rdfc-verify.js",
              "parent": "3s6kIKbxxLxpHOCFH7Pnj",
              "ctx": null,
              "_testId": "urn:uuid:fec0d3ba-00a2-45a3-b70c-21742c7ef2e1",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "ACA-py",
                "rowId": "If the \"cryptosuite\" field is not the string \"eddsa-rdfc-2022\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 53362,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 27,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"eddsa-rdfc-2022\", an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const credential = credentials.clone('incorrectCryptosuite');\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/20-rdfc-verify.js",
              "parent": "b3n437O23C15SED9s2oqw",
              "ctx": null,
              "_testId": "urn:uuid:424c1efb-d63b-4f84-a85e-3491a290440c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "apicatalog.com",
                "rowId": "If the \"cryptosuite\" field is not the string \"eddsa-rdfc-2022\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 54296,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 93,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"eddsa-rdfc-2022\", an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const credential = credentials.clone('incorrectCryptosuite');\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/20-rdfc-verify.js",
              "parent": "XovJeOvjww5C5E_3RcXvU",
              "ctx": null,
              "_testId": "urn:uuid:1bac315b-9d02-4f2d-88fb-32e7cf158ca1",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Digital Bazaar",
                "rowId": "If the \"cryptosuite\" field is not the string \"eddsa-rdfc-2022\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 54732,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 32,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"eddsa-rdfc-2022\", an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const credential = credentials.clone('incorrectCryptosuite');\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/20-rdfc-verify.js",
              "parent": "IPj3nV5CmwlHpustdc_6c",
              "ctx": null,
              "_testId": "urn:uuid:bceac945-ade1-4c86-b740-1b673126c5bd",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If the \"cryptosuite\" field is not the string \"eddsa-rdfc-2022\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 57096,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 72,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"eddsa-rdfc-2022\", an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const credential = credentials.clone('incorrectCryptosuite');\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/20-rdfc-verify.js",
              "parent": "ejyf-ZHK7tlMEfuef7j4v",
              "ctx": null,
              "_testId": "urn:uuid:faf50e10-3746-42fe-bfca-6979aeecf391",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Procivis One Core",
                "rowId": "If the \"cryptosuite\" field is not the string \"eddsa-rdfc-2022\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 58540,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 100,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"eddsa-rdfc-2022\", an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const credential = credentials.clone('incorrectCryptosuite');\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/20-rdfc-verify.js",
              "parent": "KFcBcDremzzmv9ZMw2lGj",
              "ctx": null,
              "_testId": "urn:uuid:05459df6-668e-4920-8292-211955255352",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "SpruceID",
                "rowId": "If the \"cryptosuite\" field is not the string \"eddsa-rdfc-2022\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 58783,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 24,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"eddsa-rdfc-2022\", an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const credential = credentials.clone('incorrectCryptosuite');\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/20-rdfc-verify.js",
              "parent": "Kfsw0fBn0gVi_rCHy8EhB",
              "ctx": null,
              "_testId": "urn:uuid:8b2e701e-1b0f-451b-b4b8-0e0e5908a98f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Trinsic",
                "rowId": "If the \"cryptosuite\" field is not the string \"eddsa-rdfc-2022\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 58908,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 19,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"eddsa-rdfc-2022\", an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const credential = credentials.clone('incorrectCryptosuite');\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/20-rdfc-verify.js",
              "parent": "ELORPln7sKta8YFNS7JC1",
              "ctx": null,
              "_testId": "urn:uuid:3e222bdb-b3a9-4a3a-b99c-eef5c26cc821",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine",
                "rowId": "If the \"cryptosuite\" field is not the string \"eddsa-rdfc-2022\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 59510,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 94,
              "state": "passed",
              "speed": "slow"
            }
          ]
        }
      ]
    },
    {
      "title": "eddsa-rdfc-2022 (interop)",
      "ctx": null,
      "suites": [],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [
        {
          "title": "\"before all\" hook in \"eddsa-rdfc-2022 (interop)\"",
          "body": "async function() {\n    const credentials = await generateTestData();\n    validVc = credentials.clone('validVc');\n  }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "QruTcGAJQsbCnS0O2ie94",
          "ctx": null,
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 59604,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 1,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"eddsa-rdfc-2022 (interop)\"",
          "body": "async function() {\n      const [issuer] = endpoints;\n      try {\n        issuedVc = await createInitialVc({issuer, vc: validVc});\n      } catch(e) {\n        console.error(`issuer ${issuerName} failed to issue interop VC`, e);\n      }\n    }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "QruTcGAJQsbCnS0O2ie94",
          "ctx": null,
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 59605,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 214,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"eddsa-rdfc-2022 (interop)\"",
          "body": "async function() {\n      const [issuer] = endpoints;\n      try {\n        issuedVc = await createInitialVc({issuer, vc: validVc});\n      } catch(e) {\n        console.error(`issuer ${issuerName} failed to issue interop VC`, e);\n      }\n    }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "QruTcGAJQsbCnS0O2ie94",
          "ctx": null,
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 59818,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 185,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"eddsa-rdfc-2022 (interop)\"",
          "body": "async function() {\n      const [issuer] = endpoints;\n      try {\n        issuedVc = await createInitialVc({issuer, vc: validVc});\n      } catch(e) {\n        console.error(`issuer ${issuerName} failed to issue interop VC`, e);\n      }\n    }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "QruTcGAJQsbCnS0O2ie94",
          "ctx": null,
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 60004,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 215,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"eddsa-rdfc-2022 (interop)\"",
          "body": "async function() {\n      const [issuer] = endpoints;\n      try {\n        issuedVc = await createInitialVc({issuer, vc: validVc});\n      } catch(e) {\n        console.error(`issuer ${issuerName} failed to issue interop VC`, e);\n      }\n    }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "QruTcGAJQsbCnS0O2ie94",
          "ctx": null,
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 60219,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 76,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"eddsa-rdfc-2022 (interop)\"",
          "body": "async function() {\n      const [issuer] = endpoints;\n      try {\n        issuedVc = await createInitialVc({issuer, vc: validVc});\n      } catch(e) {\n        console.error(`issuer ${issuerName} failed to issue interop VC`, e);\n      }\n    }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "QruTcGAJQsbCnS0O2ie94",
          "ctx": null,
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 60295,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 665,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"eddsa-rdfc-2022 (interop)\"",
          "body": "async function() {\n      const [issuer] = endpoints;\n      try {\n        issuedVc = await createInitialVc({issuer, vc: validVc});\n      } catch(e) {\n        console.error(`issuer ${issuerName} failed to issue interop VC`, e);\n      }\n    }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "QruTcGAJQsbCnS0O2ie94",
          "ctx": null,
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 60959,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 36,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"eddsa-rdfc-2022 (interop)\"",
          "body": "async function() {\n      const [issuer] = endpoints;\n      try {\n        issuedVc = await createInitialVc({issuer, vc: validVc});\n      } catch(e) {\n        console.error(`issuer ${issuerName} failed to issue interop VC`, e);\n      }\n    }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "QruTcGAJQsbCnS0O2ie94",
          "ctx": null,
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 60996,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 70,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"eddsa-rdfc-2022 (interop)\"",
          "body": "async function() {\n      const [issuer] = endpoints;\n      try {\n        issuedVc = await createInitialVc({issuer, vc: validVc});\n      } catch(e) {\n        console.error(`issuer ${issuerName} failed to issue interop VC`, e);\n      }\n    }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "QruTcGAJQsbCnS0O2ie94",
          "ctx": null,
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 61065,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 100,
          "_error": null
        }
      ],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "DQ_CnX3Ym0TcRvd_Af9IF",
      "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Issuer",
      "columnLabel": "Verifier",
      "_testId": "urn:uuid:e7ca9589-269f-45b7-9ca0-98165b45133e",
      "columns": [
        "ACA-py",
        "apicatalog.com",
        "Digital Bazaar",
        "Grotto Networking",
        "Procivis One Core",
        "SpruceID",
        "Trinsic",
        "bovine"
      ],
      "rows": [
        {
          "id": "ACA-py",
          "cells": [
            {
              "type": "test",
              "title": "ACA-py should verify ACA-py",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "QruTcGAJQsbCnS0O2ie94",
              "ctx": null,
              "_testId": "urn:uuid:dd1de51a-50a4-48b4-86e9-476201c4860c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "ACA-py",
                "columnId": "ACA-py"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 61166,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected issuer: ACA-py to issue a VC: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected issuer: ACA-py to issue a VC: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js:48:16)\n    at process.processImmediate (node:internal/timers:483:21)"
              }
            },
            {
              "type": "test",
              "title": "apicatalog.com should verify ACA-py",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "QruTcGAJQsbCnS0O2ie94",
              "ctx": null,
              "_testId": "urn:uuid:e6da92da-0a23-427a-92b8-264d269df763",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "ACA-py",
                "columnId": "apicatalog.com"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 61167,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected issuer: ACA-py to issue a VC: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected issuer: ACA-py to issue a VC: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js:48:16)\n    at process.processImmediate (node:internal/timers:483:21)"
              }
            },
            {
              "type": "test",
              "title": "Digital Bazaar should verify ACA-py",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "QruTcGAJQsbCnS0O2ie94",
              "ctx": null,
              "_testId": "urn:uuid:d4811ed4-aaaf-4c84-9961-ba94fff2bf8e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "ACA-py",
                "columnId": "Digital Bazaar"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 61167,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected issuer: ACA-py to issue a VC: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected issuer: ACA-py to issue a VC: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js:48:16)\n    at process.processImmediate (node:internal/timers:483:21)"
              }
            },
            {
              "type": "test",
              "title": "Grotto Networking should verify ACA-py",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "QruTcGAJQsbCnS0O2ie94",
              "ctx": null,
              "_testId": "urn:uuid:bcbe0fe2-82c0-4d6a-a047-a52b2fc68da9",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "ACA-py",
                "columnId": "Grotto Networking"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 61167,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected issuer: ACA-py to issue a VC: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected issuer: ACA-py to issue a VC: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js:48:16)\n    at process.processImmediate (node:internal/timers:483:21)"
              }
            },
            {
              "type": "test",
              "title": "Procivis One Core should verify ACA-py",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "QruTcGAJQsbCnS0O2ie94",
              "ctx": null,
              "_testId": "urn:uuid:24e0be9f-1f20-4a27-97eb-cc903c4db808",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "ACA-py",
                "columnId": "Procivis One Core"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 61168,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected issuer: ACA-py to issue a VC: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected issuer: ACA-py to issue a VC: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js:48:16)\n    at process.processImmediate (node:internal/timers:483:21)"
              }
            },
            {
              "type": "test",
              "title": "SpruceID should verify ACA-py",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "QruTcGAJQsbCnS0O2ie94",
              "ctx": null,
              "_testId": "urn:uuid:1632bbcd-4307-45f5-96fb-3f89206c4467",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "ACA-py",
                "columnId": "SpruceID"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 61168,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected issuer: ACA-py to issue a VC: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected issuer: ACA-py to issue a VC: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js:48:16)\n    at process.processImmediate (node:internal/timers:483:21)"
              }
            },
            {
              "type": "test",
              "title": "Trinsic should verify ACA-py",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "QruTcGAJQsbCnS0O2ie94",
              "ctx": null,
              "_testId": "urn:uuid:c1eb7d29-63c0-4bb6-8d22-c5022dd71d06",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "ACA-py",
                "columnId": "Trinsic"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 61168,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected issuer: ACA-py to issue a VC: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected issuer: ACA-py to issue a VC: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js:48:16)\n    at process.processImmediate (node:internal/timers:483:21)"
              }
            },
            {
              "type": "test",
              "title": "bovine should verify ACA-py",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "QruTcGAJQsbCnS0O2ie94",
              "ctx": null,
              "_testId": "urn:uuid:698569a7-beb9-49d0-b3ae-b2c1a01d263b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "ACA-py",
                "columnId": "bovine"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 61169,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected issuer: ACA-py to issue a VC: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected issuer: ACA-py to issue a VC: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js:48:16)\n    at process.processImmediate (node:internal/timers:483:21)"
              }
            }
          ]
        },
        {
          "id": "apicatalog.com",
          "cells": [
            {
              "type": "test",
              "title": "ACA-py should verify apicatalog.com",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "QruTcGAJQsbCnS0O2ie94",
              "ctx": null,
              "_testId": "urn:uuid:5788531c-6998-4d26-b94e-c9927dd30905",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "apicatalog.com",
                "columnId": "ACA-py"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 61170,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 30,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",\"https://w3id.org/security/data-integrity/v2\",\"https://w3id.org/security/multikey/v1\"],\"id\":\"urn:uuid:90ba8a41-7030-4ce2-80a7-b8891ee6ec8a\",\"type\":\"VerifiableCredential\",\"issuer\":\"https://vc.apicatalog.com/issuer/?suite=eddsa-rdfc-2022\",\"issuanceDate\":\"2020-03-16T22:37:26.544Z\",\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\"},\"proof\":{\"verificationMethod\":\"did:key:z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y#z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y\",\"type\":\"DataIntegrityProof\",\"cryptosuite\":\"eddsa-rdfc-2022\",\"proofPurpose\":\"assertionMethod\",\"created\":\"2024-10-13T05:07:23Z\",\"proofValue\":\"z3DYBifP6QTh8jqJH1oC6V3BqYvtds4vQ2j7sYBFAfGZRpt1MstJNpyZXENfCSNPEcpovpBqcNXPsAkWvxoADsMv7\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          "https://w3id.org/security/data-integrity/v2",
                          "https://w3id.org/security/multikey/v1"
                        ],
                        "id": "urn:uuid:90ba8a41-7030-4ce2-80a7-b8891ee6ec8a",
                        "type": "VerifiableCredential",
                        "issuer": "https://vc.apicatalog.com/issuer/?suite=eddsa-rdfc-2022",
                        "issuanceDate": "2020-03-16T22:37:26.544Z",
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                        },
                        "proof": {
                          "verificationMethod": "did:key:z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y#z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y",
                          "type": "DataIntegrityProof",
                          "cryptosuite": "eddsa-rdfc-2022",
                          "proofPurpose": "assertionMethod",
                          "created": "2024-10-13T05:07:23Z",
                          "proofValue": "z3DYBifP6QTh8jqJH1oC6V3BqYvtds4vQ2j7sYBFAfGZRpt1MstJNpyZXENfCSNPEcpovpBqcNXPsAkWvxoADsMv7"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://aca-py.test-suite.app/vc/credentials/verify",
                  "status": 422,
                  "data": {
                    "json": {
                      "verifiableCredential": {
                        "type": [
                          "Not a valid list."
                        ]
                      }
                    }
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js:56:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "apicatalog.com should verify apicatalog.com",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "QruTcGAJQsbCnS0O2ie94",
              "ctx": null,
              "_testId": "urn:uuid:c815275f-3a4d-4b39-99dd-9fe5d3139747",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "apicatalog.com",
                "columnId": "apicatalog.com"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 61200,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 55,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "Digital Bazaar should verify apicatalog.com",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "QruTcGAJQsbCnS0O2ie94",
              "ctx": null,
              "_testId": "urn:uuid:bea903ae-3065-4b0d-8d5b-d2c6d2c87800",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "apicatalog.com",
                "columnId": "Digital Bazaar"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 61255,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 180,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: A validation error occured in … { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          "https://w3id.org/security/data-integrity/v2",
                          "https://w3id.org/security/multikey/v1"
                        ],
                        "id": "urn:uuid:90ba8a41-7030-4ce2-80a7-b8891ee6ec8a",
                        "type": "VerifiableCredential",
                        "issuer": "https://vc.apicatalog.com/issuer/?suite=eddsa-rdfc-2022",
                        "issuanceDate": "2020-03-16T22:37:26.544Z",
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                        },
                        "proof": {
                          "verificationMethod": "did:key:z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y#z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y",
                          "type": "DataIntegrityProof",
                          "cryptosuite": "eddsa-rdfc-2022",
                          "proofPurpose": "assertionMethod",
                          "created": "2024-10-13T05:07:23Z",
                          "proofValue": "z3DYBifP6QTh8jqJH1oC6V3BqYvtds4vQ2j7sYBFAfGZRpt1MstJNpyZXENfCSNPEcpovpBqcNXPsAkWvxoADsMv7"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half",
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",\"https://w3id.org/security/data-integrity/v2\",\"https://w3id.org/security/multikey/v1\"],\"id\":\"urn:uuid:90ba8a41-7030-4ce2-80a7-b8891ee6ec8a\",\"type\":\"VerifiableCredential\",\"issuer\":\"https://vc.apicatalog.com/issuer/?suite=eddsa-rdfc-2022\",\"issuanceDate\":\"2020-03-16T22:37:26.544Z\",\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\"},\"proof\":{\"verificationMethod\":\"did:key:z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y#z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y\",\"type\":\"DataIntegrityProof\",\"cryptosuite\":\"eddsa-rdfc-2022\",\"proofPurpose\":\"assertionMethod\",\"created\":\"2024-10-13T05:07:23Z\",\"proofValue\":\"z3DYBifP6QTh8jqJH1oC6V3BqYvtds4vQ2j7sYBFAfGZRpt1MstJNpyZXENfCSNPEcpovpBqcNXPsAkWvxoADsMv7\"}},\"options\":{\"checks\":[\"proof\"]}}"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc2.veresverifier.dev/verifiers/z19w7KofwvE2nkJeRVLp8NDxz/credentials/verify",
                  "status": 400,
                  "data": {
                    "name": "ValidationError",
                    "message": "A validation error occured in the 'Verify Credential Body' validator.",
                    "details": {
                      "errors": [
                        {
                          "stack": "ValidationError: should be array\n    at _createError (file:///home/node/app/node_modules/@bedrock/validation/lib/index.js:240:17)\n    at validate (file:///home/node/app/node_modules/@bedrock/validation/lib/index.js:88:14)\n    at validate (file:///home/node/app/node_modules/@bedrock/validation/lib/index.js:181:22)\n    at Layer.handle [as handle_request] (/home/node/app/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/node/app/node_modules/express/lib/router/route.js:149:13)\n    at cors (/home/node/app/node_modules/cors/lib/index.js:188:7)\n    at /home/node/app/node_modules/cors/lib/index.js:224:17\n    at originCallback (/home/node/app/node_modules/cors/lib/index.js:214:15)\n    at /home/node/app/node_modules/cors/lib/index.js:219:13\n    at optionsCallback (/home/node/app/node_modules/cors/lib/index.js:199:9)",
                          "name": "ValidationError",
                          "message": "should be array",
                          "details": {
                            "instance": {
                              "verifiableCredential": {
                                "@context": [
                                  "https://www.w3.org/2018/credentials/v1",
                                  "https://w3id.org/security/data-integrity/v2",
                                  "https://w3id.org/security/multikey/v1"
                                ],
                                "id": "urn:uuid:90ba8a41-7030-4ce2-80a7-b8891ee6ec8a",
                                "type": "VerifiableCredential",
                                "issuer": "https://vc.apicatalog.com/issuer/?suite=eddsa-rdfc-2022",
                                "issuanceDate": "2020-03-16T22:37:26.544Z",
                                "credentialSubject": {
                                  "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                                },
                                "proof": {
                                  "verificationMethod": "did:key:z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y#z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y",
                                  "type": "DataIntegrityProof",
                                  "cryptosuite": "eddsa-rdfc-2022",
                                  "proofPurpose": "assertionMethod",
                                  "created": "2024-10-13T05:07:23Z",
                                  "proofValue": "z3DYBifP6QTh8jqJH1oC6V3BqYvtds4vQ2j7sYBFAfGZRpt1MstJNpyZXENfCSNPEcpovpBqcNXPsAkWvxoADsMv7"
                                }
                              },
                              "options": {
                                "checks": [
                                  "proof"
                                ]
                              }
                            },
                            "params": {
                              "type": "array"
                            },
                            "path": ".verifiableCredential.type",
                            "public": true,
                            "schemaPath": "#/properties/verifiableCredential/anyOf/0/properties/type/type",
                            "schema": {
                              "description": "",
                              "title": ""
                            },
                            "value": "VerifiableCredential"
                          },
                          "cause": null
                        },
                        {
                          "stack": "ValidationError: should NOT have additional properties\n    at _createError (file:///home/node/app/node_modules/@bedrock/validation/lib/index.js:240:17)\n    at validate (file:///home/node/app/node_modules/@bedrock/validation/lib/index.js:88:14)\n    at validate (file:///home/node/app/node_modules/@bedrock/validation/lib/index.js:181:22)\n    at Layer.handle [as handle_request] (/home/node/app/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/node/app/node_modules/express/lib/router/route.js:149:13)\n    at cors (/home/node/app/node_modules/cors/lib/index.js:188:7)\n    at /home/node/app/node_modules/cors/lib/index.js:224:17\n    at originCallback (/home/node/app/node_modules/cors/lib/index.js:214:15)\n    at /home/node/app/node_modules/cors/lib/index.js:219:13\n    at optionsCallback (/home/node/app/node_modules/cors/lib/index.js:199:9)",
                          "name": "ValidationError",
                          "message": "should NOT have additional properties",
                          "details": {
                            "instance": {
                              "verifiableCredential": {
                                "@context": [
                                  "https://www.w3.org/2018/credentials/v1",
                                  "https://w3id.org/security/data-integrity/v2",
                                  "https://w3id.org/security/multikey/v1"
                                ],
                                "id": "urn:uuid:90ba8a41-7030-4ce2-80a7-b8891ee6ec8a",
                                "type": "VerifiableCredential",
                                "issuer": "https://vc.apicatalog.com/issuer/?suite=eddsa-rdfc-2022",
                                "issuanceDate": "2020-03-16T22:37:26.544Z",
                                "credentialSubject": {
                                  "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                                },
                                "proof": {
                                  "verificationMethod": "did:key:z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y#z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y",
                                  "type": "DataIntegrityProof",
                                  "cryptosuite": "eddsa-rdfc-2022",
                                  "proofPurpose": "assertionMethod",
                                  "created": "2024-10-13T05:07:23Z",
                                  "proofValue": "z3DYBifP6QTh8jqJH1oC6V3BqYvtds4vQ2j7sYBFAfGZRpt1MstJNpyZXENfCSNPEcpovpBqcNXPsAkWvxoADsMv7"
                                }
                              },
                              "options": {
                                "checks": [
                                  "proof"
                                ]
                              }
                            },
                            "params": {
                              "additionalProperty": "issuer"
                            },
                            "path": ".verifiableCredential",
                            "public": true,
                            "schemaPath": "#/properties/verifiableCredential/anyOf/1/additionalProperties",
                            "schema": {
                              "description": "",
                              "title": "Enveloped Verifiable Credential"
                            },
                            "value": {
                              "@context": [
                                "https://www.w3.org/2018/credentials/v1",
                                "https://w3id.org/security/data-integrity/v2",
                                "https://w3id.org/security/multikey/v1"
                              ],
                              "id": "urn:uuid:90ba8a41-7030-4ce2-80a7-b8891ee6ec8a",
                              "type": "VerifiableCredential",
                              "issuer": "https://vc.apicatalog.com/issuer/?suite=eddsa-rdfc-2022",
                              "issuanceDate": "2020-03-16T22:37:26.544Z",
                              "credentialSubject": {
                                "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                              },
                              "proof": {
                                "verificationMethod": "did:key:z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y#z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y",
                                "type": "DataIntegrityProof",
                                "cryptosuite": "eddsa-rdfc-2022",
                                "proofPurpose": "assertionMethod",
                                "created": "2024-10-13T05:07:23Z",
                                "proofValue": "z3DYBifP6QTh8jqJH1oC6V3BqYvtds4vQ2j7sYBFAfGZRpt1MstJNpyZXENfCSNPEcpovpBqcNXPsAkWvxoADsMv7"
                              }
                            }
                          },
                          "cause": null
                        },
                        {
                          "stack": "ValidationError: should match some schema in anyOf\n    at _createError (file:///home/node/app/node_modules/@bedrock/validation/lib/index.js:240:17)\n    at validate (file:///home/node/app/node_modules/@bedrock/validation/lib/index.js:88:14)\n    at validate (file:///home/node/app/node_modules/@bedrock/validation/lib/index.js:181:22)\n    at Layer.handle [as handle_request] (/home/node/app/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/node/app/node_modules/express/lib/router/route.js:149:13)\n    at cors (/home/node/app/node_modules/cors/lib/index.js:188:7)\n    at /home/node/app/node_modules/cors/lib/index.js:224:17\n    at originCallback (/home/node/app/node_modules/cors/lib/index.js:214:15)\n    at /home/node/app/node_modules/cors/lib/index.js:219:13\n    at optionsCallback (/home/node/app/node_modules/cors/lib/index.js:199:9)",
                          "name": "ValidationError",
                          "message": "should match some schema in anyOf",
                          "details": {
                            "instance": {
                              "verifiableCredential": {
                                "@context": [
                                  "https://www.w3.org/2018/credentials/v1",
                                  "https://w3id.org/security/data-integrity/v2",
                                  "https://w3id.org/security/multikey/v1"
                                ],
                                "id": "urn:uuid:90ba8a41-7030-4ce2-80a7-b8891ee6ec8a",
                                "type": "VerifiableCredential",
                                "issuer": "https://vc.apicatalog.com/issuer/?suite=eddsa-rdfc-2022",
                                "issuanceDate": "2020-03-16T22:37:26.544Z",
                                "credentialSubject": {
                                  "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                                },
                                "proof": {
                                  "verificationMethod": "did:key:z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y#z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y",
                                  "type": "DataIntegrityProof",
                                  "cryptosuite": "eddsa-rdfc-2022",
                                  "proofPurpose": "assertionMethod",
                                  "created": "2024-10-13T05:07:23Z",
                                  "proofValue": "z3DYBifP6QTh8jqJH1oC6V3BqYvtds4vQ2j7sYBFAfGZRpt1MstJNpyZXENfCSNPEcpovpBqcNXPsAkWvxoADsMv7"
                                }
                              },
                              "options": {
                                "checks": [
                                  "proof"
                                ]
                              }
                            },
                            "params": {},
                            "path": ".verifiableCredential",
                            "public": true,
                            "schemaPath": "#/properties/verifiableCredential/anyOf",
                            "schema": {
                              "description": "",
                              "title": {
                                "title": "Verifiable Credential",
                                "type": "object",
                                "required": [
                                  "@context",
                                  "credentialSubject",
                                  "issuer",
                                  "type"
                                ],
                                "additionalProperties": true,
                                "properties": {
                                  "@context": {
                                    "type": "array",
                                    "minItems": 1,
                                    "items": [
                                      {
                                        "oneOf": [
                                          {
                                            "const": "https://www.w3.org/2018/credentials/v1"
                                          },
                                          {
                                            "const": "https://www.w3.org/ns/credentials/v2"
                                          }
                                        ]
                                      }
                                    ],
                                    "additionalItems": {
                                      "anyOf": [
                                        {
                                          "type": "string"
                                        },
                                        {
                                          "type": "object"
                                        }
                                      ]
                                    }
                                  },
                                  "credentialSubject": {
                                    "anyOf": [
                                      {
                                        "type": "object"
                                      },
                                      {
                                        "type": "array",
                                        "minItems": 1,
                                        "items": {
                                          "type": "object"
                                        }
                                      }
                                    ]
                                  },
                                  "id": {
                                    "type": "string"
                                  },
                                  "issuer": {
                                    "title": "identifier or an object with an id",
                                    "anyOf": [
                                      {
                                        "title": "ID",
                                        "description": "A unique identifier.",
                                        "type": "string",
                                        "minLength": 1,
                                        "disallow": {
                                          "type": "string",
                                          "enum": [
                                            "0"
                                          ]
                                        }
                                      },
                                      {
                                        "type": "object",
                                        "required": [
                                          "id"
                                        ],
                                        "additionalProperties": true,
                                        "properties": {
                                          "id": {
                                            "title": "ID",
                                            "description": "A unique identifier.",
                                            "type": "string",
                                            "minLength": 1,
                                            "disallow": {
                                              "type": "string",
                                              "enum": [
                                                "0"
                                              ]
                                            }
                                          }
                                        }
                                      }
                                    ]
                                  },
                                  "type": {
                                    "type": "array",
                                    "minItems": 1,
                                    "items": [
                                      {
                                        "const": "VerifiableCredential"
                                      }
                                    ],
                                    "additionalItems": {
                                      "type": "string"
                                    }
                                  },
                                  "proof": {
                                    "title": "Proof",
                                    "anyOf": [
                                      {
                                        "type": "object"
                                      },
                                      {
                                        "type": "array",
                                        "minItems": 1,
                                        "items": {
                                          "type": "object"
                                        }
                                      }
                                    ]
                                  }
                                }
                              }
                            },
                            "value": {
                              "@context": [
                                "https://www.w3.org/2018/credentials/v1",
                                "https://w3id.org/security/data-integrity/v2",
                                "https://w3id.org/security/multikey/v1"
                              ],
                              "id": "urn:uuid:90ba8a41-7030-4ce2-80a7-b8891ee6ec8a",
                              "type": "VerifiableCredential",
                              "issuer": "https://vc.apicatalog.com/issuer/?suite=eddsa-rdfc-2022",
                              "issuanceDate": "2020-03-16T22:37:26.544Z",
                              "credentialSubject": {
                                "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                              },
                              "proof": {
                                "verificationMethod": "did:key:z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y#z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y",
                                "type": "DataIntegrityProof",
                                "cryptosuite": "eddsa-rdfc-2022",
                                "proofPurpose": "assertionMethod",
                                "created": "2024-10-13T05:07:23Z",
                                "proofValue": "z3DYBifP6QTh8jqJH1oC6V3BqYvtds4vQ2j7sYBFAfGZRpt1MstJNpyZXENfCSNPEcpovpBqcNXPsAkWvxoADsMv7"
                              }
                            }
                          },
                          "cause": null
                        }
                      ],
                      "httpStatusCode": 400
                    },
                    "cause": null,
                    "stack": "ValidationError: A validation error occured in the 'Verify Credential Body' validator.\n    at _createError (file:///home/node/app/node_modules/@bedrock/validation/lib/index.js:246:17)\n    at validate (file:///home/node/app/node_modules/@bedrock/validation/lib/index.js:88:14)\n    at validate (file:///home/node/app/node_modules/@bedrock/validation/lib/index.js:181:22)\n    at Layer.handle [as handle_request] (/home/node/app/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/node/app/node_modules/express/lib/router/route.js:149:13)\n    at cors (/home/node/app/node_modules/cors/lib/index.js:188:7)\n    at /home/node/app/node_modules/cors/lib/index.js:224:17\n    at originCallback (/home/node/app/node_modules/cors/lib/index.js:214:15)\n    at /home/node/app/node_modules/cors/lib/index.js:219:13\n    at optionsCallback (/home/node/app/node_modules/cors/lib/index.js:199:9)",
                    "type": "ValidationError"
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: A validation error occured in … { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js:56:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "Grotto Networking should verify apicatalog.com",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "QruTcGAJQsbCnS0O2ie94",
              "ctx": null,
              "_testId": "urn:uuid:a6e7befa-b3bc-4e6e-bbb8-9c42d35915b7",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "apicatalog.com",
                "columnId": "Grotto Networking"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 61436,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1350,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Procivis One Core should verify apicatalog.com",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "QruTcGAJQsbCnS0O2ie94",
              "ctx": null,
              "_testId": "urn:uuid:aeb43c68-2a54-4b43-9695-4e5710bb9ae3",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "apicatalog.com",
                "columnId": "Procivis One Core"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 62787,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 100,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",\"https://w3id.org/security/data-integrity/v2\",\"https://w3id.org/security/multikey/v1\"],\"id\":\"urn:uuid:90ba8a41-7030-4ce2-80a7-b8891ee6ec8a\",\"type\":\"VerifiableCredential\",\"issuer\":\"https://vc.apicatalog.com/issuer/?suite=eddsa-rdfc-2022\",\"issuanceDate\":\"2020-03-16T22:37:26.544Z\",\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\"},\"proof\":{\"verificationMethod\":\"did:key:z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y#z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y\",\"type\":\"DataIntegrityProof\",\"cryptosuite\":\"eddsa-rdfc-2022\",\"proofPurpose\":\"assertionMethod\",\"created\":\"2024-10-13T05:07:23Z\",\"proofValue\":\"z3DYBifP6QTh8jqJH1oC6V3BqYvtds4vQ2j7sYBFAfGZRpt1MstJNpyZXENfCSNPEcpovpBqcNXPsAkWvxoADsMv7\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          "https://w3id.org/security/data-integrity/v2",
                          "https://w3id.org/security/multikey/v1"
                        ],
                        "id": "urn:uuid:90ba8a41-7030-4ce2-80a7-b8891ee6ec8a",
                        "type": "VerifiableCredential",
                        "issuer": "https://vc.apicatalog.com/issuer/?suite=eddsa-rdfc-2022",
                        "issuanceDate": "2020-03-16T22:37:26.544Z",
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                        },
                        "proof": {
                          "verificationMethod": "did:key:z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y#z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y",
                          "type": "DataIntegrityProof",
                          "cryptosuite": "eddsa-rdfc-2022",
                          "proofPurpose": "assertionMethod",
                          "created": "2024-10-13T05:07:23Z",
                          "proofValue": "z3DYBifP6QTh8jqJH1oC6V3BqYvtds4vQ2j7sYBFAfGZRpt1MstJNpyZXENfCSNPEcpovpBqcNXPsAkWvxoADsMv7"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://core.test.procivis-one.com/vc-api/credentials/verify",
                  "status": 400,
                  "data": {
                    "errors": [
                      {
                        "status": 400,
                        "title": "Failed to deserialize the JSON body into the target type",
                        "detail": null
                      }
                    ]
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js:56:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "SpruceID should verify apicatalog.com",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "QruTcGAJQsbCnS0O2ie94",
              "ctx": null,
              "_testId": "urn:uuid:feae32be-4ed6-4611-a5f2-47b2bbe1b9f6",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "apicatalog.com",
                "columnId": "SpruceID"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 62887,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 35,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Trinsic should verify apicatalog.com",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "QruTcGAJQsbCnS0O2ie94",
              "ctx": null,
              "_testId": "urn:uuid:61148962-cc0c-4283-aaef-e328949bcaab",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "apicatalog.com",
                "columnId": "Trinsic"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 62923,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 22,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",\"https://w3id.org/security/data-integrity/v2\",\"https://w3id.org/security/multikey/v1\"],\"id\":\"urn:uuid:90ba8a41-7030-4ce2-80a7-b8891ee6ec8a\",\"type\":\"VerifiableCredential\",\"issuer\":\"https://vc.apicatalog.com/issuer/?suite=eddsa-rdfc-2022\",\"issuanceDate\":\"2020-03-16T22:37:26.544Z\",\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\"},\"proof\":{\"verificationMethod\":\"did:key:z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y#z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y\",\"type\":\"DataIntegrityProof\",\"cryptosuite\":\"eddsa-rdfc-2022\",\"proofPurpose\":\"assertionMethod\",\"created\":\"2024-10-13T05:07:23Z\",\"proofValue\":\"z3DYBifP6QTh8jqJH1oC6V3BqYvtds4vQ2j7sYBFAfGZRpt1MstJNpyZXENfCSNPEcpovpBqcNXPsAkWvxoADsMv7\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          "https://w3id.org/security/data-integrity/v2",
                          "https://w3id.org/security/multikey/v1"
                        ],
                        "id": "urn:uuid:90ba8a41-7030-4ce2-80a7-b8891ee6ec8a",
                        "type": "VerifiableCredential",
                        "issuer": "https://vc.apicatalog.com/issuer/?suite=eddsa-rdfc-2022",
                        "issuanceDate": "2020-03-16T22:37:26.544Z",
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                        },
                        "proof": {
                          "verificationMethod": "did:key:z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y#z6Mkska8oQD7QQQWxqa7L5ai4mH98HfAdSwomPFYKuqNyE2y",
                          "type": "DataIntegrityProof",
                          "cryptosuite": "eddsa-rdfc-2022",
                          "proofPurpose": "assertionMethod",
                          "created": "2024-10-13T05:07:23Z",
                          "proofValue": "z3DYBifP6QTh8jqJH1oC6V3BqYvtds4vQ2j7sYBFAfGZRpt1MstJNpyZXENfCSNPEcpovpBqcNXPsAkWvxoADsMv7"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://interop.connect.trinsic.cloud/vc-api/credentials/verify",
                  "status": 400
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js:56:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "bovine should verify apicatalog.com",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "QruTcGAJQsbCnS0O2ie94",
              "ctx": null,
              "_testId": "urn:uuid:d35bfa24-dc92-4686-9c1d-bb1ec30971ba",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "apicatalog.com",
                "columnId": "bovine"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 62948,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 98,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "Digital Bazaar",
          "cells": [
            {
              "type": "test",
              "title": "ACA-py should verify Digital Bazaar",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "QruTcGAJQsbCnS0O2ie94",
              "ctx": null,
              "_testId": "urn:uuid:08775701-4510-4bed-8f6c-8626861baf8b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Digital Bazaar",
                "columnId": "ACA-py"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 63046,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 33,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "apicatalog.com should verify Digital Bazaar",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "QruTcGAJQsbCnS0O2ie94",
              "ctx": null,
              "_testId": "urn:uuid:80787f4f-3f65-47f6-b581-637ff91959d7",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Digital Bazaar",
                "columnId": "apicatalog.com"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 63080,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 114,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Digital Bazaar should verify Digital Bazaar",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "QruTcGAJQsbCnS0O2ie94",
              "ctx": null,
              "_testId": "urn:uuid:6e8add48-9134-4bf2-a856-b1b66ae9de61",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Digital Bazaar",
                "columnId": "Digital Bazaar"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 63194,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 45,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "Grotto Networking should verify Digital Bazaar",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "QruTcGAJQsbCnS0O2ie94",
              "ctx": null,
              "_testId": "urn:uuid:ea3e686e-7c2b-47b0-a25c-f7719b45be46",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Digital Bazaar",
                "columnId": "Grotto Networking"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 63239,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 111,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",\"https://w3id.org/security/data-integrity/v2\"],\"id\":\"urn:uuid:a043bc33-d090-48a2-96a4-6186f6255054\",\"type\":[\"VerifiableCredential\"],\"issuer\":\"did:key:z6MkkwVJXDkKXhu2y3E1iF2cbzCUL42veRdzC7FFvNAeJ3Ja\",\"issuanceDate\":\"2020-03-16T22:37:26.544Z\",\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\"},\"proof\":{\"type\":\"DataIntegrityProof\",\"created\":\"2024-10-13T05:07:23Z\",\"verificationMethod\":\"did:key:z6MkkwVJXDkKXhu2y3E1iF2cbzCUL42veRdzC7FFvNAeJ3Ja#z6MkkwVJXDkKXhu2y3E1iF2cbzCUL42veRdzC7FFvNAeJ3Ja\",\"cryptosuite\":\"eddsa-rdfc-2022\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z37iSnKo5znyGCb7nJn8NAee7VsoR8ByLiBbbyJfrtKNqJChHvxP7iMdQaDohyh4bgyBg41WJ3o1pcTazJbYci4os\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          "https://w3id.org/security/data-integrity/v2"
                        ],
                        "id": "urn:uuid:a043bc33-d090-48a2-96a4-6186f6255054",
                        "type": [
                          "VerifiableCredential"
                        ],
                        "issuer": "did:key:z6MkkwVJXDkKXhu2y3E1iF2cbzCUL42veRdzC7FFvNAeJ3Ja",
                        "issuanceDate": "2020-03-16T22:37:26.544Z",
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                        },
                        "proof": {
                          "type": "DataIntegrityProof",
                          "created": "2024-10-13T05:07:23Z",
                          "verificationMethod": "did:key:z6MkkwVJXDkKXhu2y3E1iF2cbzCUL42veRdzC7FFvNAeJ3Ja#z6MkkwVJXDkKXhu2y3E1iF2cbzCUL42veRdzC7FFvNAeJ3Ja",
                          "cryptosuite": "eddsa-rdfc-2022",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "z37iSnKo5znyGCb7nJn8NAee7VsoR8ByLiBbbyJfrtKNqJChHvxP7iMdQaDohyh4bgyBg41WJ3o1pcTazJbYci4os"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://ecdsa-sd.grotto-networking.com/EdDSA-RDFC/credentials/verify",
                  "status": 400,
                  "data": {
                    "errors": [
                      "proof: invalid"
                    ]
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js:56:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "Procivis One Core should verify Digital Bazaar",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "QruTcGAJQsbCnS0O2ie94",
              "ctx": null,
              "_testId": "urn:uuid:adb17d5e-93de-4cb4-9a29-ee99833d4fef",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Digital Bazaar",
                "columnId": "Procivis One Core"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 63351,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 396,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",\"https://w3id.org/security/data-integrity/v2\"],\"id\":\"urn:uuid:a043bc33-d090-48a2-96a4-6186f6255054\",\"type\":[\"VerifiableCredential\"],\"issuer\":\"did:key:z6MkkwVJXDkKXhu2y3E1iF2cbzCUL42veRdzC7FFvNAeJ3Ja\",\"issuanceDate\":\"2020-03-16T22:37:26.544Z\",\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\"},\"proof\":{\"type\":\"DataIntegrityProof\",\"created\":\"2024-10-13T05:07:23Z\",\"verificationMethod\":\"did:key:z6MkkwVJXDkKXhu2y3E1iF2cbzCUL42veRdzC7FFvNAeJ3Ja#z6MkkwVJXDkKXhu2y3E1iF2cbzCUL42veRdzC7FFvNAeJ3Ja\",\"cryptosuite\":\"eddsa-rdfc-2022\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z37iSnKo5znyGCb7nJn8NAee7VsoR8ByLiBbbyJfrtKNqJChHvxP7iMdQaDohyh4bgyBg41WJ3o1pcTazJbYci4os\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          "https://w3id.org/security/data-integrity/v2"
                        ],
                        "id": "urn:uuid:a043bc33-d090-48a2-96a4-6186f6255054",
                        "type": [
                          "VerifiableCredential"
                        ],
                        "issuer": "did:key:z6MkkwVJXDkKXhu2y3E1iF2cbzCUL42veRdzC7FFvNAeJ3Ja",
                        "issuanceDate": "2020-03-16T22:37:26.544Z",
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                        },
                        "proof": {
                          "type": "DataIntegrityProof",
                          "created": "2024-10-13T05:07:23Z",
                          "verificationMethod": "did:key:z6MkkwVJXDkKXhu2y3E1iF2cbzCUL42veRdzC7FFvNAeJ3Ja#z6MkkwVJXDkKXhu2y3E1iF2cbzCUL42veRdzC7FFvNAeJ3Ja",
                          "cryptosuite": "eddsa-rdfc-2022",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "z37iSnKo5znyGCb7nJn8NAee7VsoR8ByLiBbbyJfrtKNqJChHvxP7iMdQaDohyh4bgyBg41WJ3o1pcTazJbYci4os"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://core.test.procivis-one.com/vc-api/credentials/verify",
                  "status": 400,
                  "data": {
                    "errors": [
                      {
                        "status": 400,
                        "title": "Formatter error `Could not format: `Source failed: error while expanding: Expansion failed: Context processing failed: Remote context loading failed: HTTP error: `HTTP status code is error: 429```",
                        "detail": null
                      }
                    ]
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js:56:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "SpruceID should verify Digital Bazaar",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "QruTcGAJQsbCnS0O2ie94",
              "ctx": null,
              "_testId": "urn:uuid:53d07253-0426-4cff-bfe5-efa0dc41489d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Digital Bazaar",
                "columnId": "SpruceID"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 63748,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 36,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Trinsic should verify Digital Bazaar",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "QruTcGAJQsbCnS0O2ie94",
              "ctx": null,
              "_testId": "urn:uuid:18c8f739-d90e-4d42-bc3c-7def992ba985",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Digital Bazaar",
                "columnId": "Trinsic"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 63784,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 22,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",\"https://w3id.org/security/data-integrity/v2\"],\"id\":\"urn:uuid:a043bc33-d090-48a2-96a4-6186f6255054\",\"type\":[\"VerifiableCredential\"],\"issuer\":\"did:key:z6MkkwVJXDkKXhu2y3E1iF2cbzCUL42veRdzC7FFvNAeJ3Ja\",\"issuanceDate\":\"2020-03-16T22:37:26.544Z\",\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\"},\"proof\":{\"type\":\"DataIntegrityProof\",\"created\":\"2024-10-13T05:07:23Z\",\"verificationMethod\":\"did:key:z6MkkwVJXDkKXhu2y3E1iF2cbzCUL42veRdzC7FFvNAeJ3Ja#z6MkkwVJXDkKXhu2y3E1iF2cbzCUL42veRdzC7FFvNAeJ3Ja\",\"cryptosuite\":\"eddsa-rdfc-2022\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z37iSnKo5znyGCb7nJn8NAee7VsoR8ByLiBbbyJfrtKNqJChHvxP7iMdQaDohyh4bgyBg41WJ3o1pcTazJbYci4os\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          "https://w3id.org/security/data-integrity/v2"
                        ],
                        "id": "urn:uuid:a043bc33-d090-48a2-96a4-6186f6255054",
                        "type": [
                          "VerifiableCredential"
                        ],
                        "issuer": "did:key:z6MkkwVJXDkKXhu2y3E1iF2cbzCUL42veRdzC7FFvNAeJ3Ja",
                        "issuanceDate": "2020-03-16T22:37:26.544Z",
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                        },
                        "proof": {
                          "type": "DataIntegrityProof",
                          "created": "2024-10-13T05:07:23Z",
                          "verificationMethod": "did:key:z6MkkwVJXDkKXhu2y3E1iF2cbzCUL42veRdzC7FFvNAeJ3Ja#z6MkkwVJXDkKXhu2y3E1iF2cbzCUL42veRdzC7FFvNAeJ3Ja",
                          "cryptosuite": "eddsa-rdfc-2022",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "z37iSnKo5znyGCb7nJn8NAee7VsoR8ByLiBbbyJfrtKNqJChHvxP7iMdQaDohyh4bgyBg41WJ3o1pcTazJbYci4os"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://interop.connect.trinsic.cloud/vc-api/credentials/verify",
                  "status": 400
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js:56:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "bovine should verify Digital Bazaar",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "QruTcGAJQsbCnS0O2ie94",
              "ctx": null,
              "_testId": "urn:uuid:cb9164b4-758c-4ee3-841f-a62125e4f00c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Digital Bazaar",
                "columnId": "bovine"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 63807,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 98,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "Grotto Networking",
          "cells": [
            {
              "type": "test",
              "title": "ACA-py should verify Grotto Networking",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "QruTcGAJQsbCnS0O2ie94",
              "ctx": null,
              "_testId": "urn:uuid:badcc34a-8278-48b9-b609-93ed1aff4550",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Grotto Networking",
                "columnId": "ACA-py"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 63905,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 44,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "apicatalog.com should verify Grotto Networking",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "QruTcGAJQsbCnS0O2ie94",
              "ctx": null,
              "_testId": "urn:uuid:766fa46e-802b-4c21-83bb-ac4f7e2744b2",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Grotto Networking",
                "columnId": "apicatalog.com"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 63949,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 50,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "Digital Bazaar should verify Grotto Networking",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "QruTcGAJQsbCnS0O2ie94",
              "ctx": null,
              "_testId": "urn:uuid:b4dda21f-a2e7-43fd-ade2-481e619fb1af",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Grotto Networking",
                "columnId": "Digital Bazaar"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 64000,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 41,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "Grotto Networking should verify Grotto Networking",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "QruTcGAJQsbCnS0O2ie94",
              "ctx": null,
              "_testId": "urn:uuid:1a8604b9-ab52-4829-9cd3-d6b51803332c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Grotto Networking",
                "columnId": "Grotto Networking"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 64041,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 105,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",\"https://w3id.org/security/data-integrity/v2\"],\"id\":\"urn:uuid:f1490d41-4425-4414-a320-eb2f4ac80312\",\"type\":[\"VerifiableCredential\"],\"issuer\":\"did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7\",\"issuanceDate\":\"2020-03-16T22:37:26.544Z\",\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\"},\"proof\":{\"type\":\"DataIntegrityProof\",\"cryptosuite\":\"eddsa-rdfc-2022\",\"created\":\"2024-10-13T05:07:23.345Z\",\"verificationMethod\":\"did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7#z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z48qrXWELRtWguyU4zCMZtAzbr83W71AE6B2oi3SRzS14zJVEbgtfoHLhG4FsptFUA2MrXjtuPGgLHpdfzsHUxLTr\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          "https://w3id.org/security/data-integrity/v2"
                        ],
                        "id": "urn:uuid:f1490d41-4425-4414-a320-eb2f4ac80312",
                        "type": [
                          "VerifiableCredential"
                        ],
                        "issuer": "did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7",
                        "issuanceDate": "2020-03-16T22:37:26.544Z",
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                        },
                        "proof": {
                          "type": "DataIntegrityProof",
                          "cryptosuite": "eddsa-rdfc-2022",
                          "created": "2024-10-13T05:07:23.345Z",
                          "verificationMethod": "did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7#z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "z48qrXWELRtWguyU4zCMZtAzbr83W71AE6B2oi3SRzS14zJVEbgtfoHLhG4FsptFUA2MrXjtuPGgLHpdfzsHUxLTr"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://ecdsa-sd.grotto-networking.com/EdDSA-RDFC/credentials/verify",
                  "status": 400,
                  "data": {
                    "errors": [
                      "proof: invalid"
                    ]
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js:56:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "Procivis One Core should verify Grotto Networking",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "QruTcGAJQsbCnS0O2ie94",
              "ctx": null,
              "_testId": "urn:uuid:9027cc3f-c1eb-401d-a2eb-da5afc64938b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Grotto Networking",
                "columnId": "Procivis One Core"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 64146,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 133,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",\"https://w3id.org/security/data-integrity/v2\"],\"id\":\"urn:uuid:f1490d41-4425-4414-a320-eb2f4ac80312\",\"type\":[\"VerifiableCredential\"],\"issuer\":\"did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7\",\"issuanceDate\":\"2020-03-16T22:37:26.544Z\",\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\"},\"proof\":{\"type\":\"DataIntegrityProof\",\"cryptosuite\":\"eddsa-rdfc-2022\",\"created\":\"2024-10-13T05:07:23.345Z\",\"verificationMethod\":\"did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7#z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z48qrXWELRtWguyU4zCMZtAzbr83W71AE6B2oi3SRzS14zJVEbgtfoHLhG4FsptFUA2MrXjtuPGgLHpdfzsHUxLTr\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          "https://w3id.org/security/data-integrity/v2"
                        ],
                        "id": "urn:uuid:f1490d41-4425-4414-a320-eb2f4ac80312",
                        "type": [
                          "VerifiableCredential"
                        ],
                        "issuer": "did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7",
                        "issuanceDate": "2020-03-16T22:37:26.544Z",
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                        },
                        "proof": {
                          "type": "DataIntegrityProof",
                          "cryptosuite": "eddsa-rdfc-2022",
                          "created": "2024-10-13T05:07:23.345Z",
                          "verificationMethod": "did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7#z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "z48qrXWELRtWguyU4zCMZtAzbr83W71AE6B2oi3SRzS14zJVEbgtfoHLhG4FsptFUA2MrXjtuPGgLHpdfzsHUxLTr"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://core.test.procivis-one.com/vc-api/credentials/verify",
                  "status": 400,
                  "data": {
                    "errors": [
                      {
                        "status": 400,
                        "title": "Validation error: `Invalid JSON-LD document`",
                        "detail": null
                      }
                    ]
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js:56:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "SpruceID should verify Grotto Networking",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "QruTcGAJQsbCnS0O2ie94",
              "ctx": null,
              "_testId": "urn:uuid:64b92541-d317-47ba-818b-e7d490f24070",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Grotto Networking",
                "columnId": "SpruceID"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 64280,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 33,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Trinsic should verify Grotto Networking",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "QruTcGAJQsbCnS0O2ie94",
              "ctx": null,
              "_testId": "urn:uuid:1c3a98ce-0963-4018-b5a1-dd6d040e01d5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Grotto Networking",
                "columnId": "Trinsic"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 64312,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 21,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",\"https://w3id.org/security/data-integrity/v2\"],\"id\":\"urn:uuid:f1490d41-4425-4414-a320-eb2f4ac80312\",\"type\":[\"VerifiableCredential\"],\"issuer\":\"did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7\",\"issuanceDate\":\"2020-03-16T22:37:26.544Z\",\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\"},\"proof\":{\"type\":\"DataIntegrityProof\",\"cryptosuite\":\"eddsa-rdfc-2022\",\"created\":\"2024-10-13T05:07:23.345Z\",\"verificationMethod\":\"did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7#z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z48qrXWELRtWguyU4zCMZtAzbr83W71AE6B2oi3SRzS14zJVEbgtfoHLhG4FsptFUA2MrXjtuPGgLHpdfzsHUxLTr\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          "https://w3id.org/security/data-integrity/v2"
                        ],
                        "id": "urn:uuid:f1490d41-4425-4414-a320-eb2f4ac80312",
                        "type": [
                          "VerifiableCredential"
                        ],
                        "issuer": "did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7",
                        "issuanceDate": "2020-03-16T22:37:26.544Z",
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                        },
                        "proof": {
                          "type": "DataIntegrityProof",
                          "cryptosuite": "eddsa-rdfc-2022",
                          "created": "2024-10-13T05:07:23.345Z",
                          "verificationMethod": "did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7#z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "z48qrXWELRtWguyU4zCMZtAzbr83W71AE6B2oi3SRzS14zJVEbgtfoHLhG4FsptFUA2MrXjtuPGgLHpdfzsHUxLTr"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://interop.connect.trinsic.cloud/vc-api/credentials/verify",
                  "status": 400
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js:56:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "bovine should verify Grotto Networking",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "QruTcGAJQsbCnS0O2ie94",
              "ctx": null,
              "_testId": "urn:uuid:808b6f68-8f58-45c1-9717-3a3b2dab7191",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Grotto Networking",
                "columnId": "bovine"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 64335,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 98,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",\"https://w3id.org/security/data-integrity/v2\"],\"id\":\"urn:uuid:f1490d41-4425-4414-a320-eb2f4ac80312\",\"type\":[\"VerifiableCredential\"],\"issuer\":\"did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7\",\"issuanceDate\":\"2020-03-16T22:37:26.544Z\",\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\"},\"proof\":{\"type\":\"DataIntegrityProof\",\"cryptosuite\":\"eddsa-rdfc-2022\",\"created\":\"2024-10-13T05:07:23.345Z\",\"verificationMethod\":\"did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7#z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z48qrXWELRtWguyU4zCMZtAzbr83W71AE6B2oi3SRzS14zJVEbgtfoHLhG4FsptFUA2MrXjtuPGgLHpdfzsHUxLTr\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          "https://w3id.org/security/data-integrity/v2"
                        ],
                        "id": "urn:uuid:f1490d41-4425-4414-a320-eb2f4ac80312",
                        "type": [
                          "VerifiableCredential"
                        ],
                        "issuer": "did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7",
                        "issuanceDate": "2020-03-16T22:37:26.544Z",
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                        },
                        "proof": {
                          "type": "DataIntegrityProof",
                          "cryptosuite": "eddsa-rdfc-2022",
                          "created": "2024-10-13T05:07:23.345Z",
                          "verificationMethod": "did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7#z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "z48qrXWELRtWguyU4zCMZtAzbr83W71AE6B2oi3SRzS14zJVEbgtfoHLhG4FsptFUA2MrXjtuPGgLHpdfzsHUxLTr"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://bovine.social/w3c-di/verify",
                  "status": 400
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js:56:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            }
          ]
        },
        {
          "id": "Procivis One Core",
          "cells": [
            {
              "type": "test",
              "title": "ACA-py should verify Procivis One Core",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "QruTcGAJQsbCnS0O2ie94",
              "ctx": null,
              "_testId": "urn:uuid:bd5a16b0-45ae-44c1-a4ec-0328938fa9b1",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Procivis One Core",
                "columnId": "ACA-py"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 64433,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected issuer: Procivis One Core to issue a VC: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected issuer: Procivis One Core to issue a VC: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js:48:16)\n    at process.processImmediate (node:internal/timers:483:21)"
              }
            },
            {
              "type": "test",
              "title": "apicatalog.com should verify Procivis One Core",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "QruTcGAJQsbCnS0O2ie94",
              "ctx": null,
              "_testId": "urn:uuid:181be026-9791-41f4-925b-459748d7c600",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Procivis One Core",
                "columnId": "apicatalog.com"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 64434,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected issuer: Procivis One Core to issue a VC: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected issuer: Procivis One Core to issue a VC: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js:48:16)\n    at process.processImmediate (node:internal/timers:483:21)"
              }
            },
            {
              "type": "test",
              "title": "Digital Bazaar should verify Procivis One Core",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "QruTcGAJQsbCnS0O2ie94",
              "ctx": null,
              "_testId": "urn:uuid:de40254e-db04-419c-b48a-8778c1d9210e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Procivis One Core",
                "columnId": "Digital Bazaar"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 64434,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected issuer: Procivis One Core to issue a VC: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected issuer: Procivis One Core to issue a VC: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js:48:16)\n    at process.processImmediate (node:internal/timers:483:21)"
              }
            },
            {
              "type": "test",
              "title": "Grotto Networking should verify Procivis One Core",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "QruTcGAJQsbCnS0O2ie94",
              "ctx": null,
              "_testId": "urn:uuid:3ec11dc4-1992-481d-b941-0f74f44c3c94",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Procivis One Core",
                "columnId": "Grotto Networking"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 64434,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected issuer: Procivis One Core to issue a VC: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected issuer: Procivis One Core to issue a VC: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js:48:16)\n    at process.processImmediate (node:internal/timers:483:21)"
              }
            },
            {
              "type": "test",
              "title": "Procivis One Core should verify Procivis One Core",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "QruTcGAJQsbCnS0O2ie94",
              "ctx": null,
              "_testId": "urn:uuid:a8d0ef79-da2e-4824-bdca-59410c173b8b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Procivis One Core",
                "columnId": "Procivis One Core"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 64434,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected issuer: Procivis One Core to issue a VC: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected issuer: Procivis One Core to issue a VC: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js:48:16)\n    at process.processImmediate (node:internal/timers:483:21)"
              }
            },
            {
              "type": "test",
              "title": "SpruceID should verify Procivis One Core",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "QruTcGAJQsbCnS0O2ie94",
              "ctx": null,
              "_testId": "urn:uuid:4482e4a8-046f-44d9-a211-ed13140abcd1",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Procivis One Core",
                "columnId": "SpruceID"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 64435,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected issuer: Procivis One Core to issue a VC: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected issuer: Procivis One Core to issue a VC: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js:48:16)\n    at process.processImmediate (node:internal/timers:483:21)"
              }
            },
            {
              "type": "test",
              "title": "Trinsic should verify Procivis One Core",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "QruTcGAJQsbCnS0O2ie94",
              "ctx": null,
              "_testId": "urn:uuid:8b746ba8-568b-4327-8809-c78053fb3466",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Procivis One Core",
                "columnId": "Trinsic"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 64435,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected issuer: Procivis One Core to issue a VC: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected issuer: Procivis One Core to issue a VC: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js:48:16)\n    at process.processImmediate (node:internal/timers:483:21)"
              }
            },
            {
              "type": "test",
              "title": "bovine should verify Procivis One Core",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "QruTcGAJQsbCnS0O2ie94",
              "ctx": null,
              "_testId": "urn:uuid:0a031f6c-58d3-49f1-8280-854fd2728887",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Procivis One Core",
                "columnId": "bovine"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 64435,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected issuer: Procivis One Core to issue a VC: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected issuer: Procivis One Core to issue a VC: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js:48:16)\n    at process.processImmediate (node:internal/timers:483:21)"
              }
            }
          ]
        },
        {
          "id": "SpruceID",
          "cells": [
            {
              "type": "test",
              "title": "ACA-py should verify SpruceID",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "QruTcGAJQsbCnS0O2ie94",
              "ctx": null,
              "_testId": "urn:uuid:6c29e583-0824-4a8d-bd97-0ac12531f3cf",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "SpruceID",
                "columnId": "ACA-py"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 64436,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 48,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "apicatalog.com should verify SpruceID",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "QruTcGAJQsbCnS0O2ie94",
              "ctx": null,
              "_testId": "urn:uuid:ef3b55e9-e304-46c9-8020-8fcee856d3f2",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "SpruceID",
                "columnId": "apicatalog.com"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 64483,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 60,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",\"https://w3id.org/security/data-integrity/v2\"],\"id\":\"urn:uuid:c737576e-66d5-44dc-8ba3-d48aec6f47b1\",\"type\":[\"VerifiableCredential\"],\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\"},\"issuer\":\"did:key:z6MkgYAGxLBSXa6Ygk1PnUbK2F7zya8juE9nfsZhrvY7c9GD\",\"issuanceDate\":\"2020-03-16T22:37:26.544Z\",\"proof\":{\"type\":\"DataIntegrityProof\",\"cryptosuite\":\"eddsa-rdfc-2022\",\"verificationMethod\":\"did:key:z6MkgYAGxLBSXa6Ygk1PnUbK2F7zya8juE9nfsZhrvY7c9GD#z6MkgYAGxLBSXa6Ygk1PnUbK2F7zya8juE9nfsZhrvY7c9GD\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z8XaUoxJDxJ8uMVoHyF5cjFoRCAtpN7egr3qpHbFU7ThJjrE913VNBPBSXJ6azjHL1zJMsigqe1JHeSSRyjUhkX4\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          "https://w3id.org/security/data-integrity/v2"
                        ],
                        "id": "urn:uuid:c737576e-66d5-44dc-8ba3-d48aec6f47b1",
                        "type": [
                          "VerifiableCredential"
                        ],
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                        },
                        "issuer": "did:key:z6MkgYAGxLBSXa6Ygk1PnUbK2F7zya8juE9nfsZhrvY7c9GD",
                        "issuanceDate": "2020-03-16T22:37:26.544Z",
                        "proof": {
                          "type": "DataIntegrityProof",
                          "cryptosuite": "eddsa-rdfc-2022",
                          "verificationMethod": "did:key:z6MkgYAGxLBSXa6Ygk1PnUbK2F7zya8juE9nfsZhrvY7c9GD#z6MkgYAGxLBSXa6Ygk1PnUbK2F7zya8juE9nfsZhrvY7c9GD",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "z8XaUoxJDxJ8uMVoHyF5cjFoRCAtpN7egr3qpHbFU7ThJjrE913VNBPBSXJ6azjHL1zJMsigqe1JHeSSRyjUhkX4"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc.apicatalog.com/credentials/verify",
                  "status": 400,
                  "data": {
                    "checks": [
                      "PROOF"
                    ],
                    "warnings": [],
                    "errors": [
                      "MALFORMED",
                      "MISSING_CREATED"
                    ]
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js:56:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "Digital Bazaar should verify SpruceID",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "QruTcGAJQsbCnS0O2ie94",
              "ctx": null,
              "_testId": "urn:uuid:dae7cc55-c5c7-412a-8c76-8ec5c59706be",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "SpruceID",
                "columnId": "Digital Bazaar"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 64544,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 46,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "Grotto Networking should verify SpruceID",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "QruTcGAJQsbCnS0O2ie94",
              "ctx": null,
              "_testId": "urn:uuid:6949c393-4edf-4b94-ac59-e8ef56fff221",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "SpruceID",
                "columnId": "Grotto Networking"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 64590,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 105,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",\"https://w3id.org/security/data-integrity/v2\"],\"id\":\"urn:uuid:c737576e-66d5-44dc-8ba3-d48aec6f47b1\",\"type\":[\"VerifiableCredential\"],\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\"},\"issuer\":\"did:key:z6MkgYAGxLBSXa6Ygk1PnUbK2F7zya8juE9nfsZhrvY7c9GD\",\"issuanceDate\":\"2020-03-16T22:37:26.544Z\",\"proof\":{\"type\":\"DataIntegrityProof\",\"cryptosuite\":\"eddsa-rdfc-2022\",\"verificationMethod\":\"did:key:z6MkgYAGxLBSXa6Ygk1PnUbK2F7zya8juE9nfsZhrvY7c9GD#z6MkgYAGxLBSXa6Ygk1PnUbK2F7zya8juE9nfsZhrvY7c9GD\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z8XaUoxJDxJ8uMVoHyF5cjFoRCAtpN7egr3qpHbFU7ThJjrE913VNBPBSXJ6azjHL1zJMsigqe1JHeSSRyjUhkX4\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          "https://w3id.org/security/data-integrity/v2"
                        ],
                        "id": "urn:uuid:c737576e-66d5-44dc-8ba3-d48aec6f47b1",
                        "type": [
                          "VerifiableCredential"
                        ],
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                        },
                        "issuer": "did:key:z6MkgYAGxLBSXa6Ygk1PnUbK2F7zya8juE9nfsZhrvY7c9GD",
                        "issuanceDate": "2020-03-16T22:37:26.544Z",
                        "proof": {
                          "type": "DataIntegrityProof",
                          "cryptosuite": "eddsa-rdfc-2022",
                          "verificationMethod": "did:key:z6MkgYAGxLBSXa6Ygk1PnUbK2F7zya8juE9nfsZhrvY7c9GD#z6MkgYAGxLBSXa6Ygk1PnUbK2F7zya8juE9nfsZhrvY7c9GD",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "z8XaUoxJDxJ8uMVoHyF5cjFoRCAtpN7egr3qpHbFU7ThJjrE913VNBPBSXJ6azjHL1zJMsigqe1JHeSSRyjUhkX4"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://ecdsa-sd.grotto-networking.com/EdDSA-RDFC/credentials/verify",
                  "status": 400,
                  "data": {
                    "errors": [
                      "proof: invalid"
                    ]
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js:56:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "Procivis One Core should verify SpruceID",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "QruTcGAJQsbCnS0O2ie94",
              "ctx": null,
              "_testId": "urn:uuid:2a8bbabe-79b0-49bd-8484-f667def9fb01",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "SpruceID",
                "columnId": "Procivis One Core"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 64696,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 131,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",\"https://w3id.org/security/data-integrity/v2\"],\"id\":\"urn:uuid:c737576e-66d5-44dc-8ba3-d48aec6f47b1\",\"type\":[\"VerifiableCredential\"],\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\"},\"issuer\":\"did:key:z6MkgYAGxLBSXa6Ygk1PnUbK2F7zya8juE9nfsZhrvY7c9GD\",\"issuanceDate\":\"2020-03-16T22:37:26.544Z\",\"proof\":{\"type\":\"DataIntegrityProof\",\"cryptosuite\":\"eddsa-rdfc-2022\",\"verificationMethod\":\"did:key:z6MkgYAGxLBSXa6Ygk1PnUbK2F7zya8juE9nfsZhrvY7c9GD#z6MkgYAGxLBSXa6Ygk1PnUbK2F7zya8juE9nfsZhrvY7c9GD\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z8XaUoxJDxJ8uMVoHyF5cjFoRCAtpN7egr3qpHbFU7ThJjrE913VNBPBSXJ6azjHL1zJMsigqe1JHeSSRyjUhkX4\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          "https://w3id.org/security/data-integrity/v2"
                        ],
                        "id": "urn:uuid:c737576e-66d5-44dc-8ba3-d48aec6f47b1",
                        "type": [
                          "VerifiableCredential"
                        ],
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                        },
                        "issuer": "did:key:z6MkgYAGxLBSXa6Ygk1PnUbK2F7zya8juE9nfsZhrvY7c9GD",
                        "issuanceDate": "2020-03-16T22:37:26.544Z",
                        "proof": {
                          "type": "DataIntegrityProof",
                          "cryptosuite": "eddsa-rdfc-2022",
                          "verificationMethod": "did:key:z6MkgYAGxLBSXa6Ygk1PnUbK2F7zya8juE9nfsZhrvY7c9GD#z6MkgYAGxLBSXa6Ygk1PnUbK2F7zya8juE9nfsZhrvY7c9GD",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "z8XaUoxJDxJ8uMVoHyF5cjFoRCAtpN7egr3qpHbFU7ThJjrE913VNBPBSXJ6azjHL1zJMsigqe1JHeSSRyjUhkX4"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://core.test.procivis-one.com/vc-api/credentials/verify",
                  "status": 400,
                  "data": {
                    "errors": [
                      {
                        "status": 400,
                        "title": "Validation error: `Invalid JSON-LD document`",
                        "detail": null
                      }
                    ]
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js:56:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "SpruceID should verify SpruceID",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "QruTcGAJQsbCnS0O2ie94",
              "ctx": null,
              "_testId": "urn:uuid:759c69fe-2b07-423c-a96e-3296cad3cfd0",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "SpruceID",
                "columnId": "SpruceID"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 64827,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 34,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Trinsic should verify SpruceID",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "QruTcGAJQsbCnS0O2ie94",
              "ctx": null,
              "_testId": "urn:uuid:54482990-e2f7-467b-acec-1cbe6ab1b332",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "SpruceID",
                "columnId": "Trinsic"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 64862,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 21,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",\"https://w3id.org/security/data-integrity/v2\"],\"id\":\"urn:uuid:c737576e-66d5-44dc-8ba3-d48aec6f47b1\",\"type\":[\"VerifiableCredential\"],\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\"},\"issuer\":\"did:key:z6MkgYAGxLBSXa6Ygk1PnUbK2F7zya8juE9nfsZhrvY7c9GD\",\"issuanceDate\":\"2020-03-16T22:37:26.544Z\",\"proof\":{\"type\":\"DataIntegrityProof\",\"cryptosuite\":\"eddsa-rdfc-2022\",\"verificationMethod\":\"did:key:z6MkgYAGxLBSXa6Ygk1PnUbK2F7zya8juE9nfsZhrvY7c9GD#z6MkgYAGxLBSXa6Ygk1PnUbK2F7zya8juE9nfsZhrvY7c9GD\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z8XaUoxJDxJ8uMVoHyF5cjFoRCAtpN7egr3qpHbFU7ThJjrE913VNBPBSXJ6azjHL1zJMsigqe1JHeSSRyjUhkX4\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          "https://w3id.org/security/data-integrity/v2"
                        ],
                        "id": "urn:uuid:c737576e-66d5-44dc-8ba3-d48aec6f47b1",
                        "type": [
                          "VerifiableCredential"
                        ],
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                        },
                        "issuer": "did:key:z6MkgYAGxLBSXa6Ygk1PnUbK2F7zya8juE9nfsZhrvY7c9GD",
                        "issuanceDate": "2020-03-16T22:37:26.544Z",
                        "proof": {
                          "type": "DataIntegrityProof",
                          "cryptosuite": "eddsa-rdfc-2022",
                          "verificationMethod": "did:key:z6MkgYAGxLBSXa6Ygk1PnUbK2F7zya8juE9nfsZhrvY7c9GD#z6MkgYAGxLBSXa6Ygk1PnUbK2F7zya8juE9nfsZhrvY7c9GD",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "z8XaUoxJDxJ8uMVoHyF5cjFoRCAtpN7egr3qpHbFU7ThJjrE913VNBPBSXJ6azjHL1zJMsigqe1JHeSSRyjUhkX4"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://interop.connect.trinsic.cloud/vc-api/credentials/verify",
                  "status": 400
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js:56:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "bovine should verify SpruceID",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "QruTcGAJQsbCnS0O2ie94",
              "ctx": null,
              "_testId": "urn:uuid:0b6d4870-4ee9-431c-b3fa-736545b8932d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "SpruceID",
                "columnId": "bovine"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 64884,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 98,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "Trinsic",
          "cells": [
            {
              "type": "test",
              "title": "ACA-py should verify Trinsic",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "QruTcGAJQsbCnS0O2ie94",
              "ctx": null,
              "_testId": "urn:uuid:2e96440e-10ce-4e05-b788-7fe72ca02246",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Trinsic",
                "columnId": "ACA-py"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 64982,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 50,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",\"https://w3id.org/security/data-integrity/v1\"],\"id\":\"urn:uuid:4345fea8-5272-4cb4-9755-e4cd40b66aee\",\"type\":[\"VerifiableCredential\"],\"issuer\":\"did:key:z6MkqbpLSbqnY1pxVyhBCDYcFsv4ZgGgqP32kzNrf5deWVPU\",\"issuanceDate\":\"2020-03-16T22:37:26.544Z\",\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\"},\"proof\":{\"type\":\"DataIntegrityProof\",\"created\":\"2024-10-13T05:07:24.1194157Z\",\"proofPurpose\":\"assertionMethod\",\"verificationMethod\":\"did:key:z6MkqbpLSbqnY1pxVyhBCDYcFsv4ZgGgqP32kzNrf5deWVPU#z6MkqbpLSbqnY1pxVyhBCDYcFsv4ZgGgqP32kzNrf5deWVPU\",\"cryptosuite\":\"eddsa-2022\",\"proofValue\":\"z53QD98fj5m8i9s9acARnirCMAa6zn6LyYYALtbvkuWQwCt8kHDRWfRPppKB4GqZqFGE8Lf4q63LaWZvwbG6eweUP\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          "https://w3id.org/security/data-integrity/v1"
                        ],
                        "id": "urn:uuid:4345fea8-5272-4cb4-9755-e4cd40b66aee",
                        "type": [
                          "VerifiableCredential"
                        ],
                        "issuer": "did:key:z6MkqbpLSbqnY1pxVyhBCDYcFsv4ZgGgqP32kzNrf5deWVPU",
                        "issuanceDate": "2020-03-16T22:37:26.544Z",
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                        },
                        "proof": {
                          "type": "DataIntegrityProof",
                          "created": "2024-10-13T05:07:24.1194157Z",
                          "proofPurpose": "assertionMethod",
                          "verificationMethod": "did:key:z6MkqbpLSbqnY1pxVyhBCDYcFsv4ZgGgqP32kzNrf5deWVPU#z6MkqbpLSbqnY1pxVyhBCDYcFsv4ZgGgqP32kzNrf5deWVPU",
                          "cryptosuite": "eddsa-2022",
                          "proofValue": "z53QD98fj5m8i9s9acARnirCMAa6zn6LyYYALtbvkuWQwCt8kHDRWfRPppKB4GqZqFGE8Lf4q63LaWZvwbG6eweUP"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://aca-py.test-suite.app/vc/credentials/verify",
                  "status": 422,
                  "data": {
                    "json": {
                      "verifiableCredential": {
                        "proof": {
                          "created": [
                            "Value 2024-10-13T05:07:24.1194157Z is not a date in valid format"
                          ]
                        }
                      }
                    }
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js:56:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "apicatalog.com should verify Trinsic",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "QruTcGAJQsbCnS0O2ie94",
              "ctx": null,
              "_testId": "urn:uuid:34881bff-a8ff-4d84-bb0f-8b53028f93dc",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Trinsic",
                "columnId": "apicatalog.com"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 65033,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 54,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",\"https://w3id.org/security/data-integrity/v1\"],\"id\":\"urn:uuid:4345fea8-5272-4cb4-9755-e4cd40b66aee\",\"type\":[\"VerifiableCredential\"],\"issuer\":\"did:key:z6MkqbpLSbqnY1pxVyhBCDYcFsv4ZgGgqP32kzNrf5deWVPU\",\"issuanceDate\":\"2020-03-16T22:37:26.544Z\",\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\"},\"proof\":{\"type\":\"DataIntegrityProof\",\"created\":\"2024-10-13T05:07:24.1194157Z\",\"proofPurpose\":\"assertionMethod\",\"verificationMethod\":\"did:key:z6MkqbpLSbqnY1pxVyhBCDYcFsv4ZgGgqP32kzNrf5deWVPU#z6MkqbpLSbqnY1pxVyhBCDYcFsv4ZgGgqP32kzNrf5deWVPU\",\"cryptosuite\":\"eddsa-2022\",\"proofValue\":\"z53QD98fj5m8i9s9acARnirCMAa6zn6LyYYALtbvkuWQwCt8kHDRWfRPppKB4GqZqFGE8Lf4q63LaWZvwbG6eweUP\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          "https://w3id.org/security/data-integrity/v1"
                        ],
                        "id": "urn:uuid:4345fea8-5272-4cb4-9755-e4cd40b66aee",
                        "type": [
                          "VerifiableCredential"
                        ],
                        "issuer": "did:key:z6MkqbpLSbqnY1pxVyhBCDYcFsv4ZgGgqP32kzNrf5deWVPU",
                        "issuanceDate": "2020-03-16T22:37:26.544Z",
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                        },
                        "proof": {
                          "type": "DataIntegrityProof",
                          "created": "2024-10-13T05:07:24.1194157Z",
                          "proofPurpose": "assertionMethod",
                          "verificationMethod": "did:key:z6MkqbpLSbqnY1pxVyhBCDYcFsv4ZgGgqP32kzNrf5deWVPU#z6MkqbpLSbqnY1pxVyhBCDYcFsv4ZgGgqP32kzNrf5deWVPU",
                          "cryptosuite": "eddsa-2022",
                          "proofValue": "z53QD98fj5m8i9s9acARnirCMAa6zn6LyYYALtbvkuWQwCt8kHDRWfRPppKB4GqZqFGE8Lf4q63LaWZvwbG6eweUP"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc.apicatalog.com/credentials/verify",
                  "status": 400,
                  "data": {
                    "checks": [
                      "PROOF",
                      "INVALID_PROOF_CONFIGURATION"
                    ],
                    "warnings": [],
                    "errors": []
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js:56:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "Digital Bazaar should verify Trinsic",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "QruTcGAJQsbCnS0O2ie94",
              "ctx": null,
              "_testId": "urn:uuid:8c2b462c-ac68-4a87-952f-e89fecc9ae76",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Trinsic",
                "columnId": "Digital Bazaar"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 65088,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 43,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "Grotto Networking should verify Trinsic",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "QruTcGAJQsbCnS0O2ie94",
              "ctx": null,
              "_testId": "urn:uuid:0c79ec2c-fd5b-4d64-a3f1-bab32bedeba1",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Trinsic",
                "columnId": "Grotto Networking"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 65131,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 72,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",\"https://w3id.org/security/data-integrity/v1\"],\"id\":\"urn:uuid:4345fea8-5272-4cb4-9755-e4cd40b66aee\",\"type\":[\"VerifiableCredential\"],\"issuer\":\"did:key:z6MkqbpLSbqnY1pxVyhBCDYcFsv4ZgGgqP32kzNrf5deWVPU\",\"issuanceDate\":\"2020-03-16T22:37:26.544Z\",\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\"},\"proof\":{\"type\":\"DataIntegrityProof\",\"created\":\"2024-10-13T05:07:24.1194157Z\",\"proofPurpose\":\"assertionMethod\",\"verificationMethod\":\"did:key:z6MkqbpLSbqnY1pxVyhBCDYcFsv4ZgGgqP32kzNrf5deWVPU#z6MkqbpLSbqnY1pxVyhBCDYcFsv4ZgGgqP32kzNrf5deWVPU\",\"cryptosuite\":\"eddsa-2022\",\"proofValue\":\"z53QD98fj5m8i9s9acARnirCMAa6zn6LyYYALtbvkuWQwCt8kHDRWfRPppKB4GqZqFGE8Lf4q63LaWZvwbG6eweUP\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          "https://w3id.org/security/data-integrity/v1"
                        ],
                        "id": "urn:uuid:4345fea8-5272-4cb4-9755-e4cd40b66aee",
                        "type": [
                          "VerifiableCredential"
                        ],
                        "issuer": "did:key:z6MkqbpLSbqnY1pxVyhBCDYcFsv4ZgGgqP32kzNrf5deWVPU",
                        "issuanceDate": "2020-03-16T22:37:26.544Z",
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                        },
                        "proof": {
                          "type": "DataIntegrityProof",
                          "created": "2024-10-13T05:07:24.1194157Z",
                          "proofPurpose": "assertionMethod",
                          "verificationMethod": "did:key:z6MkqbpLSbqnY1pxVyhBCDYcFsv4ZgGgqP32kzNrf5deWVPU#z6MkqbpLSbqnY1pxVyhBCDYcFsv4ZgGgqP32kzNrf5deWVPU",
                          "cryptosuite": "eddsa-2022",
                          "proofValue": "z53QD98fj5m8i9s9acARnirCMAa6zn6LyYYALtbvkuWQwCt8kHDRWfRPppKB4GqZqFGE8Lf4q63LaWZvwbG6eweUP"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://ecdsa-sd.grotto-networking.com/EdDSA-RDFC/credentials/verify",
                  "status": 400,
                  "data": {
                    "errors": [
                      "proof: must be equal to one of the allowed values"
                    ]
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js:56:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "Procivis One Core should verify Trinsic",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "QruTcGAJQsbCnS0O2ie94",
              "ctx": null,
              "_testId": "urn:uuid:95bcd836-848a-4824-9d24-d5644e1e1775",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Trinsic",
                "columnId": "Procivis One Core"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 65203,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1170,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",\"https://w3id.org/security/data-integrity/v1\"],\"id\":\"urn:uuid:4345fea8-5272-4cb4-9755-e4cd40b66aee\",\"type\":[\"VerifiableCredential\"],\"issuer\":\"did:key:z6MkqbpLSbqnY1pxVyhBCDYcFsv4ZgGgqP32kzNrf5deWVPU\",\"issuanceDate\":\"2020-03-16T22:37:26.544Z\",\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\"},\"proof\":{\"type\":\"DataIntegrityProof\",\"created\":\"2024-10-13T05:07:24.1194157Z\",\"proofPurpose\":\"assertionMethod\",\"verificationMethod\":\"did:key:z6MkqbpLSbqnY1pxVyhBCDYcFsv4ZgGgqP32kzNrf5deWVPU#z6MkqbpLSbqnY1pxVyhBCDYcFsv4ZgGgqP32kzNrf5deWVPU\",\"cryptosuite\":\"eddsa-2022\",\"proofValue\":\"z53QD98fj5m8i9s9acARnirCMAa6zn6LyYYALtbvkuWQwCt8kHDRWfRPppKB4GqZqFGE8Lf4q63LaWZvwbG6eweUP\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          "https://w3id.org/security/data-integrity/v1"
                        ],
                        "id": "urn:uuid:4345fea8-5272-4cb4-9755-e4cd40b66aee",
                        "type": [
                          "VerifiableCredential"
                        ],
                        "issuer": "did:key:z6MkqbpLSbqnY1pxVyhBCDYcFsv4ZgGgqP32kzNrf5deWVPU",
                        "issuanceDate": "2020-03-16T22:37:26.544Z",
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                        },
                        "proof": {
                          "type": "DataIntegrityProof",
                          "created": "2024-10-13T05:07:24.1194157Z",
                          "proofPurpose": "assertionMethod",
                          "verificationMethod": "did:key:z6MkqbpLSbqnY1pxVyhBCDYcFsv4ZgGgqP32kzNrf5deWVPU#z6MkqbpLSbqnY1pxVyhBCDYcFsv4ZgGgqP32kzNrf5deWVPU",
                          "cryptosuite": "eddsa-2022",
                          "proofValue": "z53QD98fj5m8i9s9acARnirCMAa6zn6LyYYALtbvkuWQwCt8kHDRWfRPppKB4GqZqFGE8Lf4q63LaWZvwbG6eweUP"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://core.test.procivis-one.com/vc-api/credentials/verify",
                  "status": 400,
                  "data": {
                    "errors": [
                      {
                        "status": 400,
                        "title": "Formatter error `Could not format: `Source failed: error while expanding: Expansion failed: Context processing failed: Remote context loading failed: HTTP error: `HTTP status code is error: 429```",
                        "detail": null
                      }
                    ]
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js:56:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "SpruceID should verify Trinsic",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "QruTcGAJQsbCnS0O2ie94",
              "ctx": null,
              "_testId": "urn:uuid:f6a5251d-e277-43fb-8447-b69d58d74c07",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Trinsic",
                "columnId": "SpruceID"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 66374,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 31,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Trinsic should verify Trinsic",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "QruTcGAJQsbCnS0O2ie94",
              "ctx": null,
              "_testId": "urn:uuid:0cc1a47a-7ddd-4207-97a2-16c1116bb029",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Trinsic",
                "columnId": "Trinsic"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 66405,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 82,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "bovine should verify Trinsic",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "QruTcGAJQsbCnS0O2ie94",
              "ctx": null,
              "_testId": "urn:uuid:d4ebe97d-5a48-4018-b1e7-5d9f694f1407",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Trinsic",
                "columnId": "bovine"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 66487,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 95,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",\"https://w3id.org/security/data-integrity/v1\"],\"id\":\"urn:uuid:4345fea8-5272-4cb4-9755-e4cd40b66aee\",\"type\":[\"VerifiableCredential\"],\"issuer\":\"did:key:z6MkqbpLSbqnY1pxVyhBCDYcFsv4ZgGgqP32kzNrf5deWVPU\",\"issuanceDate\":\"2020-03-16T22:37:26.544Z\",\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\"},\"proof\":{\"type\":\"DataIntegrityProof\",\"created\":\"2024-10-13T05:07:24.1194157Z\",\"proofPurpose\":\"assertionMethod\",\"verificationMethod\":\"did:key:z6MkqbpLSbqnY1pxVyhBCDYcFsv4ZgGgqP32kzNrf5deWVPU#z6MkqbpLSbqnY1pxVyhBCDYcFsv4ZgGgqP32kzNrf5deWVPU\",\"cryptosuite\":\"eddsa-2022\",\"proofValue\":\"z53QD98fj5m8i9s9acARnirCMAa6zn6LyYYALtbvkuWQwCt8kHDRWfRPppKB4GqZqFGE8Lf4q63LaWZvwbG6eweUP\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          "https://w3id.org/security/data-integrity/v1"
                        ],
                        "id": "urn:uuid:4345fea8-5272-4cb4-9755-e4cd40b66aee",
                        "type": [
                          "VerifiableCredential"
                        ],
                        "issuer": "did:key:z6MkqbpLSbqnY1pxVyhBCDYcFsv4ZgGgqP32kzNrf5deWVPU",
                        "issuanceDate": "2020-03-16T22:37:26.544Z",
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                        },
                        "proof": {
                          "type": "DataIntegrityProof",
                          "created": "2024-10-13T05:07:24.1194157Z",
                          "proofPurpose": "assertionMethod",
                          "verificationMethod": "did:key:z6MkqbpLSbqnY1pxVyhBCDYcFsv4ZgGgqP32kzNrf5deWVPU#z6MkqbpLSbqnY1pxVyhBCDYcFsv4ZgGgqP32kzNrf5deWVPU",
                          "cryptosuite": "eddsa-2022",
                          "proofValue": "z53QD98fj5m8i9s9acARnirCMAa6zn6LyYYALtbvkuWQwCt8kHDRWfRPppKB4GqZqFGE8Lf4q63LaWZvwbG6eweUP"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://bovine.social/w3c-di/verify",
                  "status": 400
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js:56:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            }
          ]
        },
        {
          "id": "bovine",
          "cells": [
            {
              "type": "test",
              "title": "ACA-py should verify bovine",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "QruTcGAJQsbCnS0O2ie94",
              "ctx": null,
              "_testId": "urn:uuid:08cc3df9-9e7c-428f-9a79-061be474a5c7",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "bovine",
                "columnId": "ACA-py"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 66582,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 30,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",\"https://w3id.org/security/data-integrity/v2\"],\"credentialSubject\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\",\"id\":\"urn:uuid:70d86de4-f11b-4a82-99c6-de8a6d9c349e\",\"issuanceDate\":\"2020-03-16T22:37:26.544Z\",\"issuer\":\"did:key:z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd\",\"proof\":{\"created\":\"2024-10-13T05:07:24Z\",\"cryptosuite\":\"eddsa-rdfc-2022\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z3kZXdxSYRixHYmYtgBSi5xLxh8o3DXMrsP9PVsp8dQ12CwAasYuLEJEQhSWq94GRs8cFdhPM8rpZ6due1FFjo7zs\",\"type\":\"DataIntegrityProof\",\"verificationMethod\":\"did:key:z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd#z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd\"},\"type\":\"VerifiableCredential\"},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          "https://w3id.org/security/data-integrity/v2"
                        ],
                        "credentialSubject": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b",
                        "id": "urn:uuid:70d86de4-f11b-4a82-99c6-de8a6d9c349e",
                        "issuanceDate": "2020-03-16T22:37:26.544Z",
                        "issuer": "did:key:z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd",
                        "proof": {
                          "created": "2024-10-13T05:07:24Z",
                          "cryptosuite": "eddsa-rdfc-2022",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "z3kZXdxSYRixHYmYtgBSi5xLxh8o3DXMrsP9PVsp8dQ12CwAasYuLEJEQhSWq94GRs8cFdhPM8rpZ6due1FFjo7zs",
                          "type": "DataIntegrityProof",
                          "verificationMethod": "did:key:z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd#z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd"
                        },
                        "type": "VerifiableCredential"
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://aca-py.test-suite.app/vc/credentials/verify",
                  "status": 422,
                  "data": {
                    "json": {
                      "verifiableCredential": {
                        "type": [
                          "Not a valid list."
                        ],
                        "credentialSubject": [
                          "Field should be dict or list of dicts"
                        ]
                      }
                    }
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js:56:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "apicatalog.com should verify bovine",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "QruTcGAJQsbCnS0O2ie94",
              "ctx": null,
              "_testId": "urn:uuid:01951b57-9f15-4e6e-b1bd-b2fb1e488363",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "bovine",
                "columnId": "apicatalog.com"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 66613,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 281,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "Digital Bazaar should verify bovine",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "QruTcGAJQsbCnS0O2ie94",
              "ctx": null,
              "_testId": "urn:uuid:75fd9719-ce7a-4904-9a71-76c7317ddd4f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "bovine",
                "columnId": "Digital Bazaar"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 66895,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 35,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: A validation error occured in … { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          "https://w3id.org/security/data-integrity/v2"
                        ],
                        "credentialSubject": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b",
                        "id": "urn:uuid:70d86de4-f11b-4a82-99c6-de8a6d9c349e",
                        "issuanceDate": "2020-03-16T22:37:26.544Z",
                        "issuer": "did:key:z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd",
                        "proof": {
                          "created": "2024-10-13T05:07:24Z",
                          "cryptosuite": "eddsa-rdfc-2022",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "z3kZXdxSYRixHYmYtgBSi5xLxh8o3DXMrsP9PVsp8dQ12CwAasYuLEJEQhSWq94GRs8cFdhPM8rpZ6due1FFjo7zs",
                          "type": "DataIntegrityProof",
                          "verificationMethod": "did:key:z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd#z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd"
                        },
                        "type": "VerifiableCredential"
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half",
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",\"https://w3id.org/security/data-integrity/v2\"],\"credentialSubject\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\",\"id\":\"urn:uuid:70d86de4-f11b-4a82-99c6-de8a6d9c349e\",\"issuanceDate\":\"2020-03-16T22:37:26.544Z\",\"issuer\":\"did:key:z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd\",\"proof\":{\"created\":\"2024-10-13T05:07:24Z\",\"cryptosuite\":\"eddsa-rdfc-2022\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z3kZXdxSYRixHYmYtgBSi5xLxh8o3DXMrsP9PVsp8dQ12CwAasYuLEJEQhSWq94GRs8cFdhPM8rpZ6due1FFjo7zs\",\"type\":\"DataIntegrityProof\",\"verificationMethod\":\"did:key:z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd#z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd\"},\"type\":\"VerifiableCredential\"},\"options\":{\"checks\":[\"proof\"]}}"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc2.veresverifier.dev/verifiers/z19w7KofwvE2nkJeRVLp8NDxz/credentials/verify",
                  "status": 400,
                  "data": {
                    "name": "ValidationError",
                    "message": "A validation error occured in the 'Verify Credential Body' validator.",
                    "details": {
                      "errors": [
                        {
                          "stack": "ValidationError: should be object\n    at _createError (file:///home/node/app/node_modules/@bedrock/validation/lib/index.js:240:17)\n    at validate (file:///home/node/app/node_modules/@bedrock/validation/lib/index.js:88:14)\n    at validate (file:///home/node/app/node_modules/@bedrock/validation/lib/index.js:181:22)\n    at Layer.handle [as handle_request] (/home/node/app/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/node/app/node_modules/express/lib/router/route.js:149:13)\n    at cors (/home/node/app/node_modules/cors/lib/index.js:188:7)\n    at /home/node/app/node_modules/cors/lib/index.js:224:17\n    at originCallback (/home/node/app/node_modules/cors/lib/index.js:214:15)\n    at /home/node/app/node_modules/cors/lib/index.js:219:13\n    at optionsCallback (/home/node/app/node_modules/cors/lib/index.js:199:9)",
                          "name": "ValidationError",
                          "message": "should be object",
                          "details": {
                            "instance": {
                              "verifiableCredential": {
                                "@context": [
                                  "https://www.w3.org/2018/credentials/v1",
                                  "https://w3id.org/security/data-integrity/v2"
                                ],
                                "credentialSubject": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b",
                                "id": "urn:uuid:70d86de4-f11b-4a82-99c6-de8a6d9c349e",
                                "issuanceDate": "2020-03-16T22:37:26.544Z",
                                "issuer": "did:key:z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd",
                                "proof": {
                                  "created": "2024-10-13T05:07:24Z",
                                  "cryptosuite": "eddsa-rdfc-2022",
                                  "proofPurpose": "assertionMethod",
                                  "proofValue": "z3kZXdxSYRixHYmYtgBSi5xLxh8o3DXMrsP9PVsp8dQ12CwAasYuLEJEQhSWq94GRs8cFdhPM8rpZ6due1FFjo7zs",
                                  "type": "DataIntegrityProof",
                                  "verificationMethod": "did:key:z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd#z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd"
                                },
                                "type": "VerifiableCredential"
                              },
                              "options": {
                                "checks": [
                                  "proof"
                                ]
                              }
                            },
                            "params": {
                              "type": "object"
                            },
                            "path": ".verifiableCredential.credentialSubject",
                            "public": true,
                            "schemaPath": "#/properties/verifiableCredential/anyOf/0/properties/credentialSubject/anyOf/0/type",
                            "schema": {
                              "description": "",
                              "title": ""
                            },
                            "value": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                          },
                          "cause": null
                        },
                        {
                          "stack": "ValidationError: should be array\n    at _createError (file:///home/node/app/node_modules/@bedrock/validation/lib/index.js:240:17)\n    at validate (file:///home/node/app/node_modules/@bedrock/validation/lib/index.js:88:14)\n    at validate (file:///home/node/app/node_modules/@bedrock/validation/lib/index.js:181:22)\n    at Layer.handle [as handle_request] (/home/node/app/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/node/app/node_modules/express/lib/router/route.js:149:13)\n    at cors (/home/node/app/node_modules/cors/lib/index.js:188:7)\n    at /home/node/app/node_modules/cors/lib/index.js:224:17\n    at originCallback (/home/node/app/node_modules/cors/lib/index.js:214:15)\n    at /home/node/app/node_modules/cors/lib/index.js:219:13\n    at optionsCallback (/home/node/app/node_modules/cors/lib/index.js:199:9)",
                          "name": "ValidationError",
                          "message": "should be array",
                          "details": {
                            "instance": {
                              "verifiableCredential": {
                                "@context": [
                                  "https://www.w3.org/2018/credentials/v1",
                                  "https://w3id.org/security/data-integrity/v2"
                                ],
                                "credentialSubject": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b",
                                "id": "urn:uuid:70d86de4-f11b-4a82-99c6-de8a6d9c349e",
                                "issuanceDate": "2020-03-16T22:37:26.544Z",
                                "issuer": "did:key:z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd",
                                "proof": {
                                  "created": "2024-10-13T05:07:24Z",
                                  "cryptosuite": "eddsa-rdfc-2022",
                                  "proofPurpose": "assertionMethod",
                                  "proofValue": "z3kZXdxSYRixHYmYtgBSi5xLxh8o3DXMrsP9PVsp8dQ12CwAasYuLEJEQhSWq94GRs8cFdhPM8rpZ6due1FFjo7zs",
                                  "type": "DataIntegrityProof",
                                  "verificationMethod": "did:key:z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd#z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd"
                                },
                                "type": "VerifiableCredential"
                              },
                              "options": {
                                "checks": [
                                  "proof"
                                ]
                              }
                            },
                            "params": {
                              "type": "array"
                            },
                            "path": ".verifiableCredential.credentialSubject",
                            "public": true,
                            "schemaPath": "#/properties/verifiableCredential/anyOf/0/properties/credentialSubject/anyOf/1/type",
                            "schema": {
                              "description": "",
                              "title": ""
                            },
                            "value": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                          },
                          "cause": null
                        },
                        {
                          "stack": "ValidationError: should match some schema in anyOf\n    at _createError (file:///home/node/app/node_modules/@bedrock/validation/lib/index.js:240:17)\n    at validate (file:///home/node/app/node_modules/@bedrock/validation/lib/index.js:88:14)\n    at validate (file:///home/node/app/node_modules/@bedrock/validation/lib/index.js:181:22)\n    at Layer.handle [as handle_request] (/home/node/app/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/node/app/node_modules/express/lib/router/route.js:149:13)\n    at cors (/home/node/app/node_modules/cors/lib/index.js:188:7)\n    at /home/node/app/node_modules/cors/lib/index.js:224:17\n    at originCallback (/home/node/app/node_modules/cors/lib/index.js:214:15)\n    at /home/node/app/node_modules/cors/lib/index.js:219:13\n    at optionsCallback (/home/node/app/node_modules/cors/lib/index.js:199:9)",
                          "name": "ValidationError",
                          "message": "should match some schema in anyOf",
                          "details": {
                            "instance": {
                              "verifiableCredential": {
                                "@context": [
                                  "https://www.w3.org/2018/credentials/v1",
                                  "https://w3id.org/security/data-integrity/v2"
                                ],
                                "credentialSubject": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b",
                                "id": "urn:uuid:70d86de4-f11b-4a82-99c6-de8a6d9c349e",
                                "issuanceDate": "2020-03-16T22:37:26.544Z",
                                "issuer": "did:key:z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd",
                                "proof": {
                                  "created": "2024-10-13T05:07:24Z",
                                  "cryptosuite": "eddsa-rdfc-2022",
                                  "proofPurpose": "assertionMethod",
                                  "proofValue": "z3kZXdxSYRixHYmYtgBSi5xLxh8o3DXMrsP9PVsp8dQ12CwAasYuLEJEQhSWq94GRs8cFdhPM8rpZ6due1FFjo7zs",
                                  "type": "DataIntegrityProof",
                                  "verificationMethod": "did:key:z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd#z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd"
                                },
                                "type": "VerifiableCredential"
                              },
                              "options": {
                                "checks": [
                                  "proof"
                                ]
                              }
                            },
                            "params": {},
                            "path": ".verifiableCredential.credentialSubject",
                            "public": true,
                            "schemaPath": "#/properties/verifiableCredential/anyOf/0/properties/credentialSubject/anyOf",
                            "schema": {
                              "description": "",
                              "title": {
                                "type": "object"
                              }
                            },
                            "value": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                          },
                          "cause": null
                        },
                        {
                          "stack": "ValidationError: should NOT have additional properties\n    at _createError (file:///home/node/app/node_modules/@bedrock/validation/lib/index.js:240:17)\n    at validate (file:///home/node/app/node_modules/@bedrock/validation/lib/index.js:88:14)\n    at validate (file:///home/node/app/node_modules/@bedrock/validation/lib/index.js:181:22)\n    at Layer.handle [as handle_request] (/home/node/app/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/node/app/node_modules/express/lib/router/route.js:149:13)\n    at cors (/home/node/app/node_modules/cors/lib/index.js:188:7)\n    at /home/node/app/node_modules/cors/lib/index.js:224:17\n    at originCallback (/home/node/app/node_modules/cors/lib/index.js:214:15)\n    at /home/node/app/node_modules/cors/lib/index.js:219:13\n    at optionsCallback (/home/node/app/node_modules/cors/lib/index.js:199:9)",
                          "name": "ValidationError",
                          "message": "should NOT have additional properties",
                          "details": {
                            "instance": {
                              "verifiableCredential": {
                                "@context": [
                                  "https://www.w3.org/2018/credentials/v1",
                                  "https://w3id.org/security/data-integrity/v2"
                                ],
                                "credentialSubject": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b",
                                "id": "urn:uuid:70d86de4-f11b-4a82-99c6-de8a6d9c349e",
                                "issuanceDate": "2020-03-16T22:37:26.544Z",
                                "issuer": "did:key:z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd",
                                "proof": {
                                  "created": "2024-10-13T05:07:24Z",
                                  "cryptosuite": "eddsa-rdfc-2022",
                                  "proofPurpose": "assertionMethod",
                                  "proofValue": "z3kZXdxSYRixHYmYtgBSi5xLxh8o3DXMrsP9PVsp8dQ12CwAasYuLEJEQhSWq94GRs8cFdhPM8rpZ6due1FFjo7zs",
                                  "type": "DataIntegrityProof",
                                  "verificationMethod": "did:key:z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd#z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd"
                                },
                                "type": "VerifiableCredential"
                              },
                              "options": {
                                "checks": [
                                  "proof"
                                ]
                              }
                            },
                            "params": {
                              "additionalProperty": "credentialSubject"
                            },
                            "path": ".verifiableCredential",
                            "public": true,
                            "schemaPath": "#/properties/verifiableCredential/anyOf/1/additionalProperties",
                            "schema": {
                              "description": "",
                              "title": "Enveloped Verifiable Credential"
                            },
                            "value": {
                              "@context": [
                                "https://www.w3.org/2018/credentials/v1",
                                "https://w3id.org/security/data-integrity/v2"
                              ],
                              "credentialSubject": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b",
                              "id": "urn:uuid:70d86de4-f11b-4a82-99c6-de8a6d9c349e",
                              "issuanceDate": "2020-03-16T22:37:26.544Z",
                              "issuer": "did:key:z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd",
                              "proof": {
                                "created": "2024-10-13T05:07:24Z",
                                "cryptosuite": "eddsa-rdfc-2022",
                                "proofPurpose": "assertionMethod",
                                "proofValue": "z3kZXdxSYRixHYmYtgBSi5xLxh8o3DXMrsP9PVsp8dQ12CwAasYuLEJEQhSWq94GRs8cFdhPM8rpZ6due1FFjo7zs",
                                "type": "DataIntegrityProof",
                                "verificationMethod": "did:key:z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd#z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd"
                              },
                              "type": "VerifiableCredential"
                            }
                          },
                          "cause": null
                        },
                        {
                          "stack": "ValidationError: should match some schema in anyOf\n    at _createError (file:///home/node/app/node_modules/@bedrock/validation/lib/index.js:240:17)\n    at validate (file:///home/node/app/node_modules/@bedrock/validation/lib/index.js:88:14)\n    at validate (file:///home/node/app/node_modules/@bedrock/validation/lib/index.js:181:22)\n    at Layer.handle [as handle_request] (/home/node/app/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/node/app/node_modules/express/lib/router/route.js:149:13)\n    at cors (/home/node/app/node_modules/cors/lib/index.js:188:7)\n    at /home/node/app/node_modules/cors/lib/index.js:224:17\n    at originCallback (/home/node/app/node_modules/cors/lib/index.js:214:15)\n    at /home/node/app/node_modules/cors/lib/index.js:219:13\n    at optionsCallback (/home/node/app/node_modules/cors/lib/index.js:199:9)",
                          "name": "ValidationError",
                          "message": "should match some schema in anyOf",
                          "details": {
                            "instance": {
                              "verifiableCredential": {
                                "@context": [
                                  "https://www.w3.org/2018/credentials/v1",
                                  "https://w3id.org/security/data-integrity/v2"
                                ],
                                "credentialSubject": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b",
                                "id": "urn:uuid:70d86de4-f11b-4a82-99c6-de8a6d9c349e",
                                "issuanceDate": "2020-03-16T22:37:26.544Z",
                                "issuer": "did:key:z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd",
                                "proof": {
                                  "created": "2024-10-13T05:07:24Z",
                                  "cryptosuite": "eddsa-rdfc-2022",
                                  "proofPurpose": "assertionMethod",
                                  "proofValue": "z3kZXdxSYRixHYmYtgBSi5xLxh8o3DXMrsP9PVsp8dQ12CwAasYuLEJEQhSWq94GRs8cFdhPM8rpZ6due1FFjo7zs",
                                  "type": "DataIntegrityProof",
                                  "verificationMethod": "did:key:z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd#z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd"
                                },
                                "type": "VerifiableCredential"
                              },
                              "options": {
                                "checks": [
                                  "proof"
                                ]
                              }
                            },
                            "params": {},
                            "path": ".verifiableCredential",
                            "public": true,
                            "schemaPath": "#/properties/verifiableCredential/anyOf",
                            "schema": {
                              "description": "",
                              "title": {
                                "title": "Verifiable Credential",
                                "type": "object",
                                "required": [
                                  "@context",
                                  "credentialSubject",
                                  "issuer",
                                  "type"
                                ],
                                "additionalProperties": true,
                                "properties": {
                                  "@context": {
                                    "type": "array",
                                    "minItems": 1,
                                    "items": [
                                      {
                                        "oneOf": [
                                          {
                                            "const": "https://www.w3.org/2018/credentials/v1"
                                          },
                                          {
                                            "const": "https://www.w3.org/ns/credentials/v2"
                                          }
                                        ]
                                      }
                                    ],
                                    "additionalItems": {
                                      "anyOf": [
                                        {
                                          "type": "string"
                                        },
                                        {
                                          "type": "object"
                                        }
                                      ]
                                    }
                                  },
                                  "credentialSubject": {
                                    "anyOf": [
                                      {
                                        "type": "object"
                                      },
                                      {
                                        "type": "array",
                                        "minItems": 1,
                                        "items": {
                                          "type": "object"
                                        }
                                      }
                                    ]
                                  },
                                  "id": {
                                    "type": "string"
                                  },
                                  "issuer": {
                                    "title": "identifier or an object with an id",
                                    "anyOf": [
                                      {
                                        "title": "ID",
                                        "description": "A unique identifier.",
                                        "type": "string",
                                        "minLength": 1,
                                        "disallow": {
                                          "type": "string",
                                          "enum": [
                                            "0"
                                          ]
                                        }
                                      },
                                      {
                                        "type": "object",
                                        "required": [
                                          "id"
                                        ],
                                        "additionalProperties": true,
                                        "properties": {
                                          "id": {
                                            "title": "ID",
                                            "description": "A unique identifier.",
                                            "type": "string",
                                            "minLength": 1,
                                            "disallow": {
                                              "type": "string",
                                              "enum": [
                                                "0"
                                              ]
                                            }
                                          }
                                        }
                                      }
                                    ]
                                  },
                                  "type": {
                                    "type": "array",
                                    "minItems": 1,
                                    "items": [
                                      {
                                        "const": "VerifiableCredential"
                                      }
                                    ],
                                    "additionalItems": {
                                      "type": "string"
                                    }
                                  },
                                  "proof": {
                                    "title": "Proof",
                                    "anyOf": [
                                      {
                                        "type": "object"
                                      },
                                      {
                                        "type": "array",
                                        "minItems": 1,
                                        "items": {
                                          "type": "object"
                                        }
                                      }
                                    ]
                                  }
                                }
                              }
                            },
                            "value": {
                              "@context": [
                                "https://www.w3.org/2018/credentials/v1",
                                "https://w3id.org/security/data-integrity/v2"
                              ],
                              "credentialSubject": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b",
                              "id": "urn:uuid:70d86de4-f11b-4a82-99c6-de8a6d9c349e",
                              "issuanceDate": "2020-03-16T22:37:26.544Z",
                              "issuer": "did:key:z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd",
                              "proof": {
                                "created": "2024-10-13T05:07:24Z",
                                "cryptosuite": "eddsa-rdfc-2022",
                                "proofPurpose": "assertionMethod",
                                "proofValue": "z3kZXdxSYRixHYmYtgBSi5xLxh8o3DXMrsP9PVsp8dQ12CwAasYuLEJEQhSWq94GRs8cFdhPM8rpZ6due1FFjo7zs",
                                "type": "DataIntegrityProof",
                                "verificationMethod": "did:key:z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd#z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd"
                              },
                              "type": "VerifiableCredential"
                            }
                          },
                          "cause": null
                        }
                      ],
                      "httpStatusCode": 400
                    },
                    "cause": null,
                    "stack": "ValidationError: A validation error occured in the 'Verify Credential Body' validator.\n    at _createError (file:///home/node/app/node_modules/@bedrock/validation/lib/index.js:246:17)\n    at validate (file:///home/node/app/node_modules/@bedrock/validation/lib/index.js:88:14)\n    at validate (file:///home/node/app/node_modules/@bedrock/validation/lib/index.js:181:22)\n    at Layer.handle [as handle_request] (/home/node/app/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/node/app/node_modules/express/lib/router/route.js:149:13)\n    at cors (/home/node/app/node_modules/cors/lib/index.js:188:7)\n    at /home/node/app/node_modules/cors/lib/index.js:224:17\n    at originCallback (/home/node/app/node_modules/cors/lib/index.js:214:15)\n    at /home/node/app/node_modules/cors/lib/index.js:219:13\n    at optionsCallback (/home/node/app/node_modules/cors/lib/index.js:199:9)",
                    "type": "ValidationError"
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: A validation error occured in … { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js:56:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "Grotto Networking should verify bovine",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "QruTcGAJQsbCnS0O2ie94",
              "ctx": null,
              "_testId": "urn:uuid:b553c971-1d33-4861-b773-eb834257f5b4",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "bovine",
                "columnId": "Grotto Networking"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 66931,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 75,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",\"https://w3id.org/security/data-integrity/v2\"],\"credentialSubject\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\",\"id\":\"urn:uuid:70d86de4-f11b-4a82-99c6-de8a6d9c349e\",\"issuanceDate\":\"2020-03-16T22:37:26.544Z\",\"issuer\":\"did:key:z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd\",\"proof\":{\"created\":\"2024-10-13T05:07:24Z\",\"cryptosuite\":\"eddsa-rdfc-2022\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z3kZXdxSYRixHYmYtgBSi5xLxh8o3DXMrsP9PVsp8dQ12CwAasYuLEJEQhSWq94GRs8cFdhPM8rpZ6due1FFjo7zs\",\"type\":\"DataIntegrityProof\",\"verificationMethod\":\"did:key:z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd#z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd\"},\"type\":\"VerifiableCredential\"},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          "https://w3id.org/security/data-integrity/v2"
                        ],
                        "credentialSubject": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b",
                        "id": "urn:uuid:70d86de4-f11b-4a82-99c6-de8a6d9c349e",
                        "issuanceDate": "2020-03-16T22:37:26.544Z",
                        "issuer": "did:key:z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd",
                        "proof": {
                          "created": "2024-10-13T05:07:24Z",
                          "cryptosuite": "eddsa-rdfc-2022",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "z3kZXdxSYRixHYmYtgBSi5xLxh8o3DXMrsP9PVsp8dQ12CwAasYuLEJEQhSWq94GRs8cFdhPM8rpZ6due1FFjo7zs",
                          "type": "DataIntegrityProof",
                          "verificationMethod": "did:key:z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd#z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd"
                        },
                        "type": "VerifiableCredential"
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://ecdsa-sd.grotto-networking.com/EdDSA-RDFC/credentials/verify",
                  "status": 400,
                  "data": {
                    "errors": [
                      "proof: must be object,array"
                    ]
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js:56:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "Procivis One Core should verify bovine",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "QruTcGAJQsbCnS0O2ie94",
              "ctx": null,
              "_testId": "urn:uuid:cc4a0b24-1d36-434c-b70a-265f42ce1999",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "bovine",
                "columnId": "Procivis One Core"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 67007,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 100,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",\"https://w3id.org/security/data-integrity/v2\"],\"credentialSubject\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\",\"id\":\"urn:uuid:70d86de4-f11b-4a82-99c6-de8a6d9c349e\",\"issuanceDate\":\"2020-03-16T22:37:26.544Z\",\"issuer\":\"did:key:z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd\",\"proof\":{\"created\":\"2024-10-13T05:07:24Z\",\"cryptosuite\":\"eddsa-rdfc-2022\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z3kZXdxSYRixHYmYtgBSi5xLxh8o3DXMrsP9PVsp8dQ12CwAasYuLEJEQhSWq94GRs8cFdhPM8rpZ6due1FFjo7zs\",\"type\":\"DataIntegrityProof\",\"verificationMethod\":\"did:key:z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd#z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd\"},\"type\":\"VerifiableCredential\"},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          "https://w3id.org/security/data-integrity/v2"
                        ],
                        "credentialSubject": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b",
                        "id": "urn:uuid:70d86de4-f11b-4a82-99c6-de8a6d9c349e",
                        "issuanceDate": "2020-03-16T22:37:26.544Z",
                        "issuer": "did:key:z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd",
                        "proof": {
                          "created": "2024-10-13T05:07:24Z",
                          "cryptosuite": "eddsa-rdfc-2022",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "z3kZXdxSYRixHYmYtgBSi5xLxh8o3DXMrsP9PVsp8dQ12CwAasYuLEJEQhSWq94GRs8cFdhPM8rpZ6due1FFjo7zs",
                          "type": "DataIntegrityProof",
                          "verificationMethod": "did:key:z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd#z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd"
                        },
                        "type": "VerifiableCredential"
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://core.test.procivis-one.com/vc-api/credentials/verify",
                  "status": 400,
                  "data": {
                    "errors": [
                      {
                        "status": 400,
                        "title": "Failed to deserialize the JSON body into the target type",
                        "detail": null
                      }
                    ]
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js:56:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "SpruceID should verify bovine",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "QruTcGAJQsbCnS0O2ie94",
              "ctx": null,
              "_testId": "urn:uuid:de525e7a-6600-4c13-8d6f-d35aa8f3e892",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "bovine",
                "columnId": "SpruceID"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 67107,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 37,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",\"https://w3id.org/security/data-integrity/v2\"],\"credentialSubject\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\",\"id\":\"urn:uuid:70d86de4-f11b-4a82-99c6-de8a6d9c349e\",\"issuanceDate\":\"2020-03-16T22:37:26.544Z\",\"issuer\":\"did:key:z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd\",\"proof\":{\"created\":\"2024-10-13T05:07:24Z\",\"cryptosuite\":\"eddsa-rdfc-2022\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z3kZXdxSYRixHYmYtgBSi5xLxh8o3DXMrsP9PVsp8dQ12CwAasYuLEJEQhSWq94GRs8cFdhPM8rpZ6due1FFjo7zs\",\"type\":\"DataIntegrityProof\",\"verificationMethod\":\"did:key:z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd#z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd\"},\"type\":\"VerifiableCredential\"},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          "https://w3id.org/security/data-integrity/v2"
                        ],
                        "credentialSubject": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b",
                        "id": "urn:uuid:70d86de4-f11b-4a82-99c6-de8a6d9c349e",
                        "issuanceDate": "2020-03-16T22:37:26.544Z",
                        "issuer": "did:key:z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd",
                        "proof": {
                          "created": "2024-10-13T05:07:24Z",
                          "cryptosuite": "eddsa-rdfc-2022",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "z3kZXdxSYRixHYmYtgBSi5xLxh8o3DXMrsP9PVsp8dQ12CwAasYuLEJEQhSWq94GRs8cFdhPM8rpZ6due1FFjo7zs",
                          "type": "DataIntegrityProof",
                          "verificationMethod": "did:key:z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd#z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd"
                        },
                        "type": "VerifiableCredential"
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://vc.spruceid.xyz/credentials/verify",
                  "status": 400
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js:56:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "Trinsic should verify bovine",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "QruTcGAJQsbCnS0O2ie94",
              "ctx": null,
              "_testId": "urn:uuid:591922e1-7950-4fce-9f4d-68dc7be47e9e",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "bovine",
                "columnId": "Trinsic"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 67144,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 25,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",\"https://w3id.org/security/data-integrity/v2\"],\"credentialSubject\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\",\"id\":\"urn:uuid:70d86de4-f11b-4a82-99c6-de8a6d9c349e\",\"issuanceDate\":\"2020-03-16T22:37:26.544Z\",\"issuer\":\"did:key:z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd\",\"proof\":{\"created\":\"2024-10-13T05:07:24Z\",\"cryptosuite\":\"eddsa-rdfc-2022\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z3kZXdxSYRixHYmYtgBSi5xLxh8o3DXMrsP9PVsp8dQ12CwAasYuLEJEQhSWq94GRs8cFdhPM8rpZ6due1FFjo7zs\",\"type\":\"DataIntegrityProof\",\"verificationMethod\":\"did:key:z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd#z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd\"},\"type\":\"VerifiableCredential\"},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          "https://w3id.org/security/data-integrity/v2"
                        ],
                        "credentialSubject": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b",
                        "id": "urn:uuid:70d86de4-f11b-4a82-99c6-de8a6d9c349e",
                        "issuanceDate": "2020-03-16T22:37:26.544Z",
                        "issuer": "did:key:z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd",
                        "proof": {
                          "created": "2024-10-13T05:07:24Z",
                          "cryptosuite": "eddsa-rdfc-2022",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "z3kZXdxSYRixHYmYtgBSi5xLxh8o3DXMrsP9PVsp8dQ12CwAasYuLEJEQhSWq94GRs8cFdhPM8rpZ6due1FFjo7zs",
                          "type": "DataIntegrityProof",
                          "verificationMethod": "did:key:z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd#z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd"
                        },
                        "type": "VerifiableCredential"
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://interop.connect.trinsic.cloud/vc-api/credentials/verify",
                  "status": 400
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js:56:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "bovine should verify bovine",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/30-rdfc-interop.js",
              "parent": "QruTcGAJQsbCnS0O2ie94",
              "ctx": null,
              "_testId": "urn:uuid:a6a2ab53-3888-48f0-999b-210b52a83c3b",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "bovine",
                "columnId": "bovine"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 67169,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 102,
              "state": "passed",
              "speed": "slow"
            }
          ]
        }
      ]
    },
    {
      "title": "eddsa-jcs-2022 (issuer)",
      "ctx": null,
      "suites": [
        {
          "title": "ACA-py",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The field \"cryptosuite\" MUST be \"eddsa-jcs-2022\".",
              "body": "function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          proofs.some(\n            proof => proof?.cryptosuite === cryptosuite\n          ).should.equal(true, 'Expected at least one proof to have ' +\n            '\"cryptosuite\" with the value \"eddsa-jcs-2022\".');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/40-jcs-create.js",
              "parent": "MPETKazIIcSmsUjtjMZEF",
              "ctx": null
            },
            {
              "type": "test",
              "title": "Dereferencing the \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
              "body": "function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          verificationMethodDocuments.some(\n            verificationMethodDocument =>\n              verificationMethodDocument?.type === 'Multikey'\n          ).should.equal(true, 'Expected at least one proof to have \"type\" ' +\n            'property value \"Multikey\".');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/40-jcs-create.js",
              "parent": "MPETKazIIcSmsUjtjMZEF",
              "ctx": null
            },
            {
              "type": "test",
              "title": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          verificationMethodDocuments.some(\n            verificationMethodDocument =>\n              verificationMethodDocument?.type === 'Multikey'\n          ).should.equal(true, 'Expected at least one proof to have \"type\" ' +\n            'property value \"Multikey\".'\n          );\n          const controllerDocuments = [];\n          for(const verificationMethodDocument of verificationMethodDocuments) {\n            const controllerDocument = await documentLoader({\n              url: verificationMethodDocument.controller\n            });\n            controllerDocuments.push(controllerDocument);\n          }\n          proofs.some(\n            proof => controllerDocuments.some(controllerDocument =>\n              controllerDocument.hasOwnProperty(proof.proofPurpose))\n          ).should.equal(true, 'Expected \"proof.proofPurpose\" field ' +\n             'to match the verification method controller.'\n          );\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/40-jcs-create.js",
              "parent": "MPETKazIIcSmsUjtjMZEF",
              "ctx": null
            },
            {
              "type": "test",
              "title": "The \"publicKeyMultibase\" value of the verification method MUST be 34 bytes in length and starts with the base-58-btc prefix (z).",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          for(const verificationMethodDocument of verificationMethodDocuments) {\n            const multibase = 'z';\n            const {publicKeyMultibase} = verificationMethodDocument;\n            const isMultibaseEncoded =\n              publicKeyMultibase.startsWith(multibase) &&\n                shouldBeBs58(publicKeyMultibase);\n            isMultibaseEncoded.should.equal(\n              true,\n              'Expected \"publicKeyMultibase\" value of the verification ' +\n              'method to be multibase base58-btc encoded value'\n            );\n            const publicKeyMultibaseBytes = bs58Decode({\n              id: publicKeyMultibase\n            });\n            publicKeyMultibaseBytes.byteLength.should.equal(34, 'Expected ' +\n              '\"publicKeyMultibase\" value of the verification method to ' +\n              'be 34 bytes in length.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/40-jcs-create.js",
              "parent": "MPETKazIIcSmsUjtjMZEF",
              "ctx": null
            },
            {
              "type": "test",
              "title": "\"proofValue\" field when decoded to raw bytes, MUST be 64 bytes in length if the associated public key is 32 bytes or 114 bytes in length if the public key is 57 bytes.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          should.exist(issuedVc, 'Expected issuer to have issued a ' +\n            'credential.');\n          should.exist(proofs, 'Expected credential to have a proof.');\n          const eddsa2022Proofs = proofs.filter(\n            proof => proof?.cryptosuite === cryptosuite);\n          eddsa2022Proofs.length.should.be.gte(1, 'Expected at least one ' +\n            'eddsa-jcs-2022 cryptosuite.');\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.proofValue, 'Expected a proof value on ' +\n              'the proof.');\n            const valueBytes = bs58Decode({id: proof.proofValue});\n            should.exist(proof.verificationMethod);\n            const vmBytes = await getPublicKeyBytes({\n              did: proof.verificationMethod});\n            vmBytes.byteLength.should.be.oneOf([32, 57], 'Expected public ' +\n              'key length to be either 32 or 57 bytes.');\n            if(vmBytes.byteLength === 32) {\n              valueBytes.byteLength.should.equal(64, 'Expected 64 byte ' +\n                'proofValue for 32 byte key.');\n            } else {\n              valueBytes.byteLength.should.equal(114, 'Expected 114 byte ' +\n                'proofValue for 57 byte key.');\n            }\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/40-jcs-create.js",
              "parent": "MPETKazIIcSmsUjtjMZEF",
              "ctx": null
            },
            {
              "type": "test",
              "title": "\"proof\" MUST verify when using a conformant verifier.",
              "body": "async function() {\n            this.test.cell = {columnId, rowId: this.test.title};\n            should.exist(verifier, 'Expected implementation to have a VC ' +\n              'API compatible verifier.');\n            const {result, error} = await verifier.post({json: {\n              verifiableCredential: issuedVc,\n              options: {checks: ['proof']}\n            }});\n            should.not.exist(error, 'Expected verifier to not error.');\n            should.exist(result, 'Expected verifier to return a result.');\n            result.status.should.not.equal(400, 'Expected status code to not ' +\n              'be 400.');\n            result.status.should.equal(200, 'Expected status code to be 200.');\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/40-jcs-create.js",
              "parent": "MPETKazIIcSmsUjtjMZEF",
              "ctx": null
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook for \"The field \"cryptosuite\" MUST be \"eddsa-jcs-2022\".\"",
              "body": "async function() {\n          issuedVc = await createInitialVc({issuer, vc: validVc});\n          proofs = Array.isArray(issuedVc?.proof) ?\n            issuedVc.proof : [issuedVc?.proof];\n          const verificationMethods = proofs.map(\n            proof => proof.verificationMethod);\n          for(const verificationMethod of verificationMethods) {\n            const verificationMethodDocument = await documentLoader({\n              url: verificationMethod\n            });\n            verificationMethodDocuments.push(verificationMethodDocument);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "MPETKazIIcSmsUjtjMZEF",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/40-jcs-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 67272,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 28,
              "_error": null,
              "state": "failed",
              "err": {
                "response": {},
                "request": {},
                "options": {
                  "headers": {},
                  "body": "{\"credential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\"],\"id\":\"urn:uuid:f0037070-1555-4892-8641-8355a8c6d779\",\"type\":[\"VerifiableCredential\"],\"issuer\":\"did:key:z6MkmiYjSToh5NdEf9xNuh5mDGXGYinzcAy1s4feRHtkEQJr\",\"issuanceDate\":\"2020-03-16T22:37:26.544Z\",\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\"}},\"options\":{\"type\":\"DataIntegrityProof\",\"cryptosuite\":\"eddsa-jcs-2022\"}}",
                  "method": "POST",
                  "json": {
                    "credential": {
                      "@context": [
                        "https://www.w3.org/2018/credentials/v1"
                      ],
                      "id": "urn:uuid:f0037070-1555-4892-8641-8355a8c6d779",
                      "type": [
                        "VerifiableCredential"
                      ],
                      "issuer": "did:key:z6MkmiYjSToh5NdEf9xNuh5mDGXGYinzcAy1s4feRHtkEQJr",
                      "issuanceDate": "2020-03-16T22:37:26.544Z",
                      "credentialSubject": {
                        "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                      }
                    },
                    "options": {
                      "type": "DataIntegrityProof",
                      "cryptosuite": "eddsa-jcs-2022"
                    }
                  },
                  "agent": {
                    "_events": {},
                    "_eventsCount": 2,
                    "defaultPort": 443,
                    "protocol": "https:",
                    "options": {
                      "rejectUnauthorized": false,
                      "noDelay": true,
                      "path": null
                    },
                    "requests": {},
                    "sockets": {},
                    "freeSockets": {},
                    "keepAliveMsecs": 1000,
                    "keepAlive": false,
                    "maxSockets": null,
                    "maxFreeSockets": 256,
                    "scheduling": "lifo",
                    "maxTotalSockets": null,
                    "totalSocketCount": 0,
                    "maxCachedSessions": 100,
                    "_sessionCache": {
                      "map": {},
                      "list": []
                    }
                  },
                  "hooks": {
                    "beforeRequest": [],
                    "beforeRetry": [],
                    "afterResponse": [],
                    "beforeError": []
                  },
                  "prefixUrl": "",
                  "retry": {
                    "limit": 2,
                    "methods": [
                      "get",
                      "put",
                      "head",
                      "delete",
                      "options",
                      "trace"
                    ],
                    "statusCodes": [
                      408,
                      413,
                      429,
                      500,
                      502,
                      503,
                      504
                    ],
                    "afterStatusCodes": [
                      413,
                      429,
                      503
                    ],
                    "maxRetryAfter": null,
                    "backoffLimit": null
                  },
                  "throwHttpErrors": true,
                  "timeout": 10000,
                  "signal": {},
                  "duplex": "half"
                },
                "name": "HTTPError",
                "requestUrl": "https://aca-py.test-suite.app/vc/credentials/issue",
                "status": 400,
                "data": {
                  "message": "DID not found: did:key:z6MkmiYjSToh5NdEf9xNuh5mDGXGYinzcAy1s4feRHtkEQJr"
                }
              }
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "nUMhwgVykgHmvgxxQVYpe",
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/40-jcs-create.js",
          "_testId": "urn:uuid:dc50abd7-34f0-4c2c-a3a1-8623fe4d679b"
        },
        {
          "title": "Grotto Networking",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The field \"cryptosuite\" MUST be \"eddsa-jcs-2022\".",
              "body": "function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          proofs.some(\n            proof => proof?.cryptosuite === cryptosuite\n          ).should.equal(true, 'Expected at least one proof to have ' +\n            '\"cryptosuite\" with the value \"eddsa-jcs-2022\".');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/40-jcs-create.js",
              "parent": "iMVsgX26mV5DBVFsid76D",
              "ctx": null,
              "_testId": "urn:uuid:03ab72d3-da88-454a-862d-080928ce2401",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The field \"cryptosuite\" MUST be \"eddsa-jcs-2022\"."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Dereferencing the \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
              "body": "function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          verificationMethodDocuments.some(\n            verificationMethodDocument =>\n              verificationMethodDocument?.type === 'Multikey'\n          ).should.equal(true, 'Expected at least one proof to have \"type\" ' +\n            'property value \"Multikey\".');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/40-jcs-create.js",
              "parent": "iMVsgX26mV5DBVFsid76D",
              "ctx": null,
              "_testId": "urn:uuid:b287dca1-3090-4b8e-883f-95bf1efe2850",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "Dereferencing the \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          verificationMethodDocuments.some(\n            verificationMethodDocument =>\n              verificationMethodDocument?.type === 'Multikey'\n          ).should.equal(true, 'Expected at least one proof to have \"type\" ' +\n            'property value \"Multikey\".'\n          );\n          const controllerDocuments = [];\n          for(const verificationMethodDocument of verificationMethodDocuments) {\n            const controllerDocument = await documentLoader({\n              url: verificationMethodDocument.controller\n            });\n            controllerDocuments.push(controllerDocument);\n          }\n          proofs.some(\n            proof => controllerDocuments.some(controllerDocument =>\n              controllerDocument.hasOwnProperty(proof.proofPurpose))\n          ).should.equal(true, 'Expected \"proof.proofPurpose\" field ' +\n             'to match the verification method controller.'\n          );\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/40-jcs-create.js",
              "parent": "iMVsgX26mV5DBVFsid76D",
              "ctx": null,
              "_testId": "urn:uuid:8ae200b4-78d5-44e2-91b4-dbfd52682cf5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 67375,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"publicKeyMultibase\" value of the verification method MUST be 34 bytes in length and starts with the base-58-btc prefix (z).",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          for(const verificationMethodDocument of verificationMethodDocuments) {\n            const multibase = 'z';\n            const {publicKeyMultibase} = verificationMethodDocument;\n            const isMultibaseEncoded =\n              publicKeyMultibase.startsWith(multibase) &&\n                shouldBeBs58(publicKeyMultibase);\n            isMultibaseEncoded.should.equal(\n              true,\n              'Expected \"publicKeyMultibase\" value of the verification ' +\n              'method to be multibase base58-btc encoded value'\n            );\n            const publicKeyMultibaseBytes = bs58Decode({\n              id: publicKeyMultibase\n            });\n            publicKeyMultibaseBytes.byteLength.should.equal(34, 'Expected ' +\n              '\"publicKeyMultibase\" value of the verification method to ' +\n              'be 34 bytes in length.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/40-jcs-create.js",
              "parent": "iMVsgX26mV5DBVFsid76D",
              "ctx": null,
              "_testId": "urn:uuid:8ea2f847-7132-4441-b017-69900c296965",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The \"publicKeyMultibase\" value of the verification method MUST be 34 bytes in length and starts with the base-58-btc prefix (z)."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 67375,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proofValue\" field when decoded to raw bytes, MUST be 64 bytes in length if the associated public key is 32 bytes or 114 bytes in length if the public key is 57 bytes.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          should.exist(issuedVc, 'Expected issuer to have issued a ' +\n            'credential.');\n          should.exist(proofs, 'Expected credential to have a proof.');\n          const eddsa2022Proofs = proofs.filter(\n            proof => proof?.cryptosuite === cryptosuite);\n          eddsa2022Proofs.length.should.be.gte(1, 'Expected at least one ' +\n            'eddsa-jcs-2022 cryptosuite.');\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.proofValue, 'Expected a proof value on ' +\n              'the proof.');\n            const valueBytes = bs58Decode({id: proof.proofValue});\n            should.exist(proof.verificationMethod);\n            const vmBytes = await getPublicKeyBytes({\n              did: proof.verificationMethod});\n            vmBytes.byteLength.should.be.oneOf([32, 57], 'Expected public ' +\n              'key length to be either 32 or 57 bytes.');\n            if(vmBytes.byteLength === 32) {\n              valueBytes.byteLength.should.equal(64, 'Expected 64 byte ' +\n                'proofValue for 32 byte key.');\n            } else {\n              valueBytes.byteLength.should.equal(114, 'Expected 114 byte ' +\n                'proofValue for 57 byte key.');\n            }\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/40-jcs-create.js",
              "parent": "iMVsgX26mV5DBVFsid76D",
              "ctx": null,
              "_testId": "urn:uuid:87a03a37-3393-4dbc-83d1-52b5901c65ae",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "\"proofValue\" field when decoded to raw bytes, MUST be 64 bytes in length if the associated public key is 32 bytes or 114 bytes in length if the public key is 57 bytes."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 67375,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof\" MUST verify when using a conformant verifier.",
              "body": "async function() {\n            this.test.cell = {columnId, rowId: this.test.title};\n            should.exist(verifier, 'Expected implementation to have a VC ' +\n              'API compatible verifier.');\n            const {result, error} = await verifier.post({json: {\n              verifiableCredential: issuedVc,\n              options: {checks: ['proof']}\n            }});\n            should.not.exist(error, 'Expected verifier to not error.');\n            should.exist(result, 'Expected verifier to return a result.');\n            result.status.should.not.equal(400, 'Expected status code to not ' +\n              'be 400.');\n            result.status.should.equal(200, 'Expected status code to be 200.');\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/40-jcs-create.js",
              "parent": "iMVsgX26mV5DBVFsid76D",
              "ctx": null,
              "_testId": "urn:uuid:3ffbd527-2c53-4c40-81b6-ee664b8e4f5c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "\"proof\" MUST verify when using a conformant verifier."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 67376,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 76,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"Grotto Networking\"",
              "body": "async function() {\n          issuedVc = await createInitialVc({issuer, vc: validVc});\n          proofs = Array.isArray(issuedVc?.proof) ?\n            issuedVc.proof : [issuedVc?.proof];\n          const verificationMethods = proofs.map(\n            proof => proof.verificationMethod);\n          for(const verificationMethod of verificationMethods) {\n            const verificationMethodDocument = await documentLoader({\n              url: verificationMethod\n            });\n            verificationMethodDocuments.push(verificationMethodDocument);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "iMVsgX26mV5DBVFsid76D",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/40-jcs-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 67300,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 73,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "nUMhwgVykgHmvgxxQVYpe",
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/40-jcs-create.js",
          "_testId": "urn:uuid:41584b81-eb4d-419b-85fe-018a1467d825"
        },
        {
          "title": "OpSecId",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The field \"cryptosuite\" MUST be \"eddsa-jcs-2022\".",
              "body": "function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          proofs.some(\n            proof => proof?.cryptosuite === cryptosuite\n          ).should.equal(true, 'Expected at least one proof to have ' +\n            '\"cryptosuite\" with the value \"eddsa-jcs-2022\".');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/40-jcs-create.js",
              "parent": "_CJfuGhkvCVMClYsEab8x",
              "ctx": null
            },
            {
              "type": "test",
              "title": "Dereferencing the \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
              "body": "function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          verificationMethodDocuments.some(\n            verificationMethodDocument =>\n              verificationMethodDocument?.type === 'Multikey'\n          ).should.equal(true, 'Expected at least one proof to have \"type\" ' +\n            'property value \"Multikey\".');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/40-jcs-create.js",
              "parent": "_CJfuGhkvCVMClYsEab8x",
              "ctx": null
            },
            {
              "type": "test",
              "title": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          verificationMethodDocuments.some(\n            verificationMethodDocument =>\n              verificationMethodDocument?.type === 'Multikey'\n          ).should.equal(true, 'Expected at least one proof to have \"type\" ' +\n            'property value \"Multikey\".'\n          );\n          const controllerDocuments = [];\n          for(const verificationMethodDocument of verificationMethodDocuments) {\n            const controllerDocument = await documentLoader({\n              url: verificationMethodDocument.controller\n            });\n            controllerDocuments.push(controllerDocument);\n          }\n          proofs.some(\n            proof => controllerDocuments.some(controllerDocument =>\n              controllerDocument.hasOwnProperty(proof.proofPurpose))\n          ).should.equal(true, 'Expected \"proof.proofPurpose\" field ' +\n             'to match the verification method controller.'\n          );\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/40-jcs-create.js",
              "parent": "_CJfuGhkvCVMClYsEab8x",
              "ctx": null
            },
            {
              "type": "test",
              "title": "The \"publicKeyMultibase\" value of the verification method MUST be 34 bytes in length and starts with the base-58-btc prefix (z).",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          for(const verificationMethodDocument of verificationMethodDocuments) {\n            const multibase = 'z';\n            const {publicKeyMultibase} = verificationMethodDocument;\n            const isMultibaseEncoded =\n              publicKeyMultibase.startsWith(multibase) &&\n                shouldBeBs58(publicKeyMultibase);\n            isMultibaseEncoded.should.equal(\n              true,\n              'Expected \"publicKeyMultibase\" value of the verification ' +\n              'method to be multibase base58-btc encoded value'\n            );\n            const publicKeyMultibaseBytes = bs58Decode({\n              id: publicKeyMultibase\n            });\n            publicKeyMultibaseBytes.byteLength.should.equal(34, 'Expected ' +\n              '\"publicKeyMultibase\" value of the verification method to ' +\n              'be 34 bytes in length.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/40-jcs-create.js",
              "parent": "_CJfuGhkvCVMClYsEab8x",
              "ctx": null
            },
            {
              "type": "test",
              "title": "\"proofValue\" field when decoded to raw bytes, MUST be 64 bytes in length if the associated public key is 32 bytes or 114 bytes in length if the public key is 57 bytes.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          should.exist(issuedVc, 'Expected issuer to have issued a ' +\n            'credential.');\n          should.exist(proofs, 'Expected credential to have a proof.');\n          const eddsa2022Proofs = proofs.filter(\n            proof => proof?.cryptosuite === cryptosuite);\n          eddsa2022Proofs.length.should.be.gte(1, 'Expected at least one ' +\n            'eddsa-jcs-2022 cryptosuite.');\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.proofValue, 'Expected a proof value on ' +\n              'the proof.');\n            const valueBytes = bs58Decode({id: proof.proofValue});\n            should.exist(proof.verificationMethod);\n            const vmBytes = await getPublicKeyBytes({\n              did: proof.verificationMethod});\n            vmBytes.byteLength.should.be.oneOf([32, 57], 'Expected public ' +\n              'key length to be either 32 or 57 bytes.');\n            if(vmBytes.byteLength === 32) {\n              valueBytes.byteLength.should.equal(64, 'Expected 64 byte ' +\n                'proofValue for 32 byte key.');\n            } else {\n              valueBytes.byteLength.should.equal(114, 'Expected 114 byte ' +\n                'proofValue for 57 byte key.');\n            }\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/40-jcs-create.js",
              "parent": "_CJfuGhkvCVMClYsEab8x",
              "ctx": null
            },
            {
              "type": "test",
              "title": "\"proof\" MUST verify when using a conformant verifier.",
              "body": "async function() {\n            this.test.cell = {columnId, rowId: this.test.title};\n            should.exist(verifier, 'Expected implementation to have a VC ' +\n              'API compatible verifier.');\n            const {result, error} = await verifier.post({json: {\n              verifiableCredential: issuedVc,\n              options: {checks: ['proof']}\n            }});\n            should.not.exist(error, 'Expected verifier to not error.');\n            should.exist(result, 'Expected verifier to return a result.');\n            result.status.should.not.equal(400, 'Expected status code to not ' +\n              'be 400.');\n            result.status.should.equal(200, 'Expected status code to be 200.');\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/40-jcs-create.js",
              "parent": "_CJfuGhkvCVMClYsEab8x",
              "ctx": null
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook for \"The field \"cryptosuite\" MUST be \"eddsa-jcs-2022\".\"",
              "body": "async function() {\n          issuedVc = await createInitialVc({issuer, vc: validVc});\n          proofs = Array.isArray(issuedVc?.proof) ?\n            issuedVc.proof : [issuedVc?.proof];\n          const verificationMethods = proofs.map(\n            proof => proof.verificationMethod);\n          for(const verificationMethod of verificationMethods) {\n            const verificationMethodDocument = await documentLoader({\n              url: verificationMethod\n            });\n            verificationMethodDocuments.push(verificationMethodDocument);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "_CJfuGhkvCVMClYsEab8x",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/40-jcs-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 67452,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 130,
              "_error": null,
              "state": "failed",
              "err": {
                "response": {},
                "request": {},
                "options": {
                  "headers": {},
                  "body": "{\"credential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\"],\"id\":\"urn:uuid:36d7ca85-937b-4ae1-8aad-ebd6e1a51b61\",\"type\":[\"VerifiableCredential\"],\"issuer\":\"did:key:z6MkwMaVueYP9pYSTKxtRSMzgzsSkpx1wrhwdq8MEHFxtHdu\",\"issuanceDate\":\"2020-03-16T22:37:26.544Z\",\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\"}},\"options\":{\"type\":\"DataIntegrityProof\",\"cryptosuite\":\"eddsa-jcs-2022\"}}",
                  "method": "POST",
                  "json": {
                    "credential": {
                      "@context": [
                        "https://www.w3.org/2018/credentials/v1"
                      ],
                      "id": "urn:uuid:36d7ca85-937b-4ae1-8aad-ebd6e1a51b61",
                      "type": [
                        "VerifiableCredential"
                      ],
                      "issuer": "did:key:z6MkwMaVueYP9pYSTKxtRSMzgzsSkpx1wrhwdq8MEHFxtHdu",
                      "issuanceDate": "2020-03-16T22:37:26.544Z",
                      "credentialSubject": {
                        "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                      }
                    },
                    "options": {
                      "type": "DataIntegrityProof",
                      "cryptosuite": "eddsa-jcs-2022"
                    }
                  },
                  "agent": {
                    "_events": {},
                    "_eventsCount": 2,
                    "defaultPort": 443,
                    "protocol": "https:",
                    "options": {
                      "rejectUnauthorized": false,
                      "noDelay": true,
                      "path": null
                    },
                    "requests": {},
                    "sockets": {},
                    "freeSockets": {},
                    "keepAliveMsecs": 1000,
                    "keepAlive": false,
                    "maxSockets": null,
                    "maxFreeSockets": 256,
                    "scheduling": "lifo",
                    "maxTotalSockets": null,
                    "totalSocketCount": 0,
                    "maxCachedSessions": 100,
                    "_sessionCache": {
                      "map": {},
                      "list": []
                    }
                  },
                  "hooks": {
                    "beforeRequest": [],
                    "beforeRetry": [],
                    "afterResponse": [],
                    "beforeError": []
                  },
                  "prefixUrl": "",
                  "retry": {
                    "limit": 2,
                    "methods": [
                      "get",
                      "put",
                      "head",
                      "delete",
                      "options",
                      "trace"
                    ],
                    "statusCodes": [
                      408,
                      413,
                      429,
                      500,
                      502,
                      503,
                      504
                    ],
                    "afterStatusCodes": [
                      413,
                      429,
                      503
                    ],
                    "maxRetryAfter": null,
                    "backoffLimit": null
                  },
                  "throwHttpErrors": true,
                  "timeout": 10000,
                  "signal": {},
                  "duplex": "half"
                },
                "name": "HTTPError",
                "requestUrl": "https://vc.opsec.id/credentials/issue",
                "status": 422,
                "data": {
                  "detail": [
                    {
                      "type": "assertion_error",
                      "loc": [
                        "body",
                        "credential",
                        "id"
                      ],
                      "msg": "Assertion failed, ",
                      "input": "urn:uuid:36d7ca85-937b-4ae1-8aad-ebd6e1a51b61",
                      "ctx": null
                    },
                    {
                      "type": "assertion_error",
                      "loc": [
                        "body",
                        "credential",
                        "@context"
                      ],
                      "msg": "Assertion failed, ",
                      "input": [
                        "https://www.w3.org/2018/credentials/v1"
                      ],
                      "ctx": null
                    }
                  ]
                }
              }
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "nUMhwgVykgHmvgxxQVYpe",
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/40-jcs-create.js",
          "_testId": "urn:uuid:d7b9c962-f79d-40a1-8dd7-c4fe7d8e1a47"
        },
        {
          "title": "bovine",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "The field \"cryptosuite\" MUST be \"eddsa-jcs-2022\".",
              "body": "function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          proofs.some(\n            proof => proof?.cryptosuite === cryptosuite\n          ).should.equal(true, 'Expected at least one proof to have ' +\n            '\"cryptosuite\" with the value \"eddsa-jcs-2022\".');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/40-jcs-create.js",
              "parent": "qx81O67SaZuMPoZoZVuR5",
              "ctx": null,
              "_testId": "urn:uuid:3e72fd6e-9f98-4a6e-9950-3d38bf0bcd84",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine",
                "rowId": "The field \"cryptosuite\" MUST be \"eddsa-jcs-2022\"."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Dereferencing the \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
              "body": "function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          verificationMethodDocuments.some(\n            verificationMethodDocument =>\n              verificationMethodDocument?.type === 'Multikey'\n          ).should.equal(true, 'Expected at least one proof to have \"type\" ' +\n            'property value \"Multikey\".');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/40-jcs-create.js",
              "parent": "qx81O67SaZuMPoZoZVuR5",
              "ctx": null,
              "_testId": "urn:uuid:f8cd528d-b378-47ff-83c8-2f00bf7f2fdd",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine",
                "rowId": "Dereferencing the \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          verificationMethodDocuments.some(\n            verificationMethodDocument =>\n              verificationMethodDocument?.type === 'Multikey'\n          ).should.equal(true, 'Expected at least one proof to have \"type\" ' +\n            'property value \"Multikey\".'\n          );\n          const controllerDocuments = [];\n          for(const verificationMethodDocument of verificationMethodDocuments) {\n            const controllerDocument = await documentLoader({\n              url: verificationMethodDocument.controller\n            });\n            controllerDocuments.push(controllerDocument);\n          }\n          proofs.some(\n            proof => controllerDocuments.some(controllerDocument =>\n              controllerDocument.hasOwnProperty(proof.proofPurpose))\n          ).should.equal(true, 'Expected \"proof.proofPurpose\" field ' +\n             'to match the verification method controller.'\n          );\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/40-jcs-create.js",
              "parent": "qx81O67SaZuMPoZoZVuR5",
              "ctx": null,
              "_testId": "urn:uuid:3323d9d7-dac6-40a4-97c5-cd24edb281f6",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine",
                "rowId": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 67687,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "The \"publicKeyMultibase\" value of the verification method MUST be 34 bytes in length and starts with the base-58-btc prefix (z).",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          for(const verificationMethodDocument of verificationMethodDocuments) {\n            const multibase = 'z';\n            const {publicKeyMultibase} = verificationMethodDocument;\n            const isMultibaseEncoded =\n              publicKeyMultibase.startsWith(multibase) &&\n                shouldBeBs58(publicKeyMultibase);\n            isMultibaseEncoded.should.equal(\n              true,\n              'Expected \"publicKeyMultibase\" value of the verification ' +\n              'method to be multibase base58-btc encoded value'\n            );\n            const publicKeyMultibaseBytes = bs58Decode({\n              id: publicKeyMultibase\n            });\n            publicKeyMultibaseBytes.byteLength.should.equal(34, 'Expected ' +\n              '\"publicKeyMultibase\" value of the verification method to ' +\n              'be 34 bytes in length.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/40-jcs-create.js",
              "parent": "qx81O67SaZuMPoZoZVuR5",
              "ctx": null,
              "_testId": "urn:uuid:fed79fdc-ba0e-4faa-9818-7c410cfd32df",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine",
                "rowId": "The \"publicKeyMultibase\" value of the verification method MUST be 34 bytes in length and starts with the base-58-btc prefix (z)."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 67687,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proofValue\" field when decoded to raw bytes, MUST be 64 bytes in length if the associated public key is 32 bytes or 114 bytes in length if the public key is 57 bytes.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          should.exist(issuedVc, 'Expected issuer to have issued a ' +\n            'credential.');\n          should.exist(proofs, 'Expected credential to have a proof.');\n          const eddsa2022Proofs = proofs.filter(\n            proof => proof?.cryptosuite === cryptosuite);\n          eddsa2022Proofs.length.should.be.gte(1, 'Expected at least one ' +\n            'eddsa-jcs-2022 cryptosuite.');\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.proofValue, 'Expected a proof value on ' +\n              'the proof.');\n            const valueBytes = bs58Decode({id: proof.proofValue});\n            should.exist(proof.verificationMethod);\n            const vmBytes = await getPublicKeyBytes({\n              did: proof.verificationMethod});\n            vmBytes.byteLength.should.be.oneOf([32, 57], 'Expected public ' +\n              'key length to be either 32 or 57 bytes.');\n            if(vmBytes.byteLength === 32) {\n              valueBytes.byteLength.should.equal(64, 'Expected 64 byte ' +\n                'proofValue for 32 byte key.');\n            } else {\n              valueBytes.byteLength.should.equal(114, 'Expected 114 byte ' +\n                'proofValue for 57 byte key.');\n            }\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/40-jcs-create.js",
              "parent": "qx81O67SaZuMPoZoZVuR5",
              "ctx": null,
              "_testId": "urn:uuid:ab2d5552-df62-4d0a-82df-5620db6156d6",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine",
                "rowId": "\"proofValue\" field when decoded to raw bytes, MUST be 64 bytes in length if the associated public key is 32 bytes or 114 bytes in length if the public key is 57 bytes."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 67687,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "\"proof\" MUST verify when using a conformant verifier.",
              "body": "async function() {\n            this.test.cell = {columnId, rowId: this.test.title};\n            should.exist(verifier, 'Expected implementation to have a VC ' +\n              'API compatible verifier.');\n            const {result, error} = await verifier.post({json: {\n              verifiableCredential: issuedVc,\n              options: {checks: ['proof']}\n            }});\n            should.not.exist(error, 'Expected verifier to not error.');\n            should.exist(result, 'Expected verifier to return a result.');\n            result.status.should.not.equal(400, 'Expected status code to not ' +\n              'be 400.');\n            result.status.should.equal(200, 'Expected status code to be 200.');\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/40-jcs-create.js",
              "parent": "qx81O67SaZuMPoZoZVuR5",
              "ctx": null,
              "_testId": "urn:uuid:a2c6c858-1832-4ade-bfb0-426a08a91d7d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine",
                "rowId": "\"proof\" MUST verify when using a conformant verifier."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 67687,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 94,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [
            {
              "title": "\"before all\" hook in \"bovine\"",
              "body": "async function() {\n          issuedVc = await createInitialVc({issuer, vc: validVc});\n          proofs = Array.isArray(issuedVc?.proof) ?\n            issuedVc.proof : [issuedVc?.proof];\n          const verificationMethods = proofs.map(\n            proof => proof.verificationMethod);\n          for(const verificationMethod of verificationMethods) {\n            const verificationMethodDocument = await documentLoader({\n              url: verificationMethod\n            });\n            verificationMethodDocuments.push(verificationMethodDocument);\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "type": "hook",
              "parent": "qx81O67SaZuMPoZoZVuR5",
              "ctx": null,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/40-jcs-create.js",
              "originalTitle": "\"before all\" hook",
              "_events": {},
              "_eventsCount": 1,
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 67583,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 103,
              "_error": null
            }
          ],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "nUMhwgVykgHmvgxxQVYpe",
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/40-jcs-create.js",
          "_testId": "urn:uuid:7e016da5-3600-469b-85c0-c0c3c8fe1209"
        }
      ],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "mdY40N6bPP05J98Lfi_Fb",
      "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/40-jcs-create.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Implementation",
      "_testId": "urn:uuid:55d48c52-a28c-46b1-999a-49f225f48c4c",
      "columns": [
        "ACA-py",
        "Grotto Networking",
        "OpSecId",
        "bovine"
      ],
      "rows": [
        {
          "id": "The field \"cryptosuite\" MUST be \"eddsa-jcs-2022\".",
          "cells": [
            {
              "cell": {
                "rowId": "The field \"cryptosuite\" MUST be \"eddsa-jcs-2022\".",
                "colId": "ACA-py"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            },
            {
              "type": "test",
              "title": "The field \"cryptosuite\" MUST be \"eddsa-jcs-2022\".",
              "body": "function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          proofs.some(\n            proof => proof?.cryptosuite === cryptosuite\n          ).should.equal(true, 'Expected at least one proof to have ' +\n            '\"cryptosuite\" with the value \"eddsa-jcs-2022\".');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/40-jcs-create.js",
              "parent": "iMVsgX26mV5DBVFsid76D",
              "ctx": null,
              "_testId": "urn:uuid:03ab72d3-da88-454a-862d-080928ce2401",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The field \"cryptosuite\" MUST be \"eddsa-jcs-2022\"."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "cell": {
                "rowId": "The field \"cryptosuite\" MUST be \"eddsa-jcs-2022\".",
                "colId": "OpSecId"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            },
            {
              "type": "test",
              "title": "The field \"cryptosuite\" MUST be \"eddsa-jcs-2022\".",
              "body": "function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          proofs.some(\n            proof => proof?.cryptosuite === cryptosuite\n          ).should.equal(true, 'Expected at least one proof to have ' +\n            '\"cryptosuite\" with the value \"eddsa-jcs-2022\".');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/40-jcs-create.js",
              "parent": "qx81O67SaZuMPoZoZVuR5",
              "ctx": null,
              "_testId": "urn:uuid:3e72fd6e-9f98-4a6e-9950-3d38bf0bcd84",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine",
                "rowId": "The field \"cryptosuite\" MUST be \"eddsa-jcs-2022\"."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "Dereferencing the \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
          "cells": [
            {
              "cell": {
                "rowId": "Dereferencing the \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
                "colId": "ACA-py"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            },
            {
              "type": "test",
              "title": "Dereferencing the \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
              "body": "function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          verificationMethodDocuments.some(\n            verificationMethodDocument =>\n              verificationMethodDocument?.type === 'Multikey'\n          ).should.equal(true, 'Expected at least one proof to have \"type\" ' +\n            'property value \"Multikey\".');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/40-jcs-create.js",
              "parent": "iMVsgX26mV5DBVFsid76D",
              "ctx": null,
              "_testId": "urn:uuid:b287dca1-3090-4b8e-883f-95bf1efe2850",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "Dereferencing the \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "cell": {
                "rowId": "Dereferencing the \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
                "colId": "OpSecId"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            },
            {
              "type": "test",
              "title": "Dereferencing the \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value.",
              "body": "function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          verificationMethodDocuments.some(\n            verificationMethodDocument =>\n              verificationMethodDocument?.type === 'Multikey'\n          ).should.equal(true, 'Expected at least one proof to have \"type\" ' +\n            'property value \"Multikey\".');\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/40-jcs-create.js",
              "parent": "qx81O67SaZuMPoZoZVuR5",
              "ctx": null,
              "_testId": "urn:uuid:f8cd528d-b378-47ff-83c8-2f00bf7f2fdd",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine",
                "rowId": "Dereferencing the \"verificationMethod\" MUST result in an object containing a type property with \"Multikey\" value."
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
          "cells": [
            {
              "cell": {
                "rowId": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
                "colId": "ACA-py"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            },
            {
              "type": "test",
              "title": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          verificationMethodDocuments.some(\n            verificationMethodDocument =>\n              verificationMethodDocument?.type === 'Multikey'\n          ).should.equal(true, 'Expected at least one proof to have \"type\" ' +\n            'property value \"Multikey\".'\n          );\n          const controllerDocuments = [];\n          for(const verificationMethodDocument of verificationMethodDocuments) {\n            const controllerDocument = await documentLoader({\n              url: verificationMethodDocument.controller\n            });\n            controllerDocuments.push(controllerDocument);\n          }\n          proofs.some(\n            proof => controllerDocuments.some(controllerDocument =>\n              controllerDocument.hasOwnProperty(proof.proofPurpose))\n          ).should.equal(true, 'Expected \"proof.proofPurpose\" field ' +\n             'to match the verification method controller.'\n          );\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/40-jcs-create.js",
              "parent": "iMVsgX26mV5DBVFsid76D",
              "ctx": null,
              "_testId": "urn:uuid:8ae200b4-78d5-44e2-91b4-dbfd52682cf5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 67375,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "cell": {
                "rowId": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
                "colId": "OpSecId"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            },
            {
              "type": "test",
              "title": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          verificationMethodDocuments.some(\n            verificationMethodDocument =>\n              verificationMethodDocument?.type === 'Multikey'\n          ).should.equal(true, 'Expected at least one proof to have \"type\" ' +\n            'property value \"Multikey\".'\n          );\n          const controllerDocuments = [];\n          for(const verificationMethodDocument of verificationMethodDocuments) {\n            const controllerDocument = await documentLoader({\n              url: verificationMethodDocument.controller\n            });\n            controllerDocuments.push(controllerDocument);\n          }\n          proofs.some(\n            proof => controllerDocuments.some(controllerDocument =>\n              controllerDocument.hasOwnProperty(proof.proofPurpose))\n          ).should.equal(true, 'Expected \"proof.proofPurpose\" field ' +\n             'to match the verification method controller.'\n          );\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/40-jcs-create.js",
              "parent": "qx81O67SaZuMPoZoZVuR5",
              "ctx": null,
              "_testId": "urn:uuid:3323d9d7-dac6-40a4-97c5-cd24edb281f6",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine",
                "rowId": "The \"proof.proofPurpose\" field MUST match the verification relationship expressed by the verification method controller."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 67687,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "The \"publicKeyMultibase\" value of the verification method MUST be 34 bytes in length and starts with the base-58-btc prefix (z).",
          "cells": [
            {
              "cell": {
                "rowId": "The \"publicKeyMultibase\" value of the verification method MUST be 34 bytes in length and starts with the base-58-btc prefix (z).",
                "colId": "ACA-py"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            },
            {
              "type": "test",
              "title": "The \"publicKeyMultibase\" value of the verification method MUST be 34 bytes in length and starts with the base-58-btc prefix (z).",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          for(const verificationMethodDocument of verificationMethodDocuments) {\n            const multibase = 'z';\n            const {publicKeyMultibase} = verificationMethodDocument;\n            const isMultibaseEncoded =\n              publicKeyMultibase.startsWith(multibase) &&\n                shouldBeBs58(publicKeyMultibase);\n            isMultibaseEncoded.should.equal(\n              true,\n              'Expected \"publicKeyMultibase\" value of the verification ' +\n              'method to be multibase base58-btc encoded value'\n            );\n            const publicKeyMultibaseBytes = bs58Decode({\n              id: publicKeyMultibase\n            });\n            publicKeyMultibaseBytes.byteLength.should.equal(34, 'Expected ' +\n              '\"publicKeyMultibase\" value of the verification method to ' +\n              'be 34 bytes in length.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/40-jcs-create.js",
              "parent": "iMVsgX26mV5DBVFsid76D",
              "ctx": null,
              "_testId": "urn:uuid:8ea2f847-7132-4441-b017-69900c296965",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "The \"publicKeyMultibase\" value of the verification method MUST be 34 bytes in length and starts with the base-58-btc prefix (z)."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 67375,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            },
            {
              "cell": {
                "rowId": "The \"publicKeyMultibase\" value of the verification method MUST be 34 bytes in length and starts with the base-58-btc prefix (z).",
                "colId": "OpSecId"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            },
            {
              "type": "test",
              "title": "The \"publicKeyMultibase\" value of the verification method MUST be 34 bytes in length and starts with the base-58-btc prefix (z).",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          verificationMethodDocuments.should.not.eql([], 'Expected ' +\n            'at least one \"verificationMethodDocument\".');\n          for(const verificationMethodDocument of verificationMethodDocuments) {\n            const multibase = 'z';\n            const {publicKeyMultibase} = verificationMethodDocument;\n            const isMultibaseEncoded =\n              publicKeyMultibase.startsWith(multibase) &&\n                shouldBeBs58(publicKeyMultibase);\n            isMultibaseEncoded.should.equal(\n              true,\n              'Expected \"publicKeyMultibase\" value of the verification ' +\n              'method to be multibase base58-btc encoded value'\n            );\n            const publicKeyMultibaseBytes = bs58Decode({\n              id: publicKeyMultibase\n            });\n            publicKeyMultibaseBytes.byteLength.should.equal(34, 'Expected ' +\n              '\"publicKeyMultibase\" value of the verification method to ' +\n              'be 34 bytes in length.');\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/40-jcs-create.js",
              "parent": "qx81O67SaZuMPoZoZVuR5",
              "ctx": null,
              "_testId": "urn:uuid:fed79fdc-ba0e-4faa-9818-7c410cfd32df",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine",
                "rowId": "The \"publicKeyMultibase\" value of the verification method MUST be 34 bytes in length and starts with the base-58-btc prefix (z)."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 67687,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "\"proofValue\" field when decoded to raw bytes, MUST be 64 bytes in length if the associated public key is 32 bytes or 114 bytes in length if the public key is 57 bytes.",
          "cells": [
            {
              "cell": {
                "rowId": "\"proofValue\" field when decoded to raw bytes, MUST be 64 bytes in length if the associated public key is 32 bytes or 114 bytes in length if the public key is 57 bytes.",
                "colId": "ACA-py"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            },
            {
              "type": "test",
              "title": "\"proofValue\" field when decoded to raw bytes, MUST be 64 bytes in length if the associated public key is 32 bytes or 114 bytes in length if the public key is 57 bytes.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          should.exist(issuedVc, 'Expected issuer to have issued a ' +\n            'credential.');\n          should.exist(proofs, 'Expected credential to have a proof.');\n          const eddsa2022Proofs = proofs.filter(\n            proof => proof?.cryptosuite === cryptosuite);\n          eddsa2022Proofs.length.should.be.gte(1, 'Expected at least one ' +\n            'eddsa-jcs-2022 cryptosuite.');\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.proofValue, 'Expected a proof value on ' +\n              'the proof.');\n            const valueBytes = bs58Decode({id: proof.proofValue});\n            should.exist(proof.verificationMethod);\n            const vmBytes = await getPublicKeyBytes({\n              did: proof.verificationMethod});\n            vmBytes.byteLength.should.be.oneOf([32, 57], 'Expected public ' +\n              'key length to be either 32 or 57 bytes.');\n            if(vmBytes.byteLength === 32) {\n              valueBytes.byteLength.should.equal(64, 'Expected 64 byte ' +\n                'proofValue for 32 byte key.');\n            } else {\n              valueBytes.byteLength.should.equal(114, 'Expected 114 byte ' +\n                'proofValue for 57 byte key.');\n            }\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/40-jcs-create.js",
              "parent": "iMVsgX26mV5DBVFsid76D",
              "ctx": null,
              "_testId": "urn:uuid:87a03a37-3393-4dbc-83d1-52b5901c65ae",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "\"proofValue\" field when decoded to raw bytes, MUST be 64 bytes in length if the associated public key is 32 bytes or 114 bytes in length if the public key is 57 bytes."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 67375,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "passed",
              "speed": "fast"
            },
            {
              "cell": {
                "rowId": "\"proofValue\" field when decoded to raw bytes, MUST be 64 bytes in length if the associated public key is 32 bytes or 114 bytes in length if the public key is 57 bytes.",
                "colId": "OpSecId"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            },
            {
              "type": "test",
              "title": "\"proofValue\" field when decoded to raw bytes, MUST be 64 bytes in length if the associated public key is 32 bytes or 114 bytes in length if the public key is 57 bytes.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          should.exist(issuedVc, 'Expected issuer to have issued a ' +\n            'credential.');\n          should.exist(proofs, 'Expected credential to have a proof.');\n          const eddsa2022Proofs = proofs.filter(\n            proof => proof?.cryptosuite === cryptosuite);\n          eddsa2022Proofs.length.should.be.gte(1, 'Expected at least one ' +\n            'eddsa-jcs-2022 cryptosuite.');\n          for(const proof of eddsa2022Proofs) {\n            should.exist(proof.proofValue, 'Expected a proof value on ' +\n              'the proof.');\n            const valueBytes = bs58Decode({id: proof.proofValue});\n            should.exist(proof.verificationMethod);\n            const vmBytes = await getPublicKeyBytes({\n              did: proof.verificationMethod});\n            vmBytes.byteLength.should.be.oneOf([32, 57], 'Expected public ' +\n              'key length to be either 32 or 57 bytes.');\n            if(vmBytes.byteLength === 32) {\n              valueBytes.byteLength.should.equal(64, 'Expected 64 byte ' +\n                'proofValue for 32 byte key.');\n            } else {\n              valueBytes.byteLength.should.equal(114, 'Expected 114 byte ' +\n                'proofValue for 57 byte key.');\n            }\n          }\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/40-jcs-create.js",
              "parent": "qx81O67SaZuMPoZoZVuR5",
              "ctx": null,
              "_testId": "urn:uuid:ab2d5552-df62-4d0a-82df-5620db6156d6",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine",
                "rowId": "\"proofValue\" field when decoded to raw bytes, MUST be 64 bytes in length if the associated public key is 32 bytes or 114 bytes in length if the public key is 57 bytes."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 67687,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "passed",
              "speed": "fast"
            }
          ]
        },
        {
          "id": "\"proof\" MUST verify when using a conformant verifier.",
          "cells": [
            {
              "cell": {
                "rowId": "\"proof\" MUST verify when using a conformant verifier.",
                "colId": "ACA-py"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            },
            {
              "type": "test",
              "title": "\"proof\" MUST verify when using a conformant verifier.",
              "body": "async function() {\n            this.test.cell = {columnId, rowId: this.test.title};\n            should.exist(verifier, 'Expected implementation to have a VC ' +\n              'API compatible verifier.');\n            const {result, error} = await verifier.post({json: {\n              verifiableCredential: issuedVc,\n              options: {checks: ['proof']}\n            }});\n            should.not.exist(error, 'Expected verifier to not error.');\n            should.exist(result, 'Expected verifier to return a result.');\n            result.status.should.not.equal(400, 'Expected status code to not ' +\n              'be 400.');\n            result.status.should.equal(200, 'Expected status code to be 200.');\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/40-jcs-create.js",
              "parent": "iMVsgX26mV5DBVFsid76D",
              "ctx": null,
              "_testId": "urn:uuid:3ffbd527-2c53-4c40-81b6-ee664b8e4f5c",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "\"proof\" MUST verify when using a conformant verifier."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 67376,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 76,
              "state": "passed",
              "speed": "slow"
            },
            {
              "cell": {
                "rowId": "\"proof\" MUST verify when using a conformant verifier.",
                "colId": "OpSecId"
              },
              "state": "pending",
              "err": {
                "message": "Test skipped."
              }
            },
            {
              "type": "test",
              "title": "\"proof\" MUST verify when using a conformant verifier.",
              "body": "async function() {\n            this.test.cell = {columnId, rowId: this.test.title};\n            should.exist(verifier, 'Expected implementation to have a VC ' +\n              'API compatible verifier.');\n            const {result, error} = await verifier.post({json: {\n              verifiableCredential: issuedVc,\n              options: {checks: ['proof']}\n            }});\n            should.not.exist(error, 'Expected verifier to not error.');\n            should.exist(result, 'Expected verifier to return a result.');\n            result.status.should.not.equal(400, 'Expected status code to not ' +\n              'be 400.');\n            result.status.should.equal(200, 'Expected status code to be 200.');\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/40-jcs-create.js",
              "parent": "qx81O67SaZuMPoZoZVuR5",
              "ctx": null,
              "_testId": "urn:uuid:a2c6c858-1832-4ade-bfb0-426a08a91d7d",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine",
                "rowId": "\"proof\" MUST verify when using a conformant verifier."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 67687,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 94,
              "state": "passed",
              "speed": "slow"
            }
          ]
        }
      ]
    },
    {
      "title": "eddsa-jcs-2022 (verifier)",
      "ctx": null,
      "suites": [
        {
          "title": "ACA-py",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "verifies a valid eddsa-jcs-2022 proof.",
              "body": "async function() {\n            this.test.cell = {columnId, rowId: this.test.title};\n            await verificationSuccess({credential: issuedVc, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/50-jcs-verify.js",
              "parent": "BTJdBRYNLMu50bslSqXuz",
              "ctx": null,
              "_testId": "urn:uuid:295c84d2-5db0-4dfd-b1db-39b94db7fb82",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "ACA-py",
                "rowId": "verifies a valid eddsa-jcs-2022 proof."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 67880,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 31,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected a result from verifier.: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected a result from verifier.: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at verificationSuccess (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/assertions.js:66:10)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/50-jcs-verify.js:57:13)"
              }
            },
            {
              "type": "test",
              "title": "If the \"proofValue\" field, when decoded to raw bytes, is not 64 bytes in length if the associated public key is 32 bytes in length, or 114 bytes in length if the public key is 57 bytes in length, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const credential = credentials.clone('issuedVc');\n          const proofBytes = bs58Decode({id: credential.proof.proofValue});\n          const randomBytes = new Uint8Array(32).map(\n            () => Math.floor(Math.random() * 255));\n          credential.proof.proofValue = bs58Encode(\n            new Uint8Array([...proofBytes, ...randomBytes]));\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/50-jcs-verify.js",
              "parent": "BTJdBRYNLMu50bslSqXuz",
              "ctx": null,
              "_testId": "urn:uuid:551a81e6-9a89-4f17-a0fc-0535a314fa5f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "ACA-py",
                "rowId": "If the \"proofValue\" field, when decoded to raw bytes, is not 64 bytes in length if the associated public key is 32 bytes in length, or 114 bytes in length if the public key is 57 bytes in length, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 67912,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 49,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no result from verifier.: expected Response { status: 200, statusText: 'OK', headers: Headers { 'content-length': '633', 'content-type': 'application/json; charset=utf-8', date: 'Sun, 13 Oct 2024 05:07:31 GMT', server: 'Python/3.12 aiohttp/3.10.9', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no result from verifier.: expected Response { status: 200, statusText: 'OK', headers: Headers { 'content-length': '633', 'content-type': 'application/json; charset=utf-8', date: 'Sun, 13 Oct 2024 05:07:31 GMT', server: 'Python/3.12 aiohttp/3.10.9', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationFail (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/assertions.js:49:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/50-jcs-verify.js:70:11)"
              }
            },
            {
              "type": "test",
              "title": "fails verification when credential is not canonicalized correctly.",
              "body": "async function() {\n            this.test.cell = {columnId, rowId: this.test.title};\n            const credential = credentials.clone('canonizeUnknown');\n            await verificationFail({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/50-jcs-verify.js",
              "parent": "BTJdBRYNLMu50bslSqXuz",
              "ctx": null,
              "_testId": "urn:uuid:77537cc3-412c-41fd-bc34-760487aa6fa3",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "ACA-py",
                "rowId": "fails verification when credential is not canonicalized correctly."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 67961,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 35,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no result from verifier.: expected Response { status: 200, statusText: 'OK', headers: Headers { 'content-length': '633', 'content-type': 'application/json; charset=utf-8', date: 'Sun, 13 Oct 2024 05:07:31 GMT', server: 'Python/3.12 aiohttp/3.10.9', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no result from verifier.: expected Response { status: 200, statusText: 'OK', headers: Headers { 'content-length': '633', 'content-type': 'application/json; charset=utf-8', date: 'Sun, 13 Oct 2024 05:07:31 GMT', server: 'Python/3.12 aiohttp/3.10.9', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationFail (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/assertions.js:49:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/50-jcs-verify.js:76:13)"
              }
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"eddsa-jcs-2022\", an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const credential = credentials.clone('incorrectCryptosuite');\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/50-jcs-verify.js",
              "parent": "BTJdBRYNLMu50bslSqXuz",
              "ctx": null,
              "_testId": "urn:uuid:0ec6baa0-6e3f-4205-8a73-a8c3141dca6a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "ACA-py",
                "rowId": "If the \"cryptosuite\" field is not the string \"eddsa-jcs-2022\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 67997,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 32,
              "state": "passed",
              "speed": "fast"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "d0WtN_eCiJGxfOBzrEIx8",
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/50-jcs-verify.js",
          "_testId": "urn:uuid:06871c3d-2942-41d3-83bc-bf453c7a97e8"
        },
        {
          "title": "Grotto Networking",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "verifies a valid eddsa-jcs-2022 proof.",
              "body": "async function() {\n            this.test.cell = {columnId, rowId: this.test.title};\n            await verificationSuccess({credential: issuedVc, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/50-jcs-verify.js",
              "parent": "4h5sJCHviXQQR605vCHDt",
              "ctx": null,
              "_testId": "urn:uuid:5d845e9b-2e3a-465a-8220-5956178f05a4",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "verifies a valid eddsa-jcs-2022 proof."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 68029,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 655,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected a result from verifier.: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected a result from verifier.: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at verificationSuccess (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/assertions.js:66:10)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/50-jcs-verify.js:57:13)"
              }
            },
            {
              "type": "test",
              "title": "If the \"proofValue\" field, when decoded to raw bytes, is not 64 bytes in length if the associated public key is 32 bytes in length, or 114 bytes in length if the public key is 57 bytes in length, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const credential = credentials.clone('issuedVc');\n          const proofBytes = bs58Decode({id: credential.proof.proofValue});\n          const randomBytes = new Uint8Array(32).map(\n            () => Math.floor(Math.random() * 255));\n          credential.proof.proofValue = bs58Encode(\n            new Uint8Array([...proofBytes, ...randomBytes]));\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/50-jcs-verify.js",
              "parent": "4h5sJCHviXQQR605vCHDt",
              "ctx": null,
              "_testId": "urn:uuid:76dbe4d0-fba1-403a-8206-8d77da1bb961",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If the \"proofValue\" field, when decoded to raw bytes, is not 64 bytes in length if the associated public key is 32 bytes in length, or 114 bytes in length if the public key is 57 bytes in length, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 68684,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 72,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "fails verification when credential is not canonicalized correctly.",
              "body": "async function() {\n            this.test.cell = {columnId, rowId: this.test.title};\n            const credential = credentials.clone('canonizeUnknown');\n            await verificationFail({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/50-jcs-verify.js",
              "parent": "4h5sJCHviXQQR605vCHDt",
              "ctx": null,
              "_testId": "urn:uuid:6ada7baf-9bb5-4810-9939-05fcbaa66368",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "fails verification when credential is not canonicalized correctly."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 68756,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 77,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"eddsa-jcs-2022\", an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const credential = credentials.clone('incorrectCryptosuite');\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/50-jcs-verify.js",
              "parent": "4h5sJCHviXQQR605vCHDt",
              "ctx": null,
              "_testId": "urn:uuid:71d0e5b1-c6b7-4c66-abc3-b4138ca054a6",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If the \"cryptosuite\" field is not the string \"eddsa-jcs-2022\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 68834,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 71,
              "state": "passed",
              "speed": "medium"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "d0WtN_eCiJGxfOBzrEIx8",
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/50-jcs-verify.js",
          "_testId": "urn:uuid:7fdabab3-fade-446f-9732-a99cb2dae5af"
        },
        {
          "title": "bovine",
          "ctx": null,
          "suites": [],
          "tests": [
            {
              "type": "test",
              "title": "verifies a valid eddsa-jcs-2022 proof.",
              "body": "async function() {\n            this.test.cell = {columnId, rowId: this.test.title};\n            await verificationSuccess({credential: issuedVc, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/50-jcs-verify.js",
              "parent": "RjUSc_USXs9BRlpRA1rCn",
              "ctx": null,
              "_testId": "urn:uuid:8693dcd6-a133-4d3a-afa6-2f3901c845b0",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine",
                "rowId": "verifies a valid eddsa-jcs-2022 proof."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 68905,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 95,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"proofValue\" field, when decoded to raw bytes, is not 64 bytes in length if the associated public key is 32 bytes in length, or 114 bytes in length if the public key is 57 bytes in length, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const credential = credentials.clone('issuedVc');\n          const proofBytes = bs58Decode({id: credential.proof.proofValue});\n          const randomBytes = new Uint8Array(32).map(\n            () => Math.floor(Math.random() * 255));\n          credential.proof.proofValue = bs58Encode(\n            new Uint8Array([...proofBytes, ...randomBytes]));\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/50-jcs-verify.js",
              "parent": "RjUSc_USXs9BRlpRA1rCn",
              "ctx": null,
              "_testId": "urn:uuid:aa63a968-2fa0-4890-8a1c-8f3297b56a39",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine",
                "rowId": "If the \"proofValue\" field, when decoded to raw bytes, is not 64 bytes in length if the associated public key is 32 bytes in length, or 114 bytes in length if the public key is 57 bytes in length, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 69001,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 101,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "fails verification when credential is not canonicalized correctly.",
              "body": "async function() {\n            this.test.cell = {columnId, rowId: this.test.title};\n            const credential = credentials.clone('canonizeUnknown');\n            await verificationFail({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/50-jcs-verify.js",
              "parent": "RjUSc_USXs9BRlpRA1rCn",
              "ctx": null,
              "_testId": "urn:uuid:b6b3221a-dfeb-4e2a-941f-c5c74fc2cdea",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine",
                "rowId": "fails verification when credential is not canonicalized correctly."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 69103,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 99,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"eddsa-jcs-2022\", an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const credential = credentials.clone('incorrectCryptosuite');\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/50-jcs-verify.js",
              "parent": "RjUSc_USXs9BRlpRA1rCn",
              "ctx": null,
              "_testId": "urn:uuid:574caf25-99ca-4fcf-b3db-10280b60e1f5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine",
                "rowId": "If the \"cryptosuite\" field is not the string \"eddsa-jcs-2022\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 69202,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 95,
              "state": "passed",
              "speed": "slow"
            }
          ],
          "root": false,
          "pending": false,
          "_retries": -1,
          "_beforeEach": [],
          "_beforeAll": [],
          "_afterEach": [],
          "_afterAll": [],
          "_timeout": 15000,
          "_slow": 75,
          "_bail": false,
          "_onlyTests": [],
          "_onlySuites": [],
          "delayed": false,
          "parent": "d0WtN_eCiJGxfOBzrEIx8",
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/50-jcs-verify.js",
          "_testId": "urn:uuid:5d4d9339-f60b-48a5-9d4d-093fd4ef26af"
        }
      ],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "1lkWkNA3Xwny3S5jptqTX",
      "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/50-jcs-verify.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Test Name",
      "columnLabel": "Verifier",
      "_testId": "urn:uuid:4f48d6c3-3676-496b-a2f9-af564adc77a3",
      "columns": [
        "ACA-py",
        "Grotto Networking",
        "bovine"
      ],
      "rows": [
        {
          "id": "verifies a valid eddsa-jcs-2022 proof.",
          "cells": [
            {
              "type": "test",
              "title": "verifies a valid eddsa-jcs-2022 proof.",
              "body": "async function() {\n            this.test.cell = {columnId, rowId: this.test.title};\n            await verificationSuccess({credential: issuedVc, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/50-jcs-verify.js",
              "parent": "BTJdBRYNLMu50bslSqXuz",
              "ctx": null,
              "_testId": "urn:uuid:295c84d2-5db0-4dfd-b1db-39b94db7fb82",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "ACA-py",
                "rowId": "verifies a valid eddsa-jcs-2022 proof."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 67880,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 31,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected a result from verifier.: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected a result from verifier.: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at verificationSuccess (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/assertions.js:66:10)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/50-jcs-verify.js:57:13)"
              }
            },
            {
              "type": "test",
              "title": "verifies a valid eddsa-jcs-2022 proof.",
              "body": "async function() {\n            this.test.cell = {columnId, rowId: this.test.title};\n            await verificationSuccess({credential: issuedVc, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/50-jcs-verify.js",
              "parent": "4h5sJCHviXQQR605vCHDt",
              "ctx": null,
              "_testId": "urn:uuid:5d845e9b-2e3a-465a-8220-5956178f05a4",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "verifies a valid eddsa-jcs-2022 proof."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 68029,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 655,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected a result from verifier.: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected a result from verifier.: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at verificationSuccess (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/assertions.js:66:10)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/50-jcs-verify.js:57:13)"
              }
            },
            {
              "type": "test",
              "title": "verifies a valid eddsa-jcs-2022 proof.",
              "body": "async function() {\n            this.test.cell = {columnId, rowId: this.test.title};\n            await verificationSuccess({credential: issuedVc, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/50-jcs-verify.js",
              "parent": "RjUSc_USXs9BRlpRA1rCn",
              "ctx": null,
              "_testId": "urn:uuid:8693dcd6-a133-4d3a-afa6-2f3901c845b0",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine",
                "rowId": "verifies a valid eddsa-jcs-2022 proof."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 68905,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 95,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If the \"proofValue\" field, when decoded to raw bytes, is not 64 bytes in length if the associated public key is 32 bytes in length, or 114 bytes in length if the public key is 57 bytes in length, an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"proofValue\" field, when decoded to raw bytes, is not 64 bytes in length if the associated public key is 32 bytes in length, or 114 bytes in length if the public key is 57 bytes in length, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const credential = credentials.clone('issuedVc');\n          const proofBytes = bs58Decode({id: credential.proof.proofValue});\n          const randomBytes = new Uint8Array(32).map(\n            () => Math.floor(Math.random() * 255));\n          credential.proof.proofValue = bs58Encode(\n            new Uint8Array([...proofBytes, ...randomBytes]));\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/50-jcs-verify.js",
              "parent": "BTJdBRYNLMu50bslSqXuz",
              "ctx": null,
              "_testId": "urn:uuid:551a81e6-9a89-4f17-a0fc-0535a314fa5f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "ACA-py",
                "rowId": "If the \"proofValue\" field, when decoded to raw bytes, is not 64 bytes in length if the associated public key is 32 bytes in length, or 114 bytes in length if the public key is 57 bytes in length, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 67912,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 49,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no result from verifier.: expected Response { status: 200, statusText: 'OK', headers: Headers { 'content-length': '633', 'content-type': 'application/json; charset=utf-8', date: 'Sun, 13 Oct 2024 05:07:31 GMT', server: 'Python/3.12 aiohttp/3.10.9', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no result from verifier.: expected Response { status: 200, statusText: 'OK', headers: Headers { 'content-length': '633', 'content-type': 'application/json; charset=utf-8', date: 'Sun, 13 Oct 2024 05:07:31 GMT', server: 'Python/3.12 aiohttp/3.10.9', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationFail (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/assertions.js:49:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/50-jcs-verify.js:70:11)"
              }
            },
            {
              "type": "test",
              "title": "If the \"proofValue\" field, when decoded to raw bytes, is not 64 bytes in length if the associated public key is 32 bytes in length, or 114 bytes in length if the public key is 57 bytes in length, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const credential = credentials.clone('issuedVc');\n          const proofBytes = bs58Decode({id: credential.proof.proofValue});\n          const randomBytes = new Uint8Array(32).map(\n            () => Math.floor(Math.random() * 255));\n          credential.proof.proofValue = bs58Encode(\n            new Uint8Array([...proofBytes, ...randomBytes]));\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/50-jcs-verify.js",
              "parent": "4h5sJCHviXQQR605vCHDt",
              "ctx": null,
              "_testId": "urn:uuid:76dbe4d0-fba1-403a-8206-8d77da1bb961",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If the \"proofValue\" field, when decoded to raw bytes, is not 64 bytes in length if the associated public key is 32 bytes in length, or 114 bytes in length if the public key is 57 bytes in length, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 68684,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 72,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"proofValue\" field, when decoded to raw bytes, is not 64 bytes in length if the associated public key is 32 bytes in length, or 114 bytes in length if the public key is 57 bytes in length, an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const credential = credentials.clone('issuedVc');\n          const proofBytes = bs58Decode({id: credential.proof.proofValue});\n          const randomBytes = new Uint8Array(32).map(\n            () => Math.floor(Math.random() * 255));\n          credential.proof.proofValue = bs58Encode(\n            new Uint8Array([...proofBytes, ...randomBytes]));\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/50-jcs-verify.js",
              "parent": "RjUSc_USXs9BRlpRA1rCn",
              "ctx": null,
              "_testId": "urn:uuid:aa63a968-2fa0-4890-8a1c-8f3297b56a39",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine",
                "rowId": "If the \"proofValue\" field, when decoded to raw bytes, is not 64 bytes in length if the associated public key is 32 bytes in length, or 114 bytes in length if the public key is 57 bytes in length, an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 69001,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 101,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "fails verification when credential is not canonicalized correctly.",
          "cells": [
            {
              "type": "test",
              "title": "fails verification when credential is not canonicalized correctly.",
              "body": "async function() {\n            this.test.cell = {columnId, rowId: this.test.title};\n            const credential = credentials.clone('canonizeUnknown');\n            await verificationFail({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/50-jcs-verify.js",
              "parent": "BTJdBRYNLMu50bslSqXuz",
              "ctx": null,
              "_testId": "urn:uuid:77537cc3-412c-41fd-bc34-760487aa6fa3",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "ACA-py",
                "rowId": "fails verification when credential is not canonicalized correctly."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 67961,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 35,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected no result from verifier.: expected Response { status: 200, statusText: 'OK', headers: Headers { 'content-length': '633', 'content-type': 'application/json; charset=utf-8', date: 'Sun, 13 Oct 2024 05:07:31 GMT', server: 'Python/3.12 aiohttp/3.10.9', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist",
                "showDiff": false,
                "actual": {},
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected no result from verifier.: expected Response { status: 200, statusText: 'OK', headers: Headers { 'content-length': '633', 'content-type': 'application/json; charset=utf-8', date: 'Sun, 13 Oct 2024 05:07:31 GMT', server: 'Python/3.12 aiohttp/3.10.9', Authorization: '** SANITIZED TO PREVENT EXPOSING OF SECRETS ***' }, body: ReadableStream { locked: false, state: 'readable', supportsBYOB: true }, bodyUsed: false, ok: true, redirected: false, type: 'default', url: '' } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at verificationFail (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/assertions.js:49:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/50-jcs-verify.js:76:13)"
              }
            },
            {
              "type": "test",
              "title": "fails verification when credential is not canonicalized correctly.",
              "body": "async function() {\n            this.test.cell = {columnId, rowId: this.test.title};\n            const credential = credentials.clone('canonizeUnknown');\n            await verificationFail({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/50-jcs-verify.js",
              "parent": "4h5sJCHviXQQR605vCHDt",
              "ctx": null,
              "_testId": "urn:uuid:6ada7baf-9bb5-4810-9939-05fcbaa66368",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "fails verification when credential is not canonicalized correctly."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 68756,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 77,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "fails verification when credential is not canonicalized correctly.",
              "body": "async function() {\n            this.test.cell = {columnId, rowId: this.test.title};\n            const credential = credentials.clone('canonizeUnknown');\n            await verificationFail({credential, verifier});\n          }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/50-jcs-verify.js",
              "parent": "RjUSc_USXs9BRlpRA1rCn",
              "ctx": null,
              "_testId": "urn:uuid:b6b3221a-dfeb-4e2a-941f-c5c74fc2cdea",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine",
                "rowId": "fails verification when credential is not canonicalized correctly."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 69103,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 99,
              "state": "passed",
              "speed": "slow"
            }
          ]
        },
        {
          "id": "If the \"cryptosuite\" field is not the string \"eddsa-jcs-2022\", an error MUST be raised.",
          "cells": [
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"eddsa-jcs-2022\", an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const credential = credentials.clone('incorrectCryptosuite');\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/50-jcs-verify.js",
              "parent": "BTJdBRYNLMu50bslSqXuz",
              "ctx": null,
              "_testId": "urn:uuid:0ec6baa0-6e3f-4205-8a73-a8c3141dca6a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "ACA-py",
                "rowId": "If the \"cryptosuite\" field is not the string \"eddsa-jcs-2022\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 67997,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 32,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"eddsa-jcs-2022\", an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const credential = credentials.clone('incorrectCryptosuite');\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/50-jcs-verify.js",
              "parent": "4h5sJCHviXQQR605vCHDt",
              "ctx": null,
              "_testId": "urn:uuid:71d0e5b1-c6b7-4c66-abc3-b4138ca054a6",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "Grotto Networking",
                "rowId": "If the \"cryptosuite\" field is not the string \"eddsa-jcs-2022\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 68834,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 71,
              "state": "passed",
              "speed": "medium"
            },
            {
              "type": "test",
              "title": "If the \"cryptosuite\" field is not the string \"eddsa-jcs-2022\", an error MUST be raised.",
              "body": "async function() {\n          this.test.cell = {columnId, rowId: this.test.title};\n          const credential = credentials.clone('incorrectCryptosuite');\n          await verificationFail({credential, verifier});\n        }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/50-jcs-verify.js",
              "parent": "RjUSc_USXs9BRlpRA1rCn",
              "ctx": null,
              "_testId": "urn:uuid:574caf25-99ca-4fcf-b3db-10280b60e1f5",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "columnId": "bovine",
                "rowId": "If the \"cryptosuite\" field is not the string \"eddsa-jcs-2022\", an error MUST be raised."
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 69202,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 95,
              "state": "passed",
              "speed": "slow"
            }
          ]
        }
      ]
    },
    {
      "title": "eddsa-jcs-2022 (interop)",
      "ctx": null,
      "suites": [],
      "root": false,
      "pending": false,
      "_retries": -1,
      "_beforeEach": [],
      "_beforeAll": [
        {
          "title": "\"before all\" hook in \"eddsa-jcs-2022 (interop)\"",
          "body": "async function() {\n    const credentials = await generateTestData();\n    validVc = credentials.clone('validVc');\n  }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "a_6b67BnsZ378gRtxkka-",
          "ctx": null,
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/60-jcs-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 69297,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 1,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"eddsa-jcs-2022 (interop)\"",
          "body": "async function() {\n      const [issuer] = endpoints;\n      try {\n        issuedVc = await createInitialVc({issuer, vc: validVc});\n      } catch(e) {\n        console.error(`issuer ${issuerName} failed to issue interop VC`, e);\n      }\n    }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "a_6b67BnsZ378gRtxkka-",
          "ctx": null,
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/60-jcs-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 69298,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 27,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"eddsa-jcs-2022 (interop)\"",
          "body": "async function() {\n      const [issuer] = endpoints;\n      try {\n        issuedVc = await createInitialVc({issuer, vc: validVc});\n      } catch(e) {\n        console.error(`issuer ${issuerName} failed to issue interop VC`, e);\n      }\n    }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "a_6b67BnsZ378gRtxkka-",
          "ctx": null,
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/60-jcs-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 69325,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 304,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"eddsa-jcs-2022 (interop)\"",
          "body": "async function() {\n      const [issuer] = endpoints;\n      try {\n        issuedVc = await createInitialVc({issuer, vc: validVc});\n      } catch(e) {\n        console.error(`issuer ${issuerName} failed to issue interop VC`, e);\n      }\n    }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "a_6b67BnsZ378gRtxkka-",
          "ctx": null,
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/60-jcs-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 69629,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 27,
          "_error": null
        },
        {
          "title": "\"before all\" hook in \"eddsa-jcs-2022 (interop)\"",
          "body": "async function() {\n      const [issuer] = endpoints;\n      try {\n        issuedVc = await createInitialVc({issuer, vc: validVc});\n      } catch(e) {\n        console.error(`issuer ${issuerName} failed to issue interop VC`, e);\n      }\n    }",
          "async": 0,
          "sync": true,
          "_timeout": 15000,
          "_slow": 75,
          "_retries": -1,
          "timedOut": false,
          "_currentRetry": 0,
          "pending": false,
          "type": "hook",
          "parent": "a_6b67BnsZ378gRtxkka-",
          "ctx": null,
          "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/60-jcs-interop.js",
          "originalTitle": "\"before all\" hook",
          "_events": {},
          "_eventsCount": 1,
          "timer": {
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 69656,
            "_onTimeout": null,
            "_repeat": null,
            "_destroyed": true
          },
          "duration": 100,
          "_error": null
        }
      ],
      "_afterEach": [],
      "_afterAll": [],
      "_timeout": 15000,
      "_slow": 75,
      "_bail": false,
      "_onlyTests": [],
      "_onlySuites": [],
      "delayed": false,
      "parent": "DQ_CnX3Ym0TcRvd_Af9IF",
      "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/60-jcs-interop.js",
      "matrix": true,
      "report": true,
      "rowLabel": "Issuer",
      "columnLabel": "Verifier",
      "_testId": "urn:uuid:0c23b16b-9f97-42aa-b116-f594d88748b7",
      "columns": [
        "ACA-py",
        "Grotto Networking",
        "bovine"
      ],
      "rows": [
        {
          "id": "ACA-py",
          "cells": [
            {
              "type": "test",
              "title": "ACA-py should verify ACA-py",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/60-jcs-interop.js",
              "parent": "a_6b67BnsZ378gRtxkka-",
              "ctx": null,
              "_testId": "urn:uuid:eda64fff-0ece-4f6c-8e70-8efe170e56a6",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "ACA-py",
                "columnId": "ACA-py"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 69756,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected issuer: ACA-py to issue a VC: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected issuer: ACA-py to issue a VC: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/60-jcs-interop.js:48:16)\n    at process.processImmediate (node:internal/timers:483:21)"
              }
            },
            {
              "type": "test",
              "title": "Grotto Networking should verify ACA-py",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/60-jcs-interop.js",
              "parent": "a_6b67BnsZ378gRtxkka-",
              "ctx": null,
              "_testId": "urn:uuid:2c2bf2e9-a465-4c69-af63-18a316a99194",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "ACA-py",
                "columnId": "Grotto Networking"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 69756,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected issuer: ACA-py to issue a VC: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected issuer: ACA-py to issue a VC: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/60-jcs-interop.js:48:16)\n    at process.processImmediate (node:internal/timers:483:21)"
              }
            },
            {
              "type": "test",
              "title": "bovine should verify ACA-py",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/60-jcs-interop.js",
              "parent": "a_6b67BnsZ378gRtxkka-",
              "ctx": null,
              "_testId": "urn:uuid:137f291a-c4fd-470b-a82b-116d3ff82649",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "ACA-py",
                "columnId": "bovine"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 69757,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected issuer: ACA-py to issue a VC: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected issuer: ACA-py to issue a VC: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/60-jcs-interop.js:48:16)\n    at process.processImmediate (node:internal/timers:483:21)"
              }
            }
          ]
        },
        {
          "id": "Grotto Networking",
          "cells": [
            {
              "type": "test",
              "title": "ACA-py should verify Grotto Networking",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/60-jcs-interop.js",
              "parent": "a_6b67BnsZ378gRtxkka-",
              "ctx": null,
              "_testId": "urn:uuid:19fee027-7138-4b35-863c-1f8b8c6f00fa",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Grotto Networking",
                "columnId": "ACA-py"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 69757,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 30,
              "state": "passed",
              "speed": "fast"
            },
            {
              "type": "test",
              "title": "Grotto Networking should verify Grotto Networking",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/60-jcs-interop.js",
              "parent": "a_6b67BnsZ378gRtxkka-",
              "ctx": null,
              "_testId": "urn:uuid:a3f14014-618b-42e7-a4ae-7f50f45be345",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Grotto Networking",
                "columnId": "Grotto Networking"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 69786,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 673,
              "state": "passed",
              "speed": "slow"
            },
            {
              "type": "test",
              "title": "bovine should verify Grotto Networking",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/60-jcs-interop.js",
              "parent": "a_6b67BnsZ378gRtxkka-",
              "ctx": null,
              "_testId": "urn:uuid:67b2de7b-9686-43db-8f8d-398d4ebce1ec",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "Grotto Networking",
                "columnId": "bovine"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 70460,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 95,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",\"https://w3id.org/security/data-integrity/v2\"],\"id\":\"urn:uuid:4b832987-4035-4828-ad77-e1d9c5a0ae1a\",\"type\":[\"VerifiableCredential\"],\"issuer\":\"did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7\",\"issuanceDate\":\"2020-03-16T22:37:26.544Z\",\"credentialSubject\":{\"id\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\"},\"proof\":{\"type\":\"DataIntegrityProof\",\"cryptosuite\":\"eddsa-jcs-2022\",\"created\":\"2024-10-13T05:07:32.682Z\",\"verificationMethod\":\"did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7#z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7\",\"proofPurpose\":\"assertionMethod\",\"@context\":[\"https://www.w3.org/2018/credentials/v1\",\"https://w3id.org/security/data-integrity/v2\"],\"proofValue\":\"z3ahRvqTbimMzzWZGCxktEhABFRprJiMeybZ3VMjyQ1FUk1KB5hPrPiR2a9A4cfuwedvP93zZmCZvmwPazNMEJgg5\"}},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          "https://w3id.org/security/data-integrity/v2"
                        ],
                        "id": "urn:uuid:4b832987-4035-4828-ad77-e1d9c5a0ae1a",
                        "type": [
                          "VerifiableCredential"
                        ],
                        "issuer": "did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7",
                        "issuanceDate": "2020-03-16T22:37:26.544Z",
                        "credentialSubject": {
                          "id": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b"
                        },
                        "proof": {
                          "type": "DataIntegrityProof",
                          "cryptosuite": "eddsa-jcs-2022",
                          "created": "2024-10-13T05:07:32.682Z",
                          "verificationMethod": "did:key:z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7#z6MktgKTsu1QhX6QPbyqG6geXdw6FQCZBPq7uQpieWbiQiG7",
                          "proofPurpose": "assertionMethod",
                          "@context": [
                            "https://www.w3.org/2018/credentials/v1",
                            "https://w3id.org/security/data-integrity/v2"
                          ],
                          "proofValue": "z3ahRvqTbimMzzWZGCxktEhABFRprJiMeybZ3VMjyQ1FUk1KB5hPrPiR2a9A4cfuwedvP93zZmCZvmwPazNMEJgg5"
                        }
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://bovine.social/w3c-di/verify",
                  "status": 400
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(5) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/60-jcs-interop.js:56:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            }
          ]
        },
        {
          "id": "OpSecId",
          "cells": [
            {
              "type": "test",
              "title": "ACA-py should verify OpSecId",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/60-jcs-interop.js",
              "parent": "a_6b67BnsZ378gRtxkka-",
              "ctx": null,
              "_testId": "urn:uuid:78667f7a-3fd7-45f9-be0e-de5fb43651b2",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "OpSecId",
                "columnId": "ACA-py"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 70556,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected issuer: OpSecId to issue a VC: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected issuer: OpSecId to issue a VC: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/60-jcs-interop.js:48:16)\n    at process.processImmediate (node:internal/timers:483:21)"
              }
            },
            {
              "type": "test",
              "title": "Grotto Networking should verify OpSecId",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/60-jcs-interop.js",
              "parent": "a_6b67BnsZ378gRtxkka-",
              "ctx": null,
              "_testId": "urn:uuid:8d0d09c5-58c9-4fea-b90c-70dd9ce8e97a",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "OpSecId",
                "columnId": "Grotto Networking"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 70556,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 1,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected issuer: OpSecId to issue a VC: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected issuer: OpSecId to issue a VC: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/60-jcs-interop.js:48:16)\n    at process.processImmediate (node:internal/timers:483:21)"
              }
            },
            {
              "type": "test",
              "title": "bovine should verify OpSecId",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/60-jcs-interop.js",
              "parent": "a_6b67BnsZ378gRtxkka-",
              "ctx": null,
              "_testId": "urn:uuid:3b21c311-5803-47ea-89d1-6f06bd83e649",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "OpSecId",
                "columnId": "bovine"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 70556,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 0,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected issuer: OpSecId to issue a VC: expected undefined to exist",
                "showDiff": false,
                "operator": "strictEqual",
                "stack": "AssertionError: Expected issuer: OpSecId to issue a VC: expected undefined to exist\n    at should.exist (node_modules/chai/lib/chai/interface/should.js:144:34)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/60-jcs-interop.js:48:16)\n    at process.processImmediate (node:internal/timers:483:21)"
              }
            }
          ]
        },
        {
          "id": "bovine",
          "cells": [
            {
              "type": "test",
              "title": "ACA-py should verify bovine",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/60-jcs-interop.js",
              "parent": "a_6b67BnsZ378gRtxkka-",
              "ctx": null,
              "_testId": "urn:uuid:b1385741-c3dd-496e-94b7-cc74d97b7a6f",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "bovine",
                "columnId": "ACA-py"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 70557,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 31,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",\"https://w3id.org/security/data-integrity/v2\"],\"credentialSubject\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\",\"id\":\"urn:uuid:dabdb984-2128-411b-bf5c-45b8bbfd022f\",\"issuanceDate\":\"2020-03-16T22:37:26.544Z\",\"issuer\":\"did:key:z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd\",\"proof\":{\"created\":\"2024-10-13T05:07:32Z\",\"cryptosuite\":\"eddsa-jcs-2022\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z2ATyHrBh3aTzv7Zi4xBvCji8N2gXvZ1MJZMrHn8STxLCzBuw4Ah8oEtcZxhdEhDbrrW3N8LeMGZwJ1oMSY4U4CUN\",\"type\":\"DataIntegrityProof\",\"verificationMethod\":\"did:key:z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd#z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd\"},\"type\":\"VerifiableCredential\"},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          "https://w3id.org/security/data-integrity/v2"
                        ],
                        "credentialSubject": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b",
                        "id": "urn:uuid:dabdb984-2128-411b-bf5c-45b8bbfd022f",
                        "issuanceDate": "2020-03-16T22:37:26.544Z",
                        "issuer": "did:key:z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd",
                        "proof": {
                          "created": "2024-10-13T05:07:32Z",
                          "cryptosuite": "eddsa-jcs-2022",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "z2ATyHrBh3aTzv7Zi4xBvCji8N2gXvZ1MJZMrHn8STxLCzBuw4Ah8oEtcZxhdEhDbrrW3N8LeMGZwJ1oMSY4U4CUN",
                          "type": "DataIntegrityProof",
                          "verificationMethod": "did:key:z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd#z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd"
                        },
                        "type": "VerifiableCredential"
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://aca-py.test-suite.app/vc/credentials/verify",
                  "status": 422,
                  "data": {
                    "json": {
                      "verifiableCredential": {
                        "type": [
                          "Not a valid list."
                        ],
                        "credentialSubject": [
                          "Field should be dict or list of dicts"
                        ]
                      }
                    }
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/60-jcs-interop.js:56:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "Grotto Networking should verify bovine",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/60-jcs-interop.js",
              "parent": "a_6b67BnsZ378gRtxkka-",
              "ctx": null,
              "_testId": "urn:uuid:ae1d0a23-faac-470d-8b97-b6956a890231",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "bovine",
                "columnId": "Grotto Networking"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 70588,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 845,
              "state": "failed",
              "err": {
                "name": "AssertionError",
                "message": "Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist",
                "showDiff": false,
                "actual": {
                  "response": {},
                  "request": {},
                  "options": {
                    "headers": {},
                    "body": "{\"verifiableCredential\":{\"@context\":[\"https://www.w3.org/2018/credentials/v1\",\"https://w3id.org/security/data-integrity/v2\"],\"credentialSubject\":\"did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b\",\"id\":\"urn:uuid:dabdb984-2128-411b-bf5c-45b8bbfd022f\",\"issuanceDate\":\"2020-03-16T22:37:26.544Z\",\"issuer\":\"did:key:z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd\",\"proof\":{\"created\":\"2024-10-13T05:07:32Z\",\"cryptosuite\":\"eddsa-jcs-2022\",\"proofPurpose\":\"assertionMethod\",\"proofValue\":\"z2ATyHrBh3aTzv7Zi4xBvCji8N2gXvZ1MJZMrHn8STxLCzBuw4Ah8oEtcZxhdEhDbrrW3N8LeMGZwJ1oMSY4U4CUN\",\"type\":\"DataIntegrityProof\",\"verificationMethod\":\"did:key:z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd#z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd\"},\"type\":\"VerifiableCredential\"},\"options\":{\"checks\":[\"proof\"]}}",
                    "method": "POST",
                    "json": {
                      "verifiableCredential": {
                        "@context": [
                          "https://www.w3.org/2018/credentials/v1",
                          "https://w3id.org/security/data-integrity/v2"
                        ],
                        "credentialSubject": "did:key:z6MktKwz7Ge1Yxzr4JHavN33wiwa8y81QdcMRLXQsrH9T53b",
                        "id": "urn:uuid:dabdb984-2128-411b-bf5c-45b8bbfd022f",
                        "issuanceDate": "2020-03-16T22:37:26.544Z",
                        "issuer": "did:key:z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd",
                        "proof": {
                          "created": "2024-10-13T05:07:32Z",
                          "cryptosuite": "eddsa-jcs-2022",
                          "proofPurpose": "assertionMethod",
                          "proofValue": "z2ATyHrBh3aTzv7Zi4xBvCji8N2gXvZ1MJZMrHn8STxLCzBuw4Ah8oEtcZxhdEhDbrrW3N8LeMGZwJ1oMSY4U4CUN",
                          "type": "DataIntegrityProof",
                          "verificationMethod": "did:key:z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd#z6MkuEij7SCByU2MNp6Ec4iiLWdqEepvxawtq5LgqbymdsXd"
                        },
                        "type": "VerifiableCredential"
                      },
                      "options": {
                        "checks": [
                          "proof"
                        ]
                      }
                    },
                    "agent": {
                      "_events": {},
                      "_eventsCount": 2,
                      "defaultPort": 443,
                      "protocol": "https:",
                      "options": {
                        "rejectUnauthorized": false,
                        "noDelay": true,
                        "path": null
                      },
                      "requests": {},
                      "sockets": {},
                      "freeSockets": {},
                      "keepAliveMsecs": 1000,
                      "keepAlive": false,
                      "maxSockets": null,
                      "maxFreeSockets": 256,
                      "scheduling": "lifo",
                      "maxTotalSockets": null,
                      "totalSocketCount": 0,
                      "maxCachedSessions": 100,
                      "_sessionCache": {
                        "map": {},
                        "list": []
                      }
                    },
                    "hooks": {
                      "beforeRequest": [],
                      "beforeRetry": [],
                      "afterResponse": [],
                      "beforeError": []
                    },
                    "prefixUrl": "",
                    "retry": {
                      "limit": 2,
                      "methods": [
                        "get",
                        "put",
                        "head",
                        "delete",
                        "options",
                        "trace"
                      ],
                      "statusCodes": [
                        408,
                        413,
                        429,
                        500,
                        502,
                        503,
                        504
                      ],
                      "afterStatusCodes": [
                        413,
                        429,
                        503
                      ],
                      "maxRetryAfter": null,
                      "backoffLimit": null
                    },
                    "throwHttpErrors": true,
                    "timeout": 10000,
                    "signal": {},
                    "duplex": "half"
                  },
                  "name": "HTTPError",
                  "requestUrl": "https://ecdsa-sd.grotto-networking.com/EdDSA-JCS/credentials/verify",
                  "status": 400,
                  "data": {
                    "errors": [
                      "proof: must be object,array"
                    ]
                  }
                },
                "operator": "notStrictEqual",
                "stack": "AssertionError: Expected verifier to not error.: expected HTTPError: Request failed with status cod… { …(6) } to not exist\n    at should.not.exist (node_modules/chai/lib/chai/interface/should.js:208:38)\n    at Context.<anonymous> (file:///home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/60-jcs-interop.js:56:20)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)"
              }
            },
            {
              "type": "test",
              "title": "bovine should verify bovine",
              "body": "async function() {\n        this.test.cell = {rowId: issuerName, columnId: verifierName};\n        should.exist(issuedVc, `Expected issuer: ${issuerName} to issue a VC`);\n        const body = {\n          verifiableCredential: issuedVc,\n          options: {\n            checks: ['proof']\n          }\n        };\n        const {result, error} = await verifier.post({json: body});\n        should.not.exist(error, 'Expected verifier to not error.');\n        should.exist(result, 'Expected result from verifier.');\n        should.exist(result.status, 'Expected verifier to return an HTTP' +\n          'status code');\n        result.status.should.equal(200, 'Expected HTTP status code to be 200.');\n      }",
              "async": 0,
              "sync": true,
              "_timeout": 15000,
              "_slow": 75,
              "_retries": -1,
              "timedOut": false,
              "_currentRetry": 0,
              "pending": false,
              "file": "/home/runner/work/vc-di-eddsa-test-suite/vc-di-eddsa-test-suite/tests/60-jcs-interop.js",
              "parent": "a_6b67BnsZ378gRtxkka-",
              "ctx": null,
              "_testId": "urn:uuid:14f57908-23fb-4705-b670-025d04ba7f17",
              "_events": {},
              "_eventsCount": 1,
              "cell": {
                "rowId": "bovine",
                "columnId": "bovine"
              },
              "timer": {
                "_idleTimeout": -1,
                "_idlePrev": null,
                "_idleNext": null,
                "_idleStart": 71436,
                "_onTimeout": null,
                "_repeat": null,
                "_destroyed": true
              },
              "duration": 96,
              "state": "passed",
              "speed": "slow"
            }
          ]
        }
      ]
    },
    {
      "title": "At Risk",
      "rowLabel": "Statement",
      "columnLabel": "Reason",
      "columns": [
        "At least 2 passing implementations"
      ],
      "rows": [
        {
          "id": "An OPTIONAL string value (proof.previousProof) or unordered list of string values. Each value identifies another data integrity proof that MUST verify before the current proof is processed.",
          "link": "https://w3c.github.io/vc-data-integrity/#proofs:~:text=An%20OPTIONAL%20string%20value%20or%20unordered%20list%20of%20string%20values.%20Each%20value%20identifies%20another%20data%20integrity%20proof%20that%20MUST%20verify%20before%20the%20current%20proof%20is%20processed",
          "cells": [
            {
              "state": "failed"
            }
          ]
        },
        {
          "id": "verifies a valid eddsa-jcs-2022 proof.",
          "cells": [
            {
              "state": "failed"
            }
          ]
        }
      ]
    }
  ],
  "tables": [],
  "summary": [],
  "respecConfig": {
    "specStatus": "base",
    "shortName": "vc-di-eddsa-test-suite",
    "subtitle": "Interoperability test suite for EdDSA Data Integrity cryptosuites.",
    "github": "https://github.com/w3c/vc-di-eddsa-test-suite",
    "edDraftURI": "https://w3c.github.io/vc-di-eddsa-test-suite",
    "doJsonLd": true,
    "includePermalinks": false,
    "editors": [
      {
        "name": "Andrew Jones",
        "url": "https://github.com/aljones15",
        "company": "Digital Bazaar",
        "companyURL": "http://digitalbazaar.com/"
      }
    ],
    "authors": [
      {
        "name": "Andrew Jones",
        "url": "https://github.com/aljones15",
        "company": "Digital Bazaar",
        "companyURL": "http://digitalbazaar.com/"
      },
      {
        "name": "Manu Sporny",
        "url": "http://manu.sporny.org/",
        "company": "Digital Bazaar",
        "companyURL": "http://digitalbazaar.com/ "
      }
    ]
  },
  "title": "Data Integrity eddsa 2022 Interoperability Report 1.0",
  "stats": [
    "Tests passed 330/422 78%",
    "Tests failed 97/422 23%",
    "Failures 97",
    "Tests skipped 0",
    "Total tests 422"
  ],
  "statusMarkLabels": {
    "pending": {
      "icon": "🚫",
      "label": "Pending"
    },
    "passed": {
      "icon": "✓",
      "label": "Passed"
    },
    "failed": {
      "icon": "❌",
      "label": "Failed"
    },
    "accessDenied": {
      "icon": "⊘",
      "label": "Access Denied"
    },
    "timeout": {
      "icon": "⏱",
      "label": "Timeout"
    },
    "notImplemented": {
      "icon": "—",
      "label": "Not Implemented"
    }
  }
}